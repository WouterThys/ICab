

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 26 21:28:47 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.44
    51                           ; Generated 14/09/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F2550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  001628                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _ackCharacter
    90  001628  1A                 	db	low STR_4
    91  001629  08                 	db	high STR_4
    92                           
    93                           ;initializer for _stopCharacter
    94  00162A  31                 	db	low STR_2
    95  00162B  08                 	db	high STR_2
    96                           
    97                           ;initializer for _startCharacter
    98  00162C  33                 	db	low STR_1
    99  00162D  08                 	db	high STR_1
   100                           
   101                           	psect	idataBANK0
   102  00162E                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _messageCharacter
   106  00162E  1E                 	db	low STR_3
   107  00162F  08                 	db	high STR_3
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	opt stack 0
   112  000800  00                 	db	0
   113  000801                     _hexpowers:
   114                           	opt stack 0
   115  000801  0001               	dw	1
   116  000803  0010               	dw	16
   117  000805  0100               	dw	256
   118  000807  1000               	dw	4096
   119  000809                     __end_of_hexpowers:
   120                           	opt stack 0
   121  0000                     _INTCON2bits	set	4081
   122  0000                     _T0CONbits	set	4053
   123  0000                     _PIE1bits	set	3997
   124  0000                     _IPR1bits	set	3999
   125  0000                     _PIR1bits	set	3998
   126  0000                     _INTCONbits	set	4082
   127  0000                     _RCONbits	set	4048
   128  0000                     _SPBRG	set	4015
   129  0000                     _BAUDCONbits	set	4024
   130  0000                     _TRISCbits	set	3988
   131  0000                     _RCREG	set	4014
   132  0000                     _RCSTAbits	set	4011
   133  0000                     _TXREG	set	4013
   134  0000                     _TXSTAbits	set	4012
   135  0000                     _ADCON1	set	4033
   136  0000                     _PORTC	set	3970
   137  0000                     _TRISC	set	3988
   138  0000                     _PORTA	set	3968
   139  0000                     _TRISA	set	3986
   140  0000                     _TRISB	set	3987
   141  0000                     _PORTB	set	3969
   142  000809                     STR_17:
   143  000809  30                 	db	48	;'0'
   144  00080A  31                 	db	49	;'1'
   145  00080B  32                 	db	50	;'2'
   146  00080C  33                 	db	51	;'3'
   147  00080D  34                 	db	52	;'4'
   148  00080E  35                 	db	53	;'5'
   149  00080F  36                 	db	54	;'6'
   150  000810  37                 	db	55	;'7'
   151  000811  38                 	db	56	;'8'
   152  000812  39                 	db	57	;'9'
   153  000813  61                 	db	97	;'a'
   154  000814  62                 	db	98	;'b'
   155  000815  63                 	db	99	;'c'
   156  000816  64                 	db	100	;'d'
   157  000817  65                 	db	101	;'e'
   158  000818  66                 	db	102	;'f'
   159  000819  00                 	db	0
   160  00081A                     STR_4:
   161  00081A  5B                 	db	91	;'['
   162  00081B  41                 	db	65	;'A'
   163  00081C  5D                 	db	93	;']'
   164  00081D  00                 	db	0
   165  00081E                     STR_3:
   166  00081E  5B                 	db	91	;'['
   167  00081F  4D                 	db	77	;'M'
   168  000820  5D                 	db	93	;']'
   169  000821  00                 	db	0
   170  000822                     STR_5:
   171  000822  25                 	db	37
   172  000823  78                 	db	120	;'x'
   173  000824  00                 	db	0
   174  000825                     STR_15:
   175  000825  45                 	db	69	;'E'
   176  000826  00                 	db	0
   177  000827                     STR_9:
   178  000827  49                 	db	73	;'I'
   179  000828  00                 	db	0
   180  000829                     STR_11:
   181  000829  4C                 	db	76	;'L'
   182  00082A  00                 	db	0
   183  00082B                     STR_8:
   184  00082B  50                 	db	80	;'P'
   185  00082C  00                 	db	0
   186  00082D                     STR_14:
   187  00082D  52                 	db	82	;'R'
   188  00082E  00                 	db	0
   189  00082F                     STR_12:
   190  00082F  55                 	db	85	;'U'
   191  000830  00                 	db	0
   192  000831                     STR_2:
   193  000831  24                 	db	36
   194  000832  00                 	db	0
   195  000833                     STR_1:
   196  000833  26                 	db	38
   197  000834  00                 	db	0
   198  000835                     STR_6:
   199  000835  3A                 	db	58	;':'
   200  000836  00                 	db	0
   201  0000                     
   202                           ; #config settings
   203  000837  00                 	db	0	; dummy byte at the end
   204  0000                     
   205                           	psect	cinit
   206  0013DA                     __pcinit:
   207                           	opt stack 0
   208  0013DA                     start_initialization:
   209                           	opt stack 0
   210  0013DA                     __initialization:
   211                           	opt stack 0
   212                           
   213                           ; Initialize objects allocated to BANK0 (2 bytes)
   214                           ; load TBLPTR registers with __pidataBANK0
   215  0013DA  0E2E               	movlw	low __pidataBANK0
   216  0013DC  6EF6               	movwf	tblptrl,c
   217  0013DE  0E16               	movlw	high __pidataBANK0
   218  0013E0  6EF7               	movwf	tblptrh,c
   219  0013E2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   220  0013E4  6EF8               	movwf	tblptru,c
   221  0013E6  0009               	tblrd		*+	;fetch initializer
   222  0013E8  CFF5 F0C4          	movff	tablat,__pdataBANK0
   223  0013EC  0009               	tblrd		*+	;fetch initializer
   224  0013EE  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   225                           
   226                           ; Initialize objects allocated to COMRAM (6 bytes)
   227                           ; load TBLPTR registers with __pidataCOMRAM
   228  0013F2  0E28               	movlw	low __pidataCOMRAM
   229  0013F4  6EF6               	movwf	tblptrl,c
   230  0013F6  0E16               	movlw	high __pidataCOMRAM
   231  0013F8  6EF7               	movwf	tblptrh,c
   232  0013FA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   233  0013FC  6EF8               	movwf	tblptru,c
   234  0013FE  EE00  F03D         	lfsr	0,__pdataCOMRAM
   235  001402  EE10 F006          	lfsr	1,6
   236  001406                     copy_data0:
   237  001406  0009               	tblrd		*+
   238  001408  CFF5 FFEE          	movff	tablat,postinc0
   239  00140C  50E5               	movf	postdec1,w,c
   240  00140E  50E1               	movf	fsr1l,w,c
   241  001410  E1FA               	bnz	copy_data0
   242                           
   243                           ; Clear objects allocated to BANK1 (166 bytes)
   244  001412  EE01  F000         	lfsr	0,__pbssBANK1
   245  001416  0EA6               	movlw	166
   246  001418                     clear_0:
   247  001418  6AEE               	clrf	postinc0,c
   248  00141A  06E8               	decf	wreg,f,c
   249  00141C  E1FD               	bnz	clear_0
   250                           
   251                           ; Clear objects allocated to BANK0 (67 bytes)
   252  00141E  EE00  F060         	lfsr	0,__pbssBANK0
   253  001422  0E43               	movlw	67
   254  001424                     clear_1:
   255  001424  6AEE               	clrf	postinc0,c
   256  001426  06E8               	decf	wreg,f,c
   257  001428  E1FD               	bnz	clear_1
   258                           
   259                           ; Clear objects allocated to COMRAM (1 bytes)
   260  00142A  6A43               	clrf	__pbssCOMRAM& (0+255),c
   261  00142C                     end_of_initialization:
   262                           	opt stack 0
   263  00142C                     __end_of__initialization:
   264                           	opt stack 0
   265  00142C  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  00142E  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  001430  0100               	movlb	0
   268  001432  EFE8  F004         	goto	_main	;jump to C main() function
   269                           tblptru	equ	0xFF8
   270                           tblptrh	equ	0xFF7
   271                           tblptrl	equ	0xFF6
   272                           tablat	equ	0xFF5
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           postdec1	equ	0xFE5
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	bssCOMRAM
   279  000043                     __pbssCOMRAM:
   280                           	opt stack 0
   281  000043                     _baud:
   282                           	opt stack 0
   283  000043                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	dataCOMRAM
   294  00003D                     __pdataCOMRAM:
   295                           	opt stack 0
   296  00003D                     _ackCharacter:
   297                           	opt stack 0
   298  00003D                     	ds	2
   299  00003F                     _stopCharacter:
   300                           	opt stack 0
   301  00003F                     	ds	2
   302  000041                     _startCharacter:
   303                           	opt stack 0
   304  000041                     	ds	2
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	bssBANK0
   315  000060                     __pbssBANK0:
   316                           	opt stack 0
   317  000060                     _doors:
   318                           	opt stack 0
   319  000060                     	ds	50
   320  000092                     _read:
   321                           	opt stack 0
   322  000092                     	ds	6
   323  000098                     _readData:
   324                           	opt stack 0
   325  000098                     	ds	6
   326  00009E                     _deviceName:
   327                           	opt stack 0
   328  00009E                     	ds	3
   329  0000A1                     _tick:
   330                           	opt stack 0
   331  0000A1                     	ds	1
   332  0000A2                     _readReady:
   333                           	opt stack 0
   334  0000A2                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	dataBANK0
   345  0000C4                     __pdataBANK0:
   346                           	opt stack 0
   347  0000C4                     _messageCharacter:
   348                           	opt stack 0
   349  0000C4                     	ds	2
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	bssBANK1
   360  000100                     __pbssBANK1:
   361                           	opt stack 0
   362  000100                     _readBuffer:
   363                           	opt stack 0
   364  000100                     	ds	166
   365                           tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1l	equ	0xFE1
   373                           
   374                           	psect	cstackBANK0
   375  0000A3                     __pcstackBANK0:
   376                           	opt stack 0
   377  0000A3                     ??_C_DOOR_ReadSensors:
   378  0000A3                     ?_strcmp:
   379                           	opt stack 0
   380  0000A3                     ?___lwdiv:
   381                           	opt stack 0
   382  0000A3                     ?___aldiv:
   383                           	opt stack 0
   384  0000A3                     ?_D_UART_Read:
   385                           	opt stack 0
   386  0000A3                     C_DOOR_Init@d:
   387                           	opt stack 0
   388  0000A3                     writeByte@data:
   389                           	opt stack 0
   390  0000A3                     D_UART_Enable@enable:
   391                           	opt stack 0
   392  0000A3                     D_TMR0_Enable@enable:
   393                           	opt stack 0
   394  0000A3                     ___lwdiv@dividend:
   395                           	opt stack 0
   396  0000A3                     strcmp@s1:
   397                           	opt stack 0
   398  0000A3                     ___aldiv@dividend:
   399                           	opt stack 0
   400  0000A3                     commandAndMessage@door:
   401                           	opt stack 0
   402                           
   403                           ; 10 bytes @ 0x0
   404  0000A3                     	ds	1
   405  0000A4                     putch@data:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x1
   409  0000A4                     	ds	1
   410  0000A5                     ___lwdiv@divisor:
   411                           	opt stack 0
   412  0000A5                     strcmp@s2:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x2
   416  0000A5                     	ds	2
   417  0000A7                     ??_strcmp:
   418  0000A7                     C_DOOR_ReadSensors@d:
   419                           	opt stack 0
   420  0000A7                     ___lwdiv@quotient:
   421                           	opt stack 0
   422  0000A7                     ___aldiv@divisor:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x4
   426  0000A7                     	ds	1
   427  0000A8                     strcmp@r:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x5
   431  0000A8                     	ds	1
   432  0000A9                     ___lwdiv@counter:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x6
   436  0000A9                     	ds	1
   437  0000AA                     ?_printf:
   438                           	opt stack 0
   439  0000AA                     printf@f:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0x7
   443  0000AA                     	ds	1
   444  0000AB                     ___aldiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x8
   448  0000AB                     	ds	1
   449  0000AC                     ___aldiv@sign:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x9
   453  0000AC                     	ds	1
   454  0000AD                     printf@flag:
   455                           	opt stack 0
   456  0000AD                     commandAndMessage@com:
   457                           	opt stack 0
   458  0000AD                     ___aldiv@quotient:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0xA
   462  0000AD                     	ds	1
   463  0000AE                     printf@ap:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xB
   467  0000AE                     	ds	1
   468  0000AF                     commandAndMessage@mes:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xC
   472  0000AF                     	ds	1
   473  0000B0                     printf@idx:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0xD
   477  0000B0                     	ds	1
   478  0000B1                     D_UART_Init@name:
   479                           	opt stack 0
   480  0000B1                     printf@val:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0xE
   484  0000B1                     	ds	2
   485  0000B3                     printf@prec:
   486                           	opt stack 0
   487  0000B3                     D_UART_Init@baud:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x10
   491  0000B3                     	ds	1
   492  0000B4                     printf@c:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x11
   496  0000B4                     	ds	1
   497  0000B5                     D_UART_Init@interrupts:
   498                           	opt stack 0
   499  0000B5                     D_UART_Write@command:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x12
   503  0000B5                     	ds	1
   504  0000B6                     _D_UART_Init$1498:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x13
   508  0000B6                     	ds	1
   509  0000B7                     D_UART_Write@data:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x14
   513  0000B7                     	ds	2
   514  0000B9                     ??_D_UART_Write:
   515                           
   516                           ; 1 bytes @ 0x16
   517  0000B9                     	ds	1
   518  0000BA                     
   519                           ; 1 bytes @ 0x17
   520  0000BA                     	ds	2
   521  0000BC                     C_DOOR_SendStates@com:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x19
   525  0000BC                     	ds	3
   526  0000BF                     C_DOOR_SendStates@mes:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x1C
   530  0000BF                     	ds	2
   531  0000C1                     C_DOOR_SendStates@d:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1E
   535  0000C1                     	ds	1
   536  0000C2                     ??_main:
   537                           
   538                           ; 1 bytes @ 0x1F
   539  0000C2                     	ds	2
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           
   549                           	psect	cstackCOMRAM
   550  000001                     __pcstackCOMRAM:
   551                           	opt stack 0
   552  000001                     ??_HighISR:
   553  000001                     
   554                           ; 1 bytes @ 0x0
   555  000001                     	ds	18
   556  000013                     ?i1___lwdiv:
   557                           	opt stack 0
   558  000013                     i1writeByte@data:
   559                           	opt stack 0
   560  000013                     i1___lwdiv@dividend:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x12
   564  000013                     	ds	1
   565  000014                     i1putch@data:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x13
   569  000014                     	ds	1
   570  000015                     i1___lwdiv@divisor:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x14
   574  000015                     	ds	2
   575  000017                     i1___lwdiv@quotient:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x16
   579  000017                     	ds	2
   580  000019                     i1___lwdiv@counter:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x18
   584  000019                     	ds	1
   585  00001A                     ?i1_printf:
   586                           	opt stack 0
   587  00001A                     i1printf@f:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x19
   591  00001A                     	ds	5
   592  00001F                     i1printf@flag:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x1E
   596  00001F                     	ds	1
   597  000020                     i1printf@ap:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x1F
   601  000020                     	ds	2
   602  000022                     i1printf@idx:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x21
   606  000022                     	ds	1
   607  000023                     i1printf@val:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x22
   611  000023                     	ds	2
   612  000025                     i1printf@prec:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x24
   616  000025                     	ds	1
   617  000026                     i1printf@c:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x25
   621  000026                     	ds	1
   622  000027                     fillDataBuffer@data:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x26
   626  000027                     	ds	1
   627  000028                     ??_LowISR:
   628                           
   629                           ; 1 bytes @ 0x27
   630  000028                     	ds	21
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           
   640 ;;
   641 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   642 ;;
   643 ;; *************** function _main *****************
   644 ;; Defined at:
   645 ;;		line 24 in file "main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   659 ;;      Params:         0       0       0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0
   661 ;;      Temps:          0       2       0       0       0       0       0       0       0
   662 ;;      Totals:         0       2       0       0       0       0       0       0       0
   663 ;;Total ram usage:        2 bytes
   664 ;; Hardware stack levels required when called:   12
   665 ;; This function calls:
   666 ;;		_C_DOOR_Init
   667 ;;		_C_DOOR_LockAll
   668 ;;		_C_DOOR_ReadSensors
   669 ;;		_C_DOOR_SendStates
   670 ;;		_C_DOOR_UnlockAll
   671 ;;		_D_PORT_Init
   672 ;;		_D_TMR0_Enable
   673 ;;		_D_TMR0_Init
   674 ;;		_D_UART_Enable
   675 ;;		_D_UART_Init
   676 ;;		_D_UART_Read
   677 ;;		_D_UART_Write
   678 ;;		_strcmp
   679 ;; This function is called by:
   680 ;;		Startup code after reset
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text0
   685  0009D0                     __ptext0:
   686                           	opt stack 0
   687  0009D0                     _main:
   688                           	opt stack 19
   689                           
   690                           ;main.c: 25: _delay((unsigned long)((200)*(16000000/4000.0)));
   691                           
   692                           ;incstack = 0
   693  0009D0  0E05               	movlw	5
   694  0009D2  0100               	movlb	0	; () banked
   695  0009D4  6FC3               	movwf	(??_main+1)& (0+255),b
   696  0009D6  0E0F               	movlw	15
   697  0009D8  6FC2               	movwf	??_main& (0+255),b
   698  0009DA  0EF1               	movlw	241
   699  0009DC                     u1517:
   700  0009DC  2EE8               	decfsz	wreg,f,c
   701  0009DE  D7FE               	bra	u1517
   702  0009E0  2FC2               	decfsz	??_main& (0+255),f,b
   703  0009E2  D7FC               	bra	u1517
   704  0009E4  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   705  0009E6  D7FA               	bra	u1517
   706                           
   707                           ;main.c: 27: D_PORT_Init();
   708  0009E8  ECD0  F00A         	call	_D_PORT_Init	;wreg free
   709                           
   710                           ;main.c: 31: D_UART_Init("P", 9600, 1);
   711  0009EC  0E2B               	movlw	low STR_8
   712  0009EE  0100               	movlb	0	; () banked
   713  0009F0  6FB1               	movwf	D_UART_Init@name& (0+255),b
   714  0009F2  0E08               	movlw	high STR_8
   715  0009F4  6FB2               	movwf	(D_UART_Init@name+1)& (0+255),b
   716  0009F6  0E25               	movlw	37
   717  0009F8  6FB4               	movwf	(D_UART_Init@baud+1)& (0+255),b
   718  0009FA  0E80               	movlw	128
   719  0009FC  6FB3               	movwf	D_UART_Init@baud& (0+255),b
   720  0009FE  0E01               	movlw	1
   721  000A00  6FB5               	movwf	D_UART_Init@interrupts& (0+255),b
   722  000A02  ECA4  F008         	call	_D_UART_Init	;wreg free
   723                           
   724                           ;main.c: 32: D_UART_Enable(1);
   725  000A06  0E01               	movlw	1
   726  000A08  ECAC  F00A         	call	_D_UART_Enable
   727                           
   728                           ;main.c: 35: D_TMR0_Init();
   729  000A0C  ECBE  F00A         	call	_D_TMR0_Init	;wreg free
   730                           
   731                           ;main.c: 38: C_DOOR_Init();
   732  000A10  ECEC  F006         	call	_C_DOOR_Init	;wreg free
   733                           
   734                           ;main.c: 39: C_DOOR_UnlockAll();
   735  000A14  ECE9  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   736                           
   737                           ;main.c: 41: _delay((unsigned long)((200)*(16000000/4000.0)));
   738  000A18  0E05               	movlw	5
   739  000A1A  0100               	movlb	0	; () banked
   740  000A1C  6FC3               	movwf	(??_main+1)& (0+255),b
   741  000A1E  0E0F               	movlw	15
   742  000A20  6FC2               	movwf	??_main& (0+255),b
   743  000A22  0EF1               	movlw	241
   744  000A24                     u1527:
   745  000A24  2EE8               	decfsz	wreg,f,c
   746  000A26  D7FE               	bra	u1527
   747  000A28  2FC2               	decfsz	??_main& (0+255),f,b
   748  000A2A  D7FC               	bra	u1527
   749  000A2C  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   750  000A2E  D7FA               	bra	u1527
   751                           
   752                           ;main.c: 42: D_UART_Write("I", "I");
   753  000A30  0E27               	movlw	low STR_9
   754  000A32  0100               	movlb	0	; () banked
   755  000A34  6FB5               	movwf	D_UART_Write@command& (0+255),b
   756  000A36  0E08               	movlw	high STR_9
   757  000A38  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
   758  000A3A  0E27               	movlw	low STR_9
   759  000A3C  6FB7               	movwf	D_UART_Write@data& (0+255),b
   760  000A3E  0E08               	movlw	high STR_9
   761  000A40  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
   762  000A42  EC69  F007         	call	_D_UART_Write	;wreg free
   763                           
   764                           ;main.c: 45: D_TMR0_Enable(1);
   765  000A46  0E01               	movlw	1
   766  000A48  ECDF  F00A         	call	_D_TMR0_Enable
   767  000A4C                     
   768                           ;main.c: 49: if (readReady) {
   769  000A4C  0100               	movlb	0	; () banked
   770  000A4E  51A2               	movf	_readReady& (0+255),w,b
   771  000A50  B4D8               	btfsc	status,2,c
   772  000A52  D066               	goto	l248
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 50: readReady = 0;
   776  000A54  0E00               	movlw	0
   777  000A56  6FA2               	movwf	_readReady& (0+255),b
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 51: read = D_UART_Read();
   781  000A58  EC95  F00A         	call	_D_UART_Read	;wreg free
   782  000A5C  EE20  F092         	lfsr	2,_read
   783  000A60  0E05               	movlw	5
   784  000A62                     u1441:
   785  000A62  CFEB FFDB          	movff	plusw0,plusw2
   786  000A66  06E8               	decf	wreg,f,c
   787  000A68  E2FC               	bc	u1441
   788                           
   789                           ;main.c: 52: if (strcmp(read.command, "L") == 0) {
   790  000A6A  C094  F0A3         	movff	_read+2,strcmp@s1
   791  000A6E  C095  F0A4         	movff	_read+3,strcmp@s1+1
   792  000A72  0E29               	movlw	low STR_11
   793  000A74  0100               	movlb	0	; () banked
   794  000A76  6FA5               	movwf	strcmp@s2& (0+255),b
   795  000A78  0E08               	movlw	high STR_11
   796  000A7A  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   797  000A7C  EC6E  F00A         	call	_strcmp	;wreg free
   798  000A80  0100               	movlb	0	; () banked
   799  000A82  51A3               	movf	?_strcmp& (0+255),w,b
   800  000A84  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   801  000A86  A4D8               	btfss	status,2,c
   802  000A88  D003               	goto	l241
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 53: C_DOOR_LockAll();
   806  000A8A  ECFE  F00A         	call	_C_DOOR_LockAll	;wreg free
   807                           
   808                           ;main.c: 54: } else if (strcmp(read.command, "U") == 0) {
   809  000A8E  D048               	goto	l248
   810  000A90                     l241:
   811  000A90  C094  F0A3         	movff	_read+2,strcmp@s1
   812  000A94  C095  F0A4         	movff	_read+3,strcmp@s1+1
   813  000A98  0E2F               	movlw	low STR_12
   814  000A9A  0100               	movlb	0	; () banked
   815  000A9C  6FA5               	movwf	strcmp@s2& (0+255),b
   816  000A9E  0E08               	movlw	high STR_12
   817  000AA0  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   818  000AA2  EC6E  F00A         	call	_strcmp	;wreg free
   819  000AA6  0100               	movlb	0	; () banked
   820  000AA8  51A3               	movf	?_strcmp& (0+255),w,b
   821  000AAA  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   822  000AAC  A4D8               	btfss	status,2,c
   823  000AAE  D003               	goto	l243
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 55: C_DOOR_UnlockAll();
   827  000AB0  ECE9  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   828                           
   829                           ;main.c: 56: } else if (strcmp(read.command, "I") == 0) {
   830  000AB4  D035               	goto	l248
   831  000AB6                     l243:
   832  000AB6  C094  F0A3         	movff	_read+2,strcmp@s1
   833  000ABA  C095  F0A4         	movff	_read+3,strcmp@s1+1
   834  000ABE  0E27               	movlw	low STR_9
   835  000AC0  0100               	movlb	0	; () banked
   836  000AC2  6FA5               	movwf	strcmp@s2& (0+255),b
   837  000AC4  0E08               	movlw	high STR_9
   838  000AC6  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   839  000AC8  EC6E  F00A         	call	_strcmp	;wreg free
   840  000ACC  0100               	movlb	0	; () banked
   841  000ACE  51A3               	movf	?_strcmp& (0+255),w,b
   842  000AD0  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   843  000AD2  B4D8               	btfsc	status,2,c
   844  000AD4  D025               	goto	l248
   845                           
   846                           ; BSR set to: 0
   847                           
   848                           ; BSR set to: 0
   849                           
   850                           ; BSR set to: 0
   851                           ;main.c: 58: } else if (strcmp(read.command, "R") == 0) {
   852  000AD6  C094  F0A3         	movff	_read+2,strcmp@s1
   853  000ADA  C095  F0A4         	movff	_read+3,strcmp@s1+1
   854  000ADE  0E2D               	movlw	low STR_14
   855  000AE0  6FA5               	movwf	strcmp@s2& (0+255),b
   856  000AE2  0E08               	movlw	high STR_14
   857  000AE4  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   858  000AE6  EC6E  F00A         	call	_strcmp	;wreg free
   859  000AEA  0100               	movlb	0	; () banked
   860  000AEC  51A3               	movf	?_strcmp& (0+255),w,b
   861  000AEE  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   862  000AF0  A4D8               	btfss	status,2,c
   863  000AF2  D00B               	goto	l247
   864                           
   865                           ; BSR set to: 0
   866                           ;main.c: 59: _delay((unsigned long)((20)*(16000000/4000.0)));
   867  000AF4  0E68               	movlw	104
   868  000AF6  0100               	movlb	0	; () banked
   869  000AF8  6FC2               	movwf	??_main& (0+255),b
   870  000AFA  0EE4               	movlw	228
   871  000AFC                     u1537:
   872  000AFC  2EE8               	decfsz	wreg,f,c
   873  000AFE  D7FE               	bra	u1537
   874  000B00  2FC2               	decfsz	??_main& (0+255),f,b
   875  000B02  D7FC               	bra	u1537
   876  000B04  F000               	nop	
   877  000B06  00FF               	reset		;# 
   878                           
   879                           ;main.c: 61: } else {
   880  000B08  D00B               	goto	l248
   881  000B0A                     l247:
   882                           
   883                           ;main.c: 62: D_UART_Write("E", "U");
   884  000B0A  0E25               	movlw	low STR_15
   885  000B0C  0100               	movlb	0	; () banked
   886  000B0E  6FB5               	movwf	D_UART_Write@command& (0+255),b
   887  000B10  0E08               	movlw	high STR_15
   888  000B12  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
   889  000B14  0E2F               	movlw	low STR_12
   890  000B16  6FB7               	movwf	D_UART_Write@data& (0+255),b
   891  000B18  0E08               	movlw	high STR_12
   892  000B1A  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
   893  000B1C  EC69  F007         	call	_D_UART_Write	;wreg free
   894  000B20                     l248:
   895                           
   896                           ;main.c: 63: }
   897                           ;main.c: 64: }
   898                           ;main.c: 67: if (tick) {
   899  000B20  0100               	movlb	0	; () banked
   900  000B22  51A1               	movf	_tick& (0+255),w,b
   901  000B24  B4D8               	btfsc	status,2,c
   902  000B26  D792               	goto	l239
   903                           
   904                           ; BSR set to: 0
   905                           ;main.c: 68: tick = 0;
   906  000B28  0E00               	movlw	0
   907  000B2A  6FA1               	movwf	_tick& (0+255),b
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 71: C_DOOR_ReadSensors();
   911  000B2C  EC4A  F009         	call	_C_DOOR_ReadSensors	;wreg free
   912                           
   913                           ;main.c: 74: C_DOOR_SendStates();
   914  000B30  EC40  F008         	call	_C_DOOR_SendStates	;wreg free
   915  000B34  D78B               	goto	l239
   916  000B36                     __end_of_main:
   917                           	opt stack 0
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           plusw0	equ	0xFEB
   924                           wreg	equ	0xFE8
   925                           postdec1	equ	0xFE5
   926                           fsr1l	equ	0xFE1
   927                           plusw2	equ	0xFDB
   928                           status	equ	0xFD8
   929                           
   930 ;; *************** function _strcmp *****************
   931 ;; Defined at:
   932 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   935 ;;		 -> readBuffer(166), 
   936 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   937 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  r               1    5[BANK0 ] char 
   940 ;; Return value:  Size  Location     Type
   941 ;;                  2    0[BANK0 ] int 
   942 ;; Registers used:
   943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   949 ;;      Params:         0       4       0       0       0       0       0       0       0
   950 ;;      Locals:         0       1       0       0       0       0       0       0       0
   951 ;;      Temps:          0       1       0       0       0       0       0       0       0
   952 ;;      Totals:         0       6       0       0       0       0       0       0       0
   953 ;;Total ram usage:        6 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    7
   956 ;; This function calls:
   957 ;;		Nothing
   958 ;; This function is called by:
   959 ;;		_main
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           	psect	text1
   964  0014DC                     __ptext1:
   965                           	opt stack 0
   966  0014DC                     _strcmp:
   967                           	opt stack 23
   968                           
   969                           ;incstack = 0
   970  0014DC  D005               	goto	l833
   971  0014DE  0100               	movlb	0	; () banked
   972  0014E0  4BA3               	infsnz	strcmp@s1& (0+255),f,b
   973  0014E2  2BA4               	incf	(strcmp@s1+1)& (0+255),f,b
   974  0014E4  4BA5               	infsnz	strcmp@s2& (0+255),f,b
   975  0014E6  2BA6               	incf	(strcmp@s2+1)& (0+255),f,b
   976  0014E8                     l833:
   977                           
   978                           ; BSR set to: 0
   979  0014E8  C0A3  FFD9         	movff	strcmp@s1,fsr2l
   980  0014EC  C0A4  FFDA         	movff	strcmp@s1+1,fsr2h
   981  0014F0  50DF               	movf	indf2,w,c
   982  0014F2  0100               	movlb	0	; () banked
   983  0014F4  6FA7               	movwf	??_strcmp& (0+255),b
   984  0014F6  C0A5  FFF6         	movff	strcmp@s2,tblptrl
   985  0014FA  C0A6  FFF7         	movff	strcmp@s2+1,tblptrh
   986  0014FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   987  0014FE  6AF8               	clrf	tblptru,c
   988  001500                     	endif
   989  001500                     	if	0	;tblptru may be non-zero
   990  001500                     	endif
   991  001500  0008               	tblrd		*
   992  001502  50F5               	movf	tablat,w,c
   993  001504  0800               	sublw	0
   994  001506  25A7               	addwf	??_strcmp& (0+255),w,b
   995  001508  6FA8               	movwf	strcmp@r& (0+255),b
   996  00150A  51A8               	movf	strcmp@r& (0+255),w,b
   997  00150C  A4D8               	btfss	status,2,c
   998  00150E  D007               	goto	u1330
   999                           
  1000                           ; BSR set to: 0
  1001  001510  C0A3  FFD9         	movff	strcmp@s1,fsr2l
  1002  001514  C0A4  FFDA         	movff	strcmp@s1+1,fsr2h
  1003  001518  50DF               	movf	indf2,w,c
  1004  00151A  A4D8               	btfss	status,2,c
  1005  00151C  D7E0               	goto	l834
  1006  00151E                     u1330:
  1007                           
  1008                           ; BSR set to: 0
  1009                           
  1010                           ; BSR set to: 0
  1011                           
  1012                           ; BSR set to: 0
  1013  00151E  51A8               	movf	strcmp@r& (0+255),w,b
  1014  001520  6FA3               	movwf	?_strcmp& (0+255),b
  1015  001522  6BA4               	clrf	(?_strcmp+1)& (0+255),b
  1016  001524  BFA3               	btfsc	?_strcmp& (0+255),7,b
  1017  001526  07A4               	decf	(?_strcmp+1)& (0+255),f,b
  1018  001528  0012               	return	
  1019  00152A                     __end_of_strcmp:
  1020                           	opt stack 0
  1021                           tblptru	equ	0xFF8
  1022                           tblptrh	equ	0xFF7
  1023                           tblptrl	equ	0xFF6
  1024                           tablat	equ	0xFF5
  1025                           postinc0	equ	0xFEE
  1026                           plusw0	equ	0xFEB
  1027                           wreg	equ	0xFE8
  1028                           postdec1	equ	0xFE5
  1029                           fsr1l	equ	0xFE1
  1030                           indf2	equ	0xFDF
  1031                           plusw2	equ	0xFDB
  1032                           fsr2h	equ	0xFDA
  1033                           fsr2l	equ	0xFD9
  1034                           status	equ	0xFD8
  1035                           
  1036 ;; *************** function _D_UART_Read *****************
  1037 ;; Defined at:
  1038 ;;		line 240 in file "Drivers/UART_Driver.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;		None
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;		None
  1043 ;; Return value:  Size  Location     Type
  1044 ;;                  6    0[BANK0 ] struct .
  1045 ;; Registers used:
  1046 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1047 ;; Tracked objects:
  1048 ;;		On entry : 0/0
  1049 ;;		On exit  : 0/0
  1050 ;;		Unchanged: 0/0
  1051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1052 ;;      Params:         0       6       0       0       0       0       0       0       0
  1053 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1054 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1055 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1056 ;;Total ram usage:        6 bytes
  1057 ;; Hardware stack levels used:    1
  1058 ;; Hardware stack levels required when called:    7
  1059 ;; This function calls:
  1060 ;;		Nothing
  1061 ;; This function is called by:
  1062 ;;		_main
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text2
  1067  00152A                     __ptext2:
  1068                           	opt stack 0
  1069  00152A                     _D_UART_Read:
  1070                           	opt stack 23
  1071                           
  1072                           ;UART_Driver.c: 241: readData.sender = readBuffer.sender;
  1073                           
  1074                           ; BSR set to: 0
  1075                           ;incstack = 0
  1076  00152A  0E0B               	movlw	low (_readBuffer+11)
  1077  00152C  0100               	movlb	0	; () banked
  1078  00152E  6F98               	movwf	_readData& (0+255),b
  1079  001530  0E01               	movlw	high (_readBuffer+11)
  1080  001532  6F99               	movwf	(_readData+1)& (0+255),b
  1081                           
  1082                           ;UART_Driver.c: 242: readData.command = readBuffer.command;
  1083  001534  0E3E               	movlw	low (_readBuffer+62)
  1084  001536  6F9A               	movwf	(_readData+2)& (0+255),b
  1085  001538  0E01               	movlw	high (_readBuffer+62)
  1086  00153A  6F9B               	movwf	(_readData+3)& (0+255),b
  1087                           
  1088                           ;UART_Driver.c: 243: readData.message = readBuffer.message;
  1089  00153C  0E71               	movlw	low (_readBuffer+113)
  1090  00153E  6F9C               	movwf	(_readData+4)& (0+255),b
  1091  001540  0E01               	movlw	high (_readBuffer+113)
  1092  001542  6F9D               	movwf	(_readData+5)& (0+255),b
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;UART_Driver.c: 244: return readData;
  1096  001544  EE20  F098         	lfsr	2,_readData
  1097  001548  EE00  F0A3         	lfsr	0,?_D_UART_Read
  1098  00154C  0E05               	movlw	5
  1099  00154E                     u1311:
  1100  00154E  CFDB FFEB          	movff	plusw2,plusw0
  1101  001552  06E8               	decf	wreg,f,c
  1102  001554  E2FC               	bc	u1311
  1103  001556  0012               	return	
  1104  001558                     __end_of_D_UART_Read:
  1105                           	opt stack 0
  1106                           tblptru	equ	0xFF8
  1107                           tblptrh	equ	0xFF7
  1108                           tblptrl	equ	0xFF6
  1109                           tablat	equ	0xFF5
  1110                           postinc0	equ	0xFEE
  1111                           plusw0	equ	0xFEB
  1112                           wreg	equ	0xFE8
  1113                           postdec1	equ	0xFE5
  1114                           fsr1l	equ	0xFE1
  1115                           indf2	equ	0xFDF
  1116                           plusw2	equ	0xFDB
  1117                           fsr2h	equ	0xFDA
  1118                           fsr2l	equ	0xFD9
  1119                           status	equ	0xFD8
  1120                           
  1121 ;; *************** function _D_UART_Init *****************
  1122 ;; Defined at:
  1123 ;;		line 182 in file "Drivers/UART_Driver.c"
  1124 ;; Parameters:    Size  Location     Type
  1125 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1126 ;;		 -> STR_8(2), 
  1127 ;;  baud            2   16[BANK0 ] unsigned int 
  1128 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1129 ;; Auto vars:     Size  Location     Type
  1130 ;;		None
  1131 ;; Return value:  Size  Location     Type
  1132 ;;                  1    wreg      void 
  1133 ;; Registers used:
  1134 ;;		wreg, status,2, status,0, cstack
  1135 ;; Tracked objects:
  1136 ;;		On entry : 0/0
  1137 ;;		On exit  : 0/0
  1138 ;;		Unchanged: 0/0
  1139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1140 ;;      Params:         0       5       0       0       0       0       0       0       0
  1141 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1143 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1144 ;;Total ram usage:        9 bytes
  1145 ;; Hardware stack levels used:    1
  1146 ;; Hardware stack levels required when called:    8
  1147 ;; This function calls:
  1148 ;;		_D_UART_Enable
  1149 ;;		___aldiv
  1150 ;; This function is called by:
  1151 ;;		_main
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text3
  1156  001148                     __ptext3:
  1157                           	opt stack 0
  1158  001148                     _D_UART_Init:
  1159                           	opt stack 22
  1160                           
  1161                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;incstack = 0
  1165  001148  9E94               	bcf	3988,7,c	;volatile
  1166                           
  1167                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1168  00114A  8C94               	bsf	3988,6,c	;volatile
  1169                           
  1170                           ;UART_Driver.c: 188: deviceName = name;
  1171  00114C  C0B1  F09E         	movff	D_UART_Init@name,_deviceName
  1172  001150  C0B2  F09F         	movff	D_UART_Init@name+1,_deviceName+1
  1173  001154  0100               	movlb	0	; () banked
  1174  001156  519E               	movf	_deviceName& (0+255),w,b
  1175  001158  119F               	iorwf	(_deviceName+1)& (0+255),w,b
  1176  00115A  A4D8               	btfss	status,2,c
  1177  00115C  0E00               	movlw	low (__mediumconst shr (0+16))
  1178  00115E  6FA0               	movwf	(_deviceName+2)& (0+255),b
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;UART_Driver.c: 189: readReady = 0;
  1182  001160  0E00               	movlw	0
  1183  001162  6FA2               	movwf	_readReady& (0+255),b
  1184                           
  1185                           ; BSR set to: 0
  1186                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1187  001164  0E00               	movlw	0
  1188  001166  ECAC  F00A         	call	_D_UART_Enable
  1189                           
  1190                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1191  00116A  9CAC               	bcf	4012,6,c	;volatile
  1192                           
  1193                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1194  00116C  98AC               	bcf	4012,4,c	;volatile
  1195                           
  1196                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1197  00116E  94AC               	bcf	4012,2,c	;volatile
  1198                           
  1199                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1200  001170  9CAB               	bcf	4011,6,c	;volatile
  1201                           
  1202                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1203  001172  9AB8               	bcf	4024,5,c	;volatile
  1204                           
  1205                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1206  001174  98B8               	bcf	4024,4,c	;volatile
  1207                           
  1208                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1209  001176  96B8               	bcf	4024,3,c	;volatile
  1210                           
  1211                           ;UART_Driver.c: 208: RCSTAbits.FERR = 0;
  1212  001178  94AB               	bcf	4011,2,c	;volatile
  1213                           
  1214                           ;UART_Driver.c: 209: RCSTAbits.OERR = 0;
  1215  00117A  92AB               	bcf	4011,1,c	;volatile
  1216                           
  1217                           ;UART_Driver.c: 210: RCREG = 0x00;
  1218  00117C  0E00               	movlw	0
  1219  00117E  6EAE               	movwf	4014,c	;volatile
  1220                           
  1221                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1222  001180  C0B3  F0A7         	movff	D_UART_Init@baud,___aldiv@divisor
  1223  001184  C0B4  F0A8         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1224  001188  0100               	movlb	0	; () banked
  1225  00118A  6BA9               	clrf	(___aldiv@divisor+2)& (0+255),b
  1226  00118C  6BAA               	clrf	(___aldiv@divisor+3)& (0+255),b
  1227  00118E  0E00               	movlw	0
  1228  001190  6FA3               	movwf	___aldiv@dividend& (0+255),b
  1229  001192  0E24               	movlw	36
  1230  001194  6FA4               	movwf	(___aldiv@dividend+1)& (0+255),b
  1231  001196  0EF4               	movlw	244
  1232  001198  6FA5               	movwf	(___aldiv@dividend+2)& (0+255),b
  1233  00119A  0E00               	movlw	0
  1234  00119C  6FA6               	movwf	(___aldiv@dividend+3)& (0+255),b
  1235  00119E  ECD9  F007         	call	___aldiv	;wreg free
  1236  0011A2  C0A3  F0B6         	movff	?___aldiv,_D_UART_Init$1498
  1237  0011A6  C0A4  F0B7         	movff	?___aldiv+1,_D_UART_Init$1498+1
  1238  0011AA  C0A5  F0B8         	movff	?___aldiv+2,_D_UART_Init$1498+2
  1239  0011AE  C0A6  F0B9         	movff	?___aldiv+3,_D_UART_Init$1498+3
  1240                           
  1241                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1242  0011B2  C0B6  F0A3         	movff	_D_UART_Init$1498,___aldiv@dividend
  1243  0011B6  C0B7  F0A4         	movff	_D_UART_Init$1498+1,___aldiv@dividend+1
  1244  0011BA  C0B8  F0A5         	movff	_D_UART_Init$1498+2,___aldiv@dividend+2
  1245  0011BE  C0B9  F0A6         	movff	_D_UART_Init$1498+3,___aldiv@dividend+3
  1246  0011C2  0E40               	movlw	64
  1247  0011C4  0100               	movlb	0	; () banked
  1248  0011C6  6FA7               	movwf	___aldiv@divisor& (0+255),b
  1249  0011C8  0E00               	movlw	0
  1250  0011CA  6FA8               	movwf	(___aldiv@divisor+1)& (0+255),b
  1251  0011CC  0E00               	movlw	0
  1252  0011CE  6FA9               	movwf	(___aldiv@divisor+2)& (0+255),b
  1253  0011D0  0E00               	movlw	0
  1254  0011D2  6FAA               	movwf	(___aldiv@divisor+3)& (0+255),b
  1255  0011D4  ECD9  F007         	call	___aldiv	;wreg free
  1256  0011D8  0100               	movlb	0	; () banked
  1257  0011DA  05A3               	decf	?___aldiv& (0+255),w,b
  1258  0011DC  6EAF               	movwf	4015,c	;volatile
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;UART_Driver.c: 216: if (interrupts) {
  1262  0011DE  51B5               	movf	D_UART_Init@interrupts& (0+255),w,b
  1263  0011E0  B4D8               	btfsc	status,2,c
  1264  0011E2  0012               	return	
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;UART_Driver.c: 217: RCONbits.IPEN = 1;
  1268  0011E4  8ED0               	bsf	4048,7,c	;volatile
  1269                           
  1270                           ;UART_Driver.c: 218: INTCONbits.GIEH = 1;
  1271  0011E6  8EF2               	bsf	intcon,7,c	;volatile
  1272                           
  1273                           ;UART_Driver.c: 219: INTCONbits.GIEL = 1;
  1274  0011E8  8CF2               	bsf	intcon,6,c	;volatile
  1275                           
  1276                           ;UART_Driver.c: 220: PIR1bits.RCIF = 0;
  1277  0011EA  9A9E               	bcf	3998,5,c	;volatile
  1278                           
  1279                           ;UART_Driver.c: 221: IPR1bits.RCIP = 0;
  1280  0011EC  9A9F               	bcf	3999,5,c	;volatile
  1281                           
  1282                           ;UART_Driver.c: 222: PIE1bits.RCIE = 1;
  1283  0011EE  8A9D               	bsf	3997,5,c	;volatile
  1284  0011F0  0012               	return	
  1285  0011F2                     __end_of_D_UART_Init:
  1286                           	opt stack 0
  1287                           tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           intcon	equ	0xFF2
  1292                           postinc0	equ	0xFEE
  1293                           plusw0	equ	0xFEB
  1294                           wreg	equ	0xFE8
  1295                           postdec1	equ	0xFE5
  1296                           fsr1l	equ	0xFE1
  1297                           indf2	equ	0xFDF
  1298                           plusw2	equ	0xFDB
  1299                           fsr2h	equ	0xFDA
  1300                           fsr2l	equ	0xFD9
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function ___aldiv *****************
  1304 ;; Defined at:
  1305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  dividend        4    0[BANK0 ] long 
  1308 ;;  divisor         4    4[BANK0 ] long 
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;  quotient        4   10[BANK0 ] long 
  1311 ;;  sign            1    9[BANK0 ] unsigned char 
  1312 ;;  counter         1    8[BANK0 ] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  4    0[BANK0 ] long 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1322 ;;      Params:         0       8       0       0       0       0       0       0       0
  1323 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1325 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1326 ;;Total ram usage:       14 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; Hardware stack levels required when called:    7
  1329 ;; This function calls:
  1330 ;;		Nothing
  1331 ;; This function is called by:
  1332 ;;		_D_UART_Init
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text4
  1337  000FB2                     __ptext4:
  1338                           	opt stack 0
  1339  000FB2                     ___aldiv:
  1340                           	opt stack 22
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;incstack = 0
  1344  000FB2  0E00               	movlw	0
  1345  000FB4  0100               	movlb	0	; () banked
  1346  000FB6  6FAC               	movwf	___aldiv@sign& (0+255),b
  1347                           
  1348                           ; BSR set to: 0
  1349  000FB8  AFAA               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1350  000FBA  D00A               	goto	l341
  1351                           
  1352                           ; BSR set to: 0
  1353  000FBC  1FAA               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1354  000FBE  1FA9               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1355  000FC0  1FA8               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1356  000FC2  6DA7               	negf	___aldiv@divisor& (0+255),b
  1357  000FC4  0E00               	movlw	0
  1358  000FC6  23A8               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1359  000FC8  23A9               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1360  000FCA  23AA               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1361                           
  1362                           ; BSR set to: 0
  1363  000FCC  0E01               	movlw	1
  1364  000FCE  6FAC               	movwf	___aldiv@sign& (0+255),b
  1365  000FD0                     l341:
  1366                           
  1367                           ; BSR set to: 0
  1368                           
  1369                           ; BSR set to: 0
  1370  000FD0  AFA6               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1371  000FD2  D00A               	goto	l342
  1372                           
  1373                           ; BSR set to: 0
  1374  000FD4  1FA6               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1375  000FD6  1FA5               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1376  000FD8  1FA4               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1377  000FDA  6DA3               	negf	___aldiv@dividend& (0+255),b
  1378  000FDC  0E00               	movlw	0
  1379  000FDE  23A4               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1380  000FE0  23A5               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1381  000FE2  23A6               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1382                           
  1383                           ; BSR set to: 0
  1384  000FE4  0E01               	movlw	1
  1385  000FE6  1BAC               	xorwf	___aldiv@sign& (0+255),f,b
  1386  000FE8                     l342:
  1387                           
  1388                           ; BSR set to: 0
  1389                           
  1390                           ; BSR set to: 0
  1391  000FE8  0E00               	movlw	0
  1392  000FEA  6FAD               	movwf	___aldiv@quotient& (0+255),b
  1393  000FEC  0E00               	movlw	0
  1394  000FEE  6FAE               	movwf	(___aldiv@quotient+1)& (0+255),b
  1395  000FF0  0E00               	movlw	0
  1396  000FF2  6FAF               	movwf	(___aldiv@quotient+2)& (0+255),b
  1397  000FF4  0E00               	movlw	0
  1398  000FF6  6FB0               	movwf	(___aldiv@quotient+3)& (0+255),b
  1399                           
  1400                           ; BSR set to: 0
  1401  000FF8  51A7               	movf	___aldiv@divisor& (0+255),w,b
  1402  000FFA  11A8               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1403  000FFC  11A9               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1404  000FFE  11AA               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1405  001000  B4D8               	btfsc	status,2,c
  1406  001002  D02A               	goto	l349
  1407                           
  1408                           ; BSR set to: 0
  1409  001004  0E01               	movlw	1
  1410  001006  6FAB               	movwf	___aldiv@counter& (0+255),b
  1411  001008  D006               	goto	l344
  1412  00100A                     
  1413                           ; BSR set to: 0
  1414                           
  1415                           ; BSR set to: 0
  1416  00100A  90D8               	bcf	status,0,c
  1417  00100C  37A7               	rlcf	___aldiv@divisor& (0+255),f,b
  1418  00100E  37A8               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1419  001010  37A9               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1420  001012  37AA               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1421  001014  2BAB               	incf	___aldiv@counter& (0+255),f,b
  1422  001016                     l344:
  1423                           
  1424                           ; BSR set to: 0
  1425                           
  1426                           ; BSR set to: 0
  1427  001016  AFAA               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1428  001018  D7F8               	goto	l345
  1429  00101A                     u1080:
  1430                           
  1431                           ; BSR set to: 0
  1432                           
  1433                           ; BSR set to: 0
  1434                           
  1435                           ; BSR set to: 0
  1436  00101A  90D8               	bcf	status,0,c
  1437  00101C  37AD               	rlcf	___aldiv@quotient& (0+255),f,b
  1438  00101E  37AE               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1439  001020  37AF               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1440  001022  37B0               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1441                           
  1442                           ; BSR set to: 0
  1443  001024  51A7               	movf	___aldiv@divisor& (0+255),w,b
  1444  001026  5DA3               	subwf	___aldiv@dividend& (0+255),w,b
  1445  001028  51A8               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1446  00102A  59A4               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1447  00102C  51A9               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1448  00102E  59A5               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1449  001030  51AA               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1450  001032  59A6               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1451  001034  A0D8               	btfss	status,0,c
  1452  001036  D009               	goto	l348
  1453                           
  1454                           ; BSR set to: 0
  1455  001038  51A7               	movf	___aldiv@divisor& (0+255),w,b
  1456  00103A  5FA3               	subwf	___aldiv@dividend& (0+255),f,b
  1457  00103C  51A8               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1458  00103E  5BA4               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1459  001040  51A9               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1460  001042  5BA5               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1461  001044  51AA               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1462  001046  5BA6               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1463                           
  1464                           ; BSR set to: 0
  1465  001048  81AD               	bsf	___aldiv@quotient& (0+255),0,b
  1466  00104A                     l348:
  1467                           
  1468                           ; BSR set to: 0
  1469                           
  1470                           ; BSR set to: 0
  1471  00104A  90D8               	bcf	status,0,c
  1472  00104C  33AA               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1473  00104E  33A9               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1474  001050  33A8               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1475  001052  33A7               	rrcf	___aldiv@divisor& (0+255),f,b
  1476                           
  1477                           ; BSR set to: 0
  1478  001054  2FAB               	decfsz	___aldiv@counter& (0+255),f,b
  1479  001056  D7E1               	goto	u1080
  1480  001058                     l349:
  1481                           
  1482                           ; BSR set to: 0
  1483                           
  1484                           ; BSR set to: 0
  1485                           
  1486                           ; BSR set to: 0
  1487  001058  51AC               	movf	___aldiv@sign& (0+255),w,b
  1488  00105A  B4D8               	btfsc	status,2,c
  1489  00105C  D008               	goto	l350
  1490                           
  1491                           ; BSR set to: 0
  1492  00105E  1FB0               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1493  001060  1FAF               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1494  001062  1FAE               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1495  001064  6DAD               	negf	___aldiv@quotient& (0+255),b
  1496  001066  0E00               	movlw	0
  1497  001068  23AE               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1498  00106A  23AF               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1499  00106C  23B0               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1500  00106E                     l350:
  1501                           
  1502                           ; BSR set to: 0
  1503                           
  1504                           ; BSR set to: 0
  1505  00106E  C0AD  F0A3         	movff	___aldiv@quotient,?___aldiv
  1506  001072  C0AE  F0A4         	movff	___aldiv@quotient+1,?___aldiv+1
  1507  001076  C0AF  F0A5         	movff	___aldiv@quotient+2,?___aldiv+2
  1508  00107A  C0B0  F0A6         	movff	___aldiv@quotient+3,?___aldiv+3
  1509  00107E  0012               	return	
  1510  001080                     __end_of___aldiv:
  1511                           	opt stack 0
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           intcon	equ	0xFF2
  1517                           postinc0	equ	0xFEE
  1518                           plusw0	equ	0xFEB
  1519                           wreg	equ	0xFE8
  1520                           postdec1	equ	0xFE5
  1521                           fsr1l	equ	0xFE1
  1522                           indf2	equ	0xFDF
  1523                           plusw2	equ	0xFDB
  1524                           fsr2h	equ	0xFDA
  1525                           fsr2l	equ	0xFD9
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function _D_UART_Enable *****************
  1529 ;; Defined at:
  1530 ;;		line 247 in file "Drivers/UART_Driver.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;  enable          1    wreg     unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  enable          1    0[BANK0 ] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1544 ;;      Params:         0       0       0       0       0       0       0       0       0
  1545 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1547 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1548 ;;Total ram usage:        1 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    7
  1551 ;; This function calls:
  1552 ;;		Nothing
  1553 ;; This function is called by:
  1554 ;;		_D_UART_Init
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text5
  1560  001558                     __ptext5:
  1561                           	opt stack 0
  1562  001558                     _D_UART_Enable:
  1563                           	opt stack 22
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;incstack = 0
  1567                           ;D_UART_Enable@enable stored from wreg
  1568  001558  0100               	movlb	0	; () banked
  1569  00155A  6FA3               	movwf	D_UART_Enable@enable& (0+255),b
  1570                           
  1571                           ;UART_Driver.c: 248: if(enable) {
  1572  00155C  0100               	movlb	0	; () banked
  1573  00155E  51A3               	movf	D_UART_Enable@enable& (0+255),w,b
  1574  001560  B4D8               	btfsc	status,2,c
  1575  001562  D006               	goto	l169
  1576                           
  1577                           ; BSR set to: 0
  1578                           ;UART_Driver.c: 249: TRISCbits.TRISC7 = 0;
  1579  001564  9E94               	bcf	3988,7,c	;volatile
  1580                           
  1581                           ;UART_Driver.c: 250: TRISCbits.TRISC6 = 1;
  1582  001566  8C94               	bsf	3988,6,c	;volatile
  1583                           
  1584                           ;UART_Driver.c: 251: TXSTAbits.TXEN = 1;
  1585  001568  8AAC               	bsf	4012,5,c	;volatile
  1586                           
  1587                           ;UART_Driver.c: 252: RCSTAbits.CREN = 1;
  1588  00156A  88AB               	bsf	4011,4,c	;volatile
  1589                           
  1590                           ;UART_Driver.c: 253: RCSTAbits.SPEN = 1;
  1591  00156C  8EAB               	bsf	4011,7,c	;volatile
  1592                           
  1593                           ;UART_Driver.c: 254: } else {
  1594  00156E  0012               	return	
  1595  001570                     l169:
  1596                           
  1597                           ; BSR set to: 0
  1598                           ;UART_Driver.c: 255: TRISCbits.TRISC7 = 0;
  1599  001570  9E94               	bcf	3988,7,c	;volatile
  1600                           
  1601                           ;UART_Driver.c: 256: TRISCbits.TRISC6 = 0;
  1602  001572  9C94               	bcf	3988,6,c	;volatile
  1603                           
  1604                           ;UART_Driver.c: 257: TXSTAbits.TXEN = 0;
  1605  001574  9AAC               	bcf	4012,5,c	;volatile
  1606                           
  1607                           ;UART_Driver.c: 258: RCSTAbits.CREN = 0;
  1608  001576  98AB               	bcf	4011,4,c	;volatile
  1609                           
  1610                           ;UART_Driver.c: 259: RCSTAbits.SPEN = 0;
  1611  001578  9EAB               	bcf	4011,7,c	;volatile
  1612  00157A  0012               	return	
  1613  00157C                     __end_of_D_UART_Enable:
  1614                           	opt stack 0
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           intcon	equ	0xFF2
  1620                           postinc0	equ	0xFEE
  1621                           plusw0	equ	0xFEB
  1622                           wreg	equ	0xFE8
  1623                           postdec1	equ	0xFE5
  1624                           fsr1l	equ	0xFE1
  1625                           indf2	equ	0xFDF
  1626                           plusw2	equ	0xFDB
  1627                           fsr2h	equ	0xFDA
  1628                           fsr2l	equ	0xFD9
  1629                           status	equ	0xFD8
  1630                           
  1631 ;; *************** function _D_TMR0_Init *****************
  1632 ;; Defined at:
  1633 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, status,2, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1647 ;;      Params:         0       0       0       0       0       0       0       0       0
  1648 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1649 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1650 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1651 ;;Total ram usage:        0 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    8
  1654 ;; This function calls:
  1655 ;;		_D_TMR0_Enable
  1656 ;; This function is called by:
  1657 ;;		_main
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           	psect	text6
  1662  00157C                     __ptext6:
  1663                           	opt stack 0
  1664  00157C                     _D_TMR0_Init:
  1665                           	opt stack 22
  1666                           
  1667                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1668                           
  1669                           ; BSR set to: 0
  1670                           ;incstack = 0
  1671  00157C  0E00               	movlw	0
  1672  00157E  ECDF  F00A         	call	_D_TMR0_Enable
  1673                           
  1674                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1675  001582  9CD5               	bcf	4053,6,c	;volatile
  1676                           
  1677                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1678  001584  9AD5               	bcf	4053,5,c	;volatile
  1679                           
  1680                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1681  001586  98D5               	bcf	4053,4,c	;volatile
  1682                           
  1683                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1684  001588  96D5               	bcf	4053,3,c	;volatile
  1685                           
  1686                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1687  00158A  50D5               	movf	4053,w,c	;volatile
  1688  00158C  0BF8               	andlw	-8
  1689  00158E  0902               	iorlw	2
  1690  001590  6ED5               	movwf	4053,c	;volatile
  1691                           
  1692                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1693  001592  8ED0               	bsf	4048,7,c	;volatile
  1694                           
  1695                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1696  001594  8EF2               	bsf	intcon,7,c	;volatile
  1697                           
  1698                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1699  001596  8CF2               	bsf	intcon,6,c	;volatile
  1700                           
  1701                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1702  001598  94F2               	bcf	intcon,2,c	;volatile
  1703                           
  1704                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1705  00159A  84F1               	bsf	intcon2,2,c	;volatile
  1706                           
  1707                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1708  00159C  8AF2               	bsf	intcon,5,c	;volatile
  1709  00159E  0012               	return		;funcret
  1710  0015A0                     __end_of_D_TMR0_Init:
  1711                           	opt stack 0
  1712                           tblptru	equ	0xFF8
  1713                           tblptrh	equ	0xFF7
  1714                           tblptrl	equ	0xFF6
  1715                           tablat	equ	0xFF5
  1716                           intcon	equ	0xFF2
  1717                           intcon2	equ	0xFF1
  1718                           postinc0	equ	0xFEE
  1719                           plusw0	equ	0xFEB
  1720                           wreg	equ	0xFE8
  1721                           postdec1	equ	0xFE5
  1722                           fsr1l	equ	0xFE1
  1723                           indf2	equ	0xFDF
  1724                           plusw2	equ	0xFDB
  1725                           fsr2h	equ	0xFDA
  1726                           fsr2l	equ	0xFD9
  1727                           status	equ	0xFD8
  1728                           
  1729 ;; *************** function _D_TMR0_Enable *****************
  1730 ;; Defined at:
  1731 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;  enable          1    wreg     unsigned char 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;  enable          1    0[BANK0 ] unsigned char 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1745 ;;      Params:         0       0       0       0       0       0       0       0       0
  1746 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1748 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1749 ;;Total ram usage:        1 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    7
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_D_TMR0_Init
  1756 ;;		_main
  1757 ;; This function uses a non-reentrant model
  1758 ;;
  1759                           
  1760                           	psect	text7
  1761  0015BE                     __ptext7:
  1762                           	opt stack 0
  1763  0015BE                     _D_TMR0_Enable:
  1764                           	opt stack 22
  1765                           
  1766                           ;incstack = 0
  1767                           ;D_TMR0_Enable@enable stored from wreg
  1768  0015BE  0100               	movlb	0	; () banked
  1769  0015C0  6FA3               	movwf	D_TMR0_Enable@enable& (0+255),b
  1770                           
  1771                           ;TMR0_Driver.c: 54: if (enable) {
  1772  0015C2  0100               	movlb	0	; () banked
  1773  0015C4  51A3               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1774  0015C6  B4D8               	btfsc	status,2,c
  1775  0015C8  D002               	goto	l196
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1779  0015CA  8ED5               	bsf	4053,7,c	;volatile
  1780                           
  1781                           ;TMR0_Driver.c: 56: } else {
  1782  0015CC  0012               	return	
  1783  0015CE                     l196:
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1787  0015CE  9ED5               	bcf	4053,7,c	;volatile
  1788  0015D0  0012               	return	
  1789  0015D2                     __end_of_D_TMR0_Enable:
  1790                           	opt stack 0
  1791                           tblptru	equ	0xFF8
  1792                           tblptrh	equ	0xFF7
  1793                           tblptrl	equ	0xFF6
  1794                           tablat	equ	0xFF5
  1795                           intcon	equ	0xFF2
  1796                           intcon2	equ	0xFF1
  1797                           postinc0	equ	0xFEE
  1798                           plusw0	equ	0xFEB
  1799                           wreg	equ	0xFE8
  1800                           postdec1	equ	0xFE5
  1801                           fsr1l	equ	0xFE1
  1802                           indf2	equ	0xFDF
  1803                           plusw2	equ	0xFDB
  1804                           fsr2h	equ	0xFDA
  1805                           fsr2l	equ	0xFD9
  1806                           status	equ	0xFD8
  1807                           
  1808 ;; *************** function _D_PORT_Init *****************
  1809 ;; Defined at:
  1810 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;		None
  1813 ;; Auto vars:     Size  Location     Type
  1814 ;;		None
  1815 ;; Return value:  Size  Location     Type
  1816 ;;                  1    wreg      void 
  1817 ;; Registers used:
  1818 ;;		wreg, status,2
  1819 ;; Tracked objects:
  1820 ;;		On entry : 0/0
  1821 ;;		On exit  : 0/0
  1822 ;;		Unchanged: 0/0
  1823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1824 ;;      Params:         0       0       0       0       0       0       0       0       0
  1825 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1827 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1828 ;;Total ram usage:        0 bytes
  1829 ;; Hardware stack levels used:    1
  1830 ;; Hardware stack levels required when called:    7
  1831 ;; This function calls:
  1832 ;;		Nothing
  1833 ;; This function is called by:
  1834 ;;		_main
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text8
  1839  0015A0                     __ptext8:
  1840                           	opt stack 0
  1841  0015A0                     _D_PORT_Init:
  1842                           	opt stack 23
  1843                           
  1844                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;incstack = 0
  1848  0015A0  0E00               	movlw	0
  1849  0015A2  6E92               	movwf	3986,c	;volatile
  1850  0015A4  0E00               	movlw	0
  1851  0015A6  6E80               	movwf	3968,c	;volatile
  1852                           
  1853                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1854  0015A8  0E00               	movlw	0
  1855  0015AA  6E93               	movwf	3987,c	;volatile
  1856  0015AC  0E00               	movlw	0
  1857  0015AE  6E81               	movwf	3969,c	;volatile
  1858                           
  1859                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1860  0015B0  0E00               	movlw	0
  1861  0015B2  6E94               	movwf	3988,c	;volatile
  1862  0015B4  0E00               	movlw	0
  1863  0015B6  6E82               	movwf	3970,c	;volatile
  1864                           
  1865                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1866  0015B8  0E0F               	movlw	15
  1867  0015BA  6EC1               	movwf	4033,c	;volatile
  1868  0015BC  0012               	return		;funcret
  1869  0015BE                     __end_of_D_PORT_Init:
  1870                           	opt stack 0
  1871                           tblptru	equ	0xFF8
  1872                           tblptrh	equ	0xFF7
  1873                           tblptrl	equ	0xFF6
  1874                           tablat	equ	0xFF5
  1875                           intcon	equ	0xFF2
  1876                           intcon2	equ	0xFF1
  1877                           postinc0	equ	0xFEE
  1878                           plusw0	equ	0xFEB
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           fsr1l	equ	0xFE1
  1882                           indf2	equ	0xFDF
  1883                           plusw2	equ	0xFDB
  1884                           fsr2h	equ	0xFDA
  1885                           fsr2l	equ	0xFD9
  1886                           status	equ	0xFD8
  1887                           
  1888 ;; *************** function _C_DOOR_UnlockAll *****************
  1889 ;; Defined at:
  1890 ;;		line 91 in file "Controllers/DOOR_Controller.c"
  1891 ;; Parameters:    Size  Location     Type
  1892 ;;		None
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;		None
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  1    wreg      void 
  1897 ;; Registers used:
  1898 ;;		wreg, fsr2l, fsr2h
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1904 ;;      Params:         0       0       0       0       0       0       0       0       0
  1905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1906 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1907 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1908 ;;Total ram usage:        0 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:    7
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_main
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text9
  1919  0015D2                     __ptext9:
  1920                           	opt stack 0
  1921  0015D2                     _C_DOOR_UnlockAll:
  1922                           	opt stack 23
  1923                           
  1924                           ;DOOR_Controller.c: 96: *doors[0].lock_port &= 0x3F;
  1925                           
  1926                           ;incstack = 0
  1927  0015D2  C062  FFD9         	movff	_doors+2,fsr2l
  1928  0015D6  C063  FFDA         	movff	_doors+3,fsr2h
  1929  0015DA  0E3F               	movlw	63
  1930  0015DC  16DF               	andwf	indf2,f,c
  1931  0015DE  0012               	return		;funcret
  1932  0015E0                     __end_of_C_DOOR_UnlockAll:
  1933                           	opt stack 0
  1934                           tblptru	equ	0xFF8
  1935                           tblptrh	equ	0xFF7
  1936                           tblptrl	equ	0xFF6
  1937                           tablat	equ	0xFF5
  1938                           intcon	equ	0xFF2
  1939                           intcon2	equ	0xFF1
  1940                           postinc0	equ	0xFEE
  1941                           plusw0	equ	0xFEB
  1942                           wreg	equ	0xFE8
  1943                           postdec1	equ	0xFE5
  1944                           fsr1l	equ	0xFE1
  1945                           indf2	equ	0xFDF
  1946                           plusw2	equ	0xFDB
  1947                           fsr2h	equ	0xFDA
  1948                           fsr2l	equ	0xFD9
  1949                           status	equ	0xFD8
  1950                           
  1951 ;; *************** function _C_DOOR_SendStates *****************
  1952 ;; Defined at:
  1953 ;;		line 106 in file "Controllers/DOOR_Controller.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;		None
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;  com             3   25[BANK0 ] unsigned char [3]
  1958 ;;  mes             2   28[BANK0 ] unsigned char [2]
  1959 ;;  d               1   30[BANK0 ] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1969 ;;      Params:         0       0       0       0       0       0       0       0       0
  1970 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1971 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1972 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1973 ;;Total ram usage:        8 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:   11
  1976 ;; This function calls:
  1977 ;;		_D_UART_Write
  1978 ;;		_commandAndMessage
  1979 ;; This function is called by:
  1980 ;;		_main
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text10
  1985  001080                     __ptext10:
  1986                           	opt stack 0
  1987  001080                     _C_DOOR_SendStates:
  1988                           	opt stack 19
  1989                           
  1990                           ;DOOR_Controller.c: 107: uint8_t d;
  1991                           ;DOOR_Controller.c: 108: for (d = 0; d < 5; d++) {
  1992                           
  1993                           ;incstack = 0
  1994  001080  0E00               	movlw	0
  1995  001082  0100               	movlb	0	; () banked
  1996  001084  6FC1               	movwf	C_DOOR_SendStates@d& (0+255),b
  1997  001086                     l1679:
  1998                           
  1999                           ; BSR set to: 0
  2000  001086  0E04               	movlw	4
  2001  001088  65C1               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  2002  00108A  D001               	goto	l44
  2003  00108C  0012               	return	
  2004  00108E                     l44:
  2005                           
  2006                           ; BSR set to: 0
  2007                           ;DOOR_Controller.c: 109: if (doors[d].was_open != doors[d].is_open) {
  2008                           
  2009                           ; BSR set to: 0
  2010  00108E  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2011  001090  0D0A               	mullw	10
  2012  001092  0E06               	movlw	6
  2013  001094  26F3               	addwf	prodl,f,c
  2014  001096  0E00               	movlw	0
  2015  001098  22F4               	addwfc	prodh,f,c
  2016  00109A  0E60               	movlw	low _doors
  2017  00109C  24F3               	addwf	prodl,w,c
  2018  00109E  6ED9               	movwf	fsr2l,c
  2019  0010A0  0E00               	movlw	high _doors
  2020  0010A2  20F4               	addwfc	prodh,w,c
  2021  0010A4  6EDA               	movwf	fsr2h,c
  2022  0010A6  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2023  0010A8  0D0A               	mullw	10
  2024  0010AA  0E05               	movlw	5
  2025  0010AC  26F3               	addwf	prodl,f,c
  2026  0010AE  0E00               	movlw	0
  2027  0010B0  22F4               	addwfc	prodh,f,c
  2028  0010B2  0E60               	movlw	low _doors
  2029  0010B4  24F3               	addwf	prodl,w,c
  2030  0010B6  6EE1               	movwf	fsr1l,c
  2031  0010B8  0E00               	movlw	high _doors
  2032  0010BA  20F4               	addwfc	prodh,w,c
  2033  0010BC  6EE2               	movwf	fsr1h,c
  2034  0010BE  50DE               	movf	postinc2,w,c
  2035  0010C0  18E6               	xorwf	postinc1,w,c
  2036  0010C2  B4D8               	btfsc	status,2,c
  2037  0010C4  D03F               	goto	l46
  2038                           
  2039                           ; BSR set to: 0
  2040                           ;DOOR_Controller.c: 111: char com[3];
  2041                           ;DOOR_Controller.c: 112: char mes[2];
  2042                           ;DOOR_Controller.c: 113: commandAndMessage(doors[d], com, mes);
  2043  0010C6  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2044  0010C8  0D0A               	mullw	10
  2045  0010CA  0E60               	movlw	low _doors
  2046  0010CC  24F3               	addwf	prodl,w,c
  2047  0010CE  6ED9               	movwf	fsr2l,c
  2048  0010D0  0E00               	movlw	high _doors
  2049  0010D2  20F4               	addwfc	prodh,w,c
  2050  0010D4  6EDA               	movwf	fsr2h,c
  2051  0010D6  EE00  F0A3         	lfsr	0,commandAndMessage@door
  2052  0010DA  0E09               	movlw	9
  2053  0010DC                     u1181:
  2054  0010DC  CFDB FFEB          	movff	plusw2,plusw0
  2055  0010E0  06E8               	decf	wreg,f,c
  2056  0010E2  E2FC               	bc	u1181
  2057  0010E4  0EBC               	movlw	low C_DOOR_SendStates@com
  2058  0010E6  6FAD               	movwf	commandAndMessage@com& (0+255),b
  2059  0010E8  0E00               	movlw	high C_DOOR_SendStates@com
  2060  0010EA  6FAE               	movwf	(commandAndMessage@com+1)& (0+255),b
  2061  0010EC  0EBF               	movlw	low C_DOOR_SendStates@mes
  2062  0010EE  6FAF               	movwf	commandAndMessage@mes& (0+255),b
  2063  0010F0  0E00               	movlw	high C_DOOR_SendStates@mes
  2064  0010F2  6FB0               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2065  0010F4  EC8D  F009         	call	_commandAndMessage	;wreg free
  2066                           
  2067                           ;DOOR_Controller.c: 116: D_UART_Write(com, mes);
  2068  0010F8  0EBC               	movlw	low C_DOOR_SendStates@com
  2069  0010FA  0100               	movlb	0	; () banked
  2070  0010FC  6FB5               	movwf	D_UART_Write@command& (0+255),b
  2071  0010FE  0E00               	movlw	high C_DOOR_SendStates@com
  2072  001100  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
  2073  001102  0EBF               	movlw	low C_DOOR_SendStates@mes
  2074  001104  6FB7               	movwf	D_UART_Write@data& (0+255),b
  2075  001106  0E00               	movlw	high C_DOOR_SendStates@mes
  2076  001108  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
  2077  00110A  EC69  F007         	call	_D_UART_Write	;wreg free
  2078                           
  2079                           ;DOOR_Controller.c: 118: doors[d].was_open = doors[d].is_open;
  2080  00110E  0100               	movlb	0	; () banked
  2081  001110  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2082  001112  0D0A               	mullw	10
  2083  001114  0E06               	movlw	6
  2084  001116  26F3               	addwf	prodl,f,c
  2085  001118  0E00               	movlw	0
  2086  00111A  22F4               	addwfc	prodh,f,c
  2087  00111C  0E60               	movlw	low _doors
  2088  00111E  24F3               	addwf	prodl,w,c
  2089  001120  6ED9               	movwf	fsr2l,c
  2090  001122  0E00               	movlw	high _doors
  2091  001124  20F4               	addwfc	prodh,w,c
  2092  001126  6EDA               	movwf	fsr2h,c
  2093  001128  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2094  00112A  0D0A               	mullw	10
  2095  00112C  0E05               	movlw	5
  2096  00112E  26F3               	addwf	prodl,f,c
  2097  001130  0E00               	movlw	0
  2098  001132  22F4               	addwfc	prodh,f,c
  2099  001134  0E60               	movlw	low _doors
  2100  001136  24F3               	addwf	prodl,w,c
  2101  001138  6EE1               	movwf	fsr1l,c
  2102  00113A  0E00               	movlw	high _doors
  2103  00113C  20F4               	addwfc	prodh,w,c
  2104  00113E  6EE2               	movwf	fsr1h,c
  2105  001140  CFDF FFE7          	movff	indf2,indf1
  2106  001144                     l46:
  2107                           
  2108                           ; BSR set to: 0
  2109                           
  2110                           ; BSR set to: 0
  2111  001144  2BC1               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2112  001146  D79F               	goto	l1679
  2113  001148                     __end_of_C_DOOR_SendStates:
  2114                           	opt stack 0
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           prodh	equ	0xFF4
  2120                           prodl	equ	0xFF3
  2121                           intcon	equ	0xFF2
  2122                           intcon2	equ	0xFF1
  2123                           postinc0	equ	0xFEE
  2124                           plusw0	equ	0xFEB
  2125                           wreg	equ	0xFE8
  2126                           indf1	equ	0xFE7
  2127                           postinc1	equ	0xFE6
  2128                           postdec1	equ	0xFE5
  2129                           fsr1h	equ	0xFE2
  2130                           fsr1l	equ	0xFE1
  2131                           indf2	equ	0xFDF
  2132                           postinc2	equ	0xFDE
  2133                           plusw2	equ	0xFDB
  2134                           fsr2h	equ	0xFDA
  2135                           fsr2l	equ	0xFD9
  2136                           status	equ	0xFD8
  2137                           
  2138 ;; *************** function _commandAndMessage *****************
  2139 ;; Defined at:
  2140 ;;		line 26 in file "Controllers/DOOR_Controller.c"
  2141 ;; Parameters:    Size  Location     Type
  2142 ;;  door           10    0[BANK0 ] struct .
  2143 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2144 ;;		 -> C_DOOR_SendStates@com(3), 
  2145 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2146 ;;		 -> C_DOOR_SendStates@mes(2), 
  2147 ;; Auto vars:     Size  Location     Type
  2148 ;;		None
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      void 
  2151 ;; Registers used:
  2152 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2158 ;;      Params:         0      14       0       0       0       0       0       0       0
  2159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2161 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2162 ;;Total ram usage:       14 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    7
  2165 ;; This function calls:
  2166 ;;		Nothing
  2167 ;; This function is called by:
  2168 ;;		_C_DOOR_SendStates
  2169 ;; This function uses a non-reentrant model
  2170 ;;
  2171                           
  2172                           	psect	text11
  2173  00131A                     __ptext11:
  2174                           	opt stack 0
  2175  00131A                     _commandAndMessage:
  2176                           	opt stack 22
  2177                           
  2178                           ;DOOR_Controller.c: 28: com[0] = 'P';
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;incstack = 0
  2182  00131A  C0AD  FFD9         	movff	commandAndMessage@com,fsr2l
  2183  00131E  C0AE  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2184  001322  0E50               	movlw	80
  2185  001324  6EDF               	movwf	indf2,c
  2186                           
  2187                           ;DOOR_Controller.c: 29: com[1] = door.id + 0x30;
  2188  001326  0100               	movlb	0	; () banked
  2189  001328  EE20 F001          	lfsr	2,1
  2190  00132C  51AD               	movf	commandAndMessage@com& (0+255),w,b
  2191  00132E  26D9               	addwf	fsr2l,f,c
  2192  001330  51AE               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2193  001332  22DA               	addwfc	fsr2h,f,c
  2194  001334  51A3               	movf	commandAndMessage@door& (0+255),w,b
  2195  001336  0F30               	addlw	48
  2196  001338  6EDF               	movwf	indf2,c
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;DOOR_Controller.c: 30: com[2] = '\0';
  2200  00133A  EE20 F002          	lfsr	2,2
  2201  00133E  51AD               	movf	commandAndMessage@com& (0+255),w,b
  2202  001340  26D9               	addwf	fsr2l,f,c
  2203  001342  51AE               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2204  001344  22DA               	addwfc	fsr2h,f,c
  2205  001346  0E00               	movlw	0
  2206  001348  6EDF               	movwf	indf2,c
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;DOOR_Controller.c: 33: if (door.is_open) {
  2210  00134A  51A9               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2211  00134C  B4D8               	btfsc	status,2,c
  2212  00134E  D006               	goto	l11
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;DOOR_Controller.c: 34: mes[0] = 'O';
  2216  001350  C0AF  FFD9         	movff	commandAndMessage@mes,fsr2l
  2217  001354  C0B0  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2218  001358  0E4F               	movlw	79
  2219  00135A  D005               	goto	L1
  2220  00135C                     l11:
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;DOOR_Controller.c: 36: mes[0] = 'C';
  2224                           
  2225                           ; BSR set to: 0
  2226  00135C  C0AF  FFD9         	movff	commandAndMessage@mes,fsr2l
  2227  001360  C0B0  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2228  001364  0E43               	movlw	67
  2229  001366                     L1:
  2230  001366  6EDF               	movwf	indf2,c
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;DOOR_Controller.c: 37: }
  2234                           ;DOOR_Controller.c: 38: mes[1] = '\0';
  2235                           
  2236                           ; BSR set to: 0
  2237  001368  EE20 F001          	lfsr	2,1
  2238  00136C  51AF               	movf	commandAndMessage@mes& (0+255),w,b
  2239  00136E  26D9               	addwf	fsr2l,f,c
  2240  001370  51B0               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2241  001372  22DA               	addwfc	fsr2h,f,c
  2242  001374  0E00               	movlw	0
  2243  001376  6EDF               	movwf	indf2,c
  2244                           
  2245                           ; BSR set to: 0
  2246  001378  0012               	return		;funcret
  2247  00137A                     __end_of_commandAndMessage:
  2248                           	opt stack 0
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           prodh	equ	0xFF4
  2254                           prodl	equ	0xFF3
  2255                           intcon	equ	0xFF2
  2256                           intcon2	equ	0xFF1
  2257                           postinc0	equ	0xFEE
  2258                           plusw0	equ	0xFEB
  2259                           wreg	equ	0xFE8
  2260                           indf1	equ	0xFE7
  2261                           postinc1	equ	0xFE6
  2262                           postdec1	equ	0xFE5
  2263                           fsr1h	equ	0xFE2
  2264                           fsr1l	equ	0xFE1
  2265                           indf2	equ	0xFDF
  2266                           postinc2	equ	0xFDE
  2267                           plusw2	equ	0xFDB
  2268                           fsr2h	equ	0xFDA
  2269                           fsr2l	equ	0xFD9
  2270                           status	equ	0xFD8
  2271                           
  2272 ;; *************** function _D_UART_Write *****************
  2273 ;; Defined at:
  2274 ;;		line 226 in file "Drivers/UART_Driver.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2277 ;;		 -> STR_15(2), STR_9(2), C_DOOR_SendStates@com(3), 
  2278 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2279 ;;		 -> STR_16(2), STR_10(2), C_DOOR_SendStates@mes(2), 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2291 ;;      Params:         0       4       0       0       0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2293 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2294 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2295 ;;Total ram usage:        5 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; Hardware stack levels required when called:   10
  2298 ;; This function calls:
  2299 ;;		_printf
  2300 ;; This function is called by:
  2301 ;;		_C_DOOR_SendStates
  2302 ;;		_main
  2303 ;; This function uses a non-reentrant model
  2304 ;;
  2305                           
  2306                           	psect	text12
  2307  000ED2                     __ptext12:
  2308                           	opt stack 0
  2309  000ED2                     _D_UART_Write:
  2310                           	opt stack 20
  2311                           
  2312                           ;UART_Driver.c: 227: printf(startCharacter);
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;incstack = 0
  2316  000ED2  C041  F0AA         	movff	_startCharacter,printf@f
  2317  000ED6  C042  F0AB         	movff	_startCharacter+1,printf@f+1
  2318  000EDA  0100               	movlb	0	; () banked
  2319  000EDC  51AA               	movf	printf@f& (0+255),w,b
  2320  000EDE  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2321  000EE0  A4D8               	btfss	status,2,c
  2322  000EE2  0E00               	movlw	low (__mediumconst shr (0+16))
  2323  000EE4  6FAC               	movwf	(printf@f+2)& (0+255),b
  2324  000EE6  EC9B  F005         	call	_printf	;wreg free
  2325                           
  2326                           ;UART_Driver.c: 229: printf(messageCharacter);
  2327  000EEA  C0C4  F0AA         	movff	_messageCharacter,printf@f
  2328  000EEE  C0C5  F0AB         	movff	_messageCharacter+1,printf@f+1
  2329  000EF2  0100               	movlb	0	; () banked
  2330  000EF4  51AA               	movf	printf@f& (0+255),w,b
  2331  000EF6  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2332  000EF8  A4D8               	btfss	status,2,c
  2333  000EFA  0E00               	movlw	low (__mediumconst shr (0+16))
  2334  000EFC  6FAC               	movwf	(printf@f+2)& (0+255),b
  2335  000EFE  EC9B  F005         	call	_printf	;wreg free
  2336                           
  2337                           ;UART_Driver.c: 230: printf(deviceName);
  2338  000F02  C09E  F0AA         	movff	_deviceName,printf@f
  2339  000F06  C09F  F0AB         	movff	_deviceName+1,printf@f+1
  2340  000F0A  C0A0  F0AC         	movff	_deviceName+2,printf@f+2
  2341  000F0E  EC9B  F005         	call	_printf	;wreg free
  2342                           
  2343                           ;UART_Driver.c: 232: printf(":");printf(command);
  2344  000F12  0E35               	movlw	low STR_6
  2345  000F14  0100               	movlb	0	; () banked
  2346  000F16  6FAA               	movwf	printf@f& (0+255),b
  2347  000F18  0E08               	movlw	high STR_6
  2348  000F1A  6FAB               	movwf	(printf@f+1)& (0+255),b
  2349  000F1C  51AA               	movf	printf@f& (0+255),w,b
  2350  000F1E  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2351  000F20  A4D8               	btfss	status,2,c
  2352  000F22  0E00               	movlw	low (__mediumconst shr (0+16))
  2353  000F24  6FAC               	movwf	(printf@f+2)& (0+255),b
  2354  000F26  EC9B  F005         	call	_printf	;wreg free
  2355  000F2A  C0B5  F0AA         	movff	D_UART_Write@command,printf@f
  2356  000F2E  C0B6  F0AB         	movff	D_UART_Write@command+1,printf@f+1
  2357  000F32  0100               	movlb	0	; () banked
  2358  000F34  6BAC               	clrf	(printf@f+2)& (0+255),b
  2359  000F36  51AA               	movf	printf@f& (0+255),w,b
  2360  000F38  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2361  000F3A  B4D8               	btfsc	status,2,c
  2362  000F3C  D005               	goto	u1011
  2363  000F3E  0E07               	movlw	(high __ramtop+-1)
  2364  000F40  65B6               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2365  000F42  D001               	goto	u10111
  2366  000F44  D001               	goto	u1011
  2367  000F46                     u10111:
  2368  000F46  8BAC               	bsf	(printf@f+2)& (0+255),5,b
  2369  000F48                     u1011:
  2370  000F48  EC9B  F005         	call	_printf	;wreg free
  2371                           
  2372                           ;UART_Driver.c: 234: printf(":");printf(data);
  2373  000F4C  0E35               	movlw	low STR_6
  2374  000F4E  0100               	movlb	0	; () banked
  2375  000F50  6FAA               	movwf	printf@f& (0+255),b
  2376  000F52  0E08               	movlw	high STR_6
  2377  000F54  6FAB               	movwf	(printf@f+1)& (0+255),b
  2378  000F56  51AA               	movf	printf@f& (0+255),w,b
  2379  000F58  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2380  000F5A  A4D8               	btfss	status,2,c
  2381  000F5C  0E00               	movlw	low (__mediumconst shr (0+16))
  2382  000F5E  6FAC               	movwf	(printf@f+2)& (0+255),b
  2383  000F60  EC9B  F005         	call	_printf	;wreg free
  2384  000F64  C0B7  F0AA         	movff	D_UART_Write@data,printf@f
  2385  000F68  C0B8  F0AB         	movff	D_UART_Write@data+1,printf@f+1
  2386  000F6C  0100               	movlb	0	; () banked
  2387  000F6E  6BAC               	clrf	(printf@f+2)& (0+255),b
  2388  000F70  51AA               	movf	printf@f& (0+255),w,b
  2389  000F72  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2390  000F74  B4D8               	btfsc	status,2,c
  2391  000F76  D005               	goto	u1021
  2392  000F78  0E07               	movlw	(high __ramtop+-1)
  2393  000F7A  65B8               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2394  000F7C  D001               	goto	u10211
  2395  000F7E  D001               	goto	u1021
  2396  000F80                     u10211:
  2397  000F80  8BAC               	bsf	(printf@f+2)& (0+255),5,b
  2398  000F82                     u1021:
  2399  000F82  EC9B  F005         	call	_printf	;wreg free
  2400                           
  2401                           ;UART_Driver.c: 236: printf(stopCharacter);
  2402  000F86  C03F  F0AA         	movff	_stopCharacter,printf@f
  2403  000F8A  C040  F0AB         	movff	_stopCharacter+1,printf@f+1
  2404  000F8E  0100               	movlb	0	; () banked
  2405  000F90  51AA               	movf	printf@f& (0+255),w,b
  2406  000F92  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2407  000F94  A4D8               	btfss	status,2,c
  2408  000F96  0E00               	movlw	low (__mediumconst shr (0+16))
  2409  000F98  6FAC               	movwf	(printf@f+2)& (0+255),b
  2410  000F9A  EC9B  F005         	call	_printf	;wreg free
  2411                           
  2412                           ;UART_Driver.c: 237: _delay((unsigned long)((1)*(16000000/4000.0)));
  2413  000F9E  0E06               	movlw	6
  2414  000FA0  0100               	movlb	0	; () banked
  2415  000FA2  6FB9               	movwf	??_D_UART_Write& (0+255),b
  2416  000FA4  0E30               	movlw	48
  2417  000FA6                     u1547:
  2418  000FA6  2EE8               	decfsz	wreg,f,c
  2419  000FA8  D7FE               	bra	u1547
  2420  000FAA  2FB9               	decfsz	??_D_UART_Write& (0+255),f,b
  2421  000FAC  D7FC               	bra	u1547
  2422  000FAE  F000               	nop	
  2423  000FB0  0012               	return		;funcret
  2424  000FB2                     __end_of_D_UART_Write:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodh	equ	0xFF4
  2431                           prodl	equ	0xFF3
  2432                           intcon	equ	0xFF2
  2433                           intcon2	equ	0xFF1
  2434                           postinc0	equ	0xFEE
  2435                           plusw0	equ	0xFEB
  2436                           wreg	equ	0xFE8
  2437                           indf1	equ	0xFE7
  2438                           postinc1	equ	0xFE6
  2439                           postdec1	equ	0xFE5
  2440                           fsr1h	equ	0xFE2
  2441                           fsr1l	equ	0xFE1
  2442                           indf2	equ	0xFDF
  2443                           postinc2	equ	0xFDE
  2444                           plusw2	equ	0xFDB
  2445                           fsr2h	equ	0xFDA
  2446                           fsr2l	equ	0xFD9
  2447                           status	equ	0xFD8
  2448                           
  2449 ;; *************** function _printf *****************
  2450 ;; Defined at:
  2451 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2454 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  2455 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  2456 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  2457 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  idx             1   13[BANK0 ] unsigned char 
  2460 ;;  tmpval          4    0        struct .
  2461 ;;  cp              3    0        PTR const unsigned char 
  2462 ;;  val             2   14[BANK0 ] unsigned int 
  2463 ;;  ap              2   11[BANK0 ] PTR void [1]
  2464 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2465 ;;  len             2    0        unsigned int 
  2466 ;;  c               1   17[BANK0 ] char 
  2467 ;;  prec            1   16[BANK0 ] char 
  2468 ;;  flag            1   10[BANK0 ] unsigned char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  2    7[BANK0 ] int 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2478 ;;      Params:         0       3       0       0       0       0       0       0       0
  2479 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2481 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2482 ;;Total ram usage:       11 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    9
  2485 ;; This function calls:
  2486 ;;		___lwdiv
  2487 ;;		_putch
  2488 ;; This function is called by:
  2489 ;;		_D_UART_Write
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text13
  2494  000B36                     __ptext13:
  2495                           	opt stack 0
  2496  000B36                     _printf:
  2497                           	opt stack 20
  2498                           
  2499                           ;doprnt.c: 466: va_list ap;
  2500                           ;doprnt.c: 499: signed char c;
  2501                           ;doprnt.c: 506: signed char prec;
  2502                           ;doprnt.c: 508: unsigned char flag;
  2503                           ;doprnt.c: 523: union {
  2504                           ;doprnt.c: 524: unsigned long vd;
  2505                           ;doprnt.c: 525: double integ;
  2506                           ;doprnt.c: 526: } tmpval;
  2507                           ;doprnt.c: 528: unsigned int val;
  2508                           ;doprnt.c: 529: unsigned len;
  2509                           ;doprnt.c: 530: const char * cp;
  2510                           ;doprnt.c: 533: *ap = __va_start();
  2511                           
  2512                           ;incstack = 0
  2513  000B36  0EAD               	movlw	low (?_printf+3)
  2514  000B38  0100               	movlb	0	; () banked
  2515  000B3A  6FAE               	movwf	printf@ap& (0+255),b
  2516  000B3C  0E00               	movlw	high (?_printf+3)
  2517  000B3E  6FAF               	movwf	(printf@ap+1)& (0+255),b
  2518                           
  2519                           ;doprnt.c: 536: while(c = *f++) {
  2520  000B40  D08B               	goto	u890
  2521  000B42                     
  2522                           ; BSR set to: 0
  2523                           ;doprnt.c: 538: if(c != '%')
  2524                           
  2525                           ; BSR set to: 0
  2526  000B42  0E25               	movlw	37
  2527  000B44  19B4               	xorwf	printf@c& (0+255),w,b
  2528  000B46  B4D8               	btfsc	status,2,c
  2529  000B48  D004               	goto	l271
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;doprnt.c: 540: {
  2533                           ;doprnt.c: 541: (putch(c) );
  2534  000B4A  51B4               	movf	printf@c& (0+255),w,b
  2535  000B4C  ECF0  F00A         	call	_putch
  2536                           
  2537                           ;doprnt.c: 542: continue;
  2538  000B50  D083               	goto	u890
  2539  000B52                     l271:
  2540                           
  2541                           ;doprnt.c: 543: }
  2542                           ;doprnt.c: 548: flag = 0;
  2543  000B52  0E00               	movlw	0
  2544  000B54  0100               	movlb	0	; () banked
  2545  000B56  6FAD               	movwf	printf@flag& (0+255),b
  2546                           
  2547                           ;doprnt.c: 635: switch(c = *f++) {
  2548  000B58  D004               	goto	l272
  2549  000B5A                     
  2550                           ; BSR set to: 0
  2551                           ;doprnt.c: 809: (putch(c) );
  2552                           
  2553                           ; BSR set to: 0
  2554  000B5A  51B4               	movf	printf@c& (0+255),w,b
  2555  000B5C  ECF0  F00A         	call	_putch
  2556                           
  2557                           ;doprnt.c: 810: continue;
  2558  000B60  D07B               	goto	u890
  2559  000B62                     l272:
  2560  000B62  C0AA  FFF6         	movff	printf@f,tblptrl
  2561  000B66  C0AB  FFF7         	movff	printf@f+1,tblptrh
  2562  000B6A  C0AC  FFF8         	movff	printf@f+2,tblptru
  2563  000B6E  0E01               	movlw	1
  2564  000B70  0100               	movlb	0	; () banked
  2565  000B72  27AA               	addwf	printf@f& (0+255),f,b
  2566  000B74  0E00               	movlw	0
  2567  000B76  23AB               	addwfc	(printf@f+1)& (0+255),f,b
  2568  000B78  23AC               	addwfc	(printf@f+2)& (0+255),f,b
  2569  000B7A  BAF8               	btfsc	tblptru,5,c
  2570  000B7C  D003               	bra	u857
  2571  000B7E  0008               	tblrd		*
  2572  000B80  50F5               	movf	tablat,w,c
  2573  000B82  D005               	bra	u850
  2574  000B84                     u857:
  2575  000B84  CFF6 FFE9          	movff	tblptrl,fsr0l
  2576  000B88  CFF7 FFEA          	movff	tblptrh,fsr0h
  2577  000B8C  50EF               	movf	indf0,w,c
  2578  000B8E                     u850:
  2579  000B8E  0100               	movlb	0	; () banked
  2580  000B90  6FB4               	movwf	printf@c& (0+255),b
  2581  000B92  51B4               	movf	printf@c& (0+255),w,b
  2582                           
  2583                           ; Switch size 1, requested type "space"
  2584                           ; Number of cases is 2, Range of values is 0 to 120
  2585                           ; switch strategies available:
  2586                           ; Name         Instructions Cycles
  2587                           ; simple_byte            7     4 (average)
  2588                           ;	Chosen strategy is simple_byte
  2589  000B94  0A00               	xorlw	0	; case 0
  2590  000B96  B4D8               	btfsc	status,2,c
  2591  000B98  0012               	return	
  2592  000B9A  0A78               	xorlw	120	; case 120
  2593  000B9C  A4D8               	btfss	status,2,c
  2594  000B9E  D7DD               	goto	l277
  2595                           
  2596                           ;doprnt.c: 1273: {
  2597                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2598                           
  2599                           ; BSR set to: 0
  2600  000BA0  C0AE  FFD9         	movff	printf@ap,fsr2l
  2601  000BA4  C0AF  FFDA         	movff	printf@ap+1,fsr2h
  2602  000BA8  CFDE F0B1          	movff	postinc2,printf@val
  2603  000BAC  CFDD F0B2          	movff	postdec2,printf@val+1
  2604  000BB0  0E02               	movlw	2
  2605  000BB2  0100               	movlb	0	; () banked
  2606  000BB4  27AE               	addwf	printf@ap& (0+255),f,b
  2607  000BB6  0E00               	movlw	0
  2608  000BB8  23AF               	addwfc	(printf@ap+1)& (0+255),f,b
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;doprnt.c: 1287: }
  2612                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2613  000BBA  0E01               	movlw	1
  2614  000BBC  6FB4               	movwf	printf@c& (0+255),b
  2615  000BBE  D014               	goto	l1521
  2616  000BC0                     
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2619                           
  2620                           ; BSR set to: 0
  2621  000BC0  51B4               	movf	printf@c& (0+255),w,b
  2622  000BC2  0D02               	mullw	2
  2623  000BC4  0E01               	movlw	low _hexpowers
  2624  000BC6  24F3               	addwf	prodl,w,c
  2625  000BC8  6EF6               	movwf	tblptrl,c
  2626  000BCA  0E08               	movlw	high _hexpowers
  2627  000BCC  20F4               	addwfc	prodh,w,c
  2628  000BCE  6EF7               	movwf	tblptrh,c
  2629  000BD0                     	if	1	;There are 3 active tblptr bytes
  2630  000BD0  6AF8               	clrf	tblptru,c
  2631  000BD2  0E00               	movlw	low (__mediumconst shr (0+16))
  2632  000BD4  22F8               	addwfc	tblptru,f,c
  2633  000BD6                     	endif
  2634  000BD6  0009               	tblrd		*+
  2635  000BD8  50F5               	movf	tablat,w,c
  2636  000BDA  5DB1               	subwf	printf@val& (0+255),w,b
  2637  000BDC  0009               	tblrd		*+
  2638  000BDE  50F5               	movf	tablat,w,c
  2639  000BE0  59B2               	subwfb	(printf@val+1)& (0+255),w,b
  2640  000BE2  A0D8               	btfss	status,0,c
  2641  000BE4  D005               	goto	u880
  2642                           
  2643                           ; BSR set to: 0
  2644                           
  2645                           ; BSR set to: 0
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;doprnt.c: 1318: break;
  2649  000BE6  2BB4               	incf	printf@c& (0+255),f,b
  2650  000BE8                     l1521:
  2651                           
  2652                           ; BSR set to: 0
  2653  000BE8  0E04               	movlw	4
  2654  000BEA  19B4               	xorwf	printf@c& (0+255),w,b
  2655  000BEC  A4D8               	btfss	status,2,c
  2656  000BEE  D7E8               	goto	l278
  2657  000BF0                     u880:
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;doprnt.c: 1422: {
  2661                           ;doprnt.c: 1469: }
  2662                           ;doprnt.c: 1472: prec = c;
  2663  000BF0  C0B4  F0B3         	movff	printf@c,printf@prec
  2664                           
  2665                           ;doprnt.c: 1474: while(prec--) {
  2666  000BF4  D02C               	goto	l281
  2667  000BF6                     
  2668                           ; BSR set to: 0
  2669                           ;doprnt.c: 1478: {
  2670                           ;doprnt.c: 1499: {
  2671                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2672                           
  2673                           ; BSR set to: 0
  2674  000BF6  C0B1  F0A3         	movff	printf@val,___lwdiv@dividend
  2675  000BFA  C0B2  F0A4         	movff	printf@val+1,___lwdiv@dividend+1
  2676  000BFE  51B3               	movf	printf@prec& (0+255),w,b
  2677  000C00  0D02               	mullw	2
  2678  000C02  0E01               	movlw	low _hexpowers
  2679  000C04  24F3               	addwf	prodl,w,c
  2680  000C06  6EF6               	movwf	tblptrl,c
  2681  000C08  0E08               	movlw	high _hexpowers
  2682  000C0A  20F4               	addwfc	prodh,w,c
  2683  000C0C  6EF7               	movwf	tblptrh,c
  2684  000C0E                     	if	1	;There are 3 active tblptr bytes
  2685  000C0E  6AF8               	clrf	tblptru,c
  2686  000C10  0E00               	movlw	low (__mediumconst shr (0+16))
  2687  000C12  22F8               	addwfc	tblptru,f,c
  2688  000C14                     	endif
  2689  000C14  0009               	tblrd		*+
  2690  000C16  CFF5 F0A5          	movff	tablat,___lwdiv@divisor
  2691  000C1A  000A               	tblrd		*-
  2692  000C1C  CFF5 F0A6          	movff	tablat,___lwdiv@divisor+1
  2693  000C20  EC1B  F00A         	call	___lwdiv	;wreg free
  2694  000C24  0100               	movlb	0	; () banked
  2695  000C26  51A3               	movf	?___lwdiv& (0+255),w,b
  2696  000C28  0B0F               	andlw	15
  2697  000C2A  6FB0               	movwf	printf@idx& (0+255),b
  2698                           
  2699                           ; BSR set to: 0
  2700                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2701  000C2C  51B0               	movf	printf@idx& (0+255),w,b
  2702  000C2E  0D01               	mullw	1
  2703  000C30  0E09               	movlw	low STR_17
  2704  000C32  24F3               	addwf	prodl,w,c
  2705  000C34  6EF6               	movwf	tblptrl,c
  2706  000C36  0E08               	movlw	high STR_17
  2707  000C38  20F4               	addwfc	prodh,w,c
  2708  000C3A  6EF7               	movwf	tblptrh,c
  2709  000C3C                     	if	1	;There are 3 active tblptr bytes
  2710  000C3C  6AF8               	clrf	tblptru,c
  2711  000C3E  0E00               	movlw	low (__mediumconst shr (0+16))
  2712  000C40  22F8               	addwfc	tblptru,f,c
  2713  000C42                     	endif
  2714  000C42  0008               	tblrd		*
  2715  000C44  CFF5 F0B4          	movff	tablat,printf@c
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;doprnt.c: 1508: }
  2719                           ;doprnt.c: 1523: }
  2720                           ;doprnt.c: 1524: (putch(c) );
  2721  000C48  51B4               	movf	printf@c& (0+255),w,b
  2722  000C4A  ECF0  F00A         	call	_putch
  2723  000C4E                     l281:
  2724  000C4E  0100               	movlb	0	; () banked
  2725  000C50  07B3               	decf	printf@prec& (0+255),f,b
  2726  000C52  29B3               	incf	printf@prec& (0+255),w,b
  2727  000C54  A4D8               	btfss	status,2,c
  2728  000C56  D7CF               	goto	l282
  2729  000C58                     u890:
  2730                           
  2731                           ; BSR set to: 0
  2732                           
  2733                           ; BSR set to: 0
  2734  000C58  C0AA  FFF6         	movff	printf@f,tblptrl
  2735  000C5C  C0AB  FFF7         	movff	printf@f+1,tblptrh
  2736  000C60  C0AC  FFF8         	movff	printf@f+2,tblptru
  2737  000C64  0E01               	movlw	1
  2738  000C66  0100               	movlb	0	; () banked
  2739  000C68  27AA               	addwf	printf@f& (0+255),f,b
  2740  000C6A  0E00               	movlw	0
  2741  000C6C  23AB               	addwfc	(printf@f+1)& (0+255),f,b
  2742  000C6E  23AC               	addwfc	(printf@f+2)& (0+255),f,b
  2743  000C70  BAF8               	btfsc	tblptru,5,c
  2744  000C72  D003               	bra	u907
  2745  000C74  0008               	tblrd		*
  2746  000C76  50F5               	movf	tablat,w,c
  2747  000C78  D005               	bra	u900
  2748  000C7A                     u907:
  2749  000C7A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2750  000C7E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2751  000C82  50EF               	movf	indf0,w,c
  2752  000C84                     u900:
  2753  000C84  0100               	movlb	0	; () banked
  2754  000C86  6FB4               	movwf	printf@c& (0+255),b
  2755  000C88  51B4               	movf	printf@c& (0+255),w,b
  2756  000C8A  B4D8               	btfsc	status,2,c
  2757  000C8C  0012               	return	
  2758  000C8E  D759               	goto	l270
  2759  000C90                     __end_of_printf:
  2760                           	opt stack 0
  2761                           tblptru	equ	0xFF8
  2762                           tblptrh	equ	0xFF7
  2763                           tblptrl	equ	0xFF6
  2764                           tablat	equ	0xFF5
  2765                           prodh	equ	0xFF4
  2766                           prodl	equ	0xFF3
  2767                           intcon	equ	0xFF2
  2768                           intcon2	equ	0xFF1
  2769                           indf0	equ	0xFEF
  2770                           postinc0	equ	0xFEE
  2771                           plusw0	equ	0xFEB
  2772                           fsr0h	equ	0xFEA
  2773                           fsr0l	equ	0xFE9
  2774                           wreg	equ	0xFE8
  2775                           indf1	equ	0xFE7
  2776                           postinc1	equ	0xFE6
  2777                           postdec1	equ	0xFE5
  2778                           fsr1h	equ	0xFE2
  2779                           fsr1l	equ	0xFE1
  2780                           indf2	equ	0xFDF
  2781                           postinc2	equ	0xFDE
  2782                           postdec2	equ	0xFDD
  2783                           plusw2	equ	0xFDB
  2784                           fsr2h	equ	0xFDA
  2785                           fsr2l	equ	0xFD9
  2786                           status	equ	0xFD8
  2787                           
  2788 ;; *************** function _putch *****************
  2789 ;; Defined at:
  2790 ;;		line 263 in file "Drivers/UART_Driver.c"
  2791 ;; Parameters:    Size  Location     Type
  2792 ;;  data            1    wreg     unsigned char 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  data            1    1[BANK0 ] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, status,2, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2804 ;;      Params:         0       0       0       0       0       0       0       0       0
  2805 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2807 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2808 ;;Total ram usage:        1 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    8
  2811 ;; This function calls:
  2812 ;;		_writeByte
  2813 ;; This function is called by:
  2814 ;;		_printf
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text14
  2819  0015E0                     __ptext14:
  2820                           	opt stack 0
  2821  0015E0                     _putch:
  2822                           	opt stack 20
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;incstack = 0
  2826                           ;putch@data stored from wreg
  2827  0015E0  0100               	movlb	0	; () banked
  2828  0015E2  6FA4               	movwf	putch@data& (0+255),b
  2829                           
  2830                           ;UART_Driver.c: 264: writeByte(data);
  2831  0015E4  0100               	movlb	0	; () banked
  2832  0015E6  51A4               	movf	putch@data& (0+255),w,b
  2833  0015E8  ECF7  F00A         	call	_writeByte
  2834  0015EC  0012               	return		;funcret
  2835  0015EE                     __end_of_putch:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           intcon2	equ	0xFF1
  2845                           indf0	equ	0xFEF
  2846                           postinc0	equ	0xFEE
  2847                           plusw0	equ	0xFEB
  2848                           fsr0h	equ	0xFEA
  2849                           fsr0l	equ	0xFE9
  2850                           wreg	equ	0xFE8
  2851                           indf1	equ	0xFE7
  2852                           postinc1	equ	0xFE6
  2853                           postdec1	equ	0xFE5
  2854                           fsr1h	equ	0xFE2
  2855                           fsr1l	equ	0xFE1
  2856                           indf2	equ	0xFDF
  2857                           postinc2	equ	0xFDE
  2858                           postdec2	equ	0xFDD
  2859                           plusw2	equ	0xFDB
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _writeByte *****************
  2865 ;; Defined at:
  2866 ;;		line 69 in file "Drivers/UART_Driver.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  data            1    wreg     unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  data            1    0[BANK0 ] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0
  2881 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2883 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2884 ;;Total ram usage:        1 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    7
  2887 ;; This function calls:
  2888 ;;		Nothing
  2889 ;; This function is called by:
  2890 ;;		_putch
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text15
  2895  0015EE                     __ptext15:
  2896                           	opt stack 0
  2897  0015EE                     _writeByte:
  2898                           	opt stack 20
  2899                           
  2900                           ;incstack = 0
  2901                           ;writeByte@data stored from wreg
  2902  0015EE  0100               	movlb	0	; () banked
  2903  0015F0  6FA3               	movwf	writeByte@data& (0+255),b
  2904  0015F2                     
  2905                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2906  0015F2  A2AC               	btfss	4012,1,c	;volatile
  2907  0015F4  D7FE               	goto	l1435
  2908                           
  2909                           ;UART_Driver.c: 71: TXREG = data;
  2910  0015F6  C0A3  FFAD         	movff	writeByte@data,4013	;volatile
  2911  0015FA  0012               	return		;funcret
  2912  0015FC                     __end_of_writeByte:
  2913                           	opt stack 0
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           intcon2	equ	0xFF1
  2922                           indf0	equ	0xFEF
  2923                           postinc0	equ	0xFEE
  2924                           plusw0	equ	0xFEB
  2925                           fsr0h	equ	0xFEA
  2926                           fsr0l	equ	0xFE9
  2927                           wreg	equ	0xFE8
  2928                           indf1	equ	0xFE7
  2929                           postinc1	equ	0xFE6
  2930                           postdec1	equ	0xFE5
  2931                           fsr1h	equ	0xFE2
  2932                           fsr1l	equ	0xFE1
  2933                           indf2	equ	0xFDF
  2934                           postinc2	equ	0xFDE
  2935                           postdec2	equ	0xFDD
  2936                           plusw2	equ	0xFDB
  2937                           fsr2h	equ	0xFDA
  2938                           fsr2l	equ	0xFD9
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function ___lwdiv *****************
  2942 ;; Defined at:
  2943 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;  dividend        2    0[BANK0 ] unsigned int 
  2946 ;;  divisor         2    2[BANK0 ] unsigned int 
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;  quotient        2    4[BANK0 ] unsigned int 
  2949 ;;  counter         1    6[BANK0 ] unsigned char 
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  2    0[BANK0 ] unsigned int 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2959 ;;      Params:         0       4       0       0       0       0       0       0       0
  2960 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2961 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2962 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2963 ;;Total ram usage:        7 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:    7
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_printf
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text16
  2974  001436                     __ptext16:
  2975                           	opt stack 0
  2976  001436                     ___lwdiv:
  2977                           	opt stack 21
  2978                           
  2979                           ;incstack = 0
  2980  001436  0E00               	movlw	0
  2981  001438  0100               	movlb	0	; () banked
  2982  00143A  6FA8               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2983  00143C  0E00               	movlw	0
  2984  00143E  6FA7               	movwf	___lwdiv@quotient& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987  001440  51A5               	movf	___lwdiv@divisor& (0+255),w,b
  2988  001442  11A6               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2989  001444  B4D8               	btfsc	status,2,c
  2990  001446  D01C               	goto	l694
  2991                           
  2992                           ; BSR set to: 0
  2993  001448  0E01               	movlw	1
  2994  00144A  6FA9               	movwf	___lwdiv@counter& (0+255),b
  2995  00144C  D004               	goto	l689
  2996  00144E                     
  2997                           ; BSR set to: 0
  2998                           
  2999                           ; BSR set to: 0
  3000  00144E  90D8               	bcf	status,0,c
  3001  001450  37A5               	rlcf	___lwdiv@divisor& (0+255),f,b
  3002  001452  37A6               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3003  001454  2BA9               	incf	___lwdiv@counter& (0+255),f,b
  3004  001456                     l689:
  3005                           
  3006                           ; BSR set to: 0
  3007                           
  3008                           ; BSR set to: 0
  3009  001456  AFA6               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3010  001458  D7FA               	goto	l690
  3011  00145A                     u790:
  3012                           
  3013                           ; BSR set to: 0
  3014                           
  3015                           ; BSR set to: 0
  3016                           
  3017                           ; BSR set to: 0
  3018  00145A  90D8               	bcf	status,0,c
  3019  00145C  37A7               	rlcf	___lwdiv@quotient& (0+255),f,b
  3020  00145E  37A8               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3021                           
  3022                           ; BSR set to: 0
  3023  001460  51A5               	movf	___lwdiv@divisor& (0+255),w,b
  3024  001462  5DA3               	subwf	___lwdiv@dividend& (0+255),w,b
  3025  001464  51A6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3026  001466  59A4               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3027  001468  A0D8               	btfss	status,0,c
  3028  00146A  D005               	goto	l693
  3029                           
  3030                           ; BSR set to: 0
  3031  00146C  51A5               	movf	___lwdiv@divisor& (0+255),w,b
  3032  00146E  5FA3               	subwf	___lwdiv@dividend& (0+255),f,b
  3033  001470  51A6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3034  001472  5BA4               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3035                           
  3036                           ; BSR set to: 0
  3037  001474  81A7               	bsf	___lwdiv@quotient& (0+255),0,b
  3038  001476                     l693:
  3039                           
  3040                           ; BSR set to: 0
  3041                           
  3042                           ; BSR set to: 0
  3043  001476  90D8               	bcf	status,0,c
  3044  001478  33A6               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3045  00147A  33A5               	rrcf	___lwdiv@divisor& (0+255),f,b
  3046                           
  3047                           ; BSR set to: 0
  3048  00147C  2FA9               	decfsz	___lwdiv@counter& (0+255),f,b
  3049  00147E  D7ED               	goto	u790
  3050  001480                     l694:
  3051                           
  3052                           ; BSR set to: 0
  3053                           
  3054                           ; BSR set to: 0
  3055  001480  C0A7  F0A3         	movff	___lwdiv@quotient,?___lwdiv
  3056  001484  C0A8  F0A4         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3057                           
  3058                           ; BSR set to: 0
  3059  001488  0012               	return		;funcret
  3060  00148A                     __end_of___lwdiv:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           indf0	equ	0xFEF
  3071                           postinc0	equ	0xFEE
  3072                           plusw0	equ	0xFEB
  3073                           fsr0h	equ	0xFEA
  3074                           fsr0l	equ	0xFE9
  3075                           wreg	equ	0xFE8
  3076                           indf1	equ	0xFE7
  3077                           postinc1	equ	0xFE6
  3078                           postdec1	equ	0xFE5
  3079                           fsr1h	equ	0xFE2
  3080                           fsr1l	equ	0xFE1
  3081                           indf2	equ	0xFDF
  3082                           postinc2	equ	0xFDE
  3083                           postdec2	equ	0xFDD
  3084                           plusw2	equ	0xFDB
  3085                           fsr2h	equ	0xFDA
  3086                           fsr2l	equ	0xFD9
  3087                           status	equ	0xFD8
  3088                           
  3089 ;; *************** function _C_DOOR_ReadSensors *****************
  3090 ;; Defined at:
  3091 ;;		line 99 in file "Controllers/DOOR_Controller.c"
  3092 ;; Parameters:    Size  Location     Type
  3093 ;;		None
  3094 ;; Auto vars:     Size  Location     Type
  3095 ;;  d               1    4[BANK0 ] unsigned char 
  3096 ;; Return value:  Size  Location     Type
  3097 ;;                  1    wreg      void 
  3098 ;; Registers used:
  3099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3100 ;; Tracked objects:
  3101 ;;		On entry : 0/0
  3102 ;;		On exit  : 0/0
  3103 ;;		Unchanged: 0/0
  3104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3105 ;;      Params:         0       0       0       0       0       0       0       0       0
  3106 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3107 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3108 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3109 ;;Total ram usage:        5 bytes
  3110 ;; Hardware stack levels used:    1
  3111 ;; Hardware stack levels required when called:    7
  3112 ;; This function calls:
  3113 ;;		Nothing
  3114 ;; This function is called by:
  3115 ;;		_main
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           	psect	text17
  3120  001294                     __ptext17:
  3121                           	opt stack 0
  3122  001294                     _C_DOOR_ReadSensors:
  3123                           	opt stack 23
  3124                           
  3125                           ;DOOR_Controller.c: 100: uint8_t d;
  3126                           ;DOOR_Controller.c: 101: for (d = 0; d < 5; d++) {
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;incstack = 0
  3130  001294  0E00               	movlw	0
  3131  001296  0100               	movlb	0	; () banked
  3132  001298  6FA7               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3133  00129A                     l1667:
  3134                           
  3135                           ; BSR set to: 0
  3136  00129A  0E04               	movlw	4
  3137  00129C  65A7               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  3138  00129E  D001               	goto	l39
  3139  0012A0  0012               	return	
  3140  0012A2                     l39:
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;DOOR_Controller.c: 102: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pi
      +                          n) & 0x01;
  3144                           
  3145                           ; BSR set to: 0
  3146  0012A2  51A7               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3147  0012A4  0D0A               	mullw	10
  3148  0012A6  0E06               	movlw	6
  3149  0012A8  26F3               	addwf	prodl,f,c
  3150  0012AA  0E00               	movlw	0
  3151  0012AC  22F4               	addwfc	prodh,f,c
  3152  0012AE  0E60               	movlw	low _doors
  3153  0012B0  24F3               	addwf	prodl,w,c
  3154  0012B2  6ED9               	movwf	fsr2l,c
  3155  0012B4  0E00               	movlw	high _doors
  3156  0012B6  20F4               	addwfc	prodh,w,c
  3157  0012B8  6EDA               	movwf	fsr2h,c
  3158  0012BA  51A7               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3159  0012BC  0D0A               	mullw	10
  3160  0012BE  0E09               	movlw	9
  3161  0012C0  26F3               	addwf	prodl,f,c
  3162  0012C2  0E00               	movlw	0
  3163  0012C4  22F4               	addwfc	prodh,f,c
  3164  0012C6  0E60               	movlw	low _doors
  3165  0012C8  24F3               	addwf	prodl,w,c
  3166  0012CA  6EE1               	movwf	fsr1l,c
  3167  0012CC  0E00               	movlw	high _doors
  3168  0012CE  20F4               	addwfc	prodh,w,c
  3169  0012D0  6EE2               	movwf	fsr1h,c
  3170  0012D2  50E7               	movf	indf1,w,c
  3171  0012D4  6FA3               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3172  0012D6  51A7               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3173  0012D8  0D0A               	mullw	10
  3174  0012DA  0E07               	movlw	7
  3175  0012DC  26F3               	addwf	prodl,f,c
  3176  0012DE  0E00               	movlw	0
  3177  0012E0  22F4               	addwfc	prodh,f,c
  3178  0012E2  0E60               	movlw	low _doors
  3179  0012E4  24F3               	addwf	prodl,w,c
  3180  0012E6  6EE1               	movwf	fsr1l,c
  3181  0012E8  0E00               	movlw	high _doors
  3182  0012EA  20F4               	addwfc	prodh,w,c
  3183  0012EC  6EE2               	movwf	fsr1h,c
  3184  0012EE  CFE6 F0A4          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3185  0012F2  CFE5 F0A5          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3186  0012F6  C0A4  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3187  0012FA  C0A5  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3188  0012FE  50E7               	movf	indf1,w,c
  3189  001300  6FA6               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3190  001302  2BA3               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3191  001304  D002               	goto	u1144
  3192  001306                     u1145:
  3193  001306  90D8               	bcf	status,0,c
  3194  001308  33A6               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3195  00130A                     u1144:
  3196  00130A  2FA3               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3197  00130C  D7FC               	goto	u1145
  3198  00130E  0100               	movlb	0	; () banked
  3199  001310  51A6               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3200  001312  0B01               	andlw	1
  3201  001314  6EDF               	movwf	indf2,c
  3202                           
  3203                           ; BSR set to: 0
  3204  001316  2BA7               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3205  001318  D7C0               	goto	l1667
  3206  00131A                     __end_of_C_DOOR_ReadSensors:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon	equ	0xFF2
  3215                           intcon2	equ	0xFF1
  3216                           indf0	equ	0xFEF
  3217                           postinc0	equ	0xFEE
  3218                           plusw0	equ	0xFEB
  3219                           fsr0h	equ	0xFEA
  3220                           fsr0l	equ	0xFE9
  3221                           wreg	equ	0xFE8
  3222                           indf1	equ	0xFE7
  3223                           postinc1	equ	0xFE6
  3224                           postdec1	equ	0xFE5
  3225                           fsr1h	equ	0xFE2
  3226                           fsr1l	equ	0xFE1
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           plusw2	equ	0xFDB
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _C_DOOR_LockAll *****************
  3236 ;; Defined at:
  3237 ;;		line 74 in file "Controllers/DOOR_Controller.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, fsr2l, fsr2h
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    7
  3258 ;; This function calls:
  3259 ;;		Nothing
  3260 ;; This function is called by:
  3261 ;;		_main
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text18
  3266  0015FC                     __ptext18:
  3267                           	opt stack 0
  3268  0015FC                     _C_DOOR_LockAll:
  3269                           	opt stack 23
  3270                           
  3271                           ;DOOR_Controller.c: 79: *doors[0].lock_port |= 0xC0;
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;incstack = 0
  3275  0015FC  C062  FFD9         	movff	_doors+2,fsr2l
  3276  001600  C063  FFDA         	movff	_doors+3,fsr2h
  3277  001604  0EC0               	movlw	192
  3278  001606  12DF               	iorwf	indf2,f,c
  3279  001608  0012               	return		;funcret
  3280  00160A                     __end_of_C_DOOR_LockAll:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           prodh	equ	0xFF4
  3287                           prodl	equ	0xFF3
  3288                           intcon	equ	0xFF2
  3289                           intcon2	equ	0xFF1
  3290                           indf0	equ	0xFEF
  3291                           postinc0	equ	0xFEE
  3292                           plusw0	equ	0xFEB
  3293                           fsr0h	equ	0xFEA
  3294                           fsr0l	equ	0xFE9
  3295                           wreg	equ	0xFE8
  3296                           indf1	equ	0xFE7
  3297                           postinc1	equ	0xFE6
  3298                           postdec1	equ	0xFE5
  3299                           fsr1h	equ	0xFE2
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           plusw2	equ	0xFDB
  3305                           fsr2h	equ	0xFDA
  3306                           fsr2l	equ	0xFD9
  3307                           status	equ	0xFD8
  3308                           
  3309 ;; *************** function _C_DOOR_Init *****************
  3310 ;; Defined at:
  3311 ;;		line 44 in file "Controllers/DOOR_Controller.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  d               1    0[BANK0 ] unsigned char 
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3325 ;;      Params:         0       0       0       0       0       0       0       0       0
  3326 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3328 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3329 ;;Total ram usage:        1 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    7
  3332 ;; This function calls:
  3333 ;;		Nothing
  3334 ;; This function is called by:
  3335 ;;		_main
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text19
  3340  000DD8                     __ptext19:
  3341                           	opt stack 0
  3342  000DD8                     _C_DOOR_Init:
  3343                           	opt stack 23
  3344                           
  3345                           ;DOOR_Controller.c: 46: TRISB &= 0x3F;
  3346                           
  3347                           ;incstack = 0
  3348  000DD8  0E3F               	movlw	63
  3349  000DDA  1693               	andwf	3987,f,c	;volatile
  3350                           
  3351                           ;DOOR_Controller.c: 47: TRISB |= 0x3F;
  3352  000DDC  0E3F               	movlw	63
  3353  000DDE  1293               	iorwf	3987,f,c	;volatile
  3354                           
  3355                           ;DOOR_Controller.c: 50: uint8_t d;
  3356                           ;DOOR_Controller.c: 51: for (d = 0; d < 5; d++) {
  3357  000DE0  0E00               	movlw	0
  3358  000DE2  0100               	movlb	0	; () banked
  3359  000DE4  6FA3               	movwf	C_DOOR_Init@d& (0+255),b
  3360  000DE6                     l1651:
  3361                           
  3362                           ; BSR set to: 0
  3363  000DE6  0E04               	movlw	4
  3364  000DE8  65A3               	cpfsgt	C_DOOR_Init@d& (0+255),b
  3365  000DEA  D001               	goto	l16
  3366  000DEC  0012               	return	
  3367  000DEE                     l16:
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;DOOR_Controller.c: 52: doors[d].id = d;
  3371                           
  3372                           ; BSR set to: 0
  3373  000DEE  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3374  000DF0  0D0A               	mullw	10
  3375  000DF2  0E60               	movlw	low _doors
  3376  000DF4  24F3               	addwf	prodl,w,c
  3377  000DF6  6ED9               	movwf	fsr2l,c
  3378  000DF8  0E00               	movlw	high _doors
  3379  000DFA  20F4               	addwfc	prodh,w,c
  3380  000DFC  6EDA               	movwf	fsr2h,c
  3381  000DFE  C0A3  FFDF         	movff	C_DOOR_Init@d,indf2
  3382                           
  3383                           ;DOOR_Controller.c: 54: doors[d].locked = 1;
  3384  000E02  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3385  000E04  0D0A               	mullw	10
  3386  000E06  0E01               	movlw	1
  3387  000E08  26F3               	addwf	prodl,f,c
  3388  000E0A  0E00               	movlw	0
  3389  000E0C  22F4               	addwfc	prodh,f,c
  3390  000E0E  0E60               	movlw	low _doors
  3391  000E10  24F3               	addwf	prodl,w,c
  3392  000E12  6ED9               	movwf	fsr2l,c
  3393  000E14  0E00               	movlw	high _doors
  3394  000E16  20F4               	addwfc	prodh,w,c
  3395  000E18  6EDA               	movwf	fsr2h,c
  3396  000E1A  0E01               	movlw	1
  3397  000E1C  6EDF               	movwf	indf2,c
  3398                           
  3399                           ;DOOR_Controller.c: 55: doors[d].lock_port = &PORTB;
  3400  000E1E  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3401  000E20  0D0A               	mullw	10
  3402  000E22  0E02               	movlw	2
  3403  000E24  26F3               	addwf	prodl,f,c
  3404  000E26  0E00               	movlw	0
  3405  000E28  22F4               	addwfc	prodh,f,c
  3406  000E2A  0E60               	movlw	low _doors
  3407  000E2C  24F3               	addwf	prodl,w,c
  3408  000E2E  6ED9               	movwf	fsr2l,c
  3409  000E30  0E00               	movlw	high _doors
  3410  000E32  20F4               	addwfc	prodh,w,c
  3411  000E34  6EDA               	movwf	fsr2h,c
  3412  000E36  0E81               	movlw	129
  3413  000E38  6EDE               	movwf	postinc2,c
  3414  000E3A  0E0F               	movlw	15
  3415  000E3C  6EDD               	movwf	postdec2,c
  3416                           
  3417                           ;DOOR_Controller.c: 56: doors[d].lock_pin = 7;
  3418  000E3E  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3419  000E40  0D0A               	mullw	10
  3420  000E42  0E04               	movlw	4
  3421  000E44  26F3               	addwf	prodl,f,c
  3422  000E46  0E00               	movlw	0
  3423  000E48  22F4               	addwfc	prodh,f,c
  3424  000E4A  0E60               	movlw	low _doors
  3425  000E4C  24F3               	addwf	prodl,w,c
  3426  000E4E  6ED9               	movwf	fsr2l,c
  3427  000E50  0E00               	movlw	high _doors
  3428  000E52  20F4               	addwfc	prodh,w,c
  3429  000E54  6EDA               	movwf	fsr2h,c
  3430  000E56  0E07               	movlw	7
  3431  000E58  6EDF               	movwf	indf2,c
  3432                           
  3433                           ;DOOR_Controller.c: 58: doors[d].is_open = 0;
  3434  000E5A  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3435  000E5C  0D0A               	mullw	10
  3436  000E5E  0E06               	movlw	6
  3437  000E60  26F3               	addwf	prodl,f,c
  3438  000E62  0E00               	movlw	0
  3439  000E64  22F4               	addwfc	prodh,f,c
  3440  000E66  0E60               	movlw	low _doors
  3441  000E68  24F3               	addwf	prodl,w,c
  3442  000E6A  6ED9               	movwf	fsr2l,c
  3443  000E6C  0E00               	movlw	high _doors
  3444  000E6E  20F4               	addwfc	prodh,w,c
  3445  000E70  6EDA               	movwf	fsr2h,c
  3446  000E72  0E00               	movlw	0
  3447  000E74  6EDF               	movwf	indf2,c
  3448                           
  3449                           ;DOOR_Controller.c: 59: doors[d].was_open = 0;
  3450  000E76  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3451  000E78  0D0A               	mullw	10
  3452  000E7A  0E05               	movlw	5
  3453  000E7C  26F3               	addwf	prodl,f,c
  3454  000E7E  0E00               	movlw	0
  3455  000E80  22F4               	addwfc	prodh,f,c
  3456  000E82  0E60               	movlw	low _doors
  3457  000E84  24F3               	addwf	prodl,w,c
  3458  000E86  6ED9               	movwf	fsr2l,c
  3459  000E88  0E00               	movlw	high _doors
  3460  000E8A  20F4               	addwfc	prodh,w,c
  3461  000E8C  6EDA               	movwf	fsr2h,c
  3462  000E8E  0E00               	movlw	0
  3463  000E90  6EDF               	movwf	indf2,c
  3464                           
  3465                           ;DOOR_Controller.c: 60: doors[d].sensor_port = &PORTB;
  3466  000E92  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3467  000E94  0D0A               	mullw	10
  3468  000E96  0E07               	movlw	7
  3469  000E98  26F3               	addwf	prodl,f,c
  3470  000E9A  0E00               	movlw	0
  3471  000E9C  22F4               	addwfc	prodh,f,c
  3472  000E9E  0E60               	movlw	low _doors
  3473  000EA0  24F3               	addwf	prodl,w,c
  3474  000EA2  6ED9               	movwf	fsr2l,c
  3475  000EA4  0E00               	movlw	high _doors
  3476  000EA6  20F4               	addwfc	prodh,w,c
  3477  000EA8  6EDA               	movwf	fsr2h,c
  3478  000EAA  0E81               	movlw	129
  3479  000EAC  6EDE               	movwf	postinc2,c
  3480  000EAE  0E0F               	movlw	15
  3481  000EB0  6EDD               	movwf	postdec2,c
  3482                           
  3483                           ;DOOR_Controller.c: 61: doors[d].sensor_pin = d;
  3484  000EB2  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3485  000EB4  0D0A               	mullw	10
  3486  000EB6  0E09               	movlw	9
  3487  000EB8  26F3               	addwf	prodl,f,c
  3488  000EBA  0E00               	movlw	0
  3489  000EBC  22F4               	addwfc	prodh,f,c
  3490  000EBE  0E60               	movlw	low _doors
  3491  000EC0  24F3               	addwf	prodl,w,c
  3492  000EC2  6ED9               	movwf	fsr2l,c
  3493  000EC4  0E00               	movlw	high _doors
  3494  000EC6  20F4               	addwfc	prodh,w,c
  3495  000EC8  6EDA               	movwf	fsr2h,c
  3496  000ECA  C0A3  FFDF         	movff	C_DOOR_Init@d,indf2
  3497                           
  3498                           ; BSR set to: 0
  3499  000ECE  2BA3               	incf	C_DOOR_Init@d& (0+255),f,b
  3500  000ED0  D78A               	goto	l1651
  3501  000ED2                     __end_of_C_DOOR_Init:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           intcon	equ	0xFF2
  3510                           intcon2	equ	0xFF1
  3511                           indf0	equ	0xFEF
  3512                           postinc0	equ	0xFEE
  3513                           plusw0	equ	0xFEB
  3514                           fsr0h	equ	0xFEA
  3515                           fsr0l	equ	0xFE9
  3516                           wreg	equ	0xFE8
  3517                           indf1	equ	0xFE7
  3518                           postinc1	equ	0xFE6
  3519                           postdec1	equ	0xFE5
  3520                           fsr1h	equ	0xFE2
  3521                           fsr1l	equ	0xFE1
  3522                           indf2	equ	0xFDF
  3523                           postinc2	equ	0xFDE
  3524                           postdec2	equ	0xFDD
  3525                           plusw2	equ	0xFDB
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _LowISR *****************
  3531 ;; Defined at:
  3532 ;;		line 267 in file "Drivers/UART_Driver.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;		None
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;		None
  3537 ;; Return value:  Size  Location     Type
  3538 ;;                  1    wreg      void 
  3539 ;; Registers used:
  3540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3546 ;;      Params:         0       0       0       0       0       0       0       0       0
  3547 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3548 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3549 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3550 ;;Total ram usage:       21 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    6
  3553 ;; This function calls:
  3554 ;;		_fillDataBuffer
  3555 ;;		_readByte
  3556 ;; This function is called by:
  3557 ;;		Interrupt level 1
  3558 ;; This function uses a non-reentrant model
  3559 ;;
  3560                           
  3561                           	psect	intcodelo
  3562  000018                     __pintcodelo:
  3563                           	opt stack 0
  3564  000018                     _LowISR:
  3565                           	opt stack 19
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;incstack = 0
  3569  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3570  00001A  CFD8 F028          	movff	status,??_LowISR
  3571  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3572  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3573  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3574  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3575  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3576  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3577  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3578  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3579  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3580  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3581  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3582  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3583  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3584  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3585  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3586  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3587  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3588  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3589  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3590  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3591                           
  3592                           ;UART_Driver.c: 268: if (PIR1bits.RC1IF) {
  3593  00006E  AA9E               	btfss	3998,5,c	;volatile
  3594  000070  D005               	goto	i1l179
  3595                           
  3596                           ;UART_Driver.c: 269: fillDataBuffer(readByte());
  3597  000072  EC10  F00B         	call	_readByte	;wreg free
  3598  000076  EC1C  F004         	call	_fillDataBuffer
  3599                           
  3600                           ;UART_Driver.c: 270: PIR1bits.RC1IF = 0;
  3601  00007A  9A9E               	bcf	3998,5,c	;volatile
  3602  00007C                     i1l179:
  3603  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3604  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3605  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3606  000088  C039  F044         	movff	??_LowISR+17,btemp
  3607  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3608  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3609  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3610  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3611  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3612  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3613  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3614  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3615  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3616  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3617  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3618  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3619  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3620  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3621  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3622  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3623  0000CC  C028  FFD8         	movff	??_LowISR,status
  3624  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3625  0000D2  0010               	retfie	
  3626  0000D4                     __end_of_LowISR:
  3627                           	opt stack 0
  3628                           pclatu	equ	0xFFB
  3629                           pclath	equ	0xFFA
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           intcon2	equ	0xFF1
  3638                           indf0	equ	0xFEF
  3639                           postinc0	equ	0xFEE
  3640                           plusw0	equ	0xFEB
  3641                           fsr0h	equ	0xFEA
  3642                           fsr0l	equ	0xFE9
  3643                           wreg	equ	0xFE8
  3644                           indf1	equ	0xFE7
  3645                           postinc1	equ	0xFE6
  3646                           postdec1	equ	0xFE5
  3647                           fsr1h	equ	0xFE2
  3648                           fsr1l	equ	0xFE1
  3649                           bsr	equ	0xFE0
  3650                           indf2	equ	0xFDF
  3651                           postinc2	equ	0xFDE
  3652                           postdec2	equ	0xFDD
  3653                           plusw2	equ	0xFDB
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _readByte *****************
  3659 ;; Defined at:
  3660 ;;		line 74 in file "Drivers/UART_Driver.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      unsigned char 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3674 ;;      Params:         0       0       0       0       0       0       0       0       0
  3675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3677 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3678 ;;Total ram usage:        0 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    1
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_LowISR
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text21
  3689  001620                     __ptext21:
  3690                           	opt stack 0
  3691  001620                     _readByte:
  3692                           	opt stack 23
  3693                           
  3694                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3695                           
  3696                           ;incstack = 0
  3697  001620  50AB               	movf	4011,w,c	;volatile
  3698                           
  3699                           ;UART_Driver.c: 77: }
  3700                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3701  001622  50AB               	movf	4011,w,c	;volatile
  3702                           
  3703                           ;UART_Driver.c: 80: }
  3704                           ;UART_Driver.c: 81: return RCREG;
  3705  001624  50AE               	movf	4014,w,c	;volatile
  3706  001626  0012               	return	
  3707  001628                     __end_of_readByte:
  3708                           	opt stack 0
  3709                           pclatu	equ	0xFFB
  3710                           pclath	equ	0xFFA
  3711                           tblptru	equ	0xFF8
  3712                           tblptrh	equ	0xFF7
  3713                           tblptrl	equ	0xFF6
  3714                           tablat	equ	0xFF5
  3715                           prodh	equ	0xFF4
  3716                           prodl	equ	0xFF3
  3717                           intcon	equ	0xFF2
  3718                           intcon2	equ	0xFF1
  3719                           indf0	equ	0xFEF
  3720                           postinc0	equ	0xFEE
  3721                           plusw0	equ	0xFEB
  3722                           fsr0h	equ	0xFEA
  3723                           fsr0l	equ	0xFE9
  3724                           wreg	equ	0xFE8
  3725                           indf1	equ	0xFE7
  3726                           postinc1	equ	0xFE6
  3727                           postdec1	equ	0xFE5
  3728                           fsr1h	equ	0xFE2
  3729                           fsr1l	equ	0xFE1
  3730                           bsr	equ	0xFE0
  3731                           indf2	equ	0xFDF
  3732                           postinc2	equ	0xFDE
  3733                           postdec2	equ	0xFDD
  3734                           plusw2	equ	0xFDB
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function _fillDataBuffer *****************
  3740 ;; Defined at:
  3741 ;;		line 84 in file "Drivers/UART_Driver.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  data            1    wreg     unsigned char 
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;  data            1   38[COMRAM] unsigned char 
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3755 ;;      Params:         0       0       0       0       0       0       0       0       0
  3756 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3758 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3759 ;;Total ram usage:        1 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    5
  3762 ;; This function calls:
  3763 ;;		_acknowledge
  3764 ;; This function is called by:
  3765 ;;		_LowISR
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text22
  3770  000838                     __ptext22:
  3771                           	opt stack 0
  3772  000838                     _fillDataBuffer:
  3773                           	opt stack 19
  3774                           
  3775                           ;incstack = 0
  3776                           ;fillDataBuffer@data stored from wreg
  3777  000838  6E27               	movwf	fillDataBuffer@data,c
  3778                           
  3779                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3780  00083A  D0B5               	goto	i1l128
  3781  00083C                     
  3782                           ;UART_Driver.c: 87: if(data == 0x26) {
  3783  00083C  0E26               	movlw	38
  3784  00083E  1827               	xorwf	fillDataBuffer@data,w,c
  3785  000840  A4D8               	btfss	status,2,c
  3786  000842  D010               	goto	i1l130
  3787                           
  3788                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3789  000844  0E00               	movlw	0
  3790  000846  0101               	movlb	1	; () banked
  3791  000848  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3792                           
  3793                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3794  00084A  0E00               	movlw	0
  3795  00084C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3796                           
  3797                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3798  00084E  0E00               	movlw	0
  3799  000850  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3800                           
  3801                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3802  000852  0E00               	movlw	0
  3803  000854  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3804                           
  3805                           ;UART_Driver.c: 92: readReady = 0;
  3806  000856  0E00               	movlw	0
  3807  000858  0100               	movlb	0	; () banked
  3808  00085A  6FA2               	movwf	_readReady& (0+255),b
  3809                           
  3810                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3811  00085C  0E01               	movlw	1
  3812  00085E  0101               	movlb	1	; () banked
  3813  000860  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3814                           
  3815                           ;UART_Driver.c: 94: } else {
  3816  000862  0012               	return	
  3817  000864                     i1l130:
  3818                           
  3819                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3820                           
  3821                           ; BSR set to: 1
  3822  000864  0E00               	movlw	0
  3823  000866  0101               	movlb	1	; () banked
  3824  000868  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3825                           
  3826                           ; BSR set to: 1
  3827                           ;UART_Driver.c: 97: }
  3828                           ;UART_Driver.c: 98: break;
  3829                           
  3830                           ; BSR set to: 1
  3831                           ;UART_Driver.c: 96: return;
  3832  00086A  0012               	return	
  3833  00086C                     
  3834                           ; BSR set to: 1
  3835                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3836                           
  3837                           ; BSR set to: 1
  3838  00086C  0E3A               	movlw	58
  3839  00086E  1827               	xorwf	fillDataBuffer@data,w,c
  3840  000870  A4D8               	btfss	status,2,c
  3841  000872  D00D               	goto	i1l135
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3845  000874  0E02               	movlw	2
  3846  000876  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3847                           
  3848                           ; BSR set to: 1
  3849                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3850  000878  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3851  00087A  0D01               	mullw	1
  3852  00087C  0E00               	movlw	low _readBuffer
  3853  00087E  24F3               	addwf	prodl,w,c
  3854  000880  6ED9               	movwf	fsr2l,c
  3855  000882  0E01               	movlw	high _readBuffer
  3856  000884  20F4               	addwfc	prodh,w,c
  3857  000886  6EDA               	movwf	fsr2h,c
  3858  000888  0E00               	movlw	0
  3859  00088A  6EDF               	movwf	indf2,c
  3860                           
  3861                           ;UART_Driver.c: 104: } else {
  3862  00088C  0012               	return	
  3863  00088E                     i1l135:
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3867                           
  3868                           ; BSR set to: 1
  3869  00088E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3870  000890  0D01               	mullw	1
  3871  000892  0E00               	movlw	low _readBuffer
  3872  000894  24F3               	addwf	prodl,w,c
  3873  000896  6ED9               	movwf	fsr2l,c
  3874  000898  0E01               	movlw	high _readBuffer
  3875  00089A  20F4               	addwfc	prodh,w,c
  3876  00089C  6EDA               	movwf	fsr2h,c
  3877  00089E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3878                           
  3879                           ; BSR set to: 1
  3880                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3881  0008A2  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3882                           
  3883                           ; BSR set to: 1
  3884                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3885  0008A4  0E0A               	movlw	10
  3886  0008A6  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3887  0008A8  0012               	return	
  3888                           
  3889                           ; BSR set to: 1
  3890                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3891  0008AA  0E00               	movlw	0
  3892  0008AC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;UART_Driver.c: 109: }
  3896                           ;UART_Driver.c: 110: }
  3897                           ;UART_Driver.c: 111: break;
  3898                           
  3899                           ; BSR set to: 1
  3900  0008AE  0012               	return	
  3901  0008B0                     
  3902                           ; BSR set to: 1
  3903                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3904                           
  3905                           ; BSR set to: 1
  3906  0008B0  0E3A               	movlw	58
  3907  0008B2  1827               	xorwf	fillDataBuffer@data,w,c
  3908  0008B4  A4D8               	btfss	status,2,c
  3909  0008B6  D00D               	goto	i1l139
  3910                           
  3911                           ; BSR set to: 1
  3912                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3913  0008B8  0E03               	movlw	3
  3914  0008BA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3915                           
  3916                           ; BSR set to: 1
  3917                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3918  0008BC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3919  0008BE  0D01               	mullw	1
  3920  0008C0  0E0B               	movlw	low (_readBuffer+11)
  3921  0008C2  24F3               	addwf	prodl,w,c
  3922  0008C4  6ED9               	movwf	fsr2l,c
  3923  0008C6  0E01               	movlw	high (_readBuffer+11)
  3924  0008C8  20F4               	addwfc	prodh,w,c
  3925  0008CA  6EDA               	movwf	fsr2h,c
  3926  0008CC  0E00               	movlw	0
  3927  0008CE  6EDF               	movwf	indf2,c
  3928                           
  3929                           ;UART_Driver.c: 117: } else {
  3930  0008D0  0012               	return	
  3931  0008D2                     i1l139:
  3932                           
  3933                           ; BSR set to: 1
  3934                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3935                           
  3936                           ; BSR set to: 1
  3937  0008D2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3938  0008D4  0D01               	mullw	1
  3939  0008D6  0E0B               	movlw	low (_readBuffer+11)
  3940  0008D8  24F3               	addwf	prodl,w,c
  3941  0008DA  6ED9               	movwf	fsr2l,c
  3942  0008DC  0E01               	movlw	high (_readBuffer+11)
  3943  0008DE  20F4               	addwfc	prodh,w,c
  3944  0008E0  6EDA               	movwf	fsr2h,c
  3945  0008E2  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3949  0008E6  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3953  0008E8  0E32               	movlw	50
  3954  0008EA  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3955  0008EC  0012               	return	
  3956                           
  3957                           ; BSR set to: 1
  3958                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3959  0008EE  0E00               	movlw	0
  3960  0008F0  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3961                           
  3962                           ; BSR set to: 1
  3963                           ;UART_Driver.c: 122: }
  3964                           ;UART_Driver.c: 123: }
  3965                           ;UART_Driver.c: 124: break;
  3966                           
  3967                           ; BSR set to: 1
  3968  0008F2  0012               	return	
  3969  0008F4                     
  3970                           ; BSR set to: 1
  3971                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3972                           
  3973                           ; BSR set to: 1
  3974  0008F4  0E3A               	movlw	58
  3975  0008F6  1827               	xorwf	fillDataBuffer@data,w,c
  3976  0008F8  A4D8               	btfss	status,2,c
  3977  0008FA  D00D               	goto	i1l143
  3978                           
  3979                           ; BSR set to: 1
  3980                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3981  0008FC  0E04               	movlw	4
  3982  0008FE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3983                           
  3984                           ; BSR set to: 1
  3985                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3986  000900  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3987  000902  0D01               	mullw	1
  3988  000904  0E3E               	movlw	low (_readBuffer+62)
  3989  000906  24F3               	addwf	prodl,w,c
  3990  000908  6ED9               	movwf	fsr2l,c
  3991  00090A  0E01               	movlw	high (_readBuffer+62)
  3992  00090C  20F4               	addwfc	prodh,w,c
  3993  00090E  6EDA               	movwf	fsr2h,c
  3994  000910  0E00               	movlw	0
  3995  000912  6EDF               	movwf	indf2,c
  3996                           
  3997                           ;UART_Driver.c: 130: } else {
  3998  000914  0012               	return	
  3999  000916                     i1l143:
  4000                           
  4001                           ; BSR set to: 1
  4002                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  4003                           
  4004                           ; BSR set to: 1
  4005  000916  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4006  000918  0D01               	mullw	1
  4007  00091A  0E3E               	movlw	low (_readBuffer+62)
  4008  00091C  24F3               	addwf	prodl,w,c
  4009  00091E  6ED9               	movwf	fsr2l,c
  4010  000920  0E01               	movlw	high (_readBuffer+62)
  4011  000922  20F4               	addwfc	prodh,w,c
  4012  000924  6EDA               	movwf	fsr2h,c
  4013  000926  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4014                           
  4015                           ; BSR set to: 1
  4016                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  4017  00092A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  4018                           
  4019                           ; BSR set to: 1
  4020                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  4021  00092C  0E32               	movlw	50
  4022  00092E  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  4023  000930  0012               	return	
  4024                           
  4025                           ; BSR set to: 1
  4026                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  4027  000932  0E00               	movlw	0
  4028  000934  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4029                           
  4030                           ; BSR set to: 1
  4031                           ;UART_Driver.c: 135: }
  4032                           ;UART_Driver.c: 136: }
  4033                           ;UART_Driver.c: 137: break;
  4034                           
  4035                           ; BSR set to: 1
  4036  000936  0012               	return	
  4037  000938                     
  4038                           ; BSR set to: 1
  4039                           ;UART_Driver.c: 140: if (data == 0x3A) {
  4040                           
  4041                           ; BSR set to: 1
  4042  000938  0E3A               	movlw	58
  4043  00093A  1827               	xorwf	fillDataBuffer@data,w,c
  4044  00093C  A4D8               	btfss	status,2,c
  4045  00093E  D00D               	goto	i1l147
  4046                           
  4047                           ; BSR set to: 1
  4048                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  4049  000940  0E05               	movlw	5
  4050  000942  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4054  000944  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4055  000946  0D01               	mullw	1
  4056  000948  0E71               	movlw	low (_readBuffer+113)
  4057  00094A  24F3               	addwf	prodl,w,c
  4058  00094C  6ED9               	movwf	fsr2l,c
  4059  00094E  0E01               	movlw	high (_readBuffer+113)
  4060  000950  20F4               	addwfc	prodh,w,c
  4061  000952  6EDA               	movwf	fsr2h,c
  4062  000954  0E00               	movlw	0
  4063  000956  6EDF               	movwf	indf2,c
  4064                           
  4065                           ;UART_Driver.c: 143: } else {
  4066  000958  0012               	return	
  4067  00095A                     i1l147:
  4068                           
  4069                           ; BSR set to: 1
  4070                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4071                           
  4072                           ; BSR set to: 1
  4073  00095A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4074  00095C  0D01               	mullw	1
  4075  00095E  0E71               	movlw	low (_readBuffer+113)
  4076  000960  24F3               	addwf	prodl,w,c
  4077  000962  6ED9               	movwf	fsr2l,c
  4078  000964  0E01               	movlw	high (_readBuffer+113)
  4079  000966  20F4               	addwfc	prodh,w,c
  4080  000968  6EDA               	movwf	fsr2h,c
  4081  00096A  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4082                           
  4083                           ; BSR set to: 1
  4084                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4085  00096E  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4086                           
  4087                           ; BSR set to: 1
  4088                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4089  000970  0E32               	movlw	50
  4090  000972  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4091  000974  0012               	return	
  4092                           
  4093                           ; BSR set to: 1
  4094                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4095  000976  0E00               	movlw	0
  4096  000978  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;UART_Driver.c: 148: }
  4100                           ;UART_Driver.c: 149: }
  4101                           ;UART_Driver.c: 150: break;
  4102                           
  4103                           ; BSR set to: 1
  4104  00097A  0012               	return	
  4105  00097C                     
  4106                           ; BSR set to: 1
  4107                           ;UART_Driver.c: 153: if (data == 0x24) {
  4108                           
  4109                           ; BSR set to: 1
  4110  00097C  0E24               	movlw	36
  4111  00097E  1827               	xorwf	fillDataBuffer@data,w,c
  4112  000980  A4D8               	btfss	status,2,c
  4113  000982  D009               	goto	i1l151
  4114                           
  4115                           ; BSR set to: 1
  4116                           ;UART_Driver.c: 154: acknowledge();
  4117  000984  ECBD  F009         	call	_acknowledge	;wreg free
  4118                           
  4119                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4120  000988  0E00               	movlw	0
  4121  00098A  0101               	movlb	1	; () banked
  4122  00098C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4123                           
  4124                           ; BSR set to: 1
  4125                           ;UART_Driver.c: 156: readReady = 1;
  4126  00098E  0E01               	movlw	1
  4127  000990  0100               	movlb	0	; () banked
  4128  000992  6FA2               	movwf	_readReady& (0+255),b
  4129                           
  4130                           ;UART_Driver.c: 157: } else {
  4131  000994  0012               	return	
  4132  000996                     i1l151:
  4133                           
  4134                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4135                           
  4136                           ; BSR set to: 0
  4137  000996  5027               	movf	fillDataBuffer@data,w,c
  4138  000998  0FD0               	addlw	208
  4139  00099A  0101               	movlb	1	; () banked
  4140  00099C  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4141                           
  4142                           ; BSR set to: 1
  4143                           ;UART_Driver.c: 160: }
  4144                           ;UART_Driver.c: 161: break;
  4145  00099E  0012               	return	
  4146  0009A0                     
  4147                           ; BSR set to: 1
  4148                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4149                           
  4150                           ; BSR set to: 1
  4151  0009A0  0E00               	movlw	0
  4152  0009A2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4153                           
  4154                           ; BSR set to: 1
  4155                           ;UART_Driver.c: 166: }
  4156                           
  4157                           ;UART_Driver.c: 165: break;
  4158  0009A4  0012               	return	
  4159  0009A6                     i1l128:
  4160                           
  4161                           ; BSR set to: 1
  4162  0009A6  0101               	movlb	1	; () banked
  4163  0009A8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4164                           
  4165                           ; Switch size 1, requested type "space"
  4166                           ; Number of cases is 6, Range of values is 0 to 5
  4167                           ; switch strategies available:
  4168                           ; Name         Instructions Cycles
  4169                           ; simple_byte           19    10 (average)
  4170                           ;	Chosen strategy is simple_byte
  4171  0009AA  0A00               	xorlw	0	; case 0
  4172  0009AC  B4D8               	btfsc	status,2,c
  4173  0009AE  D746               	goto	i1l129
  4174  0009B0  0A01               	xorlw	1	; case 1
  4175  0009B2  B4D8               	btfsc	status,2,c
  4176  0009B4  D75B               	goto	i1l134
  4177  0009B6  0A03               	xorlw	3	; case 2
  4178  0009B8  B4D8               	btfsc	status,2,c
  4179  0009BA  D77A               	goto	i1l138
  4180  0009BC  0A01               	xorlw	1	; case 3
  4181  0009BE  B4D8               	btfsc	status,2,c
  4182  0009C0  D799               	goto	i1l142
  4183  0009C2  0A07               	xorlw	7	; case 4
  4184  0009C4  B4D8               	btfsc	status,2,c
  4185  0009C6  D7B8               	goto	i1l146
  4186  0009C8  0A01               	xorlw	1	; case 5
  4187  0009CA  B4D8               	btfsc	status,2,c
  4188  0009CC  D7D7               	goto	i1l150
  4189  0009CE  D7E8               	goto	i1l153
  4190  0009D0                     __end_of_fillDataBuffer:
  4191                           	opt stack 0
  4192                           pclatu	equ	0xFFB
  4193                           pclath	equ	0xFFA
  4194                           tblptru	equ	0xFF8
  4195                           tblptrh	equ	0xFF7
  4196                           tblptrl	equ	0xFF6
  4197                           tablat	equ	0xFF5
  4198                           prodh	equ	0xFF4
  4199                           prodl	equ	0xFF3
  4200                           intcon	equ	0xFF2
  4201                           intcon2	equ	0xFF1
  4202                           indf0	equ	0xFEF
  4203                           postinc0	equ	0xFEE
  4204                           plusw0	equ	0xFEB
  4205                           fsr0h	equ	0xFEA
  4206                           fsr0l	equ	0xFE9
  4207                           wreg	equ	0xFE8
  4208                           indf1	equ	0xFE7
  4209                           postinc1	equ	0xFE6
  4210                           postdec1	equ	0xFE5
  4211                           fsr1h	equ	0xFE2
  4212                           fsr1l	equ	0xFE1
  4213                           bsr	equ	0xFE0
  4214                           indf2	equ	0xFDF
  4215                           postinc2	equ	0xFDE
  4216                           postdec2	equ	0xFDD
  4217                           plusw2	equ	0xFDB
  4218                           fsr2h	equ	0xFDA
  4219                           fsr2l	equ	0xFD9
  4220                           status	equ	0xFD8
  4221                           
  4222 ;; *************** function _acknowledge *****************
  4223 ;; Defined at:
  4224 ;;		line 169 in file "Drivers/UART_Driver.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4238 ;;      Params:         0       0       0       0       0       0       0       0       0
  4239 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4241 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    4
  4245 ;; This function calls:
  4246 ;;		i1_printf
  4247 ;; This function is called by:
  4248 ;;		_fillDataBuffer
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text23
  4253  00137A                     __ptext23:
  4254                           	opt stack 0
  4255  00137A                     _acknowledge:
  4256                           	opt stack 19
  4257                           
  4258                           ;UART_Driver.c: 170: printf(startCharacter);
  4259                           
  4260                           ;incstack = 0
  4261  00137A  C041  F01A         	movff	_startCharacter,i1printf@f
  4262  00137E  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4263  001382  501A               	movf	i1printf@f,w,c
  4264  001384  101B               	iorwf	i1printf@f+1,w,c
  4265  001386  A4D8               	btfss	status,2,c
  4266  001388  0E00               	movlw	low (__mediumconst shr (0+16))
  4267  00138A  6E1C               	movwf	i1printf@f+2,c
  4268  00138C  EC48  F006         	call	i1_printf	;wreg free
  4269                           
  4270                           ;UART_Driver.c: 172: printf(ackCharacter);
  4271  001390  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4272  001394  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4273  001398  501A               	movf	i1printf@f,w,c
  4274  00139A  101B               	iorwf	i1printf@f+1,w,c
  4275  00139C  A4D8               	btfss	status,2,c
  4276  00139E  0E00               	movlw	low (__mediumconst shr (0+16))
  4277  0013A0  6E1C               	movwf	i1printf@f+2,c
  4278  0013A2  EC48  F006         	call	i1_printf	;wreg free
  4279                           
  4280                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4281  0013A6  0E22               	movlw	low STR_5
  4282  0013A8  6E1A               	movwf	i1printf@f,c
  4283  0013AA  0E08               	movlw	high STR_5
  4284  0013AC  6E1B               	movwf	i1printf@f+1,c
  4285  0013AE  501A               	movf	i1printf@f,w,c
  4286  0013B0  101B               	iorwf	i1printf@f+1,w,c
  4287  0013B2  A4D8               	btfss	status,2,c
  4288  0013B4  0E00               	movlw	low (__mediumconst shr (0+16))
  4289  0013B6  6E1C               	movwf	i1printf@f+2,c
  4290  0013B8  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4291  0013BC  6A1E               	clrf	?i1_printf+4,c
  4292  0013BE  EC48  F006         	call	i1_printf	;wreg free
  4293                           
  4294                           ;UART_Driver.c: 176: printf(stopCharacter);
  4295  0013C2  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4296  0013C6  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4297  0013CA  501A               	movf	i1printf@f,w,c
  4298  0013CC  101B               	iorwf	i1printf@f+1,w,c
  4299  0013CE  A4D8               	btfss	status,2,c
  4300  0013D0  0E00               	movlw	low (__mediumconst shr (0+16))
  4301  0013D2  6E1C               	movwf	i1printf@f+2,c
  4302  0013D4  EC48  F006         	call	i1_printf	;wreg free
  4303  0013D8  0012               	return		;funcret
  4304  0013DA                     __end_of_acknowledge:
  4305                           	opt stack 0
  4306                           pclatu	equ	0xFFB
  4307                           pclath	equ	0xFFA
  4308                           tblptru	equ	0xFF8
  4309                           tblptrh	equ	0xFF7
  4310                           tblptrl	equ	0xFF6
  4311                           tablat	equ	0xFF5
  4312                           prodh	equ	0xFF4
  4313                           prodl	equ	0xFF3
  4314                           intcon	equ	0xFF2
  4315                           intcon2	equ	0xFF1
  4316                           indf0	equ	0xFEF
  4317                           postinc0	equ	0xFEE
  4318                           plusw0	equ	0xFEB
  4319                           fsr0h	equ	0xFEA
  4320                           fsr0l	equ	0xFE9
  4321                           wreg	equ	0xFE8
  4322                           indf1	equ	0xFE7
  4323                           postinc1	equ	0xFE6
  4324                           postdec1	equ	0xFE5
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           bsr	equ	0xFE0
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           plusw2	equ	0xFDB
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function i1_printf *****************
  4337 ;; Defined at:
  4338 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4341 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  4342 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  4343 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  4344 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  4345 ;; Auto vars:     Size  Location     Type
  4346 ;;  printf          4    0        struct .
  4347 ;;  printf          3    0        PTR const unsigned char 
  4348 ;;  printf          2   34[COMRAM] unsigned int 
  4349 ;;  printf          2   31[COMRAM] PTR void [1]
  4350 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4351 ;;  printf          2    0        unsigned int 
  4352 ;;  printf          1   37[COMRAM] char 
  4353 ;;  printf          1   36[COMRAM] char 
  4354 ;;  printf          1   33[COMRAM] unsigned char 
  4355 ;;  printf          1   30[COMRAM] unsigned char 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  2   25[COMRAM] int 
  4358 ;; Registers used:
  4359 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4365 ;;      Params:         5       0       0       0       0       0       0       0       0
  4366 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4368 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4369 ;;Total ram usage:       13 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    3
  4372 ;; This function calls:
  4373 ;;		i1___lwdiv
  4374 ;;		i1_putch
  4375 ;; This function is called by:
  4376 ;;		_acknowledge
  4377 ;; This function uses a non-reentrant model
  4378 ;;
  4379                           
  4380                           	psect	text24
  4381  000C90                     __ptext24:
  4382                           	opt stack 0
  4383  000C90                     i1_printf:
  4384                           	opt stack 19
  4385                           
  4386                           ;doprnt.c: 466: va_list ap;
  4387                           ;doprnt.c: 499: signed char c;
  4388                           ;doprnt.c: 506: signed char prec;
  4389                           ;doprnt.c: 508: unsigned char flag;
  4390                           ;doprnt.c: 523: union {
  4391                           ;doprnt.c: 524: unsigned long vd;
  4392                           ;doprnt.c: 525: double integ;
  4393                           ;doprnt.c: 526: } tmpval;
  4394                           ;doprnt.c: 528: unsigned int val;
  4395                           ;doprnt.c: 529: unsigned len;
  4396                           ;doprnt.c: 530: const char * cp;
  4397                           ;doprnt.c: 533: *ap = __va_start();
  4398                           
  4399                           ;incstack = 0
  4400  000C90  0E1D               	movlw	low (?i1_printf+3)
  4401  000C92  6E20               	movwf	i1printf@ap,c
  4402  000C94  0E00               	movlw	high (?i1_printf+3)
  4403  000C96  6E21               	movwf	i1printf@ap+1,c
  4404                           
  4405                           ;doprnt.c: 536: while(c = *f++) {
  4406  000C98  D085               	goto	i1u97_20
  4407  000C9A                     
  4408                           ;doprnt.c: 538: if(c != '%')
  4409  000C9A  0E25               	movlw	37
  4410  000C9C  1826               	xorwf	i1printf@c,w,c
  4411  000C9E  B4D8               	btfsc	status,2,c
  4412  000CA0  D004               	goto	i1l271
  4413                           
  4414                           ;doprnt.c: 540: {
  4415                           ;doprnt.c: 541: (putch(c) );
  4416  000CA2  5026               	movf	i1printf@c,w,c
  4417  000CA4  EC0B  F00B         	call	i1_putch
  4418                           
  4419                           ;doprnt.c: 542: continue;
  4420  000CA8  D07D               	goto	i1u97_20
  4421  000CAA                     i1l271:
  4422                           
  4423                           ;doprnt.c: 543: }
  4424                           ;doprnt.c: 548: flag = 0;
  4425  000CAA  0E00               	movlw	0
  4426  000CAC  6E1F               	movwf	i1printf@flag,c
  4427                           
  4428                           ;doprnt.c: 635: switch(c = *f++) {
  4429  000CAE  D004               	goto	i1l272
  4430  000CB0                     
  4431                           ;doprnt.c: 809: (putch(c) );
  4432  000CB0  5026               	movf	i1printf@c,w,c
  4433  000CB2  EC0B  F00B         	call	i1_putch
  4434                           
  4435                           ;doprnt.c: 810: continue;
  4436  000CB6  D076               	goto	i1u97_20
  4437  000CB8                     i1l272:
  4438  000CB8  C01A  FFF6         	movff	i1printf@f,tblptrl
  4439  000CBC  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4440  000CC0  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4441  000CC4  0E01               	movlw	1
  4442  000CC6  261A               	addwf	i1printf@f,f,c
  4443  000CC8  0E00               	movlw	0
  4444  000CCA  221B               	addwfc	i1printf@f+1,f,c
  4445  000CCC  221C               	addwfc	i1printf@f+2,f,c
  4446  000CCE  BAF8               	btfsc	tblptru,5,c
  4447  000CD0  D003               	bra	i1u93_27
  4448  000CD2  0008               	tblrd		*
  4449  000CD4  50F5               	movf	tablat,w,c
  4450  000CD6  D005               	bra	i1u93_20
  4451  000CD8                     i1u93_27:
  4452  000CD8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4453  000CDC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4454  000CE0  50EF               	movf	indf0,w,c
  4455  000CE2                     i1u93_20:
  4456  000CE2  6E26               	movwf	i1printf@c,c
  4457  000CE4  5026               	movf	i1printf@c,w,c
  4458                           
  4459                           ; Switch size 1, requested type "space"
  4460                           ; Number of cases is 2, Range of values is 0 to 120
  4461                           ; switch strategies available:
  4462                           ; Name         Instructions Cycles
  4463                           ; simple_byte            7     4 (average)
  4464                           ;	Chosen strategy is simple_byte
  4465  000CE6  0A00               	xorlw	0	; case 0
  4466  000CE8  B4D8               	btfsc	status,2,c
  4467  000CEA  0012               	return	
  4468  000CEC  0A78               	xorlw	120	; case 120
  4469  000CEE  A4D8               	btfss	status,2,c
  4470  000CF0  D7DF               	goto	i1l277
  4471                           
  4472                           ;doprnt.c: 1273: {
  4473                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4474  000CF2  C020  FFD9         	movff	i1printf@ap,fsr2l
  4475  000CF6  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4476  000CFA  CFDE F023          	movff	postinc2,i1printf@val
  4477  000CFE  CFDD F024          	movff	postdec2,i1printf@val+1
  4478  000D02  0E02               	movlw	2
  4479  000D04  2620               	addwf	i1printf@ap,f,c
  4480  000D06  0E00               	movlw	0
  4481  000D08  2221               	addwfc	i1printf@ap+1,f,c
  4482                           
  4483                           ;doprnt.c: 1287: }
  4484                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4485  000D0A  0E01               	movlw	1
  4486  000D0C  6E26               	movwf	i1printf@c,c
  4487  000D0E  D014               	goto	i1l1563
  4488  000D10                     
  4489                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4490  000D10  5026               	movf	i1printf@c,w,c
  4491  000D12  0D02               	mullw	2
  4492  000D14  0E01               	movlw	low _hexpowers
  4493  000D16  24F3               	addwf	prodl,w,c
  4494  000D18  6EF6               	movwf	tblptrl,c
  4495  000D1A  0E08               	movlw	high _hexpowers
  4496  000D1C  20F4               	addwfc	prodh,w,c
  4497  000D1E  6EF7               	movwf	tblptrh,c
  4498  000D20                     	if	1	;There are 3 active tblptr bytes
  4499  000D20  6AF8               	clrf	tblptru,c
  4500  000D22  0E00               	movlw	low (__mediumconst shr (0+16))
  4501  000D24  22F8               	addwfc	tblptru,f,c
  4502  000D26                     	endif
  4503  000D26  0009               	tblrd		*+
  4504  000D28  50F5               	movf	tablat,w,c
  4505  000D2A  5C23               	subwf	i1printf@val,w,c
  4506  000D2C  0009               	tblrd		*+
  4507  000D2E  50F5               	movf	tablat,w,c
  4508  000D30  5824               	subwfb	i1printf@val+1,w,c
  4509  000D32  A0D8               	btfss	status,0,c
  4510  000D34  D005               	goto	i1u96_20
  4511                           
  4512                           ;doprnt.c: 1318: break;
  4513  000D36  2A26               	incf	i1printf@c,f,c
  4514  000D38                     i1l1563:
  4515  000D38  0E04               	movlw	4
  4516  000D3A  1826               	xorwf	i1printf@c,w,c
  4517  000D3C  A4D8               	btfss	status,2,c
  4518  000D3E  D7E8               	goto	i1l278
  4519  000D40                     i1u96_20:
  4520                           
  4521                           ;doprnt.c: 1422: {
  4522                           ;doprnt.c: 1469: }
  4523                           ;doprnt.c: 1472: prec = c;
  4524  000D40  C026  F025         	movff	i1printf@c,i1printf@prec
  4525                           
  4526                           ;doprnt.c: 1474: while(prec--) {
  4527  000D44  D02B               	goto	i1l281
  4528  000D46                     
  4529                           ;doprnt.c: 1478: {
  4530                           ;doprnt.c: 1499: {
  4531                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4532  000D46  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4533  000D4A  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4534  000D4E  5025               	movf	i1printf@prec,w,c
  4535  000D50  0D02               	mullw	2
  4536  000D52  0E01               	movlw	low _hexpowers
  4537  000D54  24F3               	addwf	prodl,w,c
  4538  000D56  6EF6               	movwf	tblptrl,c
  4539  000D58  0E08               	movlw	high _hexpowers
  4540  000D5A  20F4               	addwfc	prodh,w,c
  4541  000D5C  6EF7               	movwf	tblptrh,c
  4542  000D5E                     	if	1	;There are 3 active tblptr bytes
  4543  000D5E  6AF8               	clrf	tblptru,c
  4544  000D60  0E00               	movlw	low (__mediumconst shr (0+16))
  4545  000D62  22F8               	addwfc	tblptru,f,c
  4546  000D64                     	endif
  4547  000D64  0009               	tblrd		*+
  4548  000D66  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4549  000D6A  000A               	tblrd		*-
  4550  000D6C  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4551  000D70  EC45  F00A         	call	i1___lwdiv	;wreg free
  4552  000D74  5013               	movf	?i1___lwdiv,w,c
  4553  000D76  0B0F               	andlw	15
  4554  000D78  6E22               	movwf	i1printf@idx,c
  4555                           
  4556                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4557  000D7A  5022               	movf	i1printf@idx,w,c
  4558  000D7C  0D01               	mullw	1
  4559  000D7E  0E09               	movlw	low STR_17
  4560  000D80  24F3               	addwf	prodl,w,c
  4561  000D82  6EF6               	movwf	tblptrl,c
  4562  000D84  0E08               	movlw	high STR_17
  4563  000D86  20F4               	addwfc	prodh,w,c
  4564  000D88  6EF7               	movwf	tblptrh,c
  4565  000D8A                     	if	1	;There are 3 active tblptr bytes
  4566  000D8A  6AF8               	clrf	tblptru,c
  4567  000D8C  0E00               	movlw	low (__mediumconst shr (0+16))
  4568  000D8E  22F8               	addwfc	tblptru,f,c
  4569  000D90                     	endif
  4570  000D90  0008               	tblrd		*
  4571  000D92  CFF5 F026          	movff	tablat,i1printf@c
  4572                           
  4573                           ;doprnt.c: 1508: }
  4574                           ;doprnt.c: 1523: }
  4575                           ;doprnt.c: 1524: (putch(c) );
  4576  000D96  5026               	movf	i1printf@c,w,c
  4577  000D98  EC0B  F00B         	call	i1_putch
  4578  000D9C                     i1l281:
  4579  000D9C  0625               	decf	i1printf@prec,f,c
  4580  000D9E  2825               	incf	i1printf@prec,w,c
  4581  000DA0  A4D8               	btfss	status,2,c
  4582  000DA2  D7D1               	goto	i1l282
  4583  000DA4                     i1u97_20:
  4584  000DA4  C01A  FFF6         	movff	i1printf@f,tblptrl
  4585  000DA8  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4586  000DAC  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4587  000DB0  0E01               	movlw	1
  4588  000DB2  261A               	addwf	i1printf@f,f,c
  4589  000DB4  0E00               	movlw	0
  4590  000DB6  221B               	addwfc	i1printf@f+1,f,c
  4591  000DB8  221C               	addwfc	i1printf@f+2,f,c
  4592  000DBA  BAF8               	btfsc	tblptru,5,c
  4593  000DBC  D003               	bra	i1u98_27
  4594  000DBE  0008               	tblrd		*
  4595  000DC0  50F5               	movf	tablat,w,c
  4596  000DC2  D005               	bra	i1u98_20
  4597  000DC4                     i1u98_27:
  4598  000DC4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4599  000DC8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4600  000DCC  50EF               	movf	indf0,w,c
  4601  000DCE                     i1u98_20:
  4602  000DCE  6E26               	movwf	i1printf@c,c
  4603  000DD0  5026               	movf	i1printf@c,w,c
  4604  000DD2  B4D8               	btfsc	status,2,c
  4605  000DD4  0012               	return	
  4606  000DD6  D761               	goto	i1l270
  4607  000DD8                     __end_ofi1_printf:
  4608                           	opt stack 0
  4609                           pclatu	equ	0xFFB
  4610                           pclath	equ	0xFFA
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon2	equ	0xFF1
  4619                           indf0	equ	0xFEF
  4620                           postinc0	equ	0xFEE
  4621                           plusw0	equ	0xFEB
  4622                           fsr0h	equ	0xFEA
  4623                           fsr0l	equ	0xFE9
  4624                           wreg	equ	0xFE8
  4625                           indf1	equ	0xFE7
  4626                           postinc1	equ	0xFE6
  4627                           postdec1	equ	0xFE5
  4628                           fsr1h	equ	0xFE2
  4629                           fsr1l	equ	0xFE1
  4630                           bsr	equ	0xFE0
  4631                           indf2	equ	0xFDF
  4632                           postinc2	equ	0xFDE
  4633                           postdec2	equ	0xFDD
  4634                           plusw2	equ	0xFDB
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function i1_putch *****************
  4640 ;; Defined at:
  4641 ;;		line 263 in file "Drivers/UART_Driver.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  data            1    wreg     unsigned char 
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  data            1   19[COMRAM] unsigned char 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4655 ;;      Params:         0       0       0       0       0       0       0       0       0
  4656 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4658 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4659 ;;Total ram usage:        1 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    2
  4662 ;; This function calls:
  4663 ;;		i1_writeByte
  4664 ;; This function is called by:
  4665 ;;		i1_printf
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text25
  4670  001616                     __ptext25:
  4671                           	opt stack 0
  4672  001616                     i1_putch:
  4673                           	opt stack 19
  4674                           
  4675                           ;incstack = 0
  4676                           ;i1putch@data stored from wreg
  4677  001616  6E14               	movwf	i1putch@data,c
  4678                           
  4679                           ;UART_Driver.c: 264: writeByte(data);
  4680  001618  5014               	movf	i1putch@data,w,c
  4681  00161A  EC05  F00B         	call	i1_writeByte
  4682  00161E  0012               	return		;funcret
  4683  001620                     __end_ofi1_putch:
  4684                           	opt stack 0
  4685                           pclatu	equ	0xFFB
  4686                           pclath	equ	0xFFA
  4687                           tblptru	equ	0xFF8
  4688                           tblptrh	equ	0xFF7
  4689                           tblptrl	equ	0xFF6
  4690                           tablat	equ	0xFF5
  4691                           prodh	equ	0xFF4
  4692                           prodl	equ	0xFF3
  4693                           intcon	equ	0xFF2
  4694                           intcon2	equ	0xFF1
  4695                           indf0	equ	0xFEF
  4696                           postinc0	equ	0xFEE
  4697                           plusw0	equ	0xFEB
  4698                           fsr0h	equ	0xFEA
  4699                           fsr0l	equ	0xFE9
  4700                           wreg	equ	0xFE8
  4701                           indf1	equ	0xFE7
  4702                           postinc1	equ	0xFE6
  4703                           postdec1	equ	0xFE5
  4704                           fsr1h	equ	0xFE2
  4705                           fsr1l	equ	0xFE1
  4706                           bsr	equ	0xFE0
  4707                           indf2	equ	0xFDF
  4708                           postinc2	equ	0xFDE
  4709                           postdec2	equ	0xFDD
  4710                           plusw2	equ	0xFDB
  4711                           fsr2h	equ	0xFDA
  4712                           fsr2l	equ	0xFD9
  4713                           status	equ	0xFD8
  4714                           
  4715 ;; *************** function i1_writeByte *****************
  4716 ;; Defined at:
  4717 ;;		line 69 in file "Drivers/UART_Driver.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  data            1    wreg     unsigned char 
  4720 ;; Auto vars:     Size  Location     Type
  4721 ;;  data            1   18[COMRAM] unsigned char 
  4722 ;; Return value:  Size  Location     Type
  4723 ;;                  1    wreg      void 
  4724 ;; Registers used:
  4725 ;;		wreg
  4726 ;; Tracked objects:
  4727 ;;		On entry : 0/0
  4728 ;;		On exit  : 0/0
  4729 ;;		Unchanged: 0/0
  4730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4731 ;;      Params:         0       0       0       0       0       0       0       0       0
  4732 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4734 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4735 ;;Total ram usage:        1 bytes
  4736 ;; Hardware stack levels used:    1
  4737 ;; Hardware stack levels required when called:    1
  4738 ;; This function calls:
  4739 ;;		Nothing
  4740 ;; This function is called by:
  4741 ;;		i1_putch
  4742 ;; This function uses a non-reentrant model
  4743 ;;
  4744                           
  4745                           	psect	text26
  4746  00160A                     __ptext26:
  4747                           	opt stack 0
  4748  00160A                     i1_writeByte:
  4749                           	opt stack 19
  4750                           
  4751                           ;incstack = 0
  4752                           ;i1writeByte@data stored from wreg
  4753  00160A  6E13               	movwf	i1writeByte@data,c
  4754  00160C                     
  4755                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4756  00160C  A2AC               	btfss	4012,1,c	;volatile
  4757  00160E  D7FE               	goto	i1l1439
  4758                           
  4759                           ;UART_Driver.c: 71: TXREG = data;
  4760  001610  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4761  001614  0012               	return		;funcret
  4762  001616                     __end_ofi1_writeByte:
  4763                           	opt stack 0
  4764                           pclatu	equ	0xFFB
  4765                           pclath	equ	0xFFA
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           intcon	equ	0xFF2
  4773                           intcon2	equ	0xFF1
  4774                           indf0	equ	0xFEF
  4775                           postinc0	equ	0xFEE
  4776                           plusw0	equ	0xFEB
  4777                           fsr0h	equ	0xFEA
  4778                           fsr0l	equ	0xFE9
  4779                           wreg	equ	0xFE8
  4780                           indf1	equ	0xFE7
  4781                           postinc1	equ	0xFE6
  4782                           postdec1	equ	0xFE5
  4783                           fsr1h	equ	0xFE2
  4784                           fsr1l	equ	0xFE1
  4785                           bsr	equ	0xFE0
  4786                           indf2	equ	0xFDF
  4787                           postinc2	equ	0xFDE
  4788                           postdec2	equ	0xFDD
  4789                           plusw2	equ	0xFDB
  4790                           fsr2h	equ	0xFDA
  4791                           fsr2l	equ	0xFD9
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function i1___lwdiv *****************
  4795 ;; Defined at:
  4796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;  dividend        2   18[COMRAM] unsigned int 
  4799 ;;  divisor         2   20[COMRAM] unsigned int 
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4802 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  2   18[COMRAM] unsigned int 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4812 ;;      Params:         4       0       0       0       0       0       0       0       0
  4813 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4815 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4816 ;;Total ram usage:        7 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    1
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		i1_printf
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text27
  4827  00148A                     __ptext27:
  4828                           	opt stack 0
  4829  00148A                     i1___lwdiv:
  4830                           	opt stack 20
  4831                           
  4832                           ;incstack = 0
  4833  00148A  0E00               	movlw	0
  4834  00148C  6E18               	movwf	i1___lwdiv@quotient+1,c
  4835  00148E  0E00               	movlw	0
  4836  001490  6E17               	movwf	i1___lwdiv@quotient,c
  4837  001492  5015               	movf	i1___lwdiv@divisor,w,c
  4838  001494  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4839  001496  B4D8               	btfsc	status,2,c
  4840  001498  D01C               	goto	i1l694
  4841  00149A  0E01               	movlw	1
  4842  00149C  6E19               	movwf	i1___lwdiv@counter,c
  4843  00149E  D004               	goto	i1l689
  4844  0014A0  90D8               	bcf	status,0,c
  4845  0014A2  3615               	rlcf	i1___lwdiv@divisor,f,c
  4846  0014A4  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4847  0014A6  2A19               	incf	i1___lwdiv@counter,f,c
  4848  0014A8                     i1l689:
  4849  0014A8  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4850  0014AA  D7FA               	goto	i1l690
  4851  0014AC                     i1u82_20:
  4852  0014AC  90D8               	bcf	status,0,c
  4853  0014AE  3617               	rlcf	i1___lwdiv@quotient,f,c
  4854  0014B0  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4855  0014B2  5015               	movf	i1___lwdiv@divisor,w,c
  4856  0014B4  5C13               	subwf	i1___lwdiv@dividend,w,c
  4857  0014B6  5016               	movf	i1___lwdiv@divisor+1,w,c
  4858  0014B8  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4859  0014BA  A0D8               	btfss	status,0,c
  4860  0014BC  D005               	goto	i1l693
  4861  0014BE  5015               	movf	i1___lwdiv@divisor,w,c
  4862  0014C0  5E13               	subwf	i1___lwdiv@dividend,f,c
  4863  0014C2  5016               	movf	i1___lwdiv@divisor+1,w,c
  4864  0014C4  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4865  0014C6  8017               	bsf	i1___lwdiv@quotient,0,c
  4866  0014C8                     i1l693:
  4867  0014C8  90D8               	bcf	status,0,c
  4868  0014CA  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4869  0014CC  3215               	rrcf	i1___lwdiv@divisor,f,c
  4870  0014CE  2E19               	decfsz	i1___lwdiv@counter,f,c
  4871  0014D0  D7ED               	goto	i1u82_20
  4872  0014D2                     i1l694:
  4873  0014D2  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4874  0014D6  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4875  0014DA  0012               	return		;funcret
  4876  0014DC                     __end_ofi1___lwdiv:
  4877                           	opt stack 0
  4878                           pclatu	equ	0xFFB
  4879                           pclath	equ	0xFFA
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           intcon2	equ	0xFF1
  4888                           indf0	equ	0xFEF
  4889                           postinc0	equ	0xFEE
  4890                           plusw0	equ	0xFEB
  4891                           fsr0h	equ	0xFEA
  4892                           fsr0l	equ	0xFE9
  4893                           wreg	equ	0xFE8
  4894                           indf1	equ	0xFE7
  4895                           postinc1	equ	0xFE6
  4896                           postdec1	equ	0xFE5
  4897                           fsr1h	equ	0xFE2
  4898                           fsr1l	equ	0xFE1
  4899                           bsr	equ	0xFE0
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           plusw2	equ	0xFDB
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _HighISR *****************
  4909 ;; Defined at:
  4910 ;;		line 80 in file "main.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;		None
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      void 
  4917 ;; Registers used:
  4918 ;;		wreg, status,2
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4924 ;;      Params:         0       0       0       0       0       0       0       0       0
  4925 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4926 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4927 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4928 ;;Total ram usage:       18 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; This function calls:
  4931 ;;		Nothing
  4932 ;; This function is called by:
  4933 ;;		Interrupt level 2
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           	psect	intcode
  4938  000008                     __pintcode:
  4939                           	opt stack 0
  4940  000008                     _HighISR:
  4941                           	opt stack 19
  4942                           
  4943                           ;incstack = 0
  4944  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4945  00000A  EDF9  F008         	call	int_func,f	;refresh shadow registers
  4946                           pclatu	equ	0xFFB
  4947                           pclath	equ	0xFFA
  4948                           tblptru	equ	0xFF8
  4949                           tblptrh	equ	0xFF7
  4950                           tblptrl	equ	0xFF6
  4951                           tablat	equ	0xFF5
  4952                           prodh	equ	0xFF4
  4953                           prodl	equ	0xFF3
  4954                           intcon	equ	0xFF2
  4955                           intcon2	equ	0xFF1
  4956                           indf0	equ	0xFEF
  4957                           postinc0	equ	0xFEE
  4958                           plusw0	equ	0xFEB
  4959                           fsr0h	equ	0xFEA
  4960                           fsr0l	equ	0xFE9
  4961                           wreg	equ	0xFE8
  4962                           indf1	equ	0xFE7
  4963                           postinc1	equ	0xFE6
  4964                           postdec1	equ	0xFE5
  4965                           fsr1h	equ	0xFE2
  4966                           fsr1l	equ	0xFE1
  4967                           bsr	equ	0xFE0
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           plusw2	equ	0xFDB
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976                           	psect	intcode_body
  4977  0011F2                     __pintcode_body:
  4978                           	opt stack 19
  4979  0011F2                     int_func:
  4980                           	opt stack 19
  4981  0011F2  0006               	pop		; remove dummy address from shadow register refresh
  4982  0011F4  CFFA F001          	movff	pclath,??_HighISR
  4983  0011F8  CFFB F002          	movff	pclatu,??_HighISR+1
  4984  0011FC  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4985  001200  CFEA F004          	movff	fsr0h,??_HighISR+3
  4986  001204  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4987  001208  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4988  00120C  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4989  001210  CFDA F008          	movff	fsr2h,??_HighISR+7
  4990  001214  CFF3 F009          	movff	prodl,??_HighISR+8
  4991  001218  CFF4 F00A          	movff	prodh,??_HighISR+9
  4992  00121C  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  4993  001220  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  4994  001224  CFF8 F00D          	movff	tblptru,??_HighISR+12
  4995  001228  CFF5 F00E          	movff	tablat,??_HighISR+13
  4996  00122C  C044  F00F         	movff	btemp,??_HighISR+14
  4997  001230  C045  F010         	movff	btemp+1,??_HighISR+15
  4998  001234  C046  F011         	movff	btemp+2,??_HighISR+16
  4999  001238  C047  F012         	movff	btemp+3,??_HighISR+17
  5000                           
  5001                           ;main.c: 81: if (INTCONbits.TMR0IF) {
  5002  00123C  A4F2               	btfss	intcon,2,c	;volatile
  5003  00123E  D004               	goto	i2l257
  5004                           
  5005                           ;main.c: 82: tick = 1;
  5006  001240  0E01               	movlw	1
  5007  001242  0100               	movlb	0	; () banked
  5008  001244  6FA1               	movwf	_tick& (0+255),b
  5009                           
  5010                           ; BSR set to: 0
  5011                           ;main.c: 83: INTCONbits.TMR0IF = 0;
  5012  001246  94F2               	bcf	intcon,2,c	;volatile
  5013  001248                     i2l257:
  5014                           
  5015                           ; BSR set to: 0
  5016  001248  C012  F047         	movff	??_HighISR+17,btemp+3
  5017  00124C  C011  F046         	movff	??_HighISR+16,btemp+2
  5018  001250  C010  F045         	movff	??_HighISR+15,btemp+1
  5019  001254  C00F  F044         	movff	??_HighISR+14,btemp
  5020  001258  C00E  FFF5         	movff	??_HighISR+13,tablat
  5021  00125C  C00D  FFF8         	movff	??_HighISR+12,tblptru
  5022  001260  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  5023  001264  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  5024  001268  C00A  FFF4         	movff	??_HighISR+9,prodh
  5025  00126C  C009  FFF3         	movff	??_HighISR+8,prodl
  5026  001270  C008  FFDA         	movff	??_HighISR+7,fsr2h
  5027  001274  C007  FFD9         	movff	??_HighISR+6,fsr2l
  5028  001278  C006  FFE2         	movff	??_HighISR+5,fsr1h
  5029  00127C  C005  FFE1         	movff	??_HighISR+4,fsr1l
  5030  001280  C004  FFEA         	movff	??_HighISR+3,fsr0h
  5031  001284  C003  FFE9         	movff	??_HighISR+2,fsr0l
  5032  001288  C002  FFFB         	movff	??_HighISR+1,pclatu
  5033  00128C  C001  FFFA         	movff	??_HighISR,pclath
  5034  001290  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5035  001292  0011               	retfie		f
  5036  001294                     __end_of_HighISR:
  5037                           	opt stack 0
  5038                           pclatu	equ	0xFFB
  5039                           pclath	equ	0xFFA
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           intcon2	equ	0xFF1
  5048                           indf0	equ	0xFEF
  5049                           postinc0	equ	0xFEE
  5050                           plusw0	equ	0xFEB
  5051                           fsr0h	equ	0xFEA
  5052                           fsr0l	equ	0xFE9
  5053                           wreg	equ	0xFE8
  5054                           indf1	equ	0xFE7
  5055                           postinc1	equ	0xFE6
  5056                           postdec1	equ	0xFE5
  5057                           fsr1h	equ	0xFE2
  5058                           fsr1l	equ	0xFE1
  5059                           bsr	equ	0xFE0
  5060                           indf2	equ	0xFDF
  5061                           postinc2	equ	0xFDE
  5062                           postdec2	equ	0xFDD
  5063                           plusw2	equ	0xFDB
  5064                           fsr2h	equ	0xFDA
  5065                           fsr2l	equ	0xFD9
  5066                           status	equ	0xFD8
  5067                           pclatu	equ	0xFFB
  5068                           pclath	equ	0xFFA
  5069                           tblptru	equ	0xFF8
  5070                           tblptrh	equ	0xFF7
  5071                           tblptrl	equ	0xFF6
  5072                           tablat	equ	0xFF5
  5073                           prodh	equ	0xFF4
  5074                           prodl	equ	0xFF3
  5075                           intcon	equ	0xFF2
  5076                           intcon2	equ	0xFF1
  5077                           indf0	equ	0xFEF
  5078                           postinc0	equ	0xFEE
  5079                           plusw0	equ	0xFEB
  5080                           fsr0h	equ	0xFEA
  5081                           fsr0l	equ	0xFE9
  5082                           wreg	equ	0xFE8
  5083                           indf1	equ	0xFE7
  5084                           postinc1	equ	0xFE6
  5085                           postdec1	equ	0xFE5
  5086                           fsr1h	equ	0xFE2
  5087                           fsr1l	equ	0xFE1
  5088                           bsr	equ	0xFE0
  5089                           indf2	equ	0xFDF
  5090                           postinc2	equ	0xFDE
  5091                           postdec2	equ	0xFDD
  5092                           plusw2	equ	0xFDB
  5093                           fsr2h	equ	0xFDA
  5094                           fsr2l	equ	0xFD9
  5095                           status	equ	0xFD8
  5096                           
  5097                           	psect	rparam
  5098  0000                     pclatu	equ	0xFFB
  5099                           pclath	equ	0xFFA
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           intcon	equ	0xFF2
  5107                           intcon2	equ	0xFF1
  5108                           indf0	equ	0xFEF
  5109                           postinc0	equ	0xFEE
  5110                           plusw0	equ	0xFEB
  5111                           fsr0h	equ	0xFEA
  5112                           fsr0l	equ	0xFE9
  5113                           wreg	equ	0xFE8
  5114                           indf1	equ	0xFE7
  5115                           postinc1	equ	0xFE6
  5116                           postdec1	equ	0xFE5
  5117                           fsr1h	equ	0xFE2
  5118                           fsr1l	equ	0xFE1
  5119                           bsr	equ	0xFE0
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           plusw2	equ	0xFDB
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128                           	psect	temp
  5129  000044                     btemp:
  5130                           	opt stack 0
  5131  000044                     	ds	1
  5132  0000                     int$flags	set	btemp
  5133  0000                     wtemp6	set	btemp+1
  5134                           pclatu	equ	0xFFB
  5135                           pclath	equ	0xFFA
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodh	equ	0xFF4
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           intcon2	equ	0xFF1
  5144                           indf0	equ	0xFEF
  5145                           postinc0	equ	0xFEE
  5146                           plusw0	equ	0xFEB
  5147                           fsr0h	equ	0xFEA
  5148                           fsr0l	equ	0xFE9
  5149                           wreg	equ	0xFE8
  5150                           indf1	equ	0xFE7
  5151                           postinc1	equ	0xFE6
  5152                           postdec1	equ	0xFE5
  5153                           fsr1h	equ	0xFE2
  5154                           fsr1l	equ	0xFE1
  5155                           bsr	equ	0xFE0
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           plusw2	equ	0xFDB
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    8
    Data        8
    BSS         234
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     33     102
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), ROM(CODE[32767]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), STR_10(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), STR_9(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6813
                                             31 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     699
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    8     8      0    2698
                                             23 BANK0      8     8      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     405
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2029
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F      20        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 26 21:28:47 2017

                         l11 135C                           l16 0DEE                           l44 108E  
                         l46 1144                           l39 12A2                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l241 0A90                          l243 0AB6  
                        l341 0FD0                          l270 0B42                          l350 106E  
                        l342 0FE8                          l271 0B52                          l247 0B0A  
                        l239 0A4C                          l272 0B62                          l344 1016  
                        l248 0B20                          l281 0C4E                          l169 1570  
                        l345 100A                          l282 0BF6                          l196 15CE  
                        l348 104A                          l277 0B5A                          l349 1058  
                        l278 0BC0                          l833 14E8                          l690 144E  
                        l834 14DE                          l693 1476                          l694 1480  
                        l689 1456                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
                        u900 0C84                          u850 0B8E                          u907 0C7A  
                        u790 145A                          u880 0BF0                          u857 0B84  
                        u890 0C58                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000          __end_ofi1_writeByte 1616                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1521 0BE8                         l1435 15F2  
                       l1651 0DE6                         l1667 129A                         l1679 1086  
                       STR_1 0833                         STR_2 0831                         STR_3 081E  
                       STR_4 081A                         STR_5 0822                         STR_6 0835  
                       STR_7 0835                         STR_8 082B                         STR_9 0827  
                       u1011 0F48                         u1021 0F82                         u1311 154E  
                       u1144 130A                         u1080 101A                         u1145 1306  
                       u1330 151E                         u1181 10DC                         u1441 0A62  
                       u1517 09DC                         u1527 0A24                         u1537 0AFC  
                       u1547 0FA6                 ?_C_DOOR_Init 0001                         _baud 0043  
                       _main 09D0                         _read 0092                         _tick 00A1  
                       fsr0h 000FEA                         fsr1h 000FE2                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0044                         prodh 000FF4                         prodl 000FF3  
                       start 00D4                __CFG_IESO$OFF 000000              __end_ofi1_putch 1620  
            __end_of_HighISR 1294                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
             _startCharacter 0041                __CFG_PLLDIV$5 000000         commandAndMessage@com 00AD  
    __size_of_C_DOOR_LockAll 000E         commandAndMessage@mes 00AF              __end_of___aldiv 1080  
                      ?_main 0001                        STR_10 0827                        STR_11 0829  
                      STR_12 082F                        STR_13 0827                        STR_14 082D  
                      STR_15 0825                        STR_16 082F                        STR_17 0809  
                      u10111 0F46                        u10211 0F80              __end_of___lwdiv 148A  
                      i1l130 0864                        i1l150 097C                        i1l142 08F4  
                      i1l134 086C                        i1l151 0996                        i1l143 0916  
                      i1l135 088E                        i1l128 09A6                        i1l153 09A0  
                      i1l129 083C                        i1l146 0938                        i1l138 08B0  
                      i1l147 095A                        i1l139 08D2                        i1l270 0C9A  
                      i1l271 0CAA                        i1l272 0CB8                        i1l281 0D9C  
                      i1l282 0D46                        i1l179 007C                        i1l277 0CB0  
                      i1l278 0D10                        i2l257 1248                        i1l690 14A0  
                      i1l693 14C8                        i1l694 14D2                        i1l689 14A8  
                      _RCREG 000FAE         __size_of_acknowledge 0060                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
 __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000                        _doors 0060  
                      _putch 15E0              i1writeByte@data 0013                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 00B1                 ?_D_UART_Read 00A3  
               ?_D_TMR0_Init 0001                        plusw0 000FEB                        plusw2 000FDB  
                      status 000FD8                        wtemp6 0045                 ?_D_PORT_Init 0001  
         __size_ofi1___lwdiv 0052                _stopCharacter 003F             __end_ofi1_printf 0DD8  
                 i1printf@ap 0020              __initialization 13DA             _D_UART_Init$1498 00B6  
               __end_of_main 0B36                       ??_main 00C2                  i1_writeByte 160A  
              __activetblptr 000003              __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00A3  
                     _ADCON1 000FC1                       ?_putch 0001                       i1l1439 160C  
                     i1l1563 0D38                    ??i1_putch 0014             _C_DOOR_UnlockAll 15D2  
                  ??_HighISR 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___aldiv 00AB                    ??___lwdiv 00A7             __end_of_readByte 1628  
                     clear_0 1418                       clear_1 1424                       _printf 0B36  
                     _strcmp 14DC            __end_ofi1___lwdiv 14DC                 __pdataCOMRAM 003D  
      D_UART_Init@interrupts 00B5                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00B5  
            D_UART_Init@baud 00B3              D_UART_Init@name 00B1   __end_of_C_DOOR_ReadSensors 131A  
                 __accesstop 0060      __end_of__initialization 142C              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 00FA                  i1printf@idx 0022  
                i1printf@val 0023               __pcstackCOMRAM 0001                 __pidataBANK0 162E  
               C_DOOR_Init@d 00A3                  i1putch@data 0014                __end_of_putch 15EE  
           _messageCharacter 00C4               _C_DOOR_LockAll 15FC       __size_of_D_UART_Enable 0024  
             ??_D_UART_Write 00B9                    ?i1_printf 001A       __size_of_D_TMR0_Enable 0014  
          _C_DOOR_SendStates 1080                      ??_putch 00A4           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100         __size_of_D_UART_Init 00AA  
       __size_of_D_UART_Read 002E         __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00BA  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E       __end_of_C_DOOR_LockAll 160A  
                 _deviceName 009E                      ?_printf 00AA                      ?_strcmp 00A3  
  __end_of_C_DOOR_SendStates 1148                   ??i1_printf 001F      __size_of_fillDataBuffer 0198  
                    i1u82_20 14AC                      i1u93_20 0CE2                      i1u93_27 0CD8  
        D_UART_Enable@enable 00A3                      i1u96_20 0D40                      i1u97_20 0DA4  
                    i1u98_20 0DCE                      i1u98_27 0DC4              __CFG_VREGEN$OFF 000000  
                    i1_putch 1616                      _HighISR 0008                    ?_readByte 0001  
         __size_of_writeByte 000E                _D_UART_Enable 1558                      __Hparam 0000  
                    __Lparam 0000              __size_of_LowISR 00BC                _D_TMR0_Enable 15BE  
                 _readBuffer 0100                      ___aldiv 0FB2              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 1436                 __psmallconst 0800          C_DOOR_ReadSensors@d 00A7  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0027                      __pcinit 13DA  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 15E0                      __ptext0 09D0  
                    __ptext1 14DC                      __ptext2 152A                      __ptext3 1148  
                    __ptext4 0FB2                      __ptext5 1558                      __ptext6 157C  
                    __ptext7 15BE                      __ptext8 15A0                      __ptext9 15D2  
            __size_of_printf 015A                    _T0CONbits 000FD5                 ?i1_writeByte 0001  
            __size_of_strcmp 004E            __end_of_hexpowers 0809            i1___lwdiv@divisor 0015  
          i1___lwdiv@counter 0019         C_DOOR_SendStates@com 00BC         C_DOOR_SendStates@mes 00BF  
           ___aldiv@dividend 00A3               __pintcode_body 11F2         end_of_initialization 142C  
                 ??_readByte 0013          D_TMR0_Enable@enable 00A3                      int_func 11F2  
             ?_D_UART_Enable 0001               ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0FB2  
                  _RCSTAbits 000FAB                      printf@c 00B4                      printf@f 00AA  
           ___aldiv@quotient 00AD                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00A8            __end_of_writeByte 15FC   __size_of_C_DOOR_SendStates 00C8  
                  _TRISCbits 000F94          __end_of_acknowledge 13DA                    i1___lwdiv 148A  
                  _TXSTAbits 000FAC                 i1printf@flag 001F                 i1printf@prec 0025  
         _C_DOOR_ReadSensors 1294               __end_of_LowISR 00D4                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 1628               __end_of_printf 0C90  
             __end_of_strcmp 152A          start_initialization 13DA               _fillDataBuffer 0838  
                  i1printf@c 0026                    i1printf@f 001A                   ?i1___lwdiv 0013  
          __size_ofi1_printf 0148         ??_C_DOOR_ReadSensors 00A3              ??_D_UART_Enable 00A3  
              ??_C_DOOR_Init 00A3              ??_D_TMR0_Enable 00A3                     ??_LowISR 0028  
                __pdataBANK0 00C4             __CFG_LPT1OSC$OFF 000000                  _acknowledge 137A  
           D_UART_Write@data 00B7                     ??_printf 00AD                     ??_strcmp 00A7  
     __end_of_fillDataBuffer 09D0                  __pbssCOMRAM 0043         __size_ofi1_writeByte 000C  
              __pcstackBANK0 00A3                ??_D_UART_Init 00B6                ??_D_UART_Read 00A9  
              ??_D_TMR0_Init 00A4                     ?i1_putch 0001                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00A3             ??_C_DOOR_LockAll 00A3  
          __size_of_readByte 0008             ___lwdiv@dividend 00A3          __end_of_C_DOOR_Init 0ED2  
                  __pintcode 0008                     ?___aldiv 00A3                     ?___lwdiv 00A3  
                __pintcodelo 0018           fillDataBuffer@data 0027            ?_C_DOOR_UnlockAll 0001  
            ?_fillDataBuffer 0001                  __smallconst 0800           ??_C_DOOR_UnlockAll 00A3  
               _D_UART_Write 0ED2                    _hexpowers 0801                    _readReady 00A2  
           ___lwdiv@quotient 00A7                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00A7              ___aldiv@counter 00AB                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 11F2          __end_of_D_UART_Read 1558  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 15A0                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 15BE                   printf@flag 00AD  
                 printf@prec 00B3                     i1_printf 0C90                    _writeByte 15EE  
                _INTCON2bits 000FF1                    copy_data0 1406                  _C_DOOR_Init 0DD8  
           __size_ofi1_putch 000A             __size_of_HighISR 128C                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___aldiv 00CE             __size_of___lwdiv 0054  
            ___lwdiv@divisor 00A5              ___lwdiv@counter 00A9                     __ptext10 1080  
                   __ptext11 131A                     __ptext12 0ED2                     __ptext21 1620  
                   __ptext13 0B36                     __ptext22 0838                     __ptext14 15E0  
                   __ptext23 137A                     __ptext15 15EE                     __ptext24 0C90  
                   __ptext16 1436                     __ptext25 1616                     __ptext17 1294  
                   __ptext26 160A                     __ptext18 15FC                     __ptext27 148A  
                   __ptext19 0DD8                   ?_writeByte 0001           i1___lwdiv@dividend 0013  
                _D_UART_Init 1148                  _D_UART_Read 152A                     _readData 0098  
                _D_TMR0_Init 157C                     _readByte 1620                __size_of_main 0166  
         C_DOOR_SendStates@d 00C1                  _D_PORT_Init 15A0                     int$flags 0044  
                  printf@idx 00B0                    printf@val 00B1                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00A4  
                 _INTCONbits 000FF2            _commandAndMessage 131A                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 0086           ?_commandAndMessage 00A3  
      __end_of_D_UART_Enable 157C        __end_of_D_TMR0_Enable 15D2          ??_commandAndMessage 00B1  
                   printf@ap 00AE             ??_fillDataBuffer 0027          D_UART_Write@command 00B5  
              ??i1_writeByte 0013                     strcmp@s1 00A3                     strcmp@s2 00A5  
              writeByte@data 00A3    __end_of_commandAndMessage 137A                 ___aldiv@sign 00AC  
                ??_writeByte 00A3    __size_of_C_DOOR_UnlockAll 000E  
