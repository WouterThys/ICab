

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun May 06 11:26:41 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.44
    51                           ; Generated 14/09/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F2550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataBANK0
    86  001A1E                     __pidataBANK0:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _ackCharacter
    90  001A1E  24                 	db	low STR_4
    91  001A1F  08                 	db	high STR_4
    92                           
    93                           ;initializer for _messageCharacter
    94  001A20  28                 	db	low STR_3
    95  001A21  08                 	db	high STR_3
    96                           
    97                           ;initializer for _stopCharacter
    98  001A22  42                 	db	low STR_2
    99  001A23  08                 	db	high STR_2
   100                           
   101                           ;initializer for _startCharacter
   102  001A24  44                 	db	low STR_1
   103  001A25  08                 	db	high STR_1
   104                           
   105                           	psect	smallconst
   106  000800                     __psmallconst:
   107                           	opt stack 0
   108  000800  00                 	db	0
   109  000801                     _dpowers:
   110                           	opt stack 0
   111  000801  0001               	dw	1
   112  000803  000A               	dw	10
   113  000805  0064               	dw	100
   114  000807  03E8               	dw	1000
   115  000809  2710               	dw	10000
   116  00080B                     __end_of_dpowers:
   117                           	opt stack 0
   118  00080B                     _hexpowers:
   119                           	opt stack 0
   120  00080B  0001               	dw	1
   121  00080D  0010               	dw	16
   122  00080F  0100               	dw	256
   123  000811  1000               	dw	4096
   124  000813                     __end_of_hexpowers:
   125                           	opt stack 0
   126  0000                     _TMR1L	set	4046
   127  0000                     _TMR1H	set	4047
   128  0000                     _PORTBbits	set	3969
   129  0000                     _T1CONbits	set	4045
   130  0000                     _PORTCbits	set	3970
   131  0000                     _CCP1CONbits	set	4029
   132  0000                     _CCPR1L	set	4030
   133  0000                     _T2CONbits	set	4042
   134  0000                     _PR2	set	4043
   135  0000                     _INTCON2bits	set	4081
   136  0000                     _T0CONbits	set	4053
   137  0000                     _TXREG	set	4013
   138  0000                     _TRISCbits	set	3988
   139  0000                     _PIE1bits	set	3997
   140  0000                     _IPR1bits	set	3999
   141  0000                     _PIR1bits	set	3998
   142  0000                     _INTCONbits	set	4082
   143  0000                     _RCONbits	set	4048
   144  0000                     _SPBRG	set	4015
   145  0000                     _BAUDCONbits	set	4024
   146  0000                     _TXSTAbits	set	4012
   147  0000                     _RCREG	set	4014
   148  0000                     _RCSTAbits	set	4011
   149  0000                     _ADCON1	set	4033
   150  0000                     _PORTC	set	3970
   151  0000                     _TRISC	set	3988
   152  0000                     _TRISA	set	3986
   153  0000                     _TRISB	set	3987
   154  0000                     _PORTA	set	3968
   155  0000                     _PORTB	set	3969
   156  000813                     STR_21:
   157                           
   158                           ; BSR set to: 1
   159  000813  30                 	db	48	;'0'
   160  000814  31                 	db	49	;'1'
   161  000815  32                 	db	50	;'2'
   162  000816  33                 	db	51	;'3'
   163  000817  34                 	db	52	;'4'
   164  000818  35                 	db	53	;'5'
   165  000819  36                 	db	54	;'6'
   166  00081A  37                 	db	55	;'7'
   167  00081B  38                 	db	56	;'8'
   168  00081C  39                 	db	57	;'9'
   169  00081D  61                 	db	97	;'a'
   170  00081E  62                 	db	98	;'b'
   171  00081F  63                 	db	99	;'c'
   172  000820  64                 	db	100	;'d'
   173  000821  65                 	db	101	;'e'
   174  000822  66                 	db	102	;'f'
   175  000823  00                 	db	0
   176  000824                     STR_4:
   177                           
   178                           ; BSR set to: 1
   179  000824  5B                 	db	91	;'['
   180  000825  41                 	db	65	;'A'
   181  000826  5D                 	db	93	;']'
   182  000827  00                 	db	0
   183  000828                     STR_3:
   184                           
   185                           ; BSR set to: 1
   186  000828  5B                 	db	91	;'['
   187  000829  4D                 	db	77	;'M'
   188  00082A  5D                 	db	93	;']'
   189  00082B  00                 	db	0
   190  00082C                     STR_9:
   191                           
   192                           ; BSR set to: 1
   193  00082C  25                 	db	37
   194  00082D  64                 	db	100	;'d'
   195  00082E  00                 	db	0
   196  00082F                     STR_10:
   197                           
   198                           ; BSR set to: 1
   199  00082F  25                 	db	37
   200  000830  78                 	db	120	;'x'
   201  000831  00                 	db	0
   202  000832                     STR_18:
   203                           
   204                           ; BSR set to: 1
   205  000832  41                 	db	65	;'A'
   206  000833  00                 	db	0
   207  000834                     STR_19:
   208                           
   209                           ; BSR set to: 1
   210  000834  45                 	db	69	;'E'
   211  000835  00                 	db	0
   212  000836                     STR_14:
   213                           
   214                           ; BSR set to: 1
   215  000836  49                 	db	73	;'I'
   216  000837  00                 	db	0
   217  000838                     STR_12:
   218                           
   219                           ; BSR set to: 1
   220  000838  4C                 	db	76	;'L'
   221  000839  00                 	db	0
   222  00083A                     STR_11:
   223                           
   224                           ; BSR set to: 1
   225  00083A  50                 	db	80	;'P'
   226  00083B  00                 	db	0
   227  00083C                     STR_15:
   228                           
   229                           ; BSR set to: 1
   230  00083C  52                 	db	82	;'R'
   231  00083D  00                 	db	0
   232  00083E                     STR_17:
   233                           
   234                           ; BSR set to: 1
   235  00083E  53                 	db	83	;'S'
   236  00083F  00                 	db	0
   237  000840                     STR_13:
   238                           
   239                           ; BSR set to: 1
   240  000840  55                 	db	85	;'U'
   241  000841  00                 	db	0
   242  000842                     STR_2:
   243                           
   244                           ; BSR set to: 1
   245  000842  24                 	db	36
   246  000843  00                 	db	0
   247  000844                     STR_1:
   248                           
   249                           ; BSR set to: 1
   250  000844  26                 	db	38
   251  000845  00                 	db	0
   252  000846                     STR_5:
   253                           
   254                           ; BSR set to: 1
   255  000846  3A                 	db	58	;':'
   256  000847  00                 	db	0
   257  0000                     
   258                           ; #config settings
   259  000848  00                 	db	0	; dummy byte at the end
   260  0000                     
   261                           	psect	cinit
   262  0017C0                     __pcinit:
   263                           	opt stack 0
   264  0017C0                     start_initialization:
   265                           	opt stack 0
   266  0017C0                     __initialization:
   267                           	opt stack 0
   268                           
   269                           ; Initialize objects allocated to BANK0 (8 bytes)
   270                           ; load TBLPTR registers with __pidataBANK0
   271  0017C0  0E1E               	movlw	low __pidataBANK0
   272  0017C2  6EF6               	movwf	tblptrl,c
   273  0017C4  0E1A               	movlw	high __pidataBANK0
   274  0017C6  6EF7               	movwf	tblptrh,c
   275  0017C8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   276  0017CA  6EF8               	movwf	tblptru,c
   277  0017CC  EE00  F0F1         	lfsr	0,__pdataBANK0
   278  0017D0  EE10 F008          	lfsr	1,8
   279  0017D4                     copy_data0:
   280  0017D4  0009               	tblrd		*+
   281  0017D6  CFF5 FFEE          	movff	tablat,postinc0
   282  0017DA  50E5               	movf	postdec1,w,c
   283  0017DC  50E1               	movf	fsr1l,w,c
   284  0017DE  E1FA               	bnz	copy_data0
   285                           
   286                           ; Clear objects allocated to BANK1 (166 bytes)
   287  0017E0  EE01  F000         	lfsr	0,__pbssBANK1
   288  0017E4  0EA6               	movlw	166
   289  0017E6                     clear_0:
   290  0017E6  6AEE               	clrf	postinc0,c
   291  0017E8  06E8               	decf	wreg,f,c
   292  0017EA  E1FD               	bnz	clear_0
   293                           
   294                           ; Clear objects allocated to BANK0 (103 bytes)
   295  0017EC  EE00  F060         	lfsr	0,__pbssBANK0
   296  0017F0  0E67               	movlw	103
   297  0017F2                     clear_1:
   298  0017F2  6AEE               	clrf	postinc0,c
   299  0017F4  06E8               	decf	wreg,f,c
   300  0017F6  E1FD               	bnz	clear_1
   301                           
   302                           ; Clear objects allocated to COMRAM (26 bytes)
   303  0017F8  EE00  F029         	lfsr	0,__pbssCOMRAM
   304  0017FC  0E1A               	movlw	26
   305  0017FE                     clear_2:
   306  0017FE  6AEE               	clrf	postinc0,c
   307  001800  06E8               	decf	wreg,f,c
   308  001802  E1FD               	bnz	clear_2
   309  001804                     end_of_initialization:
   310                           	opt stack 0
   311  001804                     __end_of__initialization:
   312                           	opt stack 0
   313  001804  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   314  001806  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   315  001808  0100               	movlb	0
   316  00180A  EF25  F004         	goto	_main	;jump to C main() function
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	bssCOMRAM
   327  000029                     __pbssCOMRAM:
   328                           	opt stack 0
   329  000029                     _read:
   330                           	opt stack 0
   331  000029                     	ds	7
   332  000030                     _readData:
   333                           	opt stack 0
   334  000030                     	ds	7
   335  000037                     _door_cnt:
   336                           	opt stack 0
   337  000037                     	ds	2
   338  000039                     _oldAlarm:
   339                           	opt stack 0
   340  000039                     	ds	1
   341  00003A                     _newAlarm:
   342                           	opt stack 0
   343  00003A                     	ds	1
   344  00003B                     _pwm:
   345                           	opt stack 0
   346  00003B                     	ds	1
   347  00003C                     _running:
   348                           	opt stack 0
   349  00003C                     	ds	1
   350  00003D                     _lock:
   351                           	opt stack 0
   352  00003D                     	ds	1
   353  00003E                     _tick:
   354                           	opt stack 0
   355  00003E                     	ds	1
   356  00003F                     _communicationCnt:
   357                           	opt stack 0
   358  00003F                     	ds	1
   359  000040                     _lockDelayCnt:
   360                           	opt stack 0
   361  000040                     	ds	1
   362  000041                     _readReady:
   363                           	opt stack 0
   364  000041                     	ds	1
   365  000042                     _baud:
   366                           	opt stack 0
   367  000042                     	ds	1
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           postdec1	equ	0xFE5
   375                           fsr1l	equ	0xFE1
   376                           
   377                           	psect	bssBANK0
   378  000060                     __pbssBANK0:
   379                           	opt stack 0
   380  000060                     _doors:
   381                           	opt stack 0
   382  000060                     	ds	100
   383  0000C4                     _deviceName:
   384                           	opt stack 0
   385  0000C4                     	ds	3
   386                           tblptru	equ	0xFF8
   387                           tblptrh	equ	0xFF7
   388                           tblptrl	equ	0xFF6
   389                           tablat	equ	0xFF5
   390                           postinc0	equ	0xFEE
   391                           wreg	equ	0xFE8
   392                           postdec1	equ	0xFE5
   393                           fsr1l	equ	0xFE1
   394                           
   395                           	psect	dataBANK0
   396  0000F1                     __pdataBANK0:
   397                           	opt stack 0
   398  0000F1                     _ackCharacter:
   399                           	opt stack 0
   400  0000F1                     	ds	2
   401  0000F3                     _messageCharacter:
   402                           	opt stack 0
   403  0000F3                     	ds	2
   404  0000F5                     _stopCharacter:
   405                           	opt stack 0
   406  0000F5                     	ds	2
   407  0000F7                     _startCharacter:
   408                           	opt stack 0
   409  0000F7                     	ds	2
   410                           tblptru	equ	0xFF8
   411                           tblptrh	equ	0xFF7
   412                           tblptrl	equ	0xFF6
   413                           tablat	equ	0xFF5
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1l	equ	0xFE1
   418                           
   419                           	psect	bssBANK1
   420  000100                     __pbssBANK1:
   421                           	opt stack 0
   422  000100                     _readBuffer:
   423                           	opt stack 0
   424  000100                     	ds	166
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	cstackBANK0
   435  0000C7                     __pcstackBANK0:
   436                           	opt stack 0
   437  0000C7                     ??_C_DOOR_Init:
   438  0000C7                     ??_C_DOOR_LockAll:
   439  0000C7                     ??_C_DOOR_UnlockAll:
   440  0000C7                     ??_C_DOOR_ReadSensors:
   441  0000C7                     ?_strcmp:
   442                           	opt stack 0
   443  0000C7                     ?___lwdiv:
   444                           	opt stack 0
   445  0000C7                     ?___lldiv:
   446                           	opt stack 0
   447  0000C7                     ?_D_UART_Read:
   448                           	opt stack 0
   449  0000C7                     D_UART_Enable@enable:
   450                           	opt stack 0
   451  0000C7                     putch@data:
   452                           	opt stack 0
   453  0000C7                     D_TMR0_Enable@enable:
   454                           	opt stack 0
   455  0000C7                     D_PWM_SetPwm@pwm:
   456                           	opt stack 0
   457  0000C7                     D_TMR1_Enable@enable:
   458                           	opt stack 0
   459  0000C7                     setAlarm@alarm:
   460                           	opt stack 0
   461  0000C7                     ___lwdiv@dividend:
   462                           	opt stack 0
   463  0000C7                     strcmp@s1:
   464                           	opt stack 0
   465  0000C7                     ___lldiv@dividend:
   466                           	opt stack 0
   467  0000C7                     commandAndMessage@door:
   468                           	opt stack 0
   469                           
   470                           ; 10 bytes @ 0x0
   471  0000C7                     	ds	1
   472  0000C8                     putch@max:
   473                           	opt stack 0
   474                           
   475                           ; 1 bytes @ 0x1
   476  0000C8                     	ds	1
   477  0000C9                     ___lwdiv@divisor:
   478                           	opt stack 0
   479  0000C9                     strcmp@s2:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x2
   483  0000C9                     	ds	1
   484  0000CA                     C_DOOR_Init@cnt:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x3
   488  0000CA                     	ds	1
   489  0000CB                     ??_strcmp:
   490  0000CB                     C_DOOR_Init@d:
   491                           	opt stack 0
   492  0000CB                     C_DOOR_ReadSensors@d:
   493                           	opt stack 0
   494  0000CB                     ___lwdiv@counter:
   495                           	opt stack 0
   496  0000CB                     ___lldiv@divisor:
   497                           	opt stack 0
   498                           
   499                           ; 4 bytes @ 0x4
   500  0000CB                     	ds	1
   501  0000CC                     strcmp@r:
   502                           	opt stack 0
   503  0000CC                     ___lwdiv@quotient:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x5
   507  0000CC                     	ds	2
   508  0000CE                     ?___lwmod:
   509                           	opt stack 0
   510  0000CE                     ___lwmod@dividend:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0x7
   514  0000CE                     	ds	1
   515  0000CF                     C_DOOR_LockAll@d:
   516                           	opt stack 0
   517  0000CF                     C_DOOR_UnlockAll@d:
   518                           	opt stack 0
   519  0000CF                     ___lldiv@quotient:
   520                           	opt stack 0
   521                           
   522                           ; 4 bytes @ 0x8
   523  0000CF                     	ds	1
   524  0000D0                     initDoors@door_cnt:
   525                           	opt stack 0
   526  0000D0                     ___lwmod@divisor:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x9
   530  0000D0                     	ds	1
   531  0000D1                     commandAndMessage@com:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0xA
   535  0000D1                     	ds	1
   536  0000D2                     ___lwmod@counter:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0xB
   540  0000D2                     	ds	1
   541  0000D3                     ?_printf:
   542                           	opt stack 0
   543  0000D3                     ___lldiv@counter:
   544                           	opt stack 0
   545  0000D3                     commandAndMessage@mes:
   546                           	opt stack 0
   547  0000D3                     printf@f:
   548                           	opt stack 0
   549                           
   550                           ; 3 bytes @ 0xC
   551  0000D3                     	ds	1
   552  0000D4                     D_UART_Init@name:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0xD
   556  0000D4                     	ds	1
   557  0000D5                     
   558                           ; 1 bytes @ 0xE
   559  0000D5                     	ds	1
   560  0000D6                     D_UART_Init@baud:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0xF
   564  0000D6                     	ds	2
   565  0000D8                     ??_printf:
   566  0000D8                     D_UART_Init@interrupts:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x11
   570  0000D8                     	ds	1
   571  0000D9                     printf@idx:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x12
   575  0000D9                     	ds	1
   576  0000DA                     printf@ap:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x13
   580  0000DA                     	ds	2
   581  0000DC                     printf@prec:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x15
   585  0000DC                     	ds	1
   586  0000DD                     printf@flag:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x16
   590  0000DD                     	ds	1
   591  0000DE                     printf@val:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x17
   595  0000DE                     	ds	2
   596  0000E0                     printf@c:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x19
   600  0000E0                     	ds	1
   601  0000E1                     D_UART_Acknowledge@i:
   602                           	opt stack 0
   603  0000E1                     D_UART_Write@command:
   604                           	opt stack 0
   605  0000E1                     D_UART_WriteInt@command:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x1A
   609  0000E1                     	ds	2
   610  0000E3                     D_UART_Write@data:
   611                           	opt stack 0
   612  0000E3                     D_UART_WriteInt@d:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x1C
   616  0000E3                     	ds	2
   617  0000E5                     ??_D_UART_Write:
   618  0000E5                     ??_D_UART_WriteInt:
   619                           
   620                           ; 1 bytes @ 0x1E
   621  0000E5                     	ds	1
   622  0000E6                     ??_C_DOOR_SendStates:
   623                           
   624                           ; 1 bytes @ 0x1F
   625  0000E6                     	ds	3
   626  0000E9                     C_DOOR_SendStates@com:
   627                           	opt stack 0
   628                           
   629                           ; 3 bytes @ 0x22
   630  0000E9                     	ds	3
   631  0000EC                     C_DOOR_SendStates@mes:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x25
   635  0000EC                     	ds	2
   636  0000EE                     C_DOOR_SendStates@d:
   637                           	opt stack 0
   638                           
   639                           ; 1 bytes @ 0x27
   640  0000EE                     	ds	1
   641  0000EF                     ??_main:
   642                           
   643                           ; 1 bytes @ 0x28
   644  0000EF                     	ds	2
   645                           tblptru	equ	0xFF8
   646                           tblptrh	equ	0xFF7
   647                           tblptrl	equ	0xFF6
   648                           tablat	equ	0xFF5
   649                           postinc0	equ	0xFEE
   650                           wreg	equ	0xFE8
   651                           postdec1	equ	0xFE5
   652                           fsr1l	equ	0xFE1
   653                           
   654                           	psect	cstackCOMRAM
   655  000001                     __pcstackCOMRAM:
   656                           	opt stack 0
   657  000001                     fillDataBuffer@data:
   658                           	opt stack 0
   659                           
   660                           ; 1 bytes @ 0x0
   661  000001                     	ds	1
   662  000002                     ??_HighISR:
   663                           
   664                           ; 1 bytes @ 0x1
   665  000002                     	ds	18
   666  000014                     ??_LowISR:
   667                           
   668                           ; 1 bytes @ 0x13
   669  000014                     	ds	21
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           
   679 ;;
   680 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   681 ;;
   682 ;; *************** function _main *****************
   683 ;; Defined at:
   684 ;;		line 62 in file "main.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   698 ;;      Params:         0       0       0       0       0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0       0       0       0       0
   700 ;;      Temps:          0       2       0       0       0       0       0       0       0
   701 ;;      Totals:         0       2       0       0       0       0       0       0       0
   702 ;;Total ram usage:        2 bytes
   703 ;; Hardware stack levels required when called:    7
   704 ;; This function calls:
   705 ;;		_C_DOOR_LockAll
   706 ;;		_C_DOOR_ReadSensors
   707 ;;		_C_DOOR_SendStates
   708 ;;		_C_DOOR_UnlockAll
   709 ;;		_D_PORT_Init
   710 ;;		_D_PWM_Init
   711 ;;		_D_PWM_SetPwm
   712 ;;		_D_TMR0_Init
   713 ;;		_D_TMR1_Enable
   714 ;;		_D_TMR1_Init
   715 ;;		_D_UART_Acknowledge
   716 ;;		_D_UART_Enable
   717 ;;		_D_UART_Init
   718 ;;		_D_UART_Read
   719 ;;		_D_UART_Write
   720 ;;		_D_UART_WriteInt
   721 ;;		_initDoors
   722 ;;		_setAlarm
   723 ;;		_strcmp
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text0
   730  00084A                     __ptext0:
   731                           	opt stack 0
   732  00084A                     _main:
   733                           	opt stack 24
   734                           
   735                           ;main.c: 63: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   736                           
   737                           ;incstack = 0
   738  00084A  0E05               	movlw	5
   739  00084C  0100               	movlb	0	; () banked
   740  00084E  6FF0               	movwf	(??_main+1)& (0+255),b
   741  000850  0E0F               	movlw	15
   742  000852  6FEF               	movwf	??_main& (0+255),b
   743  000854  0EF1               	movlw	241
   744  000856                     u2177:
   745  000856  2EE8               	decfsz	wreg,f,c
   746  000858  D7FE               	bra	u2177
   747  00085A  2FEF               	decfsz	??_main& (0+255),f,b
   748  00085C  D7FC               	bra	u2177
   749  00085E  2FF0               	decfsz	(??_main+1)& (0+255),f,b
   750  000860  D7FA               	bra	u2177
   751                           
   752                           ;main.c: 65: D_PORT_Init();
   753  000862  ECE7  F00C         	call	_D_PORT_Init	;wreg free
   754                           
   755                           ;main.c: 69: D_UART_Init("P", 9600, 1);
   756  000866  0E3A               	movlw	low STR_11
   757  000868  0100               	movlb	0	; () banked
   758  00086A  6FD4               	movwf	D_UART_Init@name& (0+255),b
   759  00086C  0E08               	movlw	high STR_11
   760  00086E  6FD5               	movwf	(D_UART_Init@name+1)& (0+255),b
   761  000870  0E25               	movlw	37
   762  000872  6FD7               	movwf	(D_UART_Init@baud+1)& (0+255),b
   763  000874  0E80               	movlw	128
   764  000876  6FD6               	movwf	D_UART_Init@baud& (0+255),b
   765  000878  0E01               	movlw	1
   766  00087A  6FD8               	movwf	D_UART_Init@interrupts& (0+255),b
   767  00087C  EC0F  F00B         	call	_D_UART_Init	;wreg free
   768                           
   769                           ;main.c: 70: D_UART_Enable(1);
   770  000880  0E01               	movlw	1
   771  000882  EC93  F00C         	call	_D_UART_Enable
   772                           
   773                           ;main.c: 73: D_TMR0_Init();
   774  000886  ECA5  F00C         	call	_D_TMR0_Init	;wreg free
   775                           
   776                           ;main.c: 74: D_TMR1_Init();
   777  00088A  ECC8  F00C         	call	_D_TMR1_Init	;wreg free
   778                           
   779                           ;main.c: 77: D_PWM_Init();
   780  00088E  ECD8  F00C         	call	_D_PWM_Init	;wreg free
   781                           
   782                           ;main.c: 79: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   783  000892  0E05               	movlw	5
   784  000894  0100               	movlb	0	; () banked
   785  000896  6FF0               	movwf	(??_main+1)& (0+255),b
   786  000898  0E0F               	movlw	15
   787  00089A  6FEF               	movwf	??_main& (0+255),b
   788  00089C  0EF1               	movlw	241
   789  00089E                     u2187:
   790  00089E  2EE8               	decfsz	wreg,f,c
   791  0008A0  D7FE               	bra	u2187
   792  0008A2  2FEF               	decfsz	??_main& (0+255),f,b
   793  0008A4  D7FC               	bra	u2187
   794  0008A6  2FF0               	decfsz	(??_main+1)& (0+255),f,b
   795  0008A8  D7FA               	bra	u2187
   796                           
   797                           ;main.c: 81: newAlarm = 0;
   798  0008AA  0E00               	movlw	0
   799  0008AC  6E3A               	movwf	_newAlarm,c
   800                           
   801                           ;main.c: 82: oldAlarm = 0;
   802  0008AE  0E00               	movlw	0
   803  0008B0  6E39               	movwf	_oldAlarm,c
   804                           
   805                           ;main.c: 83: lock = 0;
   806  0008B2  0E00               	movlw	0
   807  0008B4  6E3D               	movwf	_lock,c
   808                           
   809                           ;main.c: 84: tick = 0;
   810  0008B6  0E00               	movlw	0
   811  0008B8  6E3E               	movwf	_tick,c
   812                           
   813                           ;main.c: 85: running = 0;
   814  0008BA  0E00               	movlw	0
   815  0008BC  6E3C               	movwf	_running,c
   816                           
   817                           ;main.c: 87: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   818  0008BE  0E05               	movlw	5
   819  0008C0  0100               	movlb	0	; () banked
   820  0008C2  6FF0               	movwf	(??_main+1)& (0+255),b
   821  0008C4  0E0F               	movlw	15
   822  0008C6  6FEF               	movwf	??_main& (0+255),b
   823  0008C8  0EF1               	movlw	241
   824  0008CA                     u2197:
   825  0008CA  2EE8               	decfsz	wreg,f,c
   826  0008CC  D7FE               	bra	u2197
   827  0008CE  2FEF               	decfsz	??_main& (0+255),f,b
   828  0008D0  D7FC               	bra	u2197
   829  0008D2  2FF0               	decfsz	(??_main+1)& (0+255),f,b
   830  0008D4  D7FA               	bra	u2197
   831                           
   832                           ;main.c: 91: PORTB = 0xFF;
   833                           
   834                           ;main.c: 90: } else {
   835                           
   836                           ;main.c: 89: PORTB = 0x00;
   837                           
   838                           ;main.c: 88: if (0) {
   839  0008D6  6881               	setf	3969,c	;volatile
   840  0008D8                     
   841                           ;main.c: 96: if (lock) {
   842                           
   843                           ;main.c: 92: }
   844                           ;main.c: 94: while(1) {
   845  0008D8  503D               	movf	_lock,w,c
   846  0008DA  B4D8               	btfsc	status,2,c
   847  0008DC  D009               	goto	l328
   848                           
   849                           ;main.c: 97: D_TMR1_Enable(0);
   850  0008DE  0E00               	movlw	0
   851  0008E0  ECF6  F00C         	call	_D_TMR1_Enable
   852                           
   853                           ;main.c: 98: lockDelayCnt = 0;
   854  0008E4  0E00               	movlw	0
   855  0008E6  6E40               	movwf	_lockDelayCnt,c
   856                           
   857                           ;main.c: 99: C_DOOR_LockAll();
   858  0008E8  EC24  F00A         	call	_C_DOOR_LockAll	;wreg free
   859                           
   860                           ;main.c: 100: lock = 0;
   861  0008EC  0E00               	movlw	0
   862  0008EE  6E3D               	movwf	_lock,c
   863  0008F0                     l328:
   864                           
   865                           ;main.c: 101: }
   866                           ;main.c: 104: if (readReady) {
   867  0008F0  5041               	movf	_readReady,w,c
   868  0008F2  B4D8               	btfsc	status,2,c
   869  0008F4  D0C7               	goto	l342
   870                           
   871                           ;main.c: 105: readReady = 0;
   872  0008F6  0E00               	movlw	0
   873  0008F8  6E41               	movwf	_readReady,c
   874                           
   875                           ;main.c: 106: read = D_UART_Read();
   876  0008FA  EC50  F00C         	call	_D_UART_Read	;wreg free
   877  0008FE  EE20  F029         	lfsr	2,_read
   878  000902  0E06               	movlw	6
   879  000904                     u2001:
   880  000904  CFEB FFDB          	movff	plusw0,plusw2
   881  000908  06E8               	decf	wreg,f,c
   882  00090A  E2FC               	bc	u2001
   883                           
   884                           ;main.c: 107: PORTBbits.RB5 = !PORTBbits.RB5;
   885  00090C  BA81               	btfsc	3969,5,c	;volatile
   886  00090E  D004               	goto	u2010
   887  000910  0100               	movlb	0	; () banked
   888  000912  6BEF               	clrf	??_main& (0+255),b
   889  000914  2BEF               	incf	??_main& (0+255),f,b
   890  000916  D002               	goto	u2028
   891  000918                     u2010:
   892  000918  0100               	movlb	0	; () banked
   893  00091A  6BEF               	clrf	??_main& (0+255),b
   894  00091C                     u2028:
   895  00091C  3BEF               	swapf	??_main& (0+255),f,b
   896  00091E  47EF               	rlncf	??_main& (0+255),f,b
   897  000920  5081               	movf	3969,w,c	;volatile
   898  000922  19EF               	xorwf	??_main& (0+255),w,b
   899  000924  0BDF               	andlw	-33
   900  000926  19EF               	xorwf	??_main& (0+255),w,b
   901  000928  6E81               	movwf	3969,c	;volatile
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 110: D_UART_Acknowledge(read.ackId);
   905  00092A  502F               	movf	_read+6,w,c
   906  00092C  EC50  F00B         	call	_D_UART_Acknowledge
   907                           
   908                           ;main.c: 113: communicationCnt = 0;
   909  000930  0E00               	movlw	0
   910  000932  6E3F               	movwf	_communicationCnt,c
   911                           
   912                           ;main.c: 114: if (oldAlarm == 3) {
   913  000934  0E03               	movlw	3
   914  000936  1839               	xorwf	_oldAlarm,w,c
   915  000938  A4D8               	btfss	status,2,c
   916  00093A  D002               	goto	l330
   917                           
   918                           ;main.c: 115: newAlarm = 0;
   919  00093C  0E00               	movlw	0
   920  00093E  6E3A               	movwf	_newAlarm,c
   921  000940                     l330:
   922                           
   923                           ;main.c: 116: }
   924                           ;main.c: 119: if (strcmp(read.command, "L") == 0) {
   925  000940  C02B  F0C7         	movff	_read+2,strcmp@s1
   926  000944  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   927  000948  0E38               	movlw	low STR_12
   928  00094A  0100               	movlb	0	; () banked
   929  00094C  6FC9               	movwf	strcmp@s2& (0+255),b
   930  00094E  0E08               	movlw	high STR_12
   931  000950  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   932  000952  EC07  F00C         	call	_strcmp	;wreg free
   933  000956  0100               	movlb	0	; () banked
   934  000958  51C7               	movf	?_strcmp& (0+255),w,b
   935  00095A  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
   936  00095C  A4D8               	btfss	status,2,c
   937  00095E  D006               	goto	l331
   938                           
   939                           ; BSR set to: 0
   940                           ;main.c: 120: lockDelayCnt = 0;
   941  000960  0E00               	movlw	0
   942  000962  6E40               	movwf	_lockDelayCnt,c
   943                           
   944                           ; BSR set to: 0
   945                           ;main.c: 121: D_TMR1_Enable(1);
   946  000964  0E01               	movlw	1
   947  000966  ECF6  F00C         	call	_D_TMR1_Enable
   948                           
   949                           ;main.c: 124: } else if (strcmp(read.command, "U") == 0) {
   950  00096A  D08C               	goto	l342
   951  00096C                     l331:
   952  00096C  C02B  F0C7         	movff	_read+2,strcmp@s1
   953  000970  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   954  000974  0E40               	movlw	low STR_13
   955  000976  0100               	movlb	0	; () banked
   956  000978  6FC9               	movwf	strcmp@s2& (0+255),b
   957  00097A  0E08               	movlw	high STR_13
   958  00097C  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   959  00097E  EC07  F00C         	call	_strcmp	;wreg free
   960  000982  0100               	movlb	0	; () banked
   961  000984  51C7               	movf	?_strcmp& (0+255),w,b
   962  000986  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
   963  000988  A4D8               	btfss	status,2,c
   964  00098A  D008               	goto	l333
   965                           
   966                           ; BSR set to: 0
   967                           ;main.c: 125: lockDelayCnt = 0;
   968  00098C  0E00               	movlw	0
   969  00098E  6E40               	movwf	_lockDelayCnt,c
   970                           
   971                           ; BSR set to: 0
   972                           ;main.c: 126: D_TMR1_Enable(0);
   973  000990  0E00               	movlw	0
   974  000992  ECF6  F00C         	call	_D_TMR1_Enable
   975                           
   976                           ;main.c: 127: C_DOOR_UnlockAll();
   977  000996  ECCA  F009         	call	_C_DOOR_UnlockAll	;wreg free
   978                           
   979                           ;main.c: 130: } else if (strcmp(read.command, "I") == 0) {
   980  00099A  D074               	goto	l342
   981  00099C                     l333:
   982  00099C  C02B  F0C7         	movff	_read+2,strcmp@s1
   983  0009A0  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   984  0009A4  0E36               	movlw	low STR_14
   985  0009A6  0100               	movlb	0	; () banked
   986  0009A8  6FC9               	movwf	strcmp@s2& (0+255),b
   987  0009AA  0E08               	movlw	high STR_14
   988  0009AC  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   989  0009AE  EC07  F00C         	call	_strcmp	;wreg free
   990  0009B2  0100               	movlb	0	; () banked
   991  0009B4  51C7               	movf	?_strcmp& (0+255),w,b
   992  0009B6  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
   993  0009B8  A4D8               	btfss	status,2,c
   994  0009BA  D00B               	goto	l335
   995                           
   996                           ; BSR set to: 0
   997                           ;main.c: 131: initDoors((uint8_t)(*read.message - 0x30));
   998  0009BC  C02D  FFD9         	movff	_read+4,fsr2l
   999  0009C0  C02E  FFDA         	movff	_read+5,fsr2h
  1000  0009C4  50DF               	movf	indf2,w,c
  1001  0009C6  0FD0               	addlw	208
  1002  0009C8  ECB7  F00C         	call	_initDoors
  1003                           
  1004                           ;main.c: 132: running = 1;
  1005  0009CC  0E01               	movlw	1
  1006  0009CE  6E3C               	movwf	_running,c
  1007                           
  1008                           ;main.c: 135: } else if (strcmp(read.command, "R") == 0) {
  1009  0009D0  D059               	goto	l342
  1010  0009D2                     l335:
  1011  0009D2  C02B  F0C7         	movff	_read+2,strcmp@s1
  1012  0009D6  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1013  0009DA  0E3C               	movlw	low STR_15
  1014  0009DC  0100               	movlb	0	; () banked
  1015  0009DE  6FC9               	movwf	strcmp@s2& (0+255),b
  1016  0009E0  0E08               	movlw	high STR_15
  1017  0009E2  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1018  0009E4  EC07  F00C         	call	_strcmp	;wreg free
  1019  0009E8  0100               	movlb	0	; () banked
  1020  0009EA  51C7               	movf	?_strcmp& (0+255),w,b
  1021  0009EC  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1022  0009EE  A4D8               	btfss	status,2,c
  1023  0009F0  D00B               	goto	l337
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;main.c: 136: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1027  0009F2  0E68               	movlw	104
  1028  0009F4  0100               	movlb	0	; () banked
  1029  0009F6  6FEF               	movwf	??_main& (0+255),b
  1030  0009F8  0EE4               	movlw	228
  1031  0009FA                     u2207:
  1032  0009FA  2EE8               	decfsz	wreg,f,c
  1033  0009FC  D7FE               	bra	u2207
  1034  0009FE  2FEF               	decfsz	??_main& (0+255),f,b
  1035  000A00  D7FC               	bra	u2207
  1036  000A02  F000               	nop	
  1037  000A04  00FF               	reset		;# 
  1038                           
  1039                           ;main.c: 140: } else if (strcmp(read.command, "P") == 0) {
  1040  000A06  D03E               	goto	l342
  1041  000A08                     l337:
  1042  000A08  C02B  F0C7         	movff	_read+2,strcmp@s1
  1043  000A0C  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1044  000A10  0E3A               	movlw	low STR_11
  1045  000A12  0100               	movlb	0	; () banked
  1046  000A14  6FC9               	movwf	strcmp@s2& (0+255),b
  1047  000A16  0E08               	movlw	high STR_11
  1048  000A18  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1049  000A1A  EC07  F00C         	call	_strcmp	;wreg free
  1050  000A1E  0100               	movlb	0	; () banked
  1051  000A20  51C7               	movf	?_strcmp& (0+255),w,b
  1052  000A22  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1053  000A24  A4D8               	btfss	status,2,c
  1054  000A26  D00A               	goto	l339
  1055                           
  1056                           ; BSR set to: 0
  1057                           ;main.c: 141: D_UART_WriteInt("S", running);
  1058  000A28  0E3E               	movlw	low STR_17
  1059  000A2A  6FE1               	movwf	D_UART_WriteInt@command& (0+255),b
  1060  000A2C  0E08               	movlw	high STR_17
  1061  000A2E  6FE2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  1062  000A30  C03C  F0E3         	movff	_running,D_UART_WriteInt@d
  1063  000A34  6BE4               	clrf	(D_UART_WriteInt@d+1)& (0+255),b
  1064  000A36  EC05  F009         	call	_D_UART_WriteInt	;wreg free
  1065                           
  1066                           ;main.c: 144: } else if (strcmp(read.command, "A") == 0) {
  1067  000A3A  D024               	goto	l342
  1068  000A3C                     l339:
  1069  000A3C  C02B  F0C7         	movff	_read+2,strcmp@s1
  1070  000A40  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1071  000A44  0E32               	movlw	low STR_18
  1072  000A46  0100               	movlb	0	; () banked
  1073  000A48  6FC9               	movwf	strcmp@s2& (0+255),b
  1074  000A4A  0E08               	movlw	high STR_18
  1075  000A4C  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1076  000A4E  EC07  F00C         	call	_strcmp	;wreg free
  1077  000A52  0100               	movlb	0	; () banked
  1078  000A54  51C7               	movf	?_strcmp& (0+255),w,b
  1079  000A56  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1080  000A58  A4D8               	btfss	status,2,c
  1081  000A5A  D009               	goto	l341
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;main.c: 145: setAlarm((uint8_t)(*read.message - 0x30));
  1085  000A5C  C02D  FFD9         	movff	_read+4,fsr2l
  1086  000A60  C02E  FFDA         	movff	_read+5,fsr2h
  1087  000A64  50DF               	movf	indf2,w,c
  1088  000A66  0FD0               	addlw	208
  1089  000A68  EC0A  F00D         	call	_setAlarm
  1090                           
  1091                           ;main.c: 147: } else {
  1092  000A6C  D00B               	goto	l342
  1093  000A6E                     l341:
  1094                           
  1095                           ;main.c: 148: D_UART_Write("E", "U");
  1096  000A6E  0E34               	movlw	low STR_19
  1097  000A70  0100               	movlb	0	; () banked
  1098  000A72  6FE1               	movwf	D_UART_Write@command& (0+255),b
  1099  000A74  0E08               	movlw	high STR_19
  1100  000A76  6FE2               	movwf	(D_UART_Write@command+1)& (0+255),b
  1101  000A78  0E40               	movlw	low STR_13
  1102  000A7A  6FE3               	movwf	D_UART_Write@data& (0+255),b
  1103  000A7C  0E08               	movlw	high STR_13
  1104  000A7E  6FE4               	movwf	(D_UART_Write@data+1)& (0+255),b
  1105  000A80  EC95  F008         	call	_D_UART_Write	;wreg free
  1106  000A84                     l342:
  1107                           
  1108                           ;main.c: 150: }
  1109                           ;main.c: 151: }
  1110                           ;main.c: 154: if (tick) {
  1111  000A84  503E               	movf	_tick,w,c
  1112  000A86  B4D8               	btfsc	status,2,c
  1113  000A88  D727               	goto	l326
  1114                           
  1115                           ;main.c: 155: tick = 0;
  1116  000A8A  0E00               	movlw	0
  1117  000A8C  6E3E               	movwf	_tick,c
  1118                           
  1119                           ;main.c: 158: C_DOOR_ReadSensors();
  1120  000A8E  EC7D  F00A         	call	_C_DOOR_ReadSensors	;wreg free
  1121                           
  1122                           ;main.c: 161: C_DOOR_SendStates();
  1123  000A92  EC1E  F008         	call	_C_DOOR_SendStates	;wreg free
  1124                           
  1125                           ;main.c: 164: if (communicationCnt < 60) {
  1126  000A96  0E3C               	movlw	60
  1127  000A98  603F               	cpfslt	_communicationCnt,c
  1128  000A9A  D002               	goto	l344
  1129                           
  1130                           ;main.c: 165: communicationCnt++;
  1131  000A9C  2A3F               	incf	_communicationCnt,f,c
  1132                           
  1133                           ;main.c: 166: } else {
  1134  000A9E  D005               	goto	l346
  1135  000AA0                     l344:
  1136                           
  1137                           ;main.c: 167: if (oldAlarm == 0) {
  1138  000AA0  5039               	movf	_oldAlarm,w,c
  1139  000AA2  A4D8               	btfss	status,2,c
  1140  000AA4  D002               	goto	l346
  1141                           
  1142                           ;main.c: 168: newAlarm = 3;
  1143  000AA6  0E03               	movlw	3
  1144  000AA8  6E3A               	movwf	_newAlarm,c
  1145  000AAA                     l346:
  1146                           
  1147                           ;main.c: 169: }
  1148                           ;main.c: 170: }
  1149                           ;main.c: 173: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1150  000AAA  5039               	movf	_oldAlarm,w,c
  1151  000AAC  183A               	xorwf	_newAlarm,w,c
  1152  000AAE  A4D8               	btfss	status,2,c
  1153  000AB0  D017               	goto	l350
  1154  000AB2  043A               	decf	_newAlarm,w,c
  1155  000AB4  B4D8               	btfsc	status,2,c
  1156  000AB6  D014               	goto	l350
  1157  000AB8  0E03               	movlw	3
  1158  000ABA  183A               	xorwf	_newAlarm,w,c
  1159  000ABC  B4D8               	btfsc	status,2,c
  1160  000ABE  D010               	goto	l350
  1161  000AC0  D70B               	goto	l326
  1162  000AC2                     
  1163                           ;main.c: 177: pwm = 0x00;
  1164                           
  1165                           ;main.c: 176: case 0:
  1166  000AC2  0E00               	movlw	0
  1167  000AC4  D00B               	goto	L1
  1168  000AC6                     
  1169                           ;main.c: 181: case 1:
  1170                           ;main.c: 182: if (pwm == 0) {
  1171  000AC6  503B               	movf	_pwm,w,c
  1172  000AC8  A4D8               	btfss	status,2,c
  1173  000ACA  D002               	goto	l356
  1174                           
  1175                           ;main.c: 183: pwm = 1;
  1176  000ACC  0E01               	movlw	1
  1177  000ACE  6E3B               	movwf	_pwm,c
  1178  000AD0                     l356:
  1179                           
  1180                           ;main.c: 184: }
  1181                           ;main.c: 185: pwm = (uint8_t)(pwm * 0x02);
  1182  000AD0  503B               	movf	_pwm,w,c
  1183  000AD2  0D02               	mullw	2
  1184  000AD4  CFF3 F03B          	movff	prodl,_pwm
  1185                           
  1186                           ;main.c: 186: break;
  1187  000AD8  D011               	goto	l353
  1188  000ADA                     
  1189                           ;main.c: 189: pwm = 0x7F;
  1190  000ADA  0E7F               	movlw	127
  1191  000ADC                     L1:
  1192  000ADC  6E3B               	movwf	_pwm,c
  1193                           
  1194                           ;main.c: 191: }
  1195                           
  1196                           ;main.c: 190: break;
  1197  000ADE  D00E               	goto	l353
  1198  000AE0                     l350:
  1199  000AE0  503A               	movf	_newAlarm,w,c
  1200                           
  1201                           ; Switch size 1, requested type "space"
  1202                           ; Number of cases is 4, Range of values is 0 to 3
  1203                           ; switch strategies available:
  1204                           ; Name         Instructions Cycles
  1205                           ; simple_byte           13     7 (average)
  1206                           ;	Chosen strategy is simple_byte
  1207  000AE2  0A00               	xorlw	0	; case 0
  1208  000AE4  B4D8               	btfsc	status,2,c
  1209  000AE6  D7ED               	goto	l351
  1210  000AE8  0A01               	xorlw	1	; case 1
  1211  000AEA  B4D8               	btfsc	status,2,c
  1212  000AEC  D7EC               	goto	l354
  1213  000AEE  0A03               	xorlw	3	; case 2
  1214  000AF0  B4D8               	btfsc	status,2,c
  1215  000AF2  D7F3               	goto	l357
  1216  000AF4  0A01               	xorlw	1	; case 3
  1217  000AF6  B4D8               	btfsc	status,2,c
  1218  000AF8  D7E6               	goto	l354
  1219  000AFA  D7E3               	goto	l351
  1220  000AFC                     l353:
  1221                           
  1222                           ;main.c: 192: D_PWM_SetPwm(pwm);
  1223  000AFC  503B               	movf	_pwm,w,c
  1224  000AFE  EC68  F00C         	call	_D_PWM_SetPwm
  1225                           
  1226                           ;main.c: 193: oldAlarm = newAlarm;
  1227  000B02  C03A  F039         	movff	_newAlarm,_oldAlarm
  1228  000B06  D6E8               	goto	l326
  1229  000B08                     __end_of_main:
  1230                           	opt stack 0
  1231                           tblptru	equ	0xFF8
  1232                           tblptrh	equ	0xFF7
  1233                           tblptrl	equ	0xFF6
  1234                           tablat	equ	0xFF5
  1235                           prodl	equ	0xFF3
  1236                           postinc0	equ	0xFEE
  1237                           plusw0	equ	0xFEB
  1238                           wreg	equ	0xFE8
  1239                           postdec1	equ	0xFE5
  1240                           fsr1l	equ	0xFE1
  1241                           indf2	equ	0xFDF
  1242                           plusw2	equ	0xFDB
  1243                           fsr2h	equ	0xFDA
  1244                           fsr2l	equ	0xFD9
  1245                           status	equ	0xFD8
  1246                           
  1247 ;; *************** function _strcmp *****************
  1248 ;; Defined at:
  1249 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1250 ;; Parameters:    Size  Location     Type
  1251 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  1252 ;;		 -> readBuffer(166), 
  1253 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  1254 ;;		 -> STR_18(2), STR_16(2), STR_15(2), STR_14(2), 
  1255 ;;		 -> STR_13(2), STR_12(2), 
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;  r               1    5[BANK0 ] char 
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  2    0[BANK0 ] int 
  1260 ;; Registers used:
  1261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1267 ;;      Params:         0       4       0       0       0       0       0       0       0
  1268 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1269 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1270 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1271 ;;Total ram usage:        6 bytes
  1272 ;; Hardware stack levels used:    1
  1273 ;; Hardware stack levels required when called:    3
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_main
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           	psect	text1
  1282  00180E                     __ptext1:
  1283                           	opt stack 0
  1284  00180E                     _strcmp:
  1285                           	opt stack 27
  1286                           
  1287                           ;incstack = 0
  1288  00180E  D005               	goto	l963
  1289  001810  0100               	movlb	0	; () banked
  1290  001812  4BC7               	infsnz	strcmp@s1& (0+255),f,b
  1291  001814  2BC8               	incf	(strcmp@s1+1)& (0+255),f,b
  1292  001816  4BC9               	infsnz	strcmp@s2& (0+255),f,b
  1293  001818  2BCA               	incf	(strcmp@s2+1)& (0+255),f,b
  1294  00181A                     l963:
  1295                           
  1296                           ; BSR set to: 0
  1297  00181A  C0C7  FFD9         	movff	strcmp@s1,fsr2l
  1298  00181E  C0C8  FFDA         	movff	strcmp@s1+1,fsr2h
  1299  001822  50DF               	movf	indf2,w,c
  1300  001824  0100               	movlb	0	; () banked
  1301  001826  6FCB               	movwf	??_strcmp& (0+255),b
  1302  001828  C0C9  FFF6         	movff	strcmp@s2,tblptrl
  1303  00182C  C0CA  FFF7         	movff	strcmp@s2+1,tblptrh
  1304  001830                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1305  001830  6AF8               	clrf	tblptru,c
  1306  001832                     	endif
  1307  001832                     	if	0	;tblptru may be non-zero
  1308  001832                     	endif
  1309  001832  0008               	tblrd		*
  1310  001834  50F5               	movf	tablat,w,c
  1311  001836  0800               	sublw	0
  1312  001838  25CB               	addwf	??_strcmp& (0+255),w,b
  1313  00183A  6FCC               	movwf	strcmp@r& (0+255),b
  1314  00183C  51CC               	movf	strcmp@r& (0+255),w,b
  1315  00183E  A4D8               	btfss	status,2,c
  1316  001840  D007               	goto	u1970
  1317                           
  1318                           ; BSR set to: 0
  1319  001842  C0C7  FFD9         	movff	strcmp@s1,fsr2l
  1320  001846  C0C8  FFDA         	movff	strcmp@s1+1,fsr2h
  1321  00184A  50DF               	movf	indf2,w,c
  1322  00184C  A4D8               	btfss	status,2,c
  1323  00184E  D7E0               	goto	l964
  1324  001850                     u1970:
  1325                           
  1326                           ; BSR set to: 0
  1327                           
  1328                           ; BSR set to: 0
  1329                           
  1330                           ; BSR set to: 0
  1331  001850  51CC               	movf	strcmp@r& (0+255),w,b
  1332  001852  6FC7               	movwf	?_strcmp& (0+255),b
  1333  001854  6BC8               	clrf	(?_strcmp+1)& (0+255),b
  1334  001856  BFC7               	btfsc	?_strcmp& (0+255),7,b
  1335  001858  07C8               	decf	(?_strcmp+1)& (0+255),f,b
  1336  00185A  0012               	return	
  1337  00185C                     __end_of_strcmp:
  1338                           	opt stack 0
  1339                           tblptru	equ	0xFF8
  1340                           tblptrh	equ	0xFF7
  1341                           tblptrl	equ	0xFF6
  1342                           tablat	equ	0xFF5
  1343                           prodl	equ	0xFF3
  1344                           postinc0	equ	0xFEE
  1345                           plusw0	equ	0xFEB
  1346                           wreg	equ	0xFE8
  1347                           postdec1	equ	0xFE5
  1348                           fsr1l	equ	0xFE1
  1349                           indf2	equ	0xFDF
  1350                           plusw2	equ	0xFDB
  1351                           fsr2h	equ	0xFDA
  1352                           fsr2l	equ	0xFD9
  1353                           status	equ	0xFD8
  1354                           
  1355 ;; *************** function _setAlarm *****************
  1356 ;; Defined at:
  1357 ;;		line 58 in file "main.c"
  1358 ;; Parameters:    Size  Location     Type
  1359 ;;  alarm           1    wreg     unsigned char 
  1360 ;; Auto vars:     Size  Location     Type
  1361 ;;  alarm           1    0[BANK0 ] unsigned char 
  1362 ;; Return value:  Size  Location     Type
  1363 ;;                  1    wreg      void 
  1364 ;; Registers used:
  1365 ;;		wreg
  1366 ;; Tracked objects:
  1367 ;;		On entry : 0/0
  1368 ;;		On exit  : 0/0
  1369 ;;		Unchanged: 0/0
  1370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1371 ;;      Params:         0       0       0       0       0       0       0       0       0
  1372 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1374 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1375 ;;Total ram usage:        1 bytes
  1376 ;; Hardware stack levels used:    1
  1377 ;; Hardware stack levels required when called:    3
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_main
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text2
  1386  001A14                     __ptext2:
  1387                           	opt stack 0
  1388  001A14                     _setAlarm:
  1389                           	opt stack 27
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;incstack = 0
  1393                           ;setAlarm@alarm stored from wreg
  1394  001A14  0100               	movlb	0	; () banked
  1395  001A16  6FC7               	movwf	setAlarm@alarm& (0+255),b
  1396                           
  1397                           ;main.c: 59: newAlarm = alarm;
  1398  001A18  C0C7  F03A         	movff	setAlarm@alarm,_newAlarm
  1399  001A1C  0012               	return		;funcret
  1400  001A1E                     __end_of_setAlarm:
  1401                           	opt stack 0
  1402                           tblptru	equ	0xFF8
  1403                           tblptrh	equ	0xFF7
  1404                           tblptrl	equ	0xFF6
  1405                           tablat	equ	0xFF5
  1406                           prodl	equ	0xFF3
  1407                           postinc0	equ	0xFEE
  1408                           plusw0	equ	0xFEB
  1409                           wreg	equ	0xFE8
  1410                           postdec1	equ	0xFE5
  1411                           fsr1l	equ	0xFE1
  1412                           indf2	equ	0xFDF
  1413                           plusw2	equ	0xFDB
  1414                           fsr2h	equ	0xFDA
  1415                           fsr2l	equ	0xFD9
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _initDoors *****************
  1419 ;; Defined at:
  1420 ;;		line 46 in file "main.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  door_cnt        1    wreg     unsigned char 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  door_cnt        1    9[BANK0 ] unsigned char 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0
  1435 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1436 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1437 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1438 ;;Total ram usage:        1 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    4
  1441 ;; This function calls:
  1442 ;;		_C_DOOR_Init
  1443 ;;		_C_DOOR_LockAll
  1444 ;;		_D_TMR0_Enable
  1445 ;; This function is called by:
  1446 ;;		_main
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           	psect	text3
  1451  00196E                     __ptext3:
  1452                           	opt stack 0
  1453  00196E                     _initDoors:
  1454                           	opt stack 26
  1455                           
  1456                           ;incstack = 0
  1457                           ;initDoors@door_cnt stored from wreg
  1458  00196E  0100               	movlb	0	; () banked
  1459  001970  6FD0               	movwf	initDoors@door_cnt& (0+255),b
  1460                           
  1461                           ;main.c: 47: if (door_cnt < 1) {
  1462  001972  0100               	movlb	0	; () banked
  1463  001974  51D0               	movf	initDoors@door_cnt& (0+255),w,b
  1464  001976  A4D8               	btfss	status,2,c
  1465  001978  D002               	goto	l316
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;main.c: 48: door_cnt = 1;
  1469  00197A  0E01               	movlw	1
  1470  00197C  6FD0               	movwf	initDoors@door_cnt& (0+255),b
  1471  00197E                     l316:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;main.c: 49: }
  1475                           ;main.c: 51: C_DOOR_Init(door_cnt);
  1476                           
  1477                           ; BSR set to: 0
  1478  00197E  51D0               	movf	initDoors@door_cnt& (0+255),w,b
  1479  001980  EC75  F007         	call	_C_DOOR_Init
  1480                           
  1481                           ;main.c: 52: C_DOOR_LockAll();
  1482  001984  EC24  F00A         	call	_C_DOOR_LockAll	;wreg free
  1483                           
  1484                           ;main.c: 55: D_TMR0_Enable(1);
  1485  001988  0E01               	movlw	1
  1486  00198A  EC00  F00D         	call	_D_TMR0_Enable
  1487  00198E  0012               	return		;funcret
  1488  001990                     __end_of_initDoors:
  1489                           	opt stack 0
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           prodl	equ	0xFF3
  1495                           postinc0	equ	0xFEE
  1496                           plusw0	equ	0xFEB
  1497                           wreg	equ	0xFE8
  1498                           postdec1	equ	0xFE5
  1499                           fsr1l	equ	0xFE1
  1500                           indf2	equ	0xFDF
  1501                           plusw2	equ	0xFDB
  1502                           fsr2h	equ	0xFDA
  1503                           fsr2l	equ	0xFD9
  1504                           status	equ	0xFD8
  1505                           
  1506 ;; *************** function _C_DOOR_LockAll *****************
  1507 ;; Defined at:
  1508 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;  d               1    8[BANK0 ] unsigned char 
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1522 ;;      Params:         0       0       0       0       0       0       0       0       0
  1523 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1524 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1525 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1526 ;;Total ram usage:        9 bytes
  1527 ;; Hardware stack levels used:    1
  1528 ;; Hardware stack levels required when called:    3
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_initDoors
  1533 ;;		_main
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           
  1537                           	psect	text4
  1538  001448                     __ptext4:
  1539                           	opt stack 0
  1540  001448                     _C_DOOR_LockAll:
  1541                           	opt stack 26
  1542                           
  1543                           ;DOOR_Controller.c: 80: uint8_t d;
  1544                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1545                           
  1546                           ;incstack = 0
  1547  001448  0E00               	movlw	0
  1548  00144A  0100               	movlb	0	; () banked
  1549  00144C  6FCF               	movwf	C_DOOR_LockAll@d& (0+255),b
  1550  00144E  D047               	goto	l30
  1551  001450                     
  1552                           ; BSR set to: 0
  1553                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1554                           
  1555                           ; BSR set to: 0
  1556  001450  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1557  001452  0D0A               	mullw	10
  1558  001454  0E02               	movlw	2
  1559  001456  26F3               	addwf	prodl,f,c
  1560  001458  0E00               	movlw	0
  1561  00145A  22F4               	addwfc	prodh,f,c
  1562  00145C  0E60               	movlw	low _doors
  1563  00145E  24F3               	addwf	prodl,w,c
  1564  001460  6ED9               	movwf	fsr2l,c
  1565  001462  0E00               	movlw	high _doors
  1566  001464  20F4               	addwfc	prodh,w,c
  1567  001466  6EDA               	movwf	fsr2h,c
  1568  001468  CFDE F0C7          	movff	postinc2,??_C_DOOR_LockAll
  1569  00146C  CFDD F0C8          	movff	postdec2,??_C_DOOR_LockAll+1
  1570  001470  C0C7  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1571  001474  C0C8  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1572  001478  50DF               	movf	indf2,w,c
  1573  00147A  6FC9               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1574  00147C  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1575  00147E  0D0A               	mullw	10
  1576  001480  0E04               	movlw	4
  1577  001482  26F3               	addwf	prodl,f,c
  1578  001484  0E00               	movlw	0
  1579  001486  22F4               	addwfc	prodh,f,c
  1580  001488  0E60               	movlw	low _doors
  1581  00148A  24F3               	addwf	prodl,w,c
  1582  00148C  6ED9               	movwf	fsr2l,c
  1583  00148E  0E00               	movlw	high _doors
  1584  001490  20F4               	addwfc	prodh,w,c
  1585  001492  6EDA               	movwf	fsr2h,c
  1586  001494  50DF               	movf	indf2,w,c
  1587  001496  6FCA               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1588  001498  0E01               	movlw	1
  1589  00149A  6FCB               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1590  00149C  2BCA               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1591  00149E  D002               	goto	u1714
  1592  0014A0                     u1715:
  1593  0014A0  90D8               	bcf	status,0,c
  1594  0014A2  37CB               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1595  0014A4                     u1714:
  1596  0014A4  2FCA               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1597  0014A6  D7FC               	goto	u1715
  1598  0014A8  0100               	movlb	0	; () banked
  1599  0014AA  51CB               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1600  0014AC  15C9               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1601  0014AE  6FCC               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1602  0014B0  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1603  0014B2  0D0A               	mullw	10
  1604  0014B4  0E02               	movlw	2
  1605  0014B6  26F3               	addwf	prodl,f,c
  1606  0014B8  0E00               	movlw	0
  1607  0014BA  22F4               	addwfc	prodh,f,c
  1608  0014BC  0E60               	movlw	low _doors
  1609  0014BE  24F3               	addwf	prodl,w,c
  1610  0014C0  6ED9               	movwf	fsr2l,c
  1611  0014C2  0E00               	movlw	high _doors
  1612  0014C4  20F4               	addwfc	prodh,w,c
  1613  0014C6  6EDA               	movwf	fsr2h,c
  1614  0014C8  CFDE F0CD          	movff	postinc2,??_C_DOOR_LockAll+6
  1615  0014CC  CFDD F0CE          	movff	postdec2,??_C_DOOR_LockAll+7
  1616  0014D0  C0CD  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1617  0014D4  C0CE  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1618  0014D8  51CC               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1619  0014DA  1ADF               	xorwf	indf2,f,c
  1620                           
  1621                           ; BSR set to: 0
  1622  0014DC  2BCF               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1623  0014DE                     l30:
  1624                           
  1625                           ; BSR set to: 0
  1626                           
  1627                           ; BSR set to: 0
  1628  0014DE  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1629  0014E0  6FC7               	movwf	??_C_DOOR_LockAll& (0+255),b
  1630  0014E2  6BC8               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1631  0014E4  5037               	movf	_door_cnt,w,c
  1632  0014E6  5DC7               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1633  0014E8  51C8               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1634  0014EA  0A80               	xorlw	128
  1635  0014EC  6FC9               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1636  0014EE  5038               	movf	_door_cnt+1,w,c
  1637  0014F0  0A80               	xorlw	128
  1638  0014F2  59C9               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1639  0014F4  B0D8               	btfsc	status,0,c
  1640  0014F6  0012               	return	
  1641  0014F8  D7AB               	goto	l31
  1642  0014FA                     __end_of_C_DOOR_LockAll:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           prodh	equ	0xFF4
  1649                           prodl	equ	0xFF3
  1650                           postinc0	equ	0xFEE
  1651                           plusw0	equ	0xFEB
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1l	equ	0xFE1
  1655                           indf2	equ	0xFDF
  1656                           postinc2	equ	0xFDE
  1657                           postdec2	equ	0xFDD
  1658                           plusw2	equ	0xFDB
  1659                           fsr2h	equ	0xFDA
  1660                           fsr2l	equ	0xFD9
  1661                           status	equ	0xFD8
  1662                           
  1663 ;; *************** function _C_DOOR_Init *****************
  1664 ;; Defined at:
  1665 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  cnt             1    wreg     unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  cnt             1    3[BANK0 ] unsigned char 
  1670 ;;  d               1    4[BANK0 ] unsigned char 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0
  1681 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1682 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1683 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1684 ;;Total ram usage:        5 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    3
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_initDoors
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text5
  1695  000EEA                     __ptext5:
  1696                           	opt stack 0
  1697  000EEA                     _C_DOOR_Init:
  1698                           	opt stack 26
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;incstack = 0
  1702                           ;C_DOOR_Init@cnt stored from wreg
  1703  000EEA  0100               	movlb	0	; () banked
  1704  000EEC  6FCA               	movwf	C_DOOR_Init@cnt& (0+255),b
  1705                           
  1706                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1707  000EEE  C0CA  F037         	movff	C_DOOR_Init@cnt,_door_cnt
  1708  000EF2  6A38               	clrf	_door_cnt+1,c
  1709                           
  1710                           ;DOOR_Controller.c: 52: uint8_t d;
  1711                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1712  000EF4  0E00               	movlw	0
  1713  000EF6  0100               	movlb	0	; () banked
  1714  000EF8  6FCB               	movwf	C_DOOR_Init@d& (0+255),b
  1715  000EFA  D092               	goto	l24
  1716  000EFC                     
  1717                           ; BSR set to: 0
  1718                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1719                           
  1720                           ; BSR set to: 0
  1721  000EFC  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1722  000EFE  0D0A               	mullw	10
  1723  000F00  0E60               	movlw	low _doors
  1724  000F02  24F3               	addwf	prodl,w,c
  1725  000F04  6ED9               	movwf	fsr2l,c
  1726  000F06  0E00               	movlw	high _doors
  1727  000F08  20F4               	addwfc	prodh,w,c
  1728  000F0A  6EDA               	movwf	fsr2h,c
  1729  000F0C  C0CB  FFDF         	movff	C_DOOR_Init@d,indf2
  1730                           
  1731                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1732  000F10  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1733  000F12  0D0A               	mullw	10
  1734  000F14  0E01               	movlw	1
  1735  000F16  26F3               	addwf	prodl,f,c
  1736  000F18  0E00               	movlw	0
  1737  000F1A  22F4               	addwfc	prodh,f,c
  1738  000F1C  0E60               	movlw	low _doors
  1739  000F1E  24F3               	addwf	prodl,w,c
  1740  000F20  6ED9               	movwf	fsr2l,c
  1741  000F22  0E00               	movlw	high _doors
  1742  000F24  20F4               	addwfc	prodh,w,c
  1743  000F26  6EDA               	movwf	fsr2h,c
  1744  000F28  0E01               	movlw	1
  1745  000F2A  6EDF               	movwf	indf2,c
  1746                           
  1747                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1748  000F2C  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1749  000F2E  0D0A               	mullw	10
  1750  000F30  0E02               	movlw	2
  1751  000F32  26F3               	addwf	prodl,f,c
  1752  000F34  0E00               	movlw	0
  1753  000F36  22F4               	addwfc	prodh,f,c
  1754  000F38  0E60               	movlw	low _doors
  1755  000F3A  24F3               	addwf	prodl,w,c
  1756  000F3C  6ED9               	movwf	fsr2l,c
  1757  000F3E  0E00               	movlw	high _doors
  1758  000F40  20F4               	addwfc	prodh,w,c
  1759  000F42  6EDA               	movwf	fsr2h,c
  1760  000F44  0E81               	movlw	129
  1761  000F46  6EDE               	movwf	postinc2,c
  1762  000F48  0E0F               	movlw	15
  1763  000F4A  6EDD               	movwf	postdec2,c
  1764                           
  1765                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1766  000F4C  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1767  000F4E  0D0A               	mullw	10
  1768  000F50  0E04               	movlw	4
  1769  000F52  26F3               	addwf	prodl,f,c
  1770  000F54  0E00               	movlw	0
  1771  000F56  22F4               	addwfc	prodh,f,c
  1772  000F58  0E60               	movlw	low _doors
  1773  000F5A  24F3               	addwf	prodl,w,c
  1774  000F5C  6ED9               	movwf	fsr2l,c
  1775  000F5E  0E00               	movlw	high _doors
  1776  000F60  20F4               	addwfc	prodh,w,c
  1777  000F62  6EDA               	movwf	fsr2h,c
  1778  000F64  C0CB  FFDF         	movff	C_DOOR_Init@d,indf2
  1779                           
  1780                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1781  000F68  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1782  000F6A  0D0A               	mullw	10
  1783  000F6C  0E06               	movlw	6
  1784  000F6E  26F3               	addwf	prodl,f,c
  1785  000F70  0E00               	movlw	0
  1786  000F72  22F4               	addwfc	prodh,f,c
  1787  000F74  0E60               	movlw	low _doors
  1788  000F76  24F3               	addwf	prodl,w,c
  1789  000F78  6ED9               	movwf	fsr2l,c
  1790  000F7A  0E00               	movlw	high _doors
  1791  000F7C  20F4               	addwfc	prodh,w,c
  1792  000F7E  6EDA               	movwf	fsr2h,c
  1793  000F80  0E00               	movlw	0
  1794  000F82  6EDF               	movwf	indf2,c
  1795                           
  1796                           ;DOOR_Controller.c: 61: doors[d].was_open = !0;
  1797  000F84  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1798  000F86  0D0A               	mullw	10
  1799  000F88  0E05               	movlw	5
  1800  000F8A  26F3               	addwf	prodl,f,c
  1801  000F8C  0E00               	movlw	0
  1802  000F8E  22F4               	addwfc	prodh,f,c
  1803  000F90  0E60               	movlw	low _doors
  1804  000F92  24F3               	addwf	prodl,w,c
  1805  000F94  6ED9               	movwf	fsr2l,c
  1806  000F96  0E00               	movlw	high _doors
  1807  000F98  20F4               	addwfc	prodh,w,c
  1808  000F9A  6EDA               	movwf	fsr2h,c
  1809  000F9C  0E01               	movlw	1
  1810  000F9E  6EDF               	movwf	indf2,c
  1811                           
  1812                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1813  000FA0  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1814  000FA2  0D0A               	mullw	10
  1815  000FA4  0E07               	movlw	7
  1816  000FA6  26F3               	addwf	prodl,f,c
  1817  000FA8  0E00               	movlw	0
  1818  000FAA  22F4               	addwfc	prodh,f,c
  1819  000FAC  0E60               	movlw	low _doors
  1820  000FAE  24F3               	addwf	prodl,w,c
  1821  000FB0  6ED9               	movwf	fsr2l,c
  1822  000FB2  0E00               	movlw	high _doors
  1823  000FB4  20F4               	addwfc	prodh,w,c
  1824  000FB6  6EDA               	movwf	fsr2h,c
  1825  000FB8  0E80               	movlw	128
  1826  000FBA  6EDE               	movwf	postinc2,c
  1827  000FBC  0E0F               	movlw	15
  1828  000FBE  6EDD               	movwf	postdec2,c
  1829                           
  1830                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1831  000FC0  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1832  000FC2  0D0A               	mullw	10
  1833  000FC4  0E09               	movlw	9
  1834  000FC6  26F3               	addwf	prodl,f,c
  1835  000FC8  0E00               	movlw	0
  1836  000FCA  22F4               	addwfc	prodh,f,c
  1837  000FCC  0E60               	movlw	low _doors
  1838  000FCE  24F3               	addwf	prodl,w,c
  1839  000FD0  6ED9               	movwf	fsr2l,c
  1840  000FD2  0E00               	movlw	high _doors
  1841  000FD4  20F4               	addwfc	prodh,w,c
  1842  000FD6  6EDA               	movwf	fsr2h,c
  1843  000FD8  29CB               	incf	C_DOOR_Init@d& (0+255),w,b
  1844  000FDA  6EDF               	movwf	indf2,c
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1848  000FDC  C0CB  F0C7         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1849  000FE0  0E01               	movlw	1
  1850  000FE2  6FC8               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1851  000FE4  2BC7               	incf	??_C_DOOR_Init& (0+255),f,b
  1852  000FE6  D002               	goto	u1684
  1853  000FE8                     u1685:
  1854  000FE8  90D8               	bcf	status,0,c
  1855  000FEA  37C8               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1856  000FEC                     u1684:
  1857  000FEC  2FC7               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1858  000FEE  D7FC               	goto	u1685
  1859  000FF0  0100               	movlb	0	; () banked
  1860  000FF2  51C8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1861  000FF4  1493               	andwf	3987,w,c	;volatile
  1862  000FF6  1A93               	xorwf	3987,f,c	;volatile
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1866  000FF8  5092               	movf	3986,w,c	;volatile
  1867  000FFA  0AFF               	xorlw	255
  1868  000FFC  6FC7               	movwf	??_C_DOOR_Init& (0+255),b
  1869  000FFE  C0CB  F0C8         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1870  001002  0E01               	movlw	1
  1871  001004  27C8               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1872  001006  0E01               	movlw	1
  1873  001008  6FC9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1874  00100A  2BC8               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1875  00100C  D002               	goto	u1694
  1876  00100E                     u1695:
  1877  00100E  90D8               	bcf	status,0,c
  1878  001010  37C9               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1879  001012                     u1694:
  1880  001012  2FC8               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1881  001014  D7FC               	goto	u1695
  1882  001016  0100               	movlb	0	; () banked
  1883  001018  51C9               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1884  00101A  15C7               	andwf	??_C_DOOR_Init& (0+255),w,b
  1885  00101C  1A92               	xorwf	3986,f,c	;volatile
  1886                           
  1887                           ; BSR set to: 0
  1888  00101E  2BCB               	incf	C_DOOR_Init@d& (0+255),f,b
  1889  001020                     l24:
  1890                           
  1891                           ; BSR set to: 0
  1892                           
  1893                           ; BSR set to: 0
  1894  001020  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1895  001022  6FC7               	movwf	??_C_DOOR_Init& (0+255),b
  1896  001024  6BC8               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1897  001026  5037               	movf	_door_cnt,w,c
  1898  001028  5DC7               	subwf	??_C_DOOR_Init& (0+255),w,b
  1899  00102A  51C8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1900  00102C  0A80               	xorlw	128
  1901  00102E  6FC9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1902  001030  5038               	movf	_door_cnt+1,w,c
  1903  001032  0A80               	xorlw	128
  1904  001034  59C9               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1905  001036  B0D8               	btfsc	status,0,c
  1906  001038  0012               	return	
  1907  00103A  D760               	goto	l25
  1908  00103C                     __end_of_C_DOOR_Init:
  1909                           	opt stack 0
  1910                           tblptru	equ	0xFF8
  1911                           tblptrh	equ	0xFF7
  1912                           tblptrl	equ	0xFF6
  1913                           tablat	equ	0xFF5
  1914                           prodh	equ	0xFF4
  1915                           prodl	equ	0xFF3
  1916                           postinc0	equ	0xFEE
  1917                           plusw0	equ	0xFEB
  1918                           wreg	equ	0xFE8
  1919                           postdec1	equ	0xFE5
  1920                           fsr1l	equ	0xFE1
  1921                           indf2	equ	0xFDF
  1922                           postinc2	equ	0xFDE
  1923                           postdec2	equ	0xFDD
  1924                           plusw2	equ	0xFDB
  1925                           fsr2h	equ	0xFDA
  1926                           fsr2l	equ	0xFD9
  1927                           status	equ	0xFD8
  1928                           
  1929 ;; *************** function _D_UART_WriteInt *****************
  1930 ;; Defined at:
  1931 ;;		line 220 in file "Drivers/UART_Driver.c"
  1932 ;; Parameters:    Size  Location     Type
  1933 ;;  command         2   26[BANK0 ] PTR const unsigned char 
  1934 ;;		 -> STR_17(2), 
  1935 ;;  d               2   28[BANK0 ] int 
  1936 ;; Auto vars:     Size  Location     Type
  1937 ;;		None
  1938 ;; Return value:  Size  Location     Type
  1939 ;;                  1    wreg      void 
  1940 ;; Registers used:
  1941 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1942 ;; Tracked objects:
  1943 ;;		On entry : 0/0
  1944 ;;		On exit  : 0/0
  1945 ;;		Unchanged: 0/0
  1946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1947 ;;      Params:         0       4       0       0       0       0       0       0       0
  1948 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1949 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1950 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1951 ;;Total ram usage:        5 bytes
  1952 ;; Hardware stack levels used:    1
  1953 ;; Hardware stack levels required when called:    5
  1954 ;; This function calls:
  1955 ;;		_printf
  1956 ;; This function is called by:
  1957 ;;		_main
  1958 ;; This function uses a non-reentrant model
  1959 ;;
  1960                           
  1961                           	psect	text6
  1962  00120A                     __ptext6:
  1963                           	opt stack 0
  1964  00120A                     _D_UART_WriteInt:
  1965                           	opt stack 25
  1966                           
  1967                           ;UART_Driver.c: 221: printf(startCharacter);
  1968                           
  1969                           ; BSR set to: 0
  1970                           ;incstack = 0
  1971  00120A  C0F7  F0D3         	movff	_startCharacter,printf@f
  1972  00120E  C0F8  F0D4         	movff	_startCharacter+1,printf@f+1
  1973  001212  0100               	movlb	0	; () banked
  1974  001214  51D3               	movf	printf@f& (0+255),w,b
  1975  001216  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  1976  001218  A4D8               	btfss	status,2,c
  1977  00121A  0E00               	movlw	low (__mediumconst shr (0+16))
  1978  00121C  6FD5               	movwf	(printf@f+2)& (0+255),b
  1979  00121E  EC84  F005         	call	_printf	;wreg free
  1980                           
  1981                           ;UART_Driver.c: 223: printf(messageCharacter);
  1982  001222  C0F3  F0D3         	movff	_messageCharacter,printf@f
  1983  001226  C0F4  F0D4         	movff	_messageCharacter+1,printf@f+1
  1984  00122A  0100               	movlb	0	; () banked
  1985  00122C  51D3               	movf	printf@f& (0+255),w,b
  1986  00122E  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  1987  001230  A4D8               	btfss	status,2,c
  1988  001232  0E00               	movlw	low (__mediumconst shr (0+16))
  1989  001234  6FD5               	movwf	(printf@f+2)& (0+255),b
  1990  001236  EC84  F005         	call	_printf	;wreg free
  1991                           
  1992                           ;UART_Driver.c: 224: printf(deviceName);
  1993  00123A  C0C4  F0D3         	movff	_deviceName,printf@f
  1994  00123E  C0C5  F0D4         	movff	_deviceName+1,printf@f+1
  1995  001242  C0C6  F0D5         	movff	_deviceName+2,printf@f+2
  1996  001246  EC84  F005         	call	_printf	;wreg free
  1997                           
  1998                           ;UART_Driver.c: 226: printf(":");printf(command);
  1999  00124A  0E46               	movlw	low STR_5
  2000  00124C  0100               	movlb	0	; () banked
  2001  00124E  6FD3               	movwf	printf@f& (0+255),b
  2002  001250  0E08               	movlw	high STR_5
  2003  001252  6FD4               	movwf	(printf@f+1)& (0+255),b
  2004  001254  51D3               	movf	printf@f& (0+255),w,b
  2005  001256  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2006  001258  A4D8               	btfss	status,2,c
  2007  00125A  0E00               	movlw	low (__mediumconst shr (0+16))
  2008  00125C  6FD5               	movwf	(printf@f+2)& (0+255),b
  2009  00125E  EC84  F005         	call	_printf	;wreg free
  2010  001262  C0E1  F0D3         	movff	D_UART_WriteInt@command,printf@f
  2011  001266  C0E2  F0D4         	movff	D_UART_WriteInt@command+1,printf@f+1
  2012  00126A  0100               	movlb	0	; () banked
  2013  00126C  51D3               	movf	printf@f& (0+255),w,b
  2014  00126E  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2015  001270  A4D8               	btfss	status,2,c
  2016  001272  0E00               	movlw	low (__mediumconst shr (0+16))
  2017  001274  6FD5               	movwf	(printf@f+2)& (0+255),b
  2018  001276  EC84  F005         	call	_printf	;wreg free
  2019                           
  2020                           ;UART_Driver.c: 228: printf(":");printf("%d", d);
  2021  00127A  0E46               	movlw	low STR_5
  2022  00127C  0100               	movlb	0	; () banked
  2023  00127E  6FD3               	movwf	printf@f& (0+255),b
  2024  001280  0E08               	movlw	high STR_5
  2025  001282  6FD4               	movwf	(printf@f+1)& (0+255),b
  2026  001284  51D3               	movf	printf@f& (0+255),w,b
  2027  001286  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2028  001288  A4D8               	btfss	status,2,c
  2029  00128A  0E00               	movlw	low (__mediumconst shr (0+16))
  2030  00128C  6FD5               	movwf	(printf@f+2)& (0+255),b
  2031  00128E  EC84  F005         	call	_printf	;wreg free
  2032  001292  0E2C               	movlw	low STR_9
  2033  001294  0100               	movlb	0	; () banked
  2034  001296  6FD3               	movwf	printf@f& (0+255),b
  2035  001298  0E08               	movlw	high STR_9
  2036  00129A  6FD4               	movwf	(printf@f+1)& (0+255),b
  2037  00129C  51D3               	movf	printf@f& (0+255),w,b
  2038  00129E  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2039  0012A0  A4D8               	btfss	status,2,c
  2040  0012A2  0E00               	movlw	low (__mediumconst shr (0+16))
  2041  0012A4  6FD5               	movwf	(printf@f+2)& (0+255),b
  2042  0012A6  C0E3  F0D6         	movff	D_UART_WriteInt@d,?_printf+3
  2043  0012AA  C0E4  F0D7         	movff	D_UART_WriteInt@d+1,?_printf+4
  2044  0012AE  EC84  F005         	call	_printf	;wreg free
  2045                           
  2046                           ;UART_Driver.c: 230: printf(stopCharacter);
  2047  0012B2  C0F5  F0D3         	movff	_stopCharacter,printf@f
  2048  0012B6  C0F6  F0D4         	movff	_stopCharacter+1,printf@f+1
  2049  0012BA  0100               	movlb	0	; () banked
  2050  0012BC  51D3               	movf	printf@f& (0+255),w,b
  2051  0012BE  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2052  0012C0  A4D8               	btfss	status,2,c
  2053  0012C2  0E00               	movlw	low (__mediumconst shr (0+16))
  2054  0012C4  6FD5               	movwf	(printf@f+2)& (0+255),b
  2055  0012C6  EC84  F005         	call	_printf	;wreg free
  2056                           
  2057                           ;UART_Driver.c: 231: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  2058  0012CA  0E06               	movlw	6
  2059  0012CC  0100               	movlb	0	; () banked
  2060  0012CE  6FE5               	movwf	??_D_UART_WriteInt& (0+255),b
  2061  0012D0  0E30               	movlw	48
  2062  0012D2                     u2217:
  2063  0012D2  2EE8               	decfsz	wreg,f,c
  2064  0012D4  D7FE               	bra	u2217
  2065  0012D6  2FE5               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  2066  0012D8  D7FC               	bra	u2217
  2067  0012DA  F000               	nop	
  2068  0012DC  0012               	return		;funcret
  2069  0012DE                     __end_of_D_UART_WriteInt:
  2070                           	opt stack 0
  2071                           tblptru	equ	0xFF8
  2072                           tblptrh	equ	0xFF7
  2073                           tblptrl	equ	0xFF6
  2074                           tablat	equ	0xFF5
  2075                           prodh	equ	0xFF4
  2076                           prodl	equ	0xFF3
  2077                           postinc0	equ	0xFEE
  2078                           plusw0	equ	0xFEB
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1l	equ	0xFE1
  2082                           indf2	equ	0xFDF
  2083                           postinc2	equ	0xFDE
  2084                           postdec2	equ	0xFDD
  2085                           plusw2	equ	0xFDB
  2086                           fsr2h	equ	0xFDA
  2087                           fsr2l	equ	0xFD9
  2088                           status	equ	0xFD8
  2089                           
  2090 ;; *************** function _D_UART_Read *****************
  2091 ;; Defined at:
  2092 ;;		line 234 in file "Drivers/UART_Driver.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;		None
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;		None
  2097 ;; Return value:  Size  Location     Type
  2098 ;;                  7    0[BANK0 ] struct .
  2099 ;; Registers used:
  2100 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  2101 ;; Tracked objects:
  2102 ;;		On entry : 0/0
  2103 ;;		On exit  : 0/0
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2106 ;;      Params:         0       7       0       0       0       0       0       0       0
  2107 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2108 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2109 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2110 ;;Total ram usage:        7 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    3
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_main
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text7
  2121  0018A0                     __ptext7:
  2122                           	opt stack 0
  2123  0018A0                     _D_UART_Read:
  2124                           	opt stack 27
  2125                           
  2126                           ;UART_Driver.c: 235: readData.sender = readBuffer.sender;
  2127                           
  2128                           ;incstack = 0
  2129  0018A0  0E0B               	movlw	low (_readBuffer+11)
  2130  0018A2  6E30               	movwf	_readData,c
  2131  0018A4  0E01               	movlw	high (_readBuffer+11)
  2132  0018A6  6E31               	movwf	_readData+1,c
  2133                           
  2134                           ;UART_Driver.c: 236: readData.command = readBuffer.command;
  2135  0018A8  0E3E               	movlw	low (_readBuffer+62)
  2136  0018AA  6E32               	movwf	_readData+2,c
  2137  0018AC  0E01               	movlw	high (_readBuffer+62)
  2138  0018AE  6E33               	movwf	_readData+3,c
  2139                           
  2140                           ;UART_Driver.c: 237: readData.message = readBuffer.message;
  2141  0018B0  0E71               	movlw	low (_readBuffer+113)
  2142  0018B2  6E34               	movwf	_readData+4,c
  2143  0018B4  0E01               	movlw	high (_readBuffer+113)
  2144  0018B6  6E35               	movwf	_readData+5,c
  2145                           
  2146                           ;UART_Driver.c: 238: readData.ackId = readBuffer.readId;
  2147  0018B8  C1A4  F036         	movff	_readBuffer+164,_readData+6
  2148                           
  2149                           ;UART_Driver.c: 239: return readData;
  2150  0018BC  EE20  F030         	lfsr	2,_readData
  2151  0018C0  EE00  F0C7         	lfsr	0,?_D_UART_Read
  2152  0018C4  0E06               	movlw	6
  2153  0018C6                     u1921:
  2154  0018C6  CFDB FFEB          	movff	plusw2,plusw0
  2155  0018CA  06E8               	decf	wreg,f,c
  2156  0018CC  E2FC               	bc	u1921
  2157  0018CE  0012               	return	
  2158  0018D0                     __end_of_D_UART_Read:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           prodh	equ	0xFF4
  2165                           prodl	equ	0xFF3
  2166                           postinc0	equ	0xFEE
  2167                           plusw0	equ	0xFEB
  2168                           wreg	equ	0xFE8
  2169                           postdec1	equ	0xFE5
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           postinc2	equ	0xFDE
  2173                           postdec2	equ	0xFDD
  2174                           plusw2	equ	0xFDB
  2175                           fsr2h	equ	0xFDA
  2176                           fsr2l	equ	0xFD9
  2177                           status	equ	0xFD8
  2178                           
  2179 ;; *************** function _D_UART_Init *****************
  2180 ;; Defined at:
  2181 ;;		line 166 in file "Drivers/UART_Driver.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  name            2   13[BANK0 ] PTR const unsigned char 
  2184 ;;		 -> STR_11(2), 
  2185 ;;  baud            2   15[BANK0 ] unsigned int 
  2186 ;;  interrupts      1   17[BANK0 ] unsigned char 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;		None
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg, status,2, status,0, cstack
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2198 ;;      Params:         0       5       0       0       0       0       0       0       0
  2199 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2200 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2201 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2202 ;;Total ram usage:        5 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; Hardware stack levels required when called:    4
  2205 ;; This function calls:
  2206 ;;		_D_UART_Enable
  2207 ;;		___lldiv
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text8
  2214  00161E                     __ptext8:
  2215                           	opt stack 0
  2216  00161E                     _D_UART_Init:
  2217                           	opt stack 26
  2218                           
  2219                           ;UART_Driver.c: 168: deviceName = name;
  2220                           
  2221                           ;incstack = 0
  2222  00161E  C0D4  F0C4         	movff	D_UART_Init@name,_deviceName
  2223  001622  C0D5  F0C5         	movff	D_UART_Init@name+1,_deviceName+1
  2224  001626  0100               	movlb	0	; () banked
  2225  001628  51C4               	movf	_deviceName& (0+255),w,b
  2226  00162A  11C5               	iorwf	(_deviceName+1)& (0+255),w,b
  2227  00162C  A4D8               	btfss	status,2,c
  2228  00162E  0E00               	movlw	low (__mediumconst shr (0+16))
  2229  001630  6FC6               	movwf	(_deviceName+2)& (0+255),b
  2230                           
  2231                           ; BSR set to: 0
  2232                           ;UART_Driver.c: 169: readReady = 0;
  2233  001632  0E00               	movlw	0
  2234  001634  6E41               	movwf	_readReady,c
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;UART_Driver.c: 172: D_UART_Enable(0);
  2238  001636  0E00               	movlw	0
  2239  001638  EC93  F00C         	call	_D_UART_Enable
  2240                           
  2241                           ;UART_Driver.c: 175: RCSTAbits.FERR = 0;
  2242  00163C  94AB               	bcf	4011,2,c	;volatile
  2243                           
  2244                           ;UART_Driver.c: 176: RCSTAbits.OERR = 0;
  2245  00163E  92AB               	bcf	4011,1,c	;volatile
  2246                           
  2247                           ;UART_Driver.c: 177: RCREG = 0x00;
  2248  001640  0E00               	movlw	0
  2249  001642  6EAE               	movwf	4014,c	;volatile
  2250                           
  2251                           ;UART_Driver.c: 180: TXSTAbits.TX9 = 0;
  2252  001644  9CAC               	bcf	4012,6,c	;volatile
  2253                           
  2254                           ;UART_Driver.c: 181: TXSTAbits.SYNC = 0;
  2255  001646  98AC               	bcf	4012,4,c	;volatile
  2256                           
  2257                           ;UART_Driver.c: 182: TXSTAbits.BRGH = 0;
  2258  001648  94AC               	bcf	4012,2,c	;volatile
  2259                           
  2260                           ;UART_Driver.c: 185: RCSTAbits.RX9 = 0;
  2261  00164A  9CAB               	bcf	4011,6,c	;volatile
  2262                           
  2263                           ;UART_Driver.c: 188: BAUDCONbits.RXDTP = 1;
  2264  00164C  8AB8               	bsf	4024,5,c	;volatile
  2265                           
  2266                           ;UART_Driver.c: 189: BAUDCONbits.TXCKP = 1;
  2267  00164E  88B8               	bsf	4024,4,c	;volatile
  2268                           
  2269                           ;UART_Driver.c: 190: BAUDCONbits.BRG16 = 0;
  2270  001650  96B8               	bcf	4024,3,c	;volatile
  2271                           
  2272                           ;UART_Driver.c: 193: SPBRG = ((16000000UL/baud)/64)-1;
  2273  001652  0E00               	movlw	0
  2274  001654  0100               	movlb	0	; () banked
  2275  001656  6FC7               	movwf	___lldiv@dividend& (0+255),b
  2276  001658  0E24               	movlw	36
  2277  00165A  6FC8               	movwf	(___lldiv@dividend+1)& (0+255),b
  2278  00165C  0EF4               	movlw	244
  2279  00165E  6FC9               	movwf	(___lldiv@dividend+2)& (0+255),b
  2280  001660  0E00               	movlw	0
  2281  001662  6FCA               	movwf	(___lldiv@dividend+3)& (0+255),b
  2282  001664  C0D6  F0CB         	movff	D_UART_Init@baud,___lldiv@divisor
  2283  001668  C0D7  F0CC         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  2284  00166C  6BCD               	clrf	(___lldiv@divisor+2)& (0+255),b
  2285  00166E  6BCE               	clrf	(___lldiv@divisor+3)& (0+255),b
  2286  001670  ECCD  F00A         	call	___lldiv	;wreg free
  2287  001674  0E07               	movlw	7
  2288  001676  D006               	goto	u1900
  2289  001678                     u1905:
  2290  001678  0100               	movlb	0	; () banked
  2291  00167A  90D8               	bcf	status,0,c
  2292  00167C  33CA               	rrcf	(?___lldiv+3)& (0+255),f,b
  2293  00167E  33C9               	rrcf	(?___lldiv+2)& (0+255),f,b
  2294  001680  33C8               	rrcf	(?___lldiv+1)& (0+255),f,b
  2295  001682  33C7               	rrcf	?___lldiv& (0+255),f,b
  2296  001684                     u1900:
  2297  001684  2EE8               	decfsz	wreg,f,c
  2298  001686  D7F8               	goto	u1905
  2299  001688  05C7               	decf	?___lldiv& (0+255),w,b
  2300  00168A  6EAF               	movwf	4015,c	;volatile
  2301                           
  2302                           ;UART_Driver.c: 196: if (interrupts) {
  2303  00168C  51D8               	movf	D_UART_Init@interrupts& (0+255),w,b
  2304  00168E  B4D8               	btfsc	status,2,c
  2305  001690  0012               	return	
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;UART_Driver.c: 197: RCONbits.IPEN = 1;
  2309  001692  8ED0               	bsf	4048,7,c	;volatile
  2310                           
  2311                           ;UART_Driver.c: 198: INTCONbits.GIEH = 1;
  2312  001694  8EF2               	bsf	intcon,7,c	;volatile
  2313                           
  2314                           ;UART_Driver.c: 199: INTCONbits.GIEL = 1;
  2315  001696  8CF2               	bsf	intcon,6,c	;volatile
  2316                           
  2317                           ;UART_Driver.c: 200: PIR1bits.RCIF = 0;
  2318  001698  9A9E               	bcf	3998,5,c	;volatile
  2319                           
  2320                           ;UART_Driver.c: 201: IPR1bits.RCIP = 1;
  2321  00169A  8A9F               	bsf	3999,5,c	;volatile
  2322                           
  2323                           ;UART_Driver.c: 202: PIE1bits.RCIE = 1;
  2324  00169C  8A9D               	bsf	3997,5,c	;volatile
  2325  00169E  0012               	return	
  2326  0016A0                     __end_of_D_UART_Init:
  2327                           	opt stack 0
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           prodh	equ	0xFF4
  2333                           prodl	equ	0xFF3
  2334                           intcon	equ	0xFF2
  2335                           postinc0	equ	0xFEE
  2336                           plusw0	equ	0xFEB
  2337                           wreg	equ	0xFE8
  2338                           postdec1	equ	0xFE5
  2339                           fsr1l	equ	0xFE1
  2340                           indf2	equ	0xFDF
  2341                           postinc2	equ	0xFDE
  2342                           postdec2	equ	0xFDD
  2343                           plusw2	equ	0xFDB
  2344                           fsr2h	equ	0xFDA
  2345                           fsr2l	equ	0xFD9
  2346                           status	equ	0xFD8
  2347                           
  2348 ;; *************** function ___lldiv *****************
  2349 ;; Defined at:
  2350 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;  dividend        4    0[BANK0 ] unsigned long 
  2353 ;;  divisor         4    4[BANK0 ] unsigned long 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  quotient        4    8[BANK0 ] unsigned long 
  2356 ;;  counter         1   12[BANK0 ] unsigned char 
  2357 ;; Return value:  Size  Location     Type
  2358 ;;                  4    0[BANK0 ] unsigned long 
  2359 ;; Registers used:
  2360 ;;		wreg, status,2, status,0
  2361 ;; Tracked objects:
  2362 ;;		On entry : 0/0
  2363 ;;		On exit  : 0/0
  2364 ;;		Unchanged: 0/0
  2365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2366 ;;      Params:         0       8       0       0       0       0       0       0       0
  2367 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2369 ;;      Totals:         0      13       0       0       0       0       0       0       0
  2370 ;;Total ram usage:       13 bytes
  2371 ;; Hardware stack levels used:    1
  2372 ;; Hardware stack levels required when called:    3
  2373 ;; This function calls:
  2374 ;;		Nothing
  2375 ;; This function is called by:
  2376 ;;		_D_UART_Init
  2377 ;; This function uses a non-reentrant model
  2378 ;;
  2379                           
  2380                           	psect	text9
  2381  00159A                     __ptext9:
  2382                           	opt stack 0
  2383  00159A                     ___lldiv:
  2384                           	opt stack 26
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;incstack = 0
  2388  00159A  0E00               	movlw	0
  2389  00159C  0100               	movlb	0	; () banked
  2390  00159E  6FCF               	movwf	___lldiv@quotient& (0+255),b
  2391  0015A0  0E00               	movlw	0
  2392  0015A2  6FD0               	movwf	(___lldiv@quotient+1)& (0+255),b
  2393  0015A4  0E00               	movlw	0
  2394  0015A6  6FD1               	movwf	(___lldiv@quotient+2)& (0+255),b
  2395  0015A8  0E00               	movlw	0
  2396  0015AA  6FD2               	movwf	(___lldiv@quotient+3)& (0+255),b
  2397                           
  2398                           ; BSR set to: 0
  2399  0015AC  51CB               	movf	___lldiv@divisor& (0+255),w,b
  2400  0015AE  11CC               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2401  0015B0  11CD               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2402  0015B2  11CE               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2403  0015B4  B4D8               	btfsc	status,2,c
  2404  0015B6  D02A               	goto	l771
  2405                           
  2406                           ; BSR set to: 0
  2407  0015B8  0E01               	movlw	1
  2408  0015BA  6FD3               	movwf	___lldiv@counter& (0+255),b
  2409  0015BC  D006               	goto	l766
  2410  0015BE                     
  2411                           ; BSR set to: 0
  2412                           
  2413                           ; BSR set to: 0
  2414  0015BE  90D8               	bcf	status,0,c
  2415  0015C0  37CB               	rlcf	___lldiv@divisor& (0+255),f,b
  2416  0015C2  37CC               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2417  0015C4  37CD               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2418  0015C6  37CE               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2419  0015C8  2BD3               	incf	___lldiv@counter& (0+255),f,b
  2420  0015CA                     l766:
  2421                           
  2422                           ; BSR set to: 0
  2423                           
  2424                           ; BSR set to: 0
  2425  0015CA  AFCE               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2426  0015CC  D7F8               	goto	l767
  2427  0015CE                     u1790:
  2428                           
  2429                           ; BSR set to: 0
  2430                           
  2431                           ; BSR set to: 0
  2432                           
  2433                           ; BSR set to: 0
  2434  0015CE  90D8               	bcf	status,0,c
  2435  0015D0  37CF               	rlcf	___lldiv@quotient& (0+255),f,b
  2436  0015D2  37D0               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2437  0015D4  37D1               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2438  0015D6  37D2               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2439                           
  2440                           ; BSR set to: 0
  2441  0015D8  51CB               	movf	___lldiv@divisor& (0+255),w,b
  2442  0015DA  5DC7               	subwf	___lldiv@dividend& (0+255),w,b
  2443  0015DC  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2444  0015DE  59C8               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2445  0015E0  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2446  0015E2  59C9               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2447  0015E4  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2448  0015E6  59CA               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2449  0015E8  A0D8               	btfss	status,0,c
  2450  0015EA  D009               	goto	l770
  2451                           
  2452                           ; BSR set to: 0
  2453  0015EC  51CB               	movf	___lldiv@divisor& (0+255),w,b
  2454  0015EE  5FC7               	subwf	___lldiv@dividend& (0+255),f,b
  2455  0015F0  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2456  0015F2  5BC8               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2457  0015F4  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2458  0015F6  5BC9               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2459  0015F8  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2460  0015FA  5BCA               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2461                           
  2462                           ; BSR set to: 0
  2463  0015FC  81CF               	bsf	___lldiv@quotient& (0+255),0,b
  2464  0015FE                     l770:
  2465                           
  2466                           ; BSR set to: 0
  2467                           
  2468                           ; BSR set to: 0
  2469  0015FE  90D8               	bcf	status,0,c
  2470  001600  33CE               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2471  001602  33CD               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2472  001604  33CC               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2473  001606  33CB               	rrcf	___lldiv@divisor& (0+255),f,b
  2474                           
  2475                           ; BSR set to: 0
  2476  001608  2FD3               	decfsz	___lldiv@counter& (0+255),f,b
  2477  00160A  D7E1               	goto	u1790
  2478  00160C                     l771:
  2479                           
  2480                           ; BSR set to: 0
  2481                           
  2482                           ; BSR set to: 0
  2483  00160C  C0CF  F0C7         	movff	___lldiv@quotient,?___lldiv
  2484  001610  C0D0  F0C8         	movff	___lldiv@quotient+1,?___lldiv+1
  2485  001614  C0D1  F0C9         	movff	___lldiv@quotient+2,?___lldiv+2
  2486  001618  C0D2  F0CA         	movff	___lldiv@quotient+3,?___lldiv+3
  2487                           
  2488                           ; BSR set to: 0
  2489  00161C  0012               	return		;funcret
  2490  00161E                     __end_of___lldiv:
  2491                           	opt stack 0
  2492                           tblptru	equ	0xFF8
  2493                           tblptrh	equ	0xFF7
  2494                           tblptrl	equ	0xFF6
  2495                           tablat	equ	0xFF5
  2496                           prodh	equ	0xFF4
  2497                           prodl	equ	0xFF3
  2498                           intcon	equ	0xFF2
  2499                           postinc0	equ	0xFEE
  2500                           plusw0	equ	0xFEB
  2501                           wreg	equ	0xFE8
  2502                           postdec1	equ	0xFE5
  2503                           fsr1l	equ	0xFE1
  2504                           indf2	equ	0xFDF
  2505                           postinc2	equ	0xFDE
  2506                           postdec2	equ	0xFDD
  2507                           plusw2	equ	0xFDB
  2508                           fsr2h	equ	0xFDA
  2509                           fsr2l	equ	0xFD9
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _D_UART_Enable *****************
  2513 ;; Defined at:
  2514 ;;		line 242 in file "Drivers/UART_Driver.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;  enable          1    wreg     unsigned char 
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  enable          1    0[BANK0 ] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2528 ;;      Params:         0       0       0       0       0       0       0       0       0
  2529 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2531 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2532 ;;Total ram usage:        1 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    3
  2535 ;; This function calls:
  2536 ;;		Nothing
  2537 ;; This function is called by:
  2538 ;;		_D_UART_Init
  2539 ;;		_main
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           	psect	text10
  2544  001926                     __ptext10:
  2545                           	opt stack 0
  2546  001926                     _D_UART_Enable:
  2547                           	opt stack 26
  2548                           
  2549                           ; BSR set to: 0
  2550                           ;incstack = 0
  2551                           ;D_UART_Enable@enable stored from wreg
  2552  001926  0100               	movlb	0	; () banked
  2553  001928  6FC7               	movwf	D_UART_Enable@enable& (0+255),b
  2554                           
  2555                           ;UART_Driver.c: 243: if(enable) {
  2556  00192A  0100               	movlb	0	; () banked
  2557  00192C  51C7               	movf	D_UART_Enable@enable& (0+255),w,b
  2558  00192E  B4D8               	btfsc	status,2,c
  2559  001930  D006               	goto	l161
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;UART_Driver.c: 244: TRISCbits.TRISC7 = 0;
  2563  001932  9E94               	bcf	3988,7,c	;volatile
  2564                           
  2565                           ;UART_Driver.c: 245: TRISCbits.TRISC6 = 1;
  2566  001934  8C94               	bsf	3988,6,c	;volatile
  2567                           
  2568                           ;UART_Driver.c: 246: TXSTAbits.TXEN = 1;
  2569  001936  8AAC               	bsf	4012,5,c	;volatile
  2570                           
  2571                           ;UART_Driver.c: 247: RCSTAbits.CREN = 1;
  2572  001938  88AB               	bsf	4011,4,c	;volatile
  2573                           
  2574                           ;UART_Driver.c: 248: RCSTAbits.SPEN = 1;
  2575  00193A  8EAB               	bsf	4011,7,c	;volatile
  2576                           
  2577                           ;UART_Driver.c: 249: } else {
  2578  00193C  0012               	return	
  2579  00193E                     l161:
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;UART_Driver.c: 250: TRISCbits.TRISC7 = 0;
  2583  00193E  9E94               	bcf	3988,7,c	;volatile
  2584                           
  2585                           ;UART_Driver.c: 251: TRISCbits.TRISC6 = 0;
  2586  001940  9C94               	bcf	3988,6,c	;volatile
  2587                           
  2588                           ;UART_Driver.c: 252: TXSTAbits.TXEN = 0;
  2589  001942  9AAC               	bcf	4012,5,c	;volatile
  2590                           
  2591                           ;UART_Driver.c: 253: RCSTAbits.CREN = 0;
  2592  001944  98AB               	bcf	4011,4,c	;volatile
  2593                           
  2594                           ;UART_Driver.c: 254: RCSTAbits.SPEN = 0;
  2595  001946  9EAB               	bcf	4011,7,c	;volatile
  2596  001948  0012               	return	
  2597  00194A                     __end_of_D_UART_Enable:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           prodh	equ	0xFF4
  2604                           prodl	equ	0xFF3
  2605                           intcon	equ	0xFF2
  2606                           postinc0	equ	0xFEE
  2607                           plusw0	equ	0xFEB
  2608                           wreg	equ	0xFE8
  2609                           postdec1	equ	0xFE5
  2610                           fsr1l	equ	0xFE1
  2611                           indf2	equ	0xFDF
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           plusw2	equ	0xFDB
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _D_UART_Acknowledge *****************
  2620 ;; Defined at:
  2621 ;;		line 289 in file "Drivers/UART_Driver.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  i               1    wreg     unsigned char 
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;  i               1   26[BANK0 ] unsigned char 
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2635 ;;      Params:         0       0       0       0       0       0       0       0       0
  2636 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2638 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2639 ;;Total ram usage:        1 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    5
  2642 ;; This function calls:
  2643 ;;		_printf
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text11
  2650  0016A0                     __ptext11:
  2651                           	opt stack 0
  2652  0016A0                     _D_UART_Acknowledge:
  2653                           	opt stack 25
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;incstack = 0
  2657                           ;D_UART_Acknowledge@i stored from wreg
  2658  0016A0  0100               	movlb	0	; () banked
  2659  0016A2  6FE1               	movwf	D_UART_Acknowledge@i& (0+255),b
  2660                           
  2661                           ;UART_Driver.c: 290: printf(startCharacter);
  2662  0016A4  C0F7  F0D3         	movff	_startCharacter,printf@f
  2663  0016A8  C0F8  F0D4         	movff	_startCharacter+1,printf@f+1
  2664  0016AC  0100               	movlb	0	; () banked
  2665  0016AE  51D3               	movf	printf@f& (0+255),w,b
  2666  0016B0  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2667  0016B2  A4D8               	btfss	status,2,c
  2668  0016B4  0E00               	movlw	low (__mediumconst shr (0+16))
  2669  0016B6  6FD5               	movwf	(printf@f+2)& (0+255),b
  2670  0016B8  EC84  F005         	call	_printf	;wreg free
  2671                           
  2672                           ;UART_Driver.c: 292: printf(ackCharacter);
  2673  0016BC  C0F1  F0D3         	movff	_ackCharacter,printf@f
  2674  0016C0  C0F2  F0D4         	movff	_ackCharacter+1,printf@f+1
  2675  0016C4  0100               	movlb	0	; () banked
  2676  0016C6  51D3               	movf	printf@f& (0+255),w,b
  2677  0016C8  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2678  0016CA  A4D8               	btfss	status,2,c
  2679  0016CC  0E00               	movlw	low (__mediumconst shr (0+16))
  2680  0016CE  6FD5               	movwf	(printf@f+2)& (0+255),b
  2681  0016D0  EC84  F005         	call	_printf	;wreg free
  2682                           
  2683                           ;UART_Driver.c: 294: printf("%x", i);
  2684  0016D4  0E2F               	movlw	low STR_10
  2685  0016D6  0100               	movlb	0	; () banked
  2686  0016D8  6FD3               	movwf	printf@f& (0+255),b
  2687  0016DA  0E08               	movlw	high STR_10
  2688  0016DC  6FD4               	movwf	(printf@f+1)& (0+255),b
  2689  0016DE  51D3               	movf	printf@f& (0+255),w,b
  2690  0016E0  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2691  0016E2  A4D8               	btfss	status,2,c
  2692  0016E4  0E00               	movlw	low (__mediumconst shr (0+16))
  2693  0016E6  6FD5               	movwf	(printf@f+2)& (0+255),b
  2694  0016E8  C0E1  F0D6         	movff	D_UART_Acknowledge@i,?_printf+3
  2695  0016EC  6BD7               	clrf	(?_printf+4)& (0+255),b
  2696  0016EE  EC84  F005         	call	_printf	;wreg free
  2697                           
  2698                           ;UART_Driver.c: 296: printf(stopCharacter);
  2699  0016F2  C0F5  F0D3         	movff	_stopCharacter,printf@f
  2700  0016F6  C0F6  F0D4         	movff	_stopCharacter+1,printf@f+1
  2701  0016FA  0100               	movlb	0	; () banked
  2702  0016FC  51D3               	movf	printf@f& (0+255),w,b
  2703  0016FE  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2704  001700  A4D8               	btfss	status,2,c
  2705  001702  0E00               	movlw	low (__mediumconst shr (0+16))
  2706  001704  6FD5               	movwf	(printf@f+2)& (0+255),b
  2707  001706  EC84  F005         	call	_printf	;wreg free
  2708  00170A  0012               	return		;funcret
  2709  00170C                     __end_of_D_UART_Acknowledge:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           intcon	equ	0xFF2
  2718                           postinc0	equ	0xFEE
  2719                           plusw0	equ	0xFEB
  2720                           wreg	equ	0xFE8
  2721                           postdec1	equ	0xFE5
  2722                           fsr1l	equ	0xFE1
  2723                           indf2	equ	0xFDF
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           plusw2	equ	0xFDB
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _D_TMR1_Init *****************
  2732 ;; Defined at:
  2733 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;		None
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0
  2748 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2749 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2750 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2751 ;;Total ram usage:        0 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    4
  2754 ;; This function calls:
  2755 ;;		_D_TMR1_Enable
  2756 ;; This function is called by:
  2757 ;;		_main
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text12
  2762  001990                     __ptext12:
  2763                           	opt stack 0
  2764  001990                     _D_TMR1_Init:
  2765                           	opt stack 26
  2766                           
  2767                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  2768                           
  2769                           ;incstack = 0
  2770  001990  0E00               	movlw	0
  2771  001992  ECF6  F00C         	call	_D_TMR1_Enable
  2772                           
  2773                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  2774  001996  8ECD               	bsf	4045,7,c	;volatile
  2775                           
  2776                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  2777  001998  9CCD               	bcf	4045,6,c	;volatile
  2778                           
  2779                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  2780  00199A  0ECF               	movlw	-49
  2781  00199C  16CD               	andwf	4045,f,c	;volatile
  2782                           
  2783                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  2784  00199E  96CD               	bcf	4045,3,c	;volatile
  2785                           
  2786                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  2787  0019A0  92CD               	bcf	4045,1,c	;volatile
  2788                           
  2789                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  2790  0019A2  8ED0               	bsf	4048,7,c	;volatile
  2791                           
  2792                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  2793  0019A4  8EF2               	bsf	intcon,7,c	;volatile
  2794                           
  2795                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  2796  0019A6  8CF2               	bsf	intcon,6,c	;volatile
  2797                           
  2798                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  2799  0019A8  909E               	bcf	3998,0,c	;volatile
  2800                           
  2801                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  2802  0019AA  909F               	bcf	3999,0,c	;volatile
  2803                           
  2804                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  2805  0019AC  809D               	bsf	3997,0,c	;volatile
  2806  0019AE  0012               	return		;funcret
  2807  0019B0                     __end_of_D_TMR1_Init:
  2808                           	opt stack 0
  2809                           tblptru	equ	0xFF8
  2810                           tblptrh	equ	0xFF7
  2811                           tblptrl	equ	0xFF6
  2812                           tablat	equ	0xFF5
  2813                           prodh	equ	0xFF4
  2814                           prodl	equ	0xFF3
  2815                           intcon	equ	0xFF2
  2816                           postinc0	equ	0xFEE
  2817                           plusw0	equ	0xFEB
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1l	equ	0xFE1
  2821                           indf2	equ	0xFDF
  2822                           postinc2	equ	0xFDE
  2823                           postdec2	equ	0xFDD
  2824                           plusw2	equ	0xFDB
  2825                           fsr2h	equ	0xFDA
  2826                           fsr2l	equ	0xFD9
  2827                           status	equ	0xFD8
  2828                           
  2829 ;; *************** function _D_TMR1_Enable *****************
  2830 ;; Defined at:
  2831 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  enable          1    wreg     unsigned char 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  enable          1    0[BANK0 ] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, status,2
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2845 ;;      Params:         0       0       0       0       0       0       0       0       0
  2846 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2848 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2849 ;;Total ram usage:        1 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    3
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_D_TMR1_Init
  2856 ;;		_main
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text13
  2861  0019EC                     __ptext13:
  2862                           	opt stack 0
  2863  0019EC                     _D_TMR1_Enable:
  2864                           	opt stack 26
  2865                           
  2866                           ;incstack = 0
  2867                           ;D_TMR1_Enable@enable stored from wreg
  2868  0019EC  0100               	movlb	0	; () banked
  2869  0019EE  6FC7               	movwf	D_TMR1_Enable@enable& (0+255),b
  2870                           
  2871                           ;TMR1_Driver.c: 53: if (enable) {
  2872  0019F0  0100               	movlb	0	; () banked
  2873  0019F2  51C7               	movf	D_TMR1_Enable@enable& (0+255),w,b
  2874  0019F4  B4D8               	btfsc	status,2,c
  2875  0019F6  D002               	goto	l239
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  2879  0019F8  80CD               	bsf	4045,0,c	;volatile
  2880                           
  2881                           ;TMR1_Driver.c: 55: } else {
  2882  0019FA  0012               	return	
  2883  0019FC                     l239:
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  2887  0019FC  90CD               	bcf	4045,0,c	;volatile
  2888  0019FE  0012               	return	
  2889  001A00                     __end_of_D_TMR1_Enable:
  2890                           	opt stack 0
  2891                           tblptru	equ	0xFF8
  2892                           tblptrh	equ	0xFF7
  2893                           tblptrl	equ	0xFF6
  2894                           tablat	equ	0xFF5
  2895                           prodh	equ	0xFF4
  2896                           prodl	equ	0xFF3
  2897                           intcon	equ	0xFF2
  2898                           postinc0	equ	0xFEE
  2899                           plusw0	equ	0xFEB
  2900                           wreg	equ	0xFE8
  2901                           postdec1	equ	0xFE5
  2902                           fsr1l	equ	0xFE1
  2903                           indf2	equ	0xFDF
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           plusw2	equ	0xFDB
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function _D_TMR0_Init *****************
  2912 ;; Defined at:
  2913 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;		None
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;		None
  2918 ;; Return value:  Size  Location     Type
  2919 ;;                  1    wreg      void 
  2920 ;; Registers used:
  2921 ;;		wreg, status,2, cstack
  2922 ;; Tracked objects:
  2923 ;;		On entry : 0/0
  2924 ;;		On exit  : 0/0
  2925 ;;		Unchanged: 0/0
  2926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2927 ;;      Params:         0       0       0       0       0       0       0       0       0
  2928 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2929 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2930 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2931 ;;Total ram usage:        0 bytes
  2932 ;; Hardware stack levels used:    1
  2933 ;; Hardware stack levels required when called:    4
  2934 ;; This function calls:
  2935 ;;		_D_TMR0_Enable
  2936 ;; This function is called by:
  2937 ;;		_main
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text14
  2942  00194A                     __ptext14:
  2943                           	opt stack 0
  2944  00194A                     _D_TMR0_Init:
  2945                           	opt stack 26
  2946                           
  2947                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;incstack = 0
  2951  00194A  0E00               	movlw	0
  2952  00194C  EC00  F00D         	call	_D_TMR0_Enable
  2953                           
  2954                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2955  001950  9CD5               	bcf	4053,6,c	;volatile
  2956                           
  2957                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2958  001952  9AD5               	bcf	4053,5,c	;volatile
  2959                           
  2960                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2961  001954  98D5               	bcf	4053,4,c	;volatile
  2962                           
  2963                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2964  001956  96D5               	bcf	4053,3,c	;volatile
  2965                           
  2966                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2967  001958  50D5               	movf	4053,w,c	;volatile
  2968  00195A  0BF8               	andlw	-8
  2969  00195C  0902               	iorlw	2
  2970  00195E  6ED5               	movwf	4053,c	;volatile
  2971                           
  2972                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2973  001960  8ED0               	bsf	4048,7,c	;volatile
  2974                           
  2975                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2976  001962  8EF2               	bsf	intcon,7,c	;volatile
  2977                           
  2978                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2979  001964  8CF2               	bsf	intcon,6,c	;volatile
  2980                           
  2981                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2982  001966  94F2               	bcf	intcon,2,c	;volatile
  2983                           
  2984                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  2985  001968  94F1               	bcf	intcon2,2,c	;volatile
  2986                           
  2987                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2988  00196A  8AF2               	bsf	intcon,5,c	;volatile
  2989  00196C  0012               	return		;funcret
  2990  00196E                     __end_of_D_TMR0_Init:
  2991                           	opt stack 0
  2992                           tblptru	equ	0xFF8
  2993                           tblptrh	equ	0xFF7
  2994                           tblptrl	equ	0xFF6
  2995                           tablat	equ	0xFF5
  2996                           prodh	equ	0xFF4
  2997                           prodl	equ	0xFF3
  2998                           intcon	equ	0xFF2
  2999                           intcon2	equ	0xFF1
  3000                           postinc0	equ	0xFEE
  3001                           plusw0	equ	0xFEB
  3002                           wreg	equ	0xFE8
  3003                           postdec1	equ	0xFE5
  3004                           fsr1l	equ	0xFE1
  3005                           indf2	equ	0xFDF
  3006                           postinc2	equ	0xFDE
  3007                           postdec2	equ	0xFDD
  3008                           plusw2	equ	0xFDB
  3009                           fsr2h	equ	0xFDA
  3010                           fsr2l	equ	0xFD9
  3011                           status	equ	0xFD8
  3012                           
  3013 ;; *************** function _D_TMR0_Enable *****************
  3014 ;; Defined at:
  3015 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;  enable          1    wreg     unsigned char 
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  enable          1    0[BANK0 ] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      void 
  3022 ;; Registers used:
  3023 ;;		wreg, status,2
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3029 ;;      Params:         0       0       0       0       0       0       0       0       0
  3030 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3031 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3032 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3033 ;;Total ram usage:        1 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    3
  3036 ;; This function calls:
  3037 ;;		Nothing
  3038 ;; This function is called by:
  3039 ;;		_D_TMR0_Init
  3040 ;;		_initDoors
  3041 ;; This function uses a non-reentrant model
  3042 ;;
  3043                           
  3044                           	psect	text15
  3045  001A00                     __ptext15:
  3046                           	opt stack 0
  3047  001A00                     _D_TMR0_Enable:
  3048                           	opt stack 26
  3049                           
  3050                           ;incstack = 0
  3051                           ;D_TMR0_Enable@enable stored from wreg
  3052  001A00  0100               	movlb	0	; () banked
  3053  001A02  6FC7               	movwf	D_TMR0_Enable@enable& (0+255),b
  3054                           
  3055                           ;TMR0_Driver.c: 54: if (enable) {
  3056  001A04  0100               	movlb	0	; () banked
  3057  001A06  51C7               	movf	D_TMR0_Enable@enable& (0+255),w,b
  3058  001A08  B4D8               	btfsc	status,2,c
  3059  001A0A  D002               	goto	l198
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  3063  001A0C  8ED5               	bsf	4053,7,c	;volatile
  3064                           
  3065                           ;TMR0_Driver.c: 56: } else {
  3066  001A0E  0012               	return	
  3067  001A10                     l198:
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  3071  001A10  9ED5               	bcf	4053,7,c	;volatile
  3072  001A12  0012               	return	
  3073  001A14                     __end_of_D_TMR0_Enable:
  3074                           	opt stack 0
  3075                           tblptru	equ	0xFF8
  3076                           tblptrh	equ	0xFF7
  3077                           tblptrl	equ	0xFF6
  3078                           tablat	equ	0xFF5
  3079                           prodh	equ	0xFF4
  3080                           prodl	equ	0xFF3
  3081                           intcon	equ	0xFF2
  3082                           intcon2	equ	0xFF1
  3083                           postinc0	equ	0xFEE
  3084                           plusw0	equ	0xFEB
  3085                           wreg	equ	0xFE8
  3086                           postdec1	equ	0xFE5
  3087                           fsr1l	equ	0xFE1
  3088                           indf2	equ	0xFDF
  3089                           postinc2	equ	0xFDE
  3090                           postdec2	equ	0xFDD
  3091                           plusw2	equ	0xFDB
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _D_PWM_SetPwm *****************
  3097 ;; Defined at:
  3098 ;;		line 44 in file "Drivers/PWM_Driver.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;  pwm             1    wreg     unsigned char 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  pwm             1    0[BANK0 ] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0
  3113 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3115 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3116 ;;Total ram usage:        1 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    3
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_main
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text16
  3127  0018D0                     __ptext16:
  3128                           	opt stack 0
  3129  0018D0                     _D_PWM_SetPwm:
  3130                           	opt stack 27
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;incstack = 0
  3134                           ;D_PWM_SetPwm@pwm stored from wreg
  3135  0018D0  0100               	movlb	0	; () banked
  3136  0018D2  6FC7               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  3137                           
  3138                           ;PWM_Driver.c: 45: if (pwm > 0) {
  3139  0018D4  0100               	movlb	0	; () banked
  3140  0018D6  51C7               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  3141  0018D8  B4D8               	btfsc	status,2,c
  3142  0018DA  D00A               	goto	l216
  3143                           
  3144                           ; BSR set to: 0
  3145                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  3146  0018DC  B4CA               	btfsc	4042,2,c	;volatile
  3147  0018DE  D005               	goto	l217
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  3151  0018E0  50BD               	movf	4029,w,c	;volatile
  3152  0018E2  0BF0               	andlw	-16
  3153  0018E4  090C               	iorlw	12
  3154  0018E6  6EBD               	movwf	4029,c	;volatile
  3155                           
  3156                           ; BSR set to: 0
  3157                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  3158  0018E8  84CA               	bsf	4042,2,c	;volatile
  3159  0018EA                     l217:
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;PWM_Driver.c: 49: }
  3163                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  3164                           
  3165                           ; BSR set to: 0
  3166  0018EA  C0C7  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  3167                           
  3168                           ;PWM_Driver.c: 51: } else {
  3169  0018EE  0012               	return	
  3170  0018F0                     l216:
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  3174  0018F0  90BD               	bcf	4029,0,c	;volatile
  3175  0018F2  92BD               	bcf	4029,1,c	;volatile
  3176  0018F4  94BD               	bcf	4029,2,c	;volatile
  3177  0018F6  96BD               	bcf	4029,3,c	;volatile
  3178                           
  3179                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  3180  0018F8  94CA               	bcf	4042,2,c	;volatile
  3181                           
  3182                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  3183  0018FA  9482               	bcf	3970,2,c	;volatile
  3184  0018FC  0012               	return	
  3185  0018FE                     __end_of_D_PWM_SetPwm:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           prodh	equ	0xFF4
  3192                           prodl	equ	0xFF3
  3193                           intcon	equ	0xFF2
  3194                           intcon2	equ	0xFF1
  3195                           postinc0	equ	0xFEE
  3196                           plusw0	equ	0xFEB
  3197                           wreg	equ	0xFE8
  3198                           postdec1	equ	0xFE5
  3199                           fsr1l	equ	0xFE1
  3200                           indf2	equ	0xFDF
  3201                           postinc2	equ	0xFDE
  3202                           postdec2	equ	0xFDD
  3203                           plusw2	equ	0xFDB
  3204                           fsr2h	equ	0xFDA
  3205                           fsr2l	equ	0xFD9
  3206                           status	equ	0xFD8
  3207                           
  3208 ;; *************** function _D_PWM_Init *****************
  3209 ;; Defined at:
  3210 ;;		line 31 in file "Drivers/PWM_Driver.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;		None
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;		None
  3215 ;; Return value:  Size  Location     Type
  3216 ;;                  1    wreg      void 
  3217 ;; Registers used:
  3218 ;;		wreg, status,2
  3219 ;; Tracked objects:
  3220 ;;		On entry : 0/0
  3221 ;;		On exit  : 0/0
  3222 ;;		Unchanged: 0/0
  3223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3224 ;;      Params:         0       0       0       0       0       0       0       0       0
  3225 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3227 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3228 ;;Total ram usage:        0 bytes
  3229 ;; Hardware stack levels used:    1
  3230 ;; Hardware stack levels required when called:    3
  3231 ;; This function calls:
  3232 ;;		Nothing
  3233 ;; This function is called by:
  3234 ;;		_main
  3235 ;; This function uses a non-reentrant model
  3236 ;;
  3237                           
  3238                           	psect	text17
  3239  0019B0                     __ptext17:
  3240                           	opt stack 0
  3241  0019B0                     _D_PWM_Init:
  3242                           	opt stack 27
  3243                           
  3244                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;incstack = 0
  3248  0019B0  68CB               	setf	4043,c	;volatile
  3249                           
  3250                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  3251  0019B2  94CA               	bcf	4042,2,c	;volatile
  3252                           
  3253                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  3254  0019B4  50CA               	movf	4042,w,c	;volatile
  3255  0019B6  0BFC               	andlw	-4
  3256  0019B8  0901               	iorlw	1
  3257  0019BA  6ECA               	movwf	4042,c	;volatile
  3258                           
  3259                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  3260  0019BC  96CA               	bcf	4042,3,c	;volatile
  3261  0019BE  98CA               	bcf	4042,4,c	;volatile
  3262  0019C0  9ACA               	bcf	4042,5,c	;volatile
  3263  0019C2  9CCA               	bcf	4042,6,c	;volatile
  3264                           
  3265                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  3266  0019C4  0E1F               	movlw	31
  3267  0019C6  6EBE               	movwf	4030,c	;volatile
  3268                           
  3269                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  3270  0019C8  0ECF               	movlw	-49
  3271  0019CA  16BD               	andwf	4029,f,c	;volatile
  3272  0019CC  0012               	return		;funcret
  3273  0019CE                     __end_of_D_PWM_Init:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           intcon2	equ	0xFF1
  3283                           postinc0	equ	0xFEE
  3284                           plusw0	equ	0xFEB
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           indf2	equ	0xFDF
  3289                           postinc2	equ	0xFDE
  3290                           postdec2	equ	0xFDD
  3291                           plusw2	equ	0xFDB
  3292                           fsr2h	equ	0xFDA
  3293                           fsr2l	equ	0xFD9
  3294                           status	equ	0xFD8
  3295                           
  3296 ;; *************** function _D_PORT_Init *****************
  3297 ;; Defined at:
  3298 ;;		line 32 in file "Drivers/PORT_Driver.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;                  1    wreg      void 
  3305 ;; Registers used:
  3306 ;;		wreg, status,2
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0
  3313 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3315 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3316 ;;Total ram usage:        0 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    3
  3319 ;; This function calls:
  3320 ;;		Nothing
  3321 ;; This function is called by:
  3322 ;;		_main
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text18
  3327  0019CE                     __ptext18:
  3328                           	opt stack 0
  3329  0019CE                     _D_PORT_Init:
  3330                           	opt stack 27
  3331                           
  3332                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  3333                           
  3334                           ;incstack = 0
  3335  0019CE  0E00               	movlw	0
  3336  0019D0  6E92               	movwf	3986,c	;volatile
  3337  0019D2  0E00               	movlw	0
  3338  0019D4  6E80               	movwf	3968,c	;volatile
  3339                           
  3340                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  3341  0019D6  0E00               	movlw	0
  3342  0019D8  6E93               	movwf	3987,c	;volatile
  3343  0019DA  0E00               	movlw	0
  3344  0019DC  6E81               	movwf	3969,c	;volatile
  3345                           
  3346                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  3347  0019DE  0E00               	movlw	0
  3348  0019E0  6E94               	movwf	3988,c	;volatile
  3349  0019E2  0E00               	movlw	0
  3350  0019E4  6E82               	movwf	3970,c	;volatile
  3351                           
  3352                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  3353  0019E6  0E0F               	movlw	15
  3354  0019E8  6EC1               	movwf	4033,c	;volatile
  3355  0019EA  0012               	return		;funcret
  3356  0019EC                     __end_of_D_PORT_Init:
  3357                           	opt stack 0
  3358                           tblptru	equ	0xFF8
  3359                           tblptrh	equ	0xFF7
  3360                           tblptrl	equ	0xFF6
  3361                           tablat	equ	0xFF5
  3362                           prodh	equ	0xFF4
  3363                           prodl	equ	0xFF3
  3364                           intcon	equ	0xFF2
  3365                           intcon2	equ	0xFF1
  3366                           postinc0	equ	0xFEE
  3367                           plusw0	equ	0xFEB
  3368                           wreg	equ	0xFE8
  3369                           postdec1	equ	0xFE5
  3370                           fsr1l	equ	0xFE1
  3371                           indf2	equ	0xFDF
  3372                           postinc2	equ	0xFDE
  3373                           postdec2	equ	0xFDD
  3374                           plusw2	equ	0xFDB
  3375                           fsr2h	equ	0xFDA
  3376                           fsr2l	equ	0xFD9
  3377                           status	equ	0xFD8
  3378                           
  3379 ;; *************** function _C_DOOR_UnlockAll *****************
  3380 ;; Defined at:
  3381 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3382 ;; Parameters:    Size  Location     Type
  3383 ;;		None
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  d               1    8[BANK0 ] unsigned char 
  3386 ;; Return value:  Size  Location     Type
  3387 ;;                  1    wreg      void 
  3388 ;; Registers used:
  3389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3390 ;; Tracked objects:
  3391 ;;		On entry : 0/0
  3392 ;;		On exit  : 0/0
  3393 ;;		Unchanged: 0/0
  3394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3395 ;;      Params:         0       0       0       0       0       0       0       0       0
  3396 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3397 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3398 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3399 ;;Total ram usage:        9 bytes
  3400 ;; Hardware stack levels used:    1
  3401 ;; Hardware stack levels required when called:    3
  3402 ;; This function calls:
  3403 ;;		Nothing
  3404 ;; This function is called by:
  3405 ;;		_main
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text19
  3410  001394                     __ptext19:
  3411                           	opt stack 0
  3412  001394                     _C_DOOR_UnlockAll:
  3413                           	opt stack 27
  3414                           
  3415                           ;DOOR_Controller.c: 96: uint8_t d;
  3416                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  3417                           
  3418                           ;incstack = 0
  3419  001394  0E00               	movlw	0
  3420  001396  0100               	movlb	0	; () banked
  3421  001398  6FCF               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  3422  00139A  D048               	goto	l36
  3423  00139C                     
  3424                           ; BSR set to: 0
  3425                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  3426                           
  3427                           ; BSR set to: 0
  3428  00139C  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3429  00139E  0D0A               	mullw	10
  3430  0013A0  0E02               	movlw	2
  3431  0013A2  26F3               	addwf	prodl,f,c
  3432  0013A4  0E00               	movlw	0
  3433  0013A6  22F4               	addwfc	prodh,f,c
  3434  0013A8  0E60               	movlw	low _doors
  3435  0013AA  24F3               	addwf	prodl,w,c
  3436  0013AC  6ED9               	movwf	fsr2l,c
  3437  0013AE  0E00               	movlw	high _doors
  3438  0013B0  20F4               	addwfc	prodh,w,c
  3439  0013B2  6EDA               	movwf	fsr2h,c
  3440  0013B4  CFDE F0C7          	movff	postinc2,??_C_DOOR_UnlockAll
  3441  0013B8  CFDD F0C8          	movff	postdec2,??_C_DOOR_UnlockAll+1
  3442  0013BC  C0C7  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  3443  0013C0  C0C8  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  3444  0013C4  50DF               	movf	indf2,w,c
  3445  0013C6  0AFF               	xorlw	255
  3446  0013C8  6FC9               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3447  0013CA  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3448  0013CC  0D0A               	mullw	10
  3449  0013CE  0E04               	movlw	4
  3450  0013D0  26F3               	addwf	prodl,f,c
  3451  0013D2  0E00               	movlw	0
  3452  0013D4  22F4               	addwfc	prodh,f,c
  3453  0013D6  0E60               	movlw	low _doors
  3454  0013D8  24F3               	addwf	prodl,w,c
  3455  0013DA  6ED9               	movwf	fsr2l,c
  3456  0013DC  0E00               	movlw	high _doors
  3457  0013DE  20F4               	addwfc	prodh,w,c
  3458  0013E0  6EDA               	movwf	fsr2h,c
  3459  0013E2  50DF               	movf	indf2,w,c
  3460  0013E4  6FCA               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  3461  0013E6  0E01               	movlw	1
  3462  0013E8  6FCB               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  3463  0013EA  2BCA               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3464  0013EC  D002               	goto	u1814
  3465  0013EE                     u1815:
  3466  0013EE  90D8               	bcf	status,0,c
  3467  0013F0  37CB               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  3468  0013F2                     u1814:
  3469  0013F2  2FCA               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3470  0013F4  D7FC               	goto	u1815
  3471  0013F6  0100               	movlb	0	; () banked
  3472  0013F8  51CB               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  3473  0013FA  15C9               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3474  0013FC  6FCC               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  3475  0013FE  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3476  001400  0D0A               	mullw	10
  3477  001402  0E02               	movlw	2
  3478  001404  26F3               	addwf	prodl,f,c
  3479  001406  0E00               	movlw	0
  3480  001408  22F4               	addwfc	prodh,f,c
  3481  00140A  0E60               	movlw	low _doors
  3482  00140C  24F3               	addwf	prodl,w,c
  3483  00140E  6ED9               	movwf	fsr2l,c
  3484  001410  0E00               	movlw	high _doors
  3485  001412  20F4               	addwfc	prodh,w,c
  3486  001414  6EDA               	movwf	fsr2h,c
  3487  001416  CFDE F0CD          	movff	postinc2,??_C_DOOR_UnlockAll+6
  3488  00141A  CFDD F0CE          	movff	postdec2,??_C_DOOR_UnlockAll+7
  3489  00141E  C0CD  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  3490  001422  C0CE  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  3491  001426  51CC               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  3492  001428  1ADF               	xorwf	indf2,f,c
  3493                           
  3494                           ; BSR set to: 0
  3495  00142A  2BCF               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  3496  00142C                     l36:
  3497                           
  3498                           ; BSR set to: 0
  3499                           
  3500                           ; BSR set to: 0
  3501  00142C  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3502  00142E  6FC7               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  3503  001430  6BC8               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  3504  001432  5037               	movf	_door_cnt,w,c
  3505  001434  5DC7               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  3506  001436  51C8               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  3507  001438  0A80               	xorlw	128
  3508  00143A  6FC9               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3509  00143C  5038               	movf	_door_cnt+1,w,c
  3510  00143E  0A80               	xorlw	128
  3511  001440  59C9               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3512  001442  B0D8               	btfsc	status,0,c
  3513  001444  0012               	return	
  3514  001446  D7AA               	goto	l37
  3515  001448                     __end_of_C_DOOR_UnlockAll:
  3516                           	opt stack 0
  3517                           tblptru	equ	0xFF8
  3518                           tblptrh	equ	0xFF7
  3519                           tblptrl	equ	0xFF6
  3520                           tablat	equ	0xFF5
  3521                           prodh	equ	0xFF4
  3522                           prodl	equ	0xFF3
  3523                           intcon	equ	0xFF2
  3524                           intcon2	equ	0xFF1
  3525                           postinc0	equ	0xFEE
  3526                           plusw0	equ	0xFEB
  3527                           wreg	equ	0xFE8
  3528                           postdec1	equ	0xFE5
  3529                           fsr1l	equ	0xFE1
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           plusw2	equ	0xFDB
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _C_DOOR_SendStates *****************
  3539 ;; Defined at:
  3540 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  com             3   34[BANK0 ] unsigned char [3]
  3545 ;;  mes             2   37[BANK0 ] unsigned char [2]
  3546 ;;  d               1   39[BANK0 ] unsigned char 
  3547 ;; Return value:  Size  Location     Type
  3548 ;;                  1    wreg      void 
  3549 ;; Registers used:
  3550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3551 ;; Tracked objects:
  3552 ;;		On entry : 0/0
  3553 ;;		On exit  : 0/0
  3554 ;;		Unchanged: 0/0
  3555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3556 ;;      Params:         0       0       0       0       0       0       0       0       0
  3557 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3558 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3559 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3560 ;;Total ram usage:        9 bytes
  3561 ;; Hardware stack levels used:    1
  3562 ;; Hardware stack levels required when called:    6
  3563 ;; This function calls:
  3564 ;;		_D_UART_Write
  3565 ;;		_commandAndMessage
  3566 ;; This function is called by:
  3567 ;;		_main
  3568 ;; This function uses a non-reentrant model
  3569 ;;
  3570                           
  3571                           	psect	text20
  3572  00103C                     __ptext20:
  3573                           	opt stack 0
  3574  00103C                     _C_DOOR_SendStates:
  3575                           	opt stack 24
  3576                           
  3577                           ;DOOR_Controller.c: 110: uint8_t d;
  3578                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;incstack = 0
  3582  00103C  0E00               	movlw	0
  3583  00103E  0100               	movlb	0	; () banked
  3584  001040  6FEE               	movwf	C_DOOR_SendStates@d& (0+255),b
  3585  001042  D065               	goto	l48
  3586  001044                     
  3587                           ; BSR set to: 0
  3588                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  3589                           
  3590                           ; BSR set to: 0
  3591  001044  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3592  001046  0D0A               	mullw	10
  3593  001048  0E06               	movlw	6
  3594  00104A  26F3               	addwf	prodl,f,c
  3595  00104C  0E00               	movlw	0
  3596  00104E  22F4               	addwfc	prodh,f,c
  3597  001050  0E60               	movlw	low _doors
  3598  001052  24F3               	addwf	prodl,w,c
  3599  001054  6ED9               	movwf	fsr2l,c
  3600  001056  0E00               	movlw	high _doors
  3601  001058  20F4               	addwfc	prodh,w,c
  3602  00105A  6EDA               	movwf	fsr2h,c
  3603  00105C  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3604  00105E  0D0A               	mullw	10
  3605  001060  0E05               	movlw	5
  3606  001062  26F3               	addwf	prodl,f,c
  3607  001064  0E00               	movlw	0
  3608  001066  22F4               	addwfc	prodh,f,c
  3609  001068  0E60               	movlw	low _doors
  3610  00106A  24F3               	addwf	prodl,w,c
  3611  00106C  6EE1               	movwf	fsr1l,c
  3612  00106E  0E00               	movlw	high _doors
  3613  001070  20F4               	addwfc	prodh,w,c
  3614  001072  6EE2               	movwf	fsr1h,c
  3615  001074  50DE               	movf	postinc2,w,c
  3616  001076  18E6               	xorwf	postinc1,w,c
  3617  001078  B4D8               	btfsc	status,2,c
  3618  00107A  D048               	goto	l50
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;DOOR_Controller.c: 114: char com[3];
  3622                           ;DOOR_Controller.c: 115: char mes[2];
  3623                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  3624  00107C  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3625  00107E  0D0A               	mullw	10
  3626  001080  0E60               	movlw	low _doors
  3627  001082  24F3               	addwf	prodl,w,c
  3628  001084  6ED9               	movwf	fsr2l,c
  3629  001086  0E00               	movlw	high _doors
  3630  001088  20F4               	addwfc	prodh,w,c
  3631  00108A  6EDA               	movwf	fsr2h,c
  3632  00108C  EE00  F0C7         	lfsr	0,commandAndMessage@door
  3633  001090  0E09               	movlw	9
  3634  001092                     u1881:
  3635  001092  CFDB FFEB          	movff	plusw2,plusw0
  3636  001096  06E8               	decf	wreg,f,c
  3637  001098  E2FC               	bc	u1881
  3638  00109A  0EE9               	movlw	low C_DOOR_SendStates@com
  3639  00109C  6FD1               	movwf	commandAndMessage@com& (0+255),b
  3640  00109E  0E00               	movlw	high C_DOOR_SendStates@com
  3641  0010A0  6FD2               	movwf	(commandAndMessage@com+1)& (0+255),b
  3642  0010A2  0EEC               	movlw	low C_DOOR_SendStates@mes
  3643  0010A4  6FD3               	movwf	commandAndMessage@mes& (0+255),b
  3644  0010A6  0E00               	movlw	high C_DOOR_SendStates@mes
  3645  0010A8  6FD4               	movwf	(commandAndMessage@mes+1)& (0+255),b
  3646  0010AA  EC86  F00B         	call	_commandAndMessage	;wreg free
  3647                           
  3648                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  3649  0010AE  0EE9               	movlw	low C_DOOR_SendStates@com
  3650  0010B0  0100               	movlb	0	; () banked
  3651  0010B2  6FE1               	movwf	D_UART_Write@command& (0+255),b
  3652  0010B4  0E00               	movlw	high C_DOOR_SendStates@com
  3653  0010B6  6FE2               	movwf	(D_UART_Write@command+1)& (0+255),b
  3654  0010B8  0EEC               	movlw	low C_DOOR_SendStates@mes
  3655  0010BA  6FE3               	movwf	D_UART_Write@data& (0+255),b
  3656  0010BC  0E00               	movlw	high C_DOOR_SendStates@mes
  3657  0010BE  6FE4               	movwf	(D_UART_Write@data+1)& (0+255),b
  3658  0010C0  EC95  F008         	call	_D_UART_Write	;wreg free
  3659                           
  3660                           ;DOOR_Controller.c: 120: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3661  0010C4  0E06               	movlw	6
  3662  0010C6  0100               	movlb	0	; () banked
  3663  0010C8  6FE6               	movwf	??_C_DOOR_SendStates& (0+255),b
  3664  0010CA  0E30               	movlw	48
  3665  0010CC                     u2227:
  3666  0010CC  2EE8               	decfsz	wreg,f,c
  3667  0010CE  D7FE               	bra	u2227
  3668  0010D0  2FE6               	decfsz	??_C_DOOR_SendStates& (0+255),f,b
  3669  0010D2  D7FC               	bra	u2227
  3670  0010D4  F000               	nop	
  3671                           
  3672                           ;DOOR_Controller.c: 122: doors[d].was_open = doors[d].is_open;
  3673  0010D6  0100               	movlb	0	; () banked
  3674  0010D8  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3675  0010DA  0D0A               	mullw	10
  3676  0010DC  0E06               	movlw	6
  3677  0010DE  26F3               	addwf	prodl,f,c
  3678  0010E0  0E00               	movlw	0
  3679  0010E2  22F4               	addwfc	prodh,f,c
  3680  0010E4  0E60               	movlw	low _doors
  3681  0010E6  24F3               	addwf	prodl,w,c
  3682  0010E8  6ED9               	movwf	fsr2l,c
  3683  0010EA  0E00               	movlw	high _doors
  3684  0010EC  20F4               	addwfc	prodh,w,c
  3685  0010EE  6EDA               	movwf	fsr2h,c
  3686  0010F0  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3687  0010F2  0D0A               	mullw	10
  3688  0010F4  0E05               	movlw	5
  3689  0010F6  26F3               	addwf	prodl,f,c
  3690  0010F8  0E00               	movlw	0
  3691  0010FA  22F4               	addwfc	prodh,f,c
  3692  0010FC  0E60               	movlw	low _doors
  3693  0010FE  24F3               	addwf	prodl,w,c
  3694  001100  6EE1               	movwf	fsr1l,c
  3695  001102  0E00               	movlw	high _doors
  3696  001104  20F4               	addwfc	prodh,w,c
  3697  001106  6EE2               	movwf	fsr1h,c
  3698  001108  CFDF FFE7          	movff	indf2,indf1
  3699  00110C                     l50:
  3700                           
  3701                           ; BSR set to: 0
  3702                           
  3703                           ; BSR set to: 0
  3704  00110C  2BEE               	incf	C_DOOR_SendStates@d& (0+255),f,b
  3705  00110E                     l48:
  3706                           
  3707                           ; BSR set to: 0
  3708                           
  3709                           ; BSR set to: 0
  3710  00110E  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3711  001110  6FE6               	movwf	??_C_DOOR_SendStates& (0+255),b
  3712  001112  6BE7               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  3713  001114  5037               	movf	_door_cnt,w,c
  3714  001116  5DE6               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  3715  001118  51E7               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  3716  00111A  0A80               	xorlw	128
  3717  00111C  6FE8               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  3718  00111E  5038               	movf	_door_cnt+1,w,c
  3719  001120  0A80               	xorlw	128
  3720  001122  59E8               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  3721  001124  B0D8               	btfsc	status,0,c
  3722  001126  0012               	return	
  3723  001128  D78D               	goto	l49
  3724  00112A                     __end_of_C_DOOR_SendStates:
  3725                           	opt stack 0
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           intcon2	equ	0xFF1
  3734                           postinc0	equ	0xFEE
  3735                           plusw0	equ	0xFEB
  3736                           wreg	equ	0xFE8
  3737                           indf1	equ	0xFE7
  3738                           postinc1	equ	0xFE6
  3739                           postdec1	equ	0xFE5
  3740                           fsr1h	equ	0xFE2
  3741                           fsr1l	equ	0xFE1
  3742                           indf2	equ	0xFDF
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           plusw2	equ	0xFDB
  3746                           fsr2h	equ	0xFDA
  3747                           fsr2l	equ	0xFD9
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _commandAndMessage *****************
  3751 ;; Defined at:
  3752 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  door           10    0[BANK0 ] struct .
  3755 ;;  com             2   10[BANK0 ] PTR unsigned char 
  3756 ;;		 -> C_DOOR_SendStates@com(3), 
  3757 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  3758 ;;		 -> C_DOOR_SendStates@mes(2), 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3770 ;;      Params:         0      14       0       0       0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3773 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3774 ;;Total ram usage:       14 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    3
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_C_DOOR_SendStates
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text21
  3785  00170C                     __ptext21:
  3786                           	opt stack 0
  3787  00170C                     _commandAndMessage:
  3788                           	opt stack 26
  3789                           
  3790                           ;DOOR_Controller.c: 33: com[0] = 'D';
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;incstack = 0
  3794  00170C  C0D1  FFD9         	movff	commandAndMessage@com,fsr2l
  3795  001710  C0D2  FFDA         	movff	commandAndMessage@com+1,fsr2h
  3796  001714  0E44               	movlw	68
  3797  001716  6EDF               	movwf	indf2,c
  3798                           
  3799                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  3800  001718  0100               	movlb	0	; () banked
  3801  00171A  EE20 F001          	lfsr	2,1
  3802  00171E  51D1               	movf	commandAndMessage@com& (0+255),w,b
  3803  001720  26D9               	addwf	fsr2l,f,c
  3804  001722  51D2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3805  001724  22DA               	addwfc	fsr2h,f,c
  3806  001726  51C7               	movf	commandAndMessage@door& (0+255),w,b
  3807  001728  0F30               	addlw	48
  3808  00172A  6EDF               	movwf	indf2,c
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;DOOR_Controller.c: 35: com[2] = '\0';
  3812  00172C  EE20 F002          	lfsr	2,2
  3813  001730  51D1               	movf	commandAndMessage@com& (0+255),w,b
  3814  001732  26D9               	addwf	fsr2l,f,c
  3815  001734  51D2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3816  001736  22DA               	addwfc	fsr2h,f,c
  3817  001738  0E00               	movlw	0
  3818  00173A  6EDF               	movwf	indf2,c
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;DOOR_Controller.c: 38: if (door.is_open) {
  3822  00173C  51CD               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3823  00173E  B4D8               	btfsc	status,2,c
  3824  001740  D006               	goto	l19
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  3828  001742  C0D3  FFD9         	movff	commandAndMessage@mes,fsr2l
  3829  001746  C0D4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3830  00174A  0E43               	movlw	67
  3831  00174C  D005               	goto	L2
  3832  00174E                     l19:
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  3836                           
  3837                           ; BSR set to: 0
  3838  00174E  C0D3  FFD9         	movff	commandAndMessage@mes,fsr2l
  3839  001752  C0D4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3840  001756  0E4F               	movlw	79
  3841  001758                     L2:
  3842  001758  6EDF               	movwf	indf2,c
  3843                           
  3844                           ; BSR set to: 0
  3845                           ;DOOR_Controller.c: 42: }
  3846                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  3847                           
  3848                           ; BSR set to: 0
  3849  00175A  EE20 F001          	lfsr	2,1
  3850  00175E  51D3               	movf	commandAndMessage@mes& (0+255),w,b
  3851  001760  26D9               	addwf	fsr2l,f,c
  3852  001762  51D4               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3853  001764  22DA               	addwfc	fsr2h,f,c
  3854  001766  0E00               	movlw	0
  3855  001768  6EDF               	movwf	indf2,c
  3856                           
  3857                           ; BSR set to: 0
  3858  00176A  0012               	return		;funcret
  3859  00176C                     __end_of_commandAndMessage:
  3860                           	opt stack 0
  3861                           tblptru	equ	0xFF8
  3862                           tblptrh	equ	0xFF7
  3863                           tblptrl	equ	0xFF6
  3864                           tablat	equ	0xFF5
  3865                           prodh	equ	0xFF4
  3866                           prodl	equ	0xFF3
  3867                           intcon	equ	0xFF2
  3868                           intcon2	equ	0xFF1
  3869                           postinc0	equ	0xFEE
  3870                           plusw0	equ	0xFEB
  3871                           wreg	equ	0xFE8
  3872                           indf1	equ	0xFE7
  3873                           postinc1	equ	0xFE6
  3874                           postdec1	equ	0xFE5
  3875                           fsr1h	equ	0xFE2
  3876                           fsr1l	equ	0xFE1
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           plusw2	equ	0xFDB
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _D_UART_Write *****************
  3886 ;; Defined at:
  3887 ;;		line 206 in file "Drivers/UART_Driver.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  command         2   26[BANK0 ] PTR const unsigned char 
  3890 ;;		 -> STR_19(2), C_DOOR_SendStates@com(3), 
  3891 ;;  data            2   28[BANK0 ] PTR const unsigned char 
  3892 ;;		 -> STR_20(2), C_DOOR_SendStates@mes(2), 
  3893 ;; Auto vars:     Size  Location     Type
  3894 ;;		None
  3895 ;; Return value:  Size  Location     Type
  3896 ;;                  1    wreg      void 
  3897 ;; Registers used:
  3898 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3899 ;; Tracked objects:
  3900 ;;		On entry : 0/0
  3901 ;;		On exit  : 0/0
  3902 ;;		Unchanged: 0/0
  3903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3904 ;;      Params:         0       4       0       0       0       0       0       0       0
  3905 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3906 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3907 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3908 ;;Total ram usage:        5 bytes
  3909 ;; Hardware stack levels used:    1
  3910 ;; Hardware stack levels required when called:    5
  3911 ;; This function calls:
  3912 ;;		_printf
  3913 ;; This function is called by:
  3914 ;;		_C_DOOR_SendStates
  3915 ;;		_main
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           	psect	text22
  3920  00112A                     __ptext22:
  3921                           	opt stack 0
  3922  00112A                     _D_UART_Write:
  3923                           	opt stack 25
  3924                           
  3925                           ;UART_Driver.c: 207: printf(startCharacter);
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;incstack = 0
  3929  00112A  C0F7  F0D3         	movff	_startCharacter,printf@f
  3930  00112E  C0F8  F0D4         	movff	_startCharacter+1,printf@f+1
  3931  001132  0100               	movlb	0	; () banked
  3932  001134  51D3               	movf	printf@f& (0+255),w,b
  3933  001136  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3934  001138  A4D8               	btfss	status,2,c
  3935  00113A  0E00               	movlw	low (__mediumconst shr (0+16))
  3936  00113C  6FD5               	movwf	(printf@f+2)& (0+255),b
  3937  00113E  EC84  F005         	call	_printf	;wreg free
  3938                           
  3939                           ;UART_Driver.c: 209: printf(messageCharacter);
  3940  001142  C0F3  F0D3         	movff	_messageCharacter,printf@f
  3941  001146  C0F4  F0D4         	movff	_messageCharacter+1,printf@f+1
  3942  00114A  0100               	movlb	0	; () banked
  3943  00114C  51D3               	movf	printf@f& (0+255),w,b
  3944  00114E  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3945  001150  A4D8               	btfss	status,2,c
  3946  001152  0E00               	movlw	low (__mediumconst shr (0+16))
  3947  001154  6FD5               	movwf	(printf@f+2)& (0+255),b
  3948  001156  EC84  F005         	call	_printf	;wreg free
  3949                           
  3950                           ;UART_Driver.c: 210: printf(deviceName);
  3951  00115A  C0C4  F0D3         	movff	_deviceName,printf@f
  3952  00115E  C0C5  F0D4         	movff	_deviceName+1,printf@f+1
  3953  001162  C0C6  F0D5         	movff	_deviceName+2,printf@f+2
  3954  001166  EC84  F005         	call	_printf	;wreg free
  3955                           
  3956                           ;UART_Driver.c: 212: printf(":");printf(command);
  3957  00116A  0E46               	movlw	low STR_5
  3958  00116C  0100               	movlb	0	; () banked
  3959  00116E  6FD3               	movwf	printf@f& (0+255),b
  3960  001170  0E08               	movlw	high STR_5
  3961  001172  6FD4               	movwf	(printf@f+1)& (0+255),b
  3962  001174  51D3               	movf	printf@f& (0+255),w,b
  3963  001176  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3964  001178  A4D8               	btfss	status,2,c
  3965  00117A  0E00               	movlw	low (__mediumconst shr (0+16))
  3966  00117C  6FD5               	movwf	(printf@f+2)& (0+255),b
  3967  00117E  EC84  F005         	call	_printf	;wreg free
  3968  001182  C0E1  F0D3         	movff	D_UART_Write@command,printf@f
  3969  001186  C0E2  F0D4         	movff	D_UART_Write@command+1,printf@f+1
  3970  00118A  0100               	movlb	0	; () banked
  3971  00118C  6BD5               	clrf	(printf@f+2)& (0+255),b
  3972  00118E  51D3               	movf	printf@f& (0+255),w,b
  3973  001190  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3974  001192  B4D8               	btfsc	status,2,c
  3975  001194  D005               	goto	u1731
  3976  001196  0E07               	movlw	(high __ramtop+-1)
  3977  001198  65E2               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3978  00119A  D001               	goto	u17311
  3979  00119C  D001               	goto	u1731
  3980  00119E                     u17311:
  3981  00119E  8BD5               	bsf	(printf@f+2)& (0+255),5,b
  3982  0011A0                     u1731:
  3983  0011A0  EC84  F005         	call	_printf	;wreg free
  3984                           
  3985                           ;UART_Driver.c: 214: printf(":");printf(data);
  3986  0011A4  0E46               	movlw	low STR_5
  3987  0011A6  0100               	movlb	0	; () banked
  3988  0011A8  6FD3               	movwf	printf@f& (0+255),b
  3989  0011AA  0E08               	movlw	high STR_5
  3990  0011AC  6FD4               	movwf	(printf@f+1)& (0+255),b
  3991  0011AE  51D3               	movf	printf@f& (0+255),w,b
  3992  0011B0  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3993  0011B2  A4D8               	btfss	status,2,c
  3994  0011B4  0E00               	movlw	low (__mediumconst shr (0+16))
  3995  0011B6  6FD5               	movwf	(printf@f+2)& (0+255),b
  3996  0011B8  EC84  F005         	call	_printf	;wreg free
  3997  0011BC  C0E3  F0D3         	movff	D_UART_Write@data,printf@f
  3998  0011C0  C0E4  F0D4         	movff	D_UART_Write@data+1,printf@f+1
  3999  0011C4  0100               	movlb	0	; () banked
  4000  0011C6  6BD5               	clrf	(printf@f+2)& (0+255),b
  4001  0011C8  51D3               	movf	printf@f& (0+255),w,b
  4002  0011CA  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  4003  0011CC  B4D8               	btfsc	status,2,c
  4004  0011CE  D005               	goto	u1741
  4005  0011D0  0E07               	movlw	(high __ramtop+-1)
  4006  0011D2  65E4               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  4007  0011D4  D001               	goto	u17411
  4008  0011D6  D001               	goto	u1741
  4009  0011D8                     u17411:
  4010  0011D8  8BD5               	bsf	(printf@f+2)& (0+255),5,b
  4011  0011DA                     u1741:
  4012  0011DA  EC84  F005         	call	_printf	;wreg free
  4013                           
  4014                           ;UART_Driver.c: 216: printf(stopCharacter);
  4015  0011DE  C0F5  F0D3         	movff	_stopCharacter,printf@f
  4016  0011E2  C0F6  F0D4         	movff	_stopCharacter+1,printf@f+1
  4017  0011E6  0100               	movlb	0	; () banked
  4018  0011E8  51D3               	movf	printf@f& (0+255),w,b
  4019  0011EA  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  4020  0011EC  A4D8               	btfss	status,2,c
  4021  0011EE  0E00               	movlw	low (__mediumconst shr (0+16))
  4022  0011F0  6FD5               	movwf	(printf@f+2)& (0+255),b
  4023  0011F2  EC84  F005         	call	_printf	;wreg free
  4024                           
  4025                           ;UART_Driver.c: 217: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  4026  0011F6  0E06               	movlw	6
  4027  0011F8  0100               	movlb	0	; () banked
  4028  0011FA  6FE5               	movwf	??_D_UART_Write& (0+255),b
  4029  0011FC  0E30               	movlw	48
  4030  0011FE                     u2237:
  4031  0011FE  2EE8               	decfsz	wreg,f,c
  4032  001200  D7FE               	bra	u2237
  4033  001202  2FE5               	decfsz	??_D_UART_Write& (0+255),f,b
  4034  001204  D7FC               	bra	u2237
  4035  001206  F000               	nop	
  4036  001208  0012               	return		;funcret
  4037  00120A                     __end_of_D_UART_Write:
  4038                           	opt stack 0
  4039                           tblptru	equ	0xFF8
  4040                           tblptrh	equ	0xFF7
  4041                           tblptrl	equ	0xFF6
  4042                           tablat	equ	0xFF5
  4043                           prodh	equ	0xFF4
  4044                           prodl	equ	0xFF3
  4045                           intcon	equ	0xFF2
  4046                           intcon2	equ	0xFF1
  4047                           postinc0	equ	0xFEE
  4048                           plusw0	equ	0xFEB
  4049                           wreg	equ	0xFE8
  4050                           indf1	equ	0xFE7
  4051                           postinc1	equ	0xFE6
  4052                           postdec1	equ	0xFE5
  4053                           fsr1h	equ	0xFE2
  4054                           fsr1l	equ	0xFE1
  4055                           indf2	equ	0xFDF
  4056                           postinc2	equ	0xFDE
  4057                           postdec2	equ	0xFDD
  4058                           plusw2	equ	0xFDB
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function _printf *****************
  4064 ;; Defined at:
  4065 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;  f               3   12[BANK0 ] PTR const unsigned char 
  4068 ;;		 -> STR_20(2), STR_19(2), STR_17(2), STR_11(2), 
  4069 ;;		 -> STR_10(3), STR_9(3), STR_8(2), STR_7(2), 
  4070 ;;		 -> STR_6(2), STR_5(2), STR_4(4), STR_3(4), 
  4071 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  4072 ;;		 -> C_DOOR_SendStates@com(3), 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  idx             1   18[BANK0 ] unsigned char 
  4075 ;;  tmpval          4    0        struct .
  4076 ;;  cp              3    0        PTR const unsigned char 
  4077 ;;  val             2   23[BANK0 ] unsigned int 
  4078 ;;  ap              2   19[BANK0 ] PTR void [1]
  4079 ;;		 -> ?_printf(2), 
  4080 ;;  len             2    0        unsigned int 
  4081 ;;  c               1   25[BANK0 ] char 
  4082 ;;  flag            1   22[BANK0 ] unsigned char 
  4083 ;;  prec            1   21[BANK0 ] char 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  2   12[BANK0 ] int 
  4086 ;; Registers used:
  4087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4093 ;;      Params:         0       5       0       0       0       0       0       0       0
  4094 ;;      Locals:         0       8       0       0       0       0       0       0       0
  4095 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4096 ;;      Totals:         0      14       0       0       0       0       0       0       0
  4097 ;;Total ram usage:       14 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    4
  4100 ;; This function calls:
  4101 ;;		___lwdiv
  4102 ;;		___lwmod
  4103 ;;		_putch
  4104 ;; This function is called by:
  4105 ;;		_D_UART_Write
  4106 ;;		_D_UART_WriteInt
  4107 ;;		_D_UART_Acknowledge
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text23
  4112  000B08                     __ptext23:
  4113                           	opt stack 0
  4114  000B08                     _printf:
  4115                           	opt stack 25
  4116                           
  4117                           ;doprnt.c: 466: va_list ap;
  4118                           ;doprnt.c: 499: signed char c;
  4119                           ;doprnt.c: 506: signed char prec;
  4120                           ;doprnt.c: 508: unsigned char flag;
  4121                           ;doprnt.c: 523: union {
  4122                           ;doprnt.c: 524: unsigned long vd;
  4123                           ;doprnt.c: 525: double integ;
  4124                           ;doprnt.c: 526: } tmpval;
  4125                           ;doprnt.c: 528: unsigned int val;
  4126                           ;doprnt.c: 529: unsigned len;
  4127                           ;doprnt.c: 530: const char * cp;
  4128                           ;doprnt.c: 533: *ap = __va_start();
  4129                           
  4130                           ;incstack = 0
  4131  000B08  0ED6               	movlw	low (?_printf+3)
  4132  000B0A  0100               	movlb	0	; () banked
  4133  000B0C  6FDA               	movwf	printf@ap& (0+255),b
  4134  000B0E  0E00               	movlw	high (?_printf+3)
  4135  000B10  6FDB               	movwf	(printf@ap+1)& (0+255),b
  4136                           
  4137                           ;doprnt.c: 536: while(c = *f++) {
  4138  000B12  D10A               	goto	u1640
  4139  000B14                     
  4140                           ; BSR set to: 0
  4141                           ;doprnt.c: 538: if(c != '%')
  4142                           
  4143                           ; BSR set to: 0
  4144  000B14  0E25               	movlw	37
  4145  000B16  19E0               	xorwf	printf@c& (0+255),w,b
  4146  000B18  B4D8               	btfsc	status,2,c
  4147  000B1A  D004               	goto	l384
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;doprnt.c: 540: {
  4151                           ;doprnt.c: 541: (putch(c) );
  4152  000B1C  51E0               	movf	printf@c& (0+255),w,b
  4153  000B1E  EC7F  F00C         	call	_putch
  4154                           
  4155                           ;doprnt.c: 542: continue;
  4156  000B22  D102               	goto	u1640
  4157  000B24                     l384:
  4158                           
  4159                           ;doprnt.c: 543: }
  4160                           ;doprnt.c: 548: flag = 0;
  4161  000B24  0E00               	movlw	0
  4162  000B26  0100               	movlb	0	; () banked
  4163  000B28  6FDD               	movwf	printf@flag& (0+255),b
  4164                           
  4165                           ;doprnt.c: 635: switch(c = *f++) {
  4166  000B2A  D006               	goto	l385
  4167  000B2C                     
  4168                           ; BSR set to: 0
  4169                           ;doprnt.c: 721: flag |= 0x80;
  4170                           
  4171                           ; BSR set to: 0
  4172  000B2C  8FDD               	bsf	printf@flag& (0+255),7,b
  4173                           
  4174                           ;doprnt.c: 723: break;
  4175  000B2E  D02A               	goto	l390
  4176  000B30                     
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 809: (putch(c) );
  4179                           
  4180                           ; BSR set to: 0
  4181  000B30  51E0               	movf	printf@c& (0+255),w,b
  4182  000B32  EC7F  F00C         	call	_putch
  4183                           
  4184                           ;doprnt.c: 810: continue;
  4185  000B36  D0F8               	goto	u1640
  4186  000B38                     l385:
  4187  000B38  C0D3  FFF6         	movff	printf@f,tblptrl
  4188  000B3C  C0D4  FFF7         	movff	printf@f+1,tblptrh
  4189  000B40  C0D5  FFF8         	movff	printf@f+2,tblptru
  4190  000B44  0E01               	movlw	1
  4191  000B46  0100               	movlb	0	; () banked
  4192  000B48  27D3               	addwf	printf@f& (0+255),f,b
  4193  000B4A  0E00               	movlw	0
  4194  000B4C  23D4               	addwfc	(printf@f+1)& (0+255),f,b
  4195  000B4E  23D5               	addwfc	(printf@f+2)& (0+255),f,b
  4196  000B50  BAF8               	btfsc	tblptru,5,c
  4197  000B52  D003               	bra	u1547
  4198  000B54  0008               	tblrd		*
  4199  000B56  50F5               	movf	tablat,w,c
  4200  000B58  D005               	bra	u1540
  4201  000B5A                     u1547:
  4202  000B5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4203  000B5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4204  000B62  50EF               	movf	indf0,w,c
  4205  000B64                     u1540:
  4206  000B64  0100               	movlb	0	; () banked
  4207  000B66  6FE0               	movwf	printf@c& (0+255),b
  4208  000B68  51E0               	movf	printf@c& (0+255),w,b
  4209                           
  4210                           ; Switch size 1, requested type "space"
  4211                           ; Number of cases is 4, Range of values is 0 to 120
  4212                           ; switch strategies available:
  4213                           ; Name         Instructions Cycles
  4214                           ; simple_byte           13     7 (average)
  4215                           ;	Chosen strategy is simple_byte
  4216  000B6A  0A00               	xorlw	0	; case 0
  4217  000B6C  B4D8               	btfsc	status,2,c
  4218  000B6E  0012               	return	
  4219  000B70  0A64               	xorlw	100	; case 100
  4220  000B72  B4D8               	btfsc	status,2,c
  4221  000B74  D007               	goto	l390
  4222  000B76  0A0D               	xorlw	13	; case 105
  4223  000B78  B4D8               	btfsc	status,2,c
  4224  000B7A  D004               	goto	l390
  4225  000B7C  0A11               	xorlw	17	; case 120
  4226  000B7E  B4D8               	btfsc	status,2,c
  4227  000B80  D7D5               	goto	l391
  4228  000B82  D7D6               	goto	l392
  4229  000B84                     l390:
  4230                           
  4231                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4232  000B84  0100               	movlb	0	; () banked
  4233  000B86  BFDD               	btfsc	printf@flag& (0+255),7,b
  4234  000B88  D015               	goto	l393
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;doprnt.c: 1253: {
  4238                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4239  000B8A  C0DA  FFD9         	movff	printf@ap,fsr2l
  4240  000B8E  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  4241  000B92  CFDE F0DE          	movff	postinc2,printf@val
  4242  000B96  CFDD F0DF          	movff	postdec2,printf@val+1
  4243                           
  4244                           ; BSR set to: 0
  4245  000B9A  0E02               	movlw	2
  4246  000B9C  27DA               	addwf	printf@ap& (0+255),f,b
  4247  000B9E  0E00               	movlw	0
  4248  000BA0  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;doprnt.c: 1261: if((int)val < 0) {
  4252  000BA2  AFDF               	btfss	(printf@val+1)& (0+255),7,b
  4253  000BA4  D04A               	goto	l396
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 1262: flag |= 0x03;
  4257  000BA6  0E03               	movlw	3
  4258  000BA8  13DD               	iorwf	printf@flag& (0+255),f,b
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;doprnt.c: 1263: val = -val;
  4262  000BAA  6DDE               	negf	printf@val& (0+255),b
  4263  000BAC  1FDF               	comf	(printf@val+1)& (0+255),f,b
  4264  000BAE  B0D8               	btfsc	status,0,c
  4265  000BB0  2BDF               	incf	(printf@val+1)& (0+255),f,b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;doprnt.c: 1264: }
  4269                           ;doprnt.c: 1266: }
  4270  000BB2  D043               	goto	l396
  4271  000BB4                     l393:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;doprnt.c: 1268: else
  4275                           ;doprnt.c: 1273: {
  4276                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4277                           
  4278                           ; BSR set to: 0
  4279  000BB4  C0DA  FFD9         	movff	printf@ap,fsr2l
  4280  000BB8  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  4281  000BBC  CFDE F0DE          	movff	postinc2,printf@val
  4282  000BC0  CFDD F0DF          	movff	postdec2,printf@val+1
  4283                           
  4284                           ; BSR set to: 0
  4285  000BC4  0E02               	movlw	2
  4286  000BC6  27DA               	addwf	printf@ap& (0+255),f,b
  4287  000BC8  0E00               	movlw	0
  4288  000BCA  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;doprnt.c: 1287: }
  4292                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4293  000BCC  D036               	goto	l396
  4294  000BCE                     
  4295                           ; BSR set to: 0
  4296                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4297                           
  4298                           ; BSR set to: 0
  4299  000BCE  0E01               	movlw	1
  4300  000BD0  6FE0               	movwf	printf@c& (0+255),b
  4301  000BD2                     l2113:
  4302                           
  4303                           ; BSR set to: 0
  4304  000BD2  0E05               	movlw	5
  4305  000BD4  19E0               	xorwf	printf@c& (0+255),w,b
  4306  000BD6  B4D8               	btfsc	status,2,c
  4307  000BD8  D038               	goto	l401
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;doprnt.c: 1306: if(val < dpowers[c])
  4311                           
  4312                           ; BSR set to: 0
  4313                           
  4314                           ; BSR set to: 0
  4315  000BDA  51E0               	movf	printf@c& (0+255),w,b
  4316  000BDC  0D02               	mullw	2
  4317  000BDE  0E01               	movlw	low _dpowers
  4318  000BE0  24F3               	addwf	prodl,w,c
  4319  000BE2  6EF6               	movwf	tblptrl,c
  4320  000BE4  0E08               	movlw	high _dpowers
  4321  000BE6  20F4               	addwfc	prodh,w,c
  4322  000BE8  6EF7               	movwf	tblptrh,c
  4323  000BEA                     	if	1	;There are 3 active tblptr bytes
  4324  000BEA  6AF8               	clrf	tblptru,c
  4325  000BEC  0E00               	movlw	low (__mediumconst shr (0+16))
  4326  000BEE  22F8               	addwfc	tblptru,f,c
  4327  000BF0                     	endif
  4328  000BF0  0009               	tblrd		*+
  4329  000BF2  50F5               	movf	tablat,w,c
  4330  000BF4  5DDE               	subwf	printf@val& (0+255),w,b
  4331  000BF6  0009               	tblrd		*+
  4332  000BF8  50F5               	movf	tablat,w,c
  4333  000BFA  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  4334  000BFC  A0D8               	btfss	status,0,c
  4335  000BFE  D025               	goto	l401
  4336                           
  4337                           ; BSR set to: 0
  4338                           
  4339                           ; BSR set to: 0
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1307: break;
  4343  000C00  2BE0               	incf	printf@c& (0+255),f,b
  4344  000C02  D7E7               	goto	l2113
  4345  000C04                     
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4348                           
  4349                           ; BSR set to: 0
  4350  000C04  0E01               	movlw	1
  4351  000C06  6FE0               	movwf	printf@c& (0+255),b
  4352  000C08                     l2127:
  4353                           
  4354                           ; BSR set to: 0
  4355  000C08  0E04               	movlw	4
  4356  000C0A  19E0               	xorwf	printf@c& (0+255),w,b
  4357  000C0C  B4D8               	btfsc	status,2,c
  4358  000C0E  D01D               	goto	l401
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4362                           
  4363                           ; BSR set to: 0
  4364                           
  4365                           ; BSR set to: 0
  4366  000C10  51E0               	movf	printf@c& (0+255),w,b
  4367  000C12  0D02               	mullw	2
  4368  000C14  0E0B               	movlw	low _hexpowers
  4369  000C16  24F3               	addwf	prodl,w,c
  4370  000C18  6EF6               	movwf	tblptrl,c
  4371  000C1A  0E08               	movlw	high _hexpowers
  4372  000C1C  20F4               	addwfc	prodh,w,c
  4373  000C1E  6EF7               	movwf	tblptrh,c
  4374  000C20                     	if	1	;There are 3 active tblptr bytes
  4375  000C20  6AF8               	clrf	tblptru,c
  4376  000C22  0E00               	movlw	low (__mediumconst shr (0+16))
  4377  000C24  22F8               	addwfc	tblptru,f,c
  4378  000C26                     	endif
  4379  000C26  0009               	tblrd		*+
  4380  000C28  50F5               	movf	tablat,w,c
  4381  000C2A  5DDE               	subwf	printf@val& (0+255),w,b
  4382  000C2C  0009               	tblrd		*+
  4383  000C2E  50F5               	movf	tablat,w,c
  4384  000C30  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  4385  000C32  A0D8               	btfss	status,0,c
  4386  000C34  D00A               	goto	l401
  4387                           
  4388                           ; BSR set to: 0
  4389                           
  4390                           ; BSR set to: 0
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;doprnt.c: 1318: break;
  4394  000C36  2BE0               	incf	printf@c& (0+255),f,b
  4395  000C38  D7E7               	goto	l2127
  4396  000C3A                     l396:
  4397                           
  4398                           ; BSR set to: 0
  4399                           
  4400                           ; BSR set to: 0
  4401  000C3A  51DD               	movf	printf@flag& (0+255),w,b
  4402  000C3C  0B80               	andlw	128
  4403                           
  4404                           ; Switch size 1, requested type "space"
  4405                           ; Number of cases is 2, Range of values is 0 to 128
  4406                           ; switch strategies available:
  4407                           ; Name         Instructions Cycles
  4408                           ; simple_byte            7     4 (average)
  4409                           ;	Chosen strategy is simple_byte
  4410  000C3E  0A00               	xorlw	0	; case 0
  4411  000C40  B4D8               	btfsc	status,2,c
  4412  000C42  D7C5               	goto	l397
  4413  000C44  0A80               	xorlw	128	; case 128
  4414  000C46  B4D8               	btfsc	status,2,c
  4415  000C48  D7DD               	goto	l402
  4416  000C4A                     l401:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 1422: {
  4420                           ;doprnt.c: 1438: if(flag & 0x03)
  4421                           
  4422                           ; BSR set to: 0
  4423  000C4A  C0DD  F0D8         	movff	printf@flag,??_printf
  4424  000C4E  0E03               	movlw	3
  4425  000C50  17D8               	andwf	??_printf& (0+255),f,b
  4426  000C52  B4D8               	btfsc	status,2,c
  4427  000C54  D003               	goto	l406
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 1439: (putch('-') );
  4431  000C56  0E2D               	movlw	45
  4432  000C58  EC7F  F00C         	call	_putch
  4433  000C5C                     l406:
  4434                           
  4435                           ;doprnt.c: 1469: }
  4436                           ;doprnt.c: 1472: prec = c;
  4437  000C5C  C0E0  F0DC         	movff	printf@c,printf@prec
  4438                           
  4439                           ;doprnt.c: 1474: while(prec--) {
  4440  000C60  D05E               	goto	l407
  4441  000C62                     
  4442                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4443  000C62  0100               	movlb	0	; () banked
  4444  000C64  51DC               	movf	printf@prec& (0+255),w,b
  4445  000C66  0D02               	mullw	2
  4446  000C68  0E01               	movlw	low _dpowers
  4447  000C6A  24F3               	addwf	prodl,w,c
  4448  000C6C  6EF6               	movwf	tblptrl,c
  4449  000C6E  0E08               	movlw	high _dpowers
  4450  000C70  20F4               	addwfc	prodh,w,c
  4451  000C72  6EF7               	movwf	tblptrh,c
  4452  000C74                     	if	1	;There are 3 active tblptr bytes
  4453  000C74  6AF8               	clrf	tblptru,c
  4454  000C76  0E00               	movlw	low (__mediumconst shr (0+16))
  4455  000C78  22F8               	addwfc	tblptru,f,c
  4456  000C7A                     	endif
  4457  000C7A  0009               	tblrd		*+
  4458  000C7C  CFF5 F0C9          	movff	tablat,___lwdiv@divisor
  4459  000C80  000A               	tblrd		*-
  4460  000C82  CFF5 F0CA          	movff	tablat,___lwdiv@divisor+1
  4461  000C86  C0DE  F0C7         	movff	printf@val,___lwdiv@dividend
  4462  000C8A  C0DF  F0C8         	movff	printf@val+1,___lwdiv@dividend+1
  4463  000C8E  ECB6  F00B         	call	___lwdiv	;wreg free
  4464  000C92  C0C7  F0CE         	movff	?___lwdiv,___lwmod@dividend
  4465  000C96  C0C8  F0CF         	movff	?___lwdiv+1,___lwmod@dividend+1
  4466  000C9A  0E00               	movlw	0
  4467  000C9C  0100               	movlb	0	; () banked
  4468  000C9E  6FD1               	movwf	(___lwmod@divisor+1)& (0+255),b
  4469  000CA0  0E0A               	movlw	10
  4470  000CA2  6FD0               	movwf	___lwmod@divisor& (0+255),b
  4471  000CA4  EC2E  F00C         	call	___lwmod	;wreg free
  4472  000CA8  0100               	movlb	0	; () banked
  4473  000CAA  51CE               	movf	?___lwmod& (0+255),w,b
  4474  000CAC  0F30               	addlw	48
  4475  000CAE  6FE0               	movwf	printf@c& (0+255),b
  4476                           
  4477                           ;doprnt.c: 1491: break;
  4478  000CB0  D033               	goto	l411
  4479  000CB2                     
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 1499: {
  4482                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4483                           
  4484                           ; BSR set to: 0
  4485  000CB2  C0DE  F0C7         	movff	printf@val,___lwdiv@dividend
  4486  000CB6  C0DF  F0C8         	movff	printf@val+1,___lwdiv@dividend+1
  4487  000CBA  51DC               	movf	printf@prec& (0+255),w,b
  4488  000CBC  0D02               	mullw	2
  4489  000CBE  0E0B               	movlw	low _hexpowers
  4490  000CC0  24F3               	addwf	prodl,w,c
  4491  000CC2  6EF6               	movwf	tblptrl,c
  4492  000CC4  0E08               	movlw	high _hexpowers
  4493  000CC6  20F4               	addwfc	prodh,w,c
  4494  000CC8  6EF7               	movwf	tblptrh,c
  4495  000CCA                     	if	1	;There are 3 active tblptr bytes
  4496  000CCA  6AF8               	clrf	tblptru,c
  4497  000CCC  0E00               	movlw	low (__mediumconst shr (0+16))
  4498  000CCE  22F8               	addwfc	tblptru,f,c
  4499  000CD0                     	endif
  4500  000CD0  0009               	tblrd		*+
  4501  000CD2  CFF5 F0C9          	movff	tablat,___lwdiv@divisor
  4502  000CD6  000A               	tblrd		*-
  4503  000CD8  CFF5 F0CA          	movff	tablat,___lwdiv@divisor+1
  4504  000CDC  ECB6  F00B         	call	___lwdiv	;wreg free
  4505  000CE0  0100               	movlb	0	; () banked
  4506  000CE2  51C7               	movf	?___lwdiv& (0+255),w,b
  4507  000CE4  0B0F               	andlw	15
  4508  000CE6  6FD9               	movwf	printf@idx& (0+255),b
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4512  000CE8  51D9               	movf	printf@idx& (0+255),w,b
  4513  000CEA  0D01               	mullw	1
  4514  000CEC  0E13               	movlw	low STR_21
  4515  000CEE  24F3               	addwf	prodl,w,c
  4516  000CF0  6EF6               	movwf	tblptrl,c
  4517  000CF2  0E08               	movlw	high STR_21
  4518  000CF4  20F4               	addwfc	prodh,w,c
  4519  000CF6  6EF7               	movwf	tblptrh,c
  4520  000CF8                     	if	1	;There are 3 active tblptr bytes
  4521  000CF8  6AF8               	clrf	tblptru,c
  4522  000CFA  0E00               	movlw	low (__mediumconst shr (0+16))
  4523  000CFC  22F8               	addwfc	tblptru,f,c
  4524  000CFE                     	endif
  4525  000CFE  0008               	tblrd		*
  4526  000D00  CFF5 F0E0          	movff	tablat,printf@c
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1523: }
  4530                           
  4531                           ;doprnt.c: 1508: }
  4532                           ;doprnt.c: 1510: break;
  4533  000D04  D009               	goto	l411
  4534  000D06                     
  4535                           ; BSR set to: 0
  4536  000D06  0100               	movlb	0	; () banked
  4537  000D08  51DD               	movf	printf@flag& (0+255),w,b
  4538  000D0A  0B80               	andlw	128
  4539                           
  4540                           ; Switch size 1, requested type "space"
  4541                           ; Number of cases is 2, Range of values is 0 to 128
  4542                           ; switch strategies available:
  4543                           ; Name         Instructions Cycles
  4544                           ; simple_byte            7     4 (average)
  4545                           ;	Chosen strategy is simple_byte
  4546  000D0C  0A00               	xorlw	0	; case 0
  4547  000D0E  B4D8               	btfsc	status,2,c
  4548  000D10  D7A8               	goto	l410
  4549  000D12  0A80               	xorlw	128	; case 128
  4550  000D14  B4D8               	btfsc	status,2,c
  4551  000D16  D7CD               	goto	l412
  4552  000D18                     l411:
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;doprnt.c: 1524: (putch(c) );
  4556                           
  4557                           ; BSR set to: 0
  4558  000D18  51E0               	movf	printf@c& (0+255),w,b
  4559  000D1A  EC7F  F00C         	call	_putch
  4560  000D1E                     l407:
  4561  000D1E  0100               	movlb	0	; () banked
  4562  000D20  07DC               	decf	printf@prec& (0+255),f,b
  4563  000D22  29DC               	incf	printf@prec& (0+255),w,b
  4564  000D24  A4D8               	btfss	status,2,c
  4565  000D26  D7EF               	goto	l409
  4566  000D28                     u1640:
  4567                           
  4568                           ; BSR set to: 0
  4569                           
  4570                           ; BSR set to: 0
  4571  000D28  C0D3  FFF6         	movff	printf@f,tblptrl
  4572  000D2C  C0D4  FFF7         	movff	printf@f+1,tblptrh
  4573  000D30  C0D5  FFF8         	movff	printf@f+2,tblptru
  4574  000D34  0E01               	movlw	1
  4575  000D36  0100               	movlb	0	; () banked
  4576  000D38  27D3               	addwf	printf@f& (0+255),f,b
  4577  000D3A  0E00               	movlw	0
  4578  000D3C  23D4               	addwfc	(printf@f+1)& (0+255),f,b
  4579  000D3E  23D5               	addwfc	(printf@f+2)& (0+255),f,b
  4580  000D40  BAF8               	btfsc	tblptru,5,c
  4581  000D42  D003               	bra	u1657
  4582  000D44  0008               	tblrd		*
  4583  000D46  50F5               	movf	tablat,w,c
  4584  000D48  D005               	bra	u1650
  4585  000D4A                     u1657:
  4586  000D4A  CFF6 FFE9          	movff	tblptrl,fsr0l
  4587  000D4E  CFF7 FFEA          	movff	tblptrh,fsr0h
  4588  000D52  50EF               	movf	indf0,w,c
  4589  000D54                     u1650:
  4590  000D54  0100               	movlb	0	; () banked
  4591  000D56  6FE0               	movwf	printf@c& (0+255),b
  4592  000D58  51E0               	movf	printf@c& (0+255),w,b
  4593  000D5A  B4D8               	btfsc	status,2,c
  4594  000D5C  0012               	return	
  4595  000D5E  D6DA               	goto	l383
  4596  000D60                     __end_of_printf:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           intcon2	equ	0xFF1
  4606                           indf0	equ	0xFEF
  4607                           postinc0	equ	0xFEE
  4608                           plusw0	equ	0xFEB
  4609                           fsr0h	equ	0xFEA
  4610                           fsr0l	equ	0xFE9
  4611                           wreg	equ	0xFE8
  4612                           indf1	equ	0xFE7
  4613                           postinc1	equ	0xFE6
  4614                           postdec1	equ	0xFE5
  4615                           fsr1h	equ	0xFE2
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           plusw2	equ	0xFDB
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _putch *****************
  4626 ;; Defined at:
  4627 ;;		line 258 in file "Drivers/UART_Driver.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  data            1    wreg     unsigned char 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  data            1    0[BANK0 ] unsigned char 
  4632 ;;  max             1    1[BANK0 ] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0
  4643 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4645 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4646 ;;Total ram usage:        2 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    3
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_printf
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text24
  4657  0018FE                     __ptext24:
  4658                           	opt stack 0
  4659  0018FE                     _putch:
  4660                           	opt stack 25
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;incstack = 0
  4664                           ;putch@data stored from wreg
  4665  0018FE  0100               	movlb	0	; () banked
  4666  001900  6FC7               	movwf	putch@data& (0+255),b
  4667                           
  4668                           ;UART_Driver.c: 259: uint8_t max = 0;
  4669  001902  0E00               	movlw	0
  4670  001904  0100               	movlb	0	; () banked
  4671  001906  6FC8               	movwf	putch@max& (0+255),b
  4672                           
  4673                           ;UART_Driver.c: 261: while(TXSTAbits.TRMT == 0 && max < 200) {
  4674  001908  D005               	goto	l166
  4675  00190A                     
  4676                           ; BSR set to: 0
  4677                           ;UART_Driver.c: 262: max++;
  4678                           
  4679                           ; BSR set to: 0
  4680  00190A  2BC8               	incf	putch@max& (0+255),f,b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;UART_Driver.c: 263: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  4684  00190C  0E06               	movlw	6
  4685  00190E                     u2247:
  4686  00190E  2EE8               	decfsz	wreg,f,c
  4687  001910  D7FE               	bra	u2247
  4688  001912  D000               	nop2	
  4689  001914                     l166:
  4690  001914  B2AC               	btfsc	4012,1,c	;volatile
  4691  001916  D004               	goto	u1460
  4692  001918  0EC7               	movlw	199
  4693  00191A  0100               	movlb	0	; () banked
  4694  00191C  65C8               	cpfsgt	putch@max& (0+255),b
  4695  00191E  D7F5               	goto	l167
  4696  001920                     u1460:
  4697                           
  4698                           ;UART_Driver.c: 264: }
  4699                           ;UART_Driver.c: 265: TXREG = data;
  4700                           
  4701                           ; BSR set to: 0
  4702  001920  C0C7  FFAD         	movff	putch@data,4013	;volatile
  4703  001924  0012               	return		;funcret
  4704  001926                     __end_of_putch:
  4705                           	opt stack 0
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           prodh	equ	0xFF4
  4711                           prodl	equ	0xFF3
  4712                           intcon	equ	0xFF2
  4713                           intcon2	equ	0xFF1
  4714                           indf0	equ	0xFEF
  4715                           postinc0	equ	0xFEE
  4716                           plusw0	equ	0xFEB
  4717                           fsr0h	equ	0xFEA
  4718                           fsr0l	equ	0xFE9
  4719                           wreg	equ	0xFE8
  4720                           indf1	equ	0xFE7
  4721                           postinc1	equ	0xFE6
  4722                           postdec1	equ	0xFE5
  4723                           fsr1h	equ	0xFE2
  4724                           fsr1l	equ	0xFE1
  4725                           indf2	equ	0xFDF
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           plusw2	equ	0xFDB
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function ___lwmod *****************
  4734 ;; Defined at:
  4735 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  dividend        2    7[BANK0 ] unsigned int 
  4738 ;;  divisor         2    9[BANK0 ] unsigned int 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  counter         1   11[BANK0 ] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  2    7[BANK0 ] unsigned int 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4750 ;;      Params:         0       4       0       0       0       0       0       0       0
  4751 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4753 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4754 ;;Total ram usage:        5 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    3
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_printf
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text25
  4765  00185C                     __ptext25:
  4766                           	opt stack 0
  4767  00185C                     ___lwmod:
  4768                           	opt stack 25
  4769                           
  4770                           ;incstack = 0
  4771  00185C  0100               	movlb	0	; () banked
  4772  00185E  51D0               	movf	___lwmod@divisor& (0+255),w,b
  4773  001860  11D1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4774  001862  B4D8               	btfsc	status,2,c
  4775  001864  D018               	goto	l834
  4776                           
  4777                           ; BSR set to: 0
  4778  001866  0E01               	movlw	1
  4779  001868  6FD2               	movwf	___lwmod@counter& (0+255),b
  4780  00186A  D004               	goto	l829
  4781  00186C                     
  4782                           ; BSR set to: 0
  4783                           
  4784                           ; BSR set to: 0
  4785  00186C  90D8               	bcf	status,0,c
  4786  00186E  37D0               	rlcf	___lwmod@divisor& (0+255),f,b
  4787  001870  37D1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4788  001872  2BD2               	incf	___lwmod@counter& (0+255),f,b
  4789  001874                     l829:
  4790                           
  4791                           ; BSR set to: 0
  4792                           
  4793                           ; BSR set to: 0
  4794  001874  AFD1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4795  001876  D7FA               	goto	l830
  4796  001878                     u1510:
  4797                           
  4798                           ; BSR set to: 0
  4799                           
  4800                           ; BSR set to: 0
  4801                           
  4802                           ; BSR set to: 0
  4803  001878  51D0               	movf	___lwmod@divisor& (0+255),w,b
  4804  00187A  5DCE               	subwf	___lwmod@dividend& (0+255),w,b
  4805  00187C  51D1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4806  00187E  59CF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4807  001880  A0D8               	btfss	status,0,c
  4808  001882  D004               	goto	l833
  4809                           
  4810                           ; BSR set to: 0
  4811  001884  51D0               	movf	___lwmod@divisor& (0+255),w,b
  4812  001886  5FCE               	subwf	___lwmod@dividend& (0+255),f,b
  4813  001888  51D1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4814  00188A  5BCF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4815  00188C                     l833:
  4816                           
  4817                           ; BSR set to: 0
  4818                           
  4819                           ; BSR set to: 0
  4820  00188C  90D8               	bcf	status,0,c
  4821  00188E  33D1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4822  001890  33D0               	rrcf	___lwmod@divisor& (0+255),f,b
  4823                           
  4824                           ; BSR set to: 0
  4825  001892  2FD2               	decfsz	___lwmod@counter& (0+255),f,b
  4826  001894  D7F1               	goto	u1510
  4827  001896                     l834:
  4828                           
  4829                           ; BSR set to: 0
  4830                           
  4831                           ; BSR set to: 0
  4832  001896  C0CE  F0CE         	movff	___lwmod@dividend,?___lwmod
  4833  00189A  C0CF  F0CF         	movff	___lwmod@dividend+1,?___lwmod+1
  4834                           
  4835                           ; BSR set to: 0
  4836  00189E  0012               	return		;funcret
  4837  0018A0                     __end_of___lwmod:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           intcon2	equ	0xFF1
  4847                           indf0	equ	0xFEF
  4848                           postinc0	equ	0xFEE
  4849                           plusw0	equ	0xFEB
  4850                           fsr0h	equ	0xFEA
  4851                           fsr0l	equ	0xFE9
  4852                           wreg	equ	0xFE8
  4853                           indf1	equ	0xFE7
  4854                           postinc1	equ	0xFE6
  4855                           postdec1	equ	0xFE5
  4856                           fsr1h	equ	0xFE2
  4857                           fsr1l	equ	0xFE1
  4858                           indf2	equ	0xFDF
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           plusw2	equ	0xFDB
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function ___lwdiv *****************
  4867 ;; Defined at:
  4868 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  dividend        2    0[BANK0 ] unsigned int 
  4871 ;;  divisor         2    2[BANK0 ] unsigned int 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  quotient        2    5[BANK0 ] unsigned int 
  4874 ;;  counter         1    4[BANK0 ] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  2    0[BANK0 ] unsigned int 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4884 ;;      Params:         0       4       0       0       0       0       0       0       0
  4885 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4887 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4888 ;;Total ram usage:        7 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    3
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_printf
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text26
  4899  00176C                     __ptext26:
  4900                           	opt stack 0
  4901  00176C                     ___lwdiv:
  4902                           	opt stack 25
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;incstack = 0
  4906  00176C  0E00               	movlw	0
  4907  00176E  0100               	movlb	0	; () banked
  4908  001770  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4909  001772  0E00               	movlw	0
  4910  001774  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  4911                           
  4912                           ; BSR set to: 0
  4913  001776  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4914  001778  11CA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4915  00177A  B4D8               	btfsc	status,2,c
  4916  00177C  D01C               	goto	l824
  4917                           
  4918                           ; BSR set to: 0
  4919  00177E  0E01               	movlw	1
  4920  001780  6FCB               	movwf	___lwdiv@counter& (0+255),b
  4921  001782  D004               	goto	l819
  4922  001784                     
  4923                           ; BSR set to: 0
  4924                           
  4925                           ; BSR set to: 0
  4926  001784  90D8               	bcf	status,0,c
  4927  001786  37C9               	rlcf	___lwdiv@divisor& (0+255),f,b
  4928  001788  37CA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4929  00178A  2BCB               	incf	___lwdiv@counter& (0+255),f,b
  4930  00178C                     l819:
  4931                           
  4932                           ; BSR set to: 0
  4933                           
  4934                           ; BSR set to: 0
  4935  00178C  AFCA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4936  00178E  D7FA               	goto	l820
  4937  001790                     u1480:
  4938                           
  4939                           ; BSR set to: 0
  4940                           
  4941                           ; BSR set to: 0
  4942                           
  4943                           ; BSR set to: 0
  4944  001790  90D8               	bcf	status,0,c
  4945  001792  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  4946  001794  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4947                           
  4948                           ; BSR set to: 0
  4949  001796  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4950  001798  5DC7               	subwf	___lwdiv@dividend& (0+255),w,b
  4951  00179A  51CA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4952  00179C  59C8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4953  00179E  A0D8               	btfss	status,0,c
  4954  0017A0  D005               	goto	l823
  4955                           
  4956                           ; BSR set to: 0
  4957  0017A2  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4958  0017A4  5FC7               	subwf	___lwdiv@dividend& (0+255),f,b
  4959  0017A6  51CA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4960  0017A8  5BC8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4961                           
  4962                           ; BSR set to: 0
  4963  0017AA  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  4964  0017AC                     l823:
  4965                           
  4966                           ; BSR set to: 0
  4967                           
  4968                           ; BSR set to: 0
  4969  0017AC  90D8               	bcf	status,0,c
  4970  0017AE  33CA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4971  0017B0  33C9               	rrcf	___lwdiv@divisor& (0+255),f,b
  4972                           
  4973                           ; BSR set to: 0
  4974  0017B2  2FCB               	decfsz	___lwdiv@counter& (0+255),f,b
  4975  0017B4  D7ED               	goto	u1480
  4976  0017B6                     l824:
  4977                           
  4978                           ; BSR set to: 0
  4979                           
  4980                           ; BSR set to: 0
  4981  0017B6  C0CC  F0C7         	movff	___lwdiv@quotient,?___lwdiv
  4982  0017BA  C0CD  F0C8         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4983                           
  4984                           ; BSR set to: 0
  4985  0017BE  0012               	return		;funcret
  4986  0017C0                     __end_of___lwdiv:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           intcon2	equ	0xFF1
  4996                           indf0	equ	0xFEF
  4997                           postinc0	equ	0xFEE
  4998                           plusw0	equ	0xFEB
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           indf1	equ	0xFE7
  5003                           postinc1	equ	0xFE6
  5004                           postdec1	equ	0xFE5
  5005                           fsr1h	equ	0xFE2
  5006                           fsr1l	equ	0xFE1
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           plusw2	equ	0xFDB
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _C_DOOR_ReadSensors *****************
  5016 ;; Defined at:
  5017 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  d               1    4[BANK0 ] unsigned char 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0
  5032 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5033 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5034 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5035 ;;Total ram usage:        5 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    3
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_main
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text27
  5046  0014FA                     __ptext27:
  5047                           	opt stack 0
  5048  0014FA                     _C_DOOR_ReadSensors:
  5049                           	opt stack 27
  5050                           
  5051                           ;DOOR_Controller.c: 103: uint8_t d;
  5052                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;incstack = 0
  5056  0014FA  0E00               	movlw	0
  5057  0014FC  0100               	movlb	0	; () banked
  5058  0014FE  6FCB               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  5059  001500  D03E               	goto	l42
  5060  001502                     
  5061                           ; BSR set to: 0
  5062                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 0x01) == 0);
  5063                           
  5064                           ; BSR set to: 0
  5065  001502  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5066  001504  0D0A               	mullw	10
  5067  001506  0E06               	movlw	6
  5068  001508  26F3               	addwf	prodl,f,c
  5069  00150A  0E00               	movlw	0
  5070  00150C  22F4               	addwfc	prodh,f,c
  5071  00150E  0E60               	movlw	low _doors
  5072  001510  24F3               	addwf	prodl,w,c
  5073  001512  6ED9               	movwf	fsr2l,c
  5074  001514  0E00               	movlw	high _doors
  5075  001516  20F4               	addwfc	prodh,w,c
  5076  001518  6EDA               	movwf	fsr2h,c
  5077  00151A  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5078  00151C  0D0A               	mullw	10
  5079  00151E  0E09               	movlw	9
  5080  001520  26F3               	addwf	prodl,f,c
  5081  001522  0E00               	movlw	0
  5082  001524  22F4               	addwfc	prodh,f,c
  5083  001526  0E60               	movlw	low _doors
  5084  001528  24F3               	addwf	prodl,w,c
  5085  00152A  6EE1               	movwf	fsr1l,c
  5086  00152C  0E00               	movlw	high _doors
  5087  00152E  20F4               	addwfc	prodh,w,c
  5088  001530  6EE2               	movwf	fsr1h,c
  5089  001532  50E7               	movf	indf1,w,c
  5090  001534  6FC7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  5091  001536  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5092  001538  0D0A               	mullw	10
  5093  00153A  0E07               	movlw	7
  5094  00153C  26F3               	addwf	prodl,f,c
  5095  00153E  0E00               	movlw	0
  5096  001540  22F4               	addwfc	prodh,f,c
  5097  001542  0E60               	movlw	low _doors
  5098  001544  24F3               	addwf	prodl,w,c
  5099  001546  6EE1               	movwf	fsr1l,c
  5100  001548  0E00               	movlw	high _doors
  5101  00154A  20F4               	addwfc	prodh,w,c
  5102  00154C  6EE2               	movwf	fsr1h,c
  5103  00154E  CFE6 F0C8          	movff	postinc1,??_C_DOOR_ReadSensors+1
  5104  001552  CFE5 F0C9          	movff	postdec1,??_C_DOOR_ReadSensors+2
  5105  001556  C0C8  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  5106  00155A  C0C9  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  5107  00155E  50E7               	movf	indf1,w,c
  5108  001560  6FCA               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  5109  001562  2BC7               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  5110  001564  D002               	goto	u1834
  5111  001566                     u1835:
  5112  001566  90D8               	bcf	status,0,c
  5113  001568  33CA               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  5114  00156A                     u1834:
  5115  00156A  2FC7               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  5116  00156C  D7FC               	goto	u1835
  5117  00156E  0100               	movlb	0	; () banked
  5118  001570  B1CA               	btfsc	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  5119  001572  D002               	goto	u1840
  5120  001574  0E01               	movlw	1
  5121  001576  D001               	goto	u1850
  5122  001578                     u1840:
  5123  001578  0E00               	movlw	0
  5124  00157A                     u1850:
  5125  00157A  6EDF               	movwf	indf2,c
  5126                           
  5127                           ; BSR set to: 0
  5128  00157C  2BCB               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  5129  00157E                     l42:
  5130                           
  5131                           ; BSR set to: 0
  5132                           
  5133                           ; BSR set to: 0
  5134  00157E  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5135  001580  6FC7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  5136  001582  6BC8               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  5137  001584  5037               	movf	_door_cnt,w,c
  5138  001586  5DC7               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  5139  001588  51C8               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  5140  00158A  0A80               	xorlw	128
  5141  00158C  6FC9               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  5142  00158E  5038               	movf	_door_cnt+1,w,c
  5143  001590  0A80               	xorlw	128
  5144  001592  59C9               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  5145  001594  B0D8               	btfsc	status,0,c
  5146  001596  0012               	return	
  5147  001598  D7B4               	goto	l43
  5148  00159A                     __end_of_C_DOOR_ReadSensors:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           intcon2	equ	0xFF1
  5158                           indf0	equ	0xFEF
  5159                           postinc0	equ	0xFEE
  5160                           plusw0	equ	0xFEB
  5161                           fsr0h	equ	0xFEA
  5162                           fsr0l	equ	0xFE9
  5163                           wreg	equ	0xFE8
  5164                           indf1	equ	0xFE7
  5165                           postinc1	equ	0xFE6
  5166                           postdec1	equ	0xFE5
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _LowISR *****************
  5178 ;; Defined at:
  5179 ;;		line 199 in file "main.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5195 ;;      Temps:         21       0       0       0       0       0       0       0       0
  5196 ;;      Totals:        21       0       0       0       0       0       0       0       0
  5197 ;;Total ram usage:       21 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    2
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		Interrupt level 1
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	intcodelo
  5208  000018                     __pintcodelo:
  5209                           	opt stack 0
  5210  000018                     _LowISR:
  5211                           	opt stack 24
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;incstack = 0
  5215  000018  8043               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5216  00001A  CFD8 F014          	movff	status,??_LowISR
  5217  00001E  CFE8 F015          	movff	wreg,??_LowISR+1
  5218  000022  CFE0 F016          	movff	bsr,??_LowISR+2
  5219  000026  CFFA F017          	movff	pclath,??_LowISR+3
  5220  00002A  CFFB F018          	movff	pclatu,??_LowISR+4
  5221  00002E  CFE9 F019          	movff	fsr0l,??_LowISR+5
  5222  000032  CFEA F01A          	movff	fsr0h,??_LowISR+6
  5223  000036  CFE1 F01B          	movff	fsr1l,??_LowISR+7
  5224  00003A  CFE2 F01C          	movff	fsr1h,??_LowISR+8
  5225  00003E  CFD9 F01D          	movff	fsr2l,??_LowISR+9
  5226  000042  CFDA F01E          	movff	fsr2h,??_LowISR+10
  5227  000046  CFF3 F01F          	movff	prodl,??_LowISR+11
  5228  00004A  CFF4 F020          	movff	prodh,??_LowISR+12
  5229  00004E  CFF6 F021          	movff	tblptrl,??_LowISR+13
  5230  000052  CFF7 F022          	movff	tblptrh,??_LowISR+14
  5231  000056  CFF8 F023          	movff	tblptru,??_LowISR+15
  5232  00005A  CFF5 F024          	movff	tablat,??_LowISR+16
  5233  00005E  C043  F025         	movff	btemp,??_LowISR+17
  5234  000062  C044  F026         	movff	btemp+1,??_LowISR+18
  5235  000066  C045  F027         	movff	btemp+2,??_LowISR+19
  5236  00006A  C046  F028         	movff	btemp+3,??_LowISR+20
  5237                           
  5238                           ;main.c: 201: if (INTCONbits.TMR0IF) {
  5239  00006E  A4F2               	btfss	intcon,2,c	;volatile
  5240  000070  D003               	goto	i1l365
  5241                           
  5242                           ;main.c: 202: INTCONbits.TMR0IF = 0;
  5243  000072  94F2               	bcf	intcon,2,c	;volatile
  5244                           
  5245                           ;main.c: 203: tick = 1;
  5246  000074  0E01               	movlw	1
  5247  000076  6E3E               	movwf	_tick,c
  5248  000078                     i1l365:
  5249                           
  5250                           ;main.c: 204: }
  5251                           ;main.c: 207: if (PIR1bits.TMR1IF) {
  5252  000078  A09E               	btfss	3998,0,c	;volatile
  5253  00007A  D00C               	goto	i1l366
  5254                           
  5255                           ;main.c: 208: TMR1H = 0x5E;
  5256  00007C  0E5E               	movlw	94
  5257  00007E  6ECF               	movwf	4047,c	;volatile
  5258                           
  5259                           ;main.c: 209: TMR1L = 0x00;
  5260  000080  0E00               	movlw	0
  5261  000082  6ECE               	movwf	4046,c	;volatile
  5262                           
  5263                           ;main.c: 211: if (lockDelayCnt < 100-1) {
  5264  000084  0E63               	movlw	99
  5265  000086  6040               	cpfslt	_lockDelayCnt,c
  5266  000088  D002               	goto	i1l367
  5267                           
  5268                           ;main.c: 212: lockDelayCnt++;
  5269  00008A  2A40               	incf	_lockDelayCnt,f,c
  5270                           
  5271                           ;main.c: 213: } else {
  5272  00008C  D002               	goto	i1l368
  5273  00008E                     i1l367:
  5274                           
  5275                           ;main.c: 214: lock = 1;
  5276  00008E  0E01               	movlw	1
  5277  000090  6E3D               	movwf	_lock,c
  5278  000092                     i1l368:
  5279                           
  5280                           ;main.c: 215: }
  5281                           ;main.c: 217: PIR1bits.TMR1IF = 0;
  5282  000092  909E               	bcf	3998,0,c	;volatile
  5283  000094                     i1l366:
  5284  000094  C028  F046         	movff	??_LowISR+20,btemp+3
  5285  000098  C027  F045         	movff	??_LowISR+19,btemp+2
  5286  00009C  C026  F044         	movff	??_LowISR+18,btemp+1
  5287  0000A0  C025  F043         	movff	??_LowISR+17,btemp
  5288  0000A4  C024  FFF5         	movff	??_LowISR+16,tablat
  5289  0000A8  C023  FFF8         	movff	??_LowISR+15,tblptru
  5290  0000AC  C022  FFF7         	movff	??_LowISR+14,tblptrh
  5291  0000B0  C021  FFF6         	movff	??_LowISR+13,tblptrl
  5292  0000B4  C020  FFF4         	movff	??_LowISR+12,prodh
  5293  0000B8  C01F  FFF3         	movff	??_LowISR+11,prodl
  5294  0000BC  C01E  FFDA         	movff	??_LowISR+10,fsr2h
  5295  0000C0  C01D  FFD9         	movff	??_LowISR+9,fsr2l
  5296  0000C4  C01C  FFE2         	movff	??_LowISR+8,fsr1h
  5297  0000C8  C01B  FFE1         	movff	??_LowISR+7,fsr1l
  5298  0000CC  C01A  FFEA         	movff	??_LowISR+6,fsr0h
  5299  0000D0  C019  FFE9         	movff	??_LowISR+5,fsr0l
  5300  0000D4  C018  FFFB         	movff	??_LowISR+4,pclatu
  5301  0000D8  C017  FFFA         	movff	??_LowISR+3,pclath
  5302  0000DC  C016  FFE0         	movff	??_LowISR+2,bsr
  5303  0000E0  C015  FFE8         	movff	??_LowISR+1,wreg
  5304  0000E4  C014  FFD8         	movff	??_LowISR,status
  5305  0000E8  9043               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5306  0000EA  0010               	retfie	
  5307  0000EC                     __end_of_LowISR:
  5308                           	opt stack 0
  5309                           pclatu	equ	0xFFB
  5310                           pclath	equ	0xFFA
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           intcon2	equ	0xFF1
  5319                           indf0	equ	0xFEF
  5320                           postinc0	equ	0xFEE
  5321                           plusw0	equ	0xFEB
  5322                           fsr0h	equ	0xFEA
  5323                           fsr0l	equ	0xFE9
  5324                           wreg	equ	0xFE8
  5325                           indf1	equ	0xFE7
  5326                           postinc1	equ	0xFE6
  5327                           postdec1	equ	0xFE5
  5328                           fsr1h	equ	0xFE2
  5329                           fsr1l	equ	0xFE1
  5330                           bsr	equ	0xFE0
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           plusw2	equ	0xFDB
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _HighISR *****************
  5340 ;; Defined at:
  5341 ;;		line 270 in file "Drivers/UART_Driver.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5357 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5358 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5359 ;;Total ram usage:       18 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    1
  5362 ;; This function calls:
  5363 ;;		_fillDataBuffer
  5364 ;; This function is called by:
  5365 ;;		Interrupt level 2
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	intcode
  5370  000008                     __pintcode:
  5371                           	opt stack 0
  5372  000008                     _HighISR:
  5373                           	opt stack 24
  5374                           
  5375                           ;incstack = 0
  5376  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5377  00000A  ED6F  F009         	call	int_func,f	;refresh shadow registers
  5378                           pclatu	equ	0xFFB
  5379                           pclath	equ	0xFFA
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodh	equ	0xFF4
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           intcon2	equ	0xFF1
  5388                           indf0	equ	0xFEF
  5389                           postinc0	equ	0xFEE
  5390                           plusw0	equ	0xFEB
  5391                           fsr0h	equ	0xFEA
  5392                           fsr0l	equ	0xFE9
  5393                           wreg	equ	0xFE8
  5394                           indf1	equ	0xFE7
  5395                           postinc1	equ	0xFE6
  5396                           postdec1	equ	0xFE5
  5397                           fsr1h	equ	0xFE2
  5398                           fsr1l	equ	0xFE1
  5399                           bsr	equ	0xFE0
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           postdec2	equ	0xFDD
  5403                           plusw2	equ	0xFDB
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408                           	psect	intcode_body
  5409  0012DE                     __pintcode_body:
  5410                           	opt stack 24
  5411  0012DE                     int_func:
  5412                           	opt stack 24
  5413  0012DE  0006               	pop		; remove dummy address from shadow register refresh
  5414  0012E0  CFFA F002          	movff	pclath,??_HighISR
  5415  0012E4  CFFB F003          	movff	pclatu,??_HighISR+1
  5416  0012E8  CFE9 F004          	movff	fsr0l,??_HighISR+2
  5417  0012EC  CFEA F005          	movff	fsr0h,??_HighISR+3
  5418  0012F0  CFE1 F006          	movff	fsr1l,??_HighISR+4
  5419  0012F4  CFE2 F007          	movff	fsr1h,??_HighISR+5
  5420  0012F8  CFD9 F008          	movff	fsr2l,??_HighISR+6
  5421  0012FC  CFDA F009          	movff	fsr2h,??_HighISR+7
  5422  001300  CFF3 F00A          	movff	prodl,??_HighISR+8
  5423  001304  CFF4 F00B          	movff	prodh,??_HighISR+9
  5424  001308  CFF6 F00C          	movff	tblptrl,??_HighISR+10
  5425  00130C  CFF7 F00D          	movff	tblptrh,??_HighISR+11
  5426  001310  CFF8 F00E          	movff	tblptru,??_HighISR+12
  5427  001314  CFF5 F00F          	movff	tablat,??_HighISR+13
  5428  001318  C043  F010         	movff	btemp,??_HighISR+14
  5429  00131C  C044  F011         	movff	btemp+1,??_HighISR+15
  5430  001320  C045  F012         	movff	btemp+2,??_HighISR+16
  5431  001324  C046  F013         	movff	btemp+3,??_HighISR+17
  5432                           
  5433                           ;UART_Driver.c: 271: if (PIR1bits.RC1IF) {
  5434  001328  AA9E               	btfss	3998,5,c	;volatile
  5435  00132A  D00E               	goto	i2l176
  5436                           
  5437                           ;UART_Driver.c: 272: PIR1bits.RC1IF = 0;
  5438  00132C  9A9E               	bcf	3998,5,c	;volatile
  5439                           
  5440                           ;UART_Driver.c: 275: if(RCSTAbits.FERR == 1) {
  5441  00132E  A4AB               	btfss	4011,2,c	;volatile
  5442  001330  D003               	goto	i2l177
  5443                           
  5444                           ;UART_Driver.c: 276: RCREG = 0x00;
  5445  001332  0E00               	movlw	0
  5446  001334  6EAE               	movwf	4014,c	;volatile
  5447                           
  5448                           ;UART_Driver.c: 277: return;
  5449  001336  D008               	goto	i2l176
  5450  001338                     i2l177:
  5451                           
  5452                           ;UART_Driver.c: 278: }
  5453                           ;UART_Driver.c: 280: if(RCSTAbits.OERR == 1) {
  5454  001338  A2AB               	btfss	4011,1,c	;volatile
  5455  00133A  D003               	goto	i2l179
  5456                           
  5457                           ;UART_Driver.c: 281: RCSTAbits.CREN = 0;
  5458  00133C  98AB               	bcf	4011,4,c	;volatile
  5459                           
  5460                           ;UART_Driver.c: 282: RCSTAbits.CREN = 1;
  5461  00133E  88AB               	bsf	4011,4,c	;volatile
  5462                           
  5463                           ;UART_Driver.c: 283: return;
  5464  001340  D003               	goto	i2l176
  5465  001342                     i2l179:
  5466                           
  5467                           ;UART_Driver.c: 284: }
  5468                           ;UART_Driver.c: 285: fillDataBuffer(RCREG);
  5469  001342  50AE               	movf	4014,w,c	;volatile
  5470  001344  ECB0  F006         	call	_fillDataBuffer
  5471  001348                     i2l176:
  5472  001348  C013  F046         	movff	??_HighISR+17,btemp+3
  5473  00134C  C012  F045         	movff	??_HighISR+16,btemp+2
  5474  001350  C011  F044         	movff	??_HighISR+15,btemp+1
  5475  001354  C010  F043         	movff	??_HighISR+14,btemp
  5476  001358  C00F  FFF5         	movff	??_HighISR+13,tablat
  5477  00135C  C00E  FFF8         	movff	??_HighISR+12,tblptru
  5478  001360  C00D  FFF7         	movff	??_HighISR+11,tblptrh
  5479  001364  C00C  FFF6         	movff	??_HighISR+10,tblptrl
  5480  001368  C00B  FFF4         	movff	??_HighISR+9,prodh
  5481  00136C  C00A  FFF3         	movff	??_HighISR+8,prodl
  5482  001370  C009  FFDA         	movff	??_HighISR+7,fsr2h
  5483  001374  C008  FFD9         	movff	??_HighISR+6,fsr2l
  5484  001378  C007  FFE2         	movff	??_HighISR+5,fsr1h
  5485  00137C  C006  FFE1         	movff	??_HighISR+4,fsr1l
  5486  001380  C005  FFEA         	movff	??_HighISR+3,fsr0h
  5487  001384  C004  FFE9         	movff	??_HighISR+2,fsr0l
  5488  001388  C003  FFFB         	movff	??_HighISR+1,pclatu
  5489  00138C  C002  FFFA         	movff	??_HighISR,pclath
  5490  001390  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5491  001392  0011               	retfie		f
  5492  001394                     __end_of_HighISR:
  5493                           	opt stack 0
  5494                           pclatu	equ	0xFFB
  5495                           pclath	equ	0xFFA
  5496                           tblptru	equ	0xFF8
  5497                           tblptrh	equ	0xFF7
  5498                           tblptrl	equ	0xFF6
  5499                           tablat	equ	0xFF5
  5500                           prodh	equ	0xFF4
  5501                           prodl	equ	0xFF3
  5502                           intcon	equ	0xFF2
  5503                           intcon2	equ	0xFF1
  5504                           indf0	equ	0xFEF
  5505                           postinc0	equ	0xFEE
  5506                           plusw0	equ	0xFEB
  5507                           fsr0h	equ	0xFEA
  5508                           fsr0l	equ	0xFE9
  5509                           wreg	equ	0xFE8
  5510                           indf1	equ	0xFE7
  5511                           postinc1	equ	0xFE6
  5512                           postdec1	equ	0xFE5
  5513                           fsr1h	equ	0xFE2
  5514                           fsr1l	equ	0xFE1
  5515                           bsr	equ	0xFE0
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           plusw2	equ	0xFDB
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _fillDataBuffer *****************
  5525 ;; Defined at:
  5526 ;;		line 68 in file "Drivers/UART_Driver.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  data            1    wreg     unsigned char 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  data            1    0[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5540 ;;      Params:         0       0       0       0       0       0       0       0       0
  5541 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5543 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5544 ;;Total ram usage:        1 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_HighISR
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text30
  5554  000D60                     __ptext30:
  5555                           	opt stack 0
  5556  000D60                     _fillDataBuffer:
  5557                           	opt stack 24
  5558                           
  5559                           ;incstack = 0
  5560                           ;fillDataBuffer@data stored from wreg
  5561  000D60  6E01               	movwf	fillDataBuffer@data,c
  5562                           
  5563                           ;UART_Driver.c: 69: switch(readBuffer.state) {
  5564  000D62  D0AE               	goto	i2l120
  5565  000D64                     
  5566                           ;UART_Driver.c: 71: if(data == 0x26) {
  5567  000D64  0E26               	movlw	38
  5568  000D66  1801               	xorwf	fillDataBuffer@data,w,c
  5569  000D68  A4D8               	btfss	status,2,c
  5570  000D6A  D00E               	goto	i2l122
  5571                           
  5572                           ;UART_Driver.c: 72: readBuffer.typeCnt = 0;
  5573  000D6C  0E00               	movlw	0
  5574  000D6E  0101               	movlb	1	; () banked
  5575  000D70  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5576                           
  5577                           ;UART_Driver.c: 73: readBuffer.senderCnt = 0;
  5578  000D72  0E00               	movlw	0
  5579  000D74  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5580                           
  5581                           ;UART_Driver.c: 74: readBuffer.commandCnt = 0;
  5582  000D76  0E00               	movlw	0
  5583  000D78  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5584                           
  5585                           ;UART_Driver.c: 75: readBuffer.messageCnt = 0;
  5586  000D7A  0E00               	movlw	0
  5587  000D7C  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5588                           
  5589                           ;UART_Driver.c: 76: readReady = 0;
  5590  000D7E  0E00               	movlw	0
  5591  000D80  6E41               	movwf	_readReady,c
  5592                           
  5593                           ;UART_Driver.c: 77: readBuffer.state = 0x01;
  5594  000D82  0E01               	movlw	1
  5595  000D84  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5596                           
  5597                           ;UART_Driver.c: 78: } else {
  5598  000D86  0012               	return	
  5599  000D88                     i2l122:
  5600                           
  5601                           ;UART_Driver.c: 79: readBuffer.state = 0x00;
  5602                           
  5603                           ; BSR set to: 1
  5604  000D88  0E00               	movlw	0
  5605  000D8A  0101               	movlb	1	; () banked
  5606  000D8C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5607                           
  5608                           ; BSR set to: 1
  5609                           ;UART_Driver.c: 81: }
  5610                           ;UART_Driver.c: 82: break;
  5611                           
  5612                           ; BSR set to: 1
  5613                           ;UART_Driver.c: 80: return;
  5614  000D8E  0012               	return	
  5615  000D90                     
  5616                           ; BSR set to: 1
  5617                           ;UART_Driver.c: 85: if (data == 0x3A) {
  5618                           
  5619                           ; BSR set to: 1
  5620  000D90  0E3A               	movlw	58
  5621  000D92  1801               	xorwf	fillDataBuffer@data,w,c
  5622  000D94  A4D8               	btfss	status,2,c
  5623  000D96  D00D               	goto	i2l127
  5624                           
  5625                           ; BSR set to: 1
  5626                           ;UART_Driver.c: 86: readBuffer.state = 0x02;
  5627  000D98  0E02               	movlw	2
  5628  000D9A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5629                           
  5630                           ; BSR set to: 1
  5631                           ;UART_Driver.c: 87: readBuffer.type[readBuffer.typeCnt] = '\0';
  5632  000D9C  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5633  000D9E  0D01               	mullw	1
  5634  000DA0  0E00               	movlw	low _readBuffer
  5635  000DA2  24F3               	addwf	prodl,w,c
  5636  000DA4  6ED9               	movwf	fsr2l,c
  5637  000DA6  0E01               	movlw	high _readBuffer
  5638  000DA8  20F4               	addwfc	prodh,w,c
  5639  000DAA  6EDA               	movwf	fsr2h,c
  5640  000DAC  0E00               	movlw	0
  5641  000DAE  6EDF               	movwf	indf2,c
  5642                           
  5643                           ;UART_Driver.c: 88: } else {
  5644  000DB0  0012               	return	
  5645  000DB2                     i2l127:
  5646                           
  5647                           ; BSR set to: 1
  5648                           ;UART_Driver.c: 89: readBuffer.type[readBuffer.typeCnt] = data;
  5649                           
  5650                           ; BSR set to: 1
  5651  000DB2  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5652  000DB4  0D01               	mullw	1
  5653  000DB6  0E00               	movlw	low _readBuffer
  5654  000DB8  24F3               	addwf	prodl,w,c
  5655  000DBA  6ED9               	movwf	fsr2l,c
  5656  000DBC  0E01               	movlw	high _readBuffer
  5657  000DBE  20F4               	addwfc	prodh,w,c
  5658  000DC0  6EDA               	movwf	fsr2h,c
  5659  000DC2  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5660                           
  5661                           ; BSR set to: 1
  5662                           ;UART_Driver.c: 90: readBuffer.typeCnt++;
  5663  000DC6  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5664                           
  5665                           ; BSR set to: 1
  5666                           ;UART_Driver.c: 91: if(readBuffer.typeCnt > 10) {
  5667  000DC8  0E0A               	movlw	10
  5668  000DCA  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5669  000DCC  0012               	return	
  5670                           
  5671                           ; BSR set to: 1
  5672                           ;UART_Driver.c: 92: readBuffer.typeCnt = 0;
  5673  000DCE  0E00               	movlw	0
  5674  000DD0  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5675                           
  5676                           ; BSR set to: 1
  5677                           ;UART_Driver.c: 93: }
  5678                           ;UART_Driver.c: 94: }
  5679                           ;UART_Driver.c: 95: break;
  5680                           
  5681                           ; BSR set to: 1
  5682  000DD2  0012               	return	
  5683  000DD4                     
  5684                           ; BSR set to: 1
  5685                           ;UART_Driver.c: 98: if (data == 0x3A) {
  5686                           
  5687                           ; BSR set to: 1
  5688  000DD4  0E3A               	movlw	58
  5689  000DD6  1801               	xorwf	fillDataBuffer@data,w,c
  5690  000DD8  A4D8               	btfss	status,2,c
  5691  000DDA  D00D               	goto	i2l131
  5692                           
  5693                           ; BSR set to: 1
  5694                           ;UART_Driver.c: 99: readBuffer.state = 0x03;
  5695  000DDC  0E03               	movlw	3
  5696  000DDE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5697                           
  5698                           ; BSR set to: 1
  5699                           ;UART_Driver.c: 100: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5700  000DE0  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5701  000DE2  0D01               	mullw	1
  5702  000DE4  0E0B               	movlw	low (_readBuffer+11)
  5703  000DE6  24F3               	addwf	prodl,w,c
  5704  000DE8  6ED9               	movwf	fsr2l,c
  5705  000DEA  0E01               	movlw	high (_readBuffer+11)
  5706  000DEC  20F4               	addwfc	prodh,w,c
  5707  000DEE  6EDA               	movwf	fsr2h,c
  5708  000DF0  0E00               	movlw	0
  5709  000DF2  6EDF               	movwf	indf2,c
  5710                           
  5711                           ;UART_Driver.c: 101: } else {
  5712  000DF4  0012               	return	
  5713  000DF6                     i2l131:
  5714                           
  5715                           ; BSR set to: 1
  5716                           ;UART_Driver.c: 102: readBuffer.sender[readBuffer.senderCnt] = data;
  5717                           
  5718                           ; BSR set to: 1
  5719  000DF6  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5720  000DF8  0D01               	mullw	1
  5721  000DFA  0E0B               	movlw	low (_readBuffer+11)
  5722  000DFC  24F3               	addwf	prodl,w,c
  5723  000DFE  6ED9               	movwf	fsr2l,c
  5724  000E00  0E01               	movlw	high (_readBuffer+11)
  5725  000E02  20F4               	addwfc	prodh,w,c
  5726  000E04  6EDA               	movwf	fsr2h,c
  5727  000E06  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5728                           
  5729                           ; BSR set to: 1
  5730                           ;UART_Driver.c: 103: readBuffer.senderCnt++;
  5731  000E0A  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5732                           
  5733                           ; BSR set to: 1
  5734                           ;UART_Driver.c: 104: if(readBuffer.senderCnt > 50) {
  5735  000E0C  0E32               	movlw	50
  5736  000E0E  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5737  000E10  0012               	return	
  5738                           
  5739                           ; BSR set to: 1
  5740                           ;UART_Driver.c: 105: readBuffer.senderCnt = 0;
  5741  000E12  0E00               	movlw	0
  5742  000E14  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5743                           
  5744                           ; BSR set to: 1
  5745                           ;UART_Driver.c: 106: }
  5746                           ;UART_Driver.c: 107: }
  5747                           ;UART_Driver.c: 108: break;
  5748                           
  5749                           ; BSR set to: 1
  5750  000E16  0012               	return	
  5751  000E18                     
  5752                           ; BSR set to: 1
  5753                           ;UART_Driver.c: 111: if (data == 0x3A) {
  5754                           
  5755                           ; BSR set to: 1
  5756  000E18  0E3A               	movlw	58
  5757  000E1A  1801               	xorwf	fillDataBuffer@data,w,c
  5758  000E1C  A4D8               	btfss	status,2,c
  5759  000E1E  D00D               	goto	i2l135
  5760                           
  5761                           ; BSR set to: 1
  5762                           ;UART_Driver.c: 112: readBuffer.state = 0x04;
  5763  000E20  0E04               	movlw	4
  5764  000E22  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5765                           
  5766                           ; BSR set to: 1
  5767                           ;UART_Driver.c: 113: readBuffer.command[readBuffer.commandCnt] = '\0';
  5768  000E24  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5769  000E26  0D01               	mullw	1
  5770  000E28  0E3E               	movlw	low (_readBuffer+62)
  5771  000E2A  24F3               	addwf	prodl,w,c
  5772  000E2C  6ED9               	movwf	fsr2l,c
  5773  000E2E  0E01               	movlw	high (_readBuffer+62)
  5774  000E30  20F4               	addwfc	prodh,w,c
  5775  000E32  6EDA               	movwf	fsr2h,c
  5776  000E34  0E00               	movlw	0
  5777  000E36  6EDF               	movwf	indf2,c
  5778                           
  5779                           ;UART_Driver.c: 114: } else {
  5780  000E38  0012               	return	
  5781  000E3A                     i2l135:
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;UART_Driver.c: 115: readBuffer.command[readBuffer.commandCnt] = data;
  5785                           
  5786                           ; BSR set to: 1
  5787  000E3A  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5788  000E3C  0D01               	mullw	1
  5789  000E3E  0E3E               	movlw	low (_readBuffer+62)
  5790  000E40  24F3               	addwf	prodl,w,c
  5791  000E42  6ED9               	movwf	fsr2l,c
  5792  000E44  0E01               	movlw	high (_readBuffer+62)
  5793  000E46  20F4               	addwfc	prodh,w,c
  5794  000E48  6EDA               	movwf	fsr2h,c
  5795  000E4A  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;UART_Driver.c: 116: readBuffer.commandCnt++;
  5799  000E4E  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5800                           
  5801                           ; BSR set to: 1
  5802                           ;UART_Driver.c: 117: if(readBuffer.commandCnt > 50) {
  5803  000E50  0E32               	movlw	50
  5804  000E52  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5805  000E54  0012               	return	
  5806                           
  5807                           ; BSR set to: 1
  5808                           ;UART_Driver.c: 118: readBuffer.commandCnt = 0;
  5809  000E56  0E00               	movlw	0
  5810  000E58  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5811                           
  5812                           ; BSR set to: 1
  5813                           ;UART_Driver.c: 119: }
  5814                           ;UART_Driver.c: 120: }
  5815                           ;UART_Driver.c: 121: break;
  5816                           
  5817                           ; BSR set to: 1
  5818  000E5A  0012               	return	
  5819  000E5C                     
  5820                           ; BSR set to: 1
  5821                           ;UART_Driver.c: 124: if (data == 0x3A) {
  5822                           
  5823                           ; BSR set to: 1
  5824  000E5C  0E3A               	movlw	58
  5825  000E5E  1801               	xorwf	fillDataBuffer@data,w,c
  5826  000E60  A4D8               	btfss	status,2,c
  5827  000E62  D00D               	goto	i2l139
  5828                           
  5829                           ; BSR set to: 1
  5830                           ;UART_Driver.c: 125: readBuffer.state = 0x05;
  5831  000E64  0E05               	movlw	5
  5832  000E66  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;UART_Driver.c: 126: readBuffer.message[readBuffer.messageCnt] = '\0';
  5836  000E68  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5837  000E6A  0D01               	mullw	1
  5838  000E6C  0E71               	movlw	low (_readBuffer+113)
  5839  000E6E  24F3               	addwf	prodl,w,c
  5840  000E70  6ED9               	movwf	fsr2l,c
  5841  000E72  0E01               	movlw	high (_readBuffer+113)
  5842  000E74  20F4               	addwfc	prodh,w,c
  5843  000E76  6EDA               	movwf	fsr2h,c
  5844  000E78  0E00               	movlw	0
  5845  000E7A  6EDF               	movwf	indf2,c
  5846                           
  5847                           ;UART_Driver.c: 127: } else {
  5848  000E7C  0012               	return	
  5849  000E7E                     i2l139:
  5850                           
  5851                           ; BSR set to: 1
  5852                           ;UART_Driver.c: 128: readBuffer.message[readBuffer.messageCnt] = data;
  5853                           
  5854                           ; BSR set to: 1
  5855  000E7E  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5856  000E80  0D01               	mullw	1
  5857  000E82  0E71               	movlw	low (_readBuffer+113)
  5858  000E84  24F3               	addwf	prodl,w,c
  5859  000E86  6ED9               	movwf	fsr2l,c
  5860  000E88  0E01               	movlw	high (_readBuffer+113)
  5861  000E8A  20F4               	addwfc	prodh,w,c
  5862  000E8C  6EDA               	movwf	fsr2h,c
  5863  000E8E  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5864                           
  5865                           ; BSR set to: 1
  5866                           ;UART_Driver.c: 129: readBuffer.messageCnt++;
  5867  000E92  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5868                           
  5869                           ; BSR set to: 1
  5870                           ;UART_Driver.c: 130: if(readBuffer.messageCnt > 50) {
  5871  000E94  0E32               	movlw	50
  5872  000E96  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5873  000E98  0012               	return	
  5874                           
  5875                           ; BSR set to: 1
  5876                           ;UART_Driver.c: 131: readBuffer.messageCnt = 0;
  5877  000E9A  0E00               	movlw	0
  5878  000E9C  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5879                           
  5880                           ; BSR set to: 1
  5881                           ;UART_Driver.c: 132: }
  5882                           ;UART_Driver.c: 133: }
  5883                           ;UART_Driver.c: 134: break;
  5884                           
  5885                           ; BSR set to: 1
  5886  000E9E  0012               	return	
  5887  000EA0                     
  5888                           ; BSR set to: 1
  5889                           ;UART_Driver.c: 137: if (data == 0x24) {
  5890                           
  5891                           ; BSR set to: 1
  5892  000EA0  0E24               	movlw	36
  5893  000EA2  1801               	xorwf	fillDataBuffer@data,w,c
  5894  000EA4  A4D8               	btfss	status,2,c
  5895  000EA6  D005               	goto	i2l143
  5896                           
  5897                           ; BSR set to: 1
  5898                           ;UART_Driver.c: 139: readBuffer.state = 0x00;
  5899  000EA8  0E00               	movlw	0
  5900  000EAA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5901                           
  5902                           ;UART_Driver.c: 140: readReady = 1;
  5903  000EAC  0E01               	movlw	1
  5904  000EAE  6E41               	movwf	_readReady,c
  5905                           
  5906                           ;UART_Driver.c: 141: } else {
  5907  000EB0  0012               	return	
  5908  000EB2                     i2l143:
  5909                           
  5910                           ; BSR set to: 1
  5911                           ;UART_Driver.c: 143: readBuffer.readId = (uint8_t)(data - 0x30);
  5912                           
  5913                           ; BSR set to: 1
  5914  000EB2  5001               	movf	fillDataBuffer@data,w,c
  5915  000EB4  0FD0               	addlw	208
  5916  000EB6  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;UART_Driver.c: 144: }
  5920                           ;UART_Driver.c: 145: break;
  5921  000EB8  0012               	return	
  5922  000EBA                     
  5923                           ; BSR set to: 1
  5924                           ;UART_Driver.c: 148: readBuffer.state = 0x00;
  5925                           
  5926                           ; BSR set to: 1
  5927  000EBA  0E00               	movlw	0
  5928  000EBC  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5929                           
  5930                           ; BSR set to: 1
  5931                           ;UART_Driver.c: 150: }
  5932                           
  5933                           ;UART_Driver.c: 149: break;
  5934  000EBE  0012               	return	
  5935  000EC0                     i2l120:
  5936                           
  5937                           ; BSR set to: 1
  5938  000EC0  0101               	movlb	1	; () banked
  5939  000EC2  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  5940                           
  5941                           ; Switch size 1, requested type "space"
  5942                           ; Number of cases is 6, Range of values is 0 to 5
  5943                           ; switch strategies available:
  5944                           ; Name         Instructions Cycles
  5945                           ; simple_byte           19    10 (average)
  5946                           ;	Chosen strategy is simple_byte
  5947  000EC4  0A00               	xorlw	0	; case 0
  5948  000EC6  B4D8               	btfsc	status,2,c
  5949  000EC8  D74D               	goto	i2l121
  5950  000ECA  0A01               	xorlw	1	; case 1
  5951  000ECC  B4D8               	btfsc	status,2,c
  5952  000ECE  D760               	goto	i2l126
  5953  000ED0  0A03               	xorlw	3	; case 2
  5954  000ED2  B4D8               	btfsc	status,2,c
  5955  000ED4  D77F               	goto	i2l130
  5956  000ED6  0A01               	xorlw	1	; case 3
  5957  000ED8  B4D8               	btfsc	status,2,c
  5958  000EDA  D79E               	goto	i2l134
  5959  000EDC  0A07               	xorlw	7	; case 4
  5960  000EDE  B4D8               	btfsc	status,2,c
  5961  000EE0  D7BD               	goto	i2l138
  5962  000EE2  0A01               	xorlw	1	; case 5
  5963  000EE4  B4D8               	btfsc	status,2,c
  5964  000EE6  D7DC               	goto	i2l142
  5965  000EE8  D7E8               	goto	i2l145
  5966  000EEA                     __end_of_fillDataBuffer:
  5967                           	opt stack 0
  5968                           pclatu	equ	0xFFB
  5969                           pclath	equ	0xFFA
  5970                           tblptru	equ	0xFF8
  5971                           tblptrh	equ	0xFF7
  5972                           tblptrl	equ	0xFF6
  5973                           tablat	equ	0xFF5
  5974                           prodh	equ	0xFF4
  5975                           prodl	equ	0xFF3
  5976                           intcon	equ	0xFF2
  5977                           intcon2	equ	0xFF1
  5978                           indf0	equ	0xFEF
  5979                           postinc0	equ	0xFEE
  5980                           plusw0	equ	0xFEB
  5981                           fsr0h	equ	0xFEA
  5982                           fsr0l	equ	0xFE9
  5983                           wreg	equ	0xFE8
  5984                           indf1	equ	0xFE7
  5985                           postinc1	equ	0xFE6
  5986                           postdec1	equ	0xFE5
  5987                           fsr1h	equ	0xFE2
  5988                           fsr1l	equ	0xFE1
  5989                           bsr	equ	0xFE0
  5990                           indf2	equ	0xFDF
  5991                           postinc2	equ	0xFDE
  5992                           postdec2	equ	0xFDD
  5993                           plusw2	equ	0xFDB
  5994                           fsr2h	equ	0xFDA
  5995                           fsr2l	equ	0xFD9
  5996                           status	equ	0xFD8
  5997                           pclatu	equ	0xFFB
  5998                           pclath	equ	0xFFA
  5999                           tblptru	equ	0xFF8
  6000                           tblptrh	equ	0xFF7
  6001                           tblptrl	equ	0xFF6
  6002                           tablat	equ	0xFF5
  6003                           prodh	equ	0xFF4
  6004                           prodl	equ	0xFF3
  6005                           intcon	equ	0xFF2
  6006                           intcon2	equ	0xFF1
  6007                           indf0	equ	0xFEF
  6008                           postinc0	equ	0xFEE
  6009                           plusw0	equ	0xFEB
  6010                           fsr0h	equ	0xFEA
  6011                           fsr0l	equ	0xFE9
  6012                           wreg	equ	0xFE8
  6013                           indf1	equ	0xFE7
  6014                           postinc1	equ	0xFE6
  6015                           postdec1	equ	0xFE5
  6016                           fsr1h	equ	0xFE2
  6017                           fsr1l	equ	0xFE1
  6018                           bsr	equ	0xFE0
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           plusw2	equ	0xFDB
  6023                           fsr2h	equ	0xFDA
  6024                           fsr2l	equ	0xFD9
  6025                           status	equ	0xFD8
  6026                           
  6027                           	psect	rparam
  6028  0000                     pclatu	equ	0xFFB
  6029                           pclath	equ	0xFFA
  6030                           tblptru	equ	0xFF8
  6031                           tblptrh	equ	0xFF7
  6032                           tblptrl	equ	0xFF6
  6033                           tablat	equ	0xFF5
  6034                           prodh	equ	0xFF4
  6035                           prodl	equ	0xFF3
  6036                           intcon	equ	0xFF2
  6037                           intcon2	equ	0xFF1
  6038                           indf0	equ	0xFEF
  6039                           postinc0	equ	0xFEE
  6040                           plusw0	equ	0xFEB
  6041                           fsr0h	equ	0xFEA
  6042                           fsr0l	equ	0xFE9
  6043                           wreg	equ	0xFE8
  6044                           indf1	equ	0xFE7
  6045                           postinc1	equ	0xFE6
  6046                           postdec1	equ	0xFE5
  6047                           fsr1h	equ	0xFE2
  6048                           fsr1l	equ	0xFE1
  6049                           bsr	equ	0xFE0
  6050                           indf2	equ	0xFDF
  6051                           postinc2	equ	0xFDE
  6052                           postdec2	equ	0xFDD
  6053                           plusw2	equ	0xFDB
  6054                           fsr2h	equ	0xFDA
  6055                           fsr2l	equ	0xFD9
  6056                           status	equ	0xFD8
  6057                           
  6058                           	psect	temp
  6059  000043                     btemp:
  6060                           	opt stack 0
  6061  000043                     	ds	1
  6062  0000                     int$flags	set	btemp
  6063  0000                     wtemp6	set	btemp+1
  6064                           pclatu	equ	0xFFB
  6065                           pclath	equ	0xFFA
  6066                           tblptru	equ	0xFF8
  6067                           tblptrh	equ	0xFF7
  6068                           tblptrl	equ	0xFF6
  6069                           tablat	equ	0xFF5
  6070                           prodh	equ	0xFF4
  6071                           prodl	equ	0xFF3
  6072                           intcon	equ	0xFF2
  6073                           intcon2	equ	0xFF1
  6074                           indf0	equ	0xFEF
  6075                           postinc0	equ	0xFEE
  6076                           plusw0	equ	0xFEB
  6077                           fsr0h	equ	0xFEA
  6078                           fsr0l	equ	0xFE9
  6079                           wreg	equ	0xFE8
  6080                           indf1	equ	0xFE7
  6081                           postinc1	equ	0xFE6
  6082                           postdec1	equ	0xFE5
  6083                           fsr1h	equ	0xFE2
  6084                           fsr1l	equ	0xFE1
  6085                           bsr	equ	0xFE0
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           plusw2	equ	0xFDB
  6090                           fsr2h	equ	0xFDA
  6091                           fsr2l	equ	0xFD9
  6092                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    18
    Data        8
    BSS         295
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      66
    BANK0           160     42     153
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_17(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_20(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_19(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_11(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_11(CODE[2]), ROM(CODE[32767]), 

    S101$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S101$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S101$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _initDoors->_C_DOOR_LockAll
    _D_UART_WriteInt->_printf
    _D_UART_Init->___lldiv
    _D_UART_Acknowledge->_printf
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20300
                                             40 BANK0      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_TMR1_Enable
                        _D_TMR1_Init
                 _D_UART_Acknowledge
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                    _D_UART_WriteInt
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1213
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     489
                                              9 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       9     9      0      90
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     332
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_WriteInt                                      5     1      4    4079
                                             26 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          7     0      7       0
                                              0 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     815
                                             13 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Acknowledge                                   1     1      0    3868
                                             26 BANK0      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     9     9      0      90
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    5144
                                             31 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     521
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    4259
                                             26 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    18      5    3837
                                             12 BANK0     14     9      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              21    21      0       0
                                             19 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                             18    18      0     165
                                              1 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     165
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Acknowledge
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _D_UART_WriteInt
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2A      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      42       1       70.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     181      20        0.0%
DATA                 0      0     181       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun May 06 11:26:41 2018

                         l30 14DE                           l31 1450                           l24 1020  
                         l25 0EFC                           l42 157E                           l50 110C  
                         l43 1502                           l19 174E                           l36 142C  
                         l37 139C                           l48 110E                           l49 1044  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
               _ackCharacter 00F1                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l216 18F0  
                        l401 0C4A                          l217 18EA                          l161 193E  
                        l410 0C62                          l402 0C04                          l330 0940  
                        l411 0D18                          l331 096C                          l412 0CB2  
                        l316 197E                          l341 0A6E                          l333 099C  
                        l166 1914                          l406 0C5C                          l350 0AE0  
                        l342 0A84                          l326 08D8                          l167 190A  
                        l407 0D1E                          l239 19FC                          l351 0AC2  
                        l335 09D2                          l344 0AA0                          l328 08F0  
                        l409 0D06                          l353 0AFC                          l337 0A08  
                        l354 0AC6                          l346 0AAA                          l339 0A3C  
                        l356 0AD0                          l357 0ADA                          l390 0B84  
                        l198 1A10                          l391 0B2C                          l383 0B14  
                        l392 0B30                          l384 0B24                          l393 0BB4  
                        l385 0B38                          l820 1784                          l396 0C3A  
                        l397 0BCE                          l830 186C                          l823 17AC  
                        l824 17B6                          l833 188C                          l834 1896  
                        l770 15FE                          l819 178C                          l771 160C  
                        l829 1874                          l766 15CA                          l767 15BE  
                        l963 181A                          l964 1810                 __CFG_CPB$OFF 000000  
                        _PR2 000FCB                 __CFG_CPD$OFF 000000                          _pwm 003B  
                        prod 000FF3                          wreg 000FE8                 __CFG_FOSC$HS 000000  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l2113 0BD2  
                       l2127 0C08                         STR_1 0844                         STR_2 0842  
                       STR_3 0828                         STR_4 0824                         STR_5 0846  
                       STR_6 0846                         STR_7 0846                         STR_8 0846  
                       STR_9 082C                         u2001 0904                         u2010 0918  
                       u2028 091C                         u1510 1878                         u2207 09FA  
                       u2217 12D2                         u2227 10CC                         u1460 1920  
                       u1540 0B64                         u2237 11FE                         u2247 190E  
                       u1480 1790                         u1640 0D28                         u2177 0856  
                       u1650 0D54                         u1714 14A4                         u1547 0B5A  
                       u1731 11A0                         u1715 14A0                         u2187 089E  
                       u1900 1684                         u1741 11DA                         u2197 08CA  
                       u1814 13F2                         u1815 13EE                         u1840 1578  
                       u1657 0D4A                         u1905 1678                         u1921 18C6  
                       u1850 157A                         u1834 156A                         u1835 1566  
                       u1684 0FEC                         u1685 0FE8                         u1790 15CE  
                       u1694 1012                         u1695 100E                         u1881 1092  
                       u1970 1850                 ?_C_DOOR_Init 0001                         _baud 0042  
                       _main 084A                         _read 0029                         _lock 003D  
                       _tick 003E                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0043            C_DOOR_UnlockAll@d 00CF  
                       prodh 000FF4                         prodl 000FF3                         start 00EC  
              __CFG_IESO$OFF 000000              __end_of_HighISR 1394                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  ?_D_PWM_Init 0001            initDoors@door_cnt 00D0  
             _startCharacter 00F7              D_PWM_SetPwm@pwm 00C7                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 00D1      __size_of_C_DOOR_LockAll 00B2         commandAndMessage@mes 00D3  
                      ?_main 0001                        STR_10 082F                        STR_11 083A  
                      STR_20 0840                        STR_12 0838                        STR_13 0840  
                      STR_21 0813                        STR_14 0836                        STR_15 083C  
                      STR_16 083A                        STR_17 083E                        STR_18 0832  
                      STR_19 0834              __end_of___lldiv 161E                        u17311 119E  
                      u17411 11D8              __end_of___lwdiv 17C0          D_UART_Acknowledge@i 00E1  
                      i2l120 0EC0                        i2l121 0D64              __end_of___lwmod 18A0  
                      i2l130 0DD4                        i2l122 0D88                        i2l131 0DF6  
                      i1l365 0078                        i2l142 0EA0                        i2l134 0E18  
                      i2l126 0D90                        i1l366 0094                        i2l143 0EB2  
                      i2l135 0E3A                        i2l127 0DB2                        i1l367 008E  
                      i1l368 0092                        i2l145 0EBA                        i2l138 0E5C  
                      i2l139 0E7E                        i2l176 1348                        i2l177 1338  
                      i2l179 1342                        _RCREG 000FAE                        _TMR1H 000FCF  
                      _TMR1L 000FCE                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             C_DOOR_Init@cnt 00CA               __CFG_EBTRB$OFF 000000              __end_of_dpowers 080B  
                      _doors 0060                        _putch 18FE                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 00D4                 ?_D_UART_Read 00C7  
               ?_D_TMR0_Init 0001                        plusw0 000FEB                 ?_D_TMR1_Init 0001  
                      plusw2 000FDB                        status 000FD8                        wtemp6 0044  
               ?_D_PORT_Init 0001                _stopCharacter 00F5              __initialization 17C0  
               __end_of_main 0B08                       ??_main 00EF                __activetblptr 000003  
 __end_of_D_UART_Acknowledge 170C              __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00C7  
                     _ADCON1 000FC1                       _CCPR1L 000FBE          __size_of_D_PWM_Init 001E  
                     ?_putch 0001             _C_DOOR_UnlockAll 1394                    ??_HighISR 0002  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___lldiv 00CF  
              setAlarm@alarm 00C7              C_DOOR_LockAll@d 00CF                    ??___lwdiv 00CB  
                  ??___lwmod 00D2                       clear_0 17E6                       clear_1 17F2  
                     clear_2 17FE                       _printf 0B08             __end_of_setAlarm 1A1E  
   __size_of_D_UART_WriteInt 00D4                       _strcmp 180E        D_UART_Init@interrupts 00D8  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 00E1              D_UART_Init@baud 00D6  
            D_UART_Init@name 00D4   __end_of_C_DOOR_ReadSensors 159A                   __accesstop 0060  
    __end_of__initialization 1804              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 0152               __pcstackCOMRAM 0001                 __pidataBANK0 1A1E  
               C_DOOR_Init@d 00CB                __end_of_putch 1926             _messageCharacter 00F3  
              ?_D_PWM_SetPwm 0001               _C_DOOR_LockAll 1448       __size_of_D_UART_Enable 0024  
             ??_D_UART_Write 00E5       __size_of_D_TMR0_Enable 0014       __size_of_D_TMR1_Enable 0014  
          _C_DOOR_SendStates 103C                      ??_putch 00C7           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100           __size_of_initDoors 0022  
           _communicationCnt 003F         __size_of_D_UART_Init 0082         __size_of_D_UART_Read 0030  
       __size_of_D_TMR0_Init 0024         __size_of_D_TMR1_Init 0020          ??_C_DOOR_SendStates 00E6  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E                 ??_D_PWM_Init 00C7  
     __end_of_C_DOOR_LockAll 14FA               ??_D_PWM_SetPwm 00C7                   _deviceName 00C4  
                    ?_printf 00D3                      ?_strcmp 00C7    __end_of_C_DOOR_SendStates 112A  
    __size_of_fillDataBuffer 018A          D_UART_Enable@enable 00C7            ??_D_UART_WriteInt 00E5  
         __end_of_D_PWM_Init 19CE              __CFG_VREGEN$OFF 000000                      _HighISR 0008  
              _D_UART_Enable 1926                    ?_setAlarm 0001                      __Hparam 0000  
                    __Lparam 0000              __size_of_LowISR 00D4                _D_TMR0_Enable 1A00  
              _D_TMR1_Enable 19EC                   _readBuffer 0100                      ___lldiv 159A  
            ?_C_DOOR_LockAll 0001                      ___lwdiv 176C                      ___lwmod 185C  
               __psmallconst 0800          C_DOOR_ReadSensors@d 00CB              __CFG_STVREN$OFF 000000  
                    __pcinit 17C0                      __ramtop 0800     __end_of_C_DOOR_UnlockAll 1448  
                    __ptext0 084A                      __ptext1 180E                      __ptext2 1A14  
                    __ptext3 196E                      __ptext4 1448                      __ptext5 0EEA  
                    __ptext6 120A                      __ptext7 18A0                      __ptext8 161E  
                    __ptext9 159A              __size_of_printf 0258            __end_of_initDoors 1990  
                  _T0CONbits 000FD5              __size_of_strcmp 004E            __end_of_hexpowers 0813  
                  _T1CONbits 000FCD                      _dpowers 0801                    _T2CONbits 000FCA  
       C_DOOR_SendStates@com 00E9         C_DOOR_SendStates@mes 00EC                      _running 003C  
             __pintcode_body 12DE         end_of_initialization 1804           _D_UART_Acknowledge 16A0  
        D_TMR0_Enable@enable 00C7                      int_func 12DE               ?_D_UART_Enable 0001  
                 ??_setAlarm 00C7              ___lldiv@divisor 00CB               ?_D_TMR0_Enable 0001  
            ___lldiv@counter 00D3               ?_D_TMR1_Enable 0001         __end_of_D_UART_Write 120A  
        ?_D_UART_Acknowledge 0001                    _RCSTAbits 000FAB                      printf@c 00E0  
                    printf@f 00D3                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00CC                    _PORTBbits 000F81                    _PORTCbits 000F82  
 __size_of_C_DOOR_SendStates 00EE                    _TRISCbits 000F94         ??_D_UART_Acknowledge 00E1  
       __end_of_D_PWM_SetPwm 18FE                  _CCP1CONbits 000FBD                    _TXSTAbits 000FAC  
         _C_DOOR_ReadSensors 14FA               __end_of_LowISR 00EC                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001               __end_of_printf 0D60               __end_of_strcmp 185C  
        start_initialization 17C0               _fillDataBuffer 0D60         ??_C_DOOR_ReadSensors 00C7  
            ??_D_UART_Enable 00C7                ??_C_DOOR_Init 00C7              ??_D_TMR0_Enable 00C7  
            ??_D_TMR1_Enable 00C7                     ??_LowISR 0014                  __pdataBANK0 00F1  
           __CFG_LPT1OSC$OFF 000000              _D_UART_WriteInt 120A             D_UART_Write@data 00E3  
                   ??_printf 00D8                 _lockDelayCnt 0040                     ??_strcmp 00CB  
           D_UART_WriteInt@d 00E3       __end_of_fillDataBuffer 0EEA                  __pbssCOMRAM 0029  
              __pcstackBANK0 00C7                ??_D_UART_Init 00D9                ??_D_UART_Read 00CE  
              ??_D_TMR0_Init 00C8                ??_D_TMR1_Init 00C8                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00C7             ??_C_DOOR_LockAll 00C7  
           ___lwdiv@dividend 00C7          __end_of_C_DOOR_Init 103C            __size_of_setAlarm 000A  
                  __pintcode 0008                     ?___lldiv 00C7                     ?___lwdiv 00C7  
                   ?___lwmod 00CE                  __pintcodelo 0018           fillDataBuffer@data 0001  
          ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001                  __smallconst 0800  
         ??_C_DOOR_UnlockAll 00C7        __size_of_D_PWM_SetPwm 002E                    _initDoors 196E  
               _D_UART_Write 112A                    _hexpowers 080B                    _readReady 0041  
           ___lwdiv@quotient 00CC               __size_of_putch 0028          D_TMR1_Enable@enable 00C7  
                   _IPR1bits 000F9F                     _PIE1bits 000F9D          __end_of_D_UART_Init 16A0  
        __end_of_D_UART_Read 18D0                     _PIR1bits 000F9E      __end_of_D_UART_WriteInt 12DE  
        __end_of_D_TMR0_Init 196E          __end_of_D_TMR1_Init 19B0                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000       D_UART_WriteInt@command 00E1          __end_of_D_PORT_Init 19EC  
               _D_PWM_SetPwm 18D0                   printf@flag 00DD                   printf@prec 00DC  
                 ?_initDoors 0001                  _INTCON2bits 000FF1                    copy_data0 17D4  
                _C_DOOR_Init 0EEA             __size_of_HighISR 138C                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___lldiv 0084             __size_of___lwdiv 0054  
           __size_of___lwmod 0044              ___lwdiv@divisor 00C9  __size_of_D_UART_Acknowledge 006C  
            ___lwdiv@counter 00CB                     __ptext10 1926                     __ptext11 16A0  
                   __ptext20 103C                     __ptext12 1990                     __ptext21 170C  
                   __ptext13 19EC                     __ptext30 0D60                     __ptext22 112A  
                   __ptext14 194A                     __ptext23 0B08                     __ptext15 1A00  
                   __ptext24 18FE                     __ptext16 18D0                     __ptext25 185C  
                   __ptext17 19B0                     __ptext26 176C                     __ptext18 19CE  
                   __ptext27 14FA                     __ptext19 1394                     _door_cnt 0037  
                _D_UART_Init 161E                  _D_UART_Read 18A0                     _oldAlarm 0039  
                   _newAlarm 003A                     _readData 0030                  _D_TMR0_Init 194A  
                _D_TMR1_Init 1990                __size_of_main 02BE           C_DOOR_SendStates@d 00EE  
                _D_PORT_Init 19CE                     _setAlarm 1A14             ?_D_UART_WriteInt 00E1  
                   int$flags 0043                    printf@idx 00D9                    printf@val 00DE  
      __CFG_CPUDIV$OSC1_PLL2 000000                    putch@data 00C7                   _INTCONbits 000FF2  
                ??_initDoors 00D0            _commandAndMessage 170C                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 00A0           ?_commandAndMessage 00C7  
           ___lwmod@dividend 00CE             ___lldiv@dividend 00C7        __end_of_D_UART_Enable 194A  
      __end_of_D_TMR0_Enable 1A14          ??_commandAndMessage 00D5        __end_of_D_TMR1_Enable 1A00  
                 _D_PWM_Init 19B0                     printf@ap 00DA             ??_fillDataBuffer 0001  
        D_UART_Write@command 00E1                     putch@max 00C8                     strcmp@s1 00C7  
                   strcmp@s2 00C9             ___lldiv@quotient 00CF              ___lwmod@divisor 00D0  
            ___lwmod@counter 00D2    __end_of_commandAndMessage 176C    __size_of_C_DOOR_UnlockAll 00B4  
