

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov 25 17:57:44 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    46                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    47  0000                     
    48                           ; Version 1.44
    49                           ; Generated 14/09/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC18F2550 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     
    83                           	psect	idataCOMRAM
    84  001420                     __pidataCOMRAM:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _ackCharacter
    88  001420  20                 	db	low STR_6
    89  001421  08                 	db	high STR_6
    90                           
    91                           ;initializer for _stopCharacter
    92  001422  2D                 	db	low STR_4
    93  001423  08                 	db	high STR_4
    94                           
    95                           ;initializer for _startCharacter
    96  001424  2F                 	db	low STR_3
    97  001425  08                 	db	high STR_3
    98                           
    99                           	psect	idataBANK0
   100  001426                     __pidataBANK0:
   101                           	opt stack 0
   102                           
   103                           ;initializer for _messageCharacter
   104  001426  24                 	db	low STR_5
   105  001427  08                 	db	high STR_5
   106                           
   107                           	psect	smallconst
   108  000800                     __psmallconst:
   109                           	opt stack 0
   110  000800  00                 	db	0
   111  000801                     _hexpowers:
   112                           	opt stack 0
   113  000801  0001               	dw	1
   114  000803  0010               	dw	16
   115  000805  0100               	dw	256
   116  000807  1000               	dw	4096
   117  000809                     __end_of_hexpowers:
   118                           	opt stack 0
   119  000809                     STR_13:
   120  000809  30                 	db	48	;'0'
   121  00080A  31                 	db	49	;'1'
   122  00080B  32                 	db	50	;'2'
   123  00080C  33                 	db	51	;'3'
   124  00080D  34                 	db	52	;'4'
   125  00080E  35                 	db	53	;'5'
   126  00080F  36                 	db	54	;'6'
   127  000810  37                 	db	55	;'7'
   128  000811  38                 	db	56	;'8'
   129  000812  39                 	db	57	;'9'
   130  000813  61                 	db	97	;'a'
   131  000814  62                 	db	98	;'b'
   132  000815  63                 	db	99	;'c'
   133  000816  64                 	db	100	;'d'
   134  000817  65                 	db	101	;'e'
   135  000818  66                 	db	102	;'f'
   136  000819  00                 	db	0
   137  00081A                     STR_12:
   138  00081A  53                 	db	83	;'S'
   139  00081B  74                 	db	116	;'t'
   140  00081C  61                 	db	97	;'a'
   141  00081D  72                 	db	114	;'r'
   142  00081E  74                 	db	116	;'t'
   143  00081F  00                 	db	0
   144  000820                     STR_6:
   145  000820  5B                 	db	91	;'['
   146  000821  41                 	db	65	;'A'
   147  000822  5D                 	db	93	;']'
   148  000823  00                 	db	0
   149  000824                     STR_5:
   150  000824  5B                 	db	91	;'['
   151  000825  4D                 	db	77	;'M'
   152  000826  5D                 	db	93	;']'
   153  000827  00                 	db	0
   154  000828                     STR_7:
   155  000828  25                 	db	37
   156  000829  78                 	db	120	;'x'
   157  00082A  00                 	db	0
   158  00082B                     STR_11:
   159  00082B  49                 	db	73	;'I'
   160  00082C  00                 	db	0
   161  00082D                     STR_4:
   162  00082D  24                 	db	36
   163  00082E  00                 	db	0
   164  00082F                     STR_3:
   165  00082F  26                 	db	38
   166  000830  00                 	db	0
   167  000831                     STR_8:
   168  000831  3A                 	db	58	;':'
   169  000832  00                 	db	0
   170  000833                     STR_2:
   171  000833  4F                 	db	79	;'O'
   172  000834  00                 	db	0
   173  000835                     STR_1:
   174  000835  50                 	db	80	;'P'
   175  000836  00                 	db	0
   176  0000                     
   177                           ; #config settings
   178  000837  00                 	db	0	; dummy byte at the end
   179  0000                     
   180                           	psect	nvBANK0
   181  0000BF                     __pnvBANK0:
   182                           	opt stack 0
   183  0000BF                     _deviceName:
   184                           	opt stack 0
   185  0000BF                     	ds	3
   186  0000                     _INTCON2bits	set	4081
   187  0000                     _T0CONbits	set	4053
   188  0000                     _PIE1bits	set	3997
   189  0000                     _IPR1bits	set	3999
   190  0000                     _PIR1bits	set	3998
   191  0000                     _INTCONbits	set	4082
   192  0000                     _RCONbits	set	4048
   193  0000                     _SPBRG	set	4015
   194  0000                     _BAUDCONbits	set	4024
   195  0000                     _TRISCbits	set	3988
   196  0000                     _RCREG	set	4014
   197  0000                     _RCSTAbits	set	4011
   198  0000                     _TXREG	set	4013
   199  0000                     _TXSTAbits	set	4012
   200  0000                     _ADCON1	set	4033
   201  0000                     _PORTC	set	3970
   202  0000                     _TRISC	set	3988
   203  0000                     _PORTA	set	3968
   204  0000                     _TRISA	set	3986
   205  0000                     _LATBbits	set	3978
   206  0000                     _TRISB	set	3987
   207  0000                     _PORTB	set	3969
   208                           
   209                           	psect	cinit
   210  0011CA                     __pcinit:
   211                           	opt stack 0
   212  0011CA                     start_initialization:
   213                           	opt stack 0
   214  0011CA                     __initialization:
   215                           	opt stack 0
   216                           
   217                           ; Initialize objects allocated to BANK0 (2 bytes)
   218                           ; load TBLPTR registers with __pidataBANK0
   219  0011CA  0E26               	movlw	low __pidataBANK0
   220  0011CC  6EF6               	movwf	tblptrl,c
   221  0011CE  0E14               	movlw	high __pidataBANK0
   222  0011D0  6EF7               	movwf	tblptrh,c
   223  0011D2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   224  0011D4  6EF8               	movwf	tblptru,c
   225  0011D6  0009               	tblrd		*+	;fetch initializer
   226  0011D8  CFF5 F0C2          	movff	tablat,__pdataBANK0
   227  0011DC  0009               	tblrd		*+	;fetch initializer
   228  0011DE  CFF5 F0C3          	movff	tablat,__pdataBANK0+1
   229                           
   230                           ; Initialize objects allocated to COMRAM (6 bytes)
   231                           ; load TBLPTR registers with __pidataCOMRAM
   232  0011E2  0E20               	movlw	low __pidataCOMRAM
   233  0011E4  6EF6               	movwf	tblptrl,c
   234  0011E6  0E14               	movlw	high __pidataCOMRAM
   235  0011E8  6EF7               	movwf	tblptrh,c
   236  0011EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   237  0011EC  6EF8               	movwf	tblptru,c
   238  0011EE  EE00  F040         	lfsr	0,__pdataCOMRAM
   239  0011F2  EE10 F006          	lfsr	1,6
   240  0011F6                     copy_data0:
   241  0011F6  0009               	tblrd		*+
   242  0011F8  CFF5 FFEE          	movff	tablat,postinc0
   243  0011FC  50E5               	movf	postdec1,w,c
   244  0011FE  50E1               	movf	fsr1l,w,c
   245  001200  E1FA               	bnz	copy_data0
   246                           
   247                           ; Clear objects allocated to BANK1 (166 bytes)
   248  001202  EE01  F000         	lfsr	0,__pbssBANK1
   249  001206  0EA6               	movlw	166
   250  001208                     clear_0:
   251  001208  6AEE               	clrf	postinc0,c
   252  00120A  06E8               	decf	wreg,f,c
   253  00120C  E1FD               	bnz	clear_0
   254                           
   255                           ; Clear objects allocated to BANK0 (64 bytes)
   256  00120E  EE00  F060         	lfsr	0,__pbssBANK0
   257  001212  0E40               	movlw	64
   258  001214                     clear_1:
   259  001214  6AEE               	clrf	postinc0,c
   260  001216  06E8               	decf	wreg,f,c
   261  001218  E1FD               	bnz	clear_1
   262                           
   263                           ; Clear objects allocated to COMRAM (1 bytes)
   264  00121A  6A46               	clrf	__pbssCOMRAM& (0+255),c
   265  00121C                     end_of_initialization:
   266                           	opt stack 0
   267  00121C                     __end_of__initialization:
   268                           	opt stack 0
   269  00121C  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   270  00121E  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   271  001220  0E00               	movlw	low (__Lmediumconst shr (0+16))
   272  001222  6EF8               	movwf	tblptru,c
   273  001224  0100               	movlb	0
   274  001226  EF05  F008         	goto	_main	;jump to C main() function
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	bssCOMRAM
   285  000046                     __pbssCOMRAM:
   286                           	opt stack 0
   287  000046                     _baud:
   288                           	opt stack 0
   289  000046                     	ds	1
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299                           	psect	dataCOMRAM
   300  000040                     __pdataCOMRAM:
   301                           	opt stack 0
   302  000040                     _ackCharacter:
   303                           	opt stack 0
   304  000040                     	ds	2
   305  000042                     _stopCharacter:
   306                           	opt stack 0
   307  000042                     	ds	2
   308  000044                     _startCharacter:
   309                           	opt stack 0
   310  000044                     	ds	2
   311                           tblptru	equ	0xFF8
   312                           tblptrh	equ	0xFF7
   313                           tblptrl	equ	0xFF6
   314                           tablat	equ	0xFF5
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1l	equ	0xFE1
   319                           
   320                           	psect	bssBANK0
   321  000060                     __pbssBANK0:
   322                           	opt stack 0
   323  000060                     _doors:
   324                           	opt stack 0
   325  000060                     	ds	50
   326  000092                     _read:
   327                           	opt stack 0
   328  000092                     	ds	6
   329  000098                     _readData:
   330                           	opt stack 0
   331  000098                     	ds	6
   332  00009E                     _tick:
   333                           	opt stack 0
   334  00009E                     	ds	1
   335  00009F                     _readReady:
   336                           	opt stack 0
   337  00009F                     	ds	1
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	dataBANK0
   348  0000C2                     __pdataBANK0:
   349                           	opt stack 0
   350  0000C2                     _messageCharacter:
   351                           	opt stack 0
   352  0000C2                     	ds	2
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	bssBANK1
   363  000100                     __pbssBANK1:
   364                           	opt stack 0
   365  000100                     _readBuffer:
   366                           	opt stack 0
   367  000100                     	ds	166
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           postdec1	equ	0xFE5
   375                           fsr1l	equ	0xFE1
   376                           
   377                           	psect	cstackBANK0
   378  0000A0                     __pcstackBANK0:
   379                           	opt stack 0
   380  0000A0                     ??_C_DOOR_ReadSensors:
   381  0000A0                     ?___lwdiv:
   382                           	opt stack 0
   383  0000A0                     ?___aldiv:
   384                           	opt stack 0
   385  0000A0                     ?_D_UART_Read:
   386                           	opt stack 0
   387  0000A0                     C_DOOR_Init@d:
   388                           	opt stack 0
   389  0000A0                     writeByte@data:
   390                           	opt stack 0
   391  0000A0                     D_UART_Enable@enable:
   392                           	opt stack 0
   393  0000A0                     D_TMR0_Enable@enable:
   394                           	opt stack 0
   395  0000A0                     ___lwdiv@dividend:
   396                           	opt stack 0
   397  0000A0                     ___aldiv@dividend:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0x0
   401  0000A0                     	ds	1
   402  0000A1                     putch@data:
   403                           	opt stack 0
   404                           
   405                           ; 1 bytes @ 0x1
   406  0000A1                     	ds	1
   407  0000A2                     ___lwdiv@divisor:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x2
   411  0000A2                     	ds	2
   412  0000A4                     C_DOOR_ReadSensors@d:
   413                           	opt stack 0
   414  0000A4                     ___lwdiv@quotient:
   415                           	opt stack 0
   416  0000A4                     ___aldiv@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0x4
   420  0000A4                     	ds	2
   421  0000A6                     ___lwdiv@counter:
   422                           	opt stack 0
   423                           
   424                           ; 1 bytes @ 0x6
   425  0000A6                     	ds	1
   426  0000A7                     ?_printf:
   427                           	opt stack 0
   428  0000A7                     printf@f:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x7
   432  0000A7                     	ds	1
   433  0000A8                     ___aldiv@counter:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x8
   437  0000A8                     	ds	1
   438  0000A9                     ___aldiv@sign:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x9
   442  0000A9                     	ds	1
   443  0000AA                     ??_printf:
   444  0000AA                     ___aldiv@quotient:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0xA
   448  0000AA                     	ds	3
   449  0000AD                     printf@flag:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0xD
   453  0000AD                     	ds	1
   454  0000AE                     D_UART_Init@name:
   455                           	opt stack 0
   456  0000AE                     printf@ap:
   457                           	opt stack 0
   458                           
   459                           ; 2 bytes @ 0xE
   460  0000AE                     	ds	2
   461  0000B0                     printf@idx:
   462                           	opt stack 0
   463  0000B0                     D_UART_Init@baud:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x10
   467  0000B0                     	ds	1
   468  0000B1                     printf@val:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0x11
   472  0000B1                     	ds	1
   473  0000B2                     D_UART_Init@interrupts:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x12
   477  0000B2                     	ds	1
   478  0000B3                     printf@prec:
   479                           	opt stack 0
   480  0000B3                     _D_UART_Init$1514:
   481                           	opt stack 0
   482                           
   483                           ; 4 bytes @ 0x13
   484  0000B3                     	ds	1
   485  0000B4                     printf@c:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x14
   489  0000B4                     	ds	1
   490  0000B5                     D_UART_Write@command:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0x15
   494  0000B5                     	ds	2
   495  0000B7                     D_UART_Write@data:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x17
   499  0000B7                     	ds	2
   500  0000B9                     ??_D_UART_Write:
   501                           
   502                           ; 1 bytes @ 0x19
   503  0000B9                     	ds	1
   504  0000BA                     
   505                           ; 1 bytes @ 0x1A
   506  0000BA                     	ds	2
   507  0000BC                     C_DOOR_SendStates@d:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x1C
   511  0000BC                     	ds	1
   512  0000BD                     ??_main:
   513                           
   514                           ; 1 bytes @ 0x1D
   515  0000BD                     	ds	2
   516                           tblptru	equ	0xFF8
   517                           tblptrh	equ	0xFF7
   518                           tblptrl	equ	0xFF6
   519                           tablat	equ	0xFF5
   520                           postinc0	equ	0xFEE
   521                           wreg	equ	0xFE8
   522                           postdec1	equ	0xFE5
   523                           fsr1l	equ	0xFE1
   524                           
   525                           	psect	cstackCOMRAM
   526  000001                     __pcstackCOMRAM:
   527                           	opt stack 0
   528  000001                     ??_HighISR:
   529  000001                     
   530                           ; 1 bytes @ 0x0
   531  000001                     	ds	18
   532  000013                     ?i1___lwdiv:
   533                           	opt stack 0
   534  000013                     i1writeByte@data:
   535                           	opt stack 0
   536  000013                     i1___lwdiv@dividend:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x12
   540  000013                     	ds	1
   541  000014                     i1putch@data:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x13
   545  000014                     	ds	1
   546  000015                     i1___lwdiv@divisor:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x14
   550  000015                     	ds	2
   551  000017                     i1___lwdiv@quotient:
   552                           	opt stack 0
   553                           
   554                           ; 2 bytes @ 0x16
   555  000017                     	ds	2
   556  000019                     i1___lwdiv@counter:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x18
   560  000019                     	ds	1
   561  00001A                     ?i1_printf:
   562                           	opt stack 0
   563  00001A                     i1printf@f:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x19
   567  00001A                     	ds	5
   568  00001F                     ??i1_printf:
   569                           
   570                           ; 1 bytes @ 0x1E
   571  00001F                     	ds	3
   572  000022                     i1printf@flag:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x21
   576  000022                     	ds	1
   577  000023                     i1printf@ap:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x22
   581  000023                     	ds	2
   582  000025                     i1printf@idx:
   583                           	opt stack 0
   584                           
   585                           ; 1 bytes @ 0x24
   586  000025                     	ds	1
   587  000026                     i1printf@val:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x25
   591  000026                     	ds	2
   592  000028                     i1printf@prec:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x27
   596  000028                     	ds	1
   597  000029                     i1printf@c:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x28
   601  000029                     	ds	1
   602  00002A                     fillDataBuffer@data:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x29
   606  00002A                     	ds	1
   607  00002B                     ??_LowISR:
   608                           
   609                           ; 1 bytes @ 0x2A
   610  00002B                     	ds	21
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           postdec1	equ	0xFE5
   618                           fsr1l	equ	0xFE1
   619                           
   620 ;;
   621 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   622 ;;
   623 ;; *************** function _main *****************
   624 ;; Defined at:
   625 ;;		line 16 in file "main.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;		None
   628 ;; Auto vars:     Size  Location     Type
   629 ;;		None
   630 ;; Return value:  Size  Location     Type
   631 ;;                  1    wreg      void 
   632 ;; Registers used:
   633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   634 ;; Tracked objects:
   635 ;;		On entry : 0/0
   636 ;;		On exit  : 0/0
   637 ;;		Unchanged: 0/0
   638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   639 ;;      Params:         0       0       0       0       0       0       0       0       0
   640 ;;      Locals:         0       0       0       0       0       0       0       0       0
   641 ;;      Temps:          0       2       0       0       0       0       0       0       0
   642 ;;      Totals:         0       2       0       0       0       0       0       0       0
   643 ;;Total ram usage:        2 bytes
   644 ;; Hardware stack levels required when called:   12
   645 ;; This function calls:
   646 ;;		_C_DOOR_Init
   647 ;;		_C_DOOR_ReadSensors
   648 ;;		_C_DOOR_SendStates
   649 ;;		_C_DOOR_UnlockAll
   650 ;;		_D_PORT_Init
   651 ;;		_D_TMR0_Enable
   652 ;;		_D_TMR0_Init
   653 ;;		_D_UART_Enable
   654 ;;		_D_UART_Init
   655 ;;		_D_UART_Read
   656 ;;		_D_UART_Write
   657 ;; This function is called by:
   658 ;;		Startup code after reset
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           	psect	text0
   663  00100A                     __ptext0:
   664                           	opt stack 0
   665  00100A                     _main:
   666                           	opt stack 19
   667                           
   668                           ;main.c: 18: D_PORT_Init();
   669                           
   670                           ;incstack = 0
   671  00100A  ECD3  F009         	call	_D_PORT_Init	;wreg free
   672                           
   673                           ;main.c: 22: D_UART_Init("P", 9600, 1);
   674  00100E  0E35               	movlw	low STR_1
   675  001010  0100               	movlb	0	; () banked
   676  001012  6FAE               	movwf	D_UART_Init@name& (0+255),b
   677  001014  0E08               	movlw	high STR_1
   678  001016  6FAF               	movwf	(D_UART_Init@name+1)& (0+255),b
   679  001018  0E25               	movlw	37
   680  00101A  6FB1               	movwf	(D_UART_Init@baud+1)& (0+255),b
   681  00101C  0E80               	movlw	128
   682  00101E  6FB0               	movwf	D_UART_Init@baud& (0+255),b
   683  001020  0E01               	movlw	1
   684  001022  6FB2               	movwf	D_UART_Init@interrupts& (0+255),b
   685  001024  EC63  F007         	call	_D_UART_Init	;wreg free
   686                           
   687                           ;main.c: 23: D_UART_Enable(1);
   688  001028  0E01               	movlw	1
   689  00102A  ECAF  F009         	call	_D_UART_Enable
   690                           
   691                           ;main.c: 26: D_TMR0_Init();
   692  00102E  ECC1  F009         	call	_D_TMR0_Init	;wreg free
   693                           
   694                           ;main.c: 29: C_DOOR_Init();
   695  001032  EC19  F006         	call	_C_DOOR_Init	;wreg free
   696                           
   697                           ;main.c: 30: C_DOOR_UnlockAll();
   698  001036  ECEC  F009         	call	_C_DOOR_UnlockAll	;wreg free
   699                           
   700                           ;main.c: 32: _delay((unsigned long)((200)*(16000000/4000.0)));
   701  00103A  0E05               	movlw	5
   702  00103C  0100               	movlb	0	; () banked
   703  00103E  6FBE               	movwf	(??_main+1)& (0+255),b
   704  001040  0E0F               	movlw	15
   705  001042  6FBD               	movwf	??_main& (0+255),b
   706  001044  0EF1               	movlw	241
   707  001046                     u1257:
   708  001046  2EE8               	decfsz	wreg,f,c
   709  001048  D7FE               	bra	u1257
   710  00104A  2FBD               	decfsz	??_main& (0+255),f,b
   711  00104C  D7FC               	bra	u1257
   712  00104E  2FBE               	decfsz	(??_main+1)& (0+255),f,b
   713  001050  D7FA               	bra	u1257
   714                           
   715                           ;main.c: 35: D_UART_Write("I", "Start");
   716  001052  0E2B               	movlw	low STR_11
   717  001054  0100               	movlb	0	; () banked
   718  001056  6FB5               	movwf	D_UART_Write@command& (0+255),b
   719  001058  0E08               	movlw	high STR_11
   720  00105A  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
   721  00105C  0E1A               	movlw	low STR_12
   722  00105E  6FB7               	movwf	D_UART_Write@data& (0+255),b
   723  001060  0E08               	movlw	high STR_12
   724  001062  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
   725  001064  ECFD  F006         	call	_D_UART_Write	;wreg free
   726                           
   727                           ;main.c: 36: D_TMR0_Enable(1);
   728  001068  0E01               	movlw	1
   729  00106A  ECE2  F009         	call	_D_TMR0_Enable
   730  00106E                     
   731                           ;main.c: 40: if (readReady) {
   732  00106E  0100               	movlb	0	; () banked
   733  001070  519F               	movf	_readReady& (0+255),w,b
   734  001072  B4D8               	btfsc	status,2,c
   735  001074  D00B               	goto	l217
   736                           
   737                           ; BSR set to: 0
   738                           ;main.c: 41: readReady = 0;
   739  001076  0E00               	movlw	0
   740  001078  6F9F               	movwf	_readReady& (0+255),b
   741                           
   742                           ; BSR set to: 0
   743                           ;main.c: 42: read = D_UART_Read();
   744  00107A  EC98  F009         	call	_D_UART_Read	;wreg free
   745  00107E  EE20  F092         	lfsr	2,_read
   746  001082  0E05               	movlw	5
   747  001084                     u1221:
   748  001084  CFEB FFDB          	movff	plusw0,plusw2
   749  001088  06E8               	decf	wreg,f,c
   750  00108A  E2FC               	bc	u1221
   751  00108C                     l217:
   752                           
   753                           ;main.c: 43: }
   754                           ;main.c: 46: if (tick) {
   755  00108C  0100               	movlb	0	; () banked
   756  00108E  519E               	movf	_tick& (0+255),w,b
   757  001090  B4D8               	btfsc	status,2,c
   758  001092  D7ED               	goto	l216
   759                           
   760                           ; BSR set to: 0
   761                           ;main.c: 47: tick = 0;
   762  001094  0E00               	movlw	0
   763  001096  6F9E               	movwf	_tick& (0+255),b
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 50: C_DOOR_ReadSensors();
   767  001098  EC9B  F008         	call	_C_DOOR_ReadSensors	;wreg free
   768                           
   769                           ;main.c: 53: C_DOOR_SendStates();
   770  00109C  EC51  F008         	call	_C_DOOR_SendStates	;wreg free
   771  0010A0  D7E6               	goto	l216
   772  0010A2                     __end_of_main:
   773                           	opt stack 0
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           plusw0	equ	0xFEB
   780                           wreg	equ	0xFE8
   781                           postdec1	equ	0xFE5
   782                           fsr1l	equ	0xFE1
   783                           plusw2	equ	0xFDB
   784                           status	equ	0xFD8
   785                           
   786 ;; *************** function _D_UART_Read *****************
   787 ;; Defined at:
   788 ;;		line 237 in file "Drivers/UART_Driver.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  6    0[BANK0 ] struct .
   795 ;; Registers used:
   796 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   802 ;;      Params:         0       6       0       0       0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0       0       0       0       0
   804 ;;      Temps:          0       0       0       0       0       0       0       0       0
   805 ;;      Totals:         0       6       0       0       0       0       0       0       0
   806 ;;Total ram usage:        6 bytes
   807 ;; Hardware stack levels used:    1
   808 ;; Hardware stack levels required when called:    7
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text1
   817  001330                     __ptext1:
   818                           	opt stack 0
   819  001330                     _D_UART_Read:
   820                           	opt stack 23
   821                           
   822                           ;UART_Driver.c: 238: readData.sender = readBuffer.sender;
   823                           
   824                           ;incstack = 0
   825  001330  0E0B               	movlw	low (_readBuffer+11)
   826  001332  0100               	movlb	0	; () banked
   827  001334  6F98               	movwf	_readData& (0+255),b
   828  001336  0E01               	movlw	high (_readBuffer+11)
   829  001338  6F99               	movwf	(_readData+1)& (0+255),b
   830                           
   831                           ;UART_Driver.c: 239: readData.command = readBuffer.command;
   832  00133A  0E3E               	movlw	low (_readBuffer+62)
   833  00133C  6F9A               	movwf	(_readData+2)& (0+255),b
   834  00133E  0E01               	movlw	high (_readBuffer+62)
   835  001340  6F9B               	movwf	(_readData+3)& (0+255),b
   836                           
   837                           ;UART_Driver.c: 240: readData.message = readBuffer.message;
   838  001342  0E71               	movlw	low (_readBuffer+113)
   839  001344  6F9C               	movwf	(_readData+4)& (0+255),b
   840  001346  0E01               	movlw	high (_readBuffer+113)
   841  001348  6F9D               	movwf	(_readData+5)& (0+255),b
   842                           
   843                           ; BSR set to: 0
   844                           ;UART_Driver.c: 241: return readData;
   845  00134A  EE20  F098         	lfsr	2,_readData
   846  00134E  EE00  F0A0         	lfsr	0,?_D_UART_Read
   847  001352  0E05               	movlw	5
   848  001354                     u1111:
   849  001354  CFDB FFEB          	movff	plusw2,plusw0
   850  001358  06E8               	decf	wreg,f,c
   851  00135A  E2FC               	bc	u1111
   852  00135C  0012               	return	
   853  00135E                     __end_of_D_UART_Read:
   854                           	opt stack 0
   855                           tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           postinc0	equ	0xFEE
   860                           plusw0	equ	0xFEB
   861                           wreg	equ	0xFE8
   862                           postdec1	equ	0xFE5
   863                           fsr1l	equ	0xFE1
   864                           plusw2	equ	0xFDB
   865                           status	equ	0xFD8
   866                           
   867 ;; *************** function _D_UART_Init *****************
   868 ;; Defined at:
   869 ;;		line 182 in file "Drivers/UART_Driver.c"
   870 ;; Parameters:    Size  Location     Type
   871 ;;  name            2   14[BANK0 ] PTR const unsigned char 
   872 ;;		 -> STR_10(2), 
   873 ;;  baud            2   16[BANK0 ] unsigned int 
   874 ;;  interrupts      1   18[BANK0 ] unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   886 ;;      Params:         0       5       0       0       0       0       0       0       0
   887 ;;      Locals:         0       4       0       0       0       0       0       0       0
   888 ;;      Temps:          0       0       0       0       0       0       0       0       0
   889 ;;      Totals:         0       9       0       0       0       0       0       0       0
   890 ;;Total ram usage:        9 bytes
   891 ;; Hardware stack levels used:    1
   892 ;; Hardware stack levels required when called:    8
   893 ;; This function calls:
   894 ;;		_D_UART_Enable
   895 ;;		___aldiv
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text2
   902  000EC6                     __ptext2:
   903                           	opt stack 0
   904  000EC6                     _D_UART_Init:
   905                           	opt stack 22
   906                           
   907                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
   908                           
   909                           ; BSR set to: 0
   910                           ;incstack = 0
   911  000EC6  9E94               	bcf	3988,7,c	;volatile
   912                           
   913                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
   914  000EC8  8C94               	bsf	3988,6,c	;volatile
   915                           
   916                           ;UART_Driver.c: 188: deviceName = name;
   917  000ECA  C0AE  F0BF         	movff	D_UART_Init@name,_deviceName
   918  000ECE  C0AF  F0C0         	movff	D_UART_Init@name+1,_deviceName+1
   919  000ED2  0100               	movlb	0	; () banked
   920  000ED4  51BF               	movf	_deviceName& (0+255),w,b
   921  000ED6  11C0               	iorwf	(_deviceName+1)& (0+255),w,b
   922  000ED8  A4D8               	btfss	status,2,c
   923  000EDA  0E00               	movlw	low (__mediumconst shr (0+16))
   924  000EDC  6FC1               	movwf	(_deviceName+2)& (0+255),b
   925                           
   926                           ; BSR set to: 0
   927                           ;UART_Driver.c: 189: readReady = 0;
   928  000EDE  0E00               	movlw	0
   929  000EE0  6F9F               	movwf	_readReady& (0+255),b
   930                           
   931                           ; BSR set to: 0
   932                           ;UART_Driver.c: 192: D_UART_Enable(0);
   933  000EE2  0E00               	movlw	0
   934  000EE4  ECAF  F009         	call	_D_UART_Enable
   935                           
   936                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
   937  000EE8  9CAC               	bcf	4012,6,c	;volatile
   938                           
   939                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
   940  000EEA  98AC               	bcf	4012,4,c	;volatile
   941                           
   942                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
   943  000EEC  94AC               	bcf	4012,2,c	;volatile
   944                           
   945                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
   946  000EEE  9CAB               	bcf	4011,6,c	;volatile
   947                           
   948                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
   949  000EF0  9AB8               	bcf	4024,5,c	;volatile
   950                           
   951                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
   952  000EF2  98B8               	bcf	4024,4,c	;volatile
   953                           
   954                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
   955  000EF4  96B8               	bcf	4024,3,c	;volatile
   956                           
   957                           ;UART_Driver.c: 210: SPBRG = ((16000000/baud)/64)-1;
   958  000EF6  C0B0  F0A4         	movff	D_UART_Init@baud,___aldiv@divisor
   959  000EFA  C0B1  F0A5         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
   960  000EFE  0100               	movlb	0	; () banked
   961  000F00  6BA6               	clrf	(___aldiv@divisor+2)& (0+255),b
   962  000F02  6BA7               	clrf	(___aldiv@divisor+3)& (0+255),b
   963  000F04  0E00               	movlw	0
   964  000F06  6FA0               	movwf	___aldiv@dividend& (0+255),b
   965  000F08  0E24               	movlw	36
   966  000F0A  6FA1               	movwf	(___aldiv@dividend+1)& (0+255),b
   967  000F0C  0EF4               	movlw	244
   968  000F0E  6FA2               	movwf	(___aldiv@dividend+2)& (0+255),b
   969  000F10  0E00               	movlw	0
   970  000F12  6FA3               	movwf	(___aldiv@dividend+3)& (0+255),b
   971  000F14  EC96  F006         	call	___aldiv	;wreg free
   972  000F18  C0A0  F0B3         	movff	?___aldiv,_D_UART_Init$1514
   973  000F1C  C0A1  F0B4         	movff	?___aldiv+1,_D_UART_Init$1514+1
   974  000F20  C0A2  F0B5         	movff	?___aldiv+2,_D_UART_Init$1514+2
   975  000F24  C0A3  F0B6         	movff	?___aldiv+3,_D_UART_Init$1514+3
   976                           
   977                           ;UART_Driver.c: 210: SPBRG = ((16000000/baud)/64)-1;
   978  000F28  C0B3  F0A0         	movff	_D_UART_Init$1514,___aldiv@dividend
   979  000F2C  C0B4  F0A1         	movff	_D_UART_Init$1514+1,___aldiv@dividend+1
   980  000F30  C0B5  F0A2         	movff	_D_UART_Init$1514+2,___aldiv@dividend+2
   981  000F34  C0B6  F0A3         	movff	_D_UART_Init$1514+3,___aldiv@dividend+3
   982  000F38  0E40               	movlw	64
   983  000F3A  0100               	movlb	0	; () banked
   984  000F3C  6FA4               	movwf	___aldiv@divisor& (0+255),b
   985  000F3E  0E00               	movlw	0
   986  000F40  6FA5               	movwf	(___aldiv@divisor+1)& (0+255),b
   987  000F42  0E00               	movlw	0
   988  000F44  6FA6               	movwf	(___aldiv@divisor+2)& (0+255),b
   989  000F46  0E00               	movlw	0
   990  000F48  6FA7               	movwf	(___aldiv@divisor+3)& (0+255),b
   991  000F4A  EC96  F006         	call	___aldiv	;wreg free
   992  000F4E  0100               	movlb	0	; () banked
   993  000F50  05A0               	decf	?___aldiv& (0+255),w,b
   994  000F52  6EAF               	movwf	4015,c	;volatile
   995                           
   996                           ; BSR set to: 0
   997                           ;UART_Driver.c: 213: if (interrupts) {
   998  000F54  51B2               	movf	D_UART_Init@interrupts& (0+255),w,b
   999  000F56  B4D8               	btfsc	status,2,c
  1000  000F58  0012               	return	
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1004  000F5A  8ED0               	bsf	4048,7,c	;volatile
  1005                           
  1006                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1007  000F5C  8EF2               	bsf	intcon,7,c	;volatile
  1008                           
  1009                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1010  000F5E  8CF2               	bsf	intcon,6,c	;volatile
  1011                           
  1012                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1013  000F60  9A9E               	bcf	3998,5,c	;volatile
  1014                           
  1015                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1016  000F62  9A9F               	bcf	3999,5,c	;volatile
  1017                           
  1018                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1019  000F64  8A9D               	bsf	3997,5,c	;volatile
  1020  000F66  0012               	return	
  1021  000F68                     __end_of_D_UART_Init:
  1022                           	opt stack 0
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           intcon	equ	0xFF2
  1028                           postinc0	equ	0xFEE
  1029                           plusw0	equ	0xFEB
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1l	equ	0xFE1
  1033                           plusw2	equ	0xFDB
  1034                           status	equ	0xFD8
  1035                           
  1036 ;; *************** function ___aldiv *****************
  1037 ;; Defined at:
  1038 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/aldiv.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  dividend        4    0[BANK0 ] long 
  1041 ;;  divisor         4    4[BANK0 ] long 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  quotient        4   10[BANK0 ] long 
  1044 ;;  sign            1    9[BANK0 ] unsigned char 
  1045 ;;  counter         1    8[BANK0 ] unsigned char 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  4    0[BANK0 ] long 
  1048 ;; Registers used:
  1049 ;;		wreg, status,2, status,0
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1055 ;;      Params:         0       8       0       0       0       0       0       0       0
  1056 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1057 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1058 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1059 ;;Total ram usage:       14 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    7
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_D_UART_Init
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           	psect	text3
  1070  000D2C                     __ptext3:
  1071                           	opt stack 0
  1072  000D2C                     ___aldiv:
  1073                           	opt stack 22
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;incstack = 0
  1077  000D2C  0E00               	movlw	0
  1078  000D2E  0100               	movlb	0	; () banked
  1079  000D30  6FA9               	movwf	___aldiv@sign& (0+255),b
  1080                           
  1081                           ; BSR set to: 0
  1082  000D32  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1083  000D34  D00A               	goto	l328
  1084                           
  1085                           ; BSR set to: 0
  1086  000D36  1FA7               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1087  000D38  1FA6               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1088  000D3A  1FA5               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1089  000D3C  6DA4               	negf	___aldiv@divisor& (0+255),b
  1090  000D3E  0E00               	movlw	0
  1091  000D40  23A5               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1092  000D42  23A6               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1093  000D44  23A7               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1094                           
  1095                           ; BSR set to: 0
  1096  000D46  0E01               	movlw	1
  1097  000D48  6FA9               	movwf	___aldiv@sign& (0+255),b
  1098  000D4A                     l328:
  1099                           
  1100                           ; BSR set to: 0
  1101                           
  1102                           ; BSR set to: 0
  1103  000D4A  AFA3               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1104  000D4C  D00A               	goto	l329
  1105                           
  1106                           ; BSR set to: 0
  1107  000D4E  1FA3               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1108  000D50  1FA2               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1109  000D52  1FA1               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1110  000D54  6DA0               	negf	___aldiv@dividend& (0+255),b
  1111  000D56  0E00               	movlw	0
  1112  000D58  23A1               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1113  000D5A  23A2               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1114  000D5C  23A3               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1115                           
  1116                           ; BSR set to: 0
  1117  000D5E  0E01               	movlw	1
  1118  000D60  1BA9               	xorwf	___aldiv@sign& (0+255),f,b
  1119  000D62                     l329:
  1120                           
  1121                           ; BSR set to: 0
  1122                           
  1123                           ; BSR set to: 0
  1124  000D62  0E00               	movlw	0
  1125  000D64  6FAA               	movwf	___aldiv@quotient& (0+255),b
  1126  000D66  0E00               	movlw	0
  1127  000D68  6FAB               	movwf	(___aldiv@quotient+1)& (0+255),b
  1128  000D6A  0E00               	movlw	0
  1129  000D6C  6FAC               	movwf	(___aldiv@quotient+2)& (0+255),b
  1130  000D6E  0E00               	movlw	0
  1131  000D70  6FAD               	movwf	(___aldiv@quotient+3)& (0+255),b
  1132                           
  1133                           ; BSR set to: 0
  1134  000D72  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1135  000D74  11A5               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1136  000D76  11A6               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1137  000D78  11A7               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1138  000D7A  B4D8               	btfsc	status,2,c
  1139  000D7C  D02A               	goto	l336
  1140                           
  1141                           ; BSR set to: 0
  1142  000D7E  0E01               	movlw	1
  1143  000D80  6FA8               	movwf	___aldiv@counter& (0+255),b
  1144  000D82  D006               	goto	l331
  1145  000D84                     
  1146                           ; BSR set to: 0
  1147                           
  1148                           ; BSR set to: 0
  1149  000D84  90D8               	bcf	status,0,c
  1150  000D86  37A4               	rlcf	___aldiv@divisor& (0+255),f,b
  1151  000D88  37A5               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1152  000D8A  37A6               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1153  000D8C  37A7               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1154  000D8E  2BA8               	incf	___aldiv@counter& (0+255),f,b
  1155  000D90                     l331:
  1156                           
  1157                           ; BSR set to: 0
  1158                           
  1159                           ; BSR set to: 0
  1160  000D90  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1161  000D92  D7F8               	goto	l332
  1162  000D94                     u880:
  1163                           
  1164                           ; BSR set to: 0
  1165                           
  1166                           ; BSR set to: 0
  1167                           
  1168                           ; BSR set to: 0
  1169  000D94  90D8               	bcf	status,0,c
  1170  000D96  37AA               	rlcf	___aldiv@quotient& (0+255),f,b
  1171  000D98  37AB               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1172  000D9A  37AC               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1173  000D9C  37AD               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1174                           
  1175                           ; BSR set to: 0
  1176  000D9E  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1177  000DA0  5DA0               	subwf	___aldiv@dividend& (0+255),w,b
  1178  000DA2  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1179  000DA4  59A1               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1180  000DA6  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1181  000DA8  59A2               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1182  000DAA  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1183  000DAC  59A3               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1184  000DAE  A0D8               	btfss	status,0,c
  1185  000DB0  D009               	goto	l335
  1186                           
  1187                           ; BSR set to: 0
  1188  000DB2  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1189  000DB4  5FA0               	subwf	___aldiv@dividend& (0+255),f,b
  1190  000DB6  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1191  000DB8  5BA1               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1192  000DBA  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1193  000DBC  5BA2               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1194  000DBE  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1195  000DC0  5BA3               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1196                           
  1197                           ; BSR set to: 0
  1198  000DC2  81AA               	bsf	___aldiv@quotient& (0+255),0,b
  1199  000DC4                     l335:
  1200                           
  1201                           ; BSR set to: 0
  1202                           
  1203                           ; BSR set to: 0
  1204  000DC4  90D8               	bcf	status,0,c
  1205  000DC6  33A7               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1206  000DC8  33A6               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1207  000DCA  33A5               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1208  000DCC  33A4               	rrcf	___aldiv@divisor& (0+255),f,b
  1209                           
  1210                           ; BSR set to: 0
  1211  000DCE  2FA8               	decfsz	___aldiv@counter& (0+255),f,b
  1212  000DD0  D7E1               	goto	u880
  1213  000DD2                     l336:
  1214                           
  1215                           ; BSR set to: 0
  1216                           
  1217                           ; BSR set to: 0
  1218                           
  1219                           ; BSR set to: 0
  1220  000DD2  51A9               	movf	___aldiv@sign& (0+255),w,b
  1221  000DD4  B4D8               	btfsc	status,2,c
  1222  000DD6  D008               	goto	l337
  1223                           
  1224                           ; BSR set to: 0
  1225  000DD8  1FAD               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1226  000DDA  1FAC               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1227  000DDC  1FAB               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1228  000DDE  6DAA               	negf	___aldiv@quotient& (0+255),b
  1229  000DE0  0E00               	movlw	0
  1230  000DE2  23AB               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1231  000DE4  23AC               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1232  000DE6  23AD               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1233  000DE8                     l337:
  1234                           
  1235                           ; BSR set to: 0
  1236                           
  1237                           ; BSR set to: 0
  1238  000DE8  C0AA  F0A0         	movff	___aldiv@quotient,?___aldiv
  1239  000DEC  C0AB  F0A1         	movff	___aldiv@quotient+1,?___aldiv+1
  1240  000DF0  C0AC  F0A2         	movff	___aldiv@quotient+2,?___aldiv+2
  1241  000DF4  C0AD  F0A3         	movff	___aldiv@quotient+3,?___aldiv+3
  1242  000DF8  0012               	return	
  1243  000DFA                     __end_of___aldiv:
  1244                           	opt stack 0
  1245                           tblptru	equ	0xFF8
  1246                           tblptrh	equ	0xFF7
  1247                           tblptrl	equ	0xFF6
  1248                           tablat	equ	0xFF5
  1249                           intcon	equ	0xFF2
  1250                           postinc0	equ	0xFEE
  1251                           plusw0	equ	0xFEB
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           fsr1l	equ	0xFE1
  1255                           plusw2	equ	0xFDB
  1256                           status	equ	0xFD8
  1257                           
  1258 ;; *************** function _D_UART_Enable *****************
  1259 ;; Defined at:
  1260 ;;		line 244 in file "Drivers/UART_Driver.c"
  1261 ;; Parameters:    Size  Location     Type
  1262 ;;  enable          1    wreg     unsigned char 
  1263 ;; Auto vars:     Size  Location     Type
  1264 ;;  enable          1    0[BANK0 ] unsigned char 
  1265 ;; Return value:  Size  Location     Type
  1266 ;;                  1    wreg      void 
  1267 ;; Registers used:
  1268 ;;		wreg, status,2
  1269 ;; Tracked objects:
  1270 ;;		On entry : 0/0
  1271 ;;		On exit  : 0/0
  1272 ;;		Unchanged: 0/0
  1273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1274 ;;      Params:         0       0       0       0       0       0       0       0       0
  1275 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1277 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1278 ;;Total ram usage:        1 bytes
  1279 ;; Hardware stack levels used:    1
  1280 ;; Hardware stack levels required when called:    7
  1281 ;; This function calls:
  1282 ;;		Nothing
  1283 ;; This function is called by:
  1284 ;;		_D_UART_Init
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           
  1289                           	psect	text4
  1290  00135E                     __ptext4:
  1291                           	opt stack 0
  1292  00135E                     _D_UART_Enable:
  1293                           	opt stack 22
  1294                           
  1295                           ; BSR set to: 0
  1296                           ;incstack = 0
  1297                           ;D_UART_Enable@enable stored from wreg
  1298  00135E  0100               	movlb	0	; () banked
  1299  001360  6FA0               	movwf	D_UART_Enable@enable& (0+255),b
  1300                           
  1301                           ;UART_Driver.c: 245: if(enable) {
  1302  001362  0100               	movlb	0	; () banked
  1303  001364  51A0               	movf	D_UART_Enable@enable& (0+255),w,b
  1304  001366  B4D8               	btfsc	status,2,c
  1305  001368  D006               	goto	l168
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  1309  00136A  9E94               	bcf	3988,7,c	;volatile
  1310                           
  1311                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  1312  00136C  8C94               	bsf	3988,6,c	;volatile
  1313                           
  1314                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  1315  00136E  8AAC               	bsf	4012,5,c	;volatile
  1316                           
  1317                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  1318  001370  88AB               	bsf	4011,4,c	;volatile
  1319                           
  1320                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  1321  001372  8EAB               	bsf	4011,7,c	;volatile
  1322                           
  1323                           ;UART_Driver.c: 251: } else {
  1324  001374  0012               	return	
  1325  001376                     l168:
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  1329  001376  9E94               	bcf	3988,7,c	;volatile
  1330                           
  1331                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  1332  001378  9C94               	bcf	3988,6,c	;volatile
  1333                           
  1334                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  1335  00137A  9AAC               	bcf	4012,5,c	;volatile
  1336                           
  1337                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  1338  00137C  98AB               	bcf	4011,4,c	;volatile
  1339                           
  1340                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  1341  00137E  9EAB               	bcf	4011,7,c	;volatile
  1342  001380  0012               	return	
  1343  001382                     __end_of_D_UART_Enable:
  1344                           	opt stack 0
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           intcon	equ	0xFF2
  1350                           postinc0	equ	0xFEE
  1351                           plusw0	equ	0xFEB
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           plusw2	equ	0xFDB
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _D_TMR0_Init *****************
  1359 ;; Defined at:
  1360 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;		None
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;		None
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      void 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1374 ;;      Params:         0       0       0       0       0       0       0       0       0
  1375 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1376 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1377 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1378 ;;Total ram usage:        0 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    8
  1381 ;; This function calls:
  1382 ;;		_D_TMR0_Enable
  1383 ;; This function is called by:
  1384 ;;		_main
  1385 ;; This function uses a non-reentrant model
  1386 ;;
  1387                           
  1388                           	psect	text5
  1389  001382                     __ptext5:
  1390                           	opt stack 0
  1391  001382                     _D_TMR0_Init:
  1392                           	opt stack 22
  1393                           
  1394                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;incstack = 0
  1398  001382  0E00               	movlw	0
  1399  001384  ECE2  F009         	call	_D_TMR0_Enable
  1400                           
  1401                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1402  001388  9CD5               	bcf	4053,6,c	;volatile
  1403                           
  1404                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1405  00138A  9AD5               	bcf	4053,5,c	;volatile
  1406                           
  1407                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1408  00138C  98D5               	bcf	4053,4,c	;volatile
  1409                           
  1410                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1411  00138E  96D5               	bcf	4053,3,c	;volatile
  1412                           
  1413                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1414  001390  50D5               	movf	4053,w,c	;volatile
  1415  001392  0BF8               	andlw	-8
  1416  001394  0902               	iorlw	2
  1417  001396  6ED5               	movwf	4053,c	;volatile
  1418                           
  1419                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1420  001398  8ED0               	bsf	4048,7,c	;volatile
  1421                           
  1422                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1423  00139A  8EF2               	bsf	intcon,7,c	;volatile
  1424                           
  1425                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1426  00139C  8CF2               	bsf	intcon,6,c	;volatile
  1427                           
  1428                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1429  00139E  94F2               	bcf	intcon,2,c	;volatile
  1430                           
  1431                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1432  0013A0  84F1               	bsf	intcon2,2,c	;volatile
  1433                           
  1434                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1435  0013A2  8AF2               	bsf	intcon,5,c	;volatile
  1436  0013A4  0012               	return		;funcret
  1437  0013A6                     __end_of_D_TMR0_Init:
  1438                           	opt stack 0
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           intcon	equ	0xFF2
  1444                           intcon2	equ	0xFF1
  1445                           postinc0	equ	0xFEE
  1446                           plusw0	equ	0xFEB
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           plusw2	equ	0xFDB
  1451                           status	equ	0xFD8
  1452                           
  1453 ;; *************** function _D_TMR0_Enable *****************
  1454 ;; Defined at:
  1455 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;  enable          1    wreg     unsigned char 
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;  enable          1    0[BANK0 ] unsigned char 
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      void 
  1462 ;; Registers used:
  1463 ;;		wreg, status,2
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: 0/0
  1468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1469 ;;      Params:         0       0       0       0       0       0       0       0       0
  1470 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1472 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1473 ;;Total ram usage:        1 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    7
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_main
  1480 ;;		_D_TMR0_Init
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text6
  1485  0013C4                     __ptext6:
  1486                           	opt stack 0
  1487  0013C4                     _D_TMR0_Enable:
  1488                           	opt stack 22
  1489                           
  1490                           ;incstack = 0
  1491                           ;D_TMR0_Enable@enable stored from wreg
  1492  0013C4  0100               	movlb	0	; () banked
  1493  0013C6  6FA0               	movwf	D_TMR0_Enable@enable& (0+255),b
  1494                           
  1495                           ;TMR0_Driver.c: 54: if (enable) {
  1496  0013C8  0100               	movlb	0	; () banked
  1497  0013CA  51A0               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1498  0013CC  B4D8               	btfsc	status,2,c
  1499  0013CE  D002               	goto	l243
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1503  0013D0  8ED5               	bsf	4053,7,c	;volatile
  1504                           
  1505                           ;TMR0_Driver.c: 56: } else {
  1506  0013D2  0012               	return	
  1507  0013D4                     l243:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1511  0013D4  9ED5               	bcf	4053,7,c	;volatile
  1512  0013D6  0012               	return	
  1513  0013D8                     __end_of_D_TMR0_Enable:
  1514                           	opt stack 0
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           intcon	equ	0xFF2
  1520                           intcon2	equ	0xFF1
  1521                           postinc0	equ	0xFEE
  1522                           plusw0	equ	0xFEB
  1523                           wreg	equ	0xFE8
  1524                           postdec1	equ	0xFE5
  1525                           fsr1l	equ	0xFE1
  1526                           plusw2	equ	0xFDB
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function _D_PORT_Init *****************
  1530 ;; Defined at:
  1531 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;		None
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        0 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    7
  1552 ;; This function calls:
  1553 ;;		Nothing
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text7
  1560  0013A6                     __ptext7:
  1561                           	opt stack 0
  1562  0013A6                     _D_PORT_Init:
  1563                           	opt stack 23
  1564                           
  1565                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;incstack = 0
  1569  0013A6  0E00               	movlw	0
  1570  0013A8  6E92               	movwf	3986,c	;volatile
  1571  0013AA  0E00               	movlw	0
  1572  0013AC  6E80               	movwf	3968,c	;volatile
  1573                           
  1574                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1575  0013AE  0E00               	movlw	0
  1576  0013B0  6E93               	movwf	3987,c	;volatile
  1577  0013B2  0E00               	movlw	0
  1578  0013B4  6E81               	movwf	3969,c	;volatile
  1579                           
  1580                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1581  0013B6  0E00               	movlw	0
  1582  0013B8  6E94               	movwf	3988,c	;volatile
  1583  0013BA  0E00               	movlw	0
  1584  0013BC  6E82               	movwf	3970,c	;volatile
  1585                           
  1586                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1587  0013BE  0E0F               	movlw	15
  1588  0013C0  6EC1               	movwf	4033,c	;volatile
  1589  0013C2  0012               	return		;funcret
  1590  0013C4                     __end_of_D_PORT_Init:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           intcon	equ	0xFF2
  1597                           intcon2	equ	0xFF1
  1598                           postinc0	equ	0xFEE
  1599                           plusw0	equ	0xFEB
  1600                           wreg	equ	0xFE8
  1601                           postdec1	equ	0xFE5
  1602                           fsr1l	equ	0xFE1
  1603                           plusw2	equ	0xFDB
  1604                           status	equ	0xFD8
  1605                           
  1606 ;; *************** function _C_DOOR_UnlockAll *****************
  1607 ;; Defined at:
  1608 ;;		line 75 in file "Controllers/DOOR_Controller.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;		None
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  1    wreg      void 
  1615 ;; Registers used:
  1616 ;;		wreg, fsr2l, fsr2h
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1622 ;;      Params:         0       0       0       0       0       0       0       0       0
  1623 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1624 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1625 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1626 ;;Total ram usage:        0 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    7
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           	psect	text8
  1637  0013D8                     __ptext8:
  1638                           	opt stack 0
  1639  0013D8                     _C_DOOR_UnlockAll:
  1640                           	opt stack 23
  1641                           
  1642                           ;DOOR_Controller.c: 80: *doors[0].lock_port &= 0x3F;
  1643                           
  1644                           ;incstack = 0
  1645  0013D8  C062  FFD9         	movff	_doors+2,fsr2l
  1646  0013DC  C063  FFDA         	movff	_doors+3,fsr2h
  1647  0013E0  0E3F               	movlw	63
  1648  0013E2  16DF               	andwf	indf2,f,c
  1649  0013E4  0012               	return		;funcret
  1650  0013E6                     __end_of_C_DOOR_UnlockAll:
  1651                           	opt stack 0
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           intcon	equ	0xFF2
  1657                           intcon2	equ	0xFF1
  1658                           postinc0	equ	0xFEE
  1659                           plusw0	equ	0xFEB
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1l	equ	0xFE1
  1663                           indf2	equ	0xFDF
  1664                           plusw2	equ	0xFDB
  1665                           fsr2h	equ	0xFDA
  1666                           fsr2l	equ	0xFD9
  1667                           status	equ	0xFD8
  1668                           
  1669 ;; *************** function _C_DOOR_SendStates *****************
  1670 ;; Defined at:
  1671 ;;		line 96 in file "Controllers/DOOR_Controller.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  d               1   28[BANK0 ] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1685 ;;      Params:         0       0       0       0       0       0       0       0       0
  1686 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1687 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1688 ;;      Totals:         0       3       0       0       0       0       0       0       0
  1689 ;;Total ram usage:        3 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:   11
  1692 ;; This function calls:
  1693 ;;		_D_UART_Write
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text9
  1700  0010A2                     __ptext9:
  1701                           	opt stack 0
  1702  0010A2                     _C_DOOR_SendStates:
  1703                           	opt stack 19
  1704                           
  1705                           ;DOOR_Controller.c: 97: uint8_t d;
  1706                           ;DOOR_Controller.c: 98: for (d = 0; d < 5; d++) {
  1707                           
  1708                           ;incstack = 0
  1709  0010A2  0E00               	movlw	0
  1710  0010A4  0100               	movlb	0	; () banked
  1711  0010A6  6FBC               	movwf	C_DOOR_SendStates@d& (0+255),b
  1712  0010A8                     l1592:
  1713                           
  1714                           ; BSR set to: 0
  1715  0010A8  0E04               	movlw	4
  1716  0010AA  65BC               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  1717  0010AC  D001               	goto	l43
  1718  0010AE  0012               	return	
  1719  0010B0                     l43:
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;DOOR_Controller.c: 99: if (doors[d].was_open != doors[d].is_open) {
  1723                           
  1724                           ; BSR set to: 0
  1725  0010B0  51BC               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1726  0010B2  0D0A               	mullw	10
  1727  0010B4  0E06               	movlw	6
  1728  0010B6  26F3               	addwf	prodl,f,c
  1729  0010B8  0E00               	movlw	0
  1730  0010BA  22F4               	addwfc	prodh,f,c
  1731  0010BC  0E60               	movlw	low _doors
  1732  0010BE  24F3               	addwf	prodl,w,c
  1733  0010C0  6ED9               	movwf	fsr2l,c
  1734  0010C2  0E00               	movlw	high _doors
  1735  0010C4  20F4               	addwfc	prodh,w,c
  1736  0010C6  6EDA               	movwf	fsr2h,c
  1737  0010C8  51BC               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1738  0010CA  0D0A               	mullw	10
  1739  0010CC  0E05               	movlw	5
  1740  0010CE  26F3               	addwf	prodl,f,c
  1741  0010D0  0E00               	movlw	0
  1742  0010D2  22F4               	addwfc	prodh,f,c
  1743  0010D4  0E60               	movlw	low _doors
  1744  0010D6  24F3               	addwf	prodl,w,c
  1745  0010D8  6EE1               	movwf	fsr1l,c
  1746  0010DA  0E00               	movlw	high _doors
  1747  0010DC  20F4               	addwfc	prodh,w,c
  1748  0010DE  6EE2               	movwf	fsr1h,c
  1749  0010E0  50DE               	movf	postinc2,w,c
  1750  0010E2  18E6               	xorwf	postinc1,w,c
  1751  0010E4  B4D8               	btfsc	status,2,c
  1752  0010E6  D025               	goto	l45
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;DOOR_Controller.c: 101: D_UART_Write("P", "O");
  1756  0010E8  0E35               	movlw	low STR_1
  1757  0010EA  6FB5               	movwf	D_UART_Write@command& (0+255),b
  1758  0010EC  0E08               	movlw	high STR_1
  1759  0010EE  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
  1760  0010F0  0E33               	movlw	low STR_2
  1761  0010F2  6FB7               	movwf	D_UART_Write@data& (0+255),b
  1762  0010F4  0E08               	movlw	high STR_2
  1763  0010F6  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
  1764  0010F8  ECFD  F006         	call	_D_UART_Write	;wreg free
  1765                           
  1766                           ;DOOR_Controller.c: 102: doors[d].was_open = doors[d].is_open;
  1767  0010FC  0100               	movlb	0	; () banked
  1768  0010FE  51BC               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1769  001100  0D0A               	mullw	10
  1770  001102  0E06               	movlw	6
  1771  001104  26F3               	addwf	prodl,f,c
  1772  001106  0E00               	movlw	0
  1773  001108  22F4               	addwfc	prodh,f,c
  1774  00110A  0E60               	movlw	low _doors
  1775  00110C  24F3               	addwf	prodl,w,c
  1776  00110E  6ED9               	movwf	fsr2l,c
  1777  001110  0E00               	movlw	high _doors
  1778  001112  20F4               	addwfc	prodh,w,c
  1779  001114  6EDA               	movwf	fsr2h,c
  1780  001116  51BC               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1781  001118  0D0A               	mullw	10
  1782  00111A  0E05               	movlw	5
  1783  00111C  26F3               	addwf	prodl,f,c
  1784  00111E  0E00               	movlw	0
  1785  001120  22F4               	addwfc	prodh,f,c
  1786  001122  0E60               	movlw	low _doors
  1787  001124  24F3               	addwf	prodl,w,c
  1788  001126  6EE1               	movwf	fsr1l,c
  1789  001128  0E00               	movlw	high _doors
  1790  00112A  20F4               	addwfc	prodh,w,c
  1791  00112C  6EE2               	movwf	fsr1h,c
  1792  00112E  CFDF FFE7          	movff	indf2,indf1
  1793  001132                     l45:
  1794                           
  1795                           ; BSR set to: 0
  1796                           
  1797                           ; BSR set to: 0
  1798  001132  2BBC               	incf	C_DOOR_SendStates@d& (0+255),f,b
  1799  001134  D7B9               	goto	l1592
  1800  001136                     __end_of_C_DOOR_SendStates:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           prodh	equ	0xFF4
  1807                           prodl	equ	0xFF3
  1808                           intcon	equ	0xFF2
  1809                           intcon2	equ	0xFF1
  1810                           postinc0	equ	0xFEE
  1811                           plusw0	equ	0xFEB
  1812                           wreg	equ	0xFE8
  1813                           indf1	equ	0xFE7
  1814                           postinc1	equ	0xFE6
  1815                           postdec1	equ	0xFE5
  1816                           fsr1h	equ	0xFE2
  1817                           fsr1l	equ	0xFE1
  1818                           indf2	equ	0xFDF
  1819                           postinc2	equ	0xFDE
  1820                           plusw2	equ	0xFDB
  1821                           fsr2h	equ	0xFDA
  1822                           fsr2l	equ	0xFD9
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _D_UART_Write *****************
  1826 ;; Defined at:
  1827 ;;		line 223 in file "Drivers/UART_Driver.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;  command         2   21[BANK0 ] PTR const unsigned char 
  1830 ;;		 -> STR_11(2), STR_1(2), 
  1831 ;;  data            2   23[BANK0 ] PTR const unsigned char 
  1832 ;;		 -> STR_12(6), STR_2(2), 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1844 ;;      Params:         0       4       0       0       0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1846 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1847 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1848 ;;Total ram usage:        5 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:   10
  1851 ;; This function calls:
  1852 ;;		_printf
  1853 ;; This function is called by:
  1854 ;;		_C_DOOR_SendStates
  1855 ;;		_main
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text10
  1860  000DFA                     __ptext10:
  1861                           	opt stack 0
  1862  000DFA                     _D_UART_Write:
  1863                           	opt stack 20
  1864                           
  1865                           ;UART_Driver.c: 224: printf(startCharacter);
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;incstack = 0
  1869  000DFA  C044  F0A7         	movff	_startCharacter,printf@f
  1870  000DFE  C045  F0A8         	movff	_startCharacter+1,printf@f+1
  1871  000E02  0100               	movlb	0	; () banked
  1872  000E04  51A7               	movf	printf@f& (0+255),w,b
  1873  000E06  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1874  000E08  A4D8               	btfss	status,2,c
  1875  000E0A  0E00               	movlw	low (__mediumconst shr (0+16))
  1876  000E0C  6FA9               	movwf	(printf@f+2)& (0+255),b
  1877  000E0E  ECE8  F004         	call	_printf	;wreg free
  1878                           
  1879                           ;UART_Driver.c: 226: printf(messageCharacter);
  1880  000E12  C0C2  F0A7         	movff	_messageCharacter,printf@f
  1881  000E16  C0C3  F0A8         	movff	_messageCharacter+1,printf@f+1
  1882  000E1A  0100               	movlb	0	; () banked
  1883  000E1C  51A7               	movf	printf@f& (0+255),w,b
  1884  000E1E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1885  000E20  A4D8               	btfss	status,2,c
  1886  000E22  0E00               	movlw	low (__mediumconst shr (0+16))
  1887  000E24  6FA9               	movwf	(printf@f+2)& (0+255),b
  1888  000E26  ECE8  F004         	call	_printf	;wreg free
  1889                           
  1890                           ;UART_Driver.c: 227: printf(deviceName);
  1891  000E2A  C0BF  F0A7         	movff	_deviceName,printf@f
  1892  000E2E  C0C0  F0A8         	movff	_deviceName+1,printf@f+1
  1893  000E32  C0C1  F0A9         	movff	_deviceName+2,printf@f+2
  1894  000E36  ECE8  F004         	call	_printf	;wreg free
  1895                           
  1896                           ;UART_Driver.c: 229: printf(":");printf(command);
  1897  000E3A  0E31               	movlw	low STR_8
  1898  000E3C  0100               	movlb	0	; () banked
  1899  000E3E  6FA7               	movwf	printf@f& (0+255),b
  1900  000E40  0E08               	movlw	high STR_8
  1901  000E42  6FA8               	movwf	(printf@f+1)& (0+255),b
  1902  000E44  51A7               	movf	printf@f& (0+255),w,b
  1903  000E46  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1904  000E48  A4D8               	btfss	status,2,c
  1905  000E4A  0E00               	movlw	low (__mediumconst shr (0+16))
  1906  000E4C  6FA9               	movwf	(printf@f+2)& (0+255),b
  1907  000E4E  ECE8  F004         	call	_printf	;wreg free
  1908  000E52  C0B5  F0A7         	movff	D_UART_Write@command,printf@f
  1909  000E56  C0B6  F0A8         	movff	D_UART_Write@command+1,printf@f+1
  1910  000E5A  0100               	movlb	0	; () banked
  1911  000E5C  51A7               	movf	printf@f& (0+255),w,b
  1912  000E5E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1913  000E60  A4D8               	btfss	status,2,c
  1914  000E62  0E00               	movlw	low (__mediumconst shr (0+16))
  1915  000E64  6FA9               	movwf	(printf@f+2)& (0+255),b
  1916  000E66  ECE8  F004         	call	_printf	;wreg free
  1917                           
  1918                           ;UART_Driver.c: 231: printf(":");printf(data);
  1919  000E6A  0E31               	movlw	low STR_8
  1920  000E6C  0100               	movlb	0	; () banked
  1921  000E6E  6FA7               	movwf	printf@f& (0+255),b
  1922  000E70  0E08               	movlw	high STR_8
  1923  000E72  6FA8               	movwf	(printf@f+1)& (0+255),b
  1924  000E74  51A7               	movf	printf@f& (0+255),w,b
  1925  000E76  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1926  000E78  A4D8               	btfss	status,2,c
  1927  000E7A  0E00               	movlw	low (__mediumconst shr (0+16))
  1928  000E7C  6FA9               	movwf	(printf@f+2)& (0+255),b
  1929  000E7E  ECE8  F004         	call	_printf	;wreg free
  1930  000E82  C0B7  F0A7         	movff	D_UART_Write@data,printf@f
  1931  000E86  C0B8  F0A8         	movff	D_UART_Write@data+1,printf@f+1
  1932  000E8A  0100               	movlb	0	; () banked
  1933  000E8C  51A7               	movf	printf@f& (0+255),w,b
  1934  000E8E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1935  000E90  A4D8               	btfss	status,2,c
  1936  000E92  0E00               	movlw	low (__mediumconst shr (0+16))
  1937  000E94  6FA9               	movwf	(printf@f+2)& (0+255),b
  1938  000E96  ECE8  F004         	call	_printf	;wreg free
  1939                           
  1940                           ;UART_Driver.c: 233: printf(stopCharacter);
  1941  000E9A  C042  F0A7         	movff	_stopCharacter,printf@f
  1942  000E9E  C043  F0A8         	movff	_stopCharacter+1,printf@f+1
  1943  000EA2  0100               	movlb	0	; () banked
  1944  000EA4  51A7               	movf	printf@f& (0+255),w,b
  1945  000EA6  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  1946  000EA8  A4D8               	btfss	status,2,c
  1947  000EAA  0E00               	movlw	low (__mediumconst shr (0+16))
  1948  000EAC  6FA9               	movwf	(printf@f+2)& (0+255),b
  1949  000EAE  ECE8  F004         	call	_printf	;wreg free
  1950                           
  1951                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(16000000/4000.0)));
  1952  000EB2  0E06               	movlw	6
  1953  000EB4  0100               	movlb	0	; () banked
  1954  000EB6  6FB9               	movwf	??_D_UART_Write& (0+255),b
  1955  000EB8  0E30               	movlw	48
  1956  000EBA                     u1267:
  1957  000EBA  2EE8               	decfsz	wreg,f,c
  1958  000EBC  D7FE               	bra	u1267
  1959  000EBE  2FB9               	decfsz	??_D_UART_Write& (0+255),f,b
  1960  000EC0  D7FC               	bra	u1267
  1961  000EC2  F000               	nop	
  1962  000EC4  0012               	return		;funcret
  1963  000EC6                     __end_of_D_UART_Write:
  1964                           	opt stack 0
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           prodh	equ	0xFF4
  1970                           prodl	equ	0xFF3
  1971                           intcon	equ	0xFF2
  1972                           intcon2	equ	0xFF1
  1973                           postinc0	equ	0xFEE
  1974                           plusw0	equ	0xFEB
  1975                           wreg	equ	0xFE8
  1976                           indf1	equ	0xFE7
  1977                           postinc1	equ	0xFE6
  1978                           postdec1	equ	0xFE5
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           indf2	equ	0xFDF
  1982                           postinc2	equ	0xFDE
  1983                           plusw2	equ	0xFDB
  1984                           fsr2h	equ	0xFDA
  1985                           fsr2l	equ	0xFD9
  1986                           status	equ	0xFD8
  1987                           
  1988 ;; *************** function _printf *****************
  1989 ;; Defined at:
  1990 ;;		line 464 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  1993 ;;		 -> STR_12(6), STR_11(2), STR_10(2), STR_9(2), 
  1994 ;;		 -> STR_8(2), STR_7(3), STR_6(4), STR_5(4), 
  1995 ;;		 -> ROM(32767), STR_4(2), STR_3(2), STR_2(2), 
  1996 ;;		 -> STR_1(2), 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  idx             1   16[BANK0 ] unsigned char 
  1999 ;;  tmpval          4    0        struct .
  2000 ;;  cp              3    0        PTR const unsigned char 
  2001 ;;  val             2   17[BANK0 ] unsigned int 
  2002 ;;  ap              2   14[BANK0 ] PTR void [1]
  2003 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2004 ;;  len             2    0        unsigned int 
  2005 ;;  c               1   20[BANK0 ] char 
  2006 ;;  prec            1   19[BANK0 ] char 
  2007 ;;  flag            1   13[BANK0 ] unsigned char 
  2008 ;; Return value:  Size  Location     Type
  2009 ;;                  2    7[BANK0 ] int 
  2010 ;; Registers used:
  2011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2012 ;; Tracked objects:
  2013 ;;		On entry : 0/0
  2014 ;;		On exit  : 0/0
  2015 ;;		Unchanged: 0/0
  2016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2017 ;;      Params:         0       3       0       0       0       0       0       0       0
  2018 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2019 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2020 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2021 ;;Total ram usage:       14 bytes
  2022 ;; Hardware stack levels used:    1
  2023 ;; Hardware stack levels required when called:    9
  2024 ;; This function calls:
  2025 ;;		___lwdiv
  2026 ;;		_putch
  2027 ;; This function is called by:
  2028 ;;		_D_UART_Write
  2029 ;; This function uses a non-reentrant model
  2030 ;;
  2031                           
  2032                           	psect	text11
  2033  0009D0                     __ptext11:
  2034                           	opt stack 0
  2035  0009D0                     _printf:
  2036                           	opt stack 20
  2037                           
  2038                           ;doprnt.c: 466: va_list ap;
  2039                           ;doprnt.c: 499: signed char c;
  2040                           ;doprnt.c: 506: signed char prec;
  2041                           ;doprnt.c: 508: unsigned char flag;
  2042                           ;doprnt.c: 523: union {
  2043                           ;doprnt.c: 524: unsigned long vd;
  2044                           ;doprnt.c: 525: double integ;
  2045                           ;doprnt.c: 526: } tmpval;
  2046                           ;doprnt.c: 528: unsigned int val;
  2047                           ;doprnt.c: 529: unsigned len;
  2048                           ;doprnt.c: 530: const char * cp;
  2049                           ;doprnt.c: 533: *ap = __va_start();
  2050                           
  2051                           ;incstack = 0
  2052  0009D0  0EAA               	movlw	low (?_printf+3)
  2053  0009D2  0100               	movlb	0	; () banked
  2054  0009D4  6FAE               	movwf	printf@ap& (0+255),b
  2055  0009D6  0E00               	movlw	high (?_printf+3)
  2056  0009D8  6FAF               	movwf	(printf@ap+1)& (0+255),b
  2057                           
  2058                           ;doprnt.c: 536: while(c = *f++) {
  2059  0009DA  D07E               	goto	u750
  2060  0009DC                     
  2061                           ; BSR set to: 0
  2062                           ;doprnt.c: 538: if(c != '%')
  2063                           
  2064                           ; BSR set to: 0
  2065  0009DC  0E25               	movlw	37
  2066  0009DE  19B4               	xorwf	printf@c& (0+255),w,b
  2067  0009E0  B4D8               	btfsc	status,2,c
  2068  0009E2  D004               	goto	l258
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;doprnt.c: 540: {
  2072                           ;doprnt.c: 541: (putch(c) );
  2073  0009E4  51B4               	movf	printf@c& (0+255),w,b
  2074  0009E6  ECF3  F009         	call	_putch
  2075                           
  2076                           ;doprnt.c: 542: continue;
  2077  0009EA  D076               	goto	u750
  2078  0009EC                     l258:
  2079                           
  2080                           ;doprnt.c: 543: }
  2081                           ;doprnt.c: 548: flag = 0;
  2082  0009EC  0E00               	movlw	0
  2083  0009EE  0100               	movlb	0	; () banked
  2084  0009F0  6FAD               	movwf	printf@flag& (0+255),b
  2085                           
  2086                           ;doprnt.c: 635: switch(c = *f++) {
  2087  0009F2  D004               	goto	l259
  2088  0009F4                     
  2089                           ; BSR set to: 0
  2090                           ;doprnt.c: 809: (putch(c) );
  2091                           
  2092                           ; BSR set to: 0
  2093  0009F4  51B4               	movf	printf@c& (0+255),w,b
  2094  0009F6  ECF3  F009         	call	_putch
  2095                           
  2096                           ;doprnt.c: 810: continue;
  2097  0009FA  D06E               	goto	u750
  2098  0009FC                     l259:
  2099  0009FC  C0A7  F0AA         	movff	printf@f,??_printf
  2100  000A00  C0A8  F0AB         	movff	printf@f+1,??_printf+1
  2101  000A04  C0A9  F0AC         	movff	printf@f+2,??_printf+2
  2102  000A08  0100               	movlb	0	; () banked
  2103  000A0A  2BA7               	incf	printf@f& (0+255),f,b
  2104  000A0C  0E00               	movlw	0
  2105  000A0E  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2106  000A10  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2107  000A12  C0AA  FFF6         	movff	??_printf,tblptrl
  2108  000A16  C0AB  FFF7         	movff	??_printf+1,tblptrh
  2109  000A1A  C0AC  FFF8         	movff	??_printf+2,tblptru
  2110  000A1E  0008               	tblrd		*
  2111  000A20  CFF5 F0B4          	movff	tablat,printf@c
  2112  000A24  51B4               	movf	printf@c& (0+255),w,b
  2113                           
  2114                           ; Switch size 1, requested type "space"
  2115                           ; Number of cases is 2, Range of values is 0 to 120
  2116                           ; switch strategies available:
  2117                           ; Name         Instructions Cycles
  2118                           ; simple_byte            7     4 (average)
  2119                           ;	Chosen strategy is simple_byte
  2120  000A26  0A00               	xorlw	0	; case 0
  2121  000A28  B4D8               	btfsc	status,2,c
  2122  000A2A  0012               	return	
  2123  000A2C  0A78               	xorlw	120	; case 120
  2124  000A2E  A4D8               	btfss	status,2,c
  2125  000A30  D7E1               	goto	l264
  2126                           
  2127                           ;doprnt.c: 1273: {
  2128                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2129                           
  2130                           ; BSR set to: 0
  2131  000A32  C0AE  FFD9         	movff	printf@ap,fsr2l
  2132  000A36  C0AF  FFDA         	movff	printf@ap+1,fsr2h
  2133  000A3A  CFDE F0B1          	movff	postinc2,printf@val
  2134  000A3E  CFDD F0B2          	movff	postdec2,printf@val+1
  2135  000A42  0E02               	movlw	2
  2136  000A44  0100               	movlb	0	; () banked
  2137  000A46  27AE               	addwf	printf@ap& (0+255),f,b
  2138  000A48  0E00               	movlw	0
  2139  000A4A  23AF               	addwfc	(printf@ap+1)& (0+255),f,b
  2140                           
  2141                           ; BSR set to: 0
  2142                           ;doprnt.c: 1287: }
  2143                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2144  000A4C  0E01               	movlw	1
  2145  000A4E  6FB4               	movwf	printf@c& (0+255),b
  2146  000A50  D011               	goto	l1446
  2147  000A52                     
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2150                           
  2151                           ; BSR set to: 0
  2152  000A52  51B4               	movf	printf@c& (0+255),w,b
  2153  000A54  0D02               	mullw	2
  2154  000A56  0E01               	movlw	low _hexpowers
  2155  000A58  24F3               	addwf	prodl,w,c
  2156  000A5A  6EF6               	movwf	tblptrl,c
  2157  000A5C  0E08               	movlw	high _hexpowers
  2158  000A5E  20F4               	addwfc	prodh,w,c
  2159  000A60  6EF7               	movwf	tblptrh,c
  2160  000A62                     	if	0	;There are less than 3 active tblptr bytes
  2161  000A62                     	endif
  2162  000A62  0009               	tblrd		*+
  2163  000A64  50F5               	movf	tablat,w,c
  2164  000A66  5DB1               	subwf	printf@val& (0+255),w,b
  2165  000A68  0009               	tblrd		*+
  2166  000A6A  50F5               	movf	tablat,w,c
  2167  000A6C  59B2               	subwfb	(printf@val+1)& (0+255),w,b
  2168  000A6E  A0D8               	btfss	status,0,c
  2169  000A70  D005               	goto	u740
  2170                           
  2171                           ; BSR set to: 0
  2172                           
  2173                           ; BSR set to: 0
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;doprnt.c: 1318: break;
  2177  000A72  2BB4               	incf	printf@c& (0+255),f,b
  2178  000A74                     l1446:
  2179                           
  2180                           ; BSR set to: 0
  2181  000A74  0E04               	movlw	4
  2182  000A76  19B4               	xorwf	printf@c& (0+255),w,b
  2183  000A78  A4D8               	btfss	status,2,c
  2184  000A7A  D7EB               	goto	l265
  2185  000A7C                     u740:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;doprnt.c: 1422: {
  2189                           ;doprnt.c: 1469: }
  2190                           ;doprnt.c: 1472: prec = c;
  2191  000A7C  C0B4  F0B3         	movff	printf@c,printf@prec
  2192                           
  2193                           ;doprnt.c: 1474: while(prec--) {
  2194  000A80  D026               	goto	l268
  2195  000A82                     
  2196                           ; BSR set to: 0
  2197                           ;doprnt.c: 1478: {
  2198                           ;doprnt.c: 1499: {
  2199                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2200                           
  2201                           ; BSR set to: 0
  2202  000A82  C0B1  F0A0         	movff	printf@val,___lwdiv@dividend
  2203  000A86  C0B2  F0A1         	movff	printf@val+1,___lwdiv@dividend+1
  2204  000A8A  51B3               	movf	printf@prec& (0+255),w,b
  2205  000A8C  0D02               	mullw	2
  2206  000A8E  0E01               	movlw	low _hexpowers
  2207  000A90  24F3               	addwf	prodl,w,c
  2208  000A92  6EF6               	movwf	tblptrl,c
  2209  000A94  0E08               	movlw	high _hexpowers
  2210  000A96  20F4               	addwfc	prodh,w,c
  2211  000A98  6EF7               	movwf	tblptrh,c
  2212  000A9A                     	if	0	;There are less than 3 active tblptr bytes
  2213  000A9A                     	endif
  2214  000A9A  0009               	tblrd		*+
  2215  000A9C  CFF5 F0A2          	movff	tablat,___lwdiv@divisor
  2216  000AA0  000A               	tblrd		*-
  2217  000AA2  CFF5 F0A3          	movff	tablat,___lwdiv@divisor+1
  2218  000AA6  EC45  F009         	call	___lwdiv	;wreg free
  2219  000AAA  0100               	movlb	0	; () banked
  2220  000AAC  51A0               	movf	?___lwdiv& (0+255),w,b
  2221  000AAE  0B0F               	andlw	15
  2222  000AB0  6FB0               	movwf	printf@idx& (0+255),b
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2226  000AB2  51B0               	movf	printf@idx& (0+255),w,b
  2227  000AB4  0D01               	mullw	1
  2228  000AB6  0E09               	movlw	low STR_13
  2229  000AB8  24F3               	addwf	prodl,w,c
  2230  000ABA  6EF6               	movwf	tblptrl,c
  2231  000ABC  0E08               	movlw	high STR_13
  2232  000ABE  20F4               	addwfc	prodh,w,c
  2233  000AC0  6EF7               	movwf	tblptrh,c
  2234  000AC2                     	if	0	;There are less than 3 active tblptr bytes
  2235  000AC2                     	endif
  2236  000AC2  0008               	tblrd		*
  2237  000AC4  CFF5 F0B4          	movff	tablat,printf@c
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1508: }
  2241                           ;doprnt.c: 1523: }
  2242                           ;doprnt.c: 1524: (putch(c) );
  2243  000AC8  51B4               	movf	printf@c& (0+255),w,b
  2244  000ACA  ECF3  F009         	call	_putch
  2245  000ACE                     l268:
  2246  000ACE  0100               	movlb	0	; () banked
  2247  000AD0  07B3               	decf	printf@prec& (0+255),f,b
  2248  000AD2  29B3               	incf	printf@prec& (0+255),w,b
  2249  000AD4  A4D8               	btfss	status,2,c
  2250  000AD6  D7D5               	goto	l269
  2251  000AD8                     u750:
  2252                           
  2253                           ; BSR set to: 0
  2254                           
  2255                           ; BSR set to: 0
  2256  000AD8  C0A7  F0AA         	movff	printf@f,??_printf
  2257  000ADC  C0A8  F0AB         	movff	printf@f+1,??_printf+1
  2258  000AE0  C0A9  F0AC         	movff	printf@f+2,??_printf+2
  2259  000AE4  0100               	movlb	0	; () banked
  2260  000AE6  2BA7               	incf	printf@f& (0+255),f,b
  2261  000AE8  0E00               	movlw	0
  2262  000AEA  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2263  000AEC  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2264  000AEE  C0AA  FFF6         	movff	??_printf,tblptrl
  2265  000AF2  C0AB  FFF7         	movff	??_printf+1,tblptrh
  2266  000AF6  C0AC  FFF8         	movff	??_printf+2,tblptru
  2267  000AFA  0008               	tblrd		*
  2268  000AFC  CFF5 F0B4          	movff	tablat,printf@c
  2269  000B00  51B4               	movf	printf@c& (0+255),w,b
  2270  000B02  B4D8               	btfsc	status,2,c
  2271  000B04  0012               	return	
  2272  000B06  D76A               	goto	l257
  2273  000B08                     __end_of_printf:
  2274                           	opt stack 0
  2275                           tblptru	equ	0xFF8
  2276                           tblptrh	equ	0xFF7
  2277                           tblptrl	equ	0xFF6
  2278                           tablat	equ	0xFF5
  2279                           prodh	equ	0xFF4
  2280                           prodl	equ	0xFF3
  2281                           intcon	equ	0xFF2
  2282                           intcon2	equ	0xFF1
  2283                           postinc0	equ	0xFEE
  2284                           plusw0	equ	0xFEB
  2285                           wreg	equ	0xFE8
  2286                           indf1	equ	0xFE7
  2287                           postinc1	equ	0xFE6
  2288                           postdec1	equ	0xFE5
  2289                           fsr1h	equ	0xFE2
  2290                           fsr1l	equ	0xFE1
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           postdec2	equ	0xFDD
  2294                           plusw2	equ	0xFDB
  2295                           fsr2h	equ	0xFDA
  2296                           fsr2l	equ	0xFD9
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function _putch *****************
  2300 ;; Defined at:
  2301 ;;		line 260 in file "Drivers/UART_Driver.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  data            1    wreg     unsigned char 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  data            1    1[BANK0 ] unsigned char 
  2306 ;; Return value:  Size  Location     Type
  2307 ;;                  1    wreg      void 
  2308 ;; Registers used:
  2309 ;;		wreg, status,2, cstack
  2310 ;; Tracked objects:
  2311 ;;		On entry : 0/0
  2312 ;;		On exit  : 0/0
  2313 ;;		Unchanged: 0/0
  2314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2315 ;;      Params:         0       0       0       0       0       0       0       0       0
  2316 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2318 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2319 ;;Total ram usage:        1 bytes
  2320 ;; Hardware stack levels used:    1
  2321 ;; Hardware stack levels required when called:    8
  2322 ;; This function calls:
  2323 ;;		_writeByte
  2324 ;; This function is called by:
  2325 ;;		_printf
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text12
  2330  0013E6                     __ptext12:
  2331                           	opt stack 0
  2332  0013E6                     _putch:
  2333                           	opt stack 20
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;incstack = 0
  2337                           ;putch@data stored from wreg
  2338  0013E6  0100               	movlb	0	; () banked
  2339  0013E8  6FA1               	movwf	putch@data& (0+255),b
  2340                           
  2341                           ;UART_Driver.c: 261: writeByte(data);
  2342  0013EA  0100               	movlb	0	; () banked
  2343  0013EC  51A1               	movf	putch@data& (0+255),w,b
  2344  0013EE  ECFA  F009         	call	_writeByte
  2345  0013F2  0012               	return		;funcret
  2346  0013F4                     __end_of_putch:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           prodh	equ	0xFF4
  2353                           prodl	equ	0xFF3
  2354                           intcon	equ	0xFF2
  2355                           intcon2	equ	0xFF1
  2356                           postinc0	equ	0xFEE
  2357                           plusw0	equ	0xFEB
  2358                           wreg	equ	0xFE8
  2359                           indf1	equ	0xFE7
  2360                           postinc1	equ	0xFE6
  2361                           postdec1	equ	0xFE5
  2362                           fsr1h	equ	0xFE2
  2363                           fsr1l	equ	0xFE1
  2364                           indf2	equ	0xFDF
  2365                           postinc2	equ	0xFDE
  2366                           postdec2	equ	0xFDD
  2367                           plusw2	equ	0xFDB
  2368                           fsr2h	equ	0xFDA
  2369                           fsr2l	equ	0xFD9
  2370                           status	equ	0xFD8
  2371                           
  2372 ;; *************** function _writeByte *****************
  2373 ;; Defined at:
  2374 ;;		line 69 in file "Drivers/UART_Driver.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  data            1    wreg     unsigned char 
  2377 ;; Auto vars:     Size  Location     Type
  2378 ;;  data            1    0[BANK0 ] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  1    wreg      void 
  2381 ;; Registers used:
  2382 ;;		wreg
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2388 ;;      Params:         0       0       0       0       0       0       0       0       0
  2389 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2391 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2392 ;;Total ram usage:        1 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    7
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_putch
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text13
  2403  0013F4                     __ptext13:
  2404                           	opt stack 0
  2405  0013F4                     _writeByte:
  2406                           	opt stack 20
  2407                           
  2408                           ;incstack = 0
  2409                           ;writeByte@data stored from wreg
  2410  0013F4  0100               	movlb	0	; () banked
  2411  0013F6  6FA0               	movwf	writeByte@data& (0+255),b
  2412  0013F8                     
  2413                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2414  0013F8  A2AC               	btfss	4012,1,c	;volatile
  2415  0013FA  D7FE               	goto	l1360
  2416                           
  2417                           ;UART_Driver.c: 71: TXREG = data;
  2418  0013FC  C0A0  FFAD         	movff	writeByte@data,4013	;volatile
  2419  001400  0012               	return		;funcret
  2420  001402                     __end_of_writeByte:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           prodh	equ	0xFF4
  2427                           prodl	equ	0xFF3
  2428                           intcon	equ	0xFF2
  2429                           intcon2	equ	0xFF1
  2430                           postinc0	equ	0xFEE
  2431                           plusw0	equ	0xFEB
  2432                           wreg	equ	0xFE8
  2433                           indf1	equ	0xFE7
  2434                           postinc1	equ	0xFE6
  2435                           postdec1	equ	0xFE5
  2436                           fsr1h	equ	0xFE2
  2437                           fsr1l	equ	0xFE1
  2438                           indf2	equ	0xFDF
  2439                           postinc2	equ	0xFDE
  2440                           postdec2	equ	0xFDD
  2441                           plusw2	equ	0xFDB
  2442                           fsr2h	equ	0xFDA
  2443                           fsr2l	equ	0xFD9
  2444                           status	equ	0xFD8
  2445                           
  2446 ;; *************** function ___lwdiv *****************
  2447 ;; Defined at:
  2448 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lwdiv.c"
  2449 ;; Parameters:    Size  Location     Type
  2450 ;;  dividend        2    0[BANK0 ] unsigned int 
  2451 ;;  divisor         2    2[BANK0 ] unsigned int 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  quotient        2    4[BANK0 ] unsigned int 
  2454 ;;  counter         1    6[BANK0 ] unsigned char 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;                  2    0[BANK0 ] unsigned int 
  2457 ;; Registers used:
  2458 ;;		wreg, status,2, status,0
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2464 ;;      Params:         0       4       0       0       0       0       0       0       0
  2465 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2467 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2468 ;;Total ram usage:        7 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    7
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_printf
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text14
  2479  00128A                     __ptext14:
  2480                           	opt stack 0
  2481  00128A                     ___lwdiv:
  2482                           	opt stack 21
  2483                           
  2484                           ;incstack = 0
  2485  00128A  0E00               	movlw	0
  2486  00128C  0100               	movlb	0	; () banked
  2487  00128E  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2488  001290  0E00               	movlw	0
  2489  001292  6FA4               	movwf	___lwdiv@quotient& (0+255),b
  2490                           
  2491                           ; BSR set to: 0
  2492  001294  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2493  001296  11A3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2494  001298  B4D8               	btfsc	status,2,c
  2495  00129A  D01C               	goto	l681
  2496                           
  2497                           ; BSR set to: 0
  2498  00129C  0E01               	movlw	1
  2499  00129E  6FA6               	movwf	___lwdiv@counter& (0+255),b
  2500  0012A0  D004               	goto	l676
  2501  0012A2                     
  2502                           ; BSR set to: 0
  2503                           
  2504                           ; BSR set to: 0
  2505  0012A2  90D8               	bcf	status,0,c
  2506  0012A4  37A2               	rlcf	___lwdiv@divisor& (0+255),f,b
  2507  0012A6  37A3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2508  0012A8  2BA6               	incf	___lwdiv@counter& (0+255),f,b
  2509  0012AA                     l676:
  2510                           
  2511                           ; BSR set to: 0
  2512                           
  2513                           ; BSR set to: 0
  2514  0012AA  AFA3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2515  0012AC  D7FA               	goto	l677
  2516  0012AE                     u660:
  2517                           
  2518                           ; BSR set to: 0
  2519                           
  2520                           ; BSR set to: 0
  2521                           
  2522                           ; BSR set to: 0
  2523  0012AE  90D8               	bcf	status,0,c
  2524  0012B0  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
  2525  0012B2  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2526                           
  2527                           ; BSR set to: 0
  2528  0012B4  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2529  0012B6  5DA0               	subwf	___lwdiv@dividend& (0+255),w,b
  2530  0012B8  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2531  0012BA  59A1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2532  0012BC  A0D8               	btfss	status,0,c
  2533  0012BE  D005               	goto	l680
  2534                           
  2535                           ; BSR set to: 0
  2536  0012C0  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2537  0012C2  5FA0               	subwf	___lwdiv@dividend& (0+255),f,b
  2538  0012C4  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2539  0012C6  5BA1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2540                           
  2541                           ; BSR set to: 0
  2542  0012C8  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
  2543  0012CA                     l680:
  2544                           
  2545                           ; BSR set to: 0
  2546                           
  2547                           ; BSR set to: 0
  2548  0012CA  90D8               	bcf	status,0,c
  2549  0012CC  33A3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2550  0012CE  33A2               	rrcf	___lwdiv@divisor& (0+255),f,b
  2551                           
  2552                           ; BSR set to: 0
  2553  0012D0  2FA6               	decfsz	___lwdiv@counter& (0+255),f,b
  2554  0012D2  D7ED               	goto	u660
  2555  0012D4                     l681:
  2556                           
  2557                           ; BSR set to: 0
  2558                           
  2559                           ; BSR set to: 0
  2560  0012D4  C0A4  F0A0         	movff	___lwdiv@quotient,?___lwdiv
  2561  0012D8  C0A5  F0A1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2562                           
  2563                           ; BSR set to: 0
  2564  0012DC  0012               	return		;funcret
  2565  0012DE                     __end_of___lwdiv:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           intcon	equ	0xFF2
  2574                           intcon2	equ	0xFF1
  2575                           postinc0	equ	0xFEE
  2576                           plusw0	equ	0xFEB
  2577                           wreg	equ	0xFE8
  2578                           indf1	equ	0xFE7
  2579                           postinc1	equ	0xFE6
  2580                           postdec1	equ	0xFE5
  2581                           fsr1h	equ	0xFE2
  2582                           fsr1l	equ	0xFE1
  2583                           indf2	equ	0xFDF
  2584                           postinc2	equ	0xFDE
  2585                           postdec2	equ	0xFDD
  2586                           plusw2	equ	0xFDB
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _C_DOOR_ReadSensors *****************
  2592 ;; Defined at:
  2593 ;;		line 83 in file "Controllers/DOOR_Controller.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;		None
  2596 ;; Auto vars:     Size  Location     Type
  2597 ;;  d               1    4[BANK0 ] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  1    wreg      void 
  2600 ;; Registers used:
  2601 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2607 ;;      Params:         0       0       0       0       0       0       0       0       0
  2608 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2609 ;;      Temps:          0       4       0       0       0       0       0       0       0
  2610 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2611 ;;Total ram usage:        5 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    7
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_main
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text15
  2622  001136                     __ptext15:
  2623                           	opt stack 0
  2624  001136                     _C_DOOR_ReadSensors:
  2625                           	opt stack 23
  2626                           
  2627                           ;DOOR_Controller.c: 84: uint8_t d;
  2628                           ;DOOR_Controller.c: 85: for (d = 0; d < 5; d++) {
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;incstack = 0
  2632  001136  0E00               	movlw	0
  2633  001138  0100               	movlb	0	; () banked
  2634  00113A  6FA4               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  2635  00113C                     l1576:
  2636                           
  2637                           ; BSR set to: 0
  2638  00113C  0E04               	movlw	4
  2639  00113E  65A4               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  2640  001140  D001               	goto	l36
  2641  001142  D03C               	goto	u950
  2642  001144                     l36:
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;DOOR_Controller.c: 86: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pin
      +                          ) & 0x01;
  2646                           
  2647                           ; BSR set to: 0
  2648  001144  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  2649  001146  0D0A               	mullw	10
  2650  001148  0E06               	movlw	6
  2651  00114A  26F3               	addwf	prodl,f,c
  2652  00114C  0E00               	movlw	0
  2653  00114E  22F4               	addwfc	prodh,f,c
  2654  001150  0E60               	movlw	low _doors
  2655  001152  24F3               	addwf	prodl,w,c
  2656  001154  6ED9               	movwf	fsr2l,c
  2657  001156  0E00               	movlw	high _doors
  2658  001158  20F4               	addwfc	prodh,w,c
  2659  00115A  6EDA               	movwf	fsr2h,c
  2660  00115C  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  2661  00115E  0D0A               	mullw	10
  2662  001160  0E09               	movlw	9
  2663  001162  26F3               	addwf	prodl,f,c
  2664  001164  0E00               	movlw	0
  2665  001166  22F4               	addwfc	prodh,f,c
  2666  001168  0E60               	movlw	low _doors
  2667  00116A  24F3               	addwf	prodl,w,c
  2668  00116C  6EE1               	movwf	fsr1l,c
  2669  00116E  0E00               	movlw	high _doors
  2670  001170  20F4               	addwfc	prodh,w,c
  2671  001172  6EE2               	movwf	fsr1h,c
  2672  001174  50E7               	movf	indf1,w,c
  2673  001176  6FA0               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  2674  001178  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  2675  00117A  0D0A               	mullw	10
  2676  00117C  0E07               	movlw	7
  2677  00117E  26F3               	addwf	prodl,f,c
  2678  001180  0E00               	movlw	0
  2679  001182  22F4               	addwfc	prodh,f,c
  2680  001184  0E60               	movlw	low _doors
  2681  001186  24F3               	addwf	prodl,w,c
  2682  001188  6EE1               	movwf	fsr1l,c
  2683  00118A  0E00               	movlw	high _doors
  2684  00118C  20F4               	addwfc	prodh,w,c
  2685  00118E  6EE2               	movwf	fsr1h,c
  2686  001190  CFE6 F0A1          	movff	postinc1,??_C_DOOR_ReadSensors+1
  2687  001194  CFE5 F0A2          	movff	postdec1,??_C_DOOR_ReadSensors+2
  2688  001198  C0A1  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  2689  00119C  C0A2  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  2690  0011A0  50E7               	movf	indf1,w,c
  2691  0011A2  6FA3               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  2692  0011A4  2BA0               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  2693  0011A6  D002               	goto	u944
  2694  0011A8                     u945:
  2695  0011A8  90D8               	bcf	status,0,c
  2696  0011AA  33A3               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  2697  0011AC                     u944:
  2698  0011AC  2FA0               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  2699  0011AE  D7FC               	goto	u945
  2700  0011B0  0100               	movlb	0	; () banked
  2701  0011B2  51A3               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  2702  0011B4  0B01               	andlw	1
  2703  0011B6  6EDF               	movwf	indf2,c
  2704                           
  2705                           ; BSR set to: 0
  2706  0011B8  2BA4               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  2707  0011BA  D7C0               	goto	l1576
  2708  0011BC                     u950:
  2709                           
  2710                           ; BSR set to: 0
  2711                           ;DOOR_Controller.c: 87: }
  2712                           ;DOOR_Controller.c: 89: if (doors[0].is_open) {
  2713                           
  2714                           ; BSR set to: 0
  2715  0011BC  5166               	movf	(_doors+6)& (0+255),w,b
  2716  0011BE  B4D8               	btfsc	status,2,c
  2717  0011C0  D002               	goto	l38
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;DOOR_Controller.c: 90: LATBbits.LATB7 = 1;
  2721  0011C2  8E8A               	bsf	3978,7,c	;volatile
  2722                           
  2723                           ;DOOR_Controller.c: 91: } else {
  2724  0011C4  0012               	return	
  2725  0011C6                     l38:
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;DOOR_Controller.c: 92: LATBbits.LATB7 = 0;
  2729  0011C6  9E8A               	bcf	3978,7,c	;volatile
  2730  0011C8  0012               	return	
  2731  0011CA                     __end_of_C_DOOR_ReadSensors:
  2732                           	opt stack 0
  2733                           tblptru	equ	0xFF8
  2734                           tblptrh	equ	0xFF7
  2735                           tblptrl	equ	0xFF6
  2736                           tablat	equ	0xFF5
  2737                           prodh	equ	0xFF4
  2738                           prodl	equ	0xFF3
  2739                           intcon	equ	0xFF2
  2740                           intcon2	equ	0xFF1
  2741                           postinc0	equ	0xFEE
  2742                           plusw0	equ	0xFEB
  2743                           wreg	equ	0xFE8
  2744                           indf1	equ	0xFE7
  2745                           postinc1	equ	0xFE6
  2746                           postdec1	equ	0xFE5
  2747                           fsr1h	equ	0xFE2
  2748                           fsr1l	equ	0xFE1
  2749                           indf2	equ	0xFDF
  2750                           postinc2	equ	0xFDE
  2751                           postdec2	equ	0xFDD
  2752                           plusw2	equ	0xFDB
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _C_DOOR_Init *****************
  2758 ;; Defined at:
  2759 ;;		line 28 in file "Controllers/DOOR_Controller.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  d               1    0[BANK0 ] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2773 ;;      Params:         0       0       0       0       0       0       0       0       0
  2774 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2776 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2777 ;;Total ram usage:        1 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    7
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_main
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text16
  2788  000C32                     __ptext16:
  2789                           	opt stack 0
  2790  000C32                     _C_DOOR_Init:
  2791                           	opt stack 23
  2792                           
  2793                           ;DOOR_Controller.c: 30: TRISB &= 0x3F;
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;incstack = 0
  2797  000C32  0E3F               	movlw	63
  2798  000C34  1693               	andwf	3987,f,c	;volatile
  2799                           
  2800                           ;DOOR_Controller.c: 31: TRISB |= 0x3F;
  2801  000C36  0E3F               	movlw	63
  2802  000C38  1293               	iorwf	3987,f,c	;volatile
  2803                           
  2804                           ;DOOR_Controller.c: 34: uint8_t d;
  2805                           ;DOOR_Controller.c: 35: for (d = 0; d < 5; d++) {
  2806  000C3A  0E00               	movlw	0
  2807  000C3C  0100               	movlb	0	; () banked
  2808  000C3E  6FA0               	movwf	C_DOOR_Init@d& (0+255),b
  2809  000C40                     l1562:
  2810                           
  2811                           ; BSR set to: 0
  2812  000C40  0E04               	movlw	4
  2813  000C42  65A0               	cpfsgt	C_DOOR_Init@d& (0+255),b
  2814  000C44  D001               	goto	l13
  2815  000C46  0012               	return	
  2816  000C48                     l13:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;DOOR_Controller.c: 36: doors[d].id = d;
  2820                           
  2821                           ; BSR set to: 0
  2822  000C48  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2823  000C4A  0D0A               	mullw	10
  2824  000C4C  0E60               	movlw	low _doors
  2825  000C4E  24F3               	addwf	prodl,w,c
  2826  000C50  6ED9               	movwf	fsr2l,c
  2827  000C52  0E00               	movlw	high _doors
  2828  000C54  20F4               	addwfc	prodh,w,c
  2829  000C56  6EDA               	movwf	fsr2h,c
  2830  000C58  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  2831                           
  2832                           ;DOOR_Controller.c: 38: doors[d].locked = 1;
  2833  000C5C  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2834  000C5E  0D0A               	mullw	10
  2835  000C60  0E01               	movlw	1
  2836  000C62  26F3               	addwf	prodl,f,c
  2837  000C64  0E00               	movlw	0
  2838  000C66  22F4               	addwfc	prodh,f,c
  2839  000C68  0E60               	movlw	low _doors
  2840  000C6A  24F3               	addwf	prodl,w,c
  2841  000C6C  6ED9               	movwf	fsr2l,c
  2842  000C6E  0E00               	movlw	high _doors
  2843  000C70  20F4               	addwfc	prodh,w,c
  2844  000C72  6EDA               	movwf	fsr2h,c
  2845  000C74  0E01               	movlw	1
  2846  000C76  6EDF               	movwf	indf2,c
  2847                           
  2848                           ;DOOR_Controller.c: 39: doors[d].lock_port = &PORTB;
  2849  000C78  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2850  000C7A  0D0A               	mullw	10
  2851  000C7C  0E02               	movlw	2
  2852  000C7E  26F3               	addwf	prodl,f,c
  2853  000C80  0E00               	movlw	0
  2854  000C82  22F4               	addwfc	prodh,f,c
  2855  000C84  0E60               	movlw	low _doors
  2856  000C86  24F3               	addwf	prodl,w,c
  2857  000C88  6ED9               	movwf	fsr2l,c
  2858  000C8A  0E00               	movlw	high _doors
  2859  000C8C  20F4               	addwfc	prodh,w,c
  2860  000C8E  6EDA               	movwf	fsr2h,c
  2861  000C90  0E81               	movlw	129
  2862  000C92  6EDE               	movwf	postinc2,c
  2863  000C94  0E0F               	movlw	15
  2864  000C96  6EDD               	movwf	postdec2,c
  2865                           
  2866                           ;DOOR_Controller.c: 40: doors[d].lock_pin = 7;
  2867  000C98  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2868  000C9A  0D0A               	mullw	10
  2869  000C9C  0E04               	movlw	4
  2870  000C9E  26F3               	addwf	prodl,f,c
  2871  000CA0  0E00               	movlw	0
  2872  000CA2  22F4               	addwfc	prodh,f,c
  2873  000CA4  0E60               	movlw	low _doors
  2874  000CA6  24F3               	addwf	prodl,w,c
  2875  000CA8  6ED9               	movwf	fsr2l,c
  2876  000CAA  0E00               	movlw	high _doors
  2877  000CAC  20F4               	addwfc	prodh,w,c
  2878  000CAE  6EDA               	movwf	fsr2h,c
  2879  000CB0  0E07               	movlw	7
  2880  000CB2  6EDF               	movwf	indf2,c
  2881                           
  2882                           ;DOOR_Controller.c: 42: doors[d].is_open = 0;
  2883  000CB4  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2884  000CB6  0D0A               	mullw	10
  2885  000CB8  0E06               	movlw	6
  2886  000CBA  26F3               	addwf	prodl,f,c
  2887  000CBC  0E00               	movlw	0
  2888  000CBE  22F4               	addwfc	prodh,f,c
  2889  000CC0  0E60               	movlw	low _doors
  2890  000CC2  24F3               	addwf	prodl,w,c
  2891  000CC4  6ED9               	movwf	fsr2l,c
  2892  000CC6  0E00               	movlw	high _doors
  2893  000CC8  20F4               	addwfc	prodh,w,c
  2894  000CCA  6EDA               	movwf	fsr2h,c
  2895  000CCC  0E00               	movlw	0
  2896  000CCE  6EDF               	movwf	indf2,c
  2897                           
  2898                           ;DOOR_Controller.c: 43: doors[d].was_open = 0;
  2899  000CD0  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2900  000CD2  0D0A               	mullw	10
  2901  000CD4  0E05               	movlw	5
  2902  000CD6  26F3               	addwf	prodl,f,c
  2903  000CD8  0E00               	movlw	0
  2904  000CDA  22F4               	addwfc	prodh,f,c
  2905  000CDC  0E60               	movlw	low _doors
  2906  000CDE  24F3               	addwf	prodl,w,c
  2907  000CE0  6ED9               	movwf	fsr2l,c
  2908  000CE2  0E00               	movlw	high _doors
  2909  000CE4  20F4               	addwfc	prodh,w,c
  2910  000CE6  6EDA               	movwf	fsr2h,c
  2911  000CE8  0E00               	movlw	0
  2912  000CEA  6EDF               	movwf	indf2,c
  2913                           
  2914                           ;DOOR_Controller.c: 44: doors[d].sensor_port = &PORTB;
  2915  000CEC  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2916  000CEE  0D0A               	mullw	10
  2917  000CF0  0E07               	movlw	7
  2918  000CF2  26F3               	addwf	prodl,f,c
  2919  000CF4  0E00               	movlw	0
  2920  000CF6  22F4               	addwfc	prodh,f,c
  2921  000CF8  0E60               	movlw	low _doors
  2922  000CFA  24F3               	addwf	prodl,w,c
  2923  000CFC  6ED9               	movwf	fsr2l,c
  2924  000CFE  0E00               	movlw	high _doors
  2925  000D00  20F4               	addwfc	prodh,w,c
  2926  000D02  6EDA               	movwf	fsr2h,c
  2927  000D04  0E81               	movlw	129
  2928  000D06  6EDE               	movwf	postinc2,c
  2929  000D08  0E0F               	movlw	15
  2930  000D0A  6EDD               	movwf	postdec2,c
  2931                           
  2932                           ;DOOR_Controller.c: 45: doors[d].sensor_pin = d;
  2933  000D0C  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  2934  000D0E  0D0A               	mullw	10
  2935  000D10  0E09               	movlw	9
  2936  000D12  26F3               	addwf	prodl,f,c
  2937  000D14  0E00               	movlw	0
  2938  000D16  22F4               	addwfc	prodh,f,c
  2939  000D18  0E60               	movlw	low _doors
  2940  000D1A  24F3               	addwf	prodl,w,c
  2941  000D1C  6ED9               	movwf	fsr2l,c
  2942  000D1E  0E00               	movlw	high _doors
  2943  000D20  20F4               	addwfc	prodh,w,c
  2944  000D22  6EDA               	movwf	fsr2h,c
  2945  000D24  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  2946                           
  2947                           ; BSR set to: 0
  2948  000D28  2BA0               	incf	C_DOOR_Init@d& (0+255),f,b
  2949  000D2A  D78A               	goto	l1562
  2950  000D2C                     __end_of_C_DOOR_Init:
  2951                           	opt stack 0
  2952                           tblptru	equ	0xFF8
  2953                           tblptrh	equ	0xFF7
  2954                           tblptrl	equ	0xFF6
  2955                           tablat	equ	0xFF5
  2956                           prodh	equ	0xFF4
  2957                           prodl	equ	0xFF3
  2958                           intcon	equ	0xFF2
  2959                           intcon2	equ	0xFF1
  2960                           postinc0	equ	0xFEE
  2961                           plusw0	equ	0xFEB
  2962                           wreg	equ	0xFE8
  2963                           indf1	equ	0xFE7
  2964                           postinc1	equ	0xFE6
  2965                           postdec1	equ	0xFE5
  2966                           fsr1h	equ	0xFE2
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           postinc2	equ	0xFDE
  2970                           postdec2	equ	0xFDD
  2971                           plusw2	equ	0xFDB
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _LowISR *****************
  2977 ;; Defined at:
  2978 ;;		line 264 in file "Drivers/UART_Driver.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2992 ;;      Params:         0       0       0       0       0       0       0       0       0
  2993 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2994 ;;      Temps:         21       0       0       0       0       0       0       0       0
  2995 ;;      Totals:        21       0       0       0       0       0       0       0       0
  2996 ;;Total ram usage:       21 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    6
  2999 ;; This function calls:
  3000 ;;		_fillDataBuffer
  3001 ;;		_readByte
  3002 ;; This function is called by:
  3003 ;;		Interrupt level 1
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	intcodelo
  3008  000018                     __pintcodelo:
  3009                           	opt stack 0
  3010  000018                     _LowISR:
  3011                           	opt stack 19
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;incstack = 0
  3015  000018  8047               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3016  00001A  CFD8 F02B          	movff	status,??_LowISR
  3017  00001E  CFE8 F02C          	movff	wreg,??_LowISR+1
  3018  000022  CFE0 F02D          	movff	bsr,??_LowISR+2
  3019  000026  CFFA F02E          	movff	pclath,??_LowISR+3
  3020  00002A  CFFB F02F          	movff	pclatu,??_LowISR+4
  3021  00002E  CFE9 F030          	movff	fsr0l,??_LowISR+5
  3022  000032  CFEA F031          	movff	fsr0h,??_LowISR+6
  3023  000036  CFE1 F032          	movff	fsr1l,??_LowISR+7
  3024  00003A  CFE2 F033          	movff	fsr1h,??_LowISR+8
  3025  00003E  CFD9 F034          	movff	fsr2l,??_LowISR+9
  3026  000042  CFDA F035          	movff	fsr2h,??_LowISR+10
  3027  000046  CFF3 F036          	movff	prodl,??_LowISR+11
  3028  00004A  CFF4 F037          	movff	prodh,??_LowISR+12
  3029  00004E  CFF6 F038          	movff	tblptrl,??_LowISR+13
  3030  000052  CFF7 F039          	movff	tblptrh,??_LowISR+14
  3031  000056  CFF8 F03A          	movff	tblptru,??_LowISR+15
  3032  00005A  CFF5 F03B          	movff	tablat,??_LowISR+16
  3033  00005E  C047  F03C         	movff	btemp,??_LowISR+17
  3034  000062  C048  F03D         	movff	btemp+1,??_LowISR+18
  3035  000066  C049  F03E         	movff	btemp+2,??_LowISR+19
  3036  00006A  C04A  F03F         	movff	btemp+3,??_LowISR+20
  3037                           
  3038                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  3039  00006E  AA9E               	btfss	3998,5,c	;volatile
  3040  000070  D005               	goto	i1l178
  3041                           
  3042                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  3043  000072  EC0C  F00A         	call	_readByte	;wreg free
  3044  000076  EC1C  F004         	call	_fillDataBuffer
  3045                           
  3046                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  3047  00007A  9A9E               	bcf	3998,5,c	;volatile
  3048  00007C                     i1l178:
  3049  00007C  C03F  F04A         	movff	??_LowISR+20,btemp+3
  3050  000080  C03E  F049         	movff	??_LowISR+19,btemp+2
  3051  000084  C03D  F048         	movff	??_LowISR+18,btemp+1
  3052  000088  C03C  F047         	movff	??_LowISR+17,btemp
  3053  00008C  C03B  FFF5         	movff	??_LowISR+16,tablat
  3054  000090  C03A  FFF8         	movff	??_LowISR+15,tblptru
  3055  000094  C039  FFF7         	movff	??_LowISR+14,tblptrh
  3056  000098  C038  FFF6         	movff	??_LowISR+13,tblptrl
  3057  00009C  C037  FFF4         	movff	??_LowISR+12,prodh
  3058  0000A0  C036  FFF3         	movff	??_LowISR+11,prodl
  3059  0000A4  C035  FFDA         	movff	??_LowISR+10,fsr2h
  3060  0000A8  C034  FFD9         	movff	??_LowISR+9,fsr2l
  3061  0000AC  C033  FFE2         	movff	??_LowISR+8,fsr1h
  3062  0000B0  C032  FFE1         	movff	??_LowISR+7,fsr1l
  3063  0000B4  C031  FFEA         	movff	??_LowISR+6,fsr0h
  3064  0000B8  C030  FFE9         	movff	??_LowISR+5,fsr0l
  3065  0000BC  C02F  FFFB         	movff	??_LowISR+4,pclatu
  3066  0000C0  C02E  FFFA         	movff	??_LowISR+3,pclath
  3067  0000C4  C02D  FFE0         	movff	??_LowISR+2,bsr
  3068  0000C8  C02C  FFE8         	movff	??_LowISR+1,wreg
  3069  0000CC  C02B  FFD8         	movff	??_LowISR,status
  3070  0000D0  9047               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3071  0000D2  0010               	retfie	
  3072  0000D4                     __end_of_LowISR:
  3073                           	opt stack 0
  3074                           pclatu	equ	0xFFB
  3075                           pclath	equ	0xFFA
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           intcon2	equ	0xFF1
  3084                           postinc0	equ	0xFEE
  3085                           plusw0	equ	0xFEB
  3086                           fsr0h	equ	0xFEA
  3087                           fsr0l	equ	0xFE9
  3088                           wreg	equ	0xFE8
  3089                           indf1	equ	0xFE7
  3090                           postinc1	equ	0xFE6
  3091                           postdec1	equ	0xFE5
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           bsr	equ	0xFE0
  3095                           indf2	equ	0xFDF
  3096                           postinc2	equ	0xFDE
  3097                           postdec2	equ	0xFDD
  3098                           plusw2	equ	0xFDB
  3099                           fsr2h	equ	0xFDA
  3100                           fsr2l	equ	0xFD9
  3101                           status	equ	0xFD8
  3102                           
  3103 ;; *************** function _readByte *****************
  3104 ;; Defined at:
  3105 ;;		line 74 in file "Drivers/UART_Driver.c"
  3106 ;; Parameters:    Size  Location     Type
  3107 ;;		None
  3108 ;; Auto vars:     Size  Location     Type
  3109 ;;		None
  3110 ;; Return value:  Size  Location     Type
  3111 ;;                  1    wreg      unsigned char 
  3112 ;; Registers used:
  3113 ;;		wreg, status,2
  3114 ;; Tracked objects:
  3115 ;;		On entry : 0/0
  3116 ;;		On exit  : 0/0
  3117 ;;		Unchanged: 0/0
  3118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3119 ;;      Params:         0       0       0       0       0       0       0       0       0
  3120 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3122 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3123 ;;Total ram usage:        0 bytes
  3124 ;; Hardware stack levels used:    1
  3125 ;; Hardware stack levels required when called:    1
  3126 ;; This function calls:
  3127 ;;		Nothing
  3128 ;; This function is called by:
  3129 ;;		_LowISR
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133                           	psect	text18
  3134  001418                     __ptext18:
  3135                           	opt stack 0
  3136  001418                     _readByte:
  3137                           	opt stack 23
  3138                           
  3139                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3140                           
  3141                           ;incstack = 0
  3142  001418  50AB               	movf	4011,w,c	;volatile
  3143                           
  3144                           ;UART_Driver.c: 77: }
  3145                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3146  00141A  50AB               	movf	4011,w,c	;volatile
  3147                           
  3148                           ;UART_Driver.c: 80: }
  3149                           ;UART_Driver.c: 81: return RCREG;
  3150  00141C  50AE               	movf	4014,w,c	;volatile
  3151  00141E  0012               	return	
  3152  001420                     __end_of_readByte:
  3153                           	opt stack 0
  3154                           pclatu	equ	0xFFB
  3155                           pclath	equ	0xFFA
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           prodh	equ	0xFF4
  3161                           prodl	equ	0xFF3
  3162                           intcon	equ	0xFF2
  3163                           intcon2	equ	0xFF1
  3164                           postinc0	equ	0xFEE
  3165                           plusw0	equ	0xFEB
  3166                           fsr0h	equ	0xFEA
  3167                           fsr0l	equ	0xFE9
  3168                           wreg	equ	0xFE8
  3169                           indf1	equ	0xFE7
  3170                           postinc1	equ	0xFE6
  3171                           postdec1	equ	0xFE5
  3172                           fsr1h	equ	0xFE2
  3173                           fsr1l	equ	0xFE1
  3174                           bsr	equ	0xFE0
  3175                           indf2	equ	0xFDF
  3176                           postinc2	equ	0xFDE
  3177                           postdec2	equ	0xFDD
  3178                           plusw2	equ	0xFDB
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _fillDataBuffer *****************
  3184 ;; Defined at:
  3185 ;;		line 84 in file "Drivers/UART_Driver.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;  data            1    wreg     unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  data            1   41[COMRAM] unsigned char 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3199 ;;      Params:         0       0       0       0       0       0       0       0       0
  3200 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3202 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3203 ;;Total ram usage:        1 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    5
  3206 ;; This function calls:
  3207 ;;		_acknowledge
  3208 ;; This function is called by:
  3209 ;;		_LowISR
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text19
  3214  000838                     __ptext19:
  3215                           	opt stack 0
  3216  000838                     _fillDataBuffer:
  3217                           	opt stack 19
  3218                           
  3219                           ;incstack = 0
  3220                           ;fillDataBuffer@data stored from wreg
  3221  000838  6E2A               	movwf	fillDataBuffer@data,c
  3222                           
  3223                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3224  00083A  D0B5               	goto	i1l127
  3225  00083C                     
  3226                           ;UART_Driver.c: 87: if(data == 0x26) {
  3227  00083C  0E26               	movlw	38
  3228  00083E  182A               	xorwf	fillDataBuffer@data,w,c
  3229  000840  A4D8               	btfss	status,2,c
  3230  000842  D010               	goto	i1l129
  3231                           
  3232                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3233  000844  0E00               	movlw	0
  3234  000846  0101               	movlb	1	; () banked
  3235  000848  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3236                           
  3237                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3238  00084A  0E00               	movlw	0
  3239  00084C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3240                           
  3241                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3242  00084E  0E00               	movlw	0
  3243  000850  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3244                           
  3245                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3246  000852  0E00               	movlw	0
  3247  000854  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3248                           
  3249                           ;UART_Driver.c: 92: readReady = 0;
  3250  000856  0E00               	movlw	0
  3251  000858  0100               	movlb	0	; () banked
  3252  00085A  6F9F               	movwf	_readReady& (0+255),b
  3253                           
  3254                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3255  00085C  0E01               	movlw	1
  3256  00085E  0101               	movlb	1	; () banked
  3257  000860  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3258                           
  3259                           ;UART_Driver.c: 94: } else {
  3260  000862  0012               	return	
  3261  000864                     i1l129:
  3262                           
  3263                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3264                           
  3265                           ; BSR set to: 1
  3266  000864  0E00               	movlw	0
  3267  000866  0101               	movlb	1	; () banked
  3268  000868  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3269                           
  3270                           ; BSR set to: 1
  3271                           ;UART_Driver.c: 97: }
  3272                           ;UART_Driver.c: 98: break;
  3273                           
  3274                           ; BSR set to: 1
  3275                           ;UART_Driver.c: 96: return;
  3276  00086A  0012               	return	
  3277  00086C                     
  3278                           ; BSR set to: 1
  3279                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3280                           
  3281                           ; BSR set to: 1
  3282  00086C  0E3A               	movlw	58
  3283  00086E  182A               	xorwf	fillDataBuffer@data,w,c
  3284  000870  A4D8               	btfss	status,2,c
  3285  000872  D00D               	goto	i1l134
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3289  000874  0E02               	movlw	2
  3290  000876  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3291                           
  3292                           ; BSR set to: 1
  3293                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3294  000878  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3295  00087A  0D01               	mullw	1
  3296  00087C  0E00               	movlw	low _readBuffer
  3297  00087E  24F3               	addwf	prodl,w,c
  3298  000880  6ED9               	movwf	fsr2l,c
  3299  000882  0E01               	movlw	high _readBuffer
  3300  000884  20F4               	addwfc	prodh,w,c
  3301  000886  6EDA               	movwf	fsr2h,c
  3302  000888  0E00               	movlw	0
  3303  00088A  6EDF               	movwf	indf2,c
  3304                           
  3305                           ;UART_Driver.c: 104: } else {
  3306  00088C  0012               	return	
  3307  00088E                     i1l134:
  3308                           
  3309                           ; BSR set to: 1
  3310                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3311                           
  3312                           ; BSR set to: 1
  3313  00088E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3314  000890  0D01               	mullw	1
  3315  000892  0E00               	movlw	low _readBuffer
  3316  000894  24F3               	addwf	prodl,w,c
  3317  000896  6ED9               	movwf	fsr2l,c
  3318  000898  0E01               	movlw	high _readBuffer
  3319  00089A  20F4               	addwfc	prodh,w,c
  3320  00089C  6EDA               	movwf	fsr2h,c
  3321  00089E  C02A  FFDF         	movff	fillDataBuffer@data,indf2
  3322                           
  3323                           ; BSR set to: 1
  3324                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3325  0008A2  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3326                           
  3327                           ; BSR set to: 1
  3328                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3329  0008A4  0E0A               	movlw	10
  3330  0008A6  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3331  0008A8  0012               	return	
  3332                           
  3333                           ; BSR set to: 1
  3334                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3335  0008AA  0E00               	movlw	0
  3336  0008AC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3337                           
  3338                           ; BSR set to: 1
  3339                           ;UART_Driver.c: 109: }
  3340                           ;UART_Driver.c: 110: }
  3341                           ;UART_Driver.c: 111: break;
  3342                           
  3343                           ; BSR set to: 1
  3344  0008AE  0012               	return	
  3345  0008B0                     
  3346                           ; BSR set to: 1
  3347                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3348                           
  3349                           ; BSR set to: 1
  3350  0008B0  0E3A               	movlw	58
  3351  0008B2  182A               	xorwf	fillDataBuffer@data,w,c
  3352  0008B4  A4D8               	btfss	status,2,c
  3353  0008B6  D00D               	goto	i1l138
  3354                           
  3355                           ; BSR set to: 1
  3356                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3357  0008B8  0E03               	movlw	3
  3358  0008BA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3359                           
  3360                           ; BSR set to: 1
  3361                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3362  0008BC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3363  0008BE  0D01               	mullw	1
  3364  0008C0  0E0B               	movlw	low (_readBuffer+11)
  3365  0008C2  24F3               	addwf	prodl,w,c
  3366  0008C4  6ED9               	movwf	fsr2l,c
  3367  0008C6  0E01               	movlw	high (_readBuffer+11)
  3368  0008C8  20F4               	addwfc	prodh,w,c
  3369  0008CA  6EDA               	movwf	fsr2h,c
  3370  0008CC  0E00               	movlw	0
  3371  0008CE  6EDF               	movwf	indf2,c
  3372                           
  3373                           ;UART_Driver.c: 117: } else {
  3374  0008D0  0012               	return	
  3375  0008D2                     i1l138:
  3376                           
  3377                           ; BSR set to: 1
  3378                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3379                           
  3380                           ; BSR set to: 1
  3381  0008D2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3382  0008D4  0D01               	mullw	1
  3383  0008D6  0E0B               	movlw	low (_readBuffer+11)
  3384  0008D8  24F3               	addwf	prodl,w,c
  3385  0008DA  6ED9               	movwf	fsr2l,c
  3386  0008DC  0E01               	movlw	high (_readBuffer+11)
  3387  0008DE  20F4               	addwfc	prodh,w,c
  3388  0008E0  6EDA               	movwf	fsr2h,c
  3389  0008E2  C02A  FFDF         	movff	fillDataBuffer@data,indf2
  3390                           
  3391                           ; BSR set to: 1
  3392                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3393  0008E6  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3394                           
  3395                           ; BSR set to: 1
  3396                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3397  0008E8  0E32               	movlw	50
  3398  0008EA  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3399  0008EC  0012               	return	
  3400                           
  3401                           ; BSR set to: 1
  3402                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3403  0008EE  0E00               	movlw	0
  3404  0008F0  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3405                           
  3406                           ; BSR set to: 1
  3407                           ;UART_Driver.c: 122: }
  3408                           ;UART_Driver.c: 123: }
  3409                           ;UART_Driver.c: 124: break;
  3410                           
  3411                           ; BSR set to: 1
  3412  0008F2  0012               	return	
  3413  0008F4                     
  3414                           ; BSR set to: 1
  3415                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3416                           
  3417                           ; BSR set to: 1
  3418  0008F4  0E3A               	movlw	58
  3419  0008F6  182A               	xorwf	fillDataBuffer@data,w,c
  3420  0008F8  A4D8               	btfss	status,2,c
  3421  0008FA  D00D               	goto	i1l142
  3422                           
  3423                           ; BSR set to: 1
  3424                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3425  0008FC  0E04               	movlw	4
  3426  0008FE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3427                           
  3428                           ; BSR set to: 1
  3429                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3430  000900  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3431  000902  0D01               	mullw	1
  3432  000904  0E3E               	movlw	low (_readBuffer+62)
  3433  000906  24F3               	addwf	prodl,w,c
  3434  000908  6ED9               	movwf	fsr2l,c
  3435  00090A  0E01               	movlw	high (_readBuffer+62)
  3436  00090C  20F4               	addwfc	prodh,w,c
  3437  00090E  6EDA               	movwf	fsr2h,c
  3438  000910  0E00               	movlw	0
  3439  000912  6EDF               	movwf	indf2,c
  3440                           
  3441                           ;UART_Driver.c: 130: } else {
  3442  000914  0012               	return	
  3443  000916                     i1l142:
  3444                           
  3445                           ; BSR set to: 1
  3446                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  3447                           
  3448                           ; BSR set to: 1
  3449  000916  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3450  000918  0D01               	mullw	1
  3451  00091A  0E3E               	movlw	low (_readBuffer+62)
  3452  00091C  24F3               	addwf	prodl,w,c
  3453  00091E  6ED9               	movwf	fsr2l,c
  3454  000920  0E01               	movlw	high (_readBuffer+62)
  3455  000922  20F4               	addwfc	prodh,w,c
  3456  000924  6EDA               	movwf	fsr2h,c
  3457  000926  C02A  FFDF         	movff	fillDataBuffer@data,indf2
  3458                           
  3459                           ; BSR set to: 1
  3460                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  3461  00092A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  3462                           
  3463                           ; BSR set to: 1
  3464                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  3465  00092C  0E32               	movlw	50
  3466  00092E  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  3467  000930  0012               	return	
  3468                           
  3469                           ; BSR set to: 1
  3470                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  3471  000932  0E00               	movlw	0
  3472  000934  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3473                           
  3474                           ; BSR set to: 1
  3475                           ;UART_Driver.c: 135: }
  3476                           ;UART_Driver.c: 136: }
  3477                           ;UART_Driver.c: 137: break;
  3478                           
  3479                           ; BSR set to: 1
  3480  000936  0012               	return	
  3481  000938                     
  3482                           ; BSR set to: 1
  3483                           ;UART_Driver.c: 140: if (data == 0x3A) {
  3484                           
  3485                           ; BSR set to: 1
  3486  000938  0E3A               	movlw	58
  3487  00093A  182A               	xorwf	fillDataBuffer@data,w,c
  3488  00093C  A4D8               	btfss	status,2,c
  3489  00093E  D00D               	goto	i1l146
  3490                           
  3491                           ; BSR set to: 1
  3492                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  3493  000940  0E05               	movlw	5
  3494  000942  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3495                           
  3496                           ; BSR set to: 1
  3497                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  3498  000944  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  3499  000946  0D01               	mullw	1
  3500  000948  0E71               	movlw	low (_readBuffer+113)
  3501  00094A  24F3               	addwf	prodl,w,c
  3502  00094C  6ED9               	movwf	fsr2l,c
  3503  00094E  0E01               	movlw	high (_readBuffer+113)
  3504  000950  20F4               	addwfc	prodh,w,c
  3505  000952  6EDA               	movwf	fsr2h,c
  3506  000954  0E00               	movlw	0
  3507  000956  6EDF               	movwf	indf2,c
  3508                           
  3509                           ;UART_Driver.c: 143: } else {
  3510  000958  0012               	return	
  3511  00095A                     i1l146:
  3512                           
  3513                           ; BSR set to: 1
  3514                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  3515                           
  3516                           ; BSR set to: 1
  3517  00095A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  3518  00095C  0D01               	mullw	1
  3519  00095E  0E71               	movlw	low (_readBuffer+113)
  3520  000960  24F3               	addwf	prodl,w,c
  3521  000962  6ED9               	movwf	fsr2l,c
  3522  000964  0E01               	movlw	high (_readBuffer+113)
  3523  000966  20F4               	addwfc	prodh,w,c
  3524  000968  6EDA               	movwf	fsr2h,c
  3525  00096A  C02A  FFDF         	movff	fillDataBuffer@data,indf2
  3526                           
  3527                           ; BSR set to: 1
  3528                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  3529  00096E  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  3530                           
  3531                           ; BSR set to: 1
  3532                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  3533  000970  0E32               	movlw	50
  3534  000972  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  3535  000974  0012               	return	
  3536                           
  3537                           ; BSR set to: 1
  3538                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  3539  000976  0E00               	movlw	0
  3540  000978  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3541                           
  3542                           ; BSR set to: 1
  3543                           ;UART_Driver.c: 148: }
  3544                           ;UART_Driver.c: 149: }
  3545                           ;UART_Driver.c: 150: break;
  3546                           
  3547                           ; BSR set to: 1
  3548  00097A  0012               	return	
  3549  00097C                     
  3550                           ; BSR set to: 1
  3551                           ;UART_Driver.c: 153: if (data == 0x24) {
  3552                           
  3553                           ; BSR set to: 1
  3554  00097C  0E24               	movlw	36
  3555  00097E  182A               	xorwf	fillDataBuffer@data,w,c
  3556  000980  A4D8               	btfss	status,2,c
  3557  000982  D009               	goto	i1l150
  3558                           
  3559                           ; BSR set to: 1
  3560                           ;UART_Driver.c: 154: acknowledge();
  3561  000984  EC15  F009         	call	_acknowledge	;wreg free
  3562                           
  3563                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  3564  000988  0E00               	movlw	0
  3565  00098A  0101               	movlb	1	; () banked
  3566  00098C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3567                           
  3568                           ; BSR set to: 1
  3569                           ;UART_Driver.c: 156: readReady = 1;
  3570  00098E  0E01               	movlw	1
  3571  000990  0100               	movlb	0	; () banked
  3572  000992  6F9F               	movwf	_readReady& (0+255),b
  3573                           
  3574                           ;UART_Driver.c: 157: } else {
  3575  000994  0012               	return	
  3576  000996                     i1l150:
  3577                           
  3578                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  3579                           
  3580                           ; BSR set to: 0
  3581  000996  502A               	movf	fillDataBuffer@data,w,c
  3582  000998  0FD0               	addlw	208
  3583  00099A  0101               	movlb	1	; () banked
  3584  00099C  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;UART_Driver.c: 160: }
  3588                           ;UART_Driver.c: 161: break;
  3589  00099E  0012               	return	
  3590  0009A0                     
  3591                           ; BSR set to: 1
  3592                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  3593                           
  3594                           ; BSR set to: 1
  3595  0009A0  0E00               	movlw	0
  3596  0009A2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;UART_Driver.c: 166: }
  3600                           
  3601                           ;UART_Driver.c: 165: break;
  3602  0009A4  0012               	return	
  3603  0009A6                     i1l127:
  3604                           
  3605                           ; BSR set to: 1
  3606  0009A6  0101               	movlb	1	; () banked
  3607  0009A8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  3608                           
  3609                           ; Switch size 1, requested type "space"
  3610                           ; Number of cases is 6, Range of values is 0 to 5
  3611                           ; switch strategies available:
  3612                           ; Name         Instructions Cycles
  3613                           ; simple_byte           19    10 (average)
  3614                           ;	Chosen strategy is simple_byte
  3615  0009AA  0A00               	xorlw	0	; case 0
  3616  0009AC  B4D8               	btfsc	status,2,c
  3617  0009AE  D746               	goto	i1l128
  3618  0009B0  0A01               	xorlw	1	; case 1
  3619  0009B2  B4D8               	btfsc	status,2,c
  3620  0009B4  D75B               	goto	i1l133
  3621  0009B6  0A03               	xorlw	3	; case 2
  3622  0009B8  B4D8               	btfsc	status,2,c
  3623  0009BA  D77A               	goto	i1l137
  3624  0009BC  0A01               	xorlw	1	; case 3
  3625  0009BE  B4D8               	btfsc	status,2,c
  3626  0009C0  D799               	goto	i1l141
  3627  0009C2  0A07               	xorlw	7	; case 4
  3628  0009C4  B4D8               	btfsc	status,2,c
  3629  0009C6  D7B8               	goto	i1l145
  3630  0009C8  0A01               	xorlw	1	; case 5
  3631  0009CA  B4D8               	btfsc	status,2,c
  3632  0009CC  D7D7               	goto	i1l149
  3633  0009CE  D7E8               	goto	i1l152
  3634  0009D0                     __end_of_fillDataBuffer:
  3635                           	opt stack 0
  3636                           pclatu	equ	0xFFB
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           intcon2	equ	0xFF1
  3646                           postinc0	equ	0xFEE
  3647                           plusw0	equ	0xFEB
  3648                           fsr0h	equ	0xFEA
  3649                           fsr0l	equ	0xFE9
  3650                           wreg	equ	0xFE8
  3651                           indf1	equ	0xFE7
  3652                           postinc1	equ	0xFE6
  3653                           postdec1	equ	0xFE5
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           bsr	equ	0xFE0
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           plusw2	equ	0xFDB
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _acknowledge *****************
  3666 ;; Defined at:
  3667 ;;		line 169 in file "Drivers/UART_Driver.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3681 ;;      Params:         0       0       0       0       0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3684 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    4
  3688 ;; This function calls:
  3689 ;;		i1_printf
  3690 ;; This function is called by:
  3691 ;;		_fillDataBuffer
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text20
  3696  00122A                     __ptext20:
  3697                           	opt stack 0
  3698  00122A                     _acknowledge:
  3699                           	opt stack 19
  3700                           
  3701                           ;UART_Driver.c: 170: printf(startCharacter);
  3702                           
  3703                           ;incstack = 0
  3704  00122A  C044  F01A         	movff	_startCharacter,i1printf@f
  3705  00122E  C045  F01B         	movff	_startCharacter+1,i1printf@f+1
  3706  001232  501A               	movf	i1printf@f,w,c
  3707  001234  101B               	iorwf	i1printf@f+1,w,c
  3708  001236  A4D8               	btfss	status,2,c
  3709  001238  0E00               	movlw	low (__mediumconst shr (0+16))
  3710  00123A  6E1C               	movwf	i1printf@f+2,c
  3711  00123C  EC84  F005         	call	i1_printf	;wreg free
  3712                           
  3713                           ;UART_Driver.c: 172: printf(ackCharacter);
  3714  001240  C040  F01A         	movff	_ackCharacter,i1printf@f
  3715  001244  C041  F01B         	movff	_ackCharacter+1,i1printf@f+1
  3716  001248  501A               	movf	i1printf@f,w,c
  3717  00124A  101B               	iorwf	i1printf@f+1,w,c
  3718  00124C  A4D8               	btfss	status,2,c
  3719  00124E  0E00               	movlw	low (__mediumconst shr (0+16))
  3720  001250  6E1C               	movwf	i1printf@f+2,c
  3721  001252  EC84  F005         	call	i1_printf	;wreg free
  3722                           
  3723                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  3724  001256  0E28               	movlw	low STR_7
  3725  001258  6E1A               	movwf	i1printf@f,c
  3726  00125A  0E08               	movlw	high STR_7
  3727  00125C  6E1B               	movwf	i1printf@f+1,c
  3728  00125E  501A               	movf	i1printf@f,w,c
  3729  001260  101B               	iorwf	i1printf@f+1,w,c
  3730  001262  A4D8               	btfss	status,2,c
  3731  001264  0E00               	movlw	low (__mediumconst shr (0+16))
  3732  001266  6E1C               	movwf	i1printf@f+2,c
  3733  001268  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  3734  00126C  6A1E               	clrf	?i1_printf+4,c
  3735  00126E  EC84  F005         	call	i1_printf	;wreg free
  3736                           
  3737                           ;UART_Driver.c: 176: printf(stopCharacter);
  3738  001272  C042  F01A         	movff	_stopCharacter,i1printf@f
  3739  001276  C043  F01B         	movff	_stopCharacter+1,i1printf@f+1
  3740  00127A  501A               	movf	i1printf@f,w,c
  3741  00127C  101B               	iorwf	i1printf@f+1,w,c
  3742  00127E  A4D8               	btfss	status,2,c
  3743  001280  0E00               	movlw	low (__mediumconst shr (0+16))
  3744  001282  6E1C               	movwf	i1printf@f+2,c
  3745  001284  EC84  F005         	call	i1_printf	;wreg free
  3746  001288  0012               	return		;funcret
  3747  00128A                     __end_of_acknowledge:
  3748                           	opt stack 0
  3749                           pclatu	equ	0xFFB
  3750                           pclath	equ	0xFFA
  3751                           tblptru	equ	0xFF8
  3752                           tblptrh	equ	0xFF7
  3753                           tblptrl	equ	0xFF6
  3754                           tablat	equ	0xFF5
  3755                           prodh	equ	0xFF4
  3756                           prodl	equ	0xFF3
  3757                           intcon	equ	0xFF2
  3758                           intcon2	equ	0xFF1
  3759                           postinc0	equ	0xFEE
  3760                           plusw0	equ	0xFEB
  3761                           fsr0h	equ	0xFEA
  3762                           fsr0l	equ	0xFE9
  3763                           wreg	equ	0xFE8
  3764                           indf1	equ	0xFE7
  3765                           postinc1	equ	0xFE6
  3766                           postdec1	equ	0xFE5
  3767                           fsr1h	equ	0xFE2
  3768                           fsr1l	equ	0xFE1
  3769                           bsr	equ	0xFE0
  3770                           indf2	equ	0xFDF
  3771                           postinc2	equ	0xFDE
  3772                           postdec2	equ	0xFDD
  3773                           plusw2	equ	0xFDB
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function i1_printf *****************
  3779 ;; Defined at:
  3780 ;;		line 464 in file "/opt/microchip/xc8/v1.44/sources/common/doprnt.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;  f               3   25[COMRAM] PTR const unsigned char 
  3783 ;;		 -> STR_12(6), STR_11(2), STR_10(2), STR_9(2), 
  3784 ;;		 -> STR_8(2), STR_7(3), STR_6(4), STR_5(4), 
  3785 ;;		 -> ROM(32767), STR_4(2), STR_3(2), STR_2(2), 
  3786 ;;		 -> STR_1(2), 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  printf          4    0        struct .
  3789 ;;  printf          3    0        PTR const unsigned char 
  3790 ;;  printf          2   37[COMRAM] unsigned int 
  3791 ;;  printf          2   34[COMRAM] PTR void [1]
  3792 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3793 ;;  printf          2    0        unsigned int 
  3794 ;;  printf          1   40[COMRAM] char 
  3795 ;;  printf          1   39[COMRAM] char 
  3796 ;;  printf          1   36[COMRAM] unsigned char 
  3797 ;;  printf          1   33[COMRAM] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  2   25[COMRAM] int 
  3800 ;; Registers used:
  3801 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3807 ;;      Params:         5       0       0       0       0       0       0       0       0
  3808 ;;      Locals:         8       0       0       0       0       0       0       0       0
  3809 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3810 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3811 ;;Total ram usage:       16 bytes
  3812 ;; Hardware stack levels used:    1
  3813 ;; Hardware stack levels required when called:    3
  3814 ;; This function calls:
  3815 ;;		i1___lwdiv
  3816 ;;		i1_putch
  3817 ;; This function is called by:
  3818 ;;		_acknowledge
  3819 ;; This function uses a non-reentrant model
  3820 ;;
  3821                           
  3822                           	psect	text21
  3823  000B08                     __ptext21:
  3824                           	opt stack 0
  3825  000B08                     i1_printf:
  3826                           	opt stack 19
  3827                           
  3828                           ;doprnt.c: 466: va_list ap;
  3829                           ;doprnt.c: 499: signed char c;
  3830                           ;doprnt.c: 506: signed char prec;
  3831                           ;doprnt.c: 508: unsigned char flag;
  3832                           ;doprnt.c: 523: union {
  3833                           ;doprnt.c: 524: unsigned long vd;
  3834                           ;doprnt.c: 525: double integ;
  3835                           ;doprnt.c: 526: } tmpval;
  3836                           ;doprnt.c: 528: unsigned int val;
  3837                           ;doprnt.c: 529: unsigned len;
  3838                           ;doprnt.c: 530: const char * cp;
  3839                           ;doprnt.c: 533: *ap = __va_start();
  3840                           
  3841                           ;incstack = 0
  3842  000B08  0E1D               	movlw	low (?i1_printf+3)
  3843  000B0A  6E23               	movwf	i1printf@ap,c
  3844  000B0C  0E00               	movlw	high (?i1_printf+3)
  3845  000B0E  6E24               	movwf	i1printf@ap+1,c
  3846                           
  3847                           ;doprnt.c: 536: while(c = *f++) {
  3848  000B10  D079               	goto	i1u81_20
  3849  000B12                     
  3850                           ;doprnt.c: 538: if(c != '%')
  3851  000B12  0E25               	movlw	37
  3852  000B14  1829               	xorwf	i1printf@c,w,c
  3853  000B16  B4D8               	btfsc	status,2,c
  3854  000B18  D004               	goto	i1l258
  3855                           
  3856                           ;doprnt.c: 540: {
  3857                           ;doprnt.c: 541: (putch(c) );
  3858  000B1A  5029               	movf	i1printf@c,w,c
  3859  000B1C  EC07  F00A         	call	i1_putch
  3860                           
  3861                           ;doprnt.c: 542: continue;
  3862  000B20  D071               	goto	i1u81_20
  3863  000B22                     i1l258:
  3864                           
  3865                           ;doprnt.c: 543: }
  3866                           ;doprnt.c: 548: flag = 0;
  3867  000B22  0E00               	movlw	0
  3868  000B24  6E22               	movwf	i1printf@flag,c
  3869                           
  3870                           ;doprnt.c: 635: switch(c = *f++) {
  3871  000B26  D004               	goto	i1l259
  3872  000B28                     
  3873                           ;doprnt.c: 809: (putch(c) );
  3874  000B28  5029               	movf	i1printf@c,w,c
  3875  000B2A  EC07  F00A         	call	i1_putch
  3876                           
  3877                           ;doprnt.c: 810: continue;
  3878  000B2E  D06A               	goto	i1u81_20
  3879  000B30                     i1l259:
  3880  000B30  C01A  F01F         	movff	i1printf@f,??i1_printf
  3881  000B34  C01B  F020         	movff	i1printf@f+1,??i1_printf+1
  3882  000B38  C01C  F021         	movff	i1printf@f+2,??i1_printf+2
  3883  000B3C  2A1A               	incf	i1printf@f,f,c
  3884  000B3E  0E00               	movlw	0
  3885  000B40  221B               	addwfc	i1printf@f+1,f,c
  3886  000B42  221C               	addwfc	i1printf@f+2,f,c
  3887  000B44  C01F  FFF6         	movff	??i1_printf,tblptrl
  3888  000B48  C020  FFF7         	movff	??i1_printf+1,tblptrh
  3889  000B4C  C021  FFF8         	movff	??i1_printf+2,tblptru
  3890  000B50  0008               	tblrd		*
  3891  000B52  CFF5 F029          	movff	tablat,i1printf@c
  3892  000B56  5029               	movf	i1printf@c,w,c
  3893                           
  3894                           ; Switch size 1, requested type "space"
  3895                           ; Number of cases is 2, Range of values is 0 to 120
  3896                           ; switch strategies available:
  3897                           ; Name         Instructions Cycles
  3898                           ; simple_byte            7     4 (average)
  3899                           ;	Chosen strategy is simple_byte
  3900  000B58  0A00               	xorlw	0	; case 0
  3901  000B5A  B4D8               	btfsc	status,2,c
  3902  000B5C  0012               	return	
  3903  000B5E  0A78               	xorlw	120	; case 120
  3904  000B60  A4D8               	btfss	status,2,c
  3905  000B62  D7E2               	goto	i1l264
  3906                           
  3907                           ;doprnt.c: 1273: {
  3908                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3909  000B64  C023  FFD9         	movff	i1printf@ap,fsr2l
  3910  000B68  C024  FFDA         	movff	i1printf@ap+1,fsr2h
  3911  000B6C  CFDE F026          	movff	postinc2,i1printf@val
  3912  000B70  CFDD F027          	movff	postdec2,i1printf@val+1
  3913  000B74  0E02               	movlw	2
  3914  000B76  2623               	addwf	i1printf@ap,f,c
  3915  000B78  0E00               	movlw	0
  3916  000B7A  2224               	addwfc	i1printf@ap+1,f,c
  3917                           
  3918                           ;doprnt.c: 1287: }
  3919                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3920  000B7C  0E01               	movlw	1
  3921  000B7E  6E29               	movwf	i1printf@c,c
  3922  000B80  D011               	goto	i1l1488
  3923  000B82                     
  3924                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3925  000B82  5029               	movf	i1printf@c,w,c
  3926  000B84  0D02               	mullw	2
  3927  000B86  0E01               	movlw	low _hexpowers
  3928  000B88  24F3               	addwf	prodl,w,c
  3929  000B8A  6EF6               	movwf	tblptrl,c
  3930  000B8C  0E08               	movlw	high _hexpowers
  3931  000B8E  20F4               	addwfc	prodh,w,c
  3932  000B90  6EF7               	movwf	tblptrh,c
  3933  000B92                     	if	0	;There are less than 3 active tblptr bytes
  3934  000B92                     	endif
  3935  000B92  0009               	tblrd		*+
  3936  000B94  50F5               	movf	tablat,w,c
  3937  000B96  5C26               	subwf	i1printf@val,w,c
  3938  000B98  0009               	tblrd		*+
  3939  000B9A  50F5               	movf	tablat,w,c
  3940  000B9C  5827               	subwfb	i1printf@val+1,w,c
  3941  000B9E  A0D8               	btfss	status,0,c
  3942  000BA0  D005               	goto	i1u80_20
  3943                           
  3944                           ;doprnt.c: 1318: break;
  3945  000BA2  2A29               	incf	i1printf@c,f,c
  3946  000BA4                     i1l1488:
  3947  000BA4  0E04               	movlw	4
  3948  000BA6  1829               	xorwf	i1printf@c,w,c
  3949  000BA8  A4D8               	btfss	status,2,c
  3950  000BAA  D7EB               	goto	i1l265
  3951  000BAC                     i1u80_20:
  3952                           
  3953                           ;doprnt.c: 1422: {
  3954                           ;doprnt.c: 1469: }
  3955                           ;doprnt.c: 1472: prec = c;
  3956  000BAC  C029  F028         	movff	i1printf@c,i1printf@prec
  3957                           
  3958                           ;doprnt.c: 1474: while(prec--) {
  3959  000BB0  D025               	goto	i1l268
  3960  000BB2                     
  3961                           ;doprnt.c: 1478: {
  3962                           ;doprnt.c: 1499: {
  3963                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3964  000BB2  C026  F013         	movff	i1printf@val,i1___lwdiv@dividend
  3965  000BB6  C027  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  3966  000BBA  5028               	movf	i1printf@prec,w,c
  3967  000BBC  0D02               	mullw	2
  3968  000BBE  0E01               	movlw	low _hexpowers
  3969  000BC0  24F3               	addwf	prodl,w,c
  3970  000BC2  6EF6               	movwf	tblptrl,c
  3971  000BC4  0E08               	movlw	high _hexpowers
  3972  000BC6  20F4               	addwfc	prodh,w,c
  3973  000BC8  6EF7               	movwf	tblptrh,c
  3974  000BCA                     	if	0	;There are less than 3 active tblptr bytes
  3975  000BCA                     	endif
  3976  000BCA  0009               	tblrd		*+
  3977  000BCC  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  3978  000BD0  000A               	tblrd		*-
  3979  000BD2  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  3980  000BD6  EC6F  F009         	call	i1___lwdiv	;wreg free
  3981  000BDA  5013               	movf	?i1___lwdiv,w,c
  3982  000BDC  0B0F               	andlw	15
  3983  000BDE  6E25               	movwf	i1printf@idx,c
  3984                           
  3985                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3986  000BE0  5025               	movf	i1printf@idx,w,c
  3987  000BE2  0D01               	mullw	1
  3988  000BE4  0E09               	movlw	low STR_13
  3989  000BE6  24F3               	addwf	prodl,w,c
  3990  000BE8  6EF6               	movwf	tblptrl,c
  3991  000BEA  0E08               	movlw	high STR_13
  3992  000BEC  20F4               	addwfc	prodh,w,c
  3993  000BEE  6EF7               	movwf	tblptrh,c
  3994  000BF0                     	if	0	;There are less than 3 active tblptr bytes
  3995  000BF0                     	endif
  3996  000BF0  0008               	tblrd		*
  3997  000BF2  CFF5 F029          	movff	tablat,i1printf@c
  3998                           
  3999                           ;doprnt.c: 1508: }
  4000                           ;doprnt.c: 1523: }
  4001                           ;doprnt.c: 1524: (putch(c) );
  4002  000BF6  5029               	movf	i1printf@c,w,c
  4003  000BF8  EC07  F00A         	call	i1_putch
  4004  000BFC                     i1l268:
  4005  000BFC  0628               	decf	i1printf@prec,f,c
  4006  000BFE  2828               	incf	i1printf@prec,w,c
  4007  000C00  A4D8               	btfss	status,2,c
  4008  000C02  D7D7               	goto	i1l269
  4009  000C04                     i1u81_20:
  4010  000C04  C01A  F01F         	movff	i1printf@f,??i1_printf
  4011  000C08  C01B  F020         	movff	i1printf@f+1,??i1_printf+1
  4012  000C0C  C01C  F021         	movff	i1printf@f+2,??i1_printf+2
  4013  000C10  2A1A               	incf	i1printf@f,f,c
  4014  000C12  0E00               	movlw	0
  4015  000C14  221B               	addwfc	i1printf@f+1,f,c
  4016  000C16  221C               	addwfc	i1printf@f+2,f,c
  4017  000C18  C01F  FFF6         	movff	??i1_printf,tblptrl
  4018  000C1C  C020  FFF7         	movff	??i1_printf+1,tblptrh
  4019  000C20  C021  FFF8         	movff	??i1_printf+2,tblptru
  4020  000C24  0008               	tblrd		*
  4021  000C26  CFF5 F029          	movff	tablat,i1printf@c
  4022  000C2A  5029               	movf	i1printf@c,w,c
  4023  000C2C  B4D8               	btfsc	status,2,c
  4024  000C2E  0012               	return	
  4025  000C30  D770               	goto	i1l257
  4026  000C32                     __end_ofi1_printf:
  4027                           	opt stack 0
  4028                           pclatu	equ	0xFFB
  4029                           pclath	equ	0xFFA
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           intcon2	equ	0xFF1
  4038                           postinc0	equ	0xFEE
  4039                           plusw0	equ	0xFEB
  4040                           fsr0h	equ	0xFEA
  4041                           fsr0l	equ	0xFE9
  4042                           wreg	equ	0xFE8
  4043                           indf1	equ	0xFE7
  4044                           postinc1	equ	0xFE6
  4045                           postdec1	equ	0xFE5
  4046                           fsr1h	equ	0xFE2
  4047                           fsr1l	equ	0xFE1
  4048                           bsr	equ	0xFE0
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           postdec2	equ	0xFDD
  4052                           plusw2	equ	0xFDB
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function i1_putch *****************
  4058 ;; Defined at:
  4059 ;;		line 260 in file "Drivers/UART_Driver.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;  data            1    wreg     unsigned char 
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  data            1   19[COMRAM] unsigned char 
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      void 
  4066 ;; Registers used:
  4067 ;;		wreg, status,2, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0
  4074 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4076 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4077 ;;Total ram usage:        1 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    2
  4080 ;; This function calls:
  4081 ;;		i1_writeByte
  4082 ;; This function is called by:
  4083 ;;		i1_printf
  4084 ;; This function uses a non-reentrant model
  4085 ;;
  4086                           
  4087                           	psect	text22
  4088  00140E                     __ptext22:
  4089                           	opt stack 0
  4090  00140E                     i1_putch:
  4091                           	opt stack 19
  4092                           
  4093                           ;incstack = 0
  4094                           ;i1putch@data stored from wreg
  4095  00140E  6E14               	movwf	i1putch@data,c
  4096                           
  4097                           ;UART_Driver.c: 261: writeByte(data);
  4098  001410  5014               	movf	i1putch@data,w,c
  4099  001412  EC01  F00A         	call	i1_writeByte
  4100  001416  0012               	return		;funcret
  4101  001418                     __end_ofi1_putch:
  4102                           	opt stack 0
  4103                           pclatu	equ	0xFFB
  4104                           pclath	equ	0xFFA
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           intcon	equ	0xFF2
  4112                           intcon2	equ	0xFF1
  4113                           postinc0	equ	0xFEE
  4114                           plusw0	equ	0xFEB
  4115                           fsr0h	equ	0xFEA
  4116                           fsr0l	equ	0xFE9
  4117                           wreg	equ	0xFE8
  4118                           indf1	equ	0xFE7
  4119                           postinc1	equ	0xFE6
  4120                           postdec1	equ	0xFE5
  4121                           fsr1h	equ	0xFE2
  4122                           fsr1l	equ	0xFE1
  4123                           bsr	equ	0xFE0
  4124                           indf2	equ	0xFDF
  4125                           postinc2	equ	0xFDE
  4126                           postdec2	equ	0xFDD
  4127                           plusw2	equ	0xFDB
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8
  4131                           
  4132 ;; *************** function i1_writeByte *****************
  4133 ;; Defined at:
  4134 ;;		line 69 in file "Drivers/UART_Driver.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  data            1    wreg     unsigned char 
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;  data            1   18[COMRAM] unsigned char 
  4139 ;; Return value:  Size  Location     Type
  4140 ;;                  1    wreg      void 
  4141 ;; Registers used:
  4142 ;;		wreg
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0
  4149 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4151 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4152 ;;Total ram usage:        1 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		i1_putch
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text23
  4163  001402                     __ptext23:
  4164                           	opt stack 0
  4165  001402                     i1_writeByte:
  4166                           	opt stack 19
  4167                           
  4168                           ;incstack = 0
  4169                           ;i1writeByte@data stored from wreg
  4170  001402  6E13               	movwf	i1writeByte@data,c
  4171  001404                     
  4172                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4173  001404  A2AC               	btfss	4012,1,c	;volatile
  4174  001406  D7FE               	goto	i1l1364
  4175                           
  4176                           ;UART_Driver.c: 71: TXREG = data;
  4177  001408  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4178  00140C  0012               	return		;funcret
  4179  00140E                     __end_ofi1_writeByte:
  4180                           	opt stack 0
  4181                           pclatu	equ	0xFFB
  4182                           pclath	equ	0xFFA
  4183                           tblptru	equ	0xFF8
  4184                           tblptrh	equ	0xFF7
  4185                           tblptrl	equ	0xFF6
  4186                           tablat	equ	0xFF5
  4187                           prodh	equ	0xFF4
  4188                           prodl	equ	0xFF3
  4189                           intcon	equ	0xFF2
  4190                           intcon2	equ	0xFF1
  4191                           postinc0	equ	0xFEE
  4192                           plusw0	equ	0xFEB
  4193                           fsr0h	equ	0xFEA
  4194                           fsr0l	equ	0xFE9
  4195                           wreg	equ	0xFE8
  4196                           indf1	equ	0xFE7
  4197                           postinc1	equ	0xFE6
  4198                           postdec1	equ	0xFE5
  4199                           fsr1h	equ	0xFE2
  4200                           fsr1l	equ	0xFE1
  4201                           bsr	equ	0xFE0
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           plusw2	equ	0xFDB
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function i1___lwdiv *****************
  4211 ;; Defined at:
  4212 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/lwdiv.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  dividend        2   18[COMRAM] unsigned int 
  4215 ;;  divisor         2   20[COMRAM] unsigned int 
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4218 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  2   18[COMRAM] unsigned int 
  4221 ;; Registers used:
  4222 ;;		wreg, status,2, status,0
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4228 ;;      Params:         4       0       0       0       0       0       0       0       0
  4229 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4231 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4232 ;;Total ram usage:        7 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		i1_printf
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text24
  4243  0012DE                     __ptext24:
  4244                           	opt stack 0
  4245  0012DE                     i1___lwdiv:
  4246                           	opt stack 20
  4247                           
  4248                           ;incstack = 0
  4249  0012DE  0E00               	movlw	0
  4250  0012E0  6E18               	movwf	i1___lwdiv@quotient+1,c
  4251  0012E2  0E00               	movlw	0
  4252  0012E4  6E17               	movwf	i1___lwdiv@quotient,c
  4253  0012E6  5015               	movf	i1___lwdiv@divisor,w,c
  4254  0012E8  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4255  0012EA  B4D8               	btfsc	status,2,c
  4256  0012EC  D01C               	goto	i1l681
  4257  0012EE  0E01               	movlw	1
  4258  0012F0  6E19               	movwf	i1___lwdiv@counter,c
  4259  0012F2  D004               	goto	i1l676
  4260  0012F4  90D8               	bcf	status,0,c
  4261  0012F6  3615               	rlcf	i1___lwdiv@divisor,f,c
  4262  0012F8  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4263  0012FA  2A19               	incf	i1___lwdiv@counter,f,c
  4264  0012FC                     i1l676:
  4265  0012FC  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4266  0012FE  D7FA               	goto	i1l677
  4267  001300                     i1u69_20:
  4268  001300  90D8               	bcf	status,0,c
  4269  001302  3617               	rlcf	i1___lwdiv@quotient,f,c
  4270  001304  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4271  001306  5015               	movf	i1___lwdiv@divisor,w,c
  4272  001308  5C13               	subwf	i1___lwdiv@dividend,w,c
  4273  00130A  5016               	movf	i1___lwdiv@divisor+1,w,c
  4274  00130C  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4275  00130E  A0D8               	btfss	status,0,c
  4276  001310  D005               	goto	i1l680
  4277  001312  5015               	movf	i1___lwdiv@divisor,w,c
  4278  001314  5E13               	subwf	i1___lwdiv@dividend,f,c
  4279  001316  5016               	movf	i1___lwdiv@divisor+1,w,c
  4280  001318  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4281  00131A  8017               	bsf	i1___lwdiv@quotient,0,c
  4282  00131C                     i1l680:
  4283  00131C  90D8               	bcf	status,0,c
  4284  00131E  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4285  001320  3215               	rrcf	i1___lwdiv@divisor,f,c
  4286  001322  2E19               	decfsz	i1___lwdiv@counter,f,c
  4287  001324  D7ED               	goto	i1u69_20
  4288  001326                     i1l681:
  4289  001326  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4290  00132A  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4291  00132E  0012               	return		;funcret
  4292  001330                     __end_ofi1___lwdiv:
  4293                           	opt stack 0
  4294                           pclatu	equ	0xFFB
  4295                           pclath	equ	0xFFA
  4296                           tblptru	equ	0xFF8
  4297                           tblptrh	equ	0xFF7
  4298                           tblptrl	equ	0xFF6
  4299                           tablat	equ	0xFF5
  4300                           prodh	equ	0xFF4
  4301                           prodl	equ	0xFF3
  4302                           intcon	equ	0xFF2
  4303                           intcon2	equ	0xFF1
  4304                           postinc0	equ	0xFEE
  4305                           plusw0	equ	0xFEB
  4306                           fsr0h	equ	0xFEA
  4307                           fsr0l	equ	0xFE9
  4308                           wreg	equ	0xFE8
  4309                           indf1	equ	0xFE7
  4310                           postinc1	equ	0xFE6
  4311                           postdec1	equ	0xFE5
  4312                           fsr1h	equ	0xFE2
  4313                           fsr1l	equ	0xFE1
  4314                           bsr	equ	0xFE0
  4315                           indf2	equ	0xFDF
  4316                           postinc2	equ	0xFDE
  4317                           postdec2	equ	0xFDD
  4318                           plusw2	equ	0xFDB
  4319                           fsr2h	equ	0xFDA
  4320                           fsr2l	equ	0xFD9
  4321                           status	equ	0xFD8
  4322                           
  4323 ;; *************** function _HighISR *****************
  4324 ;; Defined at:
  4325 ;;		line 59 in file "main.c"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;		None
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;		None
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2
  4334 ;; Tracked objects:
  4335 ;;		On entry : 0/0
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4339 ;;      Params:         0       0       0       0       0       0       0       0       0
  4340 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4341 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4342 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4343 ;;Total ram usage:       18 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; This function calls:
  4346 ;;		Nothing
  4347 ;; This function is called by:
  4348 ;;		Interrupt level 2
  4349 ;; This function uses a non-reentrant model
  4350 ;;
  4351                           
  4352                           	psect	intcode
  4353  000008                     __pintcode:
  4354                           	opt stack 0
  4355  000008                     _HighISR:
  4356                           	opt stack 19
  4357                           
  4358                           ;incstack = 0
  4359  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4360  00000A  EDB4  F007         	call	int_func,f	;refresh shadow registers
  4361                           pclatu	equ	0xFFB
  4362                           pclath	equ	0xFFA
  4363                           tblptru	equ	0xFF8
  4364                           tblptrh	equ	0xFF7
  4365                           tblptrl	equ	0xFF6
  4366                           tablat	equ	0xFF5
  4367                           prodh	equ	0xFF4
  4368                           prodl	equ	0xFF3
  4369                           intcon	equ	0xFF2
  4370                           intcon2	equ	0xFF1
  4371                           postinc0	equ	0xFEE
  4372                           plusw0	equ	0xFEB
  4373                           fsr0h	equ	0xFEA
  4374                           fsr0l	equ	0xFE9
  4375                           wreg	equ	0xFE8
  4376                           indf1	equ	0xFE7
  4377                           postinc1	equ	0xFE6
  4378                           postdec1	equ	0xFE5
  4379                           fsr1h	equ	0xFE2
  4380                           fsr1l	equ	0xFE1
  4381                           bsr	equ	0xFE0
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           plusw2	equ	0xFDB
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390                           	psect	intcode_body
  4391  000F68                     __pintcode_body:
  4392                           	opt stack 19
  4393  000F68                     int_func:
  4394                           	opt stack 19
  4395  000F68  0006               	pop		; remove dummy address from shadow register refresh
  4396  000F6A  CFFA F001          	movff	pclath,??_HighISR
  4397  000F6E  CFFB F002          	movff	pclatu,??_HighISR+1
  4398  000F72  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4399  000F76  CFEA F004          	movff	fsr0h,??_HighISR+3
  4400  000F7A  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4401  000F7E  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4402  000F82  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4403  000F86  CFDA F008          	movff	fsr2h,??_HighISR+7
  4404  000F8A  CFF3 F009          	movff	prodl,??_HighISR+8
  4405  000F8E  CFF4 F00A          	movff	prodh,??_HighISR+9
  4406  000F92  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  4407  000F96  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  4408  000F9A  CFF8 F00D          	movff	tblptru,??_HighISR+12
  4409  000F9E  CFF5 F00E          	movff	tablat,??_HighISR+13
  4410  000FA2  C047  F00F         	movff	btemp,??_HighISR+14
  4411  000FA6  C048  F010         	movff	btemp+1,??_HighISR+15
  4412  000FAA  C049  F011         	movff	btemp+2,??_HighISR+16
  4413  000FAE  C04A  F012         	movff	btemp+3,??_HighISR+17
  4414                           
  4415                           ;main.c: 60: if (INTCONbits.TMR0IF) {
  4416  000FB2  A4F2               	btfss	intcon,2,c	;volatile
  4417  000FB4  D004               	goto	i2l226
  4418                           
  4419                           ;main.c: 61: tick = 1;
  4420  000FB6  0E01               	movlw	1
  4421  000FB8  0100               	movlb	0	; () banked
  4422  000FBA  6F9E               	movwf	_tick& (0+255),b
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;main.c: 62: INTCONbits.TMR0IF = 0;
  4426  000FBC  94F2               	bcf	intcon,2,c	;volatile
  4427  000FBE                     i2l226:
  4428                           
  4429                           ; BSR set to: 0
  4430  000FBE  C012  F04A         	movff	??_HighISR+17,btemp+3
  4431  000FC2  C011  F049         	movff	??_HighISR+16,btemp+2
  4432  000FC6  C010  F048         	movff	??_HighISR+15,btemp+1
  4433  000FCA  C00F  F047         	movff	??_HighISR+14,btemp
  4434  000FCE  C00E  FFF5         	movff	??_HighISR+13,tablat
  4435  000FD2  C00D  FFF8         	movff	??_HighISR+12,tblptru
  4436  000FD6  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  4437  000FDA  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  4438  000FDE  C00A  FFF4         	movff	??_HighISR+9,prodh
  4439  000FE2  C009  FFF3         	movff	??_HighISR+8,prodl
  4440  000FE6  C008  FFDA         	movff	??_HighISR+7,fsr2h
  4441  000FEA  C007  FFD9         	movff	??_HighISR+6,fsr2l
  4442  000FEE  C006  FFE2         	movff	??_HighISR+5,fsr1h
  4443  000FF2  C005  FFE1         	movff	??_HighISR+4,fsr1l
  4444  000FF6  C004  FFEA         	movff	??_HighISR+3,fsr0h
  4445  000FFA  C003  FFE9         	movff	??_HighISR+2,fsr0l
  4446  000FFE  C002  FFFB         	movff	??_HighISR+1,pclatu
  4447  001002  C001  FFFA         	movff	??_HighISR,pclath
  4448  001006  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4449  001008  0011               	retfie		f
  4450  00100A                     __end_of_HighISR:
  4451                           	opt stack 0
  4452                           pclatu	equ	0xFFB
  4453                           pclath	equ	0xFFA
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           prodh	equ	0xFF4
  4459                           prodl	equ	0xFF3
  4460                           intcon	equ	0xFF2
  4461                           intcon2	equ	0xFF1
  4462                           postinc0	equ	0xFEE
  4463                           plusw0	equ	0xFEB
  4464                           fsr0h	equ	0xFEA
  4465                           fsr0l	equ	0xFE9
  4466                           wreg	equ	0xFE8
  4467                           indf1	equ	0xFE7
  4468                           postinc1	equ	0xFE6
  4469                           postdec1	equ	0xFE5
  4470                           fsr1h	equ	0xFE2
  4471                           fsr1l	equ	0xFE1
  4472                           bsr	equ	0xFE0
  4473                           indf2	equ	0xFDF
  4474                           postinc2	equ	0xFDE
  4475                           postdec2	equ	0xFDD
  4476                           plusw2	equ	0xFDB
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           pclatu	equ	0xFFB
  4481                           pclath	equ	0xFFA
  4482                           tblptru	equ	0xFF8
  4483                           tblptrh	equ	0xFF7
  4484                           tblptrl	equ	0xFF6
  4485                           tablat	equ	0xFF5
  4486                           prodh	equ	0xFF4
  4487                           prodl	equ	0xFF3
  4488                           intcon	equ	0xFF2
  4489                           intcon2	equ	0xFF1
  4490                           postinc0	equ	0xFEE
  4491                           plusw0	equ	0xFEB
  4492                           fsr0h	equ	0xFEA
  4493                           fsr0l	equ	0xFE9
  4494                           wreg	equ	0xFE8
  4495                           indf1	equ	0xFE7
  4496                           postinc1	equ	0xFE6
  4497                           postdec1	equ	0xFE5
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           bsr	equ	0xFE0
  4501                           indf2	equ	0xFDF
  4502                           postinc2	equ	0xFDE
  4503                           postdec2	equ	0xFDD
  4504                           plusw2	equ	0xFDB
  4505                           fsr2h	equ	0xFDA
  4506                           fsr2l	equ	0xFD9
  4507                           status	equ	0xFD8
  4508                           
  4509                           	psect	rparam
  4510  0000                     pclatu	equ	0xFFB
  4511                           pclath	equ	0xFFA
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           prodh	equ	0xFF4
  4517                           prodl	equ	0xFF3
  4518                           intcon	equ	0xFF2
  4519                           intcon2	equ	0xFF1
  4520                           postinc0	equ	0xFEE
  4521                           plusw0	equ	0xFEB
  4522                           fsr0h	equ	0xFEA
  4523                           fsr0l	equ	0xFE9
  4524                           wreg	equ	0xFE8
  4525                           indf1	equ	0xFE7
  4526                           postinc1	equ	0xFE6
  4527                           postdec1	equ	0xFE5
  4528                           fsr1h	equ	0xFE2
  4529                           fsr1l	equ	0xFE1
  4530                           bsr	equ	0xFE0
  4531                           indf2	equ	0xFDF
  4532                           postinc2	equ	0xFDE
  4533                           postdec2	equ	0xFDD
  4534                           plusw2	equ	0xFDB
  4535                           fsr2h	equ	0xFDA
  4536                           fsr2l	equ	0xFD9
  4537                           status	equ	0xFD8
  4538                           
  4539                           	psect	temp
  4540  000047                     btemp:
  4541                           	opt stack 0
  4542  000047                     	ds	1
  4543  0000                     int$flags	set	btemp
  4544  0000                     wtemp6	set	btemp+1
  4545                           pclatu	equ	0xFFB
  4546                           pclath	equ	0xFFA
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           intcon	equ	0xFF2
  4554                           intcon2	equ	0xFF1
  4555                           postinc0	equ	0xFEE
  4556                           plusw0	equ	0xFEB
  4557                           fsr0h	equ	0xFEA
  4558                           fsr0l	equ	0xFE9
  4559                           wreg	equ	0xFE8
  4560                           indf1	equ	0xFE7
  4561                           postinc1	equ	0xFE6
  4562                           postdec1	equ	0xFE5
  4563                           fsr1h	equ	0xFE2
  4564                           fsr1l	equ	0xFE1
  4565                           bsr	equ	0xFE0
  4566                           indf2	equ	0xFDF
  4567                           postinc2	equ	0xFDE
  4568                           postdec2	equ	0xFDD
  4569                           plusw2	equ	0xFDB
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    8
    Data        8
    BSS         231
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     63      70
    BANK0           160     31     100
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_12(CODE[6]), STR_11(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[3]), STR_6(CODE[4]), STR_5(CODE[4]), 
		 -> ROM(CODE[32767]), STR_4(CODE[2]), STR_3(CODE[2]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_12(CODE[6]), STR_2(CODE[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_11(CODE[2]), STR_1(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_10(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_10(CODE[2]), ROM(CODE[32767]), 

    S130$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S130$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S130$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_5(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_4(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5275
                                             29 BANK0      2     2      0
                        _C_DOOR_Init
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    3     3      0    2011
                                             26 BANK0      3     3      0
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1877
                                             21 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    20      3    1529
                                              7 BANK0     14    11      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             42 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             41 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            25    20      5     725
                                             25 COMRAM    16    11      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      64       5       62.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3F      46       1       74.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     150      20        0.0%
DATA                 0      0     150       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov 25 17:57:44 2017

                         l13 0C48                           l43 10B0                           l36 1144  
                         l45 1132                           l38 11C6                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 0040  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l216 106E                          l217 108C  
                        l243 13D4                          l331 0D90                          l332 0D84  
                        l335 0DC4                          l264 09F4                          l168 1376  
                        l336 0DD2                          l328 0D4A                          l265 0A52  
                        l257 09DC                          l337 0DE8                          l329 0D62  
                        l258 09EC                          l259 09FC                          l268 0ACE  
                        l269 0A82                          l680 12CA                          l681 12D4  
                        l676 12AA                          l677 12A2                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000                          u660 12AE                          u740 0A7C  
                        u750 0AD8                          u950 11BC                          u944 11AC  
                        u880 0D94                          u945 11A8                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000          __end_ofi1_writeByte 140E  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1360 13F8  
                       l1446 0A74                         l1562 0C40                         l1576 113C  
                       l1592 10A8                         STR_1 0835                         STR_2 0833  
                       STR_3 082F                         STR_4 082D                         STR_5 0824  
                       STR_6 0820                         STR_7 0828                         STR_8 0831  
                       STR_9 0831                         u1111 1354                         u1221 1084  
                       u1257 1046                         u1267 0EBA                 ?_C_DOOR_Init 0001  
                       _baud 0046                         _main 100A                         _read 0092  
                       _tick 009E                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0047                         prodh 000FF4                         prodl 000FF3  
                       start 00D4                __CFG_IESO$OFF 000000              __end_ofi1_putch 1418  
            __end_of_HighISR 100A                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
             _startCharacter 0044                __CFG_PLLDIV$5 000000              __end_of___aldiv 0DFA  
                      ?_main 0001                        STR_10 0835                        STR_11 082B  
                      STR_12 081A                        STR_13 0809              __end_of___lwdiv 12DE  
                      i1l141 08F4                        i1l133 086C                        i1l150 0996  
                      i1l142 0916                        i1l134 088E                        i1l127 09A6  
                      i1l152 09A0                        i1l128 083C                        i1l145 0938  
                      i1l137 08B0                        i1l129 0864                        i1l146 095A  
                      i1l138 08D2                        i1l149 097C                        i1l264 0B28  
                      i1l265 0B82                        i1l257 0B12                        i1l258 0B22  
                      i1l178 007C                        i1l259 0B30                        i1l268 0BFC  
                      i1l269 0BB2                        i2l226 0FBE                        i1l680 131C  
                      i1l681 1326                        i1l676 12FC                        i1l677 12F4  
                      _RCREG 000FAE         __size_of_acknowledge 0060                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 13E6  
            i1writeByte@data 0013                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00AE                 ?_D_UART_Read 00A0                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                        plusw2 000FDB                        status 000FD8  
                      wtemp6 0048                 ?_D_PORT_Init 0001           __size_ofi1___lwdiv 0052  
              _stopCharacter 0042             __end_ofi1_printf 0C32                   i1printf@ap 0023  
            __initialization 11CA             _D_UART_Init$1514 00B3                 __end_of_main 10A2  
                     ??_main 00BD                  i1_writeByte 1402                __activetblptr 000002  
            __CFG_CCP2MX$OFF 000000                       _ADCON1 000FC1                       ?_putch 0001  
                     i1l1364 1404                       i1l1488 0BA4                    ??i1_putch 0014  
           _C_DOOR_UnlockAll 13D8                    ??_HighISR 0001                       _LowISR 0018  
             __CFG_XINST$OFF 000000                    ??___aldiv 00A8                    ??___lwdiv 00A4  
           __end_of_readByte 1420                       clear_0 1208                       clear_1 1214  
                     _printf 09D0            __end_ofi1___lwdiv 1330                 __pdataCOMRAM 0040  
      D_UART_Init@interrupts 00B2                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00B5  
            D_UART_Init@baud 00B0              D_UART_Init@name 00AE   __end_of_C_DOOR_ReadSensors 11CA  
                 __accesstop 0060      __end_of__initialization 121C              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 00FA                  i1printf@idx 0025  
                i1printf@val 0026               __pcstackCOMRAM 0001                 __pidataBANK0 1426  
               C_DOOR_Init@d 00A0                  i1putch@data 0014                __end_of_putch 13F4  
           _messageCharacter 00C2       __size_of_D_UART_Enable 0024               ??_D_UART_Write 00B9  
                  ?i1_printf 001A       __size_of_D_TMR0_Enable 0014            _C_DOOR_SendStates 10A2  
                    ??_putch 00A1           ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060  
                 __pbssBANK1 0100         __size_of_D_UART_Init 00A2         __size_of_D_UART_Read 002E  
       __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00BA                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E                   _deviceName 00BF                      ?_printf 00A7  
  __end_of_C_DOOR_SendStates 1136                   ??i1_printf 001F      __size_of_fillDataBuffer 0198  
                    i1u80_20 0BAC                      i1u81_20 0C04                      i1u69_20 1300  
        D_UART_Enable@enable 00A0              __CFG_VREGEN$OFF 000000                      i1_putch 140E  
                    _HighISR 0008                    ?_readByte 0001           __size_of_writeByte 000E  
              _D_UART_Enable 135E                      __Hparam 0000                      __Lparam 0000  
            __size_of_LowISR 00BC                _D_TMR0_Enable 13C4                   _readBuffer 0100  
                    ___aldiv 0D2C                      ___lwdiv 128A                 __psmallconst 0800  
        C_DOOR_ReadSensors@d 00A4              __CFG_STVREN$OFF 000000                ??_acknowledge 002A  
                    __pcinit 11CA                      __ramtop 0800     __end_of_C_DOOR_UnlockAll 13E6  
                    __ptext0 100A                      __ptext1 1330                      __ptext2 0EC6  
                    __ptext3 0D2C                      __ptext4 135E                      __ptext5 1382  
                    __ptext6 13C4                      __ptext7 13A6                      __ptext8 13D8  
                    __ptext9 10A2              __size_of_printf 0138                    _T0CONbits 000FD5  
               ?i1_writeByte 0001            __end_of_hexpowers 0809            i1___lwdiv@divisor 0015  
          i1___lwdiv@counter 0019             ___aldiv@dividend 00A0               __pintcode_body 0F68  
       end_of_initialization 121C                   ??_readByte 0013          D_TMR0_Enable@enable 00A0  
              __Lmediumconst 0000                      int_func 0F68               ?_D_UART_Enable 0001  
             ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0EC6                    _RCSTAbits 000FAB  
                    printf@c 00B4                      printf@f 00A7             ___aldiv@quotient 00AA  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE            __end_of_writeByte 1402  
 __size_of_C_DOOR_SendStates 0094                    _TRISCbits 000F94          __end_of_acknowledge 128A  
                  i1___lwdiv 12DE                    _TXSTAbits 000FAC                 i1printf@flag 0022  
               i1printf@prec 0028           _C_DOOR_ReadSensors 1136               __end_of_LowISR 00D4  
                _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 1420  
             __end_of_printf 0B08          start_initialization 11CA               _fillDataBuffer 0838  
                  i1printf@c 0029                    i1printf@f 001A                   ?i1___lwdiv 0013  
          __size_ofi1_printf 012A         ??_C_DOOR_ReadSensors 00A0              ??_D_UART_Enable 00A0  
              ??_C_DOOR_Init 00A0              ??_D_TMR0_Enable 00A0                     ??_LowISR 002B  
                __pdataBANK0 00C2             __CFG_LPT1OSC$OFF 000000                  _acknowledge 122A  
           D_UART_Write@data 00B7                     ??_printf 00AA       __end_of_fillDataBuffer 09D0  
                __pbssCOMRAM 0046         __size_ofi1_writeByte 000C                __pcstackBANK0 00A0  
              ??_D_UART_Init 00B3                ??_D_UART_Read 00A6                ??_D_TMR0_Init 00A1  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00CC  
              ??_D_PORT_Init 00A0                    __pnvBANK0 00BF            __size_of_readByte 0008  
           ___lwdiv@dividend 00A0          __end_of_C_DOOR_Init 0D2C                    __pintcode 0008  
                   ?___aldiv 00A0                     ?___lwdiv 00A0                  __pintcodelo 0018  
         fillDataBuffer@data 002A            ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001  
                __smallconst 0800           ??_C_DOOR_UnlockAll 00A0                 _D_UART_Write 0DFA  
                  _hexpowers 0801                    _readReady 009F             ___lwdiv@quotient 00A4  
                ??i1___lwdiv 0017               __size_of_putch 000E              ___aldiv@divisor 00A4  
            ___aldiv@counter 00A8                     _LATBbits 000F8A                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 0F68          __end_of_D_UART_Read 135E  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 13A6                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 13C4                   printf@flag 00AD  
                 printf@prec 00B3                     i1_printf 0B08                    _writeByte 13F4  
                _INTCON2bits 000FF1                    copy_data0 11F6                  _C_DOOR_Init 0C32  
           __size_ofi1_putch 000A             __size_of_HighISR 1002                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___aldiv 00CE             __size_of___lwdiv 0054  
            ___lwdiv@divisor 00A2              ___lwdiv@counter 00A6                     __ptext10 0DFA  
                   __ptext11 09D0                     __ptext20 122A                     __ptext12 13E6  
                   __ptext21 0B08                     __ptext13 13F4                     __ptext22 140E  
                   __ptext14 128A                     __ptext23 1402                     __ptext15 1136  
                   __ptext24 12DE                     __ptext16 0C32                     __ptext18 1418  
                   __ptext19 0838                   ?_writeByte 0001           i1___lwdiv@dividend 0013  
                _D_UART_Init 0EC6                  _D_UART_Read 1330                     _readData 0098  
                _D_TMR0_Init 1382                     _readByte 1418                __size_of_main 0098  
         C_DOOR_SendStates@d 00BC                  _D_PORT_Init 13A6                     int$flags 0047  
                  printf@idx 00B0                    printf@val 00B1                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00A1  
                 _INTCONbits 000FF2                     intlevel1 0000                     intlevel2 0000  
__size_of_C_DOOR_ReadSensors 0094        __end_of_D_UART_Enable 1382        __end_of_D_TMR0_Enable 13D8  
                   printf@ap 00AE             ??_fillDataBuffer 002A          D_UART_Write@command 00B5  
              ??i1_writeByte 0013                writeByte@data 00A0                 ___aldiv@sign 00A9  
                ??_writeByte 00A0    __size_of_C_DOOR_UnlockAll 000E  
