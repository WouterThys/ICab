

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 26 21:10:37 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    47                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    48                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    49  0000                     
    50                           ; Version 1.44
    51                           ; Generated 14/09/2017 GMT
    52                           ; 
    53                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC18F2550 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     
    85                           	psect	idataCOMRAM
    86  001634                     __pidataCOMRAM:
    87                           	opt stack 0
    88                           
    89                           ;initializer for _ackCharacter
    90  001634  1A                 	db	low STR_4
    91  001635  08                 	db	high STR_4
    92                           
    93                           ;initializer for _stopCharacter
    94  001636  31                 	db	low STR_2
    95  001637  08                 	db	high STR_2
    96                           
    97                           ;initializer for _startCharacter
    98  001638  33                 	db	low STR_1
    99  001639  08                 	db	high STR_1
   100                           
   101                           	psect	idataBANK0
   102  00163A                     __pidataBANK0:
   103                           	opt stack 0
   104                           
   105                           ;initializer for _messageCharacter
   106  00163A  1E                 	db	low STR_3
   107  00163B  08                 	db	high STR_3
   108                           
   109                           	psect	smallconst
   110  000800                     __psmallconst:
   111                           	opt stack 0
   112  000800  00                 	db	0
   113  000801                     _hexpowers:
   114                           	opt stack 0
   115  000801  0001               	dw	1
   116  000803  0010               	dw	16
   117  000805  0100               	dw	256
   118  000807  1000               	dw	4096
   119  000809                     __end_of_hexpowers:
   120                           	opt stack 0
   121  0000                     _INTCON2bits	set	4081
   122  0000                     _T0CONbits	set	4053
   123  0000                     _PIE1bits	set	3997
   124  0000                     _IPR1bits	set	3999
   125  0000                     _PIR1bits	set	3998
   126  0000                     _INTCONbits	set	4082
   127  0000                     _RCONbits	set	4048
   128  0000                     _SPBRG	set	4015
   129  0000                     _BAUDCONbits	set	4024
   130  0000                     _TRISCbits	set	3988
   131  0000                     _RCREG	set	4014
   132  0000                     _RCSTAbits	set	4011
   133  0000                     _TXREG	set	4013
   134  0000                     _TXSTAbits	set	4012
   135  0000                     _ADCON1	set	4033
   136  0000                     _PORTC	set	3970
   137  0000                     _TRISC	set	3988
   138  0000                     _PORTA	set	3968
   139  0000                     _TRISA	set	3986
   140  0000                     _TRISB	set	3987
   141  0000                     _PORTB	set	3969
   142  000809                     STR_17:
   143  000809  30                 	db	48	;'0'
   144  00080A  31                 	db	49	;'1'
   145  00080B  32                 	db	50	;'2'
   146  00080C  33                 	db	51	;'3'
   147  00080D  34                 	db	52	;'4'
   148  00080E  35                 	db	53	;'5'
   149  00080F  36                 	db	54	;'6'
   150  000810  37                 	db	55	;'7'
   151  000811  38                 	db	56	;'8'
   152  000812  39                 	db	57	;'9'
   153  000813  61                 	db	97	;'a'
   154  000814  62                 	db	98	;'b'
   155  000815  63                 	db	99	;'c'
   156  000816  64                 	db	100	;'d'
   157  000817  65                 	db	101	;'e'
   158  000818  66                 	db	102	;'f'
   159  000819  00                 	db	0
   160  00081A                     STR_4:
   161  00081A  5B                 	db	91	;'['
   162  00081B  41                 	db	65	;'A'
   163  00081C  5D                 	db	93	;']'
   164  00081D  00                 	db	0
   165  00081E                     STR_3:
   166  00081E  5B                 	db	91	;'['
   167  00081F  4D                 	db	77	;'M'
   168  000820  5D                 	db	93	;']'
   169  000821  00                 	db	0
   170  000822                     STR_5:
   171  000822  25                 	db	37
   172  000823  78                 	db	120	;'x'
   173  000824  00                 	db	0
   174  000825                     STR_15:
   175  000825  45                 	db	69	;'E'
   176  000826  00                 	db	0
   177  000827                     STR_9:
   178  000827  49                 	db	73	;'I'
   179  000828  00                 	db	0
   180  000829                     STR_11:
   181  000829  4C                 	db	76	;'L'
   182  00082A  00                 	db	0
   183  00082B                     STR_8:
   184  00082B  50                 	db	80	;'P'
   185  00082C  00                 	db	0
   186  00082D                     STR_14:
   187  00082D  52                 	db	82	;'R'
   188  00082E  00                 	db	0
   189  00082F                     STR_12:
   190  00082F  55                 	db	85	;'U'
   191  000830  00                 	db	0
   192  000831                     STR_2:
   193  000831  24                 	db	36
   194  000832  00                 	db	0
   195  000833                     STR_1:
   196  000833  26                 	db	38
   197  000834  00                 	db	0
   198  000835                     STR_6:
   199  000835  3A                 	db	58	;':'
   200  000836  00                 	db	0
   201  0000                     
   202                           ; #config settings
   203  000837  00                 	db	0	; dummy byte at the end
   204  0000                     
   205                           	psect	cinit
   206  0013E6                     __pcinit:
   207                           	opt stack 0
   208  0013E6                     start_initialization:
   209                           	opt stack 0
   210  0013E6                     __initialization:
   211                           	opt stack 0
   212                           
   213                           ; Initialize objects allocated to BANK0 (2 bytes)
   214                           ; load TBLPTR registers with __pidataBANK0
   215  0013E6  0E3A               	movlw	low __pidataBANK0
   216  0013E8  6EF6               	movwf	tblptrl,c
   217  0013EA  0E16               	movlw	high __pidataBANK0
   218  0013EC  6EF7               	movwf	tblptrh,c
   219  0013EE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   220  0013F0  6EF8               	movwf	tblptru,c
   221  0013F2  0009               	tblrd		*+	;fetch initializer
   222  0013F4  CFF5 F0C4          	movff	tablat,__pdataBANK0
   223  0013F8  0009               	tblrd		*+	;fetch initializer
   224  0013FA  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   225                           
   226                           ; Initialize objects allocated to COMRAM (6 bytes)
   227                           ; load TBLPTR registers with __pidataCOMRAM
   228  0013FE  0E34               	movlw	low __pidataCOMRAM
   229  001400  6EF6               	movwf	tblptrl,c
   230  001402  0E16               	movlw	high __pidataCOMRAM
   231  001404  6EF7               	movwf	tblptrh,c
   232  001406  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   233  001408  6EF8               	movwf	tblptru,c
   234  00140A  EE00  F03D         	lfsr	0,__pdataCOMRAM
   235  00140E  EE10 F006          	lfsr	1,6
   236  001412                     copy_data0:
   237  001412  0009               	tblrd		*+
   238  001414  CFF5 FFEE          	movff	tablat,postinc0
   239  001418  50E5               	movf	postdec1,w,c
   240  00141A  50E1               	movf	fsr1l,w,c
   241  00141C  E1FA               	bnz	copy_data0
   242                           
   243                           ; Clear objects allocated to BANK1 (166 bytes)
   244  00141E  EE01  F000         	lfsr	0,__pbssBANK1
   245  001422  0EA6               	movlw	166
   246  001424                     clear_0:
   247  001424  6AEE               	clrf	postinc0,c
   248  001426  06E8               	decf	wreg,f,c
   249  001428  E1FD               	bnz	clear_0
   250                           
   251                           ; Clear objects allocated to BANK0 (67 bytes)
   252  00142A  EE00  F060         	lfsr	0,__pbssBANK0
   253  00142E  0E43               	movlw	67
   254  001430                     clear_1:
   255  001430  6AEE               	clrf	postinc0,c
   256  001432  06E8               	decf	wreg,f,c
   257  001434  E1FD               	bnz	clear_1
   258                           
   259                           ; Clear objects allocated to COMRAM (1 bytes)
   260  001436  6A43               	clrf	__pbssCOMRAM& (0+255),c
   261  001438                     end_of_initialization:
   262                           	opt stack 0
   263  001438                     __end_of__initialization:
   264                           	opt stack 0
   265  001438  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   266  00143A  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   267  00143C  0100               	movlb	0
   268  00143E  EFE8  F004         	goto	_main	;jump to C main() function
   269                           tblptru	equ	0xFF8
   270                           tblptrh	equ	0xFF7
   271                           tblptrl	equ	0xFF6
   272                           tablat	equ	0xFF5
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           postdec1	equ	0xFE5
   276                           fsr1l	equ	0xFE1
   277                           
   278                           	psect	bssCOMRAM
   279  000043                     __pbssCOMRAM:
   280                           	opt stack 0
   281  000043                     _baud:
   282                           	opt stack 0
   283  000043                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	dataCOMRAM
   294  00003D                     __pdataCOMRAM:
   295                           	opt stack 0
   296  00003D                     _ackCharacter:
   297                           	opt stack 0
   298  00003D                     	ds	2
   299  00003F                     _stopCharacter:
   300                           	opt stack 0
   301  00003F                     	ds	2
   302  000041                     _startCharacter:
   303                           	opt stack 0
   304  000041                     	ds	2
   305                           tblptru	equ	0xFF8
   306                           tblptrh	equ	0xFF7
   307                           tblptrl	equ	0xFF6
   308                           tablat	equ	0xFF5
   309                           postinc0	equ	0xFEE
   310                           wreg	equ	0xFE8
   311                           postdec1	equ	0xFE5
   312                           fsr1l	equ	0xFE1
   313                           
   314                           	psect	bssBANK0
   315  000060                     __pbssBANK0:
   316                           	opt stack 0
   317  000060                     _doors:
   318                           	opt stack 0
   319  000060                     	ds	50
   320  000092                     _read:
   321                           	opt stack 0
   322  000092                     	ds	6
   323  000098                     _readData:
   324                           	opt stack 0
   325  000098                     	ds	6
   326  00009E                     _deviceName:
   327                           	opt stack 0
   328  00009E                     	ds	3
   329  0000A1                     _tick:
   330                           	opt stack 0
   331  0000A1                     	ds	1
   332  0000A2                     _readReady:
   333                           	opt stack 0
   334  0000A2                     	ds	1
   335                           tblptru	equ	0xFF8
   336                           tblptrh	equ	0xFF7
   337                           tblptrl	equ	0xFF6
   338                           tablat	equ	0xFF5
   339                           postinc0	equ	0xFEE
   340                           wreg	equ	0xFE8
   341                           postdec1	equ	0xFE5
   342                           fsr1l	equ	0xFE1
   343                           
   344                           	psect	dataBANK0
   345  0000C4                     __pdataBANK0:
   346                           	opt stack 0
   347  0000C4                     _messageCharacter:
   348                           	opt stack 0
   349  0000C4                     	ds	2
   350                           tblptru	equ	0xFF8
   351                           tblptrh	equ	0xFF7
   352                           tblptrl	equ	0xFF6
   353                           tablat	equ	0xFF5
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           postdec1	equ	0xFE5
   357                           fsr1l	equ	0xFE1
   358                           
   359                           	psect	bssBANK1
   360  000100                     __pbssBANK1:
   361                           	opt stack 0
   362  000100                     _readBuffer:
   363                           	opt stack 0
   364  000100                     	ds	166
   365                           tblptru	equ	0xFF8
   366                           tblptrh	equ	0xFF7
   367                           tblptrl	equ	0xFF6
   368                           tablat	equ	0xFF5
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           postdec1	equ	0xFE5
   372                           fsr1l	equ	0xFE1
   373                           
   374                           	psect	cstackBANK0
   375  0000A3                     __pcstackBANK0:
   376                           	opt stack 0
   377  0000A3                     ??_C_DOOR_ReadSensors:
   378  0000A3                     ?_strcmp:
   379                           	opt stack 0
   380  0000A3                     ?___lwdiv:
   381                           	opt stack 0
   382  0000A3                     ?___aldiv:
   383                           	opt stack 0
   384  0000A3                     ?_D_UART_Read:
   385                           	opt stack 0
   386  0000A3                     C_DOOR_Init@d:
   387                           	opt stack 0
   388  0000A3                     writeByte@data:
   389                           	opt stack 0
   390  0000A3                     D_UART_Enable@enable:
   391                           	opt stack 0
   392  0000A3                     D_TMR0_Enable@enable:
   393                           	opt stack 0
   394  0000A3                     ___lwdiv@dividend:
   395                           	opt stack 0
   396  0000A3                     strcmp@s1:
   397                           	opt stack 0
   398  0000A3                     ___aldiv@dividend:
   399                           	opt stack 0
   400  0000A3                     commandAndMessage@door:
   401                           	opt stack 0
   402                           
   403                           ; 10 bytes @ 0x0
   404  0000A3                     	ds	1
   405  0000A4                     putch@data:
   406                           	opt stack 0
   407                           
   408                           ; 1 bytes @ 0x1
   409  0000A4                     	ds	1
   410  0000A5                     ___lwdiv@divisor:
   411                           	opt stack 0
   412  0000A5                     strcmp@s2:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x2
   416  0000A5                     	ds	2
   417  0000A7                     ??_strcmp:
   418  0000A7                     C_DOOR_ReadSensors@d:
   419                           	opt stack 0
   420  0000A7                     ___lwdiv@quotient:
   421                           	opt stack 0
   422  0000A7                     ___aldiv@divisor:
   423                           	opt stack 0
   424                           
   425                           ; 4 bytes @ 0x4
   426  0000A7                     	ds	1
   427  0000A8                     strcmp@r:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x5
   431  0000A8                     	ds	1
   432  0000A9                     ___lwdiv@counter:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x6
   436  0000A9                     	ds	1
   437  0000AA                     ?_printf:
   438                           	opt stack 0
   439  0000AA                     printf@f:
   440                           	opt stack 0
   441                           
   442                           ; 3 bytes @ 0x7
   443  0000AA                     	ds	1
   444  0000AB                     ___aldiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x8
   448  0000AB                     	ds	1
   449  0000AC                     ___aldiv@sign:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x9
   453  0000AC                     	ds	1
   454  0000AD                     printf@flag:
   455                           	opt stack 0
   456  0000AD                     commandAndMessage@com:
   457                           	opt stack 0
   458  0000AD                     ___aldiv@quotient:
   459                           	opt stack 0
   460                           
   461                           ; 4 bytes @ 0xA
   462  0000AD                     	ds	1
   463  0000AE                     printf@ap:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0xB
   467  0000AE                     	ds	1
   468  0000AF                     commandAndMessage@mes:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xC
   472  0000AF                     	ds	1
   473  0000B0                     printf@idx:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0xD
   477  0000B0                     	ds	1
   478  0000B1                     D_UART_Init@name:
   479                           	opt stack 0
   480  0000B1                     printf@val:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0xE
   484  0000B1                     	ds	2
   485  0000B3                     printf@prec:
   486                           	opt stack 0
   487  0000B3                     D_UART_Init@baud:
   488                           	opt stack 0
   489                           
   490                           ; 2 bytes @ 0x10
   491  0000B3                     	ds	1
   492  0000B4                     printf@c:
   493                           	opt stack 0
   494                           
   495                           ; 1 bytes @ 0x11
   496  0000B4                     	ds	1
   497  0000B5                     D_UART_Init@interrupts:
   498                           	opt stack 0
   499  0000B5                     D_UART_Write@command:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x12
   503  0000B5                     	ds	1
   504  0000B6                     _D_UART_Init$1498:
   505                           	opt stack 0
   506                           
   507                           ; 4 bytes @ 0x13
   508  0000B6                     	ds	1
   509  0000B7                     D_UART_Write@data:
   510                           	opt stack 0
   511                           
   512                           ; 2 bytes @ 0x14
   513  0000B7                     	ds	2
   514  0000B9                     ??_D_UART_Write:
   515                           
   516                           ; 1 bytes @ 0x16
   517  0000B9                     	ds	1
   518  0000BA                     
   519                           ; 1 bytes @ 0x17
   520  0000BA                     	ds	2
   521  0000BC                     C_DOOR_SendStates@com:
   522                           	opt stack 0
   523                           
   524                           ; 3 bytes @ 0x19
   525  0000BC                     	ds	3
   526  0000BF                     C_DOOR_SendStates@mes:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x1C
   530  0000BF                     	ds	2
   531  0000C1                     C_DOOR_SendStates@d:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1E
   535  0000C1                     	ds	1
   536  0000C2                     ??_main:
   537                           
   538                           ; 1 bytes @ 0x1F
   539  0000C2                     	ds	2
   540                           tblptru	equ	0xFF8
   541                           tblptrh	equ	0xFF7
   542                           tblptrl	equ	0xFF6
   543                           tablat	equ	0xFF5
   544                           postinc0	equ	0xFEE
   545                           wreg	equ	0xFE8
   546                           postdec1	equ	0xFE5
   547                           fsr1l	equ	0xFE1
   548                           
   549                           	psect	cstackCOMRAM
   550  000001                     __pcstackCOMRAM:
   551                           	opt stack 0
   552  000001                     ??_HighISR:
   553  000001                     
   554                           ; 1 bytes @ 0x0
   555  000001                     	ds	18
   556  000013                     ?i1___lwdiv:
   557                           	opt stack 0
   558  000013                     i1writeByte@data:
   559                           	opt stack 0
   560  000013                     i1___lwdiv@dividend:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x12
   564  000013                     	ds	1
   565  000014                     i1putch@data:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x13
   569  000014                     	ds	1
   570  000015                     i1___lwdiv@divisor:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x14
   574  000015                     	ds	2
   575  000017                     i1___lwdiv@quotient:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x16
   579  000017                     	ds	2
   580  000019                     i1___lwdiv@counter:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x18
   584  000019                     	ds	1
   585  00001A                     ?i1_printf:
   586                           	opt stack 0
   587  00001A                     i1printf@f:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x19
   591  00001A                     	ds	5
   592  00001F                     i1printf@flag:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x1E
   596  00001F                     	ds	1
   597  000020                     i1printf@ap:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x1F
   601  000020                     	ds	2
   602  000022                     i1printf@idx:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x21
   606  000022                     	ds	1
   607  000023                     i1printf@val:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x22
   611  000023                     	ds	2
   612  000025                     i1printf@prec:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x24
   616  000025                     	ds	1
   617  000026                     i1printf@c:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x25
   621  000026                     	ds	1
   622  000027                     fillDataBuffer@data:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x26
   626  000027                     	ds	1
   627  000028                     ??_LowISR:
   628                           
   629                           ; 1 bytes @ 0x27
   630  000028                     	ds	21
   631                           tblptru	equ	0xFF8
   632                           tblptrh	equ	0xFF7
   633                           tblptrl	equ	0xFF6
   634                           tablat	equ	0xFF5
   635                           postinc0	equ	0xFEE
   636                           wreg	equ	0xFE8
   637                           postdec1	equ	0xFE5
   638                           fsr1l	equ	0xFE1
   639                           
   640 ;;
   641 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   642 ;;
   643 ;; *************** function _main *****************
   644 ;; Defined at:
   645 ;;		line 24 in file "main.c"
   646 ;; Parameters:    Size  Location     Type
   647 ;;		None
   648 ;; Auto vars:     Size  Location     Type
   649 ;;		None
   650 ;; Return value:  Size  Location     Type
   651 ;;                  1    wreg      void 
   652 ;; Registers used:
   653 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   654 ;; Tracked objects:
   655 ;;		On entry : 0/0
   656 ;;		On exit  : 0/0
   657 ;;		Unchanged: 0/0
   658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   659 ;;      Params:         0       0       0       0       0       0       0       0       0
   660 ;;      Locals:         0       0       0       0       0       0       0       0       0
   661 ;;      Temps:          0       2       0       0       0       0       0       0       0
   662 ;;      Totals:         0       2       0       0       0       0       0       0       0
   663 ;;Total ram usage:        2 bytes
   664 ;; Hardware stack levels required when called:   12
   665 ;; This function calls:
   666 ;;		_C_DOOR_Init
   667 ;;		_C_DOOR_LockAll
   668 ;;		_C_DOOR_ReadSensors
   669 ;;		_C_DOOR_SendStates
   670 ;;		_C_DOOR_UnlockAll
   671 ;;		_D_PORT_Init
   672 ;;		_D_TMR0_Enable
   673 ;;		_D_TMR0_Init
   674 ;;		_D_UART_Enable
   675 ;;		_D_UART_Init
   676 ;;		_D_UART_Read
   677 ;;		_D_UART_Write
   678 ;;		_strcmp
   679 ;; This function is called by:
   680 ;;		Startup code after reset
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text0
   685  0009D0                     __ptext0:
   686                           	opt stack 0
   687  0009D0                     _main:
   688                           	opt stack 19
   689                           
   690                           ;main.c: 25: _delay((unsigned long)((200)*(16000000/4000.0)));
   691                           
   692                           ;incstack = 0
   693  0009D0  0E05               	movlw	5
   694  0009D2  0100               	movlb	0	; () banked
   695  0009D4  6FC3               	movwf	(??_main+1)& (0+255),b
   696  0009D6  0E0F               	movlw	15
   697  0009D8  6FC2               	movwf	??_main& (0+255),b
   698  0009DA  0EF1               	movlw	241
   699  0009DC                     u1517:
   700  0009DC  2EE8               	decfsz	wreg,f,c
   701  0009DE  D7FE               	bra	u1517
   702  0009E0  2FC2               	decfsz	??_main& (0+255),f,b
   703  0009E2  D7FC               	bra	u1517
   704  0009E4  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   705  0009E6  D7FA               	bra	u1517
   706                           
   707                           ;main.c: 27: D_PORT_Init();
   708  0009E8  ECD6  F00A         	call	_D_PORT_Init	;wreg free
   709                           
   710                           ;main.c: 31: D_UART_Init("P", 9600, 1);
   711  0009EC  0E2B               	movlw	low STR_8
   712  0009EE  0100               	movlb	0	; () banked
   713  0009F0  6FB1               	movwf	D_UART_Init@name& (0+255),b
   714  0009F2  0E08               	movlw	high STR_8
   715  0009F4  6FB2               	movwf	(D_UART_Init@name+1)& (0+255),b
   716  0009F6  0E25               	movlw	37
   717  0009F8  6FB4               	movwf	(D_UART_Init@baud+1)& (0+255),b
   718  0009FA  0E80               	movlw	128
   719  0009FC  6FB3               	movwf	D_UART_Init@baud& (0+255),b
   720  0009FE  0E01               	movlw	1
   721  000A00  6FB5               	movwf	D_UART_Init@interrupts& (0+255),b
   722  000A02  ECAA  F008         	call	_D_UART_Init	;wreg free
   723                           
   724                           ;main.c: 32: D_UART_Enable(1);
   725  000A06  0E01               	movlw	1
   726  000A08  ECB2  F00A         	call	_D_UART_Enable
   727                           
   728                           ;main.c: 35: D_TMR0_Init();
   729  000A0C  ECC4  F00A         	call	_D_TMR0_Init	;wreg free
   730                           
   731                           ;main.c: 38: C_DOOR_Init();
   732  000A10  ECF2  F006         	call	_C_DOOR_Init	;wreg free
   733                           
   734                           ;main.c: 39: C_DOOR_UnlockAll();
   735  000A14  ECEF  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   736                           
   737                           ;main.c: 41: _delay((unsigned long)((200)*(16000000/4000.0)));
   738  000A18  0E05               	movlw	5
   739  000A1A  0100               	movlb	0	; () banked
   740  000A1C  6FC3               	movwf	(??_main+1)& (0+255),b
   741  000A1E  0E0F               	movlw	15
   742  000A20  6FC2               	movwf	??_main& (0+255),b
   743  000A22  0EF1               	movlw	241
   744  000A24                     u1527:
   745  000A24  2EE8               	decfsz	wreg,f,c
   746  000A26  D7FE               	bra	u1527
   747  000A28  2FC2               	decfsz	??_main& (0+255),f,b
   748  000A2A  D7FC               	bra	u1527
   749  000A2C  2FC3               	decfsz	(??_main+1)& (0+255),f,b
   750  000A2E  D7FA               	bra	u1527
   751                           
   752                           ;main.c: 42: D_UART_Write("I", "I");
   753  000A30  0E27               	movlw	low STR_9
   754  000A32  0100               	movlb	0	; () banked
   755  000A34  6FB5               	movwf	D_UART_Write@command& (0+255),b
   756  000A36  0E08               	movlw	high STR_9
   757  000A38  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
   758  000A3A  0E27               	movlw	low STR_9
   759  000A3C  6FB7               	movwf	D_UART_Write@data& (0+255),b
   760  000A3E  0E08               	movlw	high STR_9
   761  000A40  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
   762  000A42  EC6F  F007         	call	_D_UART_Write	;wreg free
   763                           
   764                           ;main.c: 45: D_TMR0_Enable(1);
   765  000A46  0E01               	movlw	1
   766  000A48  ECE5  F00A         	call	_D_TMR0_Enable
   767  000A4C                     
   768                           ;main.c: 49: if (readReady) {
   769  000A4C  0100               	movlb	0	; () banked
   770  000A4E  51A2               	movf	_readReady& (0+255),w,b
   771  000A50  B4D8               	btfsc	status,2,c
   772  000A52  D06C               	goto	l248
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 50: readReady = 0;
   776  000A54  0E00               	movlw	0
   777  000A56  6FA2               	movwf	_readReady& (0+255),b
   778                           
   779                           ; BSR set to: 0
   780                           ;main.c: 51: read = D_UART_Read();
   781  000A58  EC9B  F00A         	call	_D_UART_Read	;wreg free
   782  000A5C  EE20  F092         	lfsr	2,_read
   783  000A60  0E05               	movlw	5
   784  000A62                     u1441:
   785  000A62  CFEB FFDB          	movff	plusw0,plusw2
   786  000A66  06E8               	decf	wreg,f,c
   787  000A68  E2FC               	bc	u1441
   788                           
   789                           ;main.c: 52: if (strcmp(read.command, "L") == 0) {
   790  000A6A  C094  F0A3         	movff	_read+2,strcmp@s1
   791  000A6E  C095  F0A4         	movff	_read+3,strcmp@s1+1
   792  000A72  0E29               	movlw	low STR_11
   793  000A74  0100               	movlb	0	; () banked
   794  000A76  6FA5               	movwf	strcmp@s2& (0+255),b
   795  000A78  0E08               	movlw	high STR_11
   796  000A7A  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   797  000A7C  EC74  F00A         	call	_strcmp	;wreg free
   798  000A80  0100               	movlb	0	; () banked
   799  000A82  51A3               	movf	?_strcmp& (0+255),w,b
   800  000A84  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   801  000A86  A4D8               	btfss	status,2,c
   802  000A88  D003               	goto	l241
   803                           
   804                           ; BSR set to: 0
   805                           ;main.c: 53: C_DOOR_LockAll();
   806  000A8A  EC04  F00B         	call	_C_DOOR_LockAll	;wreg free
   807                           
   808                           ;main.c: 54: } else if (strcmp(read.command, "U") == 0) {
   809  000A8E  D04E               	goto	l248
   810  000A90                     l241:
   811  000A90  C094  F0A3         	movff	_read+2,strcmp@s1
   812  000A94  C095  F0A4         	movff	_read+3,strcmp@s1+1
   813  000A98  0E2F               	movlw	low STR_12
   814  000A9A  0100               	movlb	0	; () banked
   815  000A9C  6FA5               	movwf	strcmp@s2& (0+255),b
   816  000A9E  0E08               	movlw	high STR_12
   817  000AA0  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   818  000AA2  EC74  F00A         	call	_strcmp	;wreg free
   819  000AA6  0100               	movlb	0	; () banked
   820  000AA8  51A3               	movf	?_strcmp& (0+255),w,b
   821  000AAA  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   822  000AAC  A4D8               	btfss	status,2,c
   823  000AAE  D003               	goto	l243
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 55: C_DOOR_UnlockAll();
   827  000AB0  ECEF  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   828                           
   829                           ;main.c: 56: } else if (strcmp(read.command, "I") == 0) {
   830  000AB4  D03B               	goto	l248
   831  000AB6                     l243:
   832  000AB6  C094  F0A3         	movff	_read+2,strcmp@s1
   833  000ABA  C095  F0A4         	movff	_read+3,strcmp@s1+1
   834  000ABE  0E27               	movlw	low STR_9
   835  000AC0  0100               	movlb	0	; () banked
   836  000AC2  6FA5               	movwf	strcmp@s2& (0+255),b
   837  000AC4  0E08               	movlw	high STR_9
   838  000AC6  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   839  000AC8  EC74  F00A         	call	_strcmp	;wreg free
   840  000ACC  0100               	movlb	0	; () banked
   841  000ACE  51A3               	movf	?_strcmp& (0+255),w,b
   842  000AD0  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   843  000AD2  B4D8               	btfsc	status,2,c
   844  000AD4  D02B               	goto	l248
   845                           
   846                           ; BSR set to: 0
   847                           
   848                           ; BSR set to: 0
   849                           
   850                           ; BSR set to: 0
   851                           ;main.c: 58: } else if (strcmp(read.command, "R") == 0) {
   852  000AD6  C094  F0A3         	movff	_read+2,strcmp@s1
   853  000ADA  C095  F0A4         	movff	_read+3,strcmp@s1+1
   854  000ADE  0E2D               	movlw	low STR_14
   855  000AE0  6FA5               	movwf	strcmp@s2& (0+255),b
   856  000AE2  0E08               	movlw	high STR_14
   857  000AE4  6FA6               	movwf	(strcmp@s2+1)& (0+255),b
   858  000AE6  EC74  F00A         	call	_strcmp	;wreg free
   859  000AEA  0100               	movlb	0	; () banked
   860  000AEC  51A3               	movf	?_strcmp& (0+255),w,b
   861  000AEE  11A4               	iorwf	(?_strcmp+1)& (0+255),w,b
   862  000AF0  A4D8               	btfss	status,2,c
   863  000AF2  D011               	goto	l247
   864                           
   865                           ; BSR set to: 0
   866                           ;main.c: 59: D_TMR0_Enable(0);
   867  000AF4  0E00               	movlw	0
   868  000AF6  ECE5  F00A         	call	_D_TMR0_Enable
   869                           
   870                           ;main.c: 60: D_UART_Enable(0);
   871  000AFA  0E00               	movlw	0
   872  000AFC  ECB2  F00A         	call	_D_UART_Enable
   873                           
   874                           ;main.c: 61: _delay((unsigned long)((20)*(16000000/4000.0)));
   875  000B00  0E68               	movlw	104
   876  000B02  0100               	movlb	0	; () banked
   877  000B04  6FC2               	movwf	??_main& (0+255),b
   878  000B06  0EE4               	movlw	228
   879  000B08                     u1537:
   880  000B08  2EE8               	decfsz	wreg,f,c
   881  000B0A  D7FE               	bra	u1537
   882  000B0C  2FC2               	decfsz	??_main& (0+255),f,b
   883  000B0E  D7FC               	bra	u1537
   884  000B10  F000               	nop	
   885  000B12  00FF               	reset		;# 
   886                           
   887                           ;main.c: 63: } else {
   888  000B14  D00B               	goto	l248
   889  000B16                     l247:
   890                           
   891                           ;main.c: 64: D_UART_Write("E", "U");
   892  000B16  0E25               	movlw	low STR_15
   893  000B18  0100               	movlb	0	; () banked
   894  000B1A  6FB5               	movwf	D_UART_Write@command& (0+255),b
   895  000B1C  0E08               	movlw	high STR_15
   896  000B1E  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
   897  000B20  0E2F               	movlw	low STR_12
   898  000B22  6FB7               	movwf	D_UART_Write@data& (0+255),b
   899  000B24  0E08               	movlw	high STR_12
   900  000B26  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
   901  000B28  EC6F  F007         	call	_D_UART_Write	;wreg free
   902  000B2C                     l248:
   903                           
   904                           ;main.c: 65: }
   905                           ;main.c: 66: }
   906                           ;main.c: 69: if (tick) {
   907  000B2C  0100               	movlb	0	; () banked
   908  000B2E  51A1               	movf	_tick& (0+255),w,b
   909  000B30  B4D8               	btfsc	status,2,c
   910  000B32  D78C               	goto	l239
   911                           
   912                           ; BSR set to: 0
   913                           ;main.c: 70: tick = 0;
   914  000B34  0E00               	movlw	0
   915  000B36  6FA1               	movwf	_tick& (0+255),b
   916                           
   917                           ; BSR set to: 0
   918                           ;main.c: 73: C_DOOR_ReadSensors();
   919  000B38  EC50  F009         	call	_C_DOOR_ReadSensors	;wreg free
   920                           
   921                           ;main.c: 76: C_DOOR_SendStates();
   922  000B3C  EC46  F008         	call	_C_DOOR_SendStates	;wreg free
   923  000B40  D785               	goto	l239
   924  000B42                     __end_of_main:
   925                           	opt stack 0
   926                           tblptru	equ	0xFF8
   927                           tblptrh	equ	0xFF7
   928                           tblptrl	equ	0xFF6
   929                           tablat	equ	0xFF5
   930                           postinc0	equ	0xFEE
   931                           plusw0	equ	0xFEB
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           plusw2	equ	0xFDB
   936                           status	equ	0xFD8
   937                           
   938 ;; *************** function _strcmp *****************
   939 ;; Defined at:
   940 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   943 ;;		 -> readBuffer(166), 
   944 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   945 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  r               1    5[BANK0 ] char 
   948 ;; Return value:  Size  Location     Type
   949 ;;                  2    0[BANK0 ] int 
   950 ;; Registers used:
   951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   952 ;; Tracked objects:
   953 ;;		On entry : 0/0
   954 ;;		On exit  : 0/0
   955 ;;		Unchanged: 0/0
   956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   957 ;;      Params:         0       4       0       0       0       0       0       0       0
   958 ;;      Locals:         0       1       0       0       0       0       0       0       0
   959 ;;      Temps:          0       1       0       0       0       0       0       0       0
   960 ;;      Totals:         0       6       0       0       0       0       0       0       0
   961 ;;Total ram usage:        6 bytes
   962 ;; Hardware stack levels used:    1
   963 ;; Hardware stack levels required when called:    7
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text1
   972  0014E8                     __ptext1:
   973                           	opt stack 0
   974  0014E8                     _strcmp:
   975                           	opt stack 23
   976                           
   977                           ;incstack = 0
   978  0014E8  D005               	goto	l833
   979  0014EA  0100               	movlb	0	; () banked
   980  0014EC  4BA3               	infsnz	strcmp@s1& (0+255),f,b
   981  0014EE  2BA4               	incf	(strcmp@s1+1)& (0+255),f,b
   982  0014F0  4BA5               	infsnz	strcmp@s2& (0+255),f,b
   983  0014F2  2BA6               	incf	(strcmp@s2+1)& (0+255),f,b
   984  0014F4                     l833:
   985                           
   986                           ; BSR set to: 0
   987  0014F4  C0A3  FFD9         	movff	strcmp@s1,fsr2l
   988  0014F8  C0A4  FFDA         	movff	strcmp@s1+1,fsr2h
   989  0014FC  50DF               	movf	indf2,w,c
   990  0014FE  0100               	movlb	0	; () banked
   991  001500  6FA7               	movwf	??_strcmp& (0+255),b
   992  001502  C0A5  FFF6         	movff	strcmp@s2,tblptrl
   993  001506  C0A6  FFF7         	movff	strcmp@s2+1,tblptrh
   994  00150A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   995  00150A  6AF8               	clrf	tblptru,c
   996  00150C                     	endif
   997  00150C                     	if	0	;tblptru may be non-zero
   998  00150C                     	endif
   999  00150C  0008               	tblrd		*
  1000  00150E  50F5               	movf	tablat,w,c
  1001  001510  0800               	sublw	0
  1002  001512  25A7               	addwf	??_strcmp& (0+255),w,b
  1003  001514  6FA8               	movwf	strcmp@r& (0+255),b
  1004  001516  51A8               	movf	strcmp@r& (0+255),w,b
  1005  001518  A4D8               	btfss	status,2,c
  1006  00151A  D007               	goto	u1330
  1007                           
  1008                           ; BSR set to: 0
  1009  00151C  C0A3  FFD9         	movff	strcmp@s1,fsr2l
  1010  001520  C0A4  FFDA         	movff	strcmp@s1+1,fsr2h
  1011  001524  50DF               	movf	indf2,w,c
  1012  001526  A4D8               	btfss	status,2,c
  1013  001528  D7E0               	goto	l834
  1014  00152A                     u1330:
  1015                           
  1016                           ; BSR set to: 0
  1017                           
  1018                           ; BSR set to: 0
  1019                           
  1020                           ; BSR set to: 0
  1021  00152A  51A8               	movf	strcmp@r& (0+255),w,b
  1022  00152C  6FA3               	movwf	?_strcmp& (0+255),b
  1023  00152E  6BA4               	clrf	(?_strcmp+1)& (0+255),b
  1024  001530  BFA3               	btfsc	?_strcmp& (0+255),7,b
  1025  001532  07A4               	decf	(?_strcmp+1)& (0+255),f,b
  1026  001534  0012               	return	
  1027  001536                     __end_of_strcmp:
  1028                           	opt stack 0
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           plusw0	equ	0xFEB
  1035                           wreg	equ	0xFE8
  1036                           postdec1	equ	0xFE5
  1037                           fsr1l	equ	0xFE1
  1038                           indf2	equ	0xFDF
  1039                           plusw2	equ	0xFDB
  1040                           fsr2h	equ	0xFDA
  1041                           fsr2l	equ	0xFD9
  1042                           status	equ	0xFD8
  1043                           
  1044 ;; *************** function _D_UART_Read *****************
  1045 ;; Defined at:
  1046 ;;		line 240 in file "Drivers/UART_Driver.c"
  1047 ;; Parameters:    Size  Location     Type
  1048 ;;		None
  1049 ;; Auto vars:     Size  Location     Type
  1050 ;;		None
  1051 ;; Return value:  Size  Location     Type
  1052 ;;                  6    0[BANK0 ] struct .
  1053 ;; Registers used:
  1054 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1055 ;; Tracked objects:
  1056 ;;		On entry : 0/0
  1057 ;;		On exit  : 0/0
  1058 ;;		Unchanged: 0/0
  1059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1060 ;;      Params:         0       6       0       0       0       0       0       0       0
  1061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1063 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1064 ;;Total ram usage:        6 bytes
  1065 ;; Hardware stack levels used:    1
  1066 ;; Hardware stack levels required when called:    7
  1067 ;; This function calls:
  1068 ;;		Nothing
  1069 ;; This function is called by:
  1070 ;;		_main
  1071 ;; This function uses a non-reentrant model
  1072 ;;
  1073                           
  1074                           	psect	text2
  1075  001536                     __ptext2:
  1076                           	opt stack 0
  1077  001536                     _D_UART_Read:
  1078                           	opt stack 23
  1079                           
  1080                           ;UART_Driver.c: 241: readData.sender = readBuffer.sender;
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;incstack = 0
  1084  001536  0E0B               	movlw	low (_readBuffer+11)
  1085  001538  0100               	movlb	0	; () banked
  1086  00153A  6F98               	movwf	_readData& (0+255),b
  1087  00153C  0E01               	movlw	high (_readBuffer+11)
  1088  00153E  6F99               	movwf	(_readData+1)& (0+255),b
  1089                           
  1090                           ;UART_Driver.c: 242: readData.command = readBuffer.command;
  1091  001540  0E3E               	movlw	low (_readBuffer+62)
  1092  001542  6F9A               	movwf	(_readData+2)& (0+255),b
  1093  001544  0E01               	movlw	high (_readBuffer+62)
  1094  001546  6F9B               	movwf	(_readData+3)& (0+255),b
  1095                           
  1096                           ;UART_Driver.c: 243: readData.message = readBuffer.message;
  1097  001548  0E71               	movlw	low (_readBuffer+113)
  1098  00154A  6F9C               	movwf	(_readData+4)& (0+255),b
  1099  00154C  0E01               	movlw	high (_readBuffer+113)
  1100  00154E  6F9D               	movwf	(_readData+5)& (0+255),b
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;UART_Driver.c: 244: return readData;
  1104  001550  EE20  F098         	lfsr	2,_readData
  1105  001554  EE00  F0A3         	lfsr	0,?_D_UART_Read
  1106  001558  0E05               	movlw	5
  1107  00155A                     u1311:
  1108  00155A  CFDB FFEB          	movff	plusw2,plusw0
  1109  00155E  06E8               	decf	wreg,f,c
  1110  001560  E2FC               	bc	u1311
  1111  001562  0012               	return	
  1112  001564                     __end_of_D_UART_Read:
  1113                           	opt stack 0
  1114                           tblptru	equ	0xFF8
  1115                           tblptrh	equ	0xFF7
  1116                           tblptrl	equ	0xFF6
  1117                           tablat	equ	0xFF5
  1118                           postinc0	equ	0xFEE
  1119                           plusw0	equ	0xFEB
  1120                           wreg	equ	0xFE8
  1121                           postdec1	equ	0xFE5
  1122                           fsr1l	equ	0xFE1
  1123                           indf2	equ	0xFDF
  1124                           plusw2	equ	0xFDB
  1125                           fsr2h	equ	0xFDA
  1126                           fsr2l	equ	0xFD9
  1127                           status	equ	0xFD8
  1128                           
  1129 ;; *************** function _D_UART_Init *****************
  1130 ;; Defined at:
  1131 ;;		line 182 in file "Drivers/UART_Driver.c"
  1132 ;; Parameters:    Size  Location     Type
  1133 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1134 ;;		 -> STR_8(2), 
  1135 ;;  baud            2   16[BANK0 ] unsigned int 
  1136 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1148 ;;      Params:         0       5       0       0       0       0       0       0       0
  1149 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1150 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1151 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1152 ;;Total ram usage:        9 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    8
  1155 ;; This function calls:
  1156 ;;		_D_UART_Enable
  1157 ;;		___aldiv
  1158 ;; This function is called by:
  1159 ;;		_main
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           	psect	text3
  1164  001154                     __ptext3:
  1165                           	opt stack 0
  1166  001154                     _D_UART_Init:
  1167                           	opt stack 22
  1168                           
  1169                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;incstack = 0
  1173  001154  9E94               	bcf	3988,7,c	;volatile
  1174                           
  1175                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1176  001156  8C94               	bsf	3988,6,c	;volatile
  1177                           
  1178                           ;UART_Driver.c: 188: deviceName = name;
  1179  001158  C0B1  F09E         	movff	D_UART_Init@name,_deviceName
  1180  00115C  C0B2  F09F         	movff	D_UART_Init@name+1,_deviceName+1
  1181  001160  0100               	movlb	0	; () banked
  1182  001162  519E               	movf	_deviceName& (0+255),w,b
  1183  001164  119F               	iorwf	(_deviceName+1)& (0+255),w,b
  1184  001166  A4D8               	btfss	status,2,c
  1185  001168  0E00               	movlw	low (__mediumconst shr (0+16))
  1186  00116A  6FA0               	movwf	(_deviceName+2)& (0+255),b
  1187                           
  1188                           ; BSR set to: 0
  1189                           ;UART_Driver.c: 189: readReady = 0;
  1190  00116C  0E00               	movlw	0
  1191  00116E  6FA2               	movwf	_readReady& (0+255),b
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1195  001170  0E00               	movlw	0
  1196  001172  ECB2  F00A         	call	_D_UART_Enable
  1197                           
  1198                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1199  001176  9CAC               	bcf	4012,6,c	;volatile
  1200                           
  1201                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1202  001178  98AC               	bcf	4012,4,c	;volatile
  1203                           
  1204                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1205  00117A  94AC               	bcf	4012,2,c	;volatile
  1206                           
  1207                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1208  00117C  9CAB               	bcf	4011,6,c	;volatile
  1209                           
  1210                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1211  00117E  9AB8               	bcf	4024,5,c	;volatile
  1212                           
  1213                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1214  001180  98B8               	bcf	4024,4,c	;volatile
  1215                           
  1216                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1217  001182  96B8               	bcf	4024,3,c	;volatile
  1218                           
  1219                           ;UART_Driver.c: 208: RCSTAbits.FERR = 0;
  1220  001184  94AB               	bcf	4011,2,c	;volatile
  1221                           
  1222                           ;UART_Driver.c: 209: RCSTAbits.OERR = 0;
  1223  001186  92AB               	bcf	4011,1,c	;volatile
  1224                           
  1225                           ;UART_Driver.c: 210: RCREG = 0x00;
  1226  001188  0E00               	movlw	0
  1227  00118A  6EAE               	movwf	4014,c	;volatile
  1228                           
  1229                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1230  00118C  C0B3  F0A7         	movff	D_UART_Init@baud,___aldiv@divisor
  1231  001190  C0B4  F0A8         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1232  001194  0100               	movlb	0	; () banked
  1233  001196  6BA9               	clrf	(___aldiv@divisor+2)& (0+255),b
  1234  001198  6BAA               	clrf	(___aldiv@divisor+3)& (0+255),b
  1235  00119A  0E00               	movlw	0
  1236  00119C  6FA3               	movwf	___aldiv@dividend& (0+255),b
  1237  00119E  0E24               	movlw	36
  1238  0011A0  6FA4               	movwf	(___aldiv@dividend+1)& (0+255),b
  1239  0011A2  0EF4               	movlw	244
  1240  0011A4  6FA5               	movwf	(___aldiv@dividend+2)& (0+255),b
  1241  0011A6  0E00               	movlw	0
  1242  0011A8  6FA6               	movwf	(___aldiv@dividend+3)& (0+255),b
  1243  0011AA  ECDF  F007         	call	___aldiv	;wreg free
  1244  0011AE  C0A3  F0B6         	movff	?___aldiv,_D_UART_Init$1498
  1245  0011B2  C0A4  F0B7         	movff	?___aldiv+1,_D_UART_Init$1498+1
  1246  0011B6  C0A5  F0B8         	movff	?___aldiv+2,_D_UART_Init$1498+2
  1247  0011BA  C0A6  F0B9         	movff	?___aldiv+3,_D_UART_Init$1498+3
  1248                           
  1249                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1250  0011BE  C0B6  F0A3         	movff	_D_UART_Init$1498,___aldiv@dividend
  1251  0011C2  C0B7  F0A4         	movff	_D_UART_Init$1498+1,___aldiv@dividend+1
  1252  0011C6  C0B8  F0A5         	movff	_D_UART_Init$1498+2,___aldiv@dividend+2
  1253  0011CA  C0B9  F0A6         	movff	_D_UART_Init$1498+3,___aldiv@dividend+3
  1254  0011CE  0E40               	movlw	64
  1255  0011D0  0100               	movlb	0	; () banked
  1256  0011D2  6FA7               	movwf	___aldiv@divisor& (0+255),b
  1257  0011D4  0E00               	movlw	0
  1258  0011D6  6FA8               	movwf	(___aldiv@divisor+1)& (0+255),b
  1259  0011D8  0E00               	movlw	0
  1260  0011DA  6FA9               	movwf	(___aldiv@divisor+2)& (0+255),b
  1261  0011DC  0E00               	movlw	0
  1262  0011DE  6FAA               	movwf	(___aldiv@divisor+3)& (0+255),b
  1263  0011E0  ECDF  F007         	call	___aldiv	;wreg free
  1264  0011E4  0100               	movlb	0	; () banked
  1265  0011E6  05A3               	decf	?___aldiv& (0+255),w,b
  1266  0011E8  6EAF               	movwf	4015,c	;volatile
  1267                           
  1268                           ; BSR set to: 0
  1269                           ;UART_Driver.c: 216: if (interrupts) {
  1270  0011EA  51B5               	movf	D_UART_Init@interrupts& (0+255),w,b
  1271  0011EC  B4D8               	btfsc	status,2,c
  1272  0011EE  0012               	return	
  1273                           
  1274                           ; BSR set to: 0
  1275                           ;UART_Driver.c: 217: RCONbits.IPEN = 1;
  1276  0011F0  8ED0               	bsf	4048,7,c	;volatile
  1277                           
  1278                           ;UART_Driver.c: 218: INTCONbits.GIEH = 1;
  1279  0011F2  8EF2               	bsf	intcon,7,c	;volatile
  1280                           
  1281                           ;UART_Driver.c: 219: INTCONbits.GIEL = 1;
  1282  0011F4  8CF2               	bsf	intcon,6,c	;volatile
  1283                           
  1284                           ;UART_Driver.c: 220: PIR1bits.RCIF = 0;
  1285  0011F6  9A9E               	bcf	3998,5,c	;volatile
  1286                           
  1287                           ;UART_Driver.c: 221: IPR1bits.RCIP = 0;
  1288  0011F8  9A9F               	bcf	3999,5,c	;volatile
  1289                           
  1290                           ;UART_Driver.c: 222: PIE1bits.RCIE = 1;
  1291  0011FA  8A9D               	bsf	3997,5,c	;volatile
  1292  0011FC  0012               	return	
  1293  0011FE                     __end_of_D_UART_Init:
  1294                           	opt stack 0
  1295                           tblptru	equ	0xFF8
  1296                           tblptrh	equ	0xFF7
  1297                           tblptrl	equ	0xFF6
  1298                           tablat	equ	0xFF5
  1299                           intcon	equ	0xFF2
  1300                           postinc0	equ	0xFEE
  1301                           plusw0	equ	0xFEB
  1302                           wreg	equ	0xFE8
  1303                           postdec1	equ	0xFE5
  1304                           fsr1l	equ	0xFE1
  1305                           indf2	equ	0xFDF
  1306                           plusw2	equ	0xFDB
  1307                           fsr2h	equ	0xFDA
  1308                           fsr2l	equ	0xFD9
  1309                           status	equ	0xFD8
  1310                           
  1311 ;; *************** function ___aldiv *****************
  1312 ;; Defined at:
  1313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1314 ;; Parameters:    Size  Location     Type
  1315 ;;  dividend        4    0[BANK0 ] long 
  1316 ;;  divisor         4    4[BANK0 ] long 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  quotient        4   10[BANK0 ] long 
  1319 ;;  sign            1    9[BANK0 ] unsigned char 
  1320 ;;  counter         1    8[BANK0 ] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  4    0[BANK0 ] long 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1330 ;;      Params:         0       8       0       0       0       0       0       0       0
  1331 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1333 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1334 ;;Total ram usage:       14 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    7
  1337 ;; This function calls:
  1338 ;;		Nothing
  1339 ;; This function is called by:
  1340 ;;		_D_UART_Init
  1341 ;; This function uses a non-reentrant model
  1342 ;;
  1343                           
  1344                           	psect	text4
  1345  000FBE                     __ptext4:
  1346                           	opt stack 0
  1347  000FBE                     ___aldiv:
  1348                           	opt stack 22
  1349                           
  1350                           ; BSR set to: 0
  1351                           ;incstack = 0
  1352  000FBE  0E00               	movlw	0
  1353  000FC0  0100               	movlb	0	; () banked
  1354  000FC2  6FAC               	movwf	___aldiv@sign& (0+255),b
  1355                           
  1356                           ; BSR set to: 0
  1357  000FC4  AFAA               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1358  000FC6  D00A               	goto	l341
  1359                           
  1360                           ; BSR set to: 0
  1361  000FC8  1FAA               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1362  000FCA  1FA9               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1363  000FCC  1FA8               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1364  000FCE  6DA7               	negf	___aldiv@divisor& (0+255),b
  1365  000FD0  0E00               	movlw	0
  1366  000FD2  23A8               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1367  000FD4  23A9               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1368  000FD6  23AA               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1369                           
  1370                           ; BSR set to: 0
  1371  000FD8  0E01               	movlw	1
  1372  000FDA  6FAC               	movwf	___aldiv@sign& (0+255),b
  1373  000FDC                     l341:
  1374                           
  1375                           ; BSR set to: 0
  1376                           
  1377                           ; BSR set to: 0
  1378  000FDC  AFA6               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1379  000FDE  D00A               	goto	l342
  1380                           
  1381                           ; BSR set to: 0
  1382  000FE0  1FA6               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1383  000FE2  1FA5               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1384  000FE4  1FA4               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1385  000FE6  6DA3               	negf	___aldiv@dividend& (0+255),b
  1386  000FE8  0E00               	movlw	0
  1387  000FEA  23A4               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1388  000FEC  23A5               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1389  000FEE  23A6               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1390                           
  1391                           ; BSR set to: 0
  1392  000FF0  0E01               	movlw	1
  1393  000FF2  1BAC               	xorwf	___aldiv@sign& (0+255),f,b
  1394  000FF4                     l342:
  1395                           
  1396                           ; BSR set to: 0
  1397                           
  1398                           ; BSR set to: 0
  1399  000FF4  0E00               	movlw	0
  1400  000FF6  6FAD               	movwf	___aldiv@quotient& (0+255),b
  1401  000FF8  0E00               	movlw	0
  1402  000FFA  6FAE               	movwf	(___aldiv@quotient+1)& (0+255),b
  1403  000FFC  0E00               	movlw	0
  1404  000FFE  6FAF               	movwf	(___aldiv@quotient+2)& (0+255),b
  1405  001000  0E00               	movlw	0
  1406  001002  6FB0               	movwf	(___aldiv@quotient+3)& (0+255),b
  1407                           
  1408                           ; BSR set to: 0
  1409  001004  51A7               	movf	___aldiv@divisor& (0+255),w,b
  1410  001006  11A8               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1411  001008  11A9               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1412  00100A  11AA               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1413  00100C  B4D8               	btfsc	status,2,c
  1414  00100E  D02A               	goto	l349
  1415                           
  1416                           ; BSR set to: 0
  1417  001010  0E01               	movlw	1
  1418  001012  6FAB               	movwf	___aldiv@counter& (0+255),b
  1419  001014  D006               	goto	l344
  1420  001016                     
  1421                           ; BSR set to: 0
  1422                           
  1423                           ; BSR set to: 0
  1424  001016  90D8               	bcf	status,0,c
  1425  001018  37A7               	rlcf	___aldiv@divisor& (0+255),f,b
  1426  00101A  37A8               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1427  00101C  37A9               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1428  00101E  37AA               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1429  001020  2BAB               	incf	___aldiv@counter& (0+255),f,b
  1430  001022                     l344:
  1431                           
  1432                           ; BSR set to: 0
  1433                           
  1434                           ; BSR set to: 0
  1435  001022  AFAA               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1436  001024  D7F8               	goto	l345
  1437  001026                     u1080:
  1438                           
  1439                           ; BSR set to: 0
  1440                           
  1441                           ; BSR set to: 0
  1442                           
  1443                           ; BSR set to: 0
  1444  001026  90D8               	bcf	status,0,c
  1445  001028  37AD               	rlcf	___aldiv@quotient& (0+255),f,b
  1446  00102A  37AE               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1447  00102C  37AF               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1448  00102E  37B0               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1449                           
  1450                           ; BSR set to: 0
  1451  001030  51A7               	movf	___aldiv@divisor& (0+255),w,b
  1452  001032  5DA3               	subwf	___aldiv@dividend& (0+255),w,b
  1453  001034  51A8               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1454  001036  59A4               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1455  001038  51A9               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1456  00103A  59A5               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1457  00103C  51AA               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1458  00103E  59A6               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1459  001040  A0D8               	btfss	status,0,c
  1460  001042  D009               	goto	l348
  1461                           
  1462                           ; BSR set to: 0
  1463  001044  51A7               	movf	___aldiv@divisor& (0+255),w,b
  1464  001046  5FA3               	subwf	___aldiv@dividend& (0+255),f,b
  1465  001048  51A8               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1466  00104A  5BA4               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1467  00104C  51A9               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1468  00104E  5BA5               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1469  001050  51AA               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1470  001052  5BA6               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1471                           
  1472                           ; BSR set to: 0
  1473  001054  81AD               	bsf	___aldiv@quotient& (0+255),0,b
  1474  001056                     l348:
  1475                           
  1476                           ; BSR set to: 0
  1477                           
  1478                           ; BSR set to: 0
  1479  001056  90D8               	bcf	status,0,c
  1480  001058  33AA               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1481  00105A  33A9               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1482  00105C  33A8               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1483  00105E  33A7               	rrcf	___aldiv@divisor& (0+255),f,b
  1484                           
  1485                           ; BSR set to: 0
  1486  001060  2FAB               	decfsz	___aldiv@counter& (0+255),f,b
  1487  001062  D7E1               	goto	u1080
  1488  001064                     l349:
  1489                           
  1490                           ; BSR set to: 0
  1491                           
  1492                           ; BSR set to: 0
  1493                           
  1494                           ; BSR set to: 0
  1495  001064  51AC               	movf	___aldiv@sign& (0+255),w,b
  1496  001066  B4D8               	btfsc	status,2,c
  1497  001068  D008               	goto	l350
  1498                           
  1499                           ; BSR set to: 0
  1500  00106A  1FB0               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1501  00106C  1FAF               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1502  00106E  1FAE               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1503  001070  6DAD               	negf	___aldiv@quotient& (0+255),b
  1504  001072  0E00               	movlw	0
  1505  001074  23AE               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1506  001076  23AF               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1507  001078  23B0               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1508  00107A                     l350:
  1509                           
  1510                           ; BSR set to: 0
  1511                           
  1512                           ; BSR set to: 0
  1513  00107A  C0AD  F0A3         	movff	___aldiv@quotient,?___aldiv
  1514  00107E  C0AE  F0A4         	movff	___aldiv@quotient+1,?___aldiv+1
  1515  001082  C0AF  F0A5         	movff	___aldiv@quotient+2,?___aldiv+2
  1516  001086  C0B0  F0A6         	movff	___aldiv@quotient+3,?___aldiv+3
  1517  00108A  0012               	return	
  1518  00108C                     __end_of___aldiv:
  1519                           	opt stack 0
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           intcon	equ	0xFF2
  1525                           postinc0	equ	0xFEE
  1526                           plusw0	equ	0xFEB
  1527                           wreg	equ	0xFE8
  1528                           postdec1	equ	0xFE5
  1529                           fsr1l	equ	0xFE1
  1530                           indf2	equ	0xFDF
  1531                           plusw2	equ	0xFDB
  1532                           fsr2h	equ	0xFDA
  1533                           fsr2l	equ	0xFD9
  1534                           status	equ	0xFD8
  1535                           
  1536 ;; *************** function _D_UART_Enable *****************
  1537 ;; Defined at:
  1538 ;;		line 247 in file "Drivers/UART_Driver.c"
  1539 ;; Parameters:    Size  Location     Type
  1540 ;;  enable          1    wreg     unsigned char 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  enable          1    0[BANK0 ] unsigned char 
  1543 ;; Return value:  Size  Location     Type
  1544 ;;                  1    wreg      void 
  1545 ;; Registers used:
  1546 ;;		wreg, status,2
  1547 ;; Tracked objects:
  1548 ;;		On entry : 0/0
  1549 ;;		On exit  : 0/0
  1550 ;;		Unchanged: 0/0
  1551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1552 ;;      Params:         0       0       0       0       0       0       0       0       0
  1553 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1554 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1555 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1556 ;;Total ram usage:        1 bytes
  1557 ;; Hardware stack levels used:    1
  1558 ;; Hardware stack levels required when called:    7
  1559 ;; This function calls:
  1560 ;;		Nothing
  1561 ;; This function is called by:
  1562 ;;		_D_UART_Init
  1563 ;;		_main
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text5
  1568  001564                     __ptext5:
  1569                           	opt stack 0
  1570  001564                     _D_UART_Enable:
  1571                           	opt stack 22
  1572                           
  1573                           ; BSR set to: 0
  1574                           ;incstack = 0
  1575                           ;D_UART_Enable@enable stored from wreg
  1576  001564  0100               	movlb	0	; () banked
  1577  001566  6FA3               	movwf	D_UART_Enable@enable& (0+255),b
  1578                           
  1579                           ;UART_Driver.c: 248: if(enable) {
  1580  001568  0100               	movlb	0	; () banked
  1581  00156A  51A3               	movf	D_UART_Enable@enable& (0+255),w,b
  1582  00156C  B4D8               	btfsc	status,2,c
  1583  00156E  D006               	goto	l169
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;UART_Driver.c: 249: TRISCbits.TRISC7 = 0;
  1587  001570  9E94               	bcf	3988,7,c	;volatile
  1588                           
  1589                           ;UART_Driver.c: 250: TRISCbits.TRISC6 = 1;
  1590  001572  8C94               	bsf	3988,6,c	;volatile
  1591                           
  1592                           ;UART_Driver.c: 251: TXSTAbits.TXEN = 1;
  1593  001574  8AAC               	bsf	4012,5,c	;volatile
  1594                           
  1595                           ;UART_Driver.c: 252: RCSTAbits.CREN = 1;
  1596  001576  88AB               	bsf	4011,4,c	;volatile
  1597                           
  1598                           ;UART_Driver.c: 253: RCSTAbits.SPEN = 1;
  1599  001578  8EAB               	bsf	4011,7,c	;volatile
  1600                           
  1601                           ;UART_Driver.c: 254: } else {
  1602  00157A  0012               	return	
  1603  00157C                     l169:
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;UART_Driver.c: 255: TRISCbits.TRISC7 = 0;
  1607  00157C  9E94               	bcf	3988,7,c	;volatile
  1608                           
  1609                           ;UART_Driver.c: 256: TRISCbits.TRISC6 = 0;
  1610  00157E  9C94               	bcf	3988,6,c	;volatile
  1611                           
  1612                           ;UART_Driver.c: 257: TXSTAbits.TXEN = 0;
  1613  001580  9AAC               	bcf	4012,5,c	;volatile
  1614                           
  1615                           ;UART_Driver.c: 258: RCSTAbits.CREN = 0;
  1616  001582  98AB               	bcf	4011,4,c	;volatile
  1617                           
  1618                           ;UART_Driver.c: 259: RCSTAbits.SPEN = 0;
  1619  001584  9EAB               	bcf	4011,7,c	;volatile
  1620  001586  0012               	return	
  1621  001588                     __end_of_D_UART_Enable:
  1622                           	opt stack 0
  1623                           tblptru	equ	0xFF8
  1624                           tblptrh	equ	0xFF7
  1625                           tblptrl	equ	0xFF6
  1626                           tablat	equ	0xFF5
  1627                           intcon	equ	0xFF2
  1628                           postinc0	equ	0xFEE
  1629                           plusw0	equ	0xFEB
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           indf2	equ	0xFDF
  1634                           plusw2	equ	0xFDB
  1635                           fsr2h	equ	0xFDA
  1636                           fsr2l	equ	0xFD9
  1637                           status	equ	0xFD8
  1638                           
  1639 ;; *************** function _D_TMR0_Init *****************
  1640 ;; Defined at:
  1641 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1642 ;; Parameters:    Size  Location     Type
  1643 ;;		None
  1644 ;; Auto vars:     Size  Location     Type
  1645 ;;		None
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, status,2, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1655 ;;      Params:         0       0       0       0       0       0       0       0       0
  1656 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1658 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1659 ;;Total ram usage:        0 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    8
  1662 ;; This function calls:
  1663 ;;		_D_TMR0_Enable
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text6
  1670  001588                     __ptext6:
  1671                           	opt stack 0
  1672  001588                     _D_TMR0_Init:
  1673                           	opt stack 22
  1674                           
  1675                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;incstack = 0
  1679  001588  0E00               	movlw	0
  1680  00158A  ECE5  F00A         	call	_D_TMR0_Enable
  1681                           
  1682                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1683  00158E  9CD5               	bcf	4053,6,c	;volatile
  1684                           
  1685                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1686  001590  9AD5               	bcf	4053,5,c	;volatile
  1687                           
  1688                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1689  001592  98D5               	bcf	4053,4,c	;volatile
  1690                           
  1691                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1692  001594  96D5               	bcf	4053,3,c	;volatile
  1693                           
  1694                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1695  001596  50D5               	movf	4053,w,c	;volatile
  1696  001598  0BF8               	andlw	-8
  1697  00159A  0902               	iorlw	2
  1698  00159C  6ED5               	movwf	4053,c	;volatile
  1699                           
  1700                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1701  00159E  8ED0               	bsf	4048,7,c	;volatile
  1702                           
  1703                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1704  0015A0  8EF2               	bsf	intcon,7,c	;volatile
  1705                           
  1706                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1707  0015A2  8CF2               	bsf	intcon,6,c	;volatile
  1708                           
  1709                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1710  0015A4  94F2               	bcf	intcon,2,c	;volatile
  1711                           
  1712                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1713  0015A6  84F1               	bsf	intcon2,2,c	;volatile
  1714                           
  1715                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1716  0015A8  8AF2               	bsf	intcon,5,c	;volatile
  1717  0015AA  0012               	return		;funcret
  1718  0015AC                     __end_of_D_TMR0_Init:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           intcon	equ	0xFF2
  1725                           intcon2	equ	0xFF1
  1726                           postinc0	equ	0xFEE
  1727                           plusw0	equ	0xFEB
  1728                           wreg	equ	0xFE8
  1729                           postdec1	equ	0xFE5
  1730                           fsr1l	equ	0xFE1
  1731                           indf2	equ	0xFDF
  1732                           plusw2	equ	0xFDB
  1733                           fsr2h	equ	0xFDA
  1734                           fsr2l	equ	0xFD9
  1735                           status	equ	0xFD8
  1736                           
  1737 ;; *************** function _D_TMR0_Enable *****************
  1738 ;; Defined at:
  1739 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  enable          1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  enable          1    0[BANK0 ] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, status,2
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1753 ;;      Params:         0       0       0       0       0       0       0       0       0
  1754 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1756 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1757 ;;Total ram usage:        1 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    7
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_D_TMR0_Init
  1764 ;;		_main
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text7
  1769  0015CA                     __ptext7:
  1770                           	opt stack 0
  1771  0015CA                     _D_TMR0_Enable:
  1772                           	opt stack 22
  1773                           
  1774                           ;incstack = 0
  1775                           ;D_TMR0_Enable@enable stored from wreg
  1776  0015CA  0100               	movlb	0	; () banked
  1777  0015CC  6FA3               	movwf	D_TMR0_Enable@enable& (0+255),b
  1778                           
  1779                           ;TMR0_Driver.c: 54: if (enable) {
  1780  0015CE  0100               	movlb	0	; () banked
  1781  0015D0  51A3               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1782  0015D2  B4D8               	btfsc	status,2,c
  1783  0015D4  D002               	goto	l196
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1787  0015D6  8ED5               	bsf	4053,7,c	;volatile
  1788                           
  1789                           ;TMR0_Driver.c: 56: } else {
  1790  0015D8  0012               	return	
  1791  0015DA                     l196:
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1795  0015DA  9ED5               	bcf	4053,7,c	;volatile
  1796  0015DC  0012               	return	
  1797  0015DE                     __end_of_D_TMR0_Enable:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           intcon	equ	0xFF2
  1804                           intcon2	equ	0xFF1
  1805                           postinc0	equ	0xFEE
  1806                           plusw0	equ	0xFEB
  1807                           wreg	equ	0xFE8
  1808                           postdec1	equ	0xFE5
  1809                           fsr1l	equ	0xFE1
  1810                           indf2	equ	0xFDF
  1811                           plusw2	equ	0xFDB
  1812                           fsr2h	equ	0xFDA
  1813                           fsr2l	equ	0xFD9
  1814                           status	equ	0xFD8
  1815                           
  1816 ;; *************** function _D_PORT_Init *****************
  1817 ;; Defined at:
  1818 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, status,2
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1832 ;;      Params:         0       0       0       0       0       0       0       0       0
  1833 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1835 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    7
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846                           	psect	text8
  1847  0015AC                     __ptext8:
  1848                           	opt stack 0
  1849  0015AC                     _D_PORT_Init:
  1850                           	opt stack 23
  1851                           
  1852                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;incstack = 0
  1856  0015AC  0E00               	movlw	0
  1857  0015AE  6E92               	movwf	3986,c	;volatile
  1858  0015B0  0E00               	movlw	0
  1859  0015B2  6E80               	movwf	3968,c	;volatile
  1860                           
  1861                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1862  0015B4  0E00               	movlw	0
  1863  0015B6  6E93               	movwf	3987,c	;volatile
  1864  0015B8  0E00               	movlw	0
  1865  0015BA  6E81               	movwf	3969,c	;volatile
  1866                           
  1867                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1868  0015BC  0E00               	movlw	0
  1869  0015BE  6E94               	movwf	3988,c	;volatile
  1870  0015C0  0E00               	movlw	0
  1871  0015C2  6E82               	movwf	3970,c	;volatile
  1872                           
  1873                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1874  0015C4  0E0F               	movlw	15
  1875  0015C6  6EC1               	movwf	4033,c	;volatile
  1876  0015C8  0012               	return		;funcret
  1877  0015CA                     __end_of_D_PORT_Init:
  1878                           	opt stack 0
  1879                           tblptru	equ	0xFF8
  1880                           tblptrh	equ	0xFF7
  1881                           tblptrl	equ	0xFF6
  1882                           tablat	equ	0xFF5
  1883                           intcon	equ	0xFF2
  1884                           intcon2	equ	0xFF1
  1885                           postinc0	equ	0xFEE
  1886                           plusw0	equ	0xFEB
  1887                           wreg	equ	0xFE8
  1888                           postdec1	equ	0xFE5
  1889                           fsr1l	equ	0xFE1
  1890                           indf2	equ	0xFDF
  1891                           plusw2	equ	0xFDB
  1892                           fsr2h	equ	0xFDA
  1893                           fsr2l	equ	0xFD9
  1894                           status	equ	0xFD8
  1895                           
  1896 ;; *************** function _C_DOOR_UnlockAll *****************
  1897 ;; Defined at:
  1898 ;;		line 91 in file "Controllers/DOOR_Controller.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr2l, fsr2h
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1912 ;;      Params:         0       0       0       0       0       0       0       0       0
  1913 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1915 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    7
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text9
  1927  0015DE                     __ptext9:
  1928                           	opt stack 0
  1929  0015DE                     _C_DOOR_UnlockAll:
  1930                           	opt stack 23
  1931                           
  1932                           ;DOOR_Controller.c: 96: *doors[0].lock_port &= 0x3F;
  1933                           
  1934                           ;incstack = 0
  1935  0015DE  C062  FFD9         	movff	_doors+2,fsr2l
  1936  0015E2  C063  FFDA         	movff	_doors+3,fsr2h
  1937  0015E6  0E3F               	movlw	63
  1938  0015E8  16DF               	andwf	indf2,f,c
  1939  0015EA  0012               	return		;funcret
  1940  0015EC                     __end_of_C_DOOR_UnlockAll:
  1941                           	opt stack 0
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           intcon	equ	0xFF2
  1947                           intcon2	equ	0xFF1
  1948                           postinc0	equ	0xFEE
  1949                           plusw0	equ	0xFEB
  1950                           wreg	equ	0xFE8
  1951                           postdec1	equ	0xFE5
  1952                           fsr1l	equ	0xFE1
  1953                           indf2	equ	0xFDF
  1954                           plusw2	equ	0xFDB
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _C_DOOR_SendStates *****************
  1960 ;; Defined at:
  1961 ;;		line 106 in file "Controllers/DOOR_Controller.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  com             3   25[BANK0 ] unsigned char [3]
  1966 ;;  mes             2   28[BANK0 ] unsigned char [2]
  1967 ;;  d               1   30[BANK0 ] unsigned char 
  1968 ;; Return value:  Size  Location     Type
  1969 ;;                  1    wreg      void 
  1970 ;; Registers used:
  1971 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1972 ;; Tracked objects:
  1973 ;;		On entry : 0/0
  1974 ;;		On exit  : 0/0
  1975 ;;		Unchanged: 0/0
  1976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1977 ;;      Params:         0       0       0       0       0       0       0       0       0
  1978 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1979 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1980 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1981 ;;Total ram usage:        8 bytes
  1982 ;; Hardware stack levels used:    1
  1983 ;; Hardware stack levels required when called:   11
  1984 ;; This function calls:
  1985 ;;		_D_UART_Write
  1986 ;;		_commandAndMessage
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text10
  1993  00108C                     __ptext10:
  1994                           	opt stack 0
  1995  00108C                     _C_DOOR_SendStates:
  1996                           	opt stack 19
  1997                           
  1998                           ;DOOR_Controller.c: 107: uint8_t d;
  1999                           ;DOOR_Controller.c: 108: for (d = 0; d < 5; d++) {
  2000                           
  2001                           ;incstack = 0
  2002  00108C  0E00               	movlw	0
  2003  00108E  0100               	movlb	0	; () banked
  2004  001090  6FC1               	movwf	C_DOOR_SendStates@d& (0+255),b
  2005  001092                     l1681:
  2006                           
  2007                           ; BSR set to: 0
  2008  001092  0E04               	movlw	4
  2009  001094  65C1               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  2010  001096  D001               	goto	l44
  2011  001098  0012               	return	
  2012  00109A                     l44:
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;DOOR_Controller.c: 109: if (doors[d].was_open != doors[d].is_open) {
  2016                           
  2017                           ; BSR set to: 0
  2018  00109A  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2019  00109C  0D0A               	mullw	10
  2020  00109E  0E06               	movlw	6
  2021  0010A0  26F3               	addwf	prodl,f,c
  2022  0010A2  0E00               	movlw	0
  2023  0010A4  22F4               	addwfc	prodh,f,c
  2024  0010A6  0E60               	movlw	low _doors
  2025  0010A8  24F3               	addwf	prodl,w,c
  2026  0010AA  6ED9               	movwf	fsr2l,c
  2027  0010AC  0E00               	movlw	high _doors
  2028  0010AE  20F4               	addwfc	prodh,w,c
  2029  0010B0  6EDA               	movwf	fsr2h,c
  2030  0010B2  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2031  0010B4  0D0A               	mullw	10
  2032  0010B6  0E05               	movlw	5
  2033  0010B8  26F3               	addwf	prodl,f,c
  2034  0010BA  0E00               	movlw	0
  2035  0010BC  22F4               	addwfc	prodh,f,c
  2036  0010BE  0E60               	movlw	low _doors
  2037  0010C0  24F3               	addwf	prodl,w,c
  2038  0010C2  6EE1               	movwf	fsr1l,c
  2039  0010C4  0E00               	movlw	high _doors
  2040  0010C6  20F4               	addwfc	prodh,w,c
  2041  0010C8  6EE2               	movwf	fsr1h,c
  2042  0010CA  50DE               	movf	postinc2,w,c
  2043  0010CC  18E6               	xorwf	postinc1,w,c
  2044  0010CE  B4D8               	btfsc	status,2,c
  2045  0010D0  D03F               	goto	l46
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;DOOR_Controller.c: 111: char com[3];
  2049                           ;DOOR_Controller.c: 112: char mes[2];
  2050                           ;DOOR_Controller.c: 113: commandAndMessage(doors[d], com, mes);
  2051  0010D2  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2052  0010D4  0D0A               	mullw	10
  2053  0010D6  0E60               	movlw	low _doors
  2054  0010D8  24F3               	addwf	prodl,w,c
  2055  0010DA  6ED9               	movwf	fsr2l,c
  2056  0010DC  0E00               	movlw	high _doors
  2057  0010DE  20F4               	addwfc	prodh,w,c
  2058  0010E0  6EDA               	movwf	fsr2h,c
  2059  0010E2  EE00  F0A3         	lfsr	0,commandAndMessage@door
  2060  0010E6  0E09               	movlw	9
  2061  0010E8                     u1181:
  2062  0010E8  CFDB FFEB          	movff	plusw2,plusw0
  2063  0010EC  06E8               	decf	wreg,f,c
  2064  0010EE  E2FC               	bc	u1181
  2065  0010F0  0EBC               	movlw	low C_DOOR_SendStates@com
  2066  0010F2  6FAD               	movwf	commandAndMessage@com& (0+255),b
  2067  0010F4  0E00               	movlw	high C_DOOR_SendStates@com
  2068  0010F6  6FAE               	movwf	(commandAndMessage@com+1)& (0+255),b
  2069  0010F8  0EBF               	movlw	low C_DOOR_SendStates@mes
  2070  0010FA  6FAF               	movwf	commandAndMessage@mes& (0+255),b
  2071  0010FC  0E00               	movlw	high C_DOOR_SendStates@mes
  2072  0010FE  6FB0               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2073  001100  EC93  F009         	call	_commandAndMessage	;wreg free
  2074                           
  2075                           ;DOOR_Controller.c: 116: D_UART_Write(com, mes);
  2076  001104  0EBC               	movlw	low C_DOOR_SendStates@com
  2077  001106  0100               	movlb	0	; () banked
  2078  001108  6FB5               	movwf	D_UART_Write@command& (0+255),b
  2079  00110A  0E00               	movlw	high C_DOOR_SendStates@com
  2080  00110C  6FB6               	movwf	(D_UART_Write@command+1)& (0+255),b
  2081  00110E  0EBF               	movlw	low C_DOOR_SendStates@mes
  2082  001110  6FB7               	movwf	D_UART_Write@data& (0+255),b
  2083  001112  0E00               	movlw	high C_DOOR_SendStates@mes
  2084  001114  6FB8               	movwf	(D_UART_Write@data+1)& (0+255),b
  2085  001116  EC6F  F007         	call	_D_UART_Write	;wreg free
  2086                           
  2087                           ;DOOR_Controller.c: 118: doors[d].was_open = doors[d].is_open;
  2088  00111A  0100               	movlb	0	; () banked
  2089  00111C  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2090  00111E  0D0A               	mullw	10
  2091  001120  0E06               	movlw	6
  2092  001122  26F3               	addwf	prodl,f,c
  2093  001124  0E00               	movlw	0
  2094  001126  22F4               	addwfc	prodh,f,c
  2095  001128  0E60               	movlw	low _doors
  2096  00112A  24F3               	addwf	prodl,w,c
  2097  00112C  6ED9               	movwf	fsr2l,c
  2098  00112E  0E00               	movlw	high _doors
  2099  001130  20F4               	addwfc	prodh,w,c
  2100  001132  6EDA               	movwf	fsr2h,c
  2101  001134  51C1               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2102  001136  0D0A               	mullw	10
  2103  001138  0E05               	movlw	5
  2104  00113A  26F3               	addwf	prodl,f,c
  2105  00113C  0E00               	movlw	0
  2106  00113E  22F4               	addwfc	prodh,f,c
  2107  001140  0E60               	movlw	low _doors
  2108  001142  24F3               	addwf	prodl,w,c
  2109  001144  6EE1               	movwf	fsr1l,c
  2110  001146  0E00               	movlw	high _doors
  2111  001148  20F4               	addwfc	prodh,w,c
  2112  00114A  6EE2               	movwf	fsr1h,c
  2113  00114C  CFDF FFE7          	movff	indf2,indf1
  2114  001150                     l46:
  2115                           
  2116                           ; BSR set to: 0
  2117                           
  2118                           ; BSR set to: 0
  2119  001150  2BC1               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2120  001152  D79F               	goto	l1681
  2121  001154                     __end_of_C_DOOR_SendStates:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           prodh	equ	0xFF4
  2128                           prodl	equ	0xFF3
  2129                           intcon	equ	0xFF2
  2130                           intcon2	equ	0xFF1
  2131                           postinc0	equ	0xFEE
  2132                           plusw0	equ	0xFEB
  2133                           wreg	equ	0xFE8
  2134                           indf1	equ	0xFE7
  2135                           postinc1	equ	0xFE6
  2136                           postdec1	equ	0xFE5
  2137                           fsr1h	equ	0xFE2
  2138                           fsr1l	equ	0xFE1
  2139                           indf2	equ	0xFDF
  2140                           postinc2	equ	0xFDE
  2141                           plusw2	equ	0xFDB
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _commandAndMessage *****************
  2147 ;; Defined at:
  2148 ;;		line 26 in file "Controllers/DOOR_Controller.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  door           10    0[BANK0 ] struct .
  2151 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2152 ;;		 -> C_DOOR_SendStates@com(3), 
  2153 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2154 ;;		 -> C_DOOR_SendStates@mes(2), 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;		None
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2166 ;;      Params:         0      14       0       0       0       0       0       0       0
  2167 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2169 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2170 ;;Total ram usage:       14 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    7
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_C_DOOR_SendStates
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text11
  2181  001326                     __ptext11:
  2182                           	opt stack 0
  2183  001326                     _commandAndMessage:
  2184                           	opt stack 22
  2185                           
  2186                           ;DOOR_Controller.c: 28: com[0] = 'P';
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;incstack = 0
  2190  001326  C0AD  FFD9         	movff	commandAndMessage@com,fsr2l
  2191  00132A  C0AE  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2192  00132E  0E50               	movlw	80
  2193  001330  6EDF               	movwf	indf2,c
  2194                           
  2195                           ;DOOR_Controller.c: 29: com[1] = door.id + 0x30;
  2196  001332  0100               	movlb	0	; () banked
  2197  001334  EE20 F001          	lfsr	2,1
  2198  001338  51AD               	movf	commandAndMessage@com& (0+255),w,b
  2199  00133A  26D9               	addwf	fsr2l,f,c
  2200  00133C  51AE               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2201  00133E  22DA               	addwfc	fsr2h,f,c
  2202  001340  51A3               	movf	commandAndMessage@door& (0+255),w,b
  2203  001342  0F30               	addlw	48
  2204  001344  6EDF               	movwf	indf2,c
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;DOOR_Controller.c: 30: com[2] = '\0';
  2208  001346  EE20 F002          	lfsr	2,2
  2209  00134A  51AD               	movf	commandAndMessage@com& (0+255),w,b
  2210  00134C  26D9               	addwf	fsr2l,f,c
  2211  00134E  51AE               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2212  001350  22DA               	addwfc	fsr2h,f,c
  2213  001352  0E00               	movlw	0
  2214  001354  6EDF               	movwf	indf2,c
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;DOOR_Controller.c: 33: if (door.is_open) {
  2218  001356  51A9               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2219  001358  B4D8               	btfsc	status,2,c
  2220  00135A  D006               	goto	l11
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;DOOR_Controller.c: 34: mes[0] = 'O';
  2224  00135C  C0AF  FFD9         	movff	commandAndMessage@mes,fsr2l
  2225  001360  C0B0  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2226  001364  0E4F               	movlw	79
  2227  001366  D005               	goto	L1
  2228  001368                     l11:
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;DOOR_Controller.c: 36: mes[0] = 'C';
  2232                           
  2233                           ; BSR set to: 0
  2234  001368  C0AF  FFD9         	movff	commandAndMessage@mes,fsr2l
  2235  00136C  C0B0  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2236  001370  0E43               	movlw	67
  2237  001372                     L1:
  2238  001372  6EDF               	movwf	indf2,c
  2239                           
  2240                           ; BSR set to: 0
  2241                           ;DOOR_Controller.c: 37: }
  2242                           ;DOOR_Controller.c: 38: mes[1] = '\0';
  2243                           
  2244                           ; BSR set to: 0
  2245  001374  EE20 F001          	lfsr	2,1
  2246  001378  51AF               	movf	commandAndMessage@mes& (0+255),w,b
  2247  00137A  26D9               	addwf	fsr2l,f,c
  2248  00137C  51B0               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2249  00137E  22DA               	addwfc	fsr2h,f,c
  2250  001380  0E00               	movlw	0
  2251  001382  6EDF               	movwf	indf2,c
  2252                           
  2253                           ; BSR set to: 0
  2254  001384  0012               	return		;funcret
  2255  001386                     __end_of_commandAndMessage:
  2256                           	opt stack 0
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           prodh	equ	0xFF4
  2262                           prodl	equ	0xFF3
  2263                           intcon	equ	0xFF2
  2264                           intcon2	equ	0xFF1
  2265                           postinc0	equ	0xFEE
  2266                           plusw0	equ	0xFEB
  2267                           wreg	equ	0xFE8
  2268                           indf1	equ	0xFE7
  2269                           postinc1	equ	0xFE6
  2270                           postdec1	equ	0xFE5
  2271                           fsr1h	equ	0xFE2
  2272                           fsr1l	equ	0xFE1
  2273                           indf2	equ	0xFDF
  2274                           postinc2	equ	0xFDE
  2275                           plusw2	equ	0xFDB
  2276                           fsr2h	equ	0xFDA
  2277                           fsr2l	equ	0xFD9
  2278                           status	equ	0xFD8
  2279                           
  2280 ;; *************** function _D_UART_Write *****************
  2281 ;; Defined at:
  2282 ;;		line 226 in file "Drivers/UART_Driver.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2285 ;;		 -> STR_15(2), STR_9(2), C_DOOR_SendStates@com(3), 
  2286 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2287 ;;		 -> STR_16(2), STR_10(2), C_DOOR_SendStates@mes(2), 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2299 ;;      Params:         0       4       0       0       0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2301 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2302 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2303 ;;Total ram usage:        5 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:   10
  2306 ;; This function calls:
  2307 ;;		_printf
  2308 ;; This function is called by:
  2309 ;;		_C_DOOR_SendStates
  2310 ;;		_main
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text12
  2315  000EDE                     __ptext12:
  2316                           	opt stack 0
  2317  000EDE                     _D_UART_Write:
  2318                           	opt stack 20
  2319                           
  2320                           ;UART_Driver.c: 227: printf(startCharacter);
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;incstack = 0
  2324  000EDE  C041  F0AA         	movff	_startCharacter,printf@f
  2325  000EE2  C042  F0AB         	movff	_startCharacter+1,printf@f+1
  2326  000EE6  0100               	movlb	0	; () banked
  2327  000EE8  51AA               	movf	printf@f& (0+255),w,b
  2328  000EEA  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2329  000EEC  A4D8               	btfss	status,2,c
  2330  000EEE  0E00               	movlw	low (__mediumconst shr (0+16))
  2331  000EF0  6FAC               	movwf	(printf@f+2)& (0+255),b
  2332  000EF2  ECA1  F005         	call	_printf	;wreg free
  2333                           
  2334                           ;UART_Driver.c: 229: printf(messageCharacter);
  2335  000EF6  C0C4  F0AA         	movff	_messageCharacter,printf@f
  2336  000EFA  C0C5  F0AB         	movff	_messageCharacter+1,printf@f+1
  2337  000EFE  0100               	movlb	0	; () banked
  2338  000F00  51AA               	movf	printf@f& (0+255),w,b
  2339  000F02  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2340  000F04  A4D8               	btfss	status,2,c
  2341  000F06  0E00               	movlw	low (__mediumconst shr (0+16))
  2342  000F08  6FAC               	movwf	(printf@f+2)& (0+255),b
  2343  000F0A  ECA1  F005         	call	_printf	;wreg free
  2344                           
  2345                           ;UART_Driver.c: 230: printf(deviceName);
  2346  000F0E  C09E  F0AA         	movff	_deviceName,printf@f
  2347  000F12  C09F  F0AB         	movff	_deviceName+1,printf@f+1
  2348  000F16  C0A0  F0AC         	movff	_deviceName+2,printf@f+2
  2349  000F1A  ECA1  F005         	call	_printf	;wreg free
  2350                           
  2351                           ;UART_Driver.c: 232: printf(":");printf(command);
  2352  000F1E  0E35               	movlw	low STR_6
  2353  000F20  0100               	movlb	0	; () banked
  2354  000F22  6FAA               	movwf	printf@f& (0+255),b
  2355  000F24  0E08               	movlw	high STR_6
  2356  000F26  6FAB               	movwf	(printf@f+1)& (0+255),b
  2357  000F28  51AA               	movf	printf@f& (0+255),w,b
  2358  000F2A  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2359  000F2C  A4D8               	btfss	status,2,c
  2360  000F2E  0E00               	movlw	low (__mediumconst shr (0+16))
  2361  000F30  6FAC               	movwf	(printf@f+2)& (0+255),b
  2362  000F32  ECA1  F005         	call	_printf	;wreg free
  2363  000F36  C0B5  F0AA         	movff	D_UART_Write@command,printf@f
  2364  000F3A  C0B6  F0AB         	movff	D_UART_Write@command+1,printf@f+1
  2365  000F3E  0100               	movlb	0	; () banked
  2366  000F40  6BAC               	clrf	(printf@f+2)& (0+255),b
  2367  000F42  51AA               	movf	printf@f& (0+255),w,b
  2368  000F44  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2369  000F46  B4D8               	btfsc	status,2,c
  2370  000F48  D005               	goto	u1011
  2371  000F4A  0E07               	movlw	(high __ramtop+-1)
  2372  000F4C  65B6               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2373  000F4E  D001               	goto	u10111
  2374  000F50  D001               	goto	u1011
  2375  000F52                     u10111:
  2376  000F52  8BAC               	bsf	(printf@f+2)& (0+255),5,b
  2377  000F54                     u1011:
  2378  000F54  ECA1  F005         	call	_printf	;wreg free
  2379                           
  2380                           ;UART_Driver.c: 234: printf(":");printf(data);
  2381  000F58  0E35               	movlw	low STR_6
  2382  000F5A  0100               	movlb	0	; () banked
  2383  000F5C  6FAA               	movwf	printf@f& (0+255),b
  2384  000F5E  0E08               	movlw	high STR_6
  2385  000F60  6FAB               	movwf	(printf@f+1)& (0+255),b
  2386  000F62  51AA               	movf	printf@f& (0+255),w,b
  2387  000F64  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2388  000F66  A4D8               	btfss	status,2,c
  2389  000F68  0E00               	movlw	low (__mediumconst shr (0+16))
  2390  000F6A  6FAC               	movwf	(printf@f+2)& (0+255),b
  2391  000F6C  ECA1  F005         	call	_printf	;wreg free
  2392  000F70  C0B7  F0AA         	movff	D_UART_Write@data,printf@f
  2393  000F74  C0B8  F0AB         	movff	D_UART_Write@data+1,printf@f+1
  2394  000F78  0100               	movlb	0	; () banked
  2395  000F7A  6BAC               	clrf	(printf@f+2)& (0+255),b
  2396  000F7C  51AA               	movf	printf@f& (0+255),w,b
  2397  000F7E  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2398  000F80  B4D8               	btfsc	status,2,c
  2399  000F82  D005               	goto	u1021
  2400  000F84  0E07               	movlw	(high __ramtop+-1)
  2401  000F86  65B8               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2402  000F88  D001               	goto	u10211
  2403  000F8A  D001               	goto	u1021
  2404  000F8C                     u10211:
  2405  000F8C  8BAC               	bsf	(printf@f+2)& (0+255),5,b
  2406  000F8E                     u1021:
  2407  000F8E  ECA1  F005         	call	_printf	;wreg free
  2408                           
  2409                           ;UART_Driver.c: 236: printf(stopCharacter);
  2410  000F92  C03F  F0AA         	movff	_stopCharacter,printf@f
  2411  000F96  C040  F0AB         	movff	_stopCharacter+1,printf@f+1
  2412  000F9A  0100               	movlb	0	; () banked
  2413  000F9C  51AA               	movf	printf@f& (0+255),w,b
  2414  000F9E  11AB               	iorwf	(printf@f+1)& (0+255),w,b
  2415  000FA0  A4D8               	btfss	status,2,c
  2416  000FA2  0E00               	movlw	low (__mediumconst shr (0+16))
  2417  000FA4  6FAC               	movwf	(printf@f+2)& (0+255),b
  2418  000FA6  ECA1  F005         	call	_printf	;wreg free
  2419                           
  2420                           ;UART_Driver.c: 237: _delay((unsigned long)((1)*(16000000/4000.0)));
  2421  000FAA  0E06               	movlw	6
  2422  000FAC  0100               	movlb	0	; () banked
  2423  000FAE  6FB9               	movwf	??_D_UART_Write& (0+255),b
  2424  000FB0  0E30               	movlw	48
  2425  000FB2                     u1547:
  2426  000FB2  2EE8               	decfsz	wreg,f,c
  2427  000FB4  D7FE               	bra	u1547
  2428  000FB6  2FB9               	decfsz	??_D_UART_Write& (0+255),f,b
  2429  000FB8  D7FC               	bra	u1547
  2430  000FBA  F000               	nop	
  2431  000FBC  0012               	return		;funcret
  2432  000FBE                     __end_of_D_UART_Write:
  2433                           	opt stack 0
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           prodh	equ	0xFF4
  2439                           prodl	equ	0xFF3
  2440                           intcon	equ	0xFF2
  2441                           intcon2	equ	0xFF1
  2442                           postinc0	equ	0xFEE
  2443                           plusw0	equ	0xFEB
  2444                           wreg	equ	0xFE8
  2445                           indf1	equ	0xFE7
  2446                           postinc1	equ	0xFE6
  2447                           postdec1	equ	0xFE5
  2448                           fsr1h	equ	0xFE2
  2449                           fsr1l	equ	0xFE1
  2450                           indf2	equ	0xFDF
  2451                           postinc2	equ	0xFDE
  2452                           plusw2	equ	0xFDB
  2453                           fsr2h	equ	0xFDA
  2454                           fsr2l	equ	0xFD9
  2455                           status	equ	0xFD8
  2456                           
  2457 ;; *************** function _printf *****************
  2458 ;; Defined at:
  2459 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2462 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  2463 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  2464 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  2465 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  idx             1   13[BANK0 ] unsigned char 
  2468 ;;  tmpval          4    0        struct .
  2469 ;;  cp              3    0        PTR const unsigned char 
  2470 ;;  val             2   14[BANK0 ] unsigned int 
  2471 ;;  ap              2   11[BANK0 ] PTR void [1]
  2472 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2473 ;;  len             2    0        unsigned int 
  2474 ;;  c               1   17[BANK0 ] char 
  2475 ;;  prec            1   16[BANK0 ] char 
  2476 ;;  flag            1   10[BANK0 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  2    7[BANK0 ] int 
  2479 ;; Registers used:
  2480 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2486 ;;      Params:         0       3       0       0       0       0       0       0       0
  2487 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2488 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2489 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2490 ;;Total ram usage:       11 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    9
  2493 ;; This function calls:
  2494 ;;		___lwdiv
  2495 ;;		_putch
  2496 ;; This function is called by:
  2497 ;;		_D_UART_Write
  2498 ;; This function uses a non-reentrant model
  2499 ;;
  2500                           
  2501                           	psect	text13
  2502  000B42                     __ptext13:
  2503                           	opt stack 0
  2504  000B42                     _printf:
  2505                           	opt stack 20
  2506                           
  2507                           ;doprnt.c: 466: va_list ap;
  2508                           ;doprnt.c: 499: signed char c;
  2509                           ;doprnt.c: 506: signed char prec;
  2510                           ;doprnt.c: 508: unsigned char flag;
  2511                           ;doprnt.c: 523: union {
  2512                           ;doprnt.c: 524: unsigned long vd;
  2513                           ;doprnt.c: 525: double integ;
  2514                           ;doprnt.c: 526: } tmpval;
  2515                           ;doprnt.c: 528: unsigned int val;
  2516                           ;doprnt.c: 529: unsigned len;
  2517                           ;doprnt.c: 530: const char * cp;
  2518                           ;doprnt.c: 533: *ap = __va_start();
  2519                           
  2520                           ;incstack = 0
  2521  000B42  0EAD               	movlw	low (?_printf+3)
  2522  000B44  0100               	movlb	0	; () banked
  2523  000B46  6FAE               	movwf	printf@ap& (0+255),b
  2524  000B48  0E00               	movlw	high (?_printf+3)
  2525  000B4A  6FAF               	movwf	(printf@ap+1)& (0+255),b
  2526                           
  2527                           ;doprnt.c: 536: while(c = *f++) {
  2528  000B4C  D08B               	goto	u890
  2529  000B4E                     
  2530                           ; BSR set to: 0
  2531                           ;doprnt.c: 538: if(c != '%')
  2532                           
  2533                           ; BSR set to: 0
  2534  000B4E  0E25               	movlw	37
  2535  000B50  19B4               	xorwf	printf@c& (0+255),w,b
  2536  000B52  B4D8               	btfsc	status,2,c
  2537  000B54  D004               	goto	l271
  2538                           
  2539                           ; BSR set to: 0
  2540                           ;doprnt.c: 540: {
  2541                           ;doprnt.c: 541: (putch(c) );
  2542  000B56  51B4               	movf	printf@c& (0+255),w,b
  2543  000B58  ECF6  F00A         	call	_putch
  2544                           
  2545                           ;doprnt.c: 542: continue;
  2546  000B5C  D083               	goto	u890
  2547  000B5E                     l271:
  2548                           
  2549                           ;doprnt.c: 543: }
  2550                           ;doprnt.c: 548: flag = 0;
  2551  000B5E  0E00               	movlw	0
  2552  000B60  0100               	movlb	0	; () banked
  2553  000B62  6FAD               	movwf	printf@flag& (0+255),b
  2554                           
  2555                           ;doprnt.c: 635: switch(c = *f++) {
  2556  000B64  D004               	goto	l272
  2557  000B66                     
  2558                           ; BSR set to: 0
  2559                           ;doprnt.c: 809: (putch(c) );
  2560                           
  2561                           ; BSR set to: 0
  2562  000B66  51B4               	movf	printf@c& (0+255),w,b
  2563  000B68  ECF6  F00A         	call	_putch
  2564                           
  2565                           ;doprnt.c: 810: continue;
  2566  000B6C  D07B               	goto	u890
  2567  000B6E                     l272:
  2568  000B6E  C0AA  FFF6         	movff	printf@f,tblptrl
  2569  000B72  C0AB  FFF7         	movff	printf@f+1,tblptrh
  2570  000B76  C0AC  FFF8         	movff	printf@f+2,tblptru
  2571  000B7A  0E01               	movlw	1
  2572  000B7C  0100               	movlb	0	; () banked
  2573  000B7E  27AA               	addwf	printf@f& (0+255),f,b
  2574  000B80  0E00               	movlw	0
  2575  000B82  23AB               	addwfc	(printf@f+1)& (0+255),f,b
  2576  000B84  23AC               	addwfc	(printf@f+2)& (0+255),f,b
  2577  000B86  BAF8               	btfsc	tblptru,5,c
  2578  000B88  D003               	bra	u857
  2579  000B8A  0008               	tblrd		*
  2580  000B8C  50F5               	movf	tablat,w,c
  2581  000B8E  D005               	bra	u850
  2582  000B90                     u857:
  2583  000B90  CFF6 FFE9          	movff	tblptrl,fsr0l
  2584  000B94  CFF7 FFEA          	movff	tblptrh,fsr0h
  2585  000B98  50EF               	movf	indf0,w,c
  2586  000B9A                     u850:
  2587  000B9A  0100               	movlb	0	; () banked
  2588  000B9C  6FB4               	movwf	printf@c& (0+255),b
  2589  000B9E  51B4               	movf	printf@c& (0+255),w,b
  2590                           
  2591                           ; Switch size 1, requested type "space"
  2592                           ; Number of cases is 2, Range of values is 0 to 120
  2593                           ; switch strategies available:
  2594                           ; Name         Instructions Cycles
  2595                           ; simple_byte            7     4 (average)
  2596                           ;	Chosen strategy is simple_byte
  2597  000BA0  0A00               	xorlw	0	; case 0
  2598  000BA2  B4D8               	btfsc	status,2,c
  2599  000BA4  0012               	return	
  2600  000BA6  0A78               	xorlw	120	; case 120
  2601  000BA8  A4D8               	btfss	status,2,c
  2602  000BAA  D7DD               	goto	l277
  2603                           
  2604                           ;doprnt.c: 1273: {
  2605                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2606                           
  2607                           ; BSR set to: 0
  2608  000BAC  C0AE  FFD9         	movff	printf@ap,fsr2l
  2609  000BB0  C0AF  FFDA         	movff	printf@ap+1,fsr2h
  2610  000BB4  CFDE F0B1          	movff	postinc2,printf@val
  2611  000BB8  CFDD F0B2          	movff	postdec2,printf@val+1
  2612  000BBC  0E02               	movlw	2
  2613  000BBE  0100               	movlb	0	; () banked
  2614  000BC0  27AE               	addwf	printf@ap& (0+255),f,b
  2615  000BC2  0E00               	movlw	0
  2616  000BC4  23AF               	addwfc	(printf@ap+1)& (0+255),f,b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;doprnt.c: 1287: }
  2620                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2621  000BC6  0E01               	movlw	1
  2622  000BC8  6FB4               	movwf	printf@c& (0+255),b
  2623  000BCA  D014               	goto	l1523
  2624  000BCC                     
  2625                           ; BSR set to: 0
  2626                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2627                           
  2628                           ; BSR set to: 0
  2629  000BCC  51B4               	movf	printf@c& (0+255),w,b
  2630  000BCE  0D02               	mullw	2
  2631  000BD0  0E01               	movlw	low _hexpowers
  2632  000BD2  24F3               	addwf	prodl,w,c
  2633  000BD4  6EF6               	movwf	tblptrl,c
  2634  000BD6  0E08               	movlw	high _hexpowers
  2635  000BD8  20F4               	addwfc	prodh,w,c
  2636  000BDA  6EF7               	movwf	tblptrh,c
  2637  000BDC                     	if	1	;There are 3 active tblptr bytes
  2638  000BDC  6AF8               	clrf	tblptru,c
  2639  000BDE  0E00               	movlw	low (__mediumconst shr (0+16))
  2640  000BE0  22F8               	addwfc	tblptru,f,c
  2641  000BE2                     	endif
  2642  000BE2  0009               	tblrd		*+
  2643  000BE4  50F5               	movf	tablat,w,c
  2644  000BE6  5DB1               	subwf	printf@val& (0+255),w,b
  2645  000BE8  0009               	tblrd		*+
  2646  000BEA  50F5               	movf	tablat,w,c
  2647  000BEC  59B2               	subwfb	(printf@val+1)& (0+255),w,b
  2648  000BEE  A0D8               	btfss	status,0,c
  2649  000BF0  D005               	goto	u880
  2650                           
  2651                           ; BSR set to: 0
  2652                           
  2653                           ; BSR set to: 0
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1318: break;
  2657  000BF2  2BB4               	incf	printf@c& (0+255),f,b
  2658  000BF4                     l1523:
  2659                           
  2660                           ; BSR set to: 0
  2661  000BF4  0E04               	movlw	4
  2662  000BF6  19B4               	xorwf	printf@c& (0+255),w,b
  2663  000BF8  A4D8               	btfss	status,2,c
  2664  000BFA  D7E8               	goto	l278
  2665  000BFC                     u880:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;doprnt.c: 1422: {
  2669                           ;doprnt.c: 1469: }
  2670                           ;doprnt.c: 1472: prec = c;
  2671  000BFC  C0B4  F0B3         	movff	printf@c,printf@prec
  2672                           
  2673                           ;doprnt.c: 1474: while(prec--) {
  2674  000C00  D02C               	goto	l281
  2675  000C02                     
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 1478: {
  2678                           ;doprnt.c: 1499: {
  2679                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2680                           
  2681                           ; BSR set to: 0
  2682  000C02  C0B1  F0A3         	movff	printf@val,___lwdiv@dividend
  2683  000C06  C0B2  F0A4         	movff	printf@val+1,___lwdiv@dividend+1
  2684  000C0A  51B3               	movf	printf@prec& (0+255),w,b
  2685  000C0C  0D02               	mullw	2
  2686  000C0E  0E01               	movlw	low _hexpowers
  2687  000C10  24F3               	addwf	prodl,w,c
  2688  000C12  6EF6               	movwf	tblptrl,c
  2689  000C14  0E08               	movlw	high _hexpowers
  2690  000C16  20F4               	addwfc	prodh,w,c
  2691  000C18  6EF7               	movwf	tblptrh,c
  2692  000C1A                     	if	1	;There are 3 active tblptr bytes
  2693  000C1A  6AF8               	clrf	tblptru,c
  2694  000C1C  0E00               	movlw	low (__mediumconst shr (0+16))
  2695  000C1E  22F8               	addwfc	tblptru,f,c
  2696  000C20                     	endif
  2697  000C20  0009               	tblrd		*+
  2698  000C22  CFF5 F0A5          	movff	tablat,___lwdiv@divisor
  2699  000C26  000A               	tblrd		*-
  2700  000C28  CFF5 F0A6          	movff	tablat,___lwdiv@divisor+1
  2701  000C2C  EC21  F00A         	call	___lwdiv	;wreg free
  2702  000C30  0100               	movlb	0	; () banked
  2703  000C32  51A3               	movf	?___lwdiv& (0+255),w,b
  2704  000C34  0B0F               	andlw	15
  2705  000C36  6FB0               	movwf	printf@idx& (0+255),b
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2709  000C38  51B0               	movf	printf@idx& (0+255),w,b
  2710  000C3A  0D01               	mullw	1
  2711  000C3C  0E09               	movlw	low STR_17
  2712  000C3E  24F3               	addwf	prodl,w,c
  2713  000C40  6EF6               	movwf	tblptrl,c
  2714  000C42  0E08               	movlw	high STR_17
  2715  000C44  20F4               	addwfc	prodh,w,c
  2716  000C46  6EF7               	movwf	tblptrh,c
  2717  000C48                     	if	1	;There are 3 active tblptr bytes
  2718  000C48  6AF8               	clrf	tblptru,c
  2719  000C4A  0E00               	movlw	low (__mediumconst shr (0+16))
  2720  000C4C  22F8               	addwfc	tblptru,f,c
  2721  000C4E                     	endif
  2722  000C4E  0008               	tblrd		*
  2723  000C50  CFF5 F0B4          	movff	tablat,printf@c
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;doprnt.c: 1508: }
  2727                           ;doprnt.c: 1523: }
  2728                           ;doprnt.c: 1524: (putch(c) );
  2729  000C54  51B4               	movf	printf@c& (0+255),w,b
  2730  000C56  ECF6  F00A         	call	_putch
  2731  000C5A                     l281:
  2732  000C5A  0100               	movlb	0	; () banked
  2733  000C5C  07B3               	decf	printf@prec& (0+255),f,b
  2734  000C5E  29B3               	incf	printf@prec& (0+255),w,b
  2735  000C60  A4D8               	btfss	status,2,c
  2736  000C62  D7CF               	goto	l282
  2737  000C64                     u890:
  2738                           
  2739                           ; BSR set to: 0
  2740                           
  2741                           ; BSR set to: 0
  2742  000C64  C0AA  FFF6         	movff	printf@f,tblptrl
  2743  000C68  C0AB  FFF7         	movff	printf@f+1,tblptrh
  2744  000C6C  C0AC  FFF8         	movff	printf@f+2,tblptru
  2745  000C70  0E01               	movlw	1
  2746  000C72  0100               	movlb	0	; () banked
  2747  000C74  27AA               	addwf	printf@f& (0+255),f,b
  2748  000C76  0E00               	movlw	0
  2749  000C78  23AB               	addwfc	(printf@f+1)& (0+255),f,b
  2750  000C7A  23AC               	addwfc	(printf@f+2)& (0+255),f,b
  2751  000C7C  BAF8               	btfsc	tblptru,5,c
  2752  000C7E  D003               	bra	u907
  2753  000C80  0008               	tblrd		*
  2754  000C82  50F5               	movf	tablat,w,c
  2755  000C84  D005               	bra	u900
  2756  000C86                     u907:
  2757  000C86  CFF6 FFE9          	movff	tblptrl,fsr0l
  2758  000C8A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2759  000C8E  50EF               	movf	indf0,w,c
  2760  000C90                     u900:
  2761  000C90  0100               	movlb	0	; () banked
  2762  000C92  6FB4               	movwf	printf@c& (0+255),b
  2763  000C94  51B4               	movf	printf@c& (0+255),w,b
  2764  000C96  B4D8               	btfsc	status,2,c
  2765  000C98  0012               	return	
  2766  000C9A  D759               	goto	l270
  2767  000C9C                     __end_of_printf:
  2768                           	opt stack 0
  2769                           tblptru	equ	0xFF8
  2770                           tblptrh	equ	0xFF7
  2771                           tblptrl	equ	0xFF6
  2772                           tablat	equ	0xFF5
  2773                           prodh	equ	0xFF4
  2774                           prodl	equ	0xFF3
  2775                           intcon	equ	0xFF2
  2776                           intcon2	equ	0xFF1
  2777                           indf0	equ	0xFEF
  2778                           postinc0	equ	0xFEE
  2779                           plusw0	equ	0xFEB
  2780                           fsr0h	equ	0xFEA
  2781                           fsr0l	equ	0xFE9
  2782                           wreg	equ	0xFE8
  2783                           indf1	equ	0xFE7
  2784                           postinc1	equ	0xFE6
  2785                           postdec1	equ	0xFE5
  2786                           fsr1h	equ	0xFE2
  2787                           fsr1l	equ	0xFE1
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           plusw2	equ	0xFDB
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _putch *****************
  2797 ;; Defined at:
  2798 ;;		line 263 in file "Drivers/UART_Driver.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  data            1    wreg     unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  data            1    1[BANK0 ] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2812 ;;      Params:         0       0       0       0       0       0       0       0       0
  2813 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2815 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2816 ;;Total ram usage:        1 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    8
  2819 ;; This function calls:
  2820 ;;		_writeByte
  2821 ;; This function is called by:
  2822 ;;		_printf
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text14
  2827  0015EC                     __ptext14:
  2828                           	opt stack 0
  2829  0015EC                     _putch:
  2830                           	opt stack 20
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;incstack = 0
  2834                           ;putch@data stored from wreg
  2835  0015EC  0100               	movlb	0	; () banked
  2836  0015EE  6FA4               	movwf	putch@data& (0+255),b
  2837                           
  2838                           ;UART_Driver.c: 264: writeByte(data);
  2839  0015F0  0100               	movlb	0	; () banked
  2840  0015F2  51A4               	movf	putch@data& (0+255),w,b
  2841  0015F4  ECFD  F00A         	call	_writeByte
  2842  0015F8  0012               	return		;funcret
  2843  0015FA                     __end_of_putch:
  2844                           	opt stack 0
  2845                           tblptru	equ	0xFF8
  2846                           tblptrh	equ	0xFF7
  2847                           tblptrl	equ	0xFF6
  2848                           tablat	equ	0xFF5
  2849                           prodh	equ	0xFF4
  2850                           prodl	equ	0xFF3
  2851                           intcon	equ	0xFF2
  2852                           intcon2	equ	0xFF1
  2853                           indf0	equ	0xFEF
  2854                           postinc0	equ	0xFEE
  2855                           plusw0	equ	0xFEB
  2856                           fsr0h	equ	0xFEA
  2857                           fsr0l	equ	0xFE9
  2858                           wreg	equ	0xFE8
  2859                           indf1	equ	0xFE7
  2860                           postinc1	equ	0xFE6
  2861                           postdec1	equ	0xFE5
  2862                           fsr1h	equ	0xFE2
  2863                           fsr1l	equ	0xFE1
  2864                           indf2	equ	0xFDF
  2865                           postinc2	equ	0xFDE
  2866                           postdec2	equ	0xFDD
  2867                           plusw2	equ	0xFDB
  2868                           fsr2h	equ	0xFDA
  2869                           fsr2l	equ	0xFD9
  2870                           status	equ	0xFD8
  2871                           
  2872 ;; *************** function _writeByte *****************
  2873 ;; Defined at:
  2874 ;;		line 69 in file "Drivers/UART_Driver.c"
  2875 ;; Parameters:    Size  Location     Type
  2876 ;;  data            1    wreg     unsigned char 
  2877 ;; Auto vars:     Size  Location     Type
  2878 ;;  data            1    0[BANK0 ] unsigned char 
  2879 ;; Return value:  Size  Location     Type
  2880 ;;                  1    wreg      void 
  2881 ;; Registers used:
  2882 ;;		wreg
  2883 ;; Tracked objects:
  2884 ;;		On entry : 0/0
  2885 ;;		On exit  : 0/0
  2886 ;;		Unchanged: 0/0
  2887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2888 ;;      Params:         0       0       0       0       0       0       0       0       0
  2889 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2890 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2891 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2892 ;;Total ram usage:        1 bytes
  2893 ;; Hardware stack levels used:    1
  2894 ;; Hardware stack levels required when called:    7
  2895 ;; This function calls:
  2896 ;;		Nothing
  2897 ;; This function is called by:
  2898 ;;		_putch
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text15
  2903  0015FA                     __ptext15:
  2904                           	opt stack 0
  2905  0015FA                     _writeByte:
  2906                           	opt stack 20
  2907                           
  2908                           ;incstack = 0
  2909                           ;writeByte@data stored from wreg
  2910  0015FA  0100               	movlb	0	; () banked
  2911  0015FC  6FA3               	movwf	writeByte@data& (0+255),b
  2912  0015FE                     
  2913                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2914  0015FE  A2AC               	btfss	4012,1,c	;volatile
  2915  001600  D7FE               	goto	l1437
  2916                           
  2917                           ;UART_Driver.c: 71: TXREG = data;
  2918  001602  C0A3  FFAD         	movff	writeByte@data,4013	;volatile
  2919  001606  0012               	return		;funcret
  2920  001608                     __end_of_writeByte:
  2921                           	opt stack 0
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           intcon	equ	0xFF2
  2929                           intcon2	equ	0xFF1
  2930                           indf0	equ	0xFEF
  2931                           postinc0	equ	0xFEE
  2932                           plusw0	equ	0xFEB
  2933                           fsr0h	equ	0xFEA
  2934                           fsr0l	equ	0xFE9
  2935                           wreg	equ	0xFE8
  2936                           indf1	equ	0xFE7
  2937                           postinc1	equ	0xFE6
  2938                           postdec1	equ	0xFE5
  2939                           fsr1h	equ	0xFE2
  2940                           fsr1l	equ	0xFE1
  2941                           indf2	equ	0xFDF
  2942                           postinc2	equ	0xFDE
  2943                           postdec2	equ	0xFDD
  2944                           plusw2	equ	0xFDB
  2945                           fsr2h	equ	0xFDA
  2946                           fsr2l	equ	0xFD9
  2947                           status	equ	0xFD8
  2948                           
  2949 ;; *************** function ___lwdiv *****************
  2950 ;; Defined at:
  2951 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2952 ;; Parameters:    Size  Location     Type
  2953 ;;  dividend        2    0[BANK0 ] unsigned int 
  2954 ;;  divisor         2    2[BANK0 ] unsigned int 
  2955 ;; Auto vars:     Size  Location     Type
  2956 ;;  quotient        2    4[BANK0 ] unsigned int 
  2957 ;;  counter         1    6[BANK0 ] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  2    0[BANK0 ] unsigned int 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2967 ;;      Params:         0       4       0       0       0       0       0       0       0
  2968 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2970 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2971 ;;Total ram usage:        7 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    7
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_printf
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text16
  2982  001442                     __ptext16:
  2983                           	opt stack 0
  2984  001442                     ___lwdiv:
  2985                           	opt stack 21
  2986                           
  2987                           ;incstack = 0
  2988  001442  0E00               	movlw	0
  2989  001444  0100               	movlb	0	; () banked
  2990  001446  6FA8               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2991  001448  0E00               	movlw	0
  2992  00144A  6FA7               	movwf	___lwdiv@quotient& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995  00144C  51A5               	movf	___lwdiv@divisor& (0+255),w,b
  2996  00144E  11A6               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2997  001450  B4D8               	btfsc	status,2,c
  2998  001452  D01C               	goto	l694
  2999                           
  3000                           ; BSR set to: 0
  3001  001454  0E01               	movlw	1
  3002  001456  6FA9               	movwf	___lwdiv@counter& (0+255),b
  3003  001458  D004               	goto	l689
  3004  00145A                     
  3005                           ; BSR set to: 0
  3006                           
  3007                           ; BSR set to: 0
  3008  00145A  90D8               	bcf	status,0,c
  3009  00145C  37A5               	rlcf	___lwdiv@divisor& (0+255),f,b
  3010  00145E  37A6               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3011  001460  2BA9               	incf	___lwdiv@counter& (0+255),f,b
  3012  001462                     l689:
  3013                           
  3014                           ; BSR set to: 0
  3015                           
  3016                           ; BSR set to: 0
  3017  001462  AFA6               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3018  001464  D7FA               	goto	l690
  3019  001466                     u790:
  3020                           
  3021                           ; BSR set to: 0
  3022                           
  3023                           ; BSR set to: 0
  3024                           
  3025                           ; BSR set to: 0
  3026  001466  90D8               	bcf	status,0,c
  3027  001468  37A7               	rlcf	___lwdiv@quotient& (0+255),f,b
  3028  00146A  37A8               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3029                           
  3030                           ; BSR set to: 0
  3031  00146C  51A5               	movf	___lwdiv@divisor& (0+255),w,b
  3032  00146E  5DA3               	subwf	___lwdiv@dividend& (0+255),w,b
  3033  001470  51A6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3034  001472  59A4               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3035  001474  A0D8               	btfss	status,0,c
  3036  001476  D005               	goto	l693
  3037                           
  3038                           ; BSR set to: 0
  3039  001478  51A5               	movf	___lwdiv@divisor& (0+255),w,b
  3040  00147A  5FA3               	subwf	___lwdiv@dividend& (0+255),f,b
  3041  00147C  51A6               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3042  00147E  5BA4               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3043                           
  3044                           ; BSR set to: 0
  3045  001480  81A7               	bsf	___lwdiv@quotient& (0+255),0,b
  3046  001482                     l693:
  3047                           
  3048                           ; BSR set to: 0
  3049                           
  3050                           ; BSR set to: 0
  3051  001482  90D8               	bcf	status,0,c
  3052  001484  33A6               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3053  001486  33A5               	rrcf	___lwdiv@divisor& (0+255),f,b
  3054                           
  3055                           ; BSR set to: 0
  3056  001488  2FA9               	decfsz	___lwdiv@counter& (0+255),f,b
  3057  00148A  D7ED               	goto	u790
  3058  00148C                     l694:
  3059                           
  3060                           ; BSR set to: 0
  3061                           
  3062                           ; BSR set to: 0
  3063  00148C  C0A7  F0A3         	movff	___lwdiv@quotient,?___lwdiv
  3064  001490  C0A8  F0A4         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3065                           
  3066                           ; BSR set to: 0
  3067  001494  0012               	return		;funcret
  3068  001496                     __end_of___lwdiv:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           tblptrh	equ	0xFF7
  3072                           tblptrl	equ	0xFF6
  3073                           tablat	equ	0xFF5
  3074                           prodh	equ	0xFF4
  3075                           prodl	equ	0xFF3
  3076                           intcon	equ	0xFF2
  3077                           intcon2	equ	0xFF1
  3078                           indf0	equ	0xFEF
  3079                           postinc0	equ	0xFEE
  3080                           plusw0	equ	0xFEB
  3081                           fsr0h	equ	0xFEA
  3082                           fsr0l	equ	0xFE9
  3083                           wreg	equ	0xFE8
  3084                           indf1	equ	0xFE7
  3085                           postinc1	equ	0xFE6
  3086                           postdec1	equ	0xFE5
  3087                           fsr1h	equ	0xFE2
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           plusw2	equ	0xFDB
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _C_DOOR_ReadSensors *****************
  3098 ;; Defined at:
  3099 ;;		line 99 in file "Controllers/DOOR_Controller.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;		None
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  d               1    4[BANK0 ] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      void 
  3106 ;; Registers used:
  3107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3113 ;;      Params:         0       0       0       0       0       0       0       0       0
  3114 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3115 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3116 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3117 ;;Total ram usage:        5 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    7
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text17
  3128  0012A0                     __ptext17:
  3129                           	opt stack 0
  3130  0012A0                     _C_DOOR_ReadSensors:
  3131                           	opt stack 23
  3132                           
  3133                           ;DOOR_Controller.c: 100: uint8_t d;
  3134                           ;DOOR_Controller.c: 101: for (d = 0; d < 5; d++) {
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;incstack = 0
  3138  0012A0  0E00               	movlw	0
  3139  0012A2  0100               	movlb	0	; () banked
  3140  0012A4  6FA7               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3141  0012A6                     l1669:
  3142                           
  3143                           ; BSR set to: 0
  3144  0012A6  0E04               	movlw	4
  3145  0012A8  65A7               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  3146  0012AA  D001               	goto	l39
  3147  0012AC  0012               	return	
  3148  0012AE                     l39:
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;DOOR_Controller.c: 102: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pi
      +                          n) & 0x01;
  3152                           
  3153                           ; BSR set to: 0
  3154  0012AE  51A7               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3155  0012B0  0D0A               	mullw	10
  3156  0012B2  0E06               	movlw	6
  3157  0012B4  26F3               	addwf	prodl,f,c
  3158  0012B6  0E00               	movlw	0
  3159  0012B8  22F4               	addwfc	prodh,f,c
  3160  0012BA  0E60               	movlw	low _doors
  3161  0012BC  24F3               	addwf	prodl,w,c
  3162  0012BE  6ED9               	movwf	fsr2l,c
  3163  0012C0  0E00               	movlw	high _doors
  3164  0012C2  20F4               	addwfc	prodh,w,c
  3165  0012C4  6EDA               	movwf	fsr2h,c
  3166  0012C6  51A7               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3167  0012C8  0D0A               	mullw	10
  3168  0012CA  0E09               	movlw	9
  3169  0012CC  26F3               	addwf	prodl,f,c
  3170  0012CE  0E00               	movlw	0
  3171  0012D0  22F4               	addwfc	prodh,f,c
  3172  0012D2  0E60               	movlw	low _doors
  3173  0012D4  24F3               	addwf	prodl,w,c
  3174  0012D6  6EE1               	movwf	fsr1l,c
  3175  0012D8  0E00               	movlw	high _doors
  3176  0012DA  20F4               	addwfc	prodh,w,c
  3177  0012DC  6EE2               	movwf	fsr1h,c
  3178  0012DE  50E7               	movf	indf1,w,c
  3179  0012E0  6FA3               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3180  0012E2  51A7               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3181  0012E4  0D0A               	mullw	10
  3182  0012E6  0E07               	movlw	7
  3183  0012E8  26F3               	addwf	prodl,f,c
  3184  0012EA  0E00               	movlw	0
  3185  0012EC  22F4               	addwfc	prodh,f,c
  3186  0012EE  0E60               	movlw	low _doors
  3187  0012F0  24F3               	addwf	prodl,w,c
  3188  0012F2  6EE1               	movwf	fsr1l,c
  3189  0012F4  0E00               	movlw	high _doors
  3190  0012F6  20F4               	addwfc	prodh,w,c
  3191  0012F8  6EE2               	movwf	fsr1h,c
  3192  0012FA  CFE6 F0A4          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3193  0012FE  CFE5 F0A5          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3194  001302  C0A4  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3195  001306  C0A5  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3196  00130A  50E7               	movf	indf1,w,c
  3197  00130C  6FA6               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3198  00130E  2BA3               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3199  001310  D002               	goto	u1144
  3200  001312                     u1145:
  3201  001312  90D8               	bcf	status,0,c
  3202  001314  33A6               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3203  001316                     u1144:
  3204  001316  2FA3               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3205  001318  D7FC               	goto	u1145
  3206  00131A  0100               	movlb	0	; () banked
  3207  00131C  51A6               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3208  00131E  0B01               	andlw	1
  3209  001320  6EDF               	movwf	indf2,c
  3210                           
  3211                           ; BSR set to: 0
  3212  001322  2BA7               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3213  001324  D7C0               	goto	l1669
  3214  001326                     __end_of_C_DOOR_ReadSensors:
  3215                           	opt stack 0
  3216                           tblptru	equ	0xFF8
  3217                           tblptrh	equ	0xFF7
  3218                           tblptrl	equ	0xFF6
  3219                           tablat	equ	0xFF5
  3220                           prodh	equ	0xFF4
  3221                           prodl	equ	0xFF3
  3222                           intcon	equ	0xFF2
  3223                           intcon2	equ	0xFF1
  3224                           indf0	equ	0xFEF
  3225                           postinc0	equ	0xFEE
  3226                           plusw0	equ	0xFEB
  3227                           fsr0h	equ	0xFEA
  3228                           fsr0l	equ	0xFE9
  3229                           wreg	equ	0xFE8
  3230                           indf1	equ	0xFE7
  3231                           postinc1	equ	0xFE6
  3232                           postdec1	equ	0xFE5
  3233                           fsr1h	equ	0xFE2
  3234                           fsr1l	equ	0xFE1
  3235                           indf2	equ	0xFDF
  3236                           postinc2	equ	0xFDE
  3237                           postdec2	equ	0xFDD
  3238                           plusw2	equ	0xFDB
  3239                           fsr2h	equ	0xFDA
  3240                           fsr2l	equ	0xFD9
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _C_DOOR_LockAll *****************
  3244 ;; Defined at:
  3245 ;;		line 74 in file "Controllers/DOOR_Controller.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr2l, fsr2h
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0
  3260 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3262 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3263 ;;Total ram usage:        0 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:    7
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_main
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text18
  3274  001608                     __ptext18:
  3275                           	opt stack 0
  3276  001608                     _C_DOOR_LockAll:
  3277                           	opt stack 23
  3278                           
  3279                           ;DOOR_Controller.c: 79: *doors[0].lock_port |= 0xC0;
  3280                           
  3281                           ; BSR set to: 0
  3282                           ;incstack = 0
  3283  001608  C062  FFD9         	movff	_doors+2,fsr2l
  3284  00160C  C063  FFDA         	movff	_doors+3,fsr2h
  3285  001610  0EC0               	movlw	192
  3286  001612  12DF               	iorwf	indf2,f,c
  3287  001614  0012               	return		;funcret
  3288  001616                     __end_of_C_DOOR_LockAll:
  3289                           	opt stack 0
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           intcon2	equ	0xFF1
  3298                           indf0	equ	0xFEF
  3299                           postinc0	equ	0xFEE
  3300                           plusw0	equ	0xFEB
  3301                           fsr0h	equ	0xFEA
  3302                           fsr0l	equ	0xFE9
  3303                           wreg	equ	0xFE8
  3304                           indf1	equ	0xFE7
  3305                           postinc1	equ	0xFE6
  3306                           postdec1	equ	0xFE5
  3307                           fsr1h	equ	0xFE2
  3308                           fsr1l	equ	0xFE1
  3309                           indf2	equ	0xFDF
  3310                           postinc2	equ	0xFDE
  3311                           postdec2	equ	0xFDD
  3312                           plusw2	equ	0xFDB
  3313                           fsr2h	equ	0xFDA
  3314                           fsr2l	equ	0xFD9
  3315                           status	equ	0xFD8
  3316                           
  3317 ;; *************** function _C_DOOR_Init *****************
  3318 ;; Defined at:
  3319 ;;		line 44 in file "Controllers/DOOR_Controller.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;  d               1    0[BANK0 ] unsigned char 
  3324 ;; Return value:  Size  Location     Type
  3325 ;;                  1    wreg      void 
  3326 ;; Registers used:
  3327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3333 ;;      Params:         0       0       0       0       0       0       0       0       0
  3334 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3336 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3337 ;;Total ram usage:        1 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    7
  3340 ;; This function calls:
  3341 ;;		Nothing
  3342 ;; This function is called by:
  3343 ;;		_main
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           	psect	text19
  3348  000DE4                     __ptext19:
  3349                           	opt stack 0
  3350  000DE4                     _C_DOOR_Init:
  3351                           	opt stack 23
  3352                           
  3353                           ;DOOR_Controller.c: 46: TRISB &= 0x3F;
  3354                           
  3355                           ;incstack = 0
  3356  000DE4  0E3F               	movlw	63
  3357  000DE6  1693               	andwf	3987,f,c	;volatile
  3358                           
  3359                           ;DOOR_Controller.c: 47: TRISB |= 0x3F;
  3360  000DE8  0E3F               	movlw	63
  3361  000DEA  1293               	iorwf	3987,f,c	;volatile
  3362                           
  3363                           ;DOOR_Controller.c: 50: uint8_t d;
  3364                           ;DOOR_Controller.c: 51: for (d = 0; d < 5; d++) {
  3365  000DEC  0E00               	movlw	0
  3366  000DEE  0100               	movlb	0	; () banked
  3367  000DF0  6FA3               	movwf	C_DOOR_Init@d& (0+255),b
  3368  000DF2                     l1653:
  3369                           
  3370                           ; BSR set to: 0
  3371  000DF2  0E04               	movlw	4
  3372  000DF4  65A3               	cpfsgt	C_DOOR_Init@d& (0+255),b
  3373  000DF6  D001               	goto	l16
  3374  000DF8  0012               	return	
  3375  000DFA                     l16:
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;DOOR_Controller.c: 52: doors[d].id = d;
  3379                           
  3380                           ; BSR set to: 0
  3381  000DFA  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3382  000DFC  0D0A               	mullw	10
  3383  000DFE  0E60               	movlw	low _doors
  3384  000E00  24F3               	addwf	prodl,w,c
  3385  000E02  6ED9               	movwf	fsr2l,c
  3386  000E04  0E00               	movlw	high _doors
  3387  000E06  20F4               	addwfc	prodh,w,c
  3388  000E08  6EDA               	movwf	fsr2h,c
  3389  000E0A  C0A3  FFDF         	movff	C_DOOR_Init@d,indf2
  3390                           
  3391                           ;DOOR_Controller.c: 54: doors[d].locked = 1;
  3392  000E0E  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3393  000E10  0D0A               	mullw	10
  3394  000E12  0E01               	movlw	1
  3395  000E14  26F3               	addwf	prodl,f,c
  3396  000E16  0E00               	movlw	0
  3397  000E18  22F4               	addwfc	prodh,f,c
  3398  000E1A  0E60               	movlw	low _doors
  3399  000E1C  24F3               	addwf	prodl,w,c
  3400  000E1E  6ED9               	movwf	fsr2l,c
  3401  000E20  0E00               	movlw	high _doors
  3402  000E22  20F4               	addwfc	prodh,w,c
  3403  000E24  6EDA               	movwf	fsr2h,c
  3404  000E26  0E01               	movlw	1
  3405  000E28  6EDF               	movwf	indf2,c
  3406                           
  3407                           ;DOOR_Controller.c: 55: doors[d].lock_port = &PORTB;
  3408  000E2A  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3409  000E2C  0D0A               	mullw	10
  3410  000E2E  0E02               	movlw	2
  3411  000E30  26F3               	addwf	prodl,f,c
  3412  000E32  0E00               	movlw	0
  3413  000E34  22F4               	addwfc	prodh,f,c
  3414  000E36  0E60               	movlw	low _doors
  3415  000E38  24F3               	addwf	prodl,w,c
  3416  000E3A  6ED9               	movwf	fsr2l,c
  3417  000E3C  0E00               	movlw	high _doors
  3418  000E3E  20F4               	addwfc	prodh,w,c
  3419  000E40  6EDA               	movwf	fsr2h,c
  3420  000E42  0E81               	movlw	129
  3421  000E44  6EDE               	movwf	postinc2,c
  3422  000E46  0E0F               	movlw	15
  3423  000E48  6EDD               	movwf	postdec2,c
  3424                           
  3425                           ;DOOR_Controller.c: 56: doors[d].lock_pin = 7;
  3426  000E4A  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3427  000E4C  0D0A               	mullw	10
  3428  000E4E  0E04               	movlw	4
  3429  000E50  26F3               	addwf	prodl,f,c
  3430  000E52  0E00               	movlw	0
  3431  000E54  22F4               	addwfc	prodh,f,c
  3432  000E56  0E60               	movlw	low _doors
  3433  000E58  24F3               	addwf	prodl,w,c
  3434  000E5A  6ED9               	movwf	fsr2l,c
  3435  000E5C  0E00               	movlw	high _doors
  3436  000E5E  20F4               	addwfc	prodh,w,c
  3437  000E60  6EDA               	movwf	fsr2h,c
  3438  000E62  0E07               	movlw	7
  3439  000E64  6EDF               	movwf	indf2,c
  3440                           
  3441                           ;DOOR_Controller.c: 58: doors[d].is_open = 0;
  3442  000E66  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3443  000E68  0D0A               	mullw	10
  3444  000E6A  0E06               	movlw	6
  3445  000E6C  26F3               	addwf	prodl,f,c
  3446  000E6E  0E00               	movlw	0
  3447  000E70  22F4               	addwfc	prodh,f,c
  3448  000E72  0E60               	movlw	low _doors
  3449  000E74  24F3               	addwf	prodl,w,c
  3450  000E76  6ED9               	movwf	fsr2l,c
  3451  000E78  0E00               	movlw	high _doors
  3452  000E7A  20F4               	addwfc	prodh,w,c
  3453  000E7C  6EDA               	movwf	fsr2h,c
  3454  000E7E  0E00               	movlw	0
  3455  000E80  6EDF               	movwf	indf2,c
  3456                           
  3457                           ;DOOR_Controller.c: 59: doors[d].was_open = 0;
  3458  000E82  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3459  000E84  0D0A               	mullw	10
  3460  000E86  0E05               	movlw	5
  3461  000E88  26F3               	addwf	prodl,f,c
  3462  000E8A  0E00               	movlw	0
  3463  000E8C  22F4               	addwfc	prodh,f,c
  3464  000E8E  0E60               	movlw	low _doors
  3465  000E90  24F3               	addwf	prodl,w,c
  3466  000E92  6ED9               	movwf	fsr2l,c
  3467  000E94  0E00               	movlw	high _doors
  3468  000E96  20F4               	addwfc	prodh,w,c
  3469  000E98  6EDA               	movwf	fsr2h,c
  3470  000E9A  0E00               	movlw	0
  3471  000E9C  6EDF               	movwf	indf2,c
  3472                           
  3473                           ;DOOR_Controller.c: 60: doors[d].sensor_port = &PORTB;
  3474  000E9E  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3475  000EA0  0D0A               	mullw	10
  3476  000EA2  0E07               	movlw	7
  3477  000EA4  26F3               	addwf	prodl,f,c
  3478  000EA6  0E00               	movlw	0
  3479  000EA8  22F4               	addwfc	prodh,f,c
  3480  000EAA  0E60               	movlw	low _doors
  3481  000EAC  24F3               	addwf	prodl,w,c
  3482  000EAE  6ED9               	movwf	fsr2l,c
  3483  000EB0  0E00               	movlw	high _doors
  3484  000EB2  20F4               	addwfc	prodh,w,c
  3485  000EB4  6EDA               	movwf	fsr2h,c
  3486  000EB6  0E81               	movlw	129
  3487  000EB8  6EDE               	movwf	postinc2,c
  3488  000EBA  0E0F               	movlw	15
  3489  000EBC  6EDD               	movwf	postdec2,c
  3490                           
  3491                           ;DOOR_Controller.c: 61: doors[d].sensor_pin = d;
  3492  000EBE  51A3               	movf	C_DOOR_Init@d& (0+255),w,b
  3493  000EC0  0D0A               	mullw	10
  3494  000EC2  0E09               	movlw	9
  3495  000EC4  26F3               	addwf	prodl,f,c
  3496  000EC6  0E00               	movlw	0
  3497  000EC8  22F4               	addwfc	prodh,f,c
  3498  000ECA  0E60               	movlw	low _doors
  3499  000ECC  24F3               	addwf	prodl,w,c
  3500  000ECE  6ED9               	movwf	fsr2l,c
  3501  000ED0  0E00               	movlw	high _doors
  3502  000ED2  20F4               	addwfc	prodh,w,c
  3503  000ED4  6EDA               	movwf	fsr2h,c
  3504  000ED6  C0A3  FFDF         	movff	C_DOOR_Init@d,indf2
  3505                           
  3506                           ; BSR set to: 0
  3507  000EDA  2BA3               	incf	C_DOOR_Init@d& (0+255),f,b
  3508  000EDC  D78A               	goto	l1653
  3509  000EDE                     __end_of_C_DOOR_Init:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           intcon2	equ	0xFF1
  3519                           indf0	equ	0xFEF
  3520                           postinc0	equ	0xFEE
  3521                           plusw0	equ	0xFEB
  3522                           fsr0h	equ	0xFEA
  3523                           fsr0l	equ	0xFE9
  3524                           wreg	equ	0xFE8
  3525                           indf1	equ	0xFE7
  3526                           postinc1	equ	0xFE6
  3527                           postdec1	equ	0xFE5
  3528                           fsr1h	equ	0xFE2
  3529                           fsr1l	equ	0xFE1
  3530                           indf2	equ	0xFDF
  3531                           postinc2	equ	0xFDE
  3532                           postdec2	equ	0xFDD
  3533                           plusw2	equ	0xFDB
  3534                           fsr2h	equ	0xFDA
  3535                           fsr2l	equ	0xFD9
  3536                           status	equ	0xFD8
  3537                           
  3538 ;; *************** function _LowISR *****************
  3539 ;; Defined at:
  3540 ;;		line 267 in file "Drivers/UART_Driver.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;		None
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;		None
  3545 ;; Return value:  Size  Location     Type
  3546 ;;                  1    wreg      void 
  3547 ;; Registers used:
  3548 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3554 ;;      Params:         0       0       0       0       0       0       0       0       0
  3555 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3556 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3557 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3558 ;;Total ram usage:       21 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    6
  3561 ;; This function calls:
  3562 ;;		_fillDataBuffer
  3563 ;;		_readByte
  3564 ;; This function is called by:
  3565 ;;		Interrupt level 1
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	intcodelo
  3570  000018                     __pintcodelo:
  3571                           	opt stack 0
  3572  000018                     _LowISR:
  3573                           	opt stack 19
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;incstack = 0
  3577  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3578  00001A  CFD8 F028          	movff	status,??_LowISR
  3579  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3580  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3581  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3582  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3583  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3584  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3585  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3586  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3587  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3588  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3589  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3590  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3591  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3592  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3593  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3594  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3595  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3596  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3597  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3598  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3599                           
  3600                           ;UART_Driver.c: 268: if (PIR1bits.RC1IF) {
  3601  00006E  AA9E               	btfss	3998,5,c	;volatile
  3602  000070  D005               	goto	i1l179
  3603                           
  3604                           ;UART_Driver.c: 269: fillDataBuffer(readByte());
  3605  000072  EC16  F00B         	call	_readByte	;wreg free
  3606  000076  EC1C  F004         	call	_fillDataBuffer
  3607                           
  3608                           ;UART_Driver.c: 270: PIR1bits.RC1IF = 0;
  3609  00007A  9A9E               	bcf	3998,5,c	;volatile
  3610  00007C                     i1l179:
  3611  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3612  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3613  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3614  000088  C039  F044         	movff	??_LowISR+17,btemp
  3615  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3616  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3617  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3618  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3619  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3620  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3621  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3622  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3623  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3624  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3625  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3626  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3627  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3628  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3629  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3630  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3631  0000CC  C028  FFD8         	movff	??_LowISR,status
  3632  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3633  0000D2  0010               	retfie	
  3634  0000D4                     __end_of_LowISR:
  3635                           	opt stack 0
  3636                           pclatu	equ	0xFFB
  3637                           pclath	equ	0xFFA
  3638                           tblptru	equ	0xFF8
  3639                           tblptrh	equ	0xFF7
  3640                           tblptrl	equ	0xFF6
  3641                           tablat	equ	0xFF5
  3642                           prodh	equ	0xFF4
  3643                           prodl	equ	0xFF3
  3644                           intcon	equ	0xFF2
  3645                           intcon2	equ	0xFF1
  3646                           indf0	equ	0xFEF
  3647                           postinc0	equ	0xFEE
  3648                           plusw0	equ	0xFEB
  3649                           fsr0h	equ	0xFEA
  3650                           fsr0l	equ	0xFE9
  3651                           wreg	equ	0xFE8
  3652                           indf1	equ	0xFE7
  3653                           postinc1	equ	0xFE6
  3654                           postdec1	equ	0xFE5
  3655                           fsr1h	equ	0xFE2
  3656                           fsr1l	equ	0xFE1
  3657                           bsr	equ	0xFE0
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           plusw2	equ	0xFDB
  3662                           fsr2h	equ	0xFDA
  3663                           fsr2l	equ	0xFD9
  3664                           status	equ	0xFD8
  3665                           
  3666 ;; *************** function _readByte *****************
  3667 ;; Defined at:
  3668 ;;		line 74 in file "Drivers/UART_Driver.c"
  3669 ;; Parameters:    Size  Location     Type
  3670 ;;		None
  3671 ;; Auto vars:     Size  Location     Type
  3672 ;;		None
  3673 ;; Return value:  Size  Location     Type
  3674 ;;                  1    wreg      unsigned char 
  3675 ;; Registers used:
  3676 ;;		wreg, status,2
  3677 ;; Tracked objects:
  3678 ;;		On entry : 0/0
  3679 ;;		On exit  : 0/0
  3680 ;;		Unchanged: 0/0
  3681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3682 ;;      Params:         0       0       0       0       0       0       0       0       0
  3683 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3685 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3686 ;;Total ram usage:        0 bytes
  3687 ;; Hardware stack levels used:    1
  3688 ;; Hardware stack levels required when called:    1
  3689 ;; This function calls:
  3690 ;;		Nothing
  3691 ;; This function is called by:
  3692 ;;		_LowISR
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           	psect	text21
  3697  00162C                     __ptext21:
  3698                           	opt stack 0
  3699  00162C                     _readByte:
  3700                           	opt stack 23
  3701                           
  3702                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3703                           
  3704                           ;incstack = 0
  3705  00162C  50AB               	movf	4011,w,c	;volatile
  3706                           
  3707                           ;UART_Driver.c: 77: }
  3708                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3709  00162E  50AB               	movf	4011,w,c	;volatile
  3710                           
  3711                           ;UART_Driver.c: 80: }
  3712                           ;UART_Driver.c: 81: return RCREG;
  3713  001630  50AE               	movf	4014,w,c	;volatile
  3714  001632  0012               	return	
  3715  001634                     __end_of_readByte:
  3716                           	opt stack 0
  3717                           pclatu	equ	0xFFB
  3718                           pclath	equ	0xFFA
  3719                           tblptru	equ	0xFF8
  3720                           tblptrh	equ	0xFF7
  3721                           tblptrl	equ	0xFF6
  3722                           tablat	equ	0xFF5
  3723                           prodh	equ	0xFF4
  3724                           prodl	equ	0xFF3
  3725                           intcon	equ	0xFF2
  3726                           intcon2	equ	0xFF1
  3727                           indf0	equ	0xFEF
  3728                           postinc0	equ	0xFEE
  3729                           plusw0	equ	0xFEB
  3730                           fsr0h	equ	0xFEA
  3731                           fsr0l	equ	0xFE9
  3732                           wreg	equ	0xFE8
  3733                           indf1	equ	0xFE7
  3734                           postinc1	equ	0xFE6
  3735                           postdec1	equ	0xFE5
  3736                           fsr1h	equ	0xFE2
  3737                           fsr1l	equ	0xFE1
  3738                           bsr	equ	0xFE0
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           plusw2	equ	0xFDB
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _fillDataBuffer *****************
  3748 ;; Defined at:
  3749 ;;		line 84 in file "Drivers/UART_Driver.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;  data            1    wreg     unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  data            1   38[COMRAM] unsigned char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0
  3764 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3766 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3767 ;;Total ram usage:        1 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    5
  3770 ;; This function calls:
  3771 ;;		_acknowledge
  3772 ;; This function is called by:
  3773 ;;		_LowISR
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text22
  3778  000838                     __ptext22:
  3779                           	opt stack 0
  3780  000838                     _fillDataBuffer:
  3781                           	opt stack 19
  3782                           
  3783                           ;incstack = 0
  3784                           ;fillDataBuffer@data stored from wreg
  3785  000838  6E27               	movwf	fillDataBuffer@data,c
  3786                           
  3787                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3788  00083A  D0B5               	goto	i1l128
  3789  00083C                     
  3790                           ;UART_Driver.c: 87: if(data == 0x26) {
  3791  00083C  0E26               	movlw	38
  3792  00083E  1827               	xorwf	fillDataBuffer@data,w,c
  3793  000840  A4D8               	btfss	status,2,c
  3794  000842  D010               	goto	i1l130
  3795                           
  3796                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3797  000844  0E00               	movlw	0
  3798  000846  0101               	movlb	1	; () banked
  3799  000848  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3800                           
  3801                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3802  00084A  0E00               	movlw	0
  3803  00084C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3804                           
  3805                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3806  00084E  0E00               	movlw	0
  3807  000850  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3808                           
  3809                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3810  000852  0E00               	movlw	0
  3811  000854  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3812                           
  3813                           ;UART_Driver.c: 92: readReady = 0;
  3814  000856  0E00               	movlw	0
  3815  000858  0100               	movlb	0	; () banked
  3816  00085A  6FA2               	movwf	_readReady& (0+255),b
  3817                           
  3818                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3819  00085C  0E01               	movlw	1
  3820  00085E  0101               	movlb	1	; () banked
  3821  000860  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3822                           
  3823                           ;UART_Driver.c: 94: } else {
  3824  000862  0012               	return	
  3825  000864                     i1l130:
  3826                           
  3827                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3828                           
  3829                           ; BSR set to: 1
  3830  000864  0E00               	movlw	0
  3831  000866  0101               	movlb	1	; () banked
  3832  000868  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3833                           
  3834                           ; BSR set to: 1
  3835                           ;UART_Driver.c: 97: }
  3836                           ;UART_Driver.c: 98: break;
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;UART_Driver.c: 96: return;
  3840  00086A  0012               	return	
  3841  00086C                     
  3842                           ; BSR set to: 1
  3843                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3844                           
  3845                           ; BSR set to: 1
  3846  00086C  0E3A               	movlw	58
  3847  00086E  1827               	xorwf	fillDataBuffer@data,w,c
  3848  000870  A4D8               	btfss	status,2,c
  3849  000872  D00D               	goto	i1l135
  3850                           
  3851                           ; BSR set to: 1
  3852                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3853  000874  0E02               	movlw	2
  3854  000876  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3855                           
  3856                           ; BSR set to: 1
  3857                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3858  000878  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3859  00087A  0D01               	mullw	1
  3860  00087C  0E00               	movlw	low _readBuffer
  3861  00087E  24F3               	addwf	prodl,w,c
  3862  000880  6ED9               	movwf	fsr2l,c
  3863  000882  0E01               	movlw	high _readBuffer
  3864  000884  20F4               	addwfc	prodh,w,c
  3865  000886  6EDA               	movwf	fsr2h,c
  3866  000888  0E00               	movlw	0
  3867  00088A  6EDF               	movwf	indf2,c
  3868                           
  3869                           ;UART_Driver.c: 104: } else {
  3870  00088C  0012               	return	
  3871  00088E                     i1l135:
  3872                           
  3873                           ; BSR set to: 1
  3874                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3875                           
  3876                           ; BSR set to: 1
  3877  00088E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3878  000890  0D01               	mullw	1
  3879  000892  0E00               	movlw	low _readBuffer
  3880  000894  24F3               	addwf	prodl,w,c
  3881  000896  6ED9               	movwf	fsr2l,c
  3882  000898  0E01               	movlw	high _readBuffer
  3883  00089A  20F4               	addwfc	prodh,w,c
  3884  00089C  6EDA               	movwf	fsr2h,c
  3885  00089E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3886                           
  3887                           ; BSR set to: 1
  3888                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3889  0008A2  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3890                           
  3891                           ; BSR set to: 1
  3892                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3893  0008A4  0E0A               	movlw	10
  3894  0008A6  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3895  0008A8  0012               	return	
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3899  0008AA  0E00               	movlw	0
  3900  0008AC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3901                           
  3902                           ; BSR set to: 1
  3903                           ;UART_Driver.c: 109: }
  3904                           ;UART_Driver.c: 110: }
  3905                           ;UART_Driver.c: 111: break;
  3906                           
  3907                           ; BSR set to: 1
  3908  0008AE  0012               	return	
  3909  0008B0                     
  3910                           ; BSR set to: 1
  3911                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3912                           
  3913                           ; BSR set to: 1
  3914  0008B0  0E3A               	movlw	58
  3915  0008B2  1827               	xorwf	fillDataBuffer@data,w,c
  3916  0008B4  A4D8               	btfss	status,2,c
  3917  0008B6  D00D               	goto	i1l139
  3918                           
  3919                           ; BSR set to: 1
  3920                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3921  0008B8  0E03               	movlw	3
  3922  0008BA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3926  0008BC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3927  0008BE  0D01               	mullw	1
  3928  0008C0  0E0B               	movlw	low (_readBuffer+11)
  3929  0008C2  24F3               	addwf	prodl,w,c
  3930  0008C4  6ED9               	movwf	fsr2l,c
  3931  0008C6  0E01               	movlw	high (_readBuffer+11)
  3932  0008C8  20F4               	addwfc	prodh,w,c
  3933  0008CA  6EDA               	movwf	fsr2h,c
  3934  0008CC  0E00               	movlw	0
  3935  0008CE  6EDF               	movwf	indf2,c
  3936                           
  3937                           ;UART_Driver.c: 117: } else {
  3938  0008D0  0012               	return	
  3939  0008D2                     i1l139:
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3943                           
  3944                           ; BSR set to: 1
  3945  0008D2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3946  0008D4  0D01               	mullw	1
  3947  0008D6  0E0B               	movlw	low (_readBuffer+11)
  3948  0008D8  24F3               	addwf	prodl,w,c
  3949  0008DA  6ED9               	movwf	fsr2l,c
  3950  0008DC  0E01               	movlw	high (_readBuffer+11)
  3951  0008DE  20F4               	addwfc	prodh,w,c
  3952  0008E0  6EDA               	movwf	fsr2h,c
  3953  0008E2  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3957  0008E6  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3958                           
  3959                           ; BSR set to: 1
  3960                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3961  0008E8  0E32               	movlw	50
  3962  0008EA  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3963  0008EC  0012               	return	
  3964                           
  3965                           ; BSR set to: 1
  3966                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3967  0008EE  0E00               	movlw	0
  3968  0008F0  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3969                           
  3970                           ; BSR set to: 1
  3971                           ;UART_Driver.c: 122: }
  3972                           ;UART_Driver.c: 123: }
  3973                           ;UART_Driver.c: 124: break;
  3974                           
  3975                           ; BSR set to: 1
  3976  0008F2  0012               	return	
  3977  0008F4                     
  3978                           ; BSR set to: 1
  3979                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3980                           
  3981                           ; BSR set to: 1
  3982  0008F4  0E3A               	movlw	58
  3983  0008F6  1827               	xorwf	fillDataBuffer@data,w,c
  3984  0008F8  A4D8               	btfss	status,2,c
  3985  0008FA  D00D               	goto	i1l143
  3986                           
  3987                           ; BSR set to: 1
  3988                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3989  0008FC  0E04               	movlw	4
  3990  0008FE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3991                           
  3992                           ; BSR set to: 1
  3993                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3994  000900  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3995  000902  0D01               	mullw	1
  3996  000904  0E3E               	movlw	low (_readBuffer+62)
  3997  000906  24F3               	addwf	prodl,w,c
  3998  000908  6ED9               	movwf	fsr2l,c
  3999  00090A  0E01               	movlw	high (_readBuffer+62)
  4000  00090C  20F4               	addwfc	prodh,w,c
  4001  00090E  6EDA               	movwf	fsr2h,c
  4002  000910  0E00               	movlw	0
  4003  000912  6EDF               	movwf	indf2,c
  4004                           
  4005                           ;UART_Driver.c: 130: } else {
  4006  000914  0012               	return	
  4007  000916                     i1l143:
  4008                           
  4009                           ; BSR set to: 1
  4010                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  4011                           
  4012                           ; BSR set to: 1
  4013  000916  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4014  000918  0D01               	mullw	1
  4015  00091A  0E3E               	movlw	low (_readBuffer+62)
  4016  00091C  24F3               	addwf	prodl,w,c
  4017  00091E  6ED9               	movwf	fsr2l,c
  4018  000920  0E01               	movlw	high (_readBuffer+62)
  4019  000922  20F4               	addwfc	prodh,w,c
  4020  000924  6EDA               	movwf	fsr2h,c
  4021  000926  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4022                           
  4023                           ; BSR set to: 1
  4024                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  4025  00092A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  4026                           
  4027                           ; BSR set to: 1
  4028                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  4029  00092C  0E32               	movlw	50
  4030  00092E  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  4031  000930  0012               	return	
  4032                           
  4033                           ; BSR set to: 1
  4034                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  4035  000932  0E00               	movlw	0
  4036  000934  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4037                           
  4038                           ; BSR set to: 1
  4039                           ;UART_Driver.c: 135: }
  4040                           ;UART_Driver.c: 136: }
  4041                           ;UART_Driver.c: 137: break;
  4042                           
  4043                           ; BSR set to: 1
  4044  000936  0012               	return	
  4045  000938                     
  4046                           ; BSR set to: 1
  4047                           ;UART_Driver.c: 140: if (data == 0x3A) {
  4048                           
  4049                           ; BSR set to: 1
  4050  000938  0E3A               	movlw	58
  4051  00093A  1827               	xorwf	fillDataBuffer@data,w,c
  4052  00093C  A4D8               	btfss	status,2,c
  4053  00093E  D00D               	goto	i1l147
  4054                           
  4055                           ; BSR set to: 1
  4056                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  4057  000940  0E05               	movlw	5
  4058  000942  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4059                           
  4060                           ; BSR set to: 1
  4061                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4062  000944  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4063  000946  0D01               	mullw	1
  4064  000948  0E71               	movlw	low (_readBuffer+113)
  4065  00094A  24F3               	addwf	prodl,w,c
  4066  00094C  6ED9               	movwf	fsr2l,c
  4067  00094E  0E01               	movlw	high (_readBuffer+113)
  4068  000950  20F4               	addwfc	prodh,w,c
  4069  000952  6EDA               	movwf	fsr2h,c
  4070  000954  0E00               	movlw	0
  4071  000956  6EDF               	movwf	indf2,c
  4072                           
  4073                           ;UART_Driver.c: 143: } else {
  4074  000958  0012               	return	
  4075  00095A                     i1l147:
  4076                           
  4077                           ; BSR set to: 1
  4078                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4079                           
  4080                           ; BSR set to: 1
  4081  00095A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4082  00095C  0D01               	mullw	1
  4083  00095E  0E71               	movlw	low (_readBuffer+113)
  4084  000960  24F3               	addwf	prodl,w,c
  4085  000962  6ED9               	movwf	fsr2l,c
  4086  000964  0E01               	movlw	high (_readBuffer+113)
  4087  000966  20F4               	addwfc	prodh,w,c
  4088  000968  6EDA               	movwf	fsr2h,c
  4089  00096A  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4090                           
  4091                           ; BSR set to: 1
  4092                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4093  00096E  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4094                           
  4095                           ; BSR set to: 1
  4096                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4097  000970  0E32               	movlw	50
  4098  000972  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4099  000974  0012               	return	
  4100                           
  4101                           ; BSR set to: 1
  4102                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4103  000976  0E00               	movlw	0
  4104  000978  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4105                           
  4106                           ; BSR set to: 1
  4107                           ;UART_Driver.c: 148: }
  4108                           ;UART_Driver.c: 149: }
  4109                           ;UART_Driver.c: 150: break;
  4110                           
  4111                           ; BSR set to: 1
  4112  00097A  0012               	return	
  4113  00097C                     
  4114                           ; BSR set to: 1
  4115                           ;UART_Driver.c: 153: if (data == 0x24) {
  4116                           
  4117                           ; BSR set to: 1
  4118  00097C  0E24               	movlw	36
  4119  00097E  1827               	xorwf	fillDataBuffer@data,w,c
  4120  000980  A4D8               	btfss	status,2,c
  4121  000982  D009               	goto	i1l151
  4122                           
  4123                           ; BSR set to: 1
  4124                           ;UART_Driver.c: 154: acknowledge();
  4125  000984  ECC3  F009         	call	_acknowledge	;wreg free
  4126                           
  4127                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4128  000988  0E00               	movlw	0
  4129  00098A  0101               	movlb	1	; () banked
  4130  00098C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4131                           
  4132                           ; BSR set to: 1
  4133                           ;UART_Driver.c: 156: readReady = 1;
  4134  00098E  0E01               	movlw	1
  4135  000990  0100               	movlb	0	; () banked
  4136  000992  6FA2               	movwf	_readReady& (0+255),b
  4137                           
  4138                           ;UART_Driver.c: 157: } else {
  4139  000994  0012               	return	
  4140  000996                     i1l151:
  4141                           
  4142                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4143                           
  4144                           ; BSR set to: 0
  4145  000996  5027               	movf	fillDataBuffer@data,w,c
  4146  000998  0FD0               	addlw	208
  4147  00099A  0101               	movlb	1	; () banked
  4148  00099C  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4149                           
  4150                           ; BSR set to: 1
  4151                           ;UART_Driver.c: 160: }
  4152                           ;UART_Driver.c: 161: break;
  4153  00099E  0012               	return	
  4154  0009A0                     
  4155                           ; BSR set to: 1
  4156                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4157                           
  4158                           ; BSR set to: 1
  4159  0009A0  0E00               	movlw	0
  4160  0009A2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4161                           
  4162                           ; BSR set to: 1
  4163                           ;UART_Driver.c: 166: }
  4164                           
  4165                           ;UART_Driver.c: 165: break;
  4166  0009A4  0012               	return	
  4167  0009A6                     i1l128:
  4168                           
  4169                           ; BSR set to: 1
  4170  0009A6  0101               	movlb	1	; () banked
  4171  0009A8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4172                           
  4173                           ; Switch size 1, requested type "space"
  4174                           ; Number of cases is 6, Range of values is 0 to 5
  4175                           ; switch strategies available:
  4176                           ; Name         Instructions Cycles
  4177                           ; simple_byte           19    10 (average)
  4178                           ;	Chosen strategy is simple_byte
  4179  0009AA  0A00               	xorlw	0	; case 0
  4180  0009AC  B4D8               	btfsc	status,2,c
  4181  0009AE  D746               	goto	i1l129
  4182  0009B0  0A01               	xorlw	1	; case 1
  4183  0009B2  B4D8               	btfsc	status,2,c
  4184  0009B4  D75B               	goto	i1l134
  4185  0009B6  0A03               	xorlw	3	; case 2
  4186  0009B8  B4D8               	btfsc	status,2,c
  4187  0009BA  D77A               	goto	i1l138
  4188  0009BC  0A01               	xorlw	1	; case 3
  4189  0009BE  B4D8               	btfsc	status,2,c
  4190  0009C0  D799               	goto	i1l142
  4191  0009C2  0A07               	xorlw	7	; case 4
  4192  0009C4  B4D8               	btfsc	status,2,c
  4193  0009C6  D7B8               	goto	i1l146
  4194  0009C8  0A01               	xorlw	1	; case 5
  4195  0009CA  B4D8               	btfsc	status,2,c
  4196  0009CC  D7D7               	goto	i1l150
  4197  0009CE  D7E8               	goto	i1l153
  4198  0009D0                     __end_of_fillDataBuffer:
  4199                           	opt stack 0
  4200                           pclatu	equ	0xFFB
  4201                           pclath	equ	0xFFA
  4202                           tblptru	equ	0xFF8
  4203                           tblptrh	equ	0xFF7
  4204                           tblptrl	equ	0xFF6
  4205                           tablat	equ	0xFF5
  4206                           prodh	equ	0xFF4
  4207                           prodl	equ	0xFF3
  4208                           intcon	equ	0xFF2
  4209                           intcon2	equ	0xFF1
  4210                           indf0	equ	0xFEF
  4211                           postinc0	equ	0xFEE
  4212                           plusw0	equ	0xFEB
  4213                           fsr0h	equ	0xFEA
  4214                           fsr0l	equ	0xFE9
  4215                           wreg	equ	0xFE8
  4216                           indf1	equ	0xFE7
  4217                           postinc1	equ	0xFE6
  4218                           postdec1	equ	0xFE5
  4219                           fsr1h	equ	0xFE2
  4220                           fsr1l	equ	0xFE1
  4221                           bsr	equ	0xFE0
  4222                           indf2	equ	0xFDF
  4223                           postinc2	equ	0xFDE
  4224                           postdec2	equ	0xFDD
  4225                           plusw2	equ	0xFDB
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _acknowledge *****************
  4231 ;; Defined at:
  4232 ;;		line 169 in file "Drivers/UART_Driver.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;		None
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;		None
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0
  4247 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4249 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4250 ;;Total ram usage:        0 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:    4
  4253 ;; This function calls:
  4254 ;;		i1_printf
  4255 ;; This function is called by:
  4256 ;;		_fillDataBuffer
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text23
  4261  001386                     __ptext23:
  4262                           	opt stack 0
  4263  001386                     _acknowledge:
  4264                           	opt stack 19
  4265                           
  4266                           ;UART_Driver.c: 170: printf(startCharacter);
  4267                           
  4268                           ;incstack = 0
  4269  001386  C041  F01A         	movff	_startCharacter,i1printf@f
  4270  00138A  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4271  00138E  501A               	movf	i1printf@f,w,c
  4272  001390  101B               	iorwf	i1printf@f+1,w,c
  4273  001392  A4D8               	btfss	status,2,c
  4274  001394  0E00               	movlw	low (__mediumconst shr (0+16))
  4275  001396  6E1C               	movwf	i1printf@f+2,c
  4276  001398  EC4E  F006         	call	i1_printf	;wreg free
  4277                           
  4278                           ;UART_Driver.c: 172: printf(ackCharacter);
  4279  00139C  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4280  0013A0  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4281  0013A4  501A               	movf	i1printf@f,w,c
  4282  0013A6  101B               	iorwf	i1printf@f+1,w,c
  4283  0013A8  A4D8               	btfss	status,2,c
  4284  0013AA  0E00               	movlw	low (__mediumconst shr (0+16))
  4285  0013AC  6E1C               	movwf	i1printf@f+2,c
  4286  0013AE  EC4E  F006         	call	i1_printf	;wreg free
  4287                           
  4288                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4289  0013B2  0E22               	movlw	low STR_5
  4290  0013B4  6E1A               	movwf	i1printf@f,c
  4291  0013B6  0E08               	movlw	high STR_5
  4292  0013B8  6E1B               	movwf	i1printf@f+1,c
  4293  0013BA  501A               	movf	i1printf@f,w,c
  4294  0013BC  101B               	iorwf	i1printf@f+1,w,c
  4295  0013BE  A4D8               	btfss	status,2,c
  4296  0013C0  0E00               	movlw	low (__mediumconst shr (0+16))
  4297  0013C2  6E1C               	movwf	i1printf@f+2,c
  4298  0013C4  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4299  0013C8  6A1E               	clrf	?i1_printf+4,c
  4300  0013CA  EC4E  F006         	call	i1_printf	;wreg free
  4301                           
  4302                           ;UART_Driver.c: 176: printf(stopCharacter);
  4303  0013CE  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4304  0013D2  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4305  0013D6  501A               	movf	i1printf@f,w,c
  4306  0013D8  101B               	iorwf	i1printf@f+1,w,c
  4307  0013DA  A4D8               	btfss	status,2,c
  4308  0013DC  0E00               	movlw	low (__mediumconst shr (0+16))
  4309  0013DE  6E1C               	movwf	i1printf@f+2,c
  4310  0013E0  EC4E  F006         	call	i1_printf	;wreg free
  4311  0013E4  0012               	return		;funcret
  4312  0013E6                     __end_of_acknowledge:
  4313                           	opt stack 0
  4314                           pclatu	equ	0xFFB
  4315                           pclath	equ	0xFFA
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           intcon2	equ	0xFF1
  4324                           indf0	equ	0xFEF
  4325                           postinc0	equ	0xFEE
  4326                           plusw0	equ	0xFEB
  4327                           fsr0h	equ	0xFEA
  4328                           fsr0l	equ	0xFE9
  4329                           wreg	equ	0xFE8
  4330                           indf1	equ	0xFE7
  4331                           postinc1	equ	0xFE6
  4332                           postdec1	equ	0xFE5
  4333                           fsr1h	equ	0xFE2
  4334                           fsr1l	equ	0xFE1
  4335                           bsr	equ	0xFE0
  4336                           indf2	equ	0xFDF
  4337                           postinc2	equ	0xFDE
  4338                           postdec2	equ	0xFDD
  4339                           plusw2	equ	0xFDB
  4340                           fsr2h	equ	0xFDA
  4341                           fsr2l	equ	0xFD9
  4342                           status	equ	0xFD8
  4343                           
  4344 ;; *************** function i1_printf *****************
  4345 ;; Defined at:
  4346 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4347 ;; Parameters:    Size  Location     Type
  4348 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4349 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  4350 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  4351 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  4352 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  printf          4    0        struct .
  4355 ;;  printf          3    0        PTR const unsigned char 
  4356 ;;  printf          2   34[COMRAM] unsigned int 
  4357 ;;  printf          2   31[COMRAM] PTR void [1]
  4358 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4359 ;;  printf          2    0        unsigned int 
  4360 ;;  printf          1   37[COMRAM] char 
  4361 ;;  printf          1   36[COMRAM] char 
  4362 ;;  printf          1   33[COMRAM] unsigned char 
  4363 ;;  printf          1   30[COMRAM] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  2   25[COMRAM] int 
  4366 ;; Registers used:
  4367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4373 ;;      Params:         5       0       0       0       0       0       0       0       0
  4374 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4375 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4376 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4377 ;;Total ram usage:       13 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    3
  4380 ;; This function calls:
  4381 ;;		i1___lwdiv
  4382 ;;		i1_putch
  4383 ;; This function is called by:
  4384 ;;		_acknowledge
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text24
  4389  000C9C                     __ptext24:
  4390                           	opt stack 0
  4391  000C9C                     i1_printf:
  4392                           	opt stack 19
  4393                           
  4394                           ;doprnt.c: 466: va_list ap;
  4395                           ;doprnt.c: 499: signed char c;
  4396                           ;doprnt.c: 506: signed char prec;
  4397                           ;doprnt.c: 508: unsigned char flag;
  4398                           ;doprnt.c: 523: union {
  4399                           ;doprnt.c: 524: unsigned long vd;
  4400                           ;doprnt.c: 525: double integ;
  4401                           ;doprnt.c: 526: } tmpval;
  4402                           ;doprnt.c: 528: unsigned int val;
  4403                           ;doprnt.c: 529: unsigned len;
  4404                           ;doprnt.c: 530: const char * cp;
  4405                           ;doprnt.c: 533: *ap = __va_start();
  4406                           
  4407                           ;incstack = 0
  4408  000C9C  0E1D               	movlw	low (?i1_printf+3)
  4409  000C9E  6E20               	movwf	i1printf@ap,c
  4410  000CA0  0E00               	movlw	high (?i1_printf+3)
  4411  000CA2  6E21               	movwf	i1printf@ap+1,c
  4412                           
  4413                           ;doprnt.c: 536: while(c = *f++) {
  4414  000CA4  D085               	goto	i1u97_20
  4415  000CA6                     
  4416                           ;doprnt.c: 538: if(c != '%')
  4417  000CA6  0E25               	movlw	37
  4418  000CA8  1826               	xorwf	i1printf@c,w,c
  4419  000CAA  B4D8               	btfsc	status,2,c
  4420  000CAC  D004               	goto	i1l271
  4421                           
  4422                           ;doprnt.c: 540: {
  4423                           ;doprnt.c: 541: (putch(c) );
  4424  000CAE  5026               	movf	i1printf@c,w,c
  4425  000CB0  EC11  F00B         	call	i1_putch
  4426                           
  4427                           ;doprnt.c: 542: continue;
  4428  000CB4  D07D               	goto	i1u97_20
  4429  000CB6                     i1l271:
  4430                           
  4431                           ;doprnt.c: 543: }
  4432                           ;doprnt.c: 548: flag = 0;
  4433  000CB6  0E00               	movlw	0
  4434  000CB8  6E1F               	movwf	i1printf@flag,c
  4435                           
  4436                           ;doprnt.c: 635: switch(c = *f++) {
  4437  000CBA  D004               	goto	i1l272
  4438  000CBC                     
  4439                           ;doprnt.c: 809: (putch(c) );
  4440  000CBC  5026               	movf	i1printf@c,w,c
  4441  000CBE  EC11  F00B         	call	i1_putch
  4442                           
  4443                           ;doprnt.c: 810: continue;
  4444  000CC2  D076               	goto	i1u97_20
  4445  000CC4                     i1l272:
  4446  000CC4  C01A  FFF6         	movff	i1printf@f,tblptrl
  4447  000CC8  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4448  000CCC  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4449  000CD0  0E01               	movlw	1
  4450  000CD2  261A               	addwf	i1printf@f,f,c
  4451  000CD4  0E00               	movlw	0
  4452  000CD6  221B               	addwfc	i1printf@f+1,f,c
  4453  000CD8  221C               	addwfc	i1printf@f+2,f,c
  4454  000CDA  BAF8               	btfsc	tblptru,5,c
  4455  000CDC  D003               	bra	i1u93_27
  4456  000CDE  0008               	tblrd		*
  4457  000CE0  50F5               	movf	tablat,w,c
  4458  000CE2  D005               	bra	i1u93_20
  4459  000CE4                     i1u93_27:
  4460  000CE4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4461  000CE8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4462  000CEC  50EF               	movf	indf0,w,c
  4463  000CEE                     i1u93_20:
  4464  000CEE  6E26               	movwf	i1printf@c,c
  4465  000CF0  5026               	movf	i1printf@c,w,c
  4466                           
  4467                           ; Switch size 1, requested type "space"
  4468                           ; Number of cases is 2, Range of values is 0 to 120
  4469                           ; switch strategies available:
  4470                           ; Name         Instructions Cycles
  4471                           ; simple_byte            7     4 (average)
  4472                           ;	Chosen strategy is simple_byte
  4473  000CF2  0A00               	xorlw	0	; case 0
  4474  000CF4  B4D8               	btfsc	status,2,c
  4475  000CF6  0012               	return	
  4476  000CF8  0A78               	xorlw	120	; case 120
  4477  000CFA  A4D8               	btfss	status,2,c
  4478  000CFC  D7DF               	goto	i1l277
  4479                           
  4480                           ;doprnt.c: 1273: {
  4481                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4482  000CFE  C020  FFD9         	movff	i1printf@ap,fsr2l
  4483  000D02  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4484  000D06  CFDE F023          	movff	postinc2,i1printf@val
  4485  000D0A  CFDD F024          	movff	postdec2,i1printf@val+1
  4486  000D0E  0E02               	movlw	2
  4487  000D10  2620               	addwf	i1printf@ap,f,c
  4488  000D12  0E00               	movlw	0
  4489  000D14  2221               	addwfc	i1printf@ap+1,f,c
  4490                           
  4491                           ;doprnt.c: 1287: }
  4492                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4493  000D16  0E01               	movlw	1
  4494  000D18  6E26               	movwf	i1printf@c,c
  4495  000D1A  D014               	goto	i1l1565
  4496  000D1C                     
  4497                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4498  000D1C  5026               	movf	i1printf@c,w,c
  4499  000D1E  0D02               	mullw	2
  4500  000D20  0E01               	movlw	low _hexpowers
  4501  000D22  24F3               	addwf	prodl,w,c
  4502  000D24  6EF6               	movwf	tblptrl,c
  4503  000D26  0E08               	movlw	high _hexpowers
  4504  000D28  20F4               	addwfc	prodh,w,c
  4505  000D2A  6EF7               	movwf	tblptrh,c
  4506  000D2C                     	if	1	;There are 3 active tblptr bytes
  4507  000D2C  6AF8               	clrf	tblptru,c
  4508  000D2E  0E00               	movlw	low (__mediumconst shr (0+16))
  4509  000D30  22F8               	addwfc	tblptru,f,c
  4510  000D32                     	endif
  4511  000D32  0009               	tblrd		*+
  4512  000D34  50F5               	movf	tablat,w,c
  4513  000D36  5C23               	subwf	i1printf@val,w,c
  4514  000D38  0009               	tblrd		*+
  4515  000D3A  50F5               	movf	tablat,w,c
  4516  000D3C  5824               	subwfb	i1printf@val+1,w,c
  4517  000D3E  A0D8               	btfss	status,0,c
  4518  000D40  D005               	goto	i1u96_20
  4519                           
  4520                           ;doprnt.c: 1318: break;
  4521  000D42  2A26               	incf	i1printf@c,f,c
  4522  000D44                     i1l1565:
  4523  000D44  0E04               	movlw	4
  4524  000D46  1826               	xorwf	i1printf@c,w,c
  4525  000D48  A4D8               	btfss	status,2,c
  4526  000D4A  D7E8               	goto	i1l278
  4527  000D4C                     i1u96_20:
  4528                           
  4529                           ;doprnt.c: 1422: {
  4530                           ;doprnt.c: 1469: }
  4531                           ;doprnt.c: 1472: prec = c;
  4532  000D4C  C026  F025         	movff	i1printf@c,i1printf@prec
  4533                           
  4534                           ;doprnt.c: 1474: while(prec--) {
  4535  000D50  D02B               	goto	i1l281
  4536  000D52                     
  4537                           ;doprnt.c: 1478: {
  4538                           ;doprnt.c: 1499: {
  4539                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4540  000D52  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4541  000D56  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4542  000D5A  5025               	movf	i1printf@prec,w,c
  4543  000D5C  0D02               	mullw	2
  4544  000D5E  0E01               	movlw	low _hexpowers
  4545  000D60  24F3               	addwf	prodl,w,c
  4546  000D62  6EF6               	movwf	tblptrl,c
  4547  000D64  0E08               	movlw	high _hexpowers
  4548  000D66  20F4               	addwfc	prodh,w,c
  4549  000D68  6EF7               	movwf	tblptrh,c
  4550  000D6A                     	if	1	;There are 3 active tblptr bytes
  4551  000D6A  6AF8               	clrf	tblptru,c
  4552  000D6C  0E00               	movlw	low (__mediumconst shr (0+16))
  4553  000D6E  22F8               	addwfc	tblptru,f,c
  4554  000D70                     	endif
  4555  000D70  0009               	tblrd		*+
  4556  000D72  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4557  000D76  000A               	tblrd		*-
  4558  000D78  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4559  000D7C  EC4B  F00A         	call	i1___lwdiv	;wreg free
  4560  000D80  5013               	movf	?i1___lwdiv,w,c
  4561  000D82  0B0F               	andlw	15
  4562  000D84  6E22               	movwf	i1printf@idx,c
  4563                           
  4564                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4565  000D86  5022               	movf	i1printf@idx,w,c
  4566  000D88  0D01               	mullw	1
  4567  000D8A  0E09               	movlw	low STR_17
  4568  000D8C  24F3               	addwf	prodl,w,c
  4569  000D8E  6EF6               	movwf	tblptrl,c
  4570  000D90  0E08               	movlw	high STR_17
  4571  000D92  20F4               	addwfc	prodh,w,c
  4572  000D94  6EF7               	movwf	tblptrh,c
  4573  000D96                     	if	1	;There are 3 active tblptr bytes
  4574  000D96  6AF8               	clrf	tblptru,c
  4575  000D98  0E00               	movlw	low (__mediumconst shr (0+16))
  4576  000D9A  22F8               	addwfc	tblptru,f,c
  4577  000D9C                     	endif
  4578  000D9C  0008               	tblrd		*
  4579  000D9E  CFF5 F026          	movff	tablat,i1printf@c
  4580                           
  4581                           ;doprnt.c: 1508: }
  4582                           ;doprnt.c: 1523: }
  4583                           ;doprnt.c: 1524: (putch(c) );
  4584  000DA2  5026               	movf	i1printf@c,w,c
  4585  000DA4  EC11  F00B         	call	i1_putch
  4586  000DA8                     i1l281:
  4587  000DA8  0625               	decf	i1printf@prec,f,c
  4588  000DAA  2825               	incf	i1printf@prec,w,c
  4589  000DAC  A4D8               	btfss	status,2,c
  4590  000DAE  D7D1               	goto	i1l282
  4591  000DB0                     i1u97_20:
  4592  000DB0  C01A  FFF6         	movff	i1printf@f,tblptrl
  4593  000DB4  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4594  000DB8  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4595  000DBC  0E01               	movlw	1
  4596  000DBE  261A               	addwf	i1printf@f,f,c
  4597  000DC0  0E00               	movlw	0
  4598  000DC2  221B               	addwfc	i1printf@f+1,f,c
  4599  000DC4  221C               	addwfc	i1printf@f+2,f,c
  4600  000DC6  BAF8               	btfsc	tblptru,5,c
  4601  000DC8  D003               	bra	i1u98_27
  4602  000DCA  0008               	tblrd		*
  4603  000DCC  50F5               	movf	tablat,w,c
  4604  000DCE  D005               	bra	i1u98_20
  4605  000DD0                     i1u98_27:
  4606  000DD0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4607  000DD4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4608  000DD8  50EF               	movf	indf0,w,c
  4609  000DDA                     i1u98_20:
  4610  000DDA  6E26               	movwf	i1printf@c,c
  4611  000DDC  5026               	movf	i1printf@c,w,c
  4612  000DDE  B4D8               	btfsc	status,2,c
  4613  000DE0  0012               	return	
  4614  000DE2  D761               	goto	i1l270
  4615  000DE4                     __end_ofi1_printf:
  4616                           	opt stack 0
  4617                           pclatu	equ	0xFFB
  4618                           pclath	equ	0xFFA
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           intcon2	equ	0xFF1
  4627                           indf0	equ	0xFEF
  4628                           postinc0	equ	0xFEE
  4629                           plusw0	equ	0xFEB
  4630                           fsr0h	equ	0xFEA
  4631                           fsr0l	equ	0xFE9
  4632                           wreg	equ	0xFE8
  4633                           indf1	equ	0xFE7
  4634                           postinc1	equ	0xFE6
  4635                           postdec1	equ	0xFE5
  4636                           fsr1h	equ	0xFE2
  4637                           fsr1l	equ	0xFE1
  4638                           bsr	equ	0xFE0
  4639                           indf2	equ	0xFDF
  4640                           postinc2	equ	0xFDE
  4641                           postdec2	equ	0xFDD
  4642                           plusw2	equ	0xFDB
  4643                           fsr2h	equ	0xFDA
  4644                           fsr2l	equ	0xFD9
  4645                           status	equ	0xFD8
  4646                           
  4647 ;; *************** function i1_putch *****************
  4648 ;; Defined at:
  4649 ;;		line 263 in file "Drivers/UART_Driver.c"
  4650 ;; Parameters:    Size  Location     Type
  4651 ;;  data            1    wreg     unsigned char 
  4652 ;; Auto vars:     Size  Location     Type
  4653 ;;  data            1   19[COMRAM] unsigned char 
  4654 ;; Return value:  Size  Location     Type
  4655 ;;                  1    wreg      void 
  4656 ;; Registers used:
  4657 ;;		wreg, status,2, cstack
  4658 ;; Tracked objects:
  4659 ;;		On entry : 0/0
  4660 ;;		On exit  : 0/0
  4661 ;;		Unchanged: 0/0
  4662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4663 ;;      Params:         0       0       0       0       0       0       0       0       0
  4664 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4666 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4667 ;;Total ram usage:        1 bytes
  4668 ;; Hardware stack levels used:    1
  4669 ;; Hardware stack levels required when called:    2
  4670 ;; This function calls:
  4671 ;;		i1_writeByte
  4672 ;; This function is called by:
  4673 ;;		i1_printf
  4674 ;; This function uses a non-reentrant model
  4675 ;;
  4676                           
  4677                           	psect	text25
  4678  001622                     __ptext25:
  4679                           	opt stack 0
  4680  001622                     i1_putch:
  4681                           	opt stack 19
  4682                           
  4683                           ;incstack = 0
  4684                           ;i1putch@data stored from wreg
  4685  001622  6E14               	movwf	i1putch@data,c
  4686                           
  4687                           ;UART_Driver.c: 264: writeByte(data);
  4688  001624  5014               	movf	i1putch@data,w,c
  4689  001626  EC0B  F00B         	call	i1_writeByte
  4690  00162A  0012               	return		;funcret
  4691  00162C                     __end_ofi1_putch:
  4692                           	opt stack 0
  4693                           pclatu	equ	0xFFB
  4694                           pclath	equ	0xFFA
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           intcon	equ	0xFF2
  4702                           intcon2	equ	0xFF1
  4703                           indf0	equ	0xFEF
  4704                           postinc0	equ	0xFEE
  4705                           plusw0	equ	0xFEB
  4706                           fsr0h	equ	0xFEA
  4707                           fsr0l	equ	0xFE9
  4708                           wreg	equ	0xFE8
  4709                           indf1	equ	0xFE7
  4710                           postinc1	equ	0xFE6
  4711                           postdec1	equ	0xFE5
  4712                           fsr1h	equ	0xFE2
  4713                           fsr1l	equ	0xFE1
  4714                           bsr	equ	0xFE0
  4715                           indf2	equ	0xFDF
  4716                           postinc2	equ	0xFDE
  4717                           postdec2	equ	0xFDD
  4718                           plusw2	equ	0xFDB
  4719                           fsr2h	equ	0xFDA
  4720                           fsr2l	equ	0xFD9
  4721                           status	equ	0xFD8
  4722                           
  4723 ;; *************** function i1_writeByte *****************
  4724 ;; Defined at:
  4725 ;;		line 69 in file "Drivers/UART_Driver.c"
  4726 ;; Parameters:    Size  Location     Type
  4727 ;;  data            1    wreg     unsigned char 
  4728 ;; Auto vars:     Size  Location     Type
  4729 ;;  data            1   18[COMRAM] unsigned char 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4739 ;;      Params:         0       0       0       0       0       0       0       0       0
  4740 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4741 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4742 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4743 ;;Total ram usage:        1 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    1
  4746 ;; This function calls:
  4747 ;;		Nothing
  4748 ;; This function is called by:
  4749 ;;		i1_putch
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           	psect	text26
  4754  001616                     __ptext26:
  4755                           	opt stack 0
  4756  001616                     i1_writeByte:
  4757                           	opt stack 19
  4758                           
  4759                           ;incstack = 0
  4760                           ;i1writeByte@data stored from wreg
  4761  001616  6E13               	movwf	i1writeByte@data,c
  4762  001618                     
  4763                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4764  001618  A2AC               	btfss	4012,1,c	;volatile
  4765  00161A  D7FE               	goto	i1l1441
  4766                           
  4767                           ;UART_Driver.c: 71: TXREG = data;
  4768  00161C  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4769  001620  0012               	return		;funcret
  4770  001622                     __end_ofi1_writeByte:
  4771                           	opt stack 0
  4772                           pclatu	equ	0xFFB
  4773                           pclath	equ	0xFFA
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon2	equ	0xFF1
  4782                           indf0	equ	0xFEF
  4783                           postinc0	equ	0xFEE
  4784                           plusw0	equ	0xFEB
  4785                           fsr0h	equ	0xFEA
  4786                           fsr0l	equ	0xFE9
  4787                           wreg	equ	0xFE8
  4788                           indf1	equ	0xFE7
  4789                           postinc1	equ	0xFE6
  4790                           postdec1	equ	0xFE5
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           bsr	equ	0xFE0
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           plusw2	equ	0xFDB
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function i1___lwdiv *****************
  4803 ;; Defined at:
  4804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  dividend        2   18[COMRAM] unsigned int 
  4807 ;;  divisor         2   20[COMRAM] unsigned int 
  4808 ;; Auto vars:     Size  Location     Type
  4809 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4810 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;                  2   18[COMRAM] unsigned int 
  4813 ;; Registers used:
  4814 ;;		wreg, status,2, status,0
  4815 ;; Tracked objects:
  4816 ;;		On entry : 0/0
  4817 ;;		On exit  : 0/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4820 ;;      Params:         4       0       0       0       0       0       0       0       0
  4821 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4823 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4824 ;;Total ram usage:        7 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:    1
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		i1_printf
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text27
  4835  001496                     __ptext27:
  4836                           	opt stack 0
  4837  001496                     i1___lwdiv:
  4838                           	opt stack 20
  4839                           
  4840                           ;incstack = 0
  4841  001496  0E00               	movlw	0
  4842  001498  6E18               	movwf	i1___lwdiv@quotient+1,c
  4843  00149A  0E00               	movlw	0
  4844  00149C  6E17               	movwf	i1___lwdiv@quotient,c
  4845  00149E  5015               	movf	i1___lwdiv@divisor,w,c
  4846  0014A0  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4847  0014A2  B4D8               	btfsc	status,2,c
  4848  0014A4  D01C               	goto	i1l694
  4849  0014A6  0E01               	movlw	1
  4850  0014A8  6E19               	movwf	i1___lwdiv@counter,c
  4851  0014AA  D004               	goto	i1l689
  4852  0014AC  90D8               	bcf	status,0,c
  4853  0014AE  3615               	rlcf	i1___lwdiv@divisor,f,c
  4854  0014B0  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4855  0014B2  2A19               	incf	i1___lwdiv@counter,f,c
  4856  0014B4                     i1l689:
  4857  0014B4  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4858  0014B6  D7FA               	goto	i1l690
  4859  0014B8                     i1u82_20:
  4860  0014B8  90D8               	bcf	status,0,c
  4861  0014BA  3617               	rlcf	i1___lwdiv@quotient,f,c
  4862  0014BC  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4863  0014BE  5015               	movf	i1___lwdiv@divisor,w,c
  4864  0014C0  5C13               	subwf	i1___lwdiv@dividend,w,c
  4865  0014C2  5016               	movf	i1___lwdiv@divisor+1,w,c
  4866  0014C4  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4867  0014C6  A0D8               	btfss	status,0,c
  4868  0014C8  D005               	goto	i1l693
  4869  0014CA  5015               	movf	i1___lwdiv@divisor,w,c
  4870  0014CC  5E13               	subwf	i1___lwdiv@dividend,f,c
  4871  0014CE  5016               	movf	i1___lwdiv@divisor+1,w,c
  4872  0014D0  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4873  0014D2  8017               	bsf	i1___lwdiv@quotient,0,c
  4874  0014D4                     i1l693:
  4875  0014D4  90D8               	bcf	status,0,c
  4876  0014D6  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4877  0014D8  3215               	rrcf	i1___lwdiv@divisor,f,c
  4878  0014DA  2E19               	decfsz	i1___lwdiv@counter,f,c
  4879  0014DC  D7ED               	goto	i1u82_20
  4880  0014DE                     i1l694:
  4881  0014DE  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4882  0014E2  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4883  0014E6  0012               	return		;funcret
  4884  0014E8                     __end_ofi1___lwdiv:
  4885                           	opt stack 0
  4886                           pclatu	equ	0xFFB
  4887                           pclath	equ	0xFFA
  4888                           tblptru	equ	0xFF8
  4889                           tblptrh	equ	0xFF7
  4890                           tblptrl	equ	0xFF6
  4891                           tablat	equ	0xFF5
  4892                           prodh	equ	0xFF4
  4893                           prodl	equ	0xFF3
  4894                           intcon	equ	0xFF2
  4895                           intcon2	equ	0xFF1
  4896                           indf0	equ	0xFEF
  4897                           postinc0	equ	0xFEE
  4898                           plusw0	equ	0xFEB
  4899                           fsr0h	equ	0xFEA
  4900                           fsr0l	equ	0xFE9
  4901                           wreg	equ	0xFE8
  4902                           indf1	equ	0xFE7
  4903                           postinc1	equ	0xFE6
  4904                           postdec1	equ	0xFE5
  4905                           fsr1h	equ	0xFE2
  4906                           fsr1l	equ	0xFE1
  4907                           bsr	equ	0xFE0
  4908                           indf2	equ	0xFDF
  4909                           postinc2	equ	0xFDE
  4910                           postdec2	equ	0xFDD
  4911                           plusw2	equ	0xFDB
  4912                           fsr2h	equ	0xFDA
  4913                           fsr2l	equ	0xFD9
  4914                           status	equ	0xFD8
  4915                           
  4916 ;; *************** function _HighISR *****************
  4917 ;; Defined at:
  4918 ;;		line 82 in file "main.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;		None
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;		None
  4923 ;; Return value:  Size  Location     Type
  4924 ;;                  1    wreg      void 
  4925 ;; Registers used:
  4926 ;;		wreg, status,2
  4927 ;; Tracked objects:
  4928 ;;		On entry : 0/0
  4929 ;;		On exit  : 0/0
  4930 ;;		Unchanged: 0/0
  4931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4932 ;;      Params:         0       0       0       0       0       0       0       0       0
  4933 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4934 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4935 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4936 ;;Total ram usage:       18 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		Interrupt level 2
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           	psect	intcode
  4946  000008                     __pintcode:
  4947                           	opt stack 0
  4948  000008                     _HighISR:
  4949                           	opt stack 19
  4950                           
  4951                           ;incstack = 0
  4952  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4953  00000A  EDFF  F008         	call	int_func,f	;refresh shadow registers
  4954                           pclatu	equ	0xFFB
  4955                           pclath	equ	0xFFA
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           intcon2	equ	0xFF1
  4964                           indf0	equ	0xFEF
  4965                           postinc0	equ	0xFEE
  4966                           plusw0	equ	0xFEB
  4967                           fsr0h	equ	0xFEA
  4968                           fsr0l	equ	0xFE9
  4969                           wreg	equ	0xFE8
  4970                           indf1	equ	0xFE7
  4971                           postinc1	equ	0xFE6
  4972                           postdec1	equ	0xFE5
  4973                           fsr1h	equ	0xFE2
  4974                           fsr1l	equ	0xFE1
  4975                           bsr	equ	0xFE0
  4976                           indf2	equ	0xFDF
  4977                           postinc2	equ	0xFDE
  4978                           postdec2	equ	0xFDD
  4979                           plusw2	equ	0xFDB
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984                           	psect	intcode_body
  4985  0011FE                     __pintcode_body:
  4986                           	opt stack 19
  4987  0011FE                     int_func:
  4988                           	opt stack 19
  4989  0011FE  0006               	pop		; remove dummy address from shadow register refresh
  4990  001200  CFFA F001          	movff	pclath,??_HighISR
  4991  001204  CFFB F002          	movff	pclatu,??_HighISR+1
  4992  001208  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4993  00120C  CFEA F004          	movff	fsr0h,??_HighISR+3
  4994  001210  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4995  001214  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4996  001218  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4997  00121C  CFDA F008          	movff	fsr2h,??_HighISR+7
  4998  001220  CFF3 F009          	movff	prodl,??_HighISR+8
  4999  001224  CFF4 F00A          	movff	prodh,??_HighISR+9
  5000  001228  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  5001  00122C  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  5002  001230  CFF8 F00D          	movff	tblptru,??_HighISR+12
  5003  001234  CFF5 F00E          	movff	tablat,??_HighISR+13
  5004  001238  C044  F00F         	movff	btemp,??_HighISR+14
  5005  00123C  C045  F010         	movff	btemp+1,??_HighISR+15
  5006  001240  C046  F011         	movff	btemp+2,??_HighISR+16
  5007  001244  C047  F012         	movff	btemp+3,??_HighISR+17
  5008                           
  5009                           ;main.c: 83: if (INTCONbits.TMR0IF) {
  5010  001248  A4F2               	btfss	intcon,2,c	;volatile
  5011  00124A  D004               	goto	i2l257
  5012                           
  5013                           ;main.c: 84: tick = 1;
  5014  00124C  0E01               	movlw	1
  5015  00124E  0100               	movlb	0	; () banked
  5016  001250  6FA1               	movwf	_tick& (0+255),b
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;main.c: 85: INTCONbits.TMR0IF = 0;
  5020  001252  94F2               	bcf	intcon,2,c	;volatile
  5021  001254                     i2l257:
  5022                           
  5023                           ; BSR set to: 0
  5024  001254  C012  F047         	movff	??_HighISR+17,btemp+3
  5025  001258  C011  F046         	movff	??_HighISR+16,btemp+2
  5026  00125C  C010  F045         	movff	??_HighISR+15,btemp+1
  5027  001260  C00F  F044         	movff	??_HighISR+14,btemp
  5028  001264  C00E  FFF5         	movff	??_HighISR+13,tablat
  5029  001268  C00D  FFF8         	movff	??_HighISR+12,tblptru
  5030  00126C  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  5031  001270  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  5032  001274  C00A  FFF4         	movff	??_HighISR+9,prodh
  5033  001278  C009  FFF3         	movff	??_HighISR+8,prodl
  5034  00127C  C008  FFDA         	movff	??_HighISR+7,fsr2h
  5035  001280  C007  FFD9         	movff	??_HighISR+6,fsr2l
  5036  001284  C006  FFE2         	movff	??_HighISR+5,fsr1h
  5037  001288  C005  FFE1         	movff	??_HighISR+4,fsr1l
  5038  00128C  C004  FFEA         	movff	??_HighISR+3,fsr0h
  5039  001290  C003  FFE9         	movff	??_HighISR+2,fsr0l
  5040  001294  C002  FFFB         	movff	??_HighISR+1,pclatu
  5041  001298  C001  FFFA         	movff	??_HighISR,pclath
  5042  00129C  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5043  00129E  0011               	retfie		f
  5044  0012A0                     __end_of_HighISR:
  5045                           	opt stack 0
  5046                           pclatu	equ	0xFFB
  5047                           pclath	equ	0xFFA
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           intcon2	equ	0xFF1
  5056                           indf0	equ	0xFEF
  5057                           postinc0	equ	0xFEE
  5058                           plusw0	equ	0xFEB
  5059                           fsr0h	equ	0xFEA
  5060                           fsr0l	equ	0xFE9
  5061                           wreg	equ	0xFE8
  5062                           indf1	equ	0xFE7
  5063                           postinc1	equ	0xFE6
  5064                           postdec1	equ	0xFE5
  5065                           fsr1h	equ	0xFE2
  5066                           fsr1l	equ	0xFE1
  5067                           bsr	equ	0xFE0
  5068                           indf2	equ	0xFDF
  5069                           postinc2	equ	0xFDE
  5070                           postdec2	equ	0xFDD
  5071                           plusw2	equ	0xFDB
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           pclatu	equ	0xFFB
  5076                           pclath	equ	0xFFA
  5077                           tblptru	equ	0xFF8
  5078                           tblptrh	equ	0xFF7
  5079                           tblptrl	equ	0xFF6
  5080                           tablat	equ	0xFF5
  5081                           prodh	equ	0xFF4
  5082                           prodl	equ	0xFF3
  5083                           intcon	equ	0xFF2
  5084                           intcon2	equ	0xFF1
  5085                           indf0	equ	0xFEF
  5086                           postinc0	equ	0xFEE
  5087                           plusw0	equ	0xFEB
  5088                           fsr0h	equ	0xFEA
  5089                           fsr0l	equ	0xFE9
  5090                           wreg	equ	0xFE8
  5091                           indf1	equ	0xFE7
  5092                           postinc1	equ	0xFE6
  5093                           postdec1	equ	0xFE5
  5094                           fsr1h	equ	0xFE2
  5095                           fsr1l	equ	0xFE1
  5096                           bsr	equ	0xFE0
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           postdec2	equ	0xFDD
  5100                           plusw2	equ	0xFDB
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105                           	psect	rparam
  5106  0000                     pclatu	equ	0xFFB
  5107                           pclath	equ	0xFFA
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           intcon2	equ	0xFF1
  5116                           indf0	equ	0xFEF
  5117                           postinc0	equ	0xFEE
  5118                           plusw0	equ	0xFEB
  5119                           fsr0h	equ	0xFEA
  5120                           fsr0l	equ	0xFE9
  5121                           wreg	equ	0xFE8
  5122                           indf1	equ	0xFE7
  5123                           postinc1	equ	0xFE6
  5124                           postdec1	equ	0xFE5
  5125                           fsr1h	equ	0xFE2
  5126                           fsr1l	equ	0xFE1
  5127                           bsr	equ	0xFE0
  5128                           indf2	equ	0xFDF
  5129                           postinc2	equ	0xFDE
  5130                           postdec2	equ	0xFDD
  5131                           plusw2	equ	0xFDB
  5132                           fsr2h	equ	0xFDA
  5133                           fsr2l	equ	0xFD9
  5134                           status	equ	0xFD8
  5135                           
  5136                           	psect	temp
  5137  000044                     btemp:
  5138                           	opt stack 0
  5139  000044                     	ds	1
  5140  0000                     int$flags	set	btemp
  5141  0000                     wtemp6	set	btemp+1
  5142                           pclatu	equ	0xFFB
  5143                           pclath	equ	0xFFA
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           intcon	equ	0xFF2
  5151                           intcon2	equ	0xFF1
  5152                           indf0	equ	0xFEF
  5153                           postinc0	equ	0xFEE
  5154                           plusw0	equ	0xFEB
  5155                           fsr0h	equ	0xFEA
  5156                           fsr0l	equ	0xFE9
  5157                           wreg	equ	0xFE8
  5158                           indf1	equ	0xFE7
  5159                           postinc1	equ	0xFE6
  5160                           postdec1	equ	0xFE5
  5161                           fsr1h	equ	0xFE2
  5162                           fsr1l	equ	0xFE1
  5163                           bsr	equ	0xFE0
  5164                           indf2	equ	0xFDF
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           plusw2	equ	0xFDB
  5168                           fsr2h	equ	0xFDA
  5169                           fsr2l	equ	0xFD9
  5170                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    8
    Data        8
    BSS         234
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     33     102
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), ROM(CODE[32767]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), STR_10(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), STR_9(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6813
                                             31 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     699
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    8     8      0    2698
                                             23 BANK0      8     8      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     405
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2029
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F      20        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 26 21:10:37 2017

                         l11 1368                           l16 0DFA                           l44 109A  
                         l46 1150                           l39 12AE                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l241 0A90                          l243 0AB6  
                        l341 0FDC                          l270 0B4E                          l350 107A  
                        l342 0FF4                          l271 0B5E                          l247 0B16  
                        l239 0A4C                          l272 0B6E                          l344 1022  
                        l248 0B2C                          l281 0C5A                          l169 157C  
                        l345 1016                          l282 0C02                          l196 15DA  
                        l348 1056                          l277 0B66                          l349 1064  
                        l278 0BCC                          l833 14F4                          l690 145A  
                        l834 14EA                          l693 1482                          l694 148C  
                        l689 1462                 __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000  
                        u900 0C90                          u850 0B9A                          u907 0C86  
                        u790 1466                          u880 0BFC                          u857 0B90  
                        u890 0C64                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000          __end_ofi1_writeByte 1622                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1523 0BF4                         l1437 15FE  
                       l1653 0DF2                         l1681 1092                         l1669 12A6  
                       STR_1 0833                         STR_2 0831                         STR_3 081E  
                       STR_4 081A                         STR_5 0822                         STR_6 0835  
                       STR_7 0835                         STR_8 082B                         STR_9 0827  
                       u1011 0F54                         u1021 0F8E                         u1311 155A  
                       u1144 1316                         u1080 1026                         u1145 1312  
                       u1330 152A                         u1181 10E8                         u1441 0A62  
                       u1517 09DC                         u1527 0A24                         u1537 0B08  
                       u1547 0FB2                 ?_C_DOOR_Init 0001                         _baud 0043  
                       _main 09D0                         _read 0092                         _tick 00A1  
                       fsr0h 000FEA                         fsr1h 000FE2                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0044                         prodh 000FF4                         prodl 000FF3  
                       start 00D4                __CFG_IESO$OFF 000000              __end_ofi1_putch 162C  
            __end_of_HighISR 12A0                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
             _startCharacter 0041                __CFG_PLLDIV$5 000000         commandAndMessage@com 00AD  
    __size_of_C_DOOR_LockAll 000E         commandAndMessage@mes 00AF              __end_of___aldiv 108C  
                      ?_main 0001                        STR_10 0827                        STR_11 0829  
                      STR_12 082F                        STR_13 0827                        STR_14 082D  
                      STR_15 0825                        STR_16 082F                        STR_17 0809  
                      u10111 0F52                        u10211 0F8C              __end_of___lwdiv 1496  
                      i1l130 0864                        i1l150 097C                        i1l142 08F4  
                      i1l134 086C                        i1l151 0996                        i1l143 0916  
                      i1l135 088E                        i1l128 09A6                        i1l153 09A0  
                      i1l129 083C                        i1l146 0938                        i1l138 08B0  
                      i1l147 095A                        i1l139 08D2                        i1l270 0CA6  
                      i1l271 0CB6                        i1l272 0CC4                        i1l281 0DA8  
                      i1l282 0D52                        i1l179 007C                        i1l277 0CBC  
                      i1l278 0D1C                        i2l257 1254                        i1l690 14AC  
                      i1l693 14D4                        i1l694 14DE                        i1l689 14B4  
                      _RCREG 000FAE         __size_of_acknowledge 0060                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
 __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000                        _doors 0060  
                      _putch 15EC              i1writeByte@data 0013                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 00B1                 ?_D_UART_Read 00A3  
               ?_D_TMR0_Init 0001                        plusw0 000FEB                        plusw2 000FDB  
                      status 000FD8                        wtemp6 0045                 ?_D_PORT_Init 0001  
         __size_ofi1___lwdiv 0052                _stopCharacter 003F             __end_ofi1_printf 0DE4  
                 i1printf@ap 0020              __initialization 13E6             _D_UART_Init$1498 00B6  
               __end_of_main 0B42                       ??_main 00C2                  i1_writeByte 1616  
              __activetblptr 000003              __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00A3  
                     _ADCON1 000FC1                       ?_putch 0001                       i1l1441 1618  
                     i1l1565 0D44                    ??i1_putch 0014             _C_DOOR_UnlockAll 15DE  
                  ??_HighISR 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___aldiv 00AB                    ??___lwdiv 00A7             __end_of_readByte 1634  
                     clear_0 1424                       clear_1 1430                       _printf 0B42  
                     _strcmp 14E8            __end_ofi1___lwdiv 14E8                 __pdataCOMRAM 003D  
      D_UART_Init@interrupts 00B5                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00B5  
            D_UART_Init@baud 00B3              D_UART_Init@name 00B1   __end_of_C_DOOR_ReadSensors 1326  
                 __accesstop 0060      __end_of__initialization 1438              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 00FA                  i1printf@idx 0022  
                i1printf@val 0023               __pcstackCOMRAM 0001                 __pidataBANK0 163A  
               C_DOOR_Init@d 00A3                  i1putch@data 0014                __end_of_putch 15FA  
           _messageCharacter 00C4               _C_DOOR_LockAll 1608       __size_of_D_UART_Enable 0024  
             ??_D_UART_Write 00B9                    ?i1_printf 001A       __size_of_D_TMR0_Enable 0014  
          _C_DOOR_SendStates 108C                      ??_putch 00A4           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100         __size_of_D_UART_Init 00AA  
       __size_of_D_UART_Read 002E         __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00BA  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E       __end_of_C_DOOR_LockAll 1616  
                 _deviceName 009E                      ?_printf 00AA                      ?_strcmp 00A3  
  __end_of_C_DOOR_SendStates 1154                   ??i1_printf 001F      __size_of_fillDataBuffer 0198  
                    i1u82_20 14B8                      i1u93_20 0CEE                      i1u93_27 0CE4  
        D_UART_Enable@enable 00A3                      i1u96_20 0D4C                      i1u97_20 0DB0  
                    i1u98_20 0DDA                      i1u98_27 0DD0              __CFG_VREGEN$OFF 000000  
                    i1_putch 1622                      _HighISR 0008                    ?_readByte 0001  
         __size_of_writeByte 000E                _D_UART_Enable 1564                      __Hparam 0000  
                    __Lparam 0000              __size_of_LowISR 00BC                _D_TMR0_Enable 15CA  
                 _readBuffer 0100                      ___aldiv 0FBE              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 1442                 __psmallconst 0800          C_DOOR_ReadSensors@d 00A7  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0027                      __pcinit 13E6  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 15EC                      __ptext0 09D0  
                    __ptext1 14E8                      __ptext2 1536                      __ptext3 1154  
                    __ptext4 0FBE                      __ptext5 1564                      __ptext6 1588  
                    __ptext7 15CA                      __ptext8 15AC                      __ptext9 15DE  
            __size_of_printf 015A                    _T0CONbits 000FD5                 ?i1_writeByte 0001  
            __size_of_strcmp 004E            __end_of_hexpowers 0809            i1___lwdiv@divisor 0015  
          i1___lwdiv@counter 0019         C_DOOR_SendStates@com 00BC         C_DOOR_SendStates@mes 00BF  
           ___aldiv@dividend 00A3               __pintcode_body 11FE         end_of_initialization 1438  
                 ??_readByte 0013          D_TMR0_Enable@enable 00A3                      int_func 11FE  
             ?_D_UART_Enable 0001               ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0FBE  
                  _RCSTAbits 000FAB                      printf@c 00B4                      printf@f 00AA  
           ___aldiv@quotient 00AD                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00A8            __end_of_writeByte 1608   __size_of_C_DOOR_SendStates 00C8  
                  _TRISCbits 000F94          __end_of_acknowledge 13E6                    i1___lwdiv 1496  
                  _TXSTAbits 000FAC                 i1printf@flag 001F                 i1printf@prec 0025  
         _C_DOOR_ReadSensors 12A0               __end_of_LowISR 00D4                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 1634               __end_of_printf 0C9C  
             __end_of_strcmp 1536          start_initialization 13E6               _fillDataBuffer 0838  
                  i1printf@c 0026                    i1printf@f 001A                   ?i1___lwdiv 0013  
          __size_ofi1_printf 0148         ??_C_DOOR_ReadSensors 00A3              ??_D_UART_Enable 00A3  
              ??_C_DOOR_Init 00A3              ??_D_TMR0_Enable 00A3                     ??_LowISR 0028  
                __pdataBANK0 00C4             __CFG_LPT1OSC$OFF 000000                  _acknowledge 1386  
           D_UART_Write@data 00B7                     ??_printf 00AD                     ??_strcmp 00A7  
     __end_of_fillDataBuffer 09D0                  __pbssCOMRAM 0043         __size_ofi1_writeByte 000C  
              __pcstackBANK0 00A3                ??_D_UART_Init 00B6                ??_D_UART_Read 00A9  
              ??_D_TMR0_Init 00A4                     ?i1_putch 0001                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00A3             ??_C_DOOR_LockAll 00A3  
          __size_of_readByte 0008             ___lwdiv@dividend 00A3          __end_of_C_DOOR_Init 0EDE  
                  __pintcode 0008                     ?___aldiv 00A3                     ?___lwdiv 00A3  
                __pintcodelo 0018           fillDataBuffer@data 0027            ?_C_DOOR_UnlockAll 0001  
            ?_fillDataBuffer 0001                  __smallconst 0800           ??_C_DOOR_UnlockAll 00A3  
               _D_UART_Write 0EDE                    _hexpowers 0801                    _readReady 00A2  
           ___lwdiv@quotient 00A7                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00A7              ___aldiv@counter 00AB                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 11FE          __end_of_D_UART_Read 1564  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 15AC                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 15CA                   printf@flag 00AD  
                 printf@prec 00B3                     i1_printf 0C9C                    _writeByte 15FA  
                _INTCON2bits 000FF1                    copy_data0 1412                  _C_DOOR_Init 0DE4  
           __size_ofi1_putch 000A             __size_of_HighISR 1298                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___aldiv 00CE             __size_of___lwdiv 0054  
            ___lwdiv@divisor 00A5              ___lwdiv@counter 00A9                     __ptext10 108C  
                   __ptext11 1326                     __ptext12 0EDE                     __ptext21 162C  
                   __ptext13 0B42                     __ptext22 0838                     __ptext14 15EC  
                   __ptext23 1386                     __ptext15 15FA                     __ptext24 0C9C  
                   __ptext16 1442                     __ptext25 1622                     __ptext17 12A0  
                   __ptext26 1616                     __ptext18 1608                     __ptext27 1496  
                   __ptext19 0DE4                   ?_writeByte 0001           i1___lwdiv@dividend 0013  
                _D_UART_Init 1154                  _D_UART_Read 1536                     _readData 0098  
                _D_TMR0_Init 1588                     _readByte 162C                __size_of_main 0172  
         C_DOOR_SendStates@d 00C1                  _D_PORT_Init 15AC                     int$flags 0044  
                  printf@idx 00B0                    printf@val 00B1                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00A4  
                 _INTCONbits 000FF2            _commandAndMessage 1326                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 0086           ?_commandAndMessage 00A3  
      __end_of_D_UART_Enable 1588        __end_of_D_TMR0_Enable 15DE          ??_commandAndMessage 00B1  
                   printf@ap 00AE             ??_fillDataBuffer 0027          D_UART_Write@command 00B5  
              ??i1_writeByte 0013                     strcmp@s1 00A3                     strcmp@s2 00A5  
              writeByte@data 00A3    __end_of_commandAndMessage 1386                 ___aldiv@sign 00AC  
                ??_writeByte 00A3    __size_of_C_DOOR_UnlockAll 000E  
