

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Mar 12 21:16:17 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.44
    55                           ; Generated 14/09/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F2550 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  001778                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _ackCharacter
    94  001778  1A                 	db	low STR_4
    95  001779  08                 	db	high STR_4
    96                           
    97                           ;initializer for _stopCharacter
    98  00177A  33                 	db	low STR_2
    99  00177B  08                 	db	high STR_2
   100                           
   101                           ;initializer for _startCharacter
   102  00177C  35                 	db	low STR_1
   103  00177D  08                 	db	high STR_1
   104                           
   105                           	psect	idataBANK0
   106  00177E                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _messageCharacter
   110  00177E  1E                 	db	low STR_3
   111  00177F  08                 	db	high STR_3
   112                           
   113                           	psect	smallconst
   114  000800                     __psmallconst:
   115                           	opt stack 0
   116  000800  00                 	db	0
   117  000801                     _hexpowers:
   118                           	opt stack 0
   119  000801  0001               	dw	1
   120  000803  0010               	dw	16
   121  000805  0100               	dw	256
   122  000807  1000               	dw	4096
   123  000809                     __end_of_hexpowers:
   124                           	opt stack 0
   125  0000                     _PORTCbits	set	3970
   126  0000                     _CCP1CONbits	set	4029
   127  0000                     _CCPR1L	set	4030
   128  0000                     _T2CONbits	set	4042
   129  0000                     _PR2	set	4043
   130  0000                     _INTCON2bits	set	4081
   131  0000                     _T0CONbits	set	4053
   132  0000                     _PIE1bits	set	3997
   133  0000                     _IPR1bits	set	3999
   134  0000                     _PIR1bits	set	3998
   135  0000                     _INTCONbits	set	4082
   136  0000                     _RCONbits	set	4048
   137  0000                     _SPBRG	set	4015
   138  0000                     _BAUDCONbits	set	4024
   139  0000                     _TRISCbits	set	3988
   140  0000                     _RCREG	set	4014
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _TXREG	set	4013
   143  0000                     _TXSTAbits	set	4012
   144  0000                     _ADCON1	set	4033
   145  0000                     _PORTC	set	3970
   146  0000                     _TRISC	set	3988
   147  0000                     _PORTA	set	3968
   148  0000                     _TRISA	set	3986
   149  0000                     _TRISB	set	3987
   150  0000                     _PORTB	set	3969
   151  000809                     STR_17:
   152  000809  30                 	db	48	;'0'
   153  00080A  31                 	db	49	;'1'
   154  00080B  32                 	db	50	;'2'
   155  00080C  33                 	db	51	;'3'
   156  00080D  34                 	db	52	;'4'
   157  00080E  35                 	db	53	;'5'
   158  00080F  36                 	db	54	;'6'
   159  000810  37                 	db	55	;'7'
   160  000811  38                 	db	56	;'8'
   161  000812  39                 	db	57	;'9'
   162  000813  61                 	db	97	;'a'
   163  000814  62                 	db	98	;'b'
   164  000815  63                 	db	99	;'c'
   165  000816  64                 	db	100	;'d'
   166  000817  65                 	db	101	;'e'
   167  000818  66                 	db	102	;'f'
   168  000819  00                 	db	0
   169  00081A                     STR_4:
   170  00081A  5B                 	db	91	;'['
   171  00081B  41                 	db	65	;'A'
   172  00081C  5D                 	db	93	;']'
   173  00081D  00                 	db	0
   174  00081E                     STR_3:
   175  00081E  5B                 	db	91	;'['
   176  00081F  4D                 	db	77	;'M'
   177  000820  5D                 	db	93	;']'
   178  000821  00                 	db	0
   179  000822                     STR_5:
   180  000822  25                 	db	37
   181  000823  78                 	db	120	;'x'
   182  000824  00                 	db	0
   183  000825                     STR_14:
   184  000825  41                 	db	65	;'A'
   185  000826  00                 	db	0
   186  000827                     STR_15:
   187  000827  45                 	db	69	;'E'
   188  000828  00                 	db	0
   189  000829                     STR_11:
   190  000829  49                 	db	73	;'I'
   191  00082A  00                 	db	0
   192  00082B                     STR_9:
   193  00082B  4C                 	db	76	;'L'
   194  00082C  00                 	db	0
   195  00082D                     STR_8:
   196  00082D  50                 	db	80	;'P'
   197  00082E  00                 	db	0
   198  00082F                     STR_12:
   199  00082F  52                 	db	82	;'R'
   200  000830  00                 	db	0
   201  000831                     STR_10:
   202  000831  55                 	db	85	;'U'
   203  000832  00                 	db	0
   204  000833                     STR_2:
   205  000833  24                 	db	36
   206  000834  00                 	db	0
   207  000835                     STR_1:
   208  000835  26                 	db	38
   209  000836  00                 	db	0
   210  000837                     STR_6:
   211  000837  3A                 	db	58	;':'
   212  000838  00                 	db	0
   213  0000                     
   214                           ; #config settings
   215  000839  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  0014B2                     __pcinit:
   219                           	opt stack 0
   220  0014B2                     start_initialization:
   221                           	opt stack 0
   222  0014B2                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to BANK0 (2 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227  0014B2  0E7E               	movlw	low __pidataBANK0
   228  0014B4  6EF6               	movwf	tblptrl,c
   229  0014B6  0E17               	movlw	high __pidataBANK0
   230  0014B8  6EF7               	movwf	tblptrh,c
   231  0014BA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232  0014BC  6EF8               	movwf	tblptru,c
   233  0014BE  0009               	tblrd		*+	;fetch initializer
   234  0014C0  CFF5 F0FC          	movff	tablat,__pdataBANK0
   235  0014C4  0009               	tblrd		*+	;fetch initializer
   236  0014C6  CFF5 F0FD          	movff	tablat,__pdataBANK0+1
   237                           
   238                           ; Initialize objects allocated to COMRAM (6 bytes)
   239                           ; load TBLPTR registers with __pidataCOMRAM
   240  0014CA  0E78               	movlw	low __pidataCOMRAM
   241  0014CC  6EF6               	movwf	tblptrl,c
   242  0014CE  0E17               	movlw	high __pidataCOMRAM
   243  0014D0  6EF7               	movwf	tblptrh,c
   244  0014D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   245  0014D4  6EF8               	movwf	tblptru,c
   246  0014D6  EE00  F03D         	lfsr	0,__pdataCOMRAM
   247  0014DA  EE10 F006          	lfsr	1,6
   248  0014DE                     copy_data0:
   249  0014DE  0009               	tblrd		*+
   250  0014E0  CFF5 FFEE          	movff	tablat,postinc0
   251  0014E4  50E5               	movf	postdec1,w,c
   252  0014E6  50E1               	movf	fsr1l,w,c
   253  0014E8  E1FA               	bnz	copy_data0
   254                           
   255                           ; Clear objects allocated to BANK1 (166 bytes)
   256  0014EA  EE01  F000         	lfsr	0,__pbssBANK1
   257  0014EE  0EA6               	movlw	166
   258  0014F0                     clear_0:
   259  0014F0  6AEE               	clrf	postinc0,c
   260  0014F2  06E8               	decf	wreg,f,c
   261  0014F4  E1FD               	bnz	clear_0
   262                           
   263                           ; Clear objects allocated to BANK0 (122 bytes)
   264  0014F6  EE00  F060         	lfsr	0,__pbssBANK0
   265  0014FA  0E7A               	movlw	122
   266  0014FC                     clear_1:
   267  0014FC  6AEE               	clrf	postinc0,c
   268  0014FE  06E8               	decf	wreg,f,c
   269  001500  E1FD               	bnz	clear_1
   270                           
   271                           ; Clear objects allocated to COMRAM (1 bytes)
   272  001502  6A43               	clrf	__pbssCOMRAM& (0+255),c
   273  001504                     end_of_initialization:
   274                           	opt stack 0
   275  001504                     __end_of__initialization:
   276                           	opt stack 0
   277  001504  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   278  001506  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   279  001508  0100               	movlb	0
   280  00150A  EF1D  F004         	goto	_main	;jump to C main() function
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	bssCOMRAM
   291  000043                     __pbssCOMRAM:
   292                           	opt stack 0
   293  000043                     _baud:
   294                           	opt stack 0
   295  000043                     	ds	1
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	dataCOMRAM
   306  00003D                     __pdataCOMRAM:
   307                           	opt stack 0
   308  00003D                     _ackCharacter:
   309                           	opt stack 0
   310  00003D                     	ds	2
   311  00003F                     _stopCharacter:
   312                           	opt stack 0
   313  00003F                     	ds	2
   314  000041                     _startCharacter:
   315                           	opt stack 0
   316  000041                     	ds	2
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	bssBANK0
   327  000060                     __pbssBANK0:
   328                           	opt stack 0
   329  000060                     _doors:
   330                           	opt stack 0
   331  000060                     	ds	100
   332  0000C4                     _read:
   333                           	opt stack 0
   334  0000C4                     	ds	6
   335  0000CA                     _readData:
   336                           	opt stack 0
   337  0000CA                     	ds	6
   338  0000D0                     _deviceName:
   339                           	opt stack 0
   340  0000D0                     	ds	3
   341  0000D3                     _door_cnt:
   342                           	opt stack 0
   343  0000D3                     	ds	2
   344  0000D5                     _oldAlarm:
   345                           	opt stack 0
   346  0000D5                     	ds	1
   347  0000D6                     _newAlarm:
   348                           	opt stack 0
   349  0000D6                     	ds	1
   350  0000D7                     _pwm:
   351                           	opt stack 0
   352  0000D7                     	ds	1
   353  0000D8                     _tick:
   354                           	opt stack 0
   355  0000D8                     	ds	1
   356  0000D9                     _readReady:
   357                           	opt stack 0
   358  0000D9                     	ds	1
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           postdec1	equ	0xFE5
   366                           fsr1l	equ	0xFE1
   367                           
   368                           	psect	dataBANK0
   369  0000FC                     __pdataBANK0:
   370                           	opt stack 0
   371  0000FC                     _messageCharacter:
   372                           	opt stack 0
   373  0000FC                     	ds	2
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           postdec1	equ	0xFE5
   381                           fsr1l	equ	0xFE1
   382                           
   383                           	psect	bssBANK1
   384  000100                     __pbssBANK1:
   385                           	opt stack 0
   386  000100                     _readBuffer:
   387                           	opt stack 0
   388  000100                     	ds	166
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           postdec1	equ	0xFE5
   396                           fsr1l	equ	0xFE1
   397                           
   398                           	psect	cstackBANK0
   399  0000DA                     __pcstackBANK0:
   400                           	opt stack 0
   401  0000DA                     ??_C_DOOR_Init:
   402  0000DA                     ??_C_DOOR_ReadSensors:
   403  0000DA                     ?_strcmp:
   404                           	opt stack 0
   405  0000DA                     ?___lwdiv:
   406                           	opt stack 0
   407  0000DA                     ?___aldiv:
   408                           	opt stack 0
   409  0000DA                     ?_D_UART_Read:
   410                           	opt stack 0
   411  0000DA                     writeByte@data:
   412                           	opt stack 0
   413  0000DA                     D_UART_Enable@enable:
   414                           	opt stack 0
   415  0000DA                     D_TMR0_Enable@enable:
   416                           	opt stack 0
   417  0000DA                     setAlarm@alarm:
   418                           	opt stack 0
   419  0000DA                     D_PWM_SetPwm@pwm:
   420                           	opt stack 0
   421  0000DA                     ___lwdiv@dividend:
   422                           	opt stack 0
   423  0000DA                     strcmp@s1:
   424                           	opt stack 0
   425  0000DA                     ___aldiv@dividend:
   426                           	opt stack 0
   427  0000DA                     commandAndMessage@door:
   428                           	opt stack 0
   429                           
   430                           ; 10 bytes @ 0x0
   431  0000DA                     	ds	1
   432  0000DB                     putch@data:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x1
   436  0000DB                     	ds	1
   437  0000DC                     ___lwdiv@divisor:
   438                           	opt stack 0
   439  0000DC                     strcmp@s2:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x2
   443  0000DC                     	ds	1
   444  0000DD                     C_DOOR_Init@cnt:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x3
   448  0000DD                     	ds	1
   449  0000DE                     ??_strcmp:
   450  0000DE                     C_DOOR_Init@d:
   451                           	opt stack 0
   452  0000DE                     C_DOOR_ReadSensors@d:
   453                           	opt stack 0
   454  0000DE                     ___lwdiv@quotient:
   455                           	opt stack 0
   456  0000DE                     ___aldiv@divisor:
   457                           	opt stack 0
   458                           
   459                           ; 4 bytes @ 0x4
   460  0000DE                     	ds	1
   461  0000DF                     initDoors@door_cnt:
   462                           	opt stack 0
   463  0000DF                     strcmp@r:
   464                           	opt stack 0
   465                           
   466                           ; 1 bytes @ 0x5
   467  0000DF                     	ds	1
   468  0000E0                     ___lwdiv@counter:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x6
   472  0000E0                     	ds	1
   473  0000E1                     ?_printf:
   474                           	opt stack 0
   475  0000E1                     printf@f:
   476                           	opt stack 0
   477                           
   478                           ; 3 bytes @ 0x7
   479  0000E1                     	ds	1
   480  0000E2                     ___aldiv@counter:
   481                           	opt stack 0
   482                           
   483                           ; 1 bytes @ 0x8
   484  0000E2                     	ds	1
   485  0000E3                     ___aldiv@sign:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0x9
   489  0000E3                     	ds	1
   490  0000E4                     printf@flag:
   491                           	opt stack 0
   492  0000E4                     commandAndMessage@com:
   493                           	opt stack 0
   494  0000E4                     ___aldiv@quotient:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0xA
   498  0000E4                     	ds	1
   499  0000E5                     printf@ap:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0xB
   503  0000E5                     	ds	1
   504  0000E6                     commandAndMessage@mes:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0xC
   508  0000E6                     	ds	1
   509  0000E7                     printf@idx:
   510                           	opt stack 0
   511                           
   512                           ; 1 bytes @ 0xD
   513  0000E7                     	ds	1
   514  0000E8                     D_UART_Init@name:
   515                           	opt stack 0
   516  0000E8                     printf@val:
   517                           	opt stack 0
   518                           
   519                           ; 2 bytes @ 0xE
   520  0000E8                     	ds	2
   521  0000EA                     printf@prec:
   522                           	opt stack 0
   523  0000EA                     D_UART_Init@baud:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x10
   527  0000EA                     	ds	1
   528  0000EB                     printf@c:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x11
   532  0000EB                     	ds	1
   533  0000EC                     D_UART_Init@interrupts:
   534                           	opt stack 0
   535  0000EC                     D_UART_Write@command:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x12
   539  0000EC                     	ds	1
   540  0000ED                     _D_UART_Init$1672:
   541                           	opt stack 0
   542                           
   543                           ; 4 bytes @ 0x13
   544  0000ED                     	ds	1
   545  0000EE                     D_UART_Write@data:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x14
   549  0000EE                     	ds	2
   550  0000F0                     ??_D_UART_Write:
   551                           
   552                           ; 1 bytes @ 0x16
   553  0000F0                     	ds	1
   554  0000F1                     ??_C_DOOR_SendStates:
   555                           
   556                           ; 1 bytes @ 0x17
   557  0000F1                     	ds	3
   558  0000F4                     C_DOOR_SendStates@com:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x1A
   562  0000F4                     	ds	3
   563  0000F7                     C_DOOR_SendStates@mes:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0x1D
   567  0000F7                     	ds	2
   568  0000F9                     C_DOOR_SendStates@d:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x1F
   572  0000F9                     	ds	1
   573  0000FA                     ??_main:
   574                           
   575                           ; 1 bytes @ 0x20
   576  0000FA                     	ds	2
   577                           tblptru	equ	0xFF8
   578                           tblptrh	equ	0xFF7
   579                           tblptrl	equ	0xFF6
   580                           tablat	equ	0xFF5
   581                           postinc0	equ	0xFEE
   582                           wreg	equ	0xFE8
   583                           postdec1	equ	0xFE5
   584                           fsr1l	equ	0xFE1
   585                           
   586                           	psect	cstackCOMRAM
   587  000001                     __pcstackCOMRAM:
   588                           	opt stack 0
   589  000001                     ??_HighISR:
   590  000001                     
   591                           ; 1 bytes @ 0x0
   592  000001                     	ds	18
   593  000013                     ?i1___lwdiv:
   594                           	opt stack 0
   595  000013                     i1writeByte@data:
   596                           	opt stack 0
   597  000013                     i1___lwdiv@dividend:
   598                           	opt stack 0
   599                           
   600                           ; 2 bytes @ 0x12
   601  000013                     	ds	1
   602  000014                     i1putch@data:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x13
   606  000014                     	ds	1
   607  000015                     i1___lwdiv@divisor:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x14
   611  000015                     	ds	2
   612  000017                     i1___lwdiv@quotient:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x16
   616  000017                     	ds	2
   617  000019                     i1___lwdiv@counter:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x18
   621  000019                     	ds	1
   622  00001A                     ?i1_printf:
   623                           	opt stack 0
   624  00001A                     i1printf@f:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x19
   628  00001A                     	ds	5
   629  00001F                     i1printf@flag:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x1E
   633  00001F                     	ds	1
   634  000020                     i1printf@ap:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x1F
   638  000020                     	ds	2
   639  000022                     i1printf@idx:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x21
   643  000022                     	ds	1
   644  000023                     i1printf@val:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x22
   648  000023                     	ds	2
   649  000025                     i1printf@prec:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x24
   653  000025                     	ds	1
   654  000026                     i1printf@c:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x25
   658  000026                     	ds	1
   659  000027                     fillDataBuffer@data:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x26
   663  000027                     	ds	1
   664  000028                     ??_LowISR:
   665                           
   666                           ; 1 bytes @ 0x27
   667  000028                     	ds	21
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1l	equ	0xFE1
   676                           
   677 ;;
   678 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   679 ;;
   680 ;; *************** function _main *****************
   681 ;; Defined at:
   682 ;;		line 58 in file "main.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;		None
   685 ;; Auto vars:     Size  Location     Type
   686 ;;		None
   687 ;; Return value:  Size  Location     Type
   688 ;;                  1    wreg      void 
   689 ;; Registers used:
   690 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   691 ;; Tracked objects:
   692 ;;		On entry : 0/0
   693 ;;		On exit  : 0/0
   694 ;;		Unchanged: 0/0
   695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   696 ;;      Params:         0       0       0       0       0       0       0       0       0
   697 ;;      Locals:         0       0       0       0       0       0       0       0       0
   698 ;;      Temps:          0       2       0       0       0       0       0       0       0
   699 ;;      Totals:         0       2       0       0       0       0       0       0       0
   700 ;;Total ram usage:        2 bytes
   701 ;; Hardware stack levels required when called:   12
   702 ;; This function calls:
   703 ;;		_C_DOOR_LockAll
   704 ;;		_C_DOOR_ReadSensors
   705 ;;		_C_DOOR_SendStates
   706 ;;		_C_DOOR_UnlockAll
   707 ;;		_D_PORT_Init
   708 ;;		_D_PWM_Init
   709 ;;		_D_PWM_SetPwm
   710 ;;		_D_TMR0_Init
   711 ;;		_D_UART_Enable
   712 ;;		_D_UART_Init
   713 ;;		_D_UART_Read
   714 ;;		_D_UART_Write
   715 ;;		_initDoors
   716 ;;		_setAlarm
   717 ;;		_strcmp
   718 ;; This function is called by:
   719 ;;		Startup code after reset
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           	psect	text0
   724  00083A                     __ptext0:
   725                           	opt stack 0
   726  00083A                     _main:
   727                           	opt stack 19
   728                           
   729                           ;main.c: 59: _delay((unsigned long)((200)*(16000000/4000.0)));
   730                           
   731                           ;incstack = 0
   732  00083A  0E05               	movlw	5
   733  00083C  0100               	movlb	0	; () banked
   734  00083E  6FFB               	movwf	(??_main+1)& (0+255),b
   735  000840  0E0F               	movlw	15
   736  000842  6FFA               	movwf	??_main& (0+255),b
   737  000844  0EF1               	movlw	241
   738  000846                     u1557:
   739  000846  2EE8               	decfsz	wreg,f,c
   740  000848  D7FE               	bra	u1557
   741  00084A  2FFA               	decfsz	??_main& (0+255),f,b
   742  00084C  D7FC               	bra	u1557
   743  00084E  2FFB               	decfsz	(??_main+1)& (0+255),f,b
   744  000850  D7FA               	bra	u1557
   745                           
   746                           ;main.c: 61: D_PORT_Init();
   747  000852  EC73  F00B         	call	_D_PORT_Init	;wreg free
   748                           
   749                           ;main.c: 65: D_UART_Init("P", 9600, 1);
   750  000856  0E2D               	movlw	low STR_8
   751  000858  0100               	movlb	0	; () banked
   752  00085A  6FE8               	movwf	D_UART_Init@name& (0+255),b
   753  00085C  0E08               	movlw	high STR_8
   754  00085E  6FE9               	movwf	(D_UART_Init@name+1)& (0+255),b
   755  000860  0E25               	movlw	37
   756  000862  6FEB               	movwf	(D_UART_Init@baud+1)& (0+255),b
   757  000864  0E80               	movlw	128
   758  000866  6FEA               	movwf	D_UART_Init@baud& (0+255),b
   759  000868  0E01               	movlw	1
   760  00086A  6FEC               	movwf	D_UART_Init@interrupts& (0+255),b
   761  00086C  EC06  F009         	call	_D_UART_Init	;wreg free
   762                           
   763                           ;main.c: 66: D_UART_Enable(1);
   764  000870  0E01               	movlw	1
   765  000872  EC2F  F00B         	call	_D_UART_Enable
   766                           
   767                           ;main.c: 69: D_TMR0_Init();
   768  000876  EC41  F00B         	call	_D_TMR0_Init	;wreg free
   769                           
   770                           ;main.c: 72: D_PWM_Init();
   771  00087A  EC64  F00B         	call	_D_PWM_Init	;wreg free
   772                           
   773                           ;main.c: 74: _delay((unsigned long)((200)*(16000000/4000.0)));
   774  00087E  0E05               	movlw	5
   775  000880  0100               	movlb	0	; () banked
   776  000882  6FFB               	movwf	(??_main+1)& (0+255),b
   777  000884  0E0F               	movlw	15
   778  000886  6FFA               	movwf	??_main& (0+255),b
   779  000888  0EF1               	movlw	241
   780  00088A                     u1567:
   781  00088A  2EE8               	decfsz	wreg,f,c
   782  00088C  D7FE               	bra	u1567
   783  00088E  2FFA               	decfsz	??_main& (0+255),f,b
   784  000890  D7FC               	bra	u1567
   785  000892  2FFB               	decfsz	(??_main+1)& (0+255),f,b
   786  000894  D7FA               	bra	u1567
   787                           
   788                           ;main.c: 76: newAlarm = 0;
   789  000896  0E00               	movlw	0
   790  000898  0100               	movlb	0	; () banked
   791  00089A  6FD6               	movwf	_newAlarm& (0+255),b
   792                           
   793                           ; BSR set to: 0
   794                           ;main.c: 77: oldAlarm = 0;
   795  00089C  0E00               	movlw	0
   796  00089E  6FD5               	movwf	_oldAlarm& (0+255),b
   797  0008A0                     
   798                           ;main.c: 82: if (readReady) {
   799                           
   800                           ; BSR set to: 0
   801  0008A0  0100               	movlb	0	; () banked
   802  0008A2  51D9               	movf	_readReady& (0+255),w,b
   803  0008A4  B4D8               	btfsc	status,2,c
   804  0008A6  D098               	goto	l276
   805                           
   806                           ; BSR set to: 0
   807                           ;main.c: 83: readReady = 0;
   808  0008A8  0E00               	movlw	0
   809  0008AA  6FD9               	movwf	_readReady& (0+255),b
   810                           
   811                           ; BSR set to: 0
   812                           ;main.c: 84: read = D_UART_Read();
   813  0008AC  EC01  F00B         	call	_D_UART_Read	;wreg free
   814  0008B0  EE20  F0C4         	lfsr	2,_read
   815  0008B4  0E05               	movlw	5
   816  0008B6                     u1441:
   817  0008B6  CFEB FFDB          	movff	plusw0,plusw2
   818  0008BA  06E8               	decf	wreg,f,c
   819  0008BC  E2FC               	bc	u1441
   820                           
   821                           ;main.c: 85: if (strcmp(read.command, "L") == 0) {
   822  0008BE  C0C6  F0DA         	movff	_read+2,strcmp@s1
   823  0008C2  C0C7  F0DB         	movff	_read+3,strcmp@s1+1
   824  0008C6  0E2B               	movlw	low STR_9
   825  0008C8  0100               	movlb	0	; () banked
   826  0008CA  6FDC               	movwf	strcmp@s2& (0+255),b
   827  0008CC  0E08               	movlw	high STR_9
   828  0008CE  6FDD               	movwf	(strcmp@s2+1)& (0+255),b
   829  0008D0  ECDA  F00A         	call	_strcmp	;wreg free
   830  0008D4  0100               	movlb	0	; () banked
   831  0008D6  51DA               	movf	?_strcmp& (0+255),w,b
   832  0008D8  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   833  0008DA  A4D8               	btfss	status,2,c
   834  0008DC  D003               	goto	l265
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 86: C_DOOR_LockAll();
   838  0008DE  EC8C  F00B         	call	_C_DOOR_LockAll	;wreg free
   839                           
   840                           ;main.c: 87: } else if (strcmp(read.command, "U") == 0) {
   841  0008E2  D07A               	goto	l276
   842  0008E4                     l265:
   843  0008E4  C0C6  F0DA         	movff	_read+2,strcmp@s1
   844  0008E8  C0C7  F0DB         	movff	_read+3,strcmp@s1+1
   845  0008EC  0E31               	movlw	low STR_10
   846  0008EE  0100               	movlb	0	; () banked
   847  0008F0  6FDC               	movwf	strcmp@s2& (0+255),b
   848  0008F2  0E08               	movlw	high STR_10
   849  0008F4  6FDD               	movwf	(strcmp@s2+1)& (0+255),b
   850  0008F6  ECDA  F00A         	call	_strcmp	;wreg free
   851  0008FA  0100               	movlb	0	; () banked
   852  0008FC  51DA               	movf	?_strcmp& (0+255),w,b
   853  0008FE  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   854  000900  A4D8               	btfss	status,2,c
   855  000902  D003               	goto	l267
   856                           
   857                           ; BSR set to: 0
   858                           ;main.c: 88: C_DOOR_UnlockAll();
   859  000904  EC93  F00B         	call	_C_DOOR_UnlockAll	;wreg free
   860                           
   861                           ;main.c: 89: } else if (strcmp(read.command, "I") == 0) {
   862  000908  D067               	goto	l276
   863  00090A                     l267:
   864  00090A  C0C6  F0DA         	movff	_read+2,strcmp@s1
   865  00090E  C0C7  F0DB         	movff	_read+3,strcmp@s1+1
   866  000912  0E29               	movlw	low STR_11
   867  000914  0100               	movlb	0	; () banked
   868  000916  6FDC               	movwf	strcmp@s2& (0+255),b
   869  000918  0E08               	movlw	high STR_11
   870  00091A  6FDD               	movwf	(strcmp@s2+1)& (0+255),b
   871  00091C  ECDA  F00A         	call	_strcmp	;wreg free
   872  000920  0100               	movlb	0	; () banked
   873  000922  51DA               	movf	?_strcmp& (0+255),w,b
   874  000924  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   875  000926  A4D8               	btfss	status,2,c
   876  000928  D009               	goto	l269
   877                           
   878                           ; BSR set to: 0
   879                           ;main.c: 90: initDoors((uint8_t)(*read.message - 0x30));
   880  00092A  C0C8  FFD9         	movff	_read+4,fsr2l
   881  00092E  C0C9  FFDA         	movff	_read+5,fsr2h
   882  000932  50DF               	movf	indf2,w,c
   883  000934  0FD0               	addlw	208
   884  000936  EC53  F00B         	call	_initDoors
   885                           
   886                           ;main.c: 91: } else if (strcmp(read.command, "R") == 0) {
   887  00093A  D04E               	goto	l276
   888  00093C                     l269:
   889  00093C  C0C6  F0DA         	movff	_read+2,strcmp@s1
   890  000940  C0C7  F0DB         	movff	_read+3,strcmp@s1+1
   891  000944  0E2F               	movlw	low STR_12
   892  000946  0100               	movlb	0	; () banked
   893  000948  6FDC               	movwf	strcmp@s2& (0+255),b
   894  00094A  0E08               	movlw	high STR_12
   895  00094C  6FDD               	movwf	(strcmp@s2+1)& (0+255),b
   896  00094E  ECDA  F00A         	call	_strcmp	;wreg free
   897  000952  0100               	movlb	0	; () banked
   898  000954  51DA               	movf	?_strcmp& (0+255),w,b
   899  000956  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   900  000958  A4D8               	btfss	status,2,c
   901  00095A  D00B               	goto	l271
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 92: _delay((unsigned long)((20)*(16000000/4000.0)));
   905  00095C  0E68               	movlw	104
   906  00095E  0100               	movlb	0	; () banked
   907  000960  6FFA               	movwf	??_main& (0+255),b
   908  000962  0EE4               	movlw	228
   909  000964                     u1577:
   910  000964  2EE8               	decfsz	wreg,f,c
   911  000966  D7FE               	bra	u1577
   912  000968  2FFA               	decfsz	??_main& (0+255),f,b
   913  00096A  D7FC               	bra	u1577
   914  00096C  F000               	nop	
   915  00096E  00FF               	reset		;# 
   916                           
   917                           ;main.c: 94: } else if (strcmp(read.command, "P") == 0) {
   918  000970  D033               	goto	l276
   919  000972                     l271:
   920  000972  C0C6  F0DA         	movff	_read+2,strcmp@s1
   921  000976  C0C7  F0DB         	movff	_read+3,strcmp@s1+1
   922  00097A  0E2D               	movlw	low STR_8
   923  00097C  0100               	movlb	0	; () banked
   924  00097E  6FDC               	movwf	strcmp@s2& (0+255),b
   925  000980  0E08               	movlw	high STR_8
   926  000982  6FDD               	movwf	(strcmp@s2+1)& (0+255),b
   927  000984  ECDA  F00A         	call	_strcmp	;wreg free
   928  000988  0100               	movlb	0	; () banked
   929  00098A  51DA               	movf	?_strcmp& (0+255),w,b
   930  00098C  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   931  00098E  B4D8               	btfsc	status,2,c
   932  000990  D023               	goto	l276
   933                           
   934                           ; BSR set to: 0
   935                           
   936                           ; BSR set to: 0
   937                           
   938                           ; BSR set to: 0
   939                           ;main.c: 96: } else if (strcmp(read.command, "A") == 0) {
   940  000992  C0C6  F0DA         	movff	_read+2,strcmp@s1
   941  000996  C0C7  F0DB         	movff	_read+3,strcmp@s1+1
   942  00099A  0E25               	movlw	low STR_14
   943  00099C  6FDC               	movwf	strcmp@s2& (0+255),b
   944  00099E  0E08               	movlw	high STR_14
   945  0009A0  6FDD               	movwf	(strcmp@s2+1)& (0+255),b
   946  0009A2  ECDA  F00A         	call	_strcmp	;wreg free
   947  0009A6  0100               	movlb	0	; () banked
   948  0009A8  51DA               	movf	?_strcmp& (0+255),w,b
   949  0009AA  11DB               	iorwf	(?_strcmp+1)& (0+255),w,b
   950  0009AC  A4D8               	btfss	status,2,c
   951  0009AE  D009               	goto	l275
   952                           
   953                           ; BSR set to: 0
   954                           ;main.c: 97: setAlarm((uint8_t)(*read.message - 0x30));
   955  0009B0  C0C8  FFD9         	movff	_read+4,fsr2l
   956  0009B4  C0C9  FFDA         	movff	_read+5,fsr2h
   957  0009B8  50DF               	movf	indf2,w,c
   958  0009BA  0FD0               	addlw	208
   959  0009BC  ECAE  F00B         	call	_setAlarm
   960                           
   961                           ;main.c: 98: } else {
   962  0009C0  D00B               	goto	l276
   963  0009C2                     l275:
   964                           
   965                           ;main.c: 99: D_UART_Write("E", "U");
   966  0009C2  0E27               	movlw	low STR_15
   967  0009C4  0100               	movlb	0	; () banked
   968  0009C6  6FEC               	movwf	D_UART_Write@command& (0+255),b
   969  0009C8  0E08               	movlw	high STR_15
   970  0009CA  6FED               	movwf	(D_UART_Write@command+1)& (0+255),b
   971  0009CC  0E31               	movlw	low STR_10
   972  0009CE  6FEE               	movwf	D_UART_Write@data& (0+255),b
   973  0009D0  0E08               	movlw	high STR_10
   974  0009D2  6FEF               	movwf	(D_UART_Write@data+1)& (0+255),b
   975  0009D4  ECC1  F007         	call	_D_UART_Write	;wreg free
   976  0009D8                     l276:
   977                           
   978                           ;main.c: 100: }
   979                           ;main.c: 101: }
   980                           ;main.c: 104: if (tick) {
   981  0009D8  0100               	movlb	0	; () banked
   982  0009DA  51D8               	movf	_tick& (0+255),w,b
   983  0009DC  B4D8               	btfsc	status,2,c
   984  0009DE  D760               	goto	l263
   985                           
   986                           ; BSR set to: 0
   987                           ;main.c: 105: tick = 0;
   988  0009E0  0E00               	movlw	0
   989  0009E2  6FD8               	movwf	_tick& (0+255),b
   990                           
   991                           ; BSR set to: 0
   992                           ;main.c: 108: C_DOOR_ReadSensors();
   993  0009E4  ECAC  F009         	call	_C_DOOR_ReadSensors	;wreg free
   994                           
   995                           ;main.c: 111: C_DOOR_SendStates();
   996  0009E8  EC31  F008         	call	_C_DOOR_SendStates	;wreg free
   997                           
   998                           ;main.c: 114: if (newAlarm != oldAlarm || newAlarm == 1) {
   999  0009EC  0100               	movlb	0	; () banked
  1000  0009EE  51D5               	movf	_oldAlarm& (0+255),w,b
  1001  0009F0  19D6               	xorwf	_newAlarm& (0+255),w,b
  1002  0009F2  A4D8               	btfss	status,2,c
  1003  0009F4  D00C               	goto	l281
  1004                           
  1005                           ; BSR set to: 0
  1006  0009F6  05D6               	decf	_newAlarm& (0+255),w,b
  1007  0009F8  B4D8               	btfsc	status,2,c
  1008  0009FA  D009               	goto	l281
  1009  0009FC  D751               	goto	l263
  1010  0009FE                     
  1011                           ; BSR set to: 0
  1012                           
  1013                           ; BSR set to: 0
  1014                           
  1015                           ;main.c: 117: case 0: pwm = 0x00; break;
  1016                           
  1017                           ; BSR set to: 0
  1018  0009FE  0E00               	movlw	0
  1019  000A00  D004               	goto	L1
  1020  000A02                     
  1021                           ; BSR set to: 0
  1022                           
  1023                           ; BSR set to: 0
  1024  000A02  0E0A               	movlw	10
  1025  000A04  27D7               	addwf	_pwm& (0+255),f,b
  1026  000A06  D00E               	goto	l284
  1027  000A08                     
  1028                           ; BSR set to: 0
  1029                           
  1030                           ; BSR set to: 0
  1031  000A08  0E7F               	movlw	127
  1032  000A0A                     L1:
  1033  000A0A  6FD7               	movwf	_pwm& (0+255),b
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 120: }
  1037  000A0C  D00B               	goto	l284
  1038  000A0E                     l281:
  1039                           
  1040                           ; BSR set to: 0
  1041                           
  1042                           ; BSR set to: 0
  1043  000A0E  51D6               	movf	_newAlarm& (0+255),w,b
  1044                           
  1045                           ; Switch size 1, requested type "space"
  1046                           ; Number of cases is 3, Range of values is 0 to 2
  1047                           ; switch strategies available:
  1048                           ; Name         Instructions Cycles
  1049                           ; simple_byte           10     6 (average)
  1050                           ;	Chosen strategy is simple_byte
  1051  000A10  0A00               	xorlw	0	; case 0
  1052  000A12  B4D8               	btfsc	status,2,c
  1053  000A14  D7F4               	goto	l282
  1054  000A16  0A01               	xorlw	1	; case 1
  1055  000A18  B4D8               	btfsc	status,2,c
  1056  000A1A  D7F3               	goto	l285
  1057  000A1C  0A03               	xorlw	3	; case 2
  1058  000A1E  B4D8               	btfsc	status,2,c
  1059  000A20  D7F3               	goto	l286
  1060  000A22  D7ED               	goto	l282
  1061  000A24                     l284:
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;main.c: 121: D_PWM_SetPwm(pwm);
  1065                           
  1066                           ; BSR set to: 0
  1067  000A24  51D7               	movf	_pwm& (0+255),w,b
  1068  000A26  EC18  F00B         	call	_D_PWM_SetPwm
  1069                           
  1070                           ;main.c: 122: oldAlarm = newAlarm;
  1071  000A2A  C0D6  F0D5         	movff	_newAlarm,_oldAlarm
  1072  000A2E  D738               	goto	l263
  1073  000A30                     __end_of_main:
  1074                           	opt stack 0
  1075                           tblptru	equ	0xFF8
  1076                           tblptrh	equ	0xFF7
  1077                           tblptrl	equ	0xFF6
  1078                           tablat	equ	0xFF5
  1079                           postinc0	equ	0xFEE
  1080                           plusw0	equ	0xFEB
  1081                           wreg	equ	0xFE8
  1082                           postdec1	equ	0xFE5
  1083                           fsr1l	equ	0xFE1
  1084                           indf2	equ	0xFDF
  1085                           plusw2	equ	0xFDB
  1086                           fsr2h	equ	0xFDA
  1087                           fsr2l	equ	0xFD9
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _strcmp *****************
  1091 ;; Defined at:
  1092 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  1095 ;;		 -> readBuffer(166), 
  1096 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  1097 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
  1098 ;;		 -> STR_10(2), STR_9(2), 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  r               1    5[BANK0 ] char 
  1101 ;; Return value:  Size  Location     Type
  1102 ;;                  2    0[BANK0 ] int 
  1103 ;; Registers used:
  1104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1105 ;; Tracked objects:
  1106 ;;		On entry : 0/0
  1107 ;;		On exit  : 0/0
  1108 ;;		Unchanged: 0/0
  1109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1110 ;;      Params:         0       4       0       0       0       0       0       0       0
  1111 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1112 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1113 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1114 ;;Total ram usage:        6 bytes
  1115 ;; Hardware stack levels used:    1
  1116 ;; Hardware stack levels required when called:    7
  1117 ;; This function calls:
  1118 ;;		Nothing
  1119 ;; This function is called by:
  1120 ;;		_main
  1121 ;; This function uses a non-reentrant model
  1122 ;;
  1123                           
  1124                           	psect	text1
  1125  0015B4                     __ptext1:
  1126                           	opt stack 0
  1127  0015B4                     _strcmp:
  1128                           	opt stack 23
  1129                           
  1130                           ;incstack = 0
  1131  0015B4  D005               	goto	l889
  1132  0015B6  0100               	movlb	0	; () banked
  1133  0015B8  4BDA               	infsnz	strcmp@s1& (0+255),f,b
  1134  0015BA  2BDB               	incf	(strcmp@s1+1)& (0+255),f,b
  1135  0015BC  4BDC               	infsnz	strcmp@s2& (0+255),f,b
  1136  0015BE  2BDD               	incf	(strcmp@s2+1)& (0+255),f,b
  1137  0015C0                     l889:
  1138                           
  1139                           ; BSR set to: 0
  1140  0015C0  C0DA  FFD9         	movff	strcmp@s1,fsr2l
  1141  0015C4  C0DB  FFDA         	movff	strcmp@s1+1,fsr2h
  1142  0015C8  50DF               	movf	indf2,w,c
  1143  0015CA  0100               	movlb	0	; () banked
  1144  0015CC  6FDE               	movwf	??_strcmp& (0+255),b
  1145  0015CE  C0DC  FFF6         	movff	strcmp@s2,tblptrl
  1146  0015D2  C0DD  FFF7         	movff	strcmp@s2+1,tblptrh
  1147  0015D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1148  0015D6  6AF8               	clrf	tblptru,c
  1149  0015D8                     	endif
  1150  0015D8                     	if	0	;tblptru may be non-zero
  1151  0015D8                     	endif
  1152  0015D8  0008               	tblrd		*
  1153  0015DA  50F5               	movf	tablat,w,c
  1154  0015DC  0800               	sublw	0
  1155  0015DE  25DE               	addwf	??_strcmp& (0+255),w,b
  1156  0015E0  6FDF               	movwf	strcmp@r& (0+255),b
  1157  0015E2  51DF               	movf	strcmp@r& (0+255),w,b
  1158  0015E4  A4D8               	btfss	status,2,c
  1159  0015E6  D007               	goto	u1330
  1160                           
  1161                           ; BSR set to: 0
  1162  0015E8  C0DA  FFD9         	movff	strcmp@s1,fsr2l
  1163  0015EC  C0DB  FFDA         	movff	strcmp@s1+1,fsr2h
  1164  0015F0  50DF               	movf	indf2,w,c
  1165  0015F2  A4D8               	btfss	status,2,c
  1166  0015F4  D7E0               	goto	l890
  1167  0015F6                     u1330:
  1168                           
  1169                           ; BSR set to: 0
  1170                           
  1171                           ; BSR set to: 0
  1172                           
  1173                           ; BSR set to: 0
  1174  0015F6  51DF               	movf	strcmp@r& (0+255),w,b
  1175  0015F8  6FDA               	movwf	?_strcmp& (0+255),b
  1176  0015FA  6BDB               	clrf	(?_strcmp+1)& (0+255),b
  1177  0015FC  BFDA               	btfsc	?_strcmp& (0+255),7,b
  1178  0015FE  07DB               	decf	(?_strcmp+1)& (0+255),f,b
  1179  001600  0012               	return	
  1180  001602                     __end_of_strcmp:
  1181                           	opt stack 0
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           plusw0	equ	0xFEB
  1188                           wreg	equ	0xFE8
  1189                           postdec1	equ	0xFE5
  1190                           fsr1l	equ	0xFE1
  1191                           indf2	equ	0xFDF
  1192                           plusw2	equ	0xFDB
  1193                           fsr2h	equ	0xFDA
  1194                           fsr2l	equ	0xFD9
  1195                           status	equ	0xFD8
  1196                           
  1197 ;; *************** function _setAlarm *****************
  1198 ;; Defined at:
  1199 ;;		line 54 in file "main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  alarm           1    wreg     unsigned char 
  1202 ;; Auto vars:     Size  Location     Type
  1203 ;;  alarm           1    0[BANK0 ] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1213 ;;      Params:         0       0       0       0       0       0       0       0       0
  1214 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1215 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1216 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1217 ;;Total ram usage:        1 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    7
  1220 ;; This function calls:
  1221 ;;		Nothing
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text2
  1228  00175C                     __ptext2:
  1229                           	opt stack 0
  1230  00175C                     _setAlarm:
  1231                           	opt stack 23
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;incstack = 0
  1235                           ;setAlarm@alarm stored from wreg
  1236  00175C  0100               	movlb	0	; () banked
  1237  00175E  6FDA               	movwf	setAlarm@alarm& (0+255),b
  1238                           
  1239                           ;main.c: 55: newAlarm = alarm;
  1240  001760  C0DA  F0D6         	movff	setAlarm@alarm,_newAlarm
  1241  001764  0012               	return		;funcret
  1242  001766                     __end_of_setAlarm:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           postinc0	equ	0xFEE
  1249                           plusw0	equ	0xFEB
  1250                           wreg	equ	0xFE8
  1251                           postdec1	equ	0xFE5
  1252                           fsr1l	equ	0xFE1
  1253                           indf2	equ	0xFDF
  1254                           plusw2	equ	0xFDB
  1255                           fsr2h	equ	0xFDA
  1256                           fsr2l	equ	0xFD9
  1257                           status	equ	0xFD8
  1258                           
  1259 ;; *************** function _initDoors *****************
  1260 ;; Defined at:
  1261 ;;		line 42 in file "main.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;  door_cnt        1    wreg     unsigned char 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  door_cnt        1    5[BANK0 ] unsigned char 
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1275 ;;      Params:         0       0       0       0       0       0       0       0       0
  1276 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1278 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1279 ;;Total ram usage:        1 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; Hardware stack levels required when called:    8
  1282 ;; This function calls:
  1283 ;;		_C_DOOR_Init
  1284 ;;		_C_DOOR_LockAll
  1285 ;;		_D_TMR0_Enable
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           	psect	text3
  1292  0016A6                     __ptext3:
  1293                           	opt stack 0
  1294  0016A6                     _initDoors:
  1295                           	opt stack 22
  1296                           
  1297                           ;incstack = 0
  1298                           ;initDoors@door_cnt stored from wreg
  1299  0016A6  0100               	movlb	0	; () banked
  1300  0016A8  6FDF               	movwf	initDoors@door_cnt& (0+255),b
  1301                           
  1302                           ;main.c: 43: if (door_cnt < 1) {
  1303  0016AA  0100               	movlb	0	; () banked
  1304  0016AC  51DF               	movf	initDoors@door_cnt& (0+255),w,b
  1305  0016AE  A4D8               	btfss	status,2,c
  1306  0016B0  D002               	goto	l254
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 44: door_cnt = 1;
  1310  0016B2  0E01               	movlw	1
  1311  0016B4  6FDF               	movwf	initDoors@door_cnt& (0+255),b
  1312  0016B6                     l254:
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;main.c: 45: }
  1316                           ;main.c: 47: C_DOOR_Init(door_cnt);
  1317                           
  1318                           ; BSR set to: 0
  1319  0016B6  51DF               	movf	initDoors@door_cnt& (0+255),w,b
  1320  0016B8  EC35  F007         	call	_C_DOOR_Init
  1321                           
  1322                           ;main.c: 48: C_DOOR_LockAll();
  1323  0016BC  EC8C  F00B         	call	_C_DOOR_LockAll	;wreg free
  1324                           
  1325                           ;main.c: 51: D_TMR0_Enable(1);
  1326  0016C0  0E01               	movlw	1
  1327  0016C2  EC82  F00B         	call	_D_TMR0_Enable
  1328  0016C6  0012               	return		;funcret
  1329  0016C8                     __end_of_initDoors:
  1330                           	opt stack 0
  1331                           tblptru	equ	0xFF8
  1332                           tblptrh	equ	0xFF7
  1333                           tblptrl	equ	0xFF6
  1334                           tablat	equ	0xFF5
  1335                           postinc0	equ	0xFEE
  1336                           plusw0	equ	0xFEB
  1337                           wreg	equ	0xFE8
  1338                           postdec1	equ	0xFE5
  1339                           fsr1l	equ	0xFE1
  1340                           indf2	equ	0xFDF
  1341                           plusw2	equ	0xFDB
  1342                           fsr2h	equ	0xFDA
  1343                           fsr2l	equ	0xFD9
  1344                           status	equ	0xFD8
  1345                           
  1346 ;; *************** function _C_DOOR_LockAll *****************
  1347 ;; Defined at:
  1348 ;;		line 76 in file "Controllers/DOOR_Controller.c"
  1349 ;; Parameters:    Size  Location     Type
  1350 ;;		None
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  1    wreg      void 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr2l, fsr2h
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1362 ;;      Params:         0       0       0       0       0       0       0       0       0
  1363 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1364 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1365 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1366 ;;Total ram usage:        0 bytes
  1367 ;; Hardware stack levels used:    1
  1368 ;; Hardware stack levels required when called:    7
  1369 ;; This function calls:
  1370 ;;		Nothing
  1371 ;; This function is called by:
  1372 ;;		_initDoors
  1373 ;;		_main
  1374 ;; This function uses a non-reentrant model
  1375 ;;
  1376                           
  1377                           	psect	text4
  1378  001718                     __ptext4:
  1379                           	opt stack 0
  1380  001718                     _C_DOOR_LockAll:
  1381                           	opt stack 22
  1382                           
  1383                           ;DOOR_Controller.c: 81: *doors[0].lock_port |= 0xC0;
  1384                           
  1385                           ;incstack = 0
  1386  001718  C062  FFD9         	movff	_doors+2,fsr2l
  1387  00171C  C063  FFDA         	movff	_doors+3,fsr2h
  1388  001720  0EC0               	movlw	192
  1389  001722  12DF               	iorwf	indf2,f,c
  1390  001724  0012               	return		;funcret
  1391  001726                     __end_of_C_DOOR_LockAll:
  1392                           	opt stack 0
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           postinc0	equ	0xFEE
  1398                           plusw0	equ	0xFEB
  1399                           wreg	equ	0xFE8
  1400                           postdec1	equ	0xFE5
  1401                           fsr1l	equ	0xFE1
  1402                           indf2	equ	0xFDF
  1403                           plusw2	equ	0xFDB
  1404                           fsr2h	equ	0xFDA
  1405                           fsr2l	equ	0xFD9
  1406                           status	equ	0xFD8
  1407                           
  1408 ;; *************** function _C_DOOR_Init *****************
  1409 ;; Defined at:
  1410 ;;		line 45 in file "Controllers/DOOR_Controller.c"
  1411 ;; Parameters:    Size  Location     Type
  1412 ;;  cnt             1    wreg     unsigned char 
  1413 ;; Auto vars:     Size  Location     Type
  1414 ;;  cnt             1    3[BANK0 ] unsigned char 
  1415 ;;  d               1    4[BANK0 ] unsigned char 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      void 
  1418 ;; Registers used:
  1419 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1425 ;;      Params:         0       0       0       0       0       0       0       0       0
  1426 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1427 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1428 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1429 ;;Total ram usage:        5 bytes
  1430 ;; Hardware stack levels used:    1
  1431 ;; Hardware stack levels required when called:    7
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_initDoors
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text5
  1440  000E6A                     __ptext5:
  1441                           	opt stack 0
  1442  000E6A                     _C_DOOR_Init:
  1443                           	opt stack 22
  1444                           
  1445                           ;incstack = 0
  1446                           ;C_DOOR_Init@cnt stored from wreg
  1447  000E6A  0100               	movlb	0	; () banked
  1448  000E6C  6FDD               	movwf	C_DOOR_Init@cnt& (0+255),b
  1449                           
  1450                           ;DOOR_Controller.c: 47: TRISB &= 0x3F;
  1451  000E6E  0E3F               	movlw	63
  1452  000E70  1693               	andwf	3987,f,c	;volatile
  1453                           
  1454                           ;DOOR_Controller.c: 48: TRISB |= 0x3F;
  1455  000E72  0E3F               	movlw	63
  1456  000E74  1293               	iorwf	3987,f,c	;volatile
  1457                           
  1458                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1459  000E76  C0DD  F0D3         	movff	C_DOOR_Init@cnt,_door_cnt
  1460  000E7A  0100               	movlb	0	; () banked
  1461  000E7C  6BD4               	clrf	(_door_cnt+1)& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;DOOR_Controller.c: 52: uint8_t d;
  1465                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1466  000E7E  0E00               	movlw	0
  1467  000E80  6FDE               	movwf	C_DOOR_Init@d& (0+255),b
  1468  000E82  D071               	goto	l18
  1469  000E84                     
  1470                           ; BSR set to: 0
  1471                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1472                           
  1473                           ; BSR set to: 0
  1474  000E84  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1475  000E86  0D0A               	mullw	10
  1476  000E88  0E60               	movlw	low _doors
  1477  000E8A  24F3               	addwf	prodl,w,c
  1478  000E8C  6ED9               	movwf	fsr2l,c
  1479  000E8E  0E00               	movlw	high _doors
  1480  000E90  20F4               	addwfc	prodh,w,c
  1481  000E92  6EDA               	movwf	fsr2h,c
  1482  000E94  C0DE  FFDF         	movff	C_DOOR_Init@d,indf2
  1483                           
  1484                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1485  000E98  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1486  000E9A  0D0A               	mullw	10
  1487  000E9C  0E01               	movlw	1
  1488  000E9E  26F3               	addwf	prodl,f,c
  1489  000EA0  0E00               	movlw	0
  1490  000EA2  22F4               	addwfc	prodh,f,c
  1491  000EA4  0E60               	movlw	low _doors
  1492  000EA6  24F3               	addwf	prodl,w,c
  1493  000EA8  6ED9               	movwf	fsr2l,c
  1494  000EAA  0E00               	movlw	high _doors
  1495  000EAC  20F4               	addwfc	prodh,w,c
  1496  000EAE  6EDA               	movwf	fsr2h,c
  1497  000EB0  0E01               	movlw	1
  1498  000EB2  6EDF               	movwf	indf2,c
  1499                           
  1500                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1501  000EB4  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1502  000EB6  0D0A               	mullw	10
  1503  000EB8  0E02               	movlw	2
  1504  000EBA  26F3               	addwf	prodl,f,c
  1505  000EBC  0E00               	movlw	0
  1506  000EBE  22F4               	addwfc	prodh,f,c
  1507  000EC0  0E60               	movlw	low _doors
  1508  000EC2  24F3               	addwf	prodl,w,c
  1509  000EC4  6ED9               	movwf	fsr2l,c
  1510  000EC6  0E00               	movlw	high _doors
  1511  000EC8  20F4               	addwfc	prodh,w,c
  1512  000ECA  6EDA               	movwf	fsr2h,c
  1513  000ECC  0E81               	movlw	129
  1514  000ECE  6EDE               	movwf	postinc2,c
  1515  000ED0  0E0F               	movlw	15
  1516  000ED2  6EDD               	movwf	postdec2,c
  1517                           
  1518                           ;DOOR_Controller.c: 58: doors[d].lock_pin = 7;
  1519  000ED4  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1520  000ED6  0D0A               	mullw	10
  1521  000ED8  0E04               	movlw	4
  1522  000EDA  26F3               	addwf	prodl,f,c
  1523  000EDC  0E00               	movlw	0
  1524  000EDE  22F4               	addwfc	prodh,f,c
  1525  000EE0  0E60               	movlw	low _doors
  1526  000EE2  24F3               	addwf	prodl,w,c
  1527  000EE4  6ED9               	movwf	fsr2l,c
  1528  000EE6  0E00               	movlw	high _doors
  1529  000EE8  20F4               	addwfc	prodh,w,c
  1530  000EEA  6EDA               	movwf	fsr2h,c
  1531  000EEC  0E07               	movlw	7
  1532  000EEE  6EDF               	movwf	indf2,c
  1533                           
  1534                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1535  000EF0  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1536  000EF2  0D0A               	mullw	10
  1537  000EF4  0E06               	movlw	6
  1538  000EF6  26F3               	addwf	prodl,f,c
  1539  000EF8  0E00               	movlw	0
  1540  000EFA  22F4               	addwfc	prodh,f,c
  1541  000EFC  0E60               	movlw	low _doors
  1542  000EFE  24F3               	addwf	prodl,w,c
  1543  000F00  6ED9               	movwf	fsr2l,c
  1544  000F02  0E00               	movlw	high _doors
  1545  000F04  20F4               	addwfc	prodh,w,c
  1546  000F06  6EDA               	movwf	fsr2h,c
  1547  000F08  0E00               	movlw	0
  1548  000F0A  6EDF               	movwf	indf2,c
  1549                           
  1550                           ;DOOR_Controller.c: 61: doors[d].was_open = 1;
  1551  000F0C  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1552  000F0E  0D0A               	mullw	10
  1553  000F10  0E05               	movlw	5
  1554  000F12  26F3               	addwf	prodl,f,c
  1555  000F14  0E00               	movlw	0
  1556  000F16  22F4               	addwfc	prodh,f,c
  1557  000F18  0E60               	movlw	low _doors
  1558  000F1A  24F3               	addwf	prodl,w,c
  1559  000F1C  6ED9               	movwf	fsr2l,c
  1560  000F1E  0E00               	movlw	high _doors
  1561  000F20  20F4               	addwfc	prodh,w,c
  1562  000F22  6EDA               	movwf	fsr2h,c
  1563  000F24  0E01               	movlw	1
  1564  000F26  6EDF               	movwf	indf2,c
  1565                           
  1566                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTB;
  1567  000F28  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1568  000F2A  0D0A               	mullw	10
  1569  000F2C  0E07               	movlw	7
  1570  000F2E  26F3               	addwf	prodl,f,c
  1571  000F30  0E00               	movlw	0
  1572  000F32  22F4               	addwfc	prodh,f,c
  1573  000F34  0E60               	movlw	low _doors
  1574  000F36  24F3               	addwf	prodl,w,c
  1575  000F38  6ED9               	movwf	fsr2l,c
  1576  000F3A  0E00               	movlw	high _doors
  1577  000F3C  20F4               	addwfc	prodh,w,c
  1578  000F3E  6EDA               	movwf	fsr2h,c
  1579  000F40  0E81               	movlw	129
  1580  000F42  6EDE               	movwf	postinc2,c
  1581  000F44  0E0F               	movlw	15
  1582  000F46  6EDD               	movwf	postdec2,c
  1583                           
  1584                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = d;
  1585  000F48  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1586  000F4A  0D0A               	mullw	10
  1587  000F4C  0E09               	movlw	9
  1588  000F4E  26F3               	addwf	prodl,f,c
  1589  000F50  0E00               	movlw	0
  1590  000F52  22F4               	addwfc	prodh,f,c
  1591  000F54  0E60               	movlw	low _doors
  1592  000F56  24F3               	addwf	prodl,w,c
  1593  000F58  6ED9               	movwf	fsr2l,c
  1594  000F5A  0E00               	movlw	high _doors
  1595  000F5C  20F4               	addwfc	prodh,w,c
  1596  000F5E  6EDA               	movwf	fsr2h,c
  1597  000F60  C0DE  FFDF         	movff	C_DOOR_Init@d,indf2
  1598                           
  1599                           ; BSR set to: 0
  1600  000F64  2BDE               	incf	C_DOOR_Init@d& (0+255),f,b
  1601  000F66                     l18:
  1602                           
  1603                           ; BSR set to: 0
  1604                           
  1605                           ; BSR set to: 0
  1606  000F66  51DE               	movf	C_DOOR_Init@d& (0+255),w,b
  1607  000F68  6FDA               	movwf	??_C_DOOR_Init& (0+255),b
  1608  000F6A  6BDB               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1609  000F6C  51D3               	movf	_door_cnt& (0+255),w,b
  1610  000F6E  5DDA               	subwf	??_C_DOOR_Init& (0+255),w,b
  1611  000F70  51DB               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1612  000F72  0A80               	xorlw	128
  1613  000F74  6FDC               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1614  000F76  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  1615  000F78  0A80               	xorlw	128
  1616  000F7A  59DC               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1617  000F7C  B0D8               	btfsc	status,0,c
  1618  000F7E  0012               	return	
  1619  000F80  D781               	goto	l19
  1620  000F82                     __end_of_C_DOOR_Init:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           prodh	equ	0xFF4
  1627                           prodl	equ	0xFF3
  1628                           postinc0	equ	0xFEE
  1629                           plusw0	equ	0xFEB
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           indf2	equ	0xFDF
  1634                           postinc2	equ	0xFDE
  1635                           postdec2	equ	0xFDD
  1636                           plusw2	equ	0xFDB
  1637                           fsr2h	equ	0xFDA
  1638                           fsr2l	equ	0xFD9
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _D_UART_Read *****************
  1642 ;; Defined at:
  1643 ;;		line 240 in file "Drivers/UART_Driver.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;		None
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;		None
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  6    0[BANK0 ] struct .
  1650 ;; Registers used:
  1651 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1657 ;;      Params:         0       6       0       0       0       0       0       0       0
  1658 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1660 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1661 ;;Total ram usage:        6 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    7
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_main
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text6
  1672  001602                     __ptext6:
  1673                           	opt stack 0
  1674  001602                     _D_UART_Read:
  1675                           	opt stack 23
  1676                           
  1677                           ;UART_Driver.c: 241: readData.sender = readBuffer.sender;
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;incstack = 0
  1681  001602  0E0B               	movlw	low (_readBuffer+11)
  1682  001604  0100               	movlb	0	; () banked
  1683  001606  6FCA               	movwf	_readData& (0+255),b
  1684  001608  0E01               	movlw	high (_readBuffer+11)
  1685  00160A  6FCB               	movwf	(_readData+1)& (0+255),b
  1686                           
  1687                           ;UART_Driver.c: 242: readData.command = readBuffer.command;
  1688  00160C  0E3E               	movlw	low (_readBuffer+62)
  1689  00160E  6FCC               	movwf	(_readData+2)& (0+255),b
  1690  001610  0E01               	movlw	high (_readBuffer+62)
  1691  001612  6FCD               	movwf	(_readData+3)& (0+255),b
  1692                           
  1693                           ;UART_Driver.c: 243: readData.message = readBuffer.message;
  1694  001614  0E71               	movlw	low (_readBuffer+113)
  1695  001616  6FCE               	movwf	(_readData+4)& (0+255),b
  1696  001618  0E01               	movlw	high (_readBuffer+113)
  1697  00161A  6FCF               	movwf	(_readData+5)& (0+255),b
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;UART_Driver.c: 244: return readData;
  1701  00161C  EE20  F0CA         	lfsr	2,_readData
  1702  001620  EE00  F0DA         	lfsr	0,?_D_UART_Read
  1703  001624  0E05               	movlw	5
  1704  001626                     u1301:
  1705  001626  CFDB FFEB          	movff	plusw2,plusw0
  1706  00162A  06E8               	decf	wreg,f,c
  1707  00162C  E2FC               	bc	u1301
  1708  00162E  0012               	return	
  1709  001630                     __end_of_D_UART_Read:
  1710                           	opt stack 0
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           prodh	equ	0xFF4
  1716                           prodl	equ	0xFF3
  1717                           postinc0	equ	0xFEE
  1718                           plusw0	equ	0xFEB
  1719                           wreg	equ	0xFE8
  1720                           postdec1	equ	0xFE5
  1721                           fsr1l	equ	0xFE1
  1722                           indf2	equ	0xFDF
  1723                           postinc2	equ	0xFDE
  1724                           postdec2	equ	0xFDD
  1725                           plusw2	equ	0xFDB
  1726                           fsr2h	equ	0xFDA
  1727                           fsr2l	equ	0xFD9
  1728                           status	equ	0xFD8
  1729                           
  1730 ;; *************** function _D_UART_Init *****************
  1731 ;; Defined at:
  1732 ;;		line 182 in file "Drivers/UART_Driver.c"
  1733 ;; Parameters:    Size  Location     Type
  1734 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1735 ;;		 -> STR_8(2), 
  1736 ;;  baud            2   16[BANK0 ] unsigned int 
  1737 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1738 ;; Auto vars:     Size  Location     Type
  1739 ;;		None
  1740 ;; Return value:  Size  Location     Type
  1741 ;;                  1    wreg      void 
  1742 ;; Registers used:
  1743 ;;		wreg, status,2, status,0, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1749 ;;      Params:         0       5       0       0       0       0       0       0       0
  1750 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1752 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1753 ;;Total ram usage:        9 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    8
  1756 ;; This function calls:
  1757 ;;		_D_UART_Enable
  1758 ;;		___aldiv
  1759 ;; This function is called by:
  1760 ;;		_main
  1761 ;; This function uses a non-reentrant model
  1762 ;;
  1763                           
  1764                           	psect	text7
  1765  00120C                     __ptext7:
  1766                           	opt stack 0
  1767  00120C                     _D_UART_Init:
  1768                           	opt stack 22
  1769                           
  1770                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;incstack = 0
  1774  00120C  9E94               	bcf	3988,7,c	;volatile
  1775                           
  1776                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1777  00120E  8C94               	bsf	3988,6,c	;volatile
  1778                           
  1779                           ;UART_Driver.c: 188: deviceName = name;
  1780  001210  C0E8  F0D0         	movff	D_UART_Init@name,_deviceName
  1781  001214  C0E9  F0D1         	movff	D_UART_Init@name+1,_deviceName+1
  1782  001218  0100               	movlb	0	; () banked
  1783  00121A  51D0               	movf	_deviceName& (0+255),w,b
  1784  00121C  11D1               	iorwf	(_deviceName+1)& (0+255),w,b
  1785  00121E  A4D8               	btfss	status,2,c
  1786  001220  0E00               	movlw	low (__mediumconst shr (0+16))
  1787  001222  6FD2               	movwf	(_deviceName+2)& (0+255),b
  1788                           
  1789                           ; BSR set to: 0
  1790                           ;UART_Driver.c: 189: readReady = 0;
  1791  001224  0E00               	movlw	0
  1792  001226  6FD9               	movwf	_readReady& (0+255),b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1796  001228  0E00               	movlw	0
  1797  00122A  EC2F  F00B         	call	_D_UART_Enable
  1798                           
  1799                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1800  00122E  9CAC               	bcf	4012,6,c	;volatile
  1801                           
  1802                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1803  001230  98AC               	bcf	4012,4,c	;volatile
  1804                           
  1805                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1806  001232  94AC               	bcf	4012,2,c	;volatile
  1807                           
  1808                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1809  001234  9CAB               	bcf	4011,6,c	;volatile
  1810                           
  1811                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1812  001236  9AB8               	bcf	4024,5,c	;volatile
  1813                           
  1814                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1815  001238  98B8               	bcf	4024,4,c	;volatile
  1816                           
  1817                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1818  00123A  96B8               	bcf	4024,3,c	;volatile
  1819                           
  1820                           ;UART_Driver.c: 208: RCSTAbits.FERR = 0;
  1821  00123C  94AB               	bcf	4011,2,c	;volatile
  1822                           
  1823                           ;UART_Driver.c: 209: RCSTAbits.OERR = 0;
  1824  00123E  92AB               	bcf	4011,1,c	;volatile
  1825                           
  1826                           ;UART_Driver.c: 210: RCREG = 0x00;
  1827  001240  0E00               	movlw	0
  1828  001242  6EAE               	movwf	4014,c	;volatile
  1829                           
  1830                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1831  001244  C0EA  F0DE         	movff	D_UART_Init@baud,___aldiv@divisor
  1832  001248  C0EB  F0DF         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1833  00124C  0100               	movlb	0	; () banked
  1834  00124E  6BE0               	clrf	(___aldiv@divisor+2)& (0+255),b
  1835  001250  6BE1               	clrf	(___aldiv@divisor+3)& (0+255),b
  1836  001252  0E00               	movlw	0
  1837  001254  6FDA               	movwf	___aldiv@dividend& (0+255),b
  1838  001256  0E24               	movlw	36
  1839  001258  6FDB               	movwf	(___aldiv@dividend+1)& (0+255),b
  1840  00125A  0EF4               	movlw	244
  1841  00125C  6FDC               	movwf	(___aldiv@dividend+2)& (0+255),b
  1842  00125E  0E00               	movlw	0
  1843  001260  6FDD               	movwf	(___aldiv@dividend+3)& (0+255),b
  1844  001262  EC9F  F008         	call	___aldiv	;wreg free
  1845  001266  C0DA  F0ED         	movff	?___aldiv,_D_UART_Init$1672
  1846  00126A  C0DB  F0EE         	movff	?___aldiv+1,_D_UART_Init$1672+1
  1847  00126E  C0DC  F0EF         	movff	?___aldiv+2,_D_UART_Init$1672+2
  1848  001272  C0DD  F0F0         	movff	?___aldiv+3,_D_UART_Init$1672+3
  1849                           
  1850                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1851  001276  C0ED  F0DA         	movff	_D_UART_Init$1672,___aldiv@dividend
  1852  00127A  C0EE  F0DB         	movff	_D_UART_Init$1672+1,___aldiv@dividend+1
  1853  00127E  C0EF  F0DC         	movff	_D_UART_Init$1672+2,___aldiv@dividend+2
  1854  001282  C0F0  F0DD         	movff	_D_UART_Init$1672+3,___aldiv@dividend+3
  1855  001286  0E40               	movlw	64
  1856  001288  0100               	movlb	0	; () banked
  1857  00128A  6FDE               	movwf	___aldiv@divisor& (0+255),b
  1858  00128C  0E00               	movlw	0
  1859  00128E  6FDF               	movwf	(___aldiv@divisor+1)& (0+255),b
  1860  001290  0E00               	movlw	0
  1861  001292  6FE0               	movwf	(___aldiv@divisor+2)& (0+255),b
  1862  001294  0E00               	movlw	0
  1863  001296  6FE1               	movwf	(___aldiv@divisor+3)& (0+255),b
  1864  001298  EC9F  F008         	call	___aldiv	;wreg free
  1865  00129C  0100               	movlb	0	; () banked
  1866  00129E  05DA               	decf	?___aldiv& (0+255),w,b
  1867  0012A0  6EAF               	movwf	4015,c	;volatile
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;UART_Driver.c: 216: if (interrupts) {
  1871  0012A2  51EC               	movf	D_UART_Init@interrupts& (0+255),w,b
  1872  0012A4  B4D8               	btfsc	status,2,c
  1873  0012A6  0012               	return	
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;UART_Driver.c: 217: RCONbits.IPEN = 1;
  1877  0012A8  8ED0               	bsf	4048,7,c	;volatile
  1878                           
  1879                           ;UART_Driver.c: 218: INTCONbits.GIEH = 1;
  1880  0012AA  8EF2               	bsf	intcon,7,c	;volatile
  1881                           
  1882                           ;UART_Driver.c: 219: INTCONbits.GIEL = 1;
  1883  0012AC  8CF2               	bsf	intcon,6,c	;volatile
  1884                           
  1885                           ;UART_Driver.c: 220: PIR1bits.RCIF = 0;
  1886  0012AE  9A9E               	bcf	3998,5,c	;volatile
  1887                           
  1888                           ;UART_Driver.c: 221: IPR1bits.RCIP = 0;
  1889  0012B0  9A9F               	bcf	3999,5,c	;volatile
  1890                           
  1891                           ;UART_Driver.c: 222: PIE1bits.RCIE = 1;
  1892  0012B2  8A9D               	bsf	3997,5,c	;volatile
  1893  0012B4  0012               	return	
  1894  0012B6                     __end_of_D_UART_Init:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           intcon	equ	0xFF2
  1903                           postinc0	equ	0xFEE
  1904                           plusw0	equ	0xFEB
  1905                           wreg	equ	0xFE8
  1906                           postdec1	equ	0xFE5
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           postdec2	equ	0xFDD
  1911                           plusw2	equ	0xFDB
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function ___aldiv *****************
  1917 ;; Defined at:
  1918 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;  dividend        4    0[BANK0 ] long 
  1921 ;;  divisor         4    4[BANK0 ] long 
  1922 ;; Auto vars:     Size  Location     Type
  1923 ;;  quotient        4   10[BANK0 ] long 
  1924 ;;  sign            1    9[BANK0 ] unsigned char 
  1925 ;;  counter         1    8[BANK0 ] unsigned char 
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  4    0[BANK0 ] long 
  1928 ;; Registers used:
  1929 ;;		wreg, status,2, status,0
  1930 ;; Tracked objects:
  1931 ;;		On entry : 0/0
  1932 ;;		On exit  : 0/0
  1933 ;;		Unchanged: 0/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1935 ;;      Params:         0       8       0       0       0       0       0       0       0
  1936 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1938 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1939 ;;Total ram usage:       14 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    7
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		_D_UART_Init
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text8
  1950  00113E                     __ptext8:
  1951                           	opt stack 0
  1952  00113E                     ___aldiv:
  1953                           	opt stack 22
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;incstack = 0
  1957  00113E  0E00               	movlw	0
  1958  001140  0100               	movlb	0	; () banked
  1959  001142  6FE3               	movwf	___aldiv@sign& (0+255),b
  1960                           
  1961                           ; BSR set to: 0
  1962  001144  AFE1               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1963  001146  D00A               	goto	l397
  1964                           
  1965                           ; BSR set to: 0
  1966  001148  1FE1               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1967  00114A  1FE0               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1968  00114C  1FDF               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1969  00114E  6DDE               	negf	___aldiv@divisor& (0+255),b
  1970  001150  0E00               	movlw	0
  1971  001152  23DF               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1972  001154  23E0               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1973  001156  23E1               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1974                           
  1975                           ; BSR set to: 0
  1976  001158  0E01               	movlw	1
  1977  00115A  6FE3               	movwf	___aldiv@sign& (0+255),b
  1978  00115C                     l397:
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  00115C  AFDD               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1984  00115E  D00A               	goto	l398
  1985                           
  1986                           ; BSR set to: 0
  1987  001160  1FDD               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1988  001162  1FDC               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1989  001164  1FDB               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1990  001166  6DDA               	negf	___aldiv@dividend& (0+255),b
  1991  001168  0E00               	movlw	0
  1992  00116A  23DB               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1993  00116C  23DC               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1994  00116E  23DD               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1995                           
  1996                           ; BSR set to: 0
  1997  001170  0E01               	movlw	1
  1998  001172  1BE3               	xorwf	___aldiv@sign& (0+255),f,b
  1999  001174                     l398:
  2000                           
  2001                           ; BSR set to: 0
  2002                           
  2003                           ; BSR set to: 0
  2004  001174  0E00               	movlw	0
  2005  001176  6FE4               	movwf	___aldiv@quotient& (0+255),b
  2006  001178  0E00               	movlw	0
  2007  00117A  6FE5               	movwf	(___aldiv@quotient+1)& (0+255),b
  2008  00117C  0E00               	movlw	0
  2009  00117E  6FE6               	movwf	(___aldiv@quotient+2)& (0+255),b
  2010  001180  0E00               	movlw	0
  2011  001182  6FE7               	movwf	(___aldiv@quotient+3)& (0+255),b
  2012                           
  2013                           ; BSR set to: 0
  2014  001184  51DE               	movf	___aldiv@divisor& (0+255),w,b
  2015  001186  11DF               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  2016  001188  11E0               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  2017  00118A  11E1               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  2018  00118C  B4D8               	btfsc	status,2,c
  2019  00118E  D02A               	goto	l405
  2020                           
  2021                           ; BSR set to: 0
  2022  001190  0E01               	movlw	1
  2023  001192  6FE2               	movwf	___aldiv@counter& (0+255),b
  2024  001194  D006               	goto	l400
  2025  001196                     
  2026                           ; BSR set to: 0
  2027                           
  2028                           ; BSR set to: 0
  2029  001196  90D8               	bcf	status,0,c
  2030  001198  37DE               	rlcf	___aldiv@divisor& (0+255),f,b
  2031  00119A  37DF               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  2032  00119C  37E0               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  2033  00119E  37E1               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  2034  0011A0  2BE2               	incf	___aldiv@counter& (0+255),f,b
  2035  0011A2                     l400:
  2036                           
  2037                           ; BSR set to: 0
  2038                           
  2039                           ; BSR set to: 0
  2040  0011A2  AFE1               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  2041  0011A4  D7F8               	goto	l401
  2042  0011A6                     u1110:
  2043                           
  2044                           ; BSR set to: 0
  2045                           
  2046                           ; BSR set to: 0
  2047                           
  2048                           ; BSR set to: 0
  2049  0011A6  90D8               	bcf	status,0,c
  2050  0011A8  37E4               	rlcf	___aldiv@quotient& (0+255),f,b
  2051  0011AA  37E5               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2052  0011AC  37E6               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2053  0011AE  37E7               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2054                           
  2055                           ; BSR set to: 0
  2056  0011B0  51DE               	movf	___aldiv@divisor& (0+255),w,b
  2057  0011B2  5DDA               	subwf	___aldiv@dividend& (0+255),w,b
  2058  0011B4  51DF               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2059  0011B6  59DB               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2060  0011B8  51E0               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2061  0011BA  59DC               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2062  0011BC  51E1               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2063  0011BE  59DD               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2064  0011C0  A0D8               	btfss	status,0,c
  2065  0011C2  D009               	goto	l404
  2066                           
  2067                           ; BSR set to: 0
  2068  0011C4  51DE               	movf	___aldiv@divisor& (0+255),w,b
  2069  0011C6  5FDA               	subwf	___aldiv@dividend& (0+255),f,b
  2070  0011C8  51DF               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2071  0011CA  5BDB               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2072  0011CC  51E0               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2073  0011CE  5BDC               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2074  0011D0  51E1               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2075  0011D2  5BDD               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2076                           
  2077                           ; BSR set to: 0
  2078  0011D4  81E4               	bsf	___aldiv@quotient& (0+255),0,b
  2079  0011D6                     l404:
  2080                           
  2081                           ; BSR set to: 0
  2082                           
  2083                           ; BSR set to: 0
  2084  0011D6  90D8               	bcf	status,0,c
  2085  0011D8  33E1               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2086  0011DA  33E0               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2087  0011DC  33DF               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2088  0011DE  33DE               	rrcf	___aldiv@divisor& (0+255),f,b
  2089                           
  2090                           ; BSR set to: 0
  2091  0011E0  2FE2               	decfsz	___aldiv@counter& (0+255),f,b
  2092  0011E2  D7E1               	goto	u1110
  2093  0011E4                     l405:
  2094                           
  2095                           ; BSR set to: 0
  2096                           
  2097                           ; BSR set to: 0
  2098                           
  2099                           ; BSR set to: 0
  2100  0011E4  51E3               	movf	___aldiv@sign& (0+255),w,b
  2101  0011E6  B4D8               	btfsc	status,2,c
  2102  0011E8  D008               	goto	l406
  2103                           
  2104                           ; BSR set to: 0
  2105  0011EA  1FE7               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2106  0011EC  1FE6               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2107  0011EE  1FE5               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2108  0011F0  6DE4               	negf	___aldiv@quotient& (0+255),b
  2109  0011F2  0E00               	movlw	0
  2110  0011F4  23E5               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2111  0011F6  23E6               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2112  0011F8  23E7               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2113  0011FA                     l406:
  2114                           
  2115                           ; BSR set to: 0
  2116                           
  2117                           ; BSR set to: 0
  2118  0011FA  C0E4  F0DA         	movff	___aldiv@quotient,?___aldiv
  2119  0011FE  C0E5  F0DB         	movff	___aldiv@quotient+1,?___aldiv+1
  2120  001202  C0E6  F0DC         	movff	___aldiv@quotient+2,?___aldiv+2
  2121  001206  C0E7  F0DD         	movff	___aldiv@quotient+3,?___aldiv+3
  2122  00120A  0012               	return	
  2123  00120C                     __end_of___aldiv:
  2124                           	opt stack 0
  2125                           tblptru	equ	0xFF8
  2126                           tblptrh	equ	0xFF7
  2127                           tblptrl	equ	0xFF6
  2128                           tablat	equ	0xFF5
  2129                           prodh	equ	0xFF4
  2130                           prodl	equ	0xFF3
  2131                           intcon	equ	0xFF2
  2132                           postinc0	equ	0xFEE
  2133                           plusw0	equ	0xFEB
  2134                           wreg	equ	0xFE8
  2135                           postdec1	equ	0xFE5
  2136                           fsr1l	equ	0xFE1
  2137                           indf2	equ	0xFDF
  2138                           postinc2	equ	0xFDE
  2139                           postdec2	equ	0xFDD
  2140                           plusw2	equ	0xFDB
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           
  2145 ;; *************** function _D_UART_Enable *****************
  2146 ;; Defined at:
  2147 ;;		line 247 in file "Drivers/UART_Driver.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  enable          1    wreg     unsigned char 
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;  enable          1    0[BANK0 ] unsigned char 
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2161 ;;      Params:         0       0       0       0       0       0       0       0       0
  2162 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2164 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2165 ;;Total ram usage:        1 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    7
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_D_UART_Init
  2172 ;;		_main
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text9
  2177  00165E                     __ptext9:
  2178                           	opt stack 0
  2179  00165E                     _D_UART_Enable:
  2180                           	opt stack 22
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;incstack = 0
  2184                           ;D_UART_Enable@enable stored from wreg
  2185  00165E  0100               	movlb	0	; () banked
  2186  001660  6FDA               	movwf	D_UART_Enable@enable& (0+255),b
  2187                           
  2188                           ;UART_Driver.c: 248: if(enable) {
  2189  001662  0100               	movlb	0	; () banked
  2190  001664  51DA               	movf	D_UART_Enable@enable& (0+255),w,b
  2191  001666  B4D8               	btfsc	status,2,c
  2192  001668  D006               	goto	l176
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;UART_Driver.c: 249: TRISCbits.TRISC7 = 0;
  2196  00166A  9E94               	bcf	3988,7,c	;volatile
  2197                           
  2198                           ;UART_Driver.c: 250: TRISCbits.TRISC6 = 1;
  2199  00166C  8C94               	bsf	3988,6,c	;volatile
  2200                           
  2201                           ;UART_Driver.c: 251: TXSTAbits.TXEN = 1;
  2202  00166E  8AAC               	bsf	4012,5,c	;volatile
  2203                           
  2204                           ;UART_Driver.c: 252: RCSTAbits.CREN = 1;
  2205  001670  88AB               	bsf	4011,4,c	;volatile
  2206                           
  2207                           ;UART_Driver.c: 253: RCSTAbits.SPEN = 1;
  2208  001672  8EAB               	bsf	4011,7,c	;volatile
  2209                           
  2210                           ;UART_Driver.c: 254: } else {
  2211  001674  0012               	return	
  2212  001676                     l176:
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;UART_Driver.c: 255: TRISCbits.TRISC7 = 0;
  2216  001676  9E94               	bcf	3988,7,c	;volatile
  2217                           
  2218                           ;UART_Driver.c: 256: TRISCbits.TRISC6 = 0;
  2219  001678  9C94               	bcf	3988,6,c	;volatile
  2220                           
  2221                           ;UART_Driver.c: 257: TXSTAbits.TXEN = 0;
  2222  00167A  9AAC               	bcf	4012,5,c	;volatile
  2223                           
  2224                           ;UART_Driver.c: 258: RCSTAbits.CREN = 0;
  2225  00167C  98AB               	bcf	4011,4,c	;volatile
  2226                           
  2227                           ;UART_Driver.c: 259: RCSTAbits.SPEN = 0;
  2228  00167E  9EAB               	bcf	4011,7,c	;volatile
  2229  001680  0012               	return	
  2230  001682                     __end_of_D_UART_Enable:
  2231                           	opt stack 0
  2232                           tblptru	equ	0xFF8
  2233                           tblptrh	equ	0xFF7
  2234                           tblptrl	equ	0xFF6
  2235                           tablat	equ	0xFF5
  2236                           prodh	equ	0xFF4
  2237                           prodl	equ	0xFF3
  2238                           intcon	equ	0xFF2
  2239                           postinc0	equ	0xFEE
  2240                           plusw0	equ	0xFEB
  2241                           wreg	equ	0xFE8
  2242                           postdec1	equ	0xFE5
  2243                           fsr1l	equ	0xFE1
  2244                           indf2	equ	0xFDF
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           plusw2	equ	0xFDB
  2248                           fsr2h	equ	0xFDA
  2249                           fsr2l	equ	0xFD9
  2250                           status	equ	0xFD8
  2251                           
  2252 ;; *************** function _D_TMR0_Init *****************
  2253 ;; Defined at:
  2254 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;		None
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2, cstack
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2268 ;;      Params:         0       0       0       0       0       0       0       0       0
  2269 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2270 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2271 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2272 ;;Total ram usage:        0 bytes
  2273 ;; Hardware stack levels used:    1
  2274 ;; Hardware stack levels required when called:    8
  2275 ;; This function calls:
  2276 ;;		_D_TMR0_Enable
  2277 ;; This function is called by:
  2278 ;;		_main
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282                           	psect	text10
  2283  001682                     __ptext10:
  2284                           	opt stack 0
  2285  001682                     _D_TMR0_Init:
  2286                           	opt stack 22
  2287                           
  2288                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;incstack = 0
  2292  001682  0E00               	movlw	0
  2293  001684  EC82  F00B         	call	_D_TMR0_Enable
  2294                           
  2295                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2296  001688  9CD5               	bcf	4053,6,c	;volatile
  2297                           
  2298                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2299  00168A  9AD5               	bcf	4053,5,c	;volatile
  2300                           
  2301                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2302  00168C  98D5               	bcf	4053,4,c	;volatile
  2303                           
  2304                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2305  00168E  96D5               	bcf	4053,3,c	;volatile
  2306                           
  2307                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2308  001690  50D5               	movf	4053,w,c	;volatile
  2309  001692  0BF8               	andlw	-8
  2310  001694  0902               	iorlw	2
  2311  001696  6ED5               	movwf	4053,c	;volatile
  2312                           
  2313                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2314  001698  8ED0               	bsf	4048,7,c	;volatile
  2315                           
  2316                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2317  00169A  8EF2               	bsf	intcon,7,c	;volatile
  2318                           
  2319                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2320  00169C  8CF2               	bsf	intcon,6,c	;volatile
  2321                           
  2322                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2323  00169E  94F2               	bcf	intcon,2,c	;volatile
  2324                           
  2325                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  2326  0016A0  84F1               	bsf	intcon2,2,c	;volatile
  2327                           
  2328                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2329  0016A2  8AF2               	bsf	intcon,5,c	;volatile
  2330  0016A4  0012               	return		;funcret
  2331  0016A6                     __end_of_D_TMR0_Init:
  2332                           	opt stack 0
  2333                           tblptru	equ	0xFF8
  2334                           tblptrh	equ	0xFF7
  2335                           tblptrl	equ	0xFF6
  2336                           tablat	equ	0xFF5
  2337                           prodh	equ	0xFF4
  2338                           prodl	equ	0xFF3
  2339                           intcon	equ	0xFF2
  2340                           intcon2	equ	0xFF1
  2341                           postinc0	equ	0xFEE
  2342                           plusw0	equ	0xFEB
  2343                           wreg	equ	0xFE8
  2344                           postdec1	equ	0xFE5
  2345                           fsr1l	equ	0xFE1
  2346                           indf2	equ	0xFDF
  2347                           postinc2	equ	0xFDE
  2348                           postdec2	equ	0xFDD
  2349                           plusw2	equ	0xFDB
  2350                           fsr2h	equ	0xFDA
  2351                           fsr2l	equ	0xFD9
  2352                           status	equ	0xFD8
  2353                           
  2354 ;; *************** function _D_TMR0_Enable *****************
  2355 ;; Defined at:
  2356 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  2357 ;; Parameters:    Size  Location     Type
  2358 ;;  enable          1    wreg     unsigned char 
  2359 ;; Auto vars:     Size  Location     Type
  2360 ;;  enable          1    0[BANK0 ] unsigned char 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, status,2
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2370 ;;      Params:         0       0       0       0       0       0       0       0       0
  2371 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2372 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2373 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2374 ;;Total ram usage:        1 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    7
  2377 ;; This function calls:
  2378 ;;		Nothing
  2379 ;; This function is called by:
  2380 ;;		_D_TMR0_Init
  2381 ;;		_initDoors
  2382 ;; This function uses a non-reentrant model
  2383 ;;
  2384                           
  2385                           	psect	text11
  2386  001704                     __ptext11:
  2387                           	opt stack 0
  2388  001704                     _D_TMR0_Enable:
  2389                           	opt stack 22
  2390                           
  2391                           ;incstack = 0
  2392                           ;D_TMR0_Enable@enable stored from wreg
  2393  001704  0100               	movlb	0	; () banked
  2394  001706  6FDA               	movwf	D_TMR0_Enable@enable& (0+255),b
  2395                           
  2396                           ;TMR0_Driver.c: 54: if (enable) {
  2397  001708  0100               	movlb	0	; () banked
  2398  00170A  51DA               	movf	D_TMR0_Enable@enable& (0+255),w,b
  2399  00170C  B4D8               	btfsc	status,2,c
  2400  00170E  D002               	goto	l203
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  2404  001710  8ED5               	bsf	4053,7,c	;volatile
  2405                           
  2406                           ;TMR0_Driver.c: 56: } else {
  2407  001712  0012               	return	
  2408  001714                     l203:
  2409                           
  2410                           ; BSR set to: 0
  2411                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  2412  001714  9ED5               	bcf	4053,7,c	;volatile
  2413  001716  0012               	return	
  2414  001718                     __end_of_D_TMR0_Enable:
  2415                           	opt stack 0
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           prodh	equ	0xFF4
  2421                           prodl	equ	0xFF3
  2422                           intcon	equ	0xFF2
  2423                           intcon2	equ	0xFF1
  2424                           postinc0	equ	0xFEE
  2425                           plusw0	equ	0xFEB
  2426                           wreg	equ	0xFE8
  2427                           postdec1	equ	0xFE5
  2428                           fsr1l	equ	0xFE1
  2429                           indf2	equ	0xFDF
  2430                           postinc2	equ	0xFDE
  2431                           postdec2	equ	0xFDD
  2432                           plusw2	equ	0xFDB
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _D_PWM_SetPwm *****************
  2438 ;; Defined at:
  2439 ;;		line 44 in file "Drivers/PWM_Driver.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  pwm             1    wreg     unsigned char 
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  pwm             1    0[BANK0 ] unsigned char 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2453 ;;      Params:         0       0       0       0       0       0       0       0       0
  2454 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2456 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2457 ;;Total ram usage:        1 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    7
  2460 ;; This function calls:
  2461 ;;		Nothing
  2462 ;; This function is called by:
  2463 ;;		_main
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text12
  2468  001630                     __ptext12:
  2469                           	opt stack 0
  2470  001630                     _D_PWM_SetPwm:
  2471                           	opt stack 23
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;incstack = 0
  2475                           ;D_PWM_SetPwm@pwm stored from wreg
  2476  001630  0100               	movlb	0	; () banked
  2477  001632  6FDA               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2478                           
  2479                           ;PWM_Driver.c: 45: if (pwm > 0) {
  2480  001634  0100               	movlb	0	; () banked
  2481  001636  51DA               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2482  001638  B4D8               	btfsc	status,2,c
  2483  00163A  D00A               	goto	l311
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  2487  00163C  B4CA               	btfsc	4042,2,c	;volatile
  2488  00163E  D005               	goto	l312
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  2492  001640  50BD               	movf	4029,w,c	;volatile
  2493  001642  0BF0               	andlw	-16
  2494  001644  090C               	iorlw	12
  2495  001646  6EBD               	movwf	4029,c	;volatile
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  2499  001648  84CA               	bsf	4042,2,c	;volatile
  2500  00164A                     l312:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;PWM_Driver.c: 49: }
  2504                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  2505                           
  2506                           ; BSR set to: 0
  2507  00164A  C0DA  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2508                           
  2509                           ;PWM_Driver.c: 51: } else {
  2510  00164E  0012               	return	
  2511  001650                     l311:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  2515  001650  90BD               	bcf	4029,0,c	;volatile
  2516  001652  92BD               	bcf	4029,1,c	;volatile
  2517  001654  94BD               	bcf	4029,2,c	;volatile
  2518  001656  96BD               	bcf	4029,3,c	;volatile
  2519                           
  2520                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  2521  001658  94CA               	bcf	4042,2,c	;volatile
  2522                           
  2523                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  2524  00165A  9482               	bcf	3970,2,c	;volatile
  2525  00165C  0012               	return	
  2526  00165E                     __end_of_D_PWM_SetPwm:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           intcon2	equ	0xFF1
  2536                           postinc0	equ	0xFEE
  2537                           plusw0	equ	0xFEB
  2538                           wreg	equ	0xFE8
  2539                           postdec1	equ	0xFE5
  2540                           fsr1l	equ	0xFE1
  2541                           indf2	equ	0xFDF
  2542                           postinc2	equ	0xFDE
  2543                           postdec2	equ	0xFDD
  2544                           plusw2	equ	0xFDB
  2545                           fsr2h	equ	0xFDA
  2546                           fsr2l	equ	0xFD9
  2547                           status	equ	0xFD8
  2548                           
  2549 ;; *************** function _D_PWM_Init *****************
  2550 ;; Defined at:
  2551 ;;		line 31 in file "Drivers/PWM_Driver.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2565 ;;      Params:         0       0       0       0       0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    7
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		_main
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579                           	psect	text13
  2580  0016C8                     __ptext13:
  2581                           	opt stack 0
  2582  0016C8                     _D_PWM_Init:
  2583                           	opt stack 23
  2584                           
  2585                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;incstack = 0
  2589  0016C8  68CB               	setf	4043,c	;volatile
  2590                           
  2591                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  2592  0016CA  94CA               	bcf	4042,2,c	;volatile
  2593                           
  2594                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  2595  0016CC  50CA               	movf	4042,w,c	;volatile
  2596  0016CE  0BFC               	andlw	-4
  2597  0016D0  0901               	iorlw	1
  2598  0016D2  6ECA               	movwf	4042,c	;volatile
  2599                           
  2600                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  2601  0016D4  96CA               	bcf	4042,3,c	;volatile
  2602  0016D6  98CA               	bcf	4042,4,c	;volatile
  2603  0016D8  9ACA               	bcf	4042,5,c	;volatile
  2604  0016DA  9CCA               	bcf	4042,6,c	;volatile
  2605                           
  2606                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  2607  0016DC  0E1F               	movlw	31
  2608  0016DE  6EBE               	movwf	4030,c	;volatile
  2609                           
  2610                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  2611  0016E0  0ECF               	movlw	-49
  2612  0016E2  16BD               	andwf	4029,f,c	;volatile
  2613  0016E4  0012               	return		;funcret
  2614  0016E6                     __end_of_D_PWM_Init:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           intcon2	equ	0xFF1
  2624                           postinc0	equ	0xFEE
  2625                           plusw0	equ	0xFEB
  2626                           wreg	equ	0xFE8
  2627                           postdec1	equ	0xFE5
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           postinc2	equ	0xFDE
  2631                           postdec2	equ	0xFDD
  2632                           plusw2	equ	0xFDB
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _D_PORT_Init *****************
  2638 ;; Defined at:
  2639 ;;		line 32 in file "Drivers/PORT_Driver.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;		None
  2642 ;; Auto vars:     Size  Location     Type
  2643 ;;		None
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, status,2
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0
  2654 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2656 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2657 ;;Total ram usage:        0 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    7
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_main
  2664 ;; This function uses a non-reentrant model
  2665 ;;
  2666                           
  2667                           	psect	text14
  2668  0016E6                     __ptext14:
  2669                           	opt stack 0
  2670  0016E6                     _D_PORT_Init:
  2671                           	opt stack 23
  2672                           
  2673                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  2674                           
  2675                           ;incstack = 0
  2676  0016E6  0E00               	movlw	0
  2677  0016E8  6E92               	movwf	3986,c	;volatile
  2678  0016EA  0E00               	movlw	0
  2679  0016EC  6E80               	movwf	3968,c	;volatile
  2680                           
  2681                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  2682  0016EE  0E00               	movlw	0
  2683  0016F0  6E93               	movwf	3987,c	;volatile
  2684  0016F2  0E00               	movlw	0
  2685  0016F4  6E81               	movwf	3969,c	;volatile
  2686                           
  2687                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  2688  0016F6  0E00               	movlw	0
  2689  0016F8  6E94               	movwf	3988,c	;volatile
  2690  0016FA  0E00               	movlw	0
  2691  0016FC  6E82               	movwf	3970,c	;volatile
  2692                           
  2693                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  2694  0016FE  0E0F               	movlw	15
  2695  001700  6EC1               	movwf	4033,c	;volatile
  2696  001702  0012               	return		;funcret
  2697  001704                     __end_of_D_PORT_Init:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           intcon2	equ	0xFF1
  2707                           postinc0	equ	0xFEE
  2708                           plusw0	equ	0xFEB
  2709                           wreg	equ	0xFE8
  2710                           postdec1	equ	0xFE5
  2711                           fsr1l	equ	0xFE1
  2712                           indf2	equ	0xFDF
  2713                           postinc2	equ	0xFDE
  2714                           postdec2	equ	0xFDD
  2715                           plusw2	equ	0xFDB
  2716                           fsr2h	equ	0xFDA
  2717                           fsr2l	equ	0xFD9
  2718                           status	equ	0xFD8
  2719                           
  2720 ;; *************** function _C_DOOR_UnlockAll *****************
  2721 ;; Defined at:
  2722 ;;		line 93 in file "Controllers/DOOR_Controller.c"
  2723 ;; Parameters:    Size  Location     Type
  2724 ;;		None
  2725 ;; Auto vars:     Size  Location     Type
  2726 ;;		None
  2727 ;; Return value:  Size  Location     Type
  2728 ;;                  1    wreg      void 
  2729 ;; Registers used:
  2730 ;;		wreg, fsr2l, fsr2h
  2731 ;; Tracked objects:
  2732 ;;		On entry : 0/0
  2733 ;;		On exit  : 0/0
  2734 ;;		Unchanged: 0/0
  2735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2736 ;;      Params:         0       0       0       0       0       0       0       0       0
  2737 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2739 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2740 ;;Total ram usage:        0 bytes
  2741 ;; Hardware stack levels used:    1
  2742 ;; Hardware stack levels required when called:    7
  2743 ;; This function calls:
  2744 ;;		Nothing
  2745 ;; This function is called by:
  2746 ;;		_main
  2747 ;; This function uses a non-reentrant model
  2748 ;;
  2749                           
  2750                           	psect	text15
  2751  001726                     __ptext15:
  2752                           	opt stack 0
  2753  001726                     _C_DOOR_UnlockAll:
  2754                           	opt stack 23
  2755                           
  2756                           ;DOOR_Controller.c: 98: *doors[0].lock_port &= 0x3F;
  2757                           
  2758                           ;incstack = 0
  2759  001726  C062  FFD9         	movff	_doors+2,fsr2l
  2760  00172A  C063  FFDA         	movff	_doors+3,fsr2h
  2761  00172E  0E3F               	movlw	63
  2762  001730  16DF               	andwf	indf2,f,c
  2763  001732  0012               	return		;funcret
  2764  001734                     __end_of_C_DOOR_UnlockAll:
  2765                           	opt stack 0
  2766                           tblptru	equ	0xFF8
  2767                           tblptrh	equ	0xFF7
  2768                           tblptrl	equ	0xFF6
  2769                           tablat	equ	0xFF5
  2770                           prodh	equ	0xFF4
  2771                           prodl	equ	0xFF3
  2772                           intcon	equ	0xFF2
  2773                           intcon2	equ	0xFF1
  2774                           postinc0	equ	0xFEE
  2775                           plusw0	equ	0xFEB
  2776                           wreg	equ	0xFE8
  2777                           postdec1	equ	0xFE5
  2778                           fsr1l	equ	0xFE1
  2779                           indf2	equ	0xFDF
  2780                           postinc2	equ	0xFDE
  2781                           postdec2	equ	0xFDD
  2782                           plusw2	equ	0xFDB
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _C_DOOR_SendStates *****************
  2788 ;; Defined at:
  2789 ;;		line 108 in file "Controllers/DOOR_Controller.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  com             3   26[BANK0 ] unsigned char [3]
  2794 ;;  mes             2   29[BANK0 ] unsigned char [2]
  2795 ;;  d               1   31[BANK0 ] unsigned char 
  2796 ;; Return value:  Size  Location     Type
  2797 ;;                  1    wreg      void 
  2798 ;; Registers used:
  2799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2800 ;; Tracked objects:
  2801 ;;		On entry : 0/0
  2802 ;;		On exit  : 0/0
  2803 ;;		Unchanged: 0/0
  2804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2805 ;;      Params:         0       0       0       0       0       0       0       0       0
  2806 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2807 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2808 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2809 ;;Total ram usage:        9 bytes
  2810 ;; Hardware stack levels used:    1
  2811 ;; Hardware stack levels required when called:   11
  2812 ;; This function calls:
  2813 ;;		_D_UART_Write
  2814 ;;		_commandAndMessage
  2815 ;; This function is called by:
  2816 ;;		_main
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text16
  2821  001062                     __ptext16:
  2822                           	opt stack 0
  2823  001062                     _C_DOOR_SendStates:
  2824                           	opt stack 19
  2825                           
  2826                           ;DOOR_Controller.c: 109: uint8_t d;
  2827                           ;DOOR_Controller.c: 110: for (d = 0; d < door_cnt; d++) {
  2828                           
  2829                           ;incstack = 0
  2830  001062  0E00               	movlw	0
  2831  001064  0100               	movlb	0	; () banked
  2832  001066  6FF9               	movwf	C_DOOR_SendStates@d& (0+255),b
  2833  001068  D05C               	goto	l50
  2834  00106A                     
  2835                           ; BSR set to: 0
  2836                           ;DOOR_Controller.c: 111: if (doors[d].was_open != doors[d].is_open) {
  2837                           
  2838                           ; BSR set to: 0
  2839  00106A  51F9               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2840  00106C  0D0A               	mullw	10
  2841  00106E  0E06               	movlw	6
  2842  001070  26F3               	addwf	prodl,f,c
  2843  001072  0E00               	movlw	0
  2844  001074  22F4               	addwfc	prodh,f,c
  2845  001076  0E60               	movlw	low _doors
  2846  001078  24F3               	addwf	prodl,w,c
  2847  00107A  6ED9               	movwf	fsr2l,c
  2848  00107C  0E00               	movlw	high _doors
  2849  00107E  20F4               	addwfc	prodh,w,c
  2850  001080  6EDA               	movwf	fsr2h,c
  2851  001082  51F9               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2852  001084  0D0A               	mullw	10
  2853  001086  0E05               	movlw	5
  2854  001088  26F3               	addwf	prodl,f,c
  2855  00108A  0E00               	movlw	0
  2856  00108C  22F4               	addwfc	prodh,f,c
  2857  00108E  0E60               	movlw	low _doors
  2858  001090  24F3               	addwf	prodl,w,c
  2859  001092  6EE1               	movwf	fsr1l,c
  2860  001094  0E00               	movlw	high _doors
  2861  001096  20F4               	addwfc	prodh,w,c
  2862  001098  6EE2               	movwf	fsr1h,c
  2863  00109A  50DE               	movf	postinc2,w,c
  2864  00109C  18E6               	xorwf	postinc1,w,c
  2865  00109E  B4D8               	btfsc	status,2,c
  2866  0010A0  D03F               	goto	l52
  2867                           
  2868                           ; BSR set to: 0
  2869                           ;DOOR_Controller.c: 113: char com[3];
  2870                           ;DOOR_Controller.c: 114: char mes[2];
  2871                           ;DOOR_Controller.c: 115: commandAndMessage(doors[d], com, mes);
  2872  0010A2  51F9               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2873  0010A4  0D0A               	mullw	10
  2874  0010A6  0E60               	movlw	low _doors
  2875  0010A8  24F3               	addwf	prodl,w,c
  2876  0010AA  6ED9               	movwf	fsr2l,c
  2877  0010AC  0E00               	movlw	high _doors
  2878  0010AE  20F4               	addwfc	prodh,w,c
  2879  0010B0  6EDA               	movwf	fsr2h,c
  2880  0010B2  EE00  F0DA         	lfsr	0,commandAndMessage@door
  2881  0010B6  0E09               	movlw	9
  2882  0010B8                     u1171:
  2883  0010B8  CFDB FFEB          	movff	plusw2,plusw0
  2884  0010BC  06E8               	decf	wreg,f,c
  2885  0010BE  E2FC               	bc	u1171
  2886  0010C0  0EF4               	movlw	low C_DOOR_SendStates@com
  2887  0010C2  6FE4               	movwf	commandAndMessage@com& (0+255),b
  2888  0010C4  0E00               	movlw	high C_DOOR_SendStates@com
  2889  0010C6  6FE5               	movwf	(commandAndMessage@com+1)& (0+255),b
  2890  0010C8  0EF7               	movlw	low C_DOOR_SendStates@mes
  2891  0010CA  6FE6               	movwf	commandAndMessage@mes& (0+255),b
  2892  0010CC  0E00               	movlw	high C_DOOR_SendStates@mes
  2893  0010CE  6FE7               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2894  0010D0  ECF9  F009         	call	_commandAndMessage	;wreg free
  2895                           
  2896                           ;DOOR_Controller.c: 118: D_UART_Write(com, mes);
  2897  0010D4  0EF4               	movlw	low C_DOOR_SendStates@com
  2898  0010D6  0100               	movlb	0	; () banked
  2899  0010D8  6FEC               	movwf	D_UART_Write@command& (0+255),b
  2900  0010DA  0E00               	movlw	high C_DOOR_SendStates@com
  2901  0010DC  6FED               	movwf	(D_UART_Write@command+1)& (0+255),b
  2902  0010DE  0EF7               	movlw	low C_DOOR_SendStates@mes
  2903  0010E0  6FEE               	movwf	D_UART_Write@data& (0+255),b
  2904  0010E2  0E00               	movlw	high C_DOOR_SendStates@mes
  2905  0010E4  6FEF               	movwf	(D_UART_Write@data+1)& (0+255),b
  2906  0010E6  ECC1  F007         	call	_D_UART_Write	;wreg free
  2907                           
  2908                           ;DOOR_Controller.c: 120: doors[d].was_open = doors[d].is_open;
  2909  0010EA  0100               	movlb	0	; () banked
  2910  0010EC  51F9               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2911  0010EE  0D0A               	mullw	10
  2912  0010F0  0E06               	movlw	6
  2913  0010F2  26F3               	addwf	prodl,f,c
  2914  0010F4  0E00               	movlw	0
  2915  0010F6  22F4               	addwfc	prodh,f,c
  2916  0010F8  0E60               	movlw	low _doors
  2917  0010FA  24F3               	addwf	prodl,w,c
  2918  0010FC  6ED9               	movwf	fsr2l,c
  2919  0010FE  0E00               	movlw	high _doors
  2920  001100  20F4               	addwfc	prodh,w,c
  2921  001102  6EDA               	movwf	fsr2h,c
  2922  001104  51F9               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2923  001106  0D0A               	mullw	10
  2924  001108  0E05               	movlw	5
  2925  00110A  26F3               	addwf	prodl,f,c
  2926  00110C  0E00               	movlw	0
  2927  00110E  22F4               	addwfc	prodh,f,c
  2928  001110  0E60               	movlw	low _doors
  2929  001112  24F3               	addwf	prodl,w,c
  2930  001114  6EE1               	movwf	fsr1l,c
  2931  001116  0E00               	movlw	high _doors
  2932  001118  20F4               	addwfc	prodh,w,c
  2933  00111A  6EE2               	movwf	fsr1h,c
  2934  00111C  CFDF FFE7          	movff	indf2,indf1
  2935  001120                     l52:
  2936                           
  2937                           ; BSR set to: 0
  2938                           
  2939                           ; BSR set to: 0
  2940  001120  2BF9               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2941  001122                     l50:
  2942                           
  2943                           ; BSR set to: 0
  2944                           
  2945                           ; BSR set to: 0
  2946  001122  51F9               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2947  001124  6FF1               	movwf	??_C_DOOR_SendStates& (0+255),b
  2948  001126  6BF2               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  2949  001128  51D3               	movf	_door_cnt& (0+255),w,b
  2950  00112A  5DF1               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  2951  00112C  51F2               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  2952  00112E  0A80               	xorlw	128
  2953  001130  6FF3               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  2954  001132  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  2955  001134  0A80               	xorlw	128
  2956  001136  59F3               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  2957  001138  B0D8               	btfsc	status,0,c
  2958  00113A  0012               	return	
  2959  00113C  D796               	goto	l51
  2960  00113E                     __end_of_C_DOOR_SendStates:
  2961                           	opt stack 0
  2962                           tblptru	equ	0xFF8
  2963                           tblptrh	equ	0xFF7
  2964                           tblptrl	equ	0xFF6
  2965                           tablat	equ	0xFF5
  2966                           prodh	equ	0xFF4
  2967                           prodl	equ	0xFF3
  2968                           intcon	equ	0xFF2
  2969                           intcon2	equ	0xFF1
  2970                           postinc0	equ	0xFEE
  2971                           plusw0	equ	0xFEB
  2972                           wreg	equ	0xFE8
  2973                           indf1	equ	0xFE7
  2974                           postinc1	equ	0xFE6
  2975                           postdec1	equ	0xFE5
  2976                           fsr1h	equ	0xFE2
  2977                           fsr1l	equ	0xFE1
  2978                           indf2	equ	0xFDF
  2979                           postinc2	equ	0xFDE
  2980                           postdec2	equ	0xFDD
  2981                           plusw2	equ	0xFDB
  2982                           fsr2h	equ	0xFDA
  2983                           fsr2l	equ	0xFD9
  2984                           status	equ	0xFD8
  2985                           
  2986 ;; *************** function _commandAndMessage *****************
  2987 ;; Defined at:
  2988 ;;		line 27 in file "Controllers/DOOR_Controller.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  door           10    0[BANK0 ] struct .
  2991 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2992 ;;		 -> C_DOOR_SendStates@com(3), 
  2993 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2994 ;;		 -> C_DOOR_SendStates@mes(2), 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;		None
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      void 
  2999 ;; Registers used:
  3000 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3006 ;;      Params:         0      14       0       0       0       0       0       0       0
  3007 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3008 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3009 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3010 ;;Total ram usage:       14 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    7
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_C_DOOR_SendStates
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text17
  3021  0013F2                     __ptext17:
  3022                           	opt stack 0
  3023  0013F2                     _commandAndMessage:
  3024                           	opt stack 22
  3025                           
  3026                           ;DOOR_Controller.c: 29: com[0] = 'D';
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;incstack = 0
  3030  0013F2  C0E4  FFD9         	movff	commandAndMessage@com,fsr2l
  3031  0013F6  C0E5  FFDA         	movff	commandAndMessage@com+1,fsr2h
  3032  0013FA  0E44               	movlw	68
  3033  0013FC  6EDF               	movwf	indf2,c
  3034                           
  3035                           ;DOOR_Controller.c: 30: com[1] = (uint8_t)(door.id + 0x30);
  3036  0013FE  0100               	movlb	0	; () banked
  3037  001400  EE20 F001          	lfsr	2,1
  3038  001404  51E4               	movf	commandAndMessage@com& (0+255),w,b
  3039  001406  26D9               	addwf	fsr2l,f,c
  3040  001408  51E5               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3041  00140A  22DA               	addwfc	fsr2h,f,c
  3042  00140C  51DA               	movf	commandAndMessage@door& (0+255),w,b
  3043  00140E  0F30               	addlw	48
  3044  001410  6EDF               	movwf	indf2,c
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;DOOR_Controller.c: 31: com[2] = '\0';
  3048  001412  EE20 F002          	lfsr	2,2
  3049  001416  51E4               	movf	commandAndMessage@com& (0+255),w,b
  3050  001418  26D9               	addwf	fsr2l,f,c
  3051  00141A  51E5               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3052  00141C  22DA               	addwfc	fsr2h,f,c
  3053  00141E  0E00               	movlw	0
  3054  001420  6EDF               	movwf	indf2,c
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;DOOR_Controller.c: 34: if (door.is_open) {
  3058  001422  51E0               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3059  001424  B4D8               	btfsc	status,2,c
  3060  001426  D006               	goto	l13
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;DOOR_Controller.c: 35: mes[0] = 'C';
  3064  001428  C0E6  FFD9         	movff	commandAndMessage@mes,fsr2l
  3065  00142C  C0E7  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3066  001430  0E43               	movlw	67
  3067  001432  D005               	goto	L2
  3068  001434                     l13:
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;DOOR_Controller.c: 37: mes[0] = 'O';
  3072                           
  3073                           ; BSR set to: 0
  3074  001434  C0E6  FFD9         	movff	commandAndMessage@mes,fsr2l
  3075  001438  C0E7  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3076  00143C  0E4F               	movlw	79
  3077  00143E                     L2:
  3078  00143E  6EDF               	movwf	indf2,c
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;DOOR_Controller.c: 38: }
  3082                           ;DOOR_Controller.c: 39: mes[1] = '\0';
  3083                           
  3084                           ; BSR set to: 0
  3085  001440  EE20 F001          	lfsr	2,1
  3086  001444  51E6               	movf	commandAndMessage@mes& (0+255),w,b
  3087  001446  26D9               	addwf	fsr2l,f,c
  3088  001448  51E7               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3089  00144A  22DA               	addwfc	fsr2h,f,c
  3090  00144C  0E00               	movlw	0
  3091  00144E  6EDF               	movwf	indf2,c
  3092                           
  3093                           ; BSR set to: 0
  3094  001450  0012               	return		;funcret
  3095  001452                     __end_of_commandAndMessage:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon	equ	0xFF2
  3104                           intcon2	equ	0xFF1
  3105                           postinc0	equ	0xFEE
  3106                           plusw0	equ	0xFEB
  3107                           wreg	equ	0xFE8
  3108                           indf1	equ	0xFE7
  3109                           postinc1	equ	0xFE6
  3110                           postdec1	equ	0xFE5
  3111                           fsr1h	equ	0xFE2
  3112                           fsr1l	equ	0xFE1
  3113                           indf2	equ	0xFDF
  3114                           postinc2	equ	0xFDE
  3115                           postdec2	equ	0xFDD
  3116                           plusw2	equ	0xFDB
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _D_UART_Write *****************
  3122 ;; Defined at:
  3123 ;;		line 226 in file "Drivers/UART_Driver.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  3126 ;;		 -> STR_15(2), C_DOOR_SendStates@com(3), 
  3127 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  3128 ;;		 -> STR_16(2), C_DOOR_SendStates@mes(2), 
  3129 ;; Auto vars:     Size  Location     Type
  3130 ;;		None
  3131 ;; Return value:  Size  Location     Type
  3132 ;;                  1    wreg      void 
  3133 ;; Registers used:
  3134 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3135 ;; Tracked objects:
  3136 ;;		On entry : 0/0
  3137 ;;		On exit  : 0/0
  3138 ;;		Unchanged: 0/0
  3139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3140 ;;      Params:         0       4       0       0       0       0       0       0       0
  3141 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3142 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3143 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3144 ;;Total ram usage:        5 bytes
  3145 ;; Hardware stack levels used:    1
  3146 ;; Hardware stack levels required when called:   10
  3147 ;; This function calls:
  3148 ;;		_printf
  3149 ;; This function is called by:
  3150 ;;		_C_DOOR_SendStates
  3151 ;;		_main
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text18
  3156  000F82                     __ptext18:
  3157                           	opt stack 0
  3158  000F82                     _D_UART_Write:
  3159                           	opt stack 20
  3160                           
  3161                           ;UART_Driver.c: 227: printf(startCharacter);
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;incstack = 0
  3165  000F82  C041  F0E1         	movff	_startCharacter,printf@f
  3166  000F86  C042  F0E2         	movff	_startCharacter+1,printf@f+1
  3167  000F8A  0100               	movlb	0	; () banked
  3168  000F8C  51E1               	movf	printf@f& (0+255),w,b
  3169  000F8E  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3170  000F90  A4D8               	btfss	status,2,c
  3171  000F92  0E00               	movlw	low (__mediumconst shr (0+16))
  3172  000F94  6FE3               	movwf	(printf@f+2)& (0+255),b
  3173  000F96  ECE4  F005         	call	_printf	;wreg free
  3174                           
  3175                           ;UART_Driver.c: 229: printf(messageCharacter);
  3176  000F9A  C0FC  F0E1         	movff	_messageCharacter,printf@f
  3177  000F9E  C0FD  F0E2         	movff	_messageCharacter+1,printf@f+1
  3178  000FA2  0100               	movlb	0	; () banked
  3179  000FA4  51E1               	movf	printf@f& (0+255),w,b
  3180  000FA6  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3181  000FA8  A4D8               	btfss	status,2,c
  3182  000FAA  0E00               	movlw	low (__mediumconst shr (0+16))
  3183  000FAC  6FE3               	movwf	(printf@f+2)& (0+255),b
  3184  000FAE  ECE4  F005         	call	_printf	;wreg free
  3185                           
  3186                           ;UART_Driver.c: 230: printf(deviceName);
  3187  000FB2  C0D0  F0E1         	movff	_deviceName,printf@f
  3188  000FB6  C0D1  F0E2         	movff	_deviceName+1,printf@f+1
  3189  000FBA  C0D2  F0E3         	movff	_deviceName+2,printf@f+2
  3190  000FBE  ECE4  F005         	call	_printf	;wreg free
  3191                           
  3192                           ;UART_Driver.c: 232: printf(":");printf(command);
  3193  000FC2  0E37               	movlw	low STR_6
  3194  000FC4  0100               	movlb	0	; () banked
  3195  000FC6  6FE1               	movwf	printf@f& (0+255),b
  3196  000FC8  0E08               	movlw	high STR_6
  3197  000FCA  6FE2               	movwf	(printf@f+1)& (0+255),b
  3198  000FCC  51E1               	movf	printf@f& (0+255),w,b
  3199  000FCE  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3200  000FD0  A4D8               	btfss	status,2,c
  3201  000FD2  0E00               	movlw	low (__mediumconst shr (0+16))
  3202  000FD4  6FE3               	movwf	(printf@f+2)& (0+255),b
  3203  000FD6  ECE4  F005         	call	_printf	;wreg free
  3204  000FDA  C0EC  F0E1         	movff	D_UART_Write@command,printf@f
  3205  000FDE  C0ED  F0E2         	movff	D_UART_Write@command+1,printf@f+1
  3206  000FE2  0100               	movlb	0	; () banked
  3207  000FE4  6BE3               	clrf	(printf@f+2)& (0+255),b
  3208  000FE6  51E1               	movf	printf@f& (0+255),w,b
  3209  000FE8  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3210  000FEA  B4D8               	btfsc	status,2,c
  3211  000FEC  D005               	goto	u1041
  3212  000FEE  0E07               	movlw	(high __ramtop+-1)
  3213  000FF0  65ED               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3214  000FF2  D001               	goto	u10411
  3215  000FF4  D001               	goto	u1041
  3216  000FF6                     u10411:
  3217  000FF6  8BE3               	bsf	(printf@f+2)& (0+255),5,b
  3218  000FF8                     u1041:
  3219  000FF8  ECE4  F005         	call	_printf	;wreg free
  3220                           
  3221                           ;UART_Driver.c: 234: printf(":");printf(data);
  3222  000FFC  0E37               	movlw	low STR_6
  3223  000FFE  0100               	movlb	0	; () banked
  3224  001000  6FE1               	movwf	printf@f& (0+255),b
  3225  001002  0E08               	movlw	high STR_6
  3226  001004  6FE2               	movwf	(printf@f+1)& (0+255),b
  3227  001006  51E1               	movf	printf@f& (0+255),w,b
  3228  001008  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3229  00100A  A4D8               	btfss	status,2,c
  3230  00100C  0E00               	movlw	low (__mediumconst shr (0+16))
  3231  00100E  6FE3               	movwf	(printf@f+2)& (0+255),b
  3232  001010  ECE4  F005         	call	_printf	;wreg free
  3233  001014  C0EE  F0E1         	movff	D_UART_Write@data,printf@f
  3234  001018  C0EF  F0E2         	movff	D_UART_Write@data+1,printf@f+1
  3235  00101C  0100               	movlb	0	; () banked
  3236  00101E  6BE3               	clrf	(printf@f+2)& (0+255),b
  3237  001020  51E1               	movf	printf@f& (0+255),w,b
  3238  001022  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3239  001024  B4D8               	btfsc	status,2,c
  3240  001026  D005               	goto	u1051
  3241  001028  0E07               	movlw	(high __ramtop+-1)
  3242  00102A  65EF               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3243  00102C  D001               	goto	u10511
  3244  00102E  D001               	goto	u1051
  3245  001030                     u10511:
  3246  001030  8BE3               	bsf	(printf@f+2)& (0+255),5,b
  3247  001032                     u1051:
  3248  001032  ECE4  F005         	call	_printf	;wreg free
  3249                           
  3250                           ;UART_Driver.c: 236: printf(stopCharacter);
  3251  001036  C03F  F0E1         	movff	_stopCharacter,printf@f
  3252  00103A  C040  F0E2         	movff	_stopCharacter+1,printf@f+1
  3253  00103E  0100               	movlb	0	; () banked
  3254  001040  51E1               	movf	printf@f& (0+255),w,b
  3255  001042  11E2               	iorwf	(printf@f+1)& (0+255),w,b
  3256  001044  A4D8               	btfss	status,2,c
  3257  001046  0E00               	movlw	low (__mediumconst shr (0+16))
  3258  001048  6FE3               	movwf	(printf@f+2)& (0+255),b
  3259  00104A  ECE4  F005         	call	_printf	;wreg free
  3260                           
  3261                           ;UART_Driver.c: 237: _delay((unsigned long)((1)*(16000000/4000.0)));
  3262  00104E  0E06               	movlw	6
  3263  001050  0100               	movlb	0	; () banked
  3264  001052  6FF0               	movwf	??_D_UART_Write& (0+255),b
  3265  001054  0E30               	movlw	48
  3266  001056                     u1587:
  3267  001056  2EE8               	decfsz	wreg,f,c
  3268  001058  D7FE               	bra	u1587
  3269  00105A  2FF0               	decfsz	??_D_UART_Write& (0+255),f,b
  3270  00105C  D7FC               	bra	u1587
  3271  00105E  F000               	nop	
  3272  001060  0012               	return		;funcret
  3273  001062                     __end_of_D_UART_Write:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           intcon	equ	0xFF2
  3282                           intcon2	equ	0xFF1
  3283                           postinc0	equ	0xFEE
  3284                           plusw0	equ	0xFEB
  3285                           wreg	equ	0xFE8
  3286                           indf1	equ	0xFE7
  3287                           postinc1	equ	0xFE6
  3288                           postdec1	equ	0xFE5
  3289                           fsr1h	equ	0xFE2
  3290                           fsr1l	equ	0xFE1
  3291                           indf2	equ	0xFDF
  3292                           postinc2	equ	0xFDE
  3293                           postdec2	equ	0xFDD
  3294                           plusw2	equ	0xFDB
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _printf *****************
  3300 ;; Defined at:
  3301 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  3304 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  3305 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3306 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3307 ;;		 -> C_DOOR_SendStates@com(3), 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  idx             1   13[BANK0 ] unsigned char 
  3310 ;;  tmpval          4    0        struct .
  3311 ;;  cp              3    0        PTR const unsigned char 
  3312 ;;  val             2   14[BANK0 ] unsigned int 
  3313 ;;  ap              2   11[BANK0 ] PTR void [1]
  3314 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3315 ;;  len             2    0        unsigned int 
  3316 ;;  c               1   17[BANK0 ] char 
  3317 ;;  prec            1   16[BANK0 ] char 
  3318 ;;  flag            1   10[BANK0 ] unsigned char 
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  2    7[BANK0 ] int 
  3321 ;; Registers used:
  3322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3323 ;; Tracked objects:
  3324 ;;		On entry : 0/0
  3325 ;;		On exit  : 0/0
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3328 ;;      Params:         0       3       0       0       0       0       0       0       0
  3329 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3330 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3331 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3332 ;;Total ram usage:       11 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    9
  3335 ;; This function calls:
  3336 ;;		___lwdiv
  3337 ;;		_putch
  3338 ;; This function is called by:
  3339 ;;		_D_UART_Write
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text19
  3344  000BC8                     __ptext19:
  3345                           	opt stack 0
  3346  000BC8                     _printf:
  3347                           	opt stack 20
  3348                           
  3349                           ;doprnt.c: 466: va_list ap;
  3350                           ;doprnt.c: 499: signed char c;
  3351                           ;doprnt.c: 506: signed char prec;
  3352                           ;doprnt.c: 508: unsigned char flag;
  3353                           ;doprnt.c: 523: union {
  3354                           ;doprnt.c: 524: unsigned long vd;
  3355                           ;doprnt.c: 525: double integ;
  3356                           ;doprnt.c: 526: } tmpval;
  3357                           ;doprnt.c: 528: unsigned int val;
  3358                           ;doprnt.c: 529: unsigned len;
  3359                           ;doprnt.c: 530: const char * cp;
  3360                           ;doprnt.c: 533: *ap = __va_start();
  3361                           
  3362                           ;incstack = 0
  3363  000BC8  0EE4               	movlw	low (?_printf+3)
  3364  000BCA  0100               	movlb	0	; () banked
  3365  000BCC  6FE5               	movwf	printf@ap& (0+255),b
  3366  000BCE  0E00               	movlw	high (?_printf+3)
  3367  000BD0  6FE6               	movwf	(printf@ap+1)& (0+255),b
  3368                           
  3369                           ;doprnt.c: 536: while(c = *f++) {
  3370  000BD2  D08B               	goto	u910
  3371  000BD4                     
  3372                           ; BSR set to: 0
  3373                           ;doprnt.c: 538: if(c != '%')
  3374                           
  3375                           ; BSR set to: 0
  3376  000BD4  0E25               	movlw	37
  3377  000BD6  19EB               	xorwf	printf@c& (0+255),w,b
  3378  000BD8  B4D8               	btfsc	status,2,c
  3379  000BDA  D004               	goto	l327
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 540: {
  3383                           ;doprnt.c: 541: (putch(c) );
  3384  000BDC  51EB               	movf	printf@c& (0+255),w,b
  3385  000BDE  EC9A  F00B         	call	_putch
  3386                           
  3387                           ;doprnt.c: 542: continue;
  3388  000BE2  D083               	goto	u910
  3389  000BE4                     l327:
  3390                           
  3391                           ;doprnt.c: 543: }
  3392                           ;doprnt.c: 548: flag = 0;
  3393  000BE4  0E00               	movlw	0
  3394  000BE6  0100               	movlb	0	; () banked
  3395  000BE8  6FE4               	movwf	printf@flag& (0+255),b
  3396                           
  3397                           ;doprnt.c: 635: switch(c = *f++) {
  3398  000BEA  D004               	goto	l328
  3399  000BEC                     
  3400                           ; BSR set to: 0
  3401                           ;doprnt.c: 809: (putch(c) );
  3402                           
  3403                           ; BSR set to: 0
  3404  000BEC  51EB               	movf	printf@c& (0+255),w,b
  3405  000BEE  EC9A  F00B         	call	_putch
  3406                           
  3407                           ;doprnt.c: 810: continue;
  3408  000BF2  D07B               	goto	u910
  3409  000BF4                     l328:
  3410  000BF4  C0E1  FFF6         	movff	printf@f,tblptrl
  3411  000BF8  C0E2  FFF7         	movff	printf@f+1,tblptrh
  3412  000BFC  C0E3  FFF8         	movff	printf@f+2,tblptru
  3413  000C00  0E01               	movlw	1
  3414  000C02  0100               	movlb	0	; () banked
  3415  000C04  27E1               	addwf	printf@f& (0+255),f,b
  3416  000C06  0E00               	movlw	0
  3417  000C08  23E2               	addwfc	(printf@f+1)& (0+255),f,b
  3418  000C0A  23E3               	addwfc	(printf@f+2)& (0+255),f,b
  3419  000C0C  BAF8               	btfsc	tblptru,5,c
  3420  000C0E  D003               	bra	u877
  3421  000C10  0008               	tblrd		*
  3422  000C12  50F5               	movf	tablat,w,c
  3423  000C14  D005               	bra	u870
  3424  000C16                     u877:
  3425  000C16  CFF6 FFE9          	movff	tblptrl,fsr0l
  3426  000C1A  CFF7 FFEA          	movff	tblptrh,fsr0h
  3427  000C1E  50EF               	movf	indf0,w,c
  3428  000C20                     u870:
  3429  000C20  0100               	movlb	0	; () banked
  3430  000C22  6FEB               	movwf	printf@c& (0+255),b
  3431  000C24  51EB               	movf	printf@c& (0+255),w,b
  3432                           
  3433                           ; Switch size 1, requested type "space"
  3434                           ; Number of cases is 2, Range of values is 0 to 120
  3435                           ; switch strategies available:
  3436                           ; Name         Instructions Cycles
  3437                           ; simple_byte            7     4 (average)
  3438                           ;	Chosen strategy is simple_byte
  3439  000C26  0A00               	xorlw	0	; case 0
  3440  000C28  B4D8               	btfsc	status,2,c
  3441  000C2A  0012               	return	
  3442  000C2C  0A78               	xorlw	120	; case 120
  3443  000C2E  A4D8               	btfss	status,2,c
  3444  000C30  D7DD               	goto	l333
  3445                           
  3446                           ;doprnt.c: 1273: {
  3447                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3448                           
  3449                           ; BSR set to: 0
  3450  000C32  C0E5  FFD9         	movff	printf@ap,fsr2l
  3451  000C36  C0E6  FFDA         	movff	printf@ap+1,fsr2h
  3452  000C3A  CFDE F0E8          	movff	postinc2,printf@val
  3453  000C3E  CFDD F0E9          	movff	postdec2,printf@val+1
  3454  000C42  0E02               	movlw	2
  3455  000C44  0100               	movlb	0	; () banked
  3456  000C46  27E5               	addwf	printf@ap& (0+255),f,b
  3457  000C48  0E00               	movlw	0
  3458  000C4A  23E6               	addwfc	(printf@ap+1)& (0+255),f,b
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;doprnt.c: 1287: }
  3462                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3463  000C4C  0E01               	movlw	1
  3464  000C4E  6FEB               	movwf	printf@c& (0+255),b
  3465  000C50  D014               	goto	l1611
  3466  000C52                     
  3467                           ; BSR set to: 0
  3468                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3469                           
  3470                           ; BSR set to: 0
  3471  000C52  51EB               	movf	printf@c& (0+255),w,b
  3472  000C54  0D02               	mullw	2
  3473  000C56  0E01               	movlw	low _hexpowers
  3474  000C58  24F3               	addwf	prodl,w,c
  3475  000C5A  6EF6               	movwf	tblptrl,c
  3476  000C5C  0E08               	movlw	high _hexpowers
  3477  000C5E  20F4               	addwfc	prodh,w,c
  3478  000C60  6EF7               	movwf	tblptrh,c
  3479  000C62                     	if	1	;There are 3 active tblptr bytes
  3480  000C62  6AF8               	clrf	tblptru,c
  3481  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
  3482  000C66  22F8               	addwfc	tblptru,f,c
  3483  000C68                     	endif
  3484  000C68  0009               	tblrd		*+
  3485  000C6A  50F5               	movf	tablat,w,c
  3486  000C6C  5DE8               	subwf	printf@val& (0+255),w,b
  3487  000C6E  0009               	tblrd		*+
  3488  000C70  50F5               	movf	tablat,w,c
  3489  000C72  59E9               	subwfb	(printf@val+1)& (0+255),w,b
  3490  000C74  A0D8               	btfss	status,0,c
  3491  000C76  D005               	goto	u900
  3492                           
  3493                           ; BSR set to: 0
  3494                           
  3495                           ; BSR set to: 0
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 1318: break;
  3499  000C78  2BEB               	incf	printf@c& (0+255),f,b
  3500  000C7A                     l1611:
  3501                           
  3502                           ; BSR set to: 0
  3503  000C7A  0E04               	movlw	4
  3504  000C7C  19EB               	xorwf	printf@c& (0+255),w,b
  3505  000C7E  A4D8               	btfss	status,2,c
  3506  000C80  D7E8               	goto	l334
  3507  000C82                     u900:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;doprnt.c: 1422: {
  3511                           ;doprnt.c: 1469: }
  3512                           ;doprnt.c: 1472: prec = c;
  3513  000C82  C0EB  F0EA         	movff	printf@c,printf@prec
  3514                           
  3515                           ;doprnt.c: 1474: while(prec--) {
  3516  000C86  D02C               	goto	l337
  3517  000C88                     
  3518                           ; BSR set to: 0
  3519                           ;doprnt.c: 1478: {
  3520                           ;doprnt.c: 1499: {
  3521                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3522                           
  3523                           ; BSR set to: 0
  3524  000C88  C0E8  F0DA         	movff	printf@val,___lwdiv@dividend
  3525  000C8C  C0E9  F0DB         	movff	printf@val+1,___lwdiv@dividend+1
  3526  000C90  51EA               	movf	printf@prec& (0+255),w,b
  3527  000C92  0D02               	mullw	2
  3528  000C94  0E01               	movlw	low _hexpowers
  3529  000C96  24F3               	addwf	prodl,w,c
  3530  000C98  6EF6               	movwf	tblptrl,c
  3531  000C9A  0E08               	movlw	high _hexpowers
  3532  000C9C  20F4               	addwfc	prodh,w,c
  3533  000C9E  6EF7               	movwf	tblptrh,c
  3534  000CA0                     	if	1	;There are 3 active tblptr bytes
  3535  000CA0  6AF8               	clrf	tblptru,c
  3536  000CA2  0E00               	movlw	low (__mediumconst shr (0+16))
  3537  000CA4  22F8               	addwfc	tblptru,f,c
  3538  000CA6                     	endif
  3539  000CA6  0009               	tblrd		*+
  3540  000CA8  CFF5 F0DC          	movff	tablat,___lwdiv@divisor
  3541  000CAC  000A               	tblrd		*-
  3542  000CAE  CFF5 F0DD          	movff	tablat,___lwdiv@divisor+1
  3543  000CB2  EC87  F00A         	call	___lwdiv	;wreg free
  3544  000CB6  0100               	movlb	0	; () banked
  3545  000CB8  51DA               	movf	?___lwdiv& (0+255),w,b
  3546  000CBA  0B0F               	andlw	15
  3547  000CBC  6FE7               	movwf	printf@idx& (0+255),b
  3548                           
  3549                           ; BSR set to: 0
  3550                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3551  000CBE  51E7               	movf	printf@idx& (0+255),w,b
  3552  000CC0  0D01               	mullw	1
  3553  000CC2  0E09               	movlw	low STR_17
  3554  000CC4  24F3               	addwf	prodl,w,c
  3555  000CC6  6EF6               	movwf	tblptrl,c
  3556  000CC8  0E08               	movlw	high STR_17
  3557  000CCA  20F4               	addwfc	prodh,w,c
  3558  000CCC  6EF7               	movwf	tblptrh,c
  3559  000CCE                     	if	1	;There are 3 active tblptr bytes
  3560  000CCE  6AF8               	clrf	tblptru,c
  3561  000CD0  0E00               	movlw	low (__mediumconst shr (0+16))
  3562  000CD2  22F8               	addwfc	tblptru,f,c
  3563  000CD4                     	endif
  3564  000CD4  0008               	tblrd		*
  3565  000CD6  CFF5 F0EB          	movff	tablat,printf@c
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;doprnt.c: 1508: }
  3569                           ;doprnt.c: 1523: }
  3570                           ;doprnt.c: 1524: (putch(c) );
  3571  000CDA  51EB               	movf	printf@c& (0+255),w,b
  3572  000CDC  EC9A  F00B         	call	_putch
  3573  000CE0                     l337:
  3574  000CE0  0100               	movlb	0	; () banked
  3575  000CE2  07EA               	decf	printf@prec& (0+255),f,b
  3576  000CE4  29EA               	incf	printf@prec& (0+255),w,b
  3577  000CE6  A4D8               	btfss	status,2,c
  3578  000CE8  D7CF               	goto	l338
  3579  000CEA                     u910:
  3580                           
  3581                           ; BSR set to: 0
  3582                           
  3583                           ; BSR set to: 0
  3584  000CEA  C0E1  FFF6         	movff	printf@f,tblptrl
  3585  000CEE  C0E2  FFF7         	movff	printf@f+1,tblptrh
  3586  000CF2  C0E3  FFF8         	movff	printf@f+2,tblptru
  3587  000CF6  0E01               	movlw	1
  3588  000CF8  0100               	movlb	0	; () banked
  3589  000CFA  27E1               	addwf	printf@f& (0+255),f,b
  3590  000CFC  0E00               	movlw	0
  3591  000CFE  23E2               	addwfc	(printf@f+1)& (0+255),f,b
  3592  000D00  23E3               	addwfc	(printf@f+2)& (0+255),f,b
  3593  000D02  BAF8               	btfsc	tblptru,5,c
  3594  000D04  D003               	bra	u927
  3595  000D06  0008               	tblrd		*
  3596  000D08  50F5               	movf	tablat,w,c
  3597  000D0A  D005               	bra	u920
  3598  000D0C                     u927:
  3599  000D0C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3600  000D10  CFF7 FFEA          	movff	tblptrh,fsr0h
  3601  000D14  50EF               	movf	indf0,w,c
  3602  000D16                     u920:
  3603  000D16  0100               	movlb	0	; () banked
  3604  000D18  6FEB               	movwf	printf@c& (0+255),b
  3605  000D1A  51EB               	movf	printf@c& (0+255),w,b
  3606  000D1C  B4D8               	btfsc	status,2,c
  3607  000D1E  0012               	return	
  3608  000D20  D759               	goto	l326
  3609  000D22                     __end_of_printf:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           intcon2	equ	0xFF1
  3619                           indf0	equ	0xFEF
  3620                           postinc0	equ	0xFEE
  3621                           plusw0	equ	0xFEB
  3622                           fsr0h	equ	0xFEA
  3623                           fsr0l	equ	0xFE9
  3624                           wreg	equ	0xFE8
  3625                           indf1	equ	0xFE7
  3626                           postinc1	equ	0xFE6
  3627                           postdec1	equ	0xFE5
  3628                           fsr1h	equ	0xFE2
  3629                           fsr1l	equ	0xFE1
  3630                           indf2	equ	0xFDF
  3631                           postinc2	equ	0xFDE
  3632                           postdec2	equ	0xFDD
  3633                           plusw2	equ	0xFDB
  3634                           fsr2h	equ	0xFDA
  3635                           fsr2l	equ	0xFD9
  3636                           status	equ	0xFD8
  3637                           
  3638 ;; *************** function _putch *****************
  3639 ;; Defined at:
  3640 ;;		line 263 in file "Drivers/UART_Driver.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  data            1    wreg     unsigned char 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  data            1    1[BANK0 ] unsigned char 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, cstack
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3654 ;;      Params:         0       0       0       0       0       0       0       0       0
  3655 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3657 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3658 ;;Total ram usage:        1 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; Hardware stack levels required when called:    8
  3661 ;; This function calls:
  3662 ;;		_writeByte
  3663 ;; This function is called by:
  3664 ;;		_printf
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text20
  3669  001734                     __ptext20:
  3670                           	opt stack 0
  3671  001734                     _putch:
  3672                           	opt stack 20
  3673                           
  3674                           ; BSR set to: 0
  3675                           ;incstack = 0
  3676                           ;putch@data stored from wreg
  3677  001734  0100               	movlb	0	; () banked
  3678  001736  6FDB               	movwf	putch@data& (0+255),b
  3679                           
  3680                           ;UART_Driver.c: 264: writeByte(data);
  3681  001738  0100               	movlb	0	; () banked
  3682  00173A  51DB               	movf	putch@data& (0+255),w,b
  3683  00173C  ECA1  F00B         	call	_writeByte
  3684  001740  0012               	return		;funcret
  3685  001742                     __end_of_putch:
  3686                           	opt stack 0
  3687                           tblptru	equ	0xFF8
  3688                           tblptrh	equ	0xFF7
  3689                           tblptrl	equ	0xFF6
  3690                           tablat	equ	0xFF5
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           intcon	equ	0xFF2
  3694                           intcon2	equ	0xFF1
  3695                           indf0	equ	0xFEF
  3696                           postinc0	equ	0xFEE
  3697                           plusw0	equ	0xFEB
  3698                           fsr0h	equ	0xFEA
  3699                           fsr0l	equ	0xFE9
  3700                           wreg	equ	0xFE8
  3701                           indf1	equ	0xFE7
  3702                           postinc1	equ	0xFE6
  3703                           postdec1	equ	0xFE5
  3704                           fsr1h	equ	0xFE2
  3705                           fsr1l	equ	0xFE1
  3706                           indf2	equ	0xFDF
  3707                           postinc2	equ	0xFDE
  3708                           postdec2	equ	0xFDD
  3709                           plusw2	equ	0xFDB
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _writeByte *****************
  3715 ;; Defined at:
  3716 ;;		line 69 in file "Drivers/UART_Driver.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  data            1    wreg     unsigned char 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  data            1    0[BANK0 ] unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3730 ;;      Params:         0       0       0       0       0       0       0       0       0
  3731 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3733 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3734 ;;Total ram usage:        1 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    7
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_putch
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text21
  3745  001742                     __ptext21:
  3746                           	opt stack 0
  3747  001742                     _writeByte:
  3748                           	opt stack 20
  3749                           
  3750                           ;incstack = 0
  3751                           ;writeByte@data stored from wreg
  3752  001742  0100               	movlb	0	; () banked
  3753  001744  6FDA               	movwf	writeByte@data& (0+255),b
  3754  001746                     
  3755                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  3756  001746  A2AC               	btfss	4012,1,c	;volatile
  3757  001748  D7FE               	goto	l1525
  3758                           
  3759                           ;UART_Driver.c: 71: TXREG = data;
  3760  00174A  C0DA  FFAD         	movff	writeByte@data,4013	;volatile
  3761  00174E  0012               	return		;funcret
  3762  001750                     __end_of_writeByte:
  3763                           	opt stack 0
  3764                           tblptru	equ	0xFF8
  3765                           tblptrh	equ	0xFF7
  3766                           tblptrl	equ	0xFF6
  3767                           tablat	equ	0xFF5
  3768                           prodh	equ	0xFF4
  3769                           prodl	equ	0xFF3
  3770                           intcon	equ	0xFF2
  3771                           intcon2	equ	0xFF1
  3772                           indf0	equ	0xFEF
  3773                           postinc0	equ	0xFEE
  3774                           plusw0	equ	0xFEB
  3775                           fsr0h	equ	0xFEA
  3776                           fsr0l	equ	0xFE9
  3777                           wreg	equ	0xFE8
  3778                           indf1	equ	0xFE7
  3779                           postinc1	equ	0xFE6
  3780                           postdec1	equ	0xFE5
  3781                           fsr1h	equ	0xFE2
  3782                           fsr1l	equ	0xFE1
  3783                           indf2	equ	0xFDF
  3784                           postinc2	equ	0xFDE
  3785                           postdec2	equ	0xFDD
  3786                           plusw2	equ	0xFDB
  3787                           fsr2h	equ	0xFDA
  3788                           fsr2l	equ	0xFD9
  3789                           status	equ	0xFD8
  3790                           
  3791 ;; *************** function ___lwdiv *****************
  3792 ;; Defined at:
  3793 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  dividend        2    0[BANK0 ] unsigned int 
  3796 ;;  divisor         2    2[BANK0 ] unsigned int 
  3797 ;; Auto vars:     Size  Location     Type
  3798 ;;  quotient        2    4[BANK0 ] unsigned int 
  3799 ;;  counter         1    6[BANK0 ] unsigned char 
  3800 ;; Return value:  Size  Location     Type
  3801 ;;                  2    0[BANK0 ] unsigned int 
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, status,0
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3809 ;;      Params:         0       4       0       0       0       0       0       0       0
  3810 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3812 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3813 ;;Total ram usage:        7 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    7
  3816 ;; This function calls:
  3817 ;;		Nothing
  3818 ;; This function is called by:
  3819 ;;		_printf
  3820 ;; This function uses a non-reentrant model
  3821 ;;
  3822                           
  3823                           	psect	text22
  3824  00150E                     __ptext22:
  3825                           	opt stack 0
  3826  00150E                     ___lwdiv:
  3827                           	opt stack 21
  3828                           
  3829                           ;incstack = 0
  3830  00150E  0E00               	movlw	0
  3831  001510  0100               	movlb	0	; () banked
  3832  001512  6FDF               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3833  001514  0E00               	movlw	0
  3834  001516  6FDE               	movwf	___lwdiv@quotient& (0+255),b
  3835                           
  3836                           ; BSR set to: 0
  3837  001518  51DC               	movf	___lwdiv@divisor& (0+255),w,b
  3838  00151A  11DD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3839  00151C  B4D8               	btfsc	status,2,c
  3840  00151E  D01C               	goto	l750
  3841                           
  3842                           ; BSR set to: 0
  3843  001520  0E01               	movlw	1
  3844  001522  6FE0               	movwf	___lwdiv@counter& (0+255),b
  3845  001524  D004               	goto	l745
  3846  001526                     
  3847                           ; BSR set to: 0
  3848                           
  3849                           ; BSR set to: 0
  3850  001526  90D8               	bcf	status,0,c
  3851  001528  37DC               	rlcf	___lwdiv@divisor& (0+255),f,b
  3852  00152A  37DD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3853  00152C  2BE0               	incf	___lwdiv@counter& (0+255),f,b
  3854  00152E                     l745:
  3855                           
  3856                           ; BSR set to: 0
  3857                           
  3858                           ; BSR set to: 0
  3859  00152E  AFDD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3860  001530  D7FA               	goto	l746
  3861  001532                     u810:
  3862                           
  3863                           ; BSR set to: 0
  3864                           
  3865                           ; BSR set to: 0
  3866                           
  3867                           ; BSR set to: 0
  3868  001532  90D8               	bcf	status,0,c
  3869  001534  37DE               	rlcf	___lwdiv@quotient& (0+255),f,b
  3870  001536  37DF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3871                           
  3872                           ; BSR set to: 0
  3873  001538  51DC               	movf	___lwdiv@divisor& (0+255),w,b
  3874  00153A  5DDA               	subwf	___lwdiv@dividend& (0+255),w,b
  3875  00153C  51DD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3876  00153E  59DB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3877  001540  A0D8               	btfss	status,0,c
  3878  001542  D005               	goto	l749
  3879                           
  3880                           ; BSR set to: 0
  3881  001544  51DC               	movf	___lwdiv@divisor& (0+255),w,b
  3882  001546  5FDA               	subwf	___lwdiv@dividend& (0+255),f,b
  3883  001548  51DD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3884  00154A  5BDB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3885                           
  3886                           ; BSR set to: 0
  3887  00154C  81DE               	bsf	___lwdiv@quotient& (0+255),0,b
  3888  00154E                     l749:
  3889                           
  3890                           ; BSR set to: 0
  3891                           
  3892                           ; BSR set to: 0
  3893  00154E  90D8               	bcf	status,0,c
  3894  001550  33DD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3895  001552  33DC               	rrcf	___lwdiv@divisor& (0+255),f,b
  3896                           
  3897                           ; BSR set to: 0
  3898  001554  2FE0               	decfsz	___lwdiv@counter& (0+255),f,b
  3899  001556  D7ED               	goto	u810
  3900  001558                     l750:
  3901                           
  3902                           ; BSR set to: 0
  3903                           
  3904                           ; BSR set to: 0
  3905  001558  C0DE  F0DA         	movff	___lwdiv@quotient,?___lwdiv
  3906  00155C  C0DF  F0DB         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3907                           
  3908                           ; BSR set to: 0
  3909  001560  0012               	return		;funcret
  3910  001562                     __end_of___lwdiv:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           intcon2	equ	0xFF1
  3920                           indf0	equ	0xFEF
  3921                           postinc0	equ	0xFEE
  3922                           plusw0	equ	0xFEB
  3923                           fsr0h	equ	0xFEA
  3924                           fsr0l	equ	0xFE9
  3925                           wreg	equ	0xFE8
  3926                           indf1	equ	0xFE7
  3927                           postinc1	equ	0xFE6
  3928                           postdec1	equ	0xFE5
  3929                           fsr1h	equ	0xFE2
  3930                           fsr1l	equ	0xFE1
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           plusw2	equ	0xFDB
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _C_DOOR_ReadSensors *****************
  3940 ;; Defined at:
  3941 ;;		line 101 in file "Controllers/DOOR_Controller.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;		None
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  d               1    4[BANK0 ] unsigned char 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;                  1    wreg      void 
  3948 ;; Registers used:
  3949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3955 ;;      Params:         0       0       0       0       0       0       0       0       0
  3956 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3957 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3958 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3959 ;;Total ram usage:        5 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    7
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text23
  3970  001358                     __ptext23:
  3971                           	opt stack 0
  3972  001358                     _C_DOOR_ReadSensors:
  3973                           	opt stack 23
  3974                           
  3975                           ;DOOR_Controller.c: 102: uint8_t d;
  3976                           ;DOOR_Controller.c: 103: for (d = 0; d < door_cnt; d++) {
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;incstack = 0
  3980  001358  0E00               	movlw	0
  3981  00135A  0100               	movlb	0	; () banked
  3982  00135C  6FDE               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3983  00135E  D03B               	goto	l44
  3984  001360                     
  3985                           ; BSR set to: 0
  3986                           ;DOOR_Controller.c: 104: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pi
      +                          n) & 0x01;
  3987                           
  3988                           ; BSR set to: 0
  3989  001360  51DE               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3990  001362  0D0A               	mullw	10
  3991  001364  0E06               	movlw	6
  3992  001366  26F3               	addwf	prodl,f,c
  3993  001368  0E00               	movlw	0
  3994  00136A  22F4               	addwfc	prodh,f,c
  3995  00136C  0E60               	movlw	low _doors
  3996  00136E  24F3               	addwf	prodl,w,c
  3997  001370  6ED9               	movwf	fsr2l,c
  3998  001372  0E00               	movlw	high _doors
  3999  001374  20F4               	addwfc	prodh,w,c
  4000  001376  6EDA               	movwf	fsr2h,c
  4001  001378  51DE               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4002  00137A  0D0A               	mullw	10
  4003  00137C  0E09               	movlw	9
  4004  00137E  26F3               	addwf	prodl,f,c
  4005  001380  0E00               	movlw	0
  4006  001382  22F4               	addwfc	prodh,f,c
  4007  001384  0E60               	movlw	low _doors
  4008  001386  24F3               	addwf	prodl,w,c
  4009  001388  6EE1               	movwf	fsr1l,c
  4010  00138A  0E00               	movlw	high _doors
  4011  00138C  20F4               	addwfc	prodh,w,c
  4012  00138E  6EE2               	movwf	fsr1h,c
  4013  001390  50E7               	movf	indf1,w,c
  4014  001392  6FDA               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4015  001394  51DE               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4016  001396  0D0A               	mullw	10
  4017  001398  0E07               	movlw	7
  4018  00139A  26F3               	addwf	prodl,f,c
  4019  00139C  0E00               	movlw	0
  4020  00139E  22F4               	addwfc	prodh,f,c
  4021  0013A0  0E60               	movlw	low _doors
  4022  0013A2  24F3               	addwf	prodl,w,c
  4023  0013A4  6EE1               	movwf	fsr1l,c
  4024  0013A6  0E00               	movlw	high _doors
  4025  0013A8  20F4               	addwfc	prodh,w,c
  4026  0013AA  6EE2               	movwf	fsr1h,c
  4027  0013AC  CFE6 F0DB          	movff	postinc1,??_C_DOOR_ReadSensors+1
  4028  0013B0  CFE5 F0DC          	movff	postdec1,??_C_DOOR_ReadSensors+2
  4029  0013B4  C0DB  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  4030  0013B8  C0DC  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  4031  0013BC  50E7               	movf	indf1,w,c
  4032  0013BE  6FDD               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  4033  0013C0  2BDA               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  4034  0013C2  D002               	goto	u1144
  4035  0013C4                     u1145:
  4036  0013C4  90D8               	bcf	status,0,c
  4037  0013C6  33DD               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  4038  0013C8                     u1144:
  4039  0013C8  2FDA               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  4040  0013CA  D7FC               	goto	u1145
  4041  0013CC  0100               	movlb	0	; () banked
  4042  0013CE  51DD               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  4043  0013D0  0B01               	andlw	1
  4044  0013D2  6EDF               	movwf	indf2,c
  4045                           
  4046                           ; BSR set to: 0
  4047  0013D4  2BDE               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  4048  0013D6                     l44:
  4049                           
  4050                           ; BSR set to: 0
  4051                           
  4052                           ; BSR set to: 0
  4053  0013D6  51DE               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4054  0013D8  6FDA               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4055  0013DA  6BDB               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4056  0013DC  51D3               	movf	_door_cnt& (0+255),w,b
  4057  0013DE  5DDA               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4058  0013E0  51DB               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4059  0013E2  0A80               	xorlw	128
  4060  0013E4  6FDC               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4061  0013E6  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  4062  0013E8  0A80               	xorlw	128
  4063  0013EA  59DC               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4064  0013EC  B0D8               	btfsc	status,0,c
  4065  0013EE  0012               	return	
  4066  0013F0  D7B7               	goto	l45
  4067  0013F2                     __end_of_C_DOOR_ReadSensors:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           prodh	equ	0xFF4
  4074                           prodl	equ	0xFF3
  4075                           intcon	equ	0xFF2
  4076                           intcon2	equ	0xFF1
  4077                           indf0	equ	0xFEF
  4078                           postinc0	equ	0xFEE
  4079                           plusw0	equ	0xFEB
  4080                           fsr0h	equ	0xFEA
  4081                           fsr0l	equ	0xFE9
  4082                           wreg	equ	0xFE8
  4083                           indf1	equ	0xFE7
  4084                           postinc1	equ	0xFE6
  4085                           postdec1	equ	0xFE5
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           indf2	equ	0xFDF
  4089                           postinc2	equ	0xFDE
  4090                           postdec2	equ	0xFDD
  4091                           plusw2	equ	0xFDB
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function _LowISR *****************
  4097 ;; Defined at:
  4098 ;;		line 267 in file "Drivers/UART_Driver.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0
  4113 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4114 ;;      Temps:         21       0       0       0       0       0       0       0       0
  4115 ;;      Totals:        21       0       0       0       0       0       0       0       0
  4116 ;;Total ram usage:       21 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    6
  4119 ;; This function calls:
  4120 ;;		_fillDataBuffer
  4121 ;;		_readByte
  4122 ;; This function is called by:
  4123 ;;		Interrupt level 1
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	intcodelo
  4128  000018                     __pintcodelo:
  4129                           	opt stack 0
  4130  000018                     _LowISR:
  4131                           	opt stack 19
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;incstack = 0
  4135  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4136  00001A  CFD8 F028          	movff	status,??_LowISR
  4137  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  4138  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  4139  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  4140  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  4141  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  4142  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  4143  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  4144  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  4145  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  4146  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  4147  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  4148  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  4149  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  4150  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  4151  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  4152  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  4153  00005E  C044  F039         	movff	btemp,??_LowISR+17
  4154  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  4155  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  4156  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  4157                           
  4158                           ;UART_Driver.c: 268: if (PIR1bits.RC1IF) {
  4159  00006E  AA9E               	btfss	3998,5,c	;volatile
  4160  000070  D005               	goto	i1l186
  4161                           
  4162                           ;UART_Driver.c: 269: fillDataBuffer(readByte());
  4163  000072  ECB8  F00B         	call	_readByte	;wreg free
  4164  000076  EC18  F005         	call	_fillDataBuffer
  4165                           
  4166                           ;UART_Driver.c: 270: PIR1bits.RC1IF = 0;
  4167  00007A  9A9E               	bcf	3998,5,c	;volatile
  4168  00007C                     i1l186:
  4169  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  4170  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  4171  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  4172  000088  C039  F044         	movff	??_LowISR+17,btemp
  4173  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  4174  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  4175  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  4176  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  4177  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  4178  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  4179  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  4180  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  4181  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  4182  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  4183  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  4184  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  4185  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  4186  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  4187  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  4188  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  4189  0000CC  C028  FFD8         	movff	??_LowISR,status
  4190  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4191  0000D2  0010               	retfie	
  4192  0000D4                     __end_of_LowISR:
  4193                           	opt stack 0
  4194                           pclatu	equ	0xFFB
  4195                           pclath	equ	0xFFA
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           prodh	equ	0xFF4
  4201                           prodl	equ	0xFF3
  4202                           intcon	equ	0xFF2
  4203                           intcon2	equ	0xFF1
  4204                           indf0	equ	0xFEF
  4205                           postinc0	equ	0xFEE
  4206                           plusw0	equ	0xFEB
  4207                           fsr0h	equ	0xFEA
  4208                           fsr0l	equ	0xFE9
  4209                           wreg	equ	0xFE8
  4210                           indf1	equ	0xFE7
  4211                           postinc1	equ	0xFE6
  4212                           postdec1	equ	0xFE5
  4213                           fsr1h	equ	0xFE2
  4214                           fsr1l	equ	0xFE1
  4215                           bsr	equ	0xFE0
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           plusw2	equ	0xFDB
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _readByte *****************
  4225 ;; Defined at:
  4226 ;;		line 74 in file "Drivers/UART_Driver.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;		None
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      unsigned char 
  4233 ;; Registers used:
  4234 ;;		wreg, status,2
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0
  4241 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4243 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4244 ;;Total ram usage:        0 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    1
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_LowISR
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           	psect	text25
  4255  001770                     __ptext25:
  4256                           	opt stack 0
  4257  001770                     _readByte:
  4258                           	opt stack 23
  4259                           
  4260                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  4261                           
  4262                           ;incstack = 0
  4263  001770  50AB               	movf	4011,w,c	;volatile
  4264                           
  4265                           ;UART_Driver.c: 77: }
  4266                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  4267  001772  50AB               	movf	4011,w,c	;volatile
  4268                           
  4269                           ;UART_Driver.c: 80: }
  4270                           ;UART_Driver.c: 81: return RCREG;
  4271  001774  50AE               	movf	4014,w,c	;volatile
  4272  001776  0012               	return	
  4273  001778                     __end_of_readByte:
  4274                           	opt stack 0
  4275                           pclatu	equ	0xFFB
  4276                           pclath	equ	0xFFA
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           intcon2	equ	0xFF1
  4285                           indf0	equ	0xFEF
  4286                           postinc0	equ	0xFEE
  4287                           plusw0	equ	0xFEB
  4288                           fsr0h	equ	0xFEA
  4289                           fsr0l	equ	0xFE9
  4290                           wreg	equ	0xFE8
  4291                           indf1	equ	0xFE7
  4292                           postinc1	equ	0xFE6
  4293                           postdec1	equ	0xFE5
  4294                           fsr1h	equ	0xFE2
  4295                           fsr1l	equ	0xFE1
  4296                           bsr	equ	0xFE0
  4297                           indf2	equ	0xFDF
  4298                           postinc2	equ	0xFDE
  4299                           postdec2	equ	0xFDD
  4300                           plusw2	equ	0xFDB
  4301                           fsr2h	equ	0xFDA
  4302                           fsr2l	equ	0xFD9
  4303                           status	equ	0xFD8
  4304                           
  4305 ;; *************** function _fillDataBuffer *****************
  4306 ;; Defined at:
  4307 ;;		line 84 in file "Drivers/UART_Driver.c"
  4308 ;; Parameters:    Size  Location     Type
  4309 ;;  data            1    wreg     unsigned char 
  4310 ;; Auto vars:     Size  Location     Type
  4311 ;;  data            1   38[COMRAM] unsigned char 
  4312 ;; Return value:  Size  Location     Type
  4313 ;;                  1    wreg      void 
  4314 ;; Registers used:
  4315 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4316 ;; Tracked objects:
  4317 ;;		On entry : 0/0
  4318 ;;		On exit  : 0/0
  4319 ;;		Unchanged: 0/0
  4320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4321 ;;      Params:         0       0       0       0       0       0       0       0       0
  4322 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4323 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4324 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4325 ;;Total ram usage:        1 bytes
  4326 ;; Hardware stack levels used:    1
  4327 ;; Hardware stack levels required when called:    5
  4328 ;; This function calls:
  4329 ;;		_acknowledge
  4330 ;; This function is called by:
  4331 ;;		_LowISR
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           	psect	text26
  4336  000A30                     __ptext26:
  4337                           	opt stack 0
  4338  000A30                     _fillDataBuffer:
  4339                           	opt stack 19
  4340                           
  4341                           ;incstack = 0
  4342                           ;fillDataBuffer@data stored from wreg
  4343  000A30  6E27               	movwf	fillDataBuffer@data,c
  4344                           
  4345                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  4346  000A32  D0B5               	goto	i1l135
  4347  000A34                     
  4348                           ;UART_Driver.c: 87: if(data == 0x26) {
  4349  000A34  0E26               	movlw	38
  4350  000A36  1827               	xorwf	fillDataBuffer@data,w,c
  4351  000A38  A4D8               	btfss	status,2,c
  4352  000A3A  D010               	goto	i1l137
  4353                           
  4354                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  4355  000A3C  0E00               	movlw	0
  4356  000A3E  0101               	movlb	1	; () banked
  4357  000A40  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4358                           
  4359                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  4360  000A42  0E00               	movlw	0
  4361  000A44  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4362                           
  4363                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  4364  000A46  0E00               	movlw	0
  4365  000A48  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4366                           
  4367                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  4368  000A4A  0E00               	movlw	0
  4369  000A4C  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4370                           
  4371                           ;UART_Driver.c: 92: readReady = 0;
  4372  000A4E  0E00               	movlw	0
  4373  000A50  0100               	movlb	0	; () banked
  4374  000A52  6FD9               	movwf	_readReady& (0+255),b
  4375                           
  4376                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  4377  000A54  0E01               	movlw	1
  4378  000A56  0101               	movlb	1	; () banked
  4379  000A58  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4380                           
  4381                           ;UART_Driver.c: 94: } else {
  4382  000A5A  0012               	return	
  4383  000A5C                     i1l137:
  4384                           
  4385                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  4386                           
  4387                           ; BSR set to: 1
  4388  000A5C  0E00               	movlw	0
  4389  000A5E  0101               	movlb	1	; () banked
  4390  000A60  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4391                           
  4392                           ; BSR set to: 1
  4393                           ;UART_Driver.c: 97: }
  4394                           ;UART_Driver.c: 98: break;
  4395                           
  4396                           ; BSR set to: 1
  4397                           ;UART_Driver.c: 96: return;
  4398  000A62  0012               	return	
  4399  000A64                     
  4400                           ; BSR set to: 1
  4401                           ;UART_Driver.c: 101: if (data == 0x3A) {
  4402                           
  4403                           ; BSR set to: 1
  4404  000A64  0E3A               	movlw	58
  4405  000A66  1827               	xorwf	fillDataBuffer@data,w,c
  4406  000A68  A4D8               	btfss	status,2,c
  4407  000A6A  D00D               	goto	i1l142
  4408                           
  4409                           ; BSR set to: 1
  4410                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  4411  000A6C  0E02               	movlw	2
  4412  000A6E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4413                           
  4414                           ; BSR set to: 1
  4415                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  4416  000A70  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4417  000A72  0D01               	mullw	1
  4418  000A74  0E00               	movlw	low _readBuffer
  4419  000A76  24F3               	addwf	prodl,w,c
  4420  000A78  6ED9               	movwf	fsr2l,c
  4421  000A7A  0E01               	movlw	high _readBuffer
  4422  000A7C  20F4               	addwfc	prodh,w,c
  4423  000A7E  6EDA               	movwf	fsr2h,c
  4424  000A80  0E00               	movlw	0
  4425  000A82  6EDF               	movwf	indf2,c
  4426                           
  4427                           ;UART_Driver.c: 104: } else {
  4428  000A84  0012               	return	
  4429  000A86                     i1l142:
  4430                           
  4431                           ; BSR set to: 1
  4432                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  4433                           
  4434                           ; BSR set to: 1
  4435  000A86  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4436  000A88  0D01               	mullw	1
  4437  000A8A  0E00               	movlw	low _readBuffer
  4438  000A8C  24F3               	addwf	prodl,w,c
  4439  000A8E  6ED9               	movwf	fsr2l,c
  4440  000A90  0E01               	movlw	high _readBuffer
  4441  000A92  20F4               	addwfc	prodh,w,c
  4442  000A94  6EDA               	movwf	fsr2h,c
  4443  000A96  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4444                           
  4445                           ; BSR set to: 1
  4446                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  4447  000A9A  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  4448                           
  4449                           ; BSR set to: 1
  4450                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  4451  000A9C  0E0A               	movlw	10
  4452  000A9E  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  4453  000AA0  0012               	return	
  4454                           
  4455                           ; BSR set to: 1
  4456                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  4457  000AA2  0E00               	movlw	0
  4458  000AA4  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4459                           
  4460                           ; BSR set to: 1
  4461                           ;UART_Driver.c: 109: }
  4462                           ;UART_Driver.c: 110: }
  4463                           ;UART_Driver.c: 111: break;
  4464                           
  4465                           ; BSR set to: 1
  4466  000AA6  0012               	return	
  4467  000AA8                     
  4468                           ; BSR set to: 1
  4469                           ;UART_Driver.c: 114: if (data == 0x3A) {
  4470                           
  4471                           ; BSR set to: 1
  4472  000AA8  0E3A               	movlw	58
  4473  000AAA  1827               	xorwf	fillDataBuffer@data,w,c
  4474  000AAC  A4D8               	btfss	status,2,c
  4475  000AAE  D00D               	goto	i1l146
  4476                           
  4477                           ; BSR set to: 1
  4478                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  4479  000AB0  0E03               	movlw	3
  4480  000AB2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4481                           
  4482                           ; BSR set to: 1
  4483                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  4484  000AB4  513D               	movf	(_readBuffer+61)& (0+255),w,b
  4485  000AB6  0D01               	mullw	1
  4486  000AB8  0E0B               	movlw	low (_readBuffer+11)
  4487  000ABA  24F3               	addwf	prodl,w,c
  4488  000ABC  6ED9               	movwf	fsr2l,c
  4489  000ABE  0E01               	movlw	high (_readBuffer+11)
  4490  000AC0  20F4               	addwfc	prodh,w,c
  4491  000AC2  6EDA               	movwf	fsr2h,c
  4492  000AC4  0E00               	movlw	0
  4493  000AC6  6EDF               	movwf	indf2,c
  4494                           
  4495                           ;UART_Driver.c: 117: } else {
  4496  000AC8  0012               	return	
  4497  000ACA                     i1l146:
  4498                           
  4499                           ; BSR set to: 1
  4500                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  4501                           
  4502                           ; BSR set to: 1
  4503  000ACA  513D               	movf	(_readBuffer+61)& (0+255),w,b
  4504  000ACC  0D01               	mullw	1
  4505  000ACE  0E0B               	movlw	low (_readBuffer+11)
  4506  000AD0  24F3               	addwf	prodl,w,c
  4507  000AD2  6ED9               	movwf	fsr2l,c
  4508  000AD4  0E01               	movlw	high (_readBuffer+11)
  4509  000AD6  20F4               	addwfc	prodh,w,c
  4510  000AD8  6EDA               	movwf	fsr2h,c
  4511  000ADA  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4512                           
  4513                           ; BSR set to: 1
  4514                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  4515  000ADE  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  4516                           
  4517                           ; BSR set to: 1
  4518                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  4519  000AE0  0E32               	movlw	50
  4520  000AE2  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  4521  000AE4  0012               	return	
  4522                           
  4523                           ; BSR set to: 1
  4524                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  4525  000AE6  0E00               	movlw	0
  4526  000AE8  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4527                           
  4528                           ; BSR set to: 1
  4529                           ;UART_Driver.c: 122: }
  4530                           ;UART_Driver.c: 123: }
  4531                           ;UART_Driver.c: 124: break;
  4532                           
  4533                           ; BSR set to: 1
  4534  000AEA  0012               	return	
  4535  000AEC                     
  4536                           ; BSR set to: 1
  4537                           ;UART_Driver.c: 127: if (data == 0x3A) {
  4538                           
  4539                           ; BSR set to: 1
  4540  000AEC  0E3A               	movlw	58
  4541  000AEE  1827               	xorwf	fillDataBuffer@data,w,c
  4542  000AF0  A4D8               	btfss	status,2,c
  4543  000AF2  D00D               	goto	i1l150
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  4547  000AF4  0E04               	movlw	4
  4548  000AF6  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4549                           
  4550                           ; BSR set to: 1
  4551                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  4552  000AF8  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4553  000AFA  0D01               	mullw	1
  4554  000AFC  0E3E               	movlw	low (_readBuffer+62)
  4555  000AFE  24F3               	addwf	prodl,w,c
  4556  000B00  6ED9               	movwf	fsr2l,c
  4557  000B02  0E01               	movlw	high (_readBuffer+62)
  4558  000B04  20F4               	addwfc	prodh,w,c
  4559  000B06  6EDA               	movwf	fsr2h,c
  4560  000B08  0E00               	movlw	0
  4561  000B0A  6EDF               	movwf	indf2,c
  4562                           
  4563                           ;UART_Driver.c: 130: } else {
  4564  000B0C  0012               	return	
  4565  000B0E                     i1l150:
  4566                           
  4567                           ; BSR set to: 1
  4568                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  4569                           
  4570                           ; BSR set to: 1
  4571  000B0E  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4572  000B10  0D01               	mullw	1
  4573  000B12  0E3E               	movlw	low (_readBuffer+62)
  4574  000B14  24F3               	addwf	prodl,w,c
  4575  000B16  6ED9               	movwf	fsr2l,c
  4576  000B18  0E01               	movlw	high (_readBuffer+62)
  4577  000B1A  20F4               	addwfc	prodh,w,c
  4578  000B1C  6EDA               	movwf	fsr2h,c
  4579  000B1E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4580                           
  4581                           ; BSR set to: 1
  4582                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  4583  000B22  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  4584                           
  4585                           ; BSR set to: 1
  4586                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  4587  000B24  0E32               	movlw	50
  4588  000B26  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  4589  000B28  0012               	return	
  4590                           
  4591                           ; BSR set to: 1
  4592                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  4593  000B2A  0E00               	movlw	0
  4594  000B2C  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4595                           
  4596                           ; BSR set to: 1
  4597                           ;UART_Driver.c: 135: }
  4598                           ;UART_Driver.c: 136: }
  4599                           ;UART_Driver.c: 137: break;
  4600                           
  4601                           ; BSR set to: 1
  4602  000B2E  0012               	return	
  4603  000B30                     
  4604                           ; BSR set to: 1
  4605                           ;UART_Driver.c: 140: if (data == 0x3A) {
  4606                           
  4607                           ; BSR set to: 1
  4608  000B30  0E3A               	movlw	58
  4609  000B32  1827               	xorwf	fillDataBuffer@data,w,c
  4610  000B34  A4D8               	btfss	status,2,c
  4611  000B36  D00D               	goto	i1l154
  4612                           
  4613                           ; BSR set to: 1
  4614                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  4615  000B38  0E05               	movlw	5
  4616  000B3A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4617                           
  4618                           ; BSR set to: 1
  4619                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4620  000B3C  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4621  000B3E  0D01               	mullw	1
  4622  000B40  0E71               	movlw	low (_readBuffer+113)
  4623  000B42  24F3               	addwf	prodl,w,c
  4624  000B44  6ED9               	movwf	fsr2l,c
  4625  000B46  0E01               	movlw	high (_readBuffer+113)
  4626  000B48  20F4               	addwfc	prodh,w,c
  4627  000B4A  6EDA               	movwf	fsr2h,c
  4628  000B4C  0E00               	movlw	0
  4629  000B4E  6EDF               	movwf	indf2,c
  4630                           
  4631                           ;UART_Driver.c: 143: } else {
  4632  000B50  0012               	return	
  4633  000B52                     i1l154:
  4634                           
  4635                           ; BSR set to: 1
  4636                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4637                           
  4638                           ; BSR set to: 1
  4639  000B52  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4640  000B54  0D01               	mullw	1
  4641  000B56  0E71               	movlw	low (_readBuffer+113)
  4642  000B58  24F3               	addwf	prodl,w,c
  4643  000B5A  6ED9               	movwf	fsr2l,c
  4644  000B5C  0E01               	movlw	high (_readBuffer+113)
  4645  000B5E  20F4               	addwfc	prodh,w,c
  4646  000B60  6EDA               	movwf	fsr2h,c
  4647  000B62  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4648                           
  4649                           ; BSR set to: 1
  4650                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4651  000B66  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4652                           
  4653                           ; BSR set to: 1
  4654                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4655  000B68  0E32               	movlw	50
  4656  000B6A  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4657  000B6C  0012               	return	
  4658                           
  4659                           ; BSR set to: 1
  4660                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4661  000B6E  0E00               	movlw	0
  4662  000B70  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4663                           
  4664                           ; BSR set to: 1
  4665                           ;UART_Driver.c: 148: }
  4666                           ;UART_Driver.c: 149: }
  4667                           ;UART_Driver.c: 150: break;
  4668                           
  4669                           ; BSR set to: 1
  4670  000B72  0012               	return	
  4671  000B74                     
  4672                           ; BSR set to: 1
  4673                           ;UART_Driver.c: 153: if (data == 0x24) {
  4674                           
  4675                           ; BSR set to: 1
  4676  000B74  0E24               	movlw	36
  4677  000B76  1827               	xorwf	fillDataBuffer@data,w,c
  4678  000B78  A4D8               	btfss	status,2,c
  4679  000B7A  D009               	goto	i1l158
  4680                           
  4681                           ; BSR set to: 1
  4682                           ;UART_Driver.c: 154: acknowledge();
  4683  000B7C  EC29  F00A         	call	_acknowledge	;wreg free
  4684                           
  4685                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4686  000B80  0E00               	movlw	0
  4687  000B82  0101               	movlb	1	; () banked
  4688  000B84  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4689                           
  4690                           ; BSR set to: 1
  4691                           ;UART_Driver.c: 156: readReady = 1;
  4692  000B86  0E01               	movlw	1
  4693  000B88  0100               	movlb	0	; () banked
  4694  000B8A  6FD9               	movwf	_readReady& (0+255),b
  4695                           
  4696                           ;UART_Driver.c: 157: } else {
  4697  000B8C  0012               	return	
  4698  000B8E                     i1l158:
  4699                           
  4700                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4701                           
  4702                           ; BSR set to: 0
  4703  000B8E  5027               	movf	fillDataBuffer@data,w,c
  4704  000B90  0FD0               	addlw	208
  4705  000B92  0101               	movlb	1	; () banked
  4706  000B94  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4707                           
  4708                           ; BSR set to: 1
  4709                           ;UART_Driver.c: 160: }
  4710                           ;UART_Driver.c: 161: break;
  4711  000B96  0012               	return	
  4712  000B98                     
  4713                           ; BSR set to: 1
  4714                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4715                           
  4716                           ; BSR set to: 1
  4717  000B98  0E00               	movlw	0
  4718  000B9A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4719                           
  4720                           ; BSR set to: 1
  4721                           ;UART_Driver.c: 166: }
  4722                           
  4723                           ;UART_Driver.c: 165: break;
  4724  000B9C  0012               	return	
  4725  000B9E                     i1l135:
  4726                           
  4727                           ; BSR set to: 1
  4728  000B9E  0101               	movlb	1	; () banked
  4729  000BA0  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4730                           
  4731                           ; Switch size 1, requested type "space"
  4732                           ; Number of cases is 6, Range of values is 0 to 5
  4733                           ; switch strategies available:
  4734                           ; Name         Instructions Cycles
  4735                           ; simple_byte           19    10 (average)
  4736                           ;	Chosen strategy is simple_byte
  4737  000BA2  0A00               	xorlw	0	; case 0
  4738  000BA4  B4D8               	btfsc	status,2,c
  4739  000BA6  D746               	goto	i1l136
  4740  000BA8  0A01               	xorlw	1	; case 1
  4741  000BAA  B4D8               	btfsc	status,2,c
  4742  000BAC  D75B               	goto	i1l141
  4743  000BAE  0A03               	xorlw	3	; case 2
  4744  000BB0  B4D8               	btfsc	status,2,c
  4745  000BB2  D77A               	goto	i1l145
  4746  000BB4  0A01               	xorlw	1	; case 3
  4747  000BB6  B4D8               	btfsc	status,2,c
  4748  000BB8  D799               	goto	i1l149
  4749  000BBA  0A07               	xorlw	7	; case 4
  4750  000BBC  B4D8               	btfsc	status,2,c
  4751  000BBE  D7B8               	goto	i1l153
  4752  000BC0  0A01               	xorlw	1	; case 5
  4753  000BC2  B4D8               	btfsc	status,2,c
  4754  000BC4  D7D7               	goto	i1l157
  4755  000BC6  D7E8               	goto	i1l160
  4756  000BC8                     __end_of_fillDataBuffer:
  4757                           	opt stack 0
  4758                           pclatu	equ	0xFFB
  4759                           pclath	equ	0xFFA
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           prodh	equ	0xFF4
  4765                           prodl	equ	0xFF3
  4766                           intcon	equ	0xFF2
  4767                           intcon2	equ	0xFF1
  4768                           indf0	equ	0xFEF
  4769                           postinc0	equ	0xFEE
  4770                           plusw0	equ	0xFEB
  4771                           fsr0h	equ	0xFEA
  4772                           fsr0l	equ	0xFE9
  4773                           wreg	equ	0xFE8
  4774                           indf1	equ	0xFE7
  4775                           postinc1	equ	0xFE6
  4776                           postdec1	equ	0xFE5
  4777                           fsr1h	equ	0xFE2
  4778                           fsr1l	equ	0xFE1
  4779                           bsr	equ	0xFE0
  4780                           indf2	equ	0xFDF
  4781                           postinc2	equ	0xFDE
  4782                           postdec2	equ	0xFDD
  4783                           plusw2	equ	0xFDB
  4784                           fsr2h	equ	0xFDA
  4785                           fsr2l	equ	0xFD9
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _acknowledge *****************
  4789 ;; Defined at:
  4790 ;;		line 169 in file "Drivers/UART_Driver.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4806 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4807 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4808 ;;Total ram usage:        0 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    4
  4811 ;; This function calls:
  4812 ;;		i1_printf
  4813 ;; This function is called by:
  4814 ;;		_fillDataBuffer
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text27
  4819  001452                     __ptext27:
  4820                           	opt stack 0
  4821  001452                     _acknowledge:
  4822                           	opt stack 19
  4823                           
  4824                           ;UART_Driver.c: 170: printf(startCharacter);
  4825                           
  4826                           ;incstack = 0
  4827  001452  C041  F01A         	movff	_startCharacter,i1printf@f
  4828  001456  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4829  00145A  501A               	movf	i1printf@f,w,c
  4830  00145C  101B               	iorwf	i1printf@f+1,w,c
  4831  00145E  A4D8               	btfss	status,2,c
  4832  001460  0E00               	movlw	low (__mediumconst shr (0+16))
  4833  001462  6E1C               	movwf	i1printf@f+2,c
  4834  001464  EC91  F006         	call	i1_printf	;wreg free
  4835                           
  4836                           ;UART_Driver.c: 172: printf(ackCharacter);
  4837  001468  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4838  00146C  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4839  001470  501A               	movf	i1printf@f,w,c
  4840  001472  101B               	iorwf	i1printf@f+1,w,c
  4841  001474  A4D8               	btfss	status,2,c
  4842  001476  0E00               	movlw	low (__mediumconst shr (0+16))
  4843  001478  6E1C               	movwf	i1printf@f+2,c
  4844  00147A  EC91  F006         	call	i1_printf	;wreg free
  4845                           
  4846                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4847  00147E  0E22               	movlw	low STR_5
  4848  001480  6E1A               	movwf	i1printf@f,c
  4849  001482  0E08               	movlw	high STR_5
  4850  001484  6E1B               	movwf	i1printf@f+1,c
  4851  001486  501A               	movf	i1printf@f,w,c
  4852  001488  101B               	iorwf	i1printf@f+1,w,c
  4853  00148A  A4D8               	btfss	status,2,c
  4854  00148C  0E00               	movlw	low (__mediumconst shr (0+16))
  4855  00148E  6E1C               	movwf	i1printf@f+2,c
  4856  001490  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4857  001494  6A1E               	clrf	?i1_printf+4,c
  4858  001496  EC91  F006         	call	i1_printf	;wreg free
  4859                           
  4860                           ;UART_Driver.c: 176: printf(stopCharacter);
  4861  00149A  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4862  00149E  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4863  0014A2  501A               	movf	i1printf@f,w,c
  4864  0014A4  101B               	iorwf	i1printf@f+1,w,c
  4865  0014A6  A4D8               	btfss	status,2,c
  4866  0014A8  0E00               	movlw	low (__mediumconst shr (0+16))
  4867  0014AA  6E1C               	movwf	i1printf@f+2,c
  4868  0014AC  EC91  F006         	call	i1_printf	;wreg free
  4869  0014B0  0012               	return		;funcret
  4870  0014B2                     __end_of_acknowledge:
  4871                           	opt stack 0
  4872                           pclatu	equ	0xFFB
  4873                           pclath	equ	0xFFA
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           intcon	equ	0xFF2
  4881                           intcon2	equ	0xFF1
  4882                           indf0	equ	0xFEF
  4883                           postinc0	equ	0xFEE
  4884                           plusw0	equ	0xFEB
  4885                           fsr0h	equ	0xFEA
  4886                           fsr0l	equ	0xFE9
  4887                           wreg	equ	0xFE8
  4888                           indf1	equ	0xFE7
  4889                           postinc1	equ	0xFE6
  4890                           postdec1	equ	0xFE5
  4891                           fsr1h	equ	0xFE2
  4892                           fsr1l	equ	0xFE1
  4893                           bsr	equ	0xFE0
  4894                           indf2	equ	0xFDF
  4895                           postinc2	equ	0xFDE
  4896                           postdec2	equ	0xFDD
  4897                           plusw2	equ	0xFDB
  4898                           fsr2h	equ	0xFDA
  4899                           fsr2l	equ	0xFD9
  4900                           status	equ	0xFD8
  4901                           
  4902 ;; *************** function i1_printf *****************
  4903 ;; Defined at:
  4904 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4907 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  4908 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  4909 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  4910 ;;		 -> C_DOOR_SendStates@com(3), 
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  printf          4    0        struct .
  4913 ;;  printf          3    0        PTR const unsigned char 
  4914 ;;  printf          2   34[COMRAM] unsigned int 
  4915 ;;  printf          2   31[COMRAM] PTR void [1]
  4916 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4917 ;;  printf          2    0        unsigned int 
  4918 ;;  printf          1   37[COMRAM] char 
  4919 ;;  printf          1   36[COMRAM] char 
  4920 ;;  printf          1   33[COMRAM] unsigned char 
  4921 ;;  printf          1   30[COMRAM] unsigned char 
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  2   25[COMRAM] int 
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4931 ;;      Params:         5       0       0       0       0       0       0       0       0
  4932 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4934 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4935 ;;Total ram usage:       13 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    3
  4938 ;; This function calls:
  4939 ;;		i1___lwdiv
  4940 ;;		i1_putch
  4941 ;; This function is called by:
  4942 ;;		_acknowledge
  4943 ;; This function uses a non-reentrant model
  4944 ;;
  4945                           
  4946                           	psect	text28
  4947  000D22                     __ptext28:
  4948                           	opt stack 0
  4949  000D22                     i1_printf:
  4950                           	opt stack 19
  4951                           
  4952                           ;doprnt.c: 466: va_list ap;
  4953                           ;doprnt.c: 499: signed char c;
  4954                           ;doprnt.c: 506: signed char prec;
  4955                           ;doprnt.c: 508: unsigned char flag;
  4956                           ;doprnt.c: 523: union {
  4957                           ;doprnt.c: 524: unsigned long vd;
  4958                           ;doprnt.c: 525: double integ;
  4959                           ;doprnt.c: 526: } tmpval;
  4960                           ;doprnt.c: 528: unsigned int val;
  4961                           ;doprnt.c: 529: unsigned len;
  4962                           ;doprnt.c: 530: const char * cp;
  4963                           ;doprnt.c: 533: *ap = __va_start();
  4964                           
  4965                           ;incstack = 0
  4966  000D22  0E1D               	movlw	low (?i1_printf+3)
  4967  000D24  6E20               	movwf	i1printf@ap,c
  4968  000D26  0E00               	movlw	high (?i1_printf+3)
  4969  000D28  6E21               	movwf	i1printf@ap+1,c
  4970                           
  4971                           ;doprnt.c: 536: while(c = *f++) {
  4972  000D2A  D085               	goto	i1u99_20
  4973  000D2C                     
  4974                           ;doprnt.c: 538: if(c != '%')
  4975  000D2C  0E25               	movlw	37
  4976  000D2E  1826               	xorwf	i1printf@c,w,c
  4977  000D30  B4D8               	btfsc	status,2,c
  4978  000D32  D004               	goto	i1l327
  4979                           
  4980                           ;doprnt.c: 540: {
  4981                           ;doprnt.c: 541: (putch(c) );
  4982  000D34  5026               	movf	i1printf@c,w,c
  4983  000D36  ECB3  F00B         	call	i1_putch
  4984                           
  4985                           ;doprnt.c: 542: continue;
  4986  000D3A  D07D               	goto	i1u99_20
  4987  000D3C                     i1l327:
  4988                           
  4989                           ;doprnt.c: 543: }
  4990                           ;doprnt.c: 548: flag = 0;
  4991  000D3C  0E00               	movlw	0
  4992  000D3E  6E1F               	movwf	i1printf@flag,c
  4993                           
  4994                           ;doprnt.c: 635: switch(c = *f++) {
  4995  000D40  D004               	goto	i1l328
  4996  000D42                     
  4997                           ;doprnt.c: 809: (putch(c) );
  4998  000D42  5026               	movf	i1printf@c,w,c
  4999  000D44  ECB3  F00B         	call	i1_putch
  5000                           
  5001                           ;doprnt.c: 810: continue;
  5002  000D48  D076               	goto	i1u99_20
  5003  000D4A                     i1l328:
  5004  000D4A  C01A  FFF6         	movff	i1printf@f,tblptrl
  5005  000D4E  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  5006  000D52  C01C  FFF8         	movff	i1printf@f+2,tblptru
  5007  000D56  0E01               	movlw	1
  5008  000D58  261A               	addwf	i1printf@f,f,c
  5009  000D5A  0E00               	movlw	0
  5010  000D5C  221B               	addwfc	i1printf@f+1,f,c
  5011  000D5E  221C               	addwfc	i1printf@f+2,f,c
  5012  000D60  BAF8               	btfsc	tblptru,5,c
  5013  000D62  D003               	bra	i1u95_27
  5014  000D64  0008               	tblrd		*
  5015  000D66  50F5               	movf	tablat,w,c
  5016  000D68  D005               	bra	i1u95_20
  5017  000D6A                     i1u95_27:
  5018  000D6A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5019  000D6E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5020  000D72  50EF               	movf	indf0,w,c
  5021  000D74                     i1u95_20:
  5022  000D74  6E26               	movwf	i1printf@c,c
  5023  000D76  5026               	movf	i1printf@c,w,c
  5024                           
  5025                           ; Switch size 1, requested type "space"
  5026                           ; Number of cases is 2, Range of values is 0 to 120
  5027                           ; switch strategies available:
  5028                           ; Name         Instructions Cycles
  5029                           ; simple_byte            7     4 (average)
  5030                           ;	Chosen strategy is simple_byte
  5031  000D78  0A00               	xorlw	0	; case 0
  5032  000D7A  B4D8               	btfsc	status,2,c
  5033  000D7C  0012               	return	
  5034  000D7E  0A78               	xorlw	120	; case 120
  5035  000D80  A4D8               	btfss	status,2,c
  5036  000D82  D7DF               	goto	i1l333
  5037                           
  5038                           ;doprnt.c: 1273: {
  5039                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5040  000D84  C020  FFD9         	movff	i1printf@ap,fsr2l
  5041  000D88  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  5042  000D8C  CFDE F023          	movff	postinc2,i1printf@val
  5043  000D90  CFDD F024          	movff	postdec2,i1printf@val+1
  5044  000D94  0E02               	movlw	2
  5045  000D96  2620               	addwf	i1printf@ap,f,c
  5046  000D98  0E00               	movlw	0
  5047  000D9A  2221               	addwfc	i1printf@ap+1,f,c
  5048                           
  5049                           ;doprnt.c: 1287: }
  5050                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5051  000D9C  0E01               	movlw	1
  5052  000D9E  6E26               	movwf	i1printf@c,c
  5053  000DA0  D014               	goto	i1l1653
  5054  000DA2                     
  5055                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5056  000DA2  5026               	movf	i1printf@c,w,c
  5057  000DA4  0D02               	mullw	2
  5058  000DA6  0E01               	movlw	low _hexpowers
  5059  000DA8  24F3               	addwf	prodl,w,c
  5060  000DAA  6EF6               	movwf	tblptrl,c
  5061  000DAC  0E08               	movlw	high _hexpowers
  5062  000DAE  20F4               	addwfc	prodh,w,c
  5063  000DB0  6EF7               	movwf	tblptrh,c
  5064  000DB2                     	if	1	;There are 3 active tblptr bytes
  5065  000DB2  6AF8               	clrf	tblptru,c
  5066  000DB4  0E00               	movlw	low (__mediumconst shr (0+16))
  5067  000DB6  22F8               	addwfc	tblptru,f,c
  5068  000DB8                     	endif
  5069  000DB8  0009               	tblrd		*+
  5070  000DBA  50F5               	movf	tablat,w,c
  5071  000DBC  5C23               	subwf	i1printf@val,w,c
  5072  000DBE  0009               	tblrd		*+
  5073  000DC0  50F5               	movf	tablat,w,c
  5074  000DC2  5824               	subwfb	i1printf@val+1,w,c
  5075  000DC4  A0D8               	btfss	status,0,c
  5076  000DC6  D005               	goto	i1u98_20
  5077                           
  5078                           ;doprnt.c: 1318: break;
  5079  000DC8  2A26               	incf	i1printf@c,f,c
  5080  000DCA                     i1l1653:
  5081  000DCA  0E04               	movlw	4
  5082  000DCC  1826               	xorwf	i1printf@c,w,c
  5083  000DCE  A4D8               	btfss	status,2,c
  5084  000DD0  D7E8               	goto	i1l334
  5085  000DD2                     i1u98_20:
  5086                           
  5087                           ;doprnt.c: 1422: {
  5088                           ;doprnt.c: 1469: }
  5089                           ;doprnt.c: 1472: prec = c;
  5090  000DD2  C026  F025         	movff	i1printf@c,i1printf@prec
  5091                           
  5092                           ;doprnt.c: 1474: while(prec--) {
  5093  000DD6  D02B               	goto	i1l337
  5094  000DD8                     
  5095                           ;doprnt.c: 1478: {
  5096                           ;doprnt.c: 1499: {
  5097                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5098  000DD8  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  5099  000DDC  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  5100  000DE0  5025               	movf	i1printf@prec,w,c
  5101  000DE2  0D02               	mullw	2
  5102  000DE4  0E01               	movlw	low _hexpowers
  5103  000DE6  24F3               	addwf	prodl,w,c
  5104  000DE8  6EF6               	movwf	tblptrl,c
  5105  000DEA  0E08               	movlw	high _hexpowers
  5106  000DEC  20F4               	addwfc	prodh,w,c
  5107  000DEE  6EF7               	movwf	tblptrh,c
  5108  000DF0                     	if	1	;There are 3 active tblptr bytes
  5109  000DF0  6AF8               	clrf	tblptru,c
  5110  000DF2  0E00               	movlw	low (__mediumconst shr (0+16))
  5111  000DF4  22F8               	addwfc	tblptru,f,c
  5112  000DF6                     	endif
  5113  000DF6  0009               	tblrd		*+
  5114  000DF8  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  5115  000DFC  000A               	tblrd		*-
  5116  000DFE  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  5117  000E02  ECB1  F00A         	call	i1___lwdiv	;wreg free
  5118  000E06  5013               	movf	?i1___lwdiv,w,c
  5119  000E08  0B0F               	andlw	15
  5120  000E0A  6E22               	movwf	i1printf@idx,c
  5121                           
  5122                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5123  000E0C  5022               	movf	i1printf@idx,w,c
  5124  000E0E  0D01               	mullw	1
  5125  000E10  0E09               	movlw	low STR_17
  5126  000E12  24F3               	addwf	prodl,w,c
  5127  000E14  6EF6               	movwf	tblptrl,c
  5128  000E16  0E08               	movlw	high STR_17
  5129  000E18  20F4               	addwfc	prodh,w,c
  5130  000E1A  6EF7               	movwf	tblptrh,c
  5131  000E1C                     	if	1	;There are 3 active tblptr bytes
  5132  000E1C  6AF8               	clrf	tblptru,c
  5133  000E1E  0E00               	movlw	low (__mediumconst shr (0+16))
  5134  000E20  22F8               	addwfc	tblptru,f,c
  5135  000E22                     	endif
  5136  000E22  0008               	tblrd		*
  5137  000E24  CFF5 F026          	movff	tablat,i1printf@c
  5138                           
  5139                           ;doprnt.c: 1508: }
  5140                           ;doprnt.c: 1523: }
  5141                           ;doprnt.c: 1524: (putch(c) );
  5142  000E28  5026               	movf	i1printf@c,w,c
  5143  000E2A  ECB3  F00B         	call	i1_putch
  5144  000E2E                     i1l337:
  5145  000E2E  0625               	decf	i1printf@prec,f,c
  5146  000E30  2825               	incf	i1printf@prec,w,c
  5147  000E32  A4D8               	btfss	status,2,c
  5148  000E34  D7D1               	goto	i1l338
  5149  000E36                     i1u99_20:
  5150  000E36  C01A  FFF6         	movff	i1printf@f,tblptrl
  5151  000E3A  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  5152  000E3E  C01C  FFF8         	movff	i1printf@f+2,tblptru
  5153  000E42  0E01               	movlw	1
  5154  000E44  261A               	addwf	i1printf@f,f,c
  5155  000E46  0E00               	movlw	0
  5156  000E48  221B               	addwfc	i1printf@f+1,f,c
  5157  000E4A  221C               	addwfc	i1printf@f+2,f,c
  5158  000E4C  BAF8               	btfsc	tblptru,5,c
  5159  000E4E  D003               	bra	i1u100_27
  5160  000E50  0008               	tblrd		*
  5161  000E52  50F5               	movf	tablat,w,c
  5162  000E54  D005               	bra	i1u100_20
  5163  000E56                     i1u100_27:
  5164  000E56  CFF6 FFE9          	movff	tblptrl,fsr0l
  5165  000E5A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5166  000E5E  50EF               	movf	indf0,w,c
  5167  000E60                     i1u100_20:
  5168  000E60  6E26               	movwf	i1printf@c,c
  5169  000E62  5026               	movf	i1printf@c,w,c
  5170  000E64  B4D8               	btfsc	status,2,c
  5171  000E66  0012               	return	
  5172  000E68  D761               	goto	i1l326
  5173  000E6A                     __end_ofi1_printf:
  5174                           	opt stack 0
  5175                           pclatu	equ	0xFFB
  5176                           pclath	equ	0xFFA
  5177                           tblptru	equ	0xFF8
  5178                           tblptrh	equ	0xFF7
  5179                           tblptrl	equ	0xFF6
  5180                           tablat	equ	0xFF5
  5181                           prodh	equ	0xFF4
  5182                           prodl	equ	0xFF3
  5183                           intcon	equ	0xFF2
  5184                           intcon2	equ	0xFF1
  5185                           indf0	equ	0xFEF
  5186                           postinc0	equ	0xFEE
  5187                           plusw0	equ	0xFEB
  5188                           fsr0h	equ	0xFEA
  5189                           fsr0l	equ	0xFE9
  5190                           wreg	equ	0xFE8
  5191                           indf1	equ	0xFE7
  5192                           postinc1	equ	0xFE6
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           bsr	equ	0xFE0
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           plusw2	equ	0xFDB
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function i1_putch *****************
  5206 ;; Defined at:
  5207 ;;		line 263 in file "Drivers/UART_Driver.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  data            1    wreg     unsigned char 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  data            1   19[COMRAM] unsigned char 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  1    wreg      void 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5221 ;;      Params:         0       0       0       0       0       0       0       0       0
  5222 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5224 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5225 ;;Total ram usage:        1 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    2
  5228 ;; This function calls:
  5229 ;;		i1_writeByte
  5230 ;; This function is called by:
  5231 ;;		i1_printf
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text29
  5236  001766                     __ptext29:
  5237                           	opt stack 0
  5238  001766                     i1_putch:
  5239                           	opt stack 19
  5240                           
  5241                           ;incstack = 0
  5242                           ;i1putch@data stored from wreg
  5243  001766  6E14               	movwf	i1putch@data,c
  5244                           
  5245                           ;UART_Driver.c: 264: writeByte(data);
  5246  001768  5014               	movf	i1putch@data,w,c
  5247  00176A  ECA8  F00B         	call	i1_writeByte
  5248  00176E  0012               	return		;funcret
  5249  001770                     __end_ofi1_putch:
  5250                           	opt stack 0
  5251                           pclatu	equ	0xFFB
  5252                           pclath	equ	0xFFA
  5253                           tblptru	equ	0xFF8
  5254                           tblptrh	equ	0xFF7
  5255                           tblptrl	equ	0xFF6
  5256                           tablat	equ	0xFF5
  5257                           prodh	equ	0xFF4
  5258                           prodl	equ	0xFF3
  5259                           intcon	equ	0xFF2
  5260                           intcon2	equ	0xFF1
  5261                           indf0	equ	0xFEF
  5262                           postinc0	equ	0xFEE
  5263                           plusw0	equ	0xFEB
  5264                           fsr0h	equ	0xFEA
  5265                           fsr0l	equ	0xFE9
  5266                           wreg	equ	0xFE8
  5267                           indf1	equ	0xFE7
  5268                           postinc1	equ	0xFE6
  5269                           postdec1	equ	0xFE5
  5270                           fsr1h	equ	0xFE2
  5271                           fsr1l	equ	0xFE1
  5272                           bsr	equ	0xFE0
  5273                           indf2	equ	0xFDF
  5274                           postinc2	equ	0xFDE
  5275                           postdec2	equ	0xFDD
  5276                           plusw2	equ	0xFDB
  5277                           fsr2h	equ	0xFDA
  5278                           fsr2l	equ	0xFD9
  5279                           status	equ	0xFD8
  5280                           
  5281 ;; *************** function i1_writeByte *****************
  5282 ;; Defined at:
  5283 ;;		line 69 in file "Drivers/UART_Driver.c"
  5284 ;; Parameters:    Size  Location     Type
  5285 ;;  data            1    wreg     unsigned char 
  5286 ;; Auto vars:     Size  Location     Type
  5287 ;;  data            1   18[COMRAM] unsigned char 
  5288 ;; Return value:  Size  Location     Type
  5289 ;;                  1    wreg      void 
  5290 ;; Registers used:
  5291 ;;		wreg
  5292 ;; Tracked objects:
  5293 ;;		On entry : 0/0
  5294 ;;		On exit  : 0/0
  5295 ;;		Unchanged: 0/0
  5296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5297 ;;      Params:         0       0       0       0       0       0       0       0       0
  5298 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5299 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5300 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5301 ;;Total ram usage:        1 bytes
  5302 ;; Hardware stack levels used:    1
  5303 ;; Hardware stack levels required when called:    1
  5304 ;; This function calls:
  5305 ;;		Nothing
  5306 ;; This function is called by:
  5307 ;;		i1_putch
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           	psect	text30
  5312  001750                     __ptext30:
  5313                           	opt stack 0
  5314  001750                     i1_writeByte:
  5315                           	opt stack 19
  5316                           
  5317                           ;incstack = 0
  5318                           ;i1writeByte@data stored from wreg
  5319  001750  6E13               	movwf	i1writeByte@data,c
  5320  001752                     
  5321                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  5322  001752  A2AC               	btfss	4012,1,c	;volatile
  5323  001754  D7FE               	goto	i1l1529
  5324                           
  5325                           ;UART_Driver.c: 71: TXREG = data;
  5326  001756  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  5327  00175A  0012               	return		;funcret
  5328  00175C                     __end_ofi1_writeByte:
  5329                           	opt stack 0
  5330                           pclatu	equ	0xFFB
  5331                           pclath	equ	0xFFA
  5332                           tblptru	equ	0xFF8
  5333                           tblptrh	equ	0xFF7
  5334                           tblptrl	equ	0xFF6
  5335                           tablat	equ	0xFF5
  5336                           prodh	equ	0xFF4
  5337                           prodl	equ	0xFF3
  5338                           intcon	equ	0xFF2
  5339                           intcon2	equ	0xFF1
  5340                           indf0	equ	0xFEF
  5341                           postinc0	equ	0xFEE
  5342                           plusw0	equ	0xFEB
  5343                           fsr0h	equ	0xFEA
  5344                           fsr0l	equ	0xFE9
  5345                           wreg	equ	0xFE8
  5346                           indf1	equ	0xFE7
  5347                           postinc1	equ	0xFE6
  5348                           postdec1	equ	0xFE5
  5349                           fsr1h	equ	0xFE2
  5350                           fsr1l	equ	0xFE1
  5351                           bsr	equ	0xFE0
  5352                           indf2	equ	0xFDF
  5353                           postinc2	equ	0xFDE
  5354                           postdec2	equ	0xFDD
  5355                           plusw2	equ	0xFDB
  5356                           fsr2h	equ	0xFDA
  5357                           fsr2l	equ	0xFD9
  5358                           status	equ	0xFD8
  5359                           
  5360 ;; *************** function i1___lwdiv *****************
  5361 ;; Defined at:
  5362 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  5363 ;; Parameters:    Size  Location     Type
  5364 ;;  dividend        2   18[COMRAM] unsigned int 
  5365 ;;  divisor         2   20[COMRAM] unsigned int 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  5368 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  2   18[COMRAM] unsigned int 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5378 ;;      Params:         4       0       0       0       0       0       0       0       0
  5379 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5380 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5381 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5382 ;;Total ram usage:        7 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    1
  5385 ;; This function calls:
  5386 ;;		Nothing
  5387 ;; This function is called by:
  5388 ;;		i1_printf
  5389 ;; This function uses a non-reentrant model
  5390 ;;
  5391                           
  5392                           	psect	text31
  5393  001562                     __ptext31:
  5394                           	opt stack 0
  5395  001562                     i1___lwdiv:
  5396                           	opt stack 20
  5397                           
  5398                           ;incstack = 0
  5399  001562  0E00               	movlw	0
  5400  001564  6E18               	movwf	i1___lwdiv@quotient+1,c
  5401  001566  0E00               	movlw	0
  5402  001568  6E17               	movwf	i1___lwdiv@quotient,c
  5403  00156A  5015               	movf	i1___lwdiv@divisor,w,c
  5404  00156C  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  5405  00156E  B4D8               	btfsc	status,2,c
  5406  001570  D01C               	goto	i1l750
  5407  001572  0E01               	movlw	1
  5408  001574  6E19               	movwf	i1___lwdiv@counter,c
  5409  001576  D004               	goto	i1l745
  5410  001578  90D8               	bcf	status,0,c
  5411  00157A  3615               	rlcf	i1___lwdiv@divisor,f,c
  5412  00157C  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  5413  00157E  2A19               	incf	i1___lwdiv@counter,f,c
  5414  001580                     i1l745:
  5415  001580  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  5416  001582  D7FA               	goto	i1l746
  5417  001584                     i1u84_20:
  5418  001584  90D8               	bcf	status,0,c
  5419  001586  3617               	rlcf	i1___lwdiv@quotient,f,c
  5420  001588  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  5421  00158A  5015               	movf	i1___lwdiv@divisor,w,c
  5422  00158C  5C13               	subwf	i1___lwdiv@dividend,w,c
  5423  00158E  5016               	movf	i1___lwdiv@divisor+1,w,c
  5424  001590  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  5425  001592  A0D8               	btfss	status,0,c
  5426  001594  D005               	goto	i1l749
  5427  001596  5015               	movf	i1___lwdiv@divisor,w,c
  5428  001598  5E13               	subwf	i1___lwdiv@dividend,f,c
  5429  00159A  5016               	movf	i1___lwdiv@divisor+1,w,c
  5430  00159C  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  5431  00159E  8017               	bsf	i1___lwdiv@quotient,0,c
  5432  0015A0                     i1l749:
  5433  0015A0  90D8               	bcf	status,0,c
  5434  0015A2  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  5435  0015A4  3215               	rrcf	i1___lwdiv@divisor,f,c
  5436  0015A6  2E19               	decfsz	i1___lwdiv@counter,f,c
  5437  0015A8  D7ED               	goto	i1u84_20
  5438  0015AA                     i1l750:
  5439  0015AA  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  5440  0015AE  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  5441  0015B2  0012               	return		;funcret
  5442  0015B4                     __end_ofi1___lwdiv:
  5443                           	opt stack 0
  5444                           pclatu	equ	0xFFB
  5445                           pclath	equ	0xFFA
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon2	equ	0xFF1
  5454                           indf0	equ	0xFEF
  5455                           postinc0	equ	0xFEE
  5456                           plusw0	equ	0xFEB
  5457                           fsr0h	equ	0xFEA
  5458                           fsr0l	equ	0xFE9
  5459                           wreg	equ	0xFE8
  5460                           indf1	equ	0xFE7
  5461                           postinc1	equ	0xFE6
  5462                           postdec1	equ	0xFE5
  5463                           fsr1h	equ	0xFE2
  5464                           fsr1l	equ	0xFE1
  5465                           bsr	equ	0xFE0
  5466                           indf2	equ	0xFDF
  5467                           postinc2	equ	0xFDE
  5468                           postdec2	equ	0xFDD
  5469                           plusw2	equ	0xFDB
  5470                           fsr2h	equ	0xFDA
  5471                           fsr2l	equ	0xFD9
  5472                           status	equ	0xFD8
  5473                           
  5474 ;; *************** function _HighISR *****************
  5475 ;; Defined at:
  5476 ;;		line 128 in file "main.c"
  5477 ;; Parameters:    Size  Location     Type
  5478 ;;		None
  5479 ;; Auto vars:     Size  Location     Type
  5480 ;;		None
  5481 ;; Return value:  Size  Location     Type
  5482 ;;                  1    wreg      void 
  5483 ;; Registers used:
  5484 ;;		wreg, status,2
  5485 ;; Tracked objects:
  5486 ;;		On entry : 0/0
  5487 ;;		On exit  : 0/0
  5488 ;;		Unchanged: 0/0
  5489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5490 ;;      Params:         0       0       0       0       0       0       0       0       0
  5491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5492 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5493 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5494 ;;Total ram usage:       18 bytes
  5495 ;; Hardware stack levels used:    1
  5496 ;; This function calls:
  5497 ;;		Nothing
  5498 ;; This function is called by:
  5499 ;;		Interrupt level 2
  5500 ;; This function uses a non-reentrant model
  5501 ;;
  5502                           
  5503                           	psect	intcode
  5504  000008                     __pintcode:
  5505                           	opt stack 0
  5506  000008                     _HighISR:
  5507                           	opt stack 19
  5508                           
  5509                           ;incstack = 0
  5510  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5511  00000A  ED5B  F009         	call	int_func,f	;refresh shadow registers
  5512                           pclatu	equ	0xFFB
  5513                           pclath	equ	0xFFA
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           intcon	equ	0xFF2
  5521                           intcon2	equ	0xFF1
  5522                           indf0	equ	0xFEF
  5523                           postinc0	equ	0xFEE
  5524                           plusw0	equ	0xFEB
  5525                           fsr0h	equ	0xFEA
  5526                           fsr0l	equ	0xFE9
  5527                           wreg	equ	0xFE8
  5528                           indf1	equ	0xFE7
  5529                           postinc1	equ	0xFE6
  5530                           postdec1	equ	0xFE5
  5531                           fsr1h	equ	0xFE2
  5532                           fsr1l	equ	0xFE1
  5533                           bsr	equ	0xFE0
  5534                           indf2	equ	0xFDF
  5535                           postinc2	equ	0xFDE
  5536                           postdec2	equ	0xFDD
  5537                           plusw2	equ	0xFDB
  5538                           fsr2h	equ	0xFDA
  5539                           fsr2l	equ	0xFD9
  5540                           status	equ	0xFD8
  5541                           
  5542                           	psect	intcode_body
  5543  0012B6                     __pintcode_body:
  5544                           	opt stack 19
  5545  0012B6                     int_func:
  5546                           	opt stack 19
  5547  0012B6  0006               	pop		; remove dummy address from shadow register refresh
  5548  0012B8  CFFA F001          	movff	pclath,??_HighISR
  5549  0012BC  CFFB F002          	movff	pclatu,??_HighISR+1
  5550  0012C0  CFE9 F003          	movff	fsr0l,??_HighISR+2
  5551  0012C4  CFEA F004          	movff	fsr0h,??_HighISR+3
  5552  0012C8  CFE1 F005          	movff	fsr1l,??_HighISR+4
  5553  0012CC  CFE2 F006          	movff	fsr1h,??_HighISR+5
  5554  0012D0  CFD9 F007          	movff	fsr2l,??_HighISR+6
  5555  0012D4  CFDA F008          	movff	fsr2h,??_HighISR+7
  5556  0012D8  CFF3 F009          	movff	prodl,??_HighISR+8
  5557  0012DC  CFF4 F00A          	movff	prodh,??_HighISR+9
  5558  0012E0  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  5559  0012E4  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  5560  0012E8  CFF8 F00D          	movff	tblptru,??_HighISR+12
  5561  0012EC  CFF5 F00E          	movff	tablat,??_HighISR+13
  5562  0012F0  C044  F00F         	movff	btemp,??_HighISR+14
  5563  0012F4  C045  F010         	movff	btemp+1,??_HighISR+15
  5564  0012F8  C046  F011         	movff	btemp+2,??_HighISR+16
  5565  0012FC  C047  F012         	movff	btemp+3,??_HighISR+17
  5566                           
  5567                           ;main.c: 129: if (INTCONbits.TMR0IF) {
  5568  001300  A4F2               	btfss	intcon,2,c	;volatile
  5569  001302  D004               	goto	i2l294
  5570                           
  5571                           ;main.c: 130: tick = 1;
  5572  001304  0E01               	movlw	1
  5573  001306  0100               	movlb	0	; () banked
  5574  001308  6FD8               	movwf	_tick& (0+255),b
  5575                           
  5576                           ; BSR set to: 0
  5577                           ;main.c: 131: INTCONbits.TMR0IF = 0;
  5578  00130A  94F2               	bcf	intcon,2,c	;volatile
  5579  00130C                     i2l294:
  5580                           
  5581                           ; BSR set to: 0
  5582  00130C  C012  F047         	movff	??_HighISR+17,btemp+3
  5583  001310  C011  F046         	movff	??_HighISR+16,btemp+2
  5584  001314  C010  F045         	movff	??_HighISR+15,btemp+1
  5585  001318  C00F  F044         	movff	??_HighISR+14,btemp
  5586  00131C  C00E  FFF5         	movff	??_HighISR+13,tablat
  5587  001320  C00D  FFF8         	movff	??_HighISR+12,tblptru
  5588  001324  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  5589  001328  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  5590  00132C  C00A  FFF4         	movff	??_HighISR+9,prodh
  5591  001330  C009  FFF3         	movff	??_HighISR+8,prodl
  5592  001334  C008  FFDA         	movff	??_HighISR+7,fsr2h
  5593  001338  C007  FFD9         	movff	??_HighISR+6,fsr2l
  5594  00133C  C006  FFE2         	movff	??_HighISR+5,fsr1h
  5595  001340  C005  FFE1         	movff	??_HighISR+4,fsr1l
  5596  001344  C004  FFEA         	movff	??_HighISR+3,fsr0h
  5597  001348  C003  FFE9         	movff	??_HighISR+2,fsr0l
  5598  00134C  C002  FFFB         	movff	??_HighISR+1,pclatu
  5599  001350  C001  FFFA         	movff	??_HighISR,pclath
  5600  001354  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5601  001356  0011               	retfie		f
  5602  001358                     __end_of_HighISR:
  5603                           	opt stack 0
  5604                           pclatu	equ	0xFFB
  5605                           pclath	equ	0xFFA
  5606                           tblptru	equ	0xFF8
  5607                           tblptrh	equ	0xFF7
  5608                           tblptrl	equ	0xFF6
  5609                           tablat	equ	0xFF5
  5610                           prodh	equ	0xFF4
  5611                           prodl	equ	0xFF3
  5612                           intcon	equ	0xFF2
  5613                           intcon2	equ	0xFF1
  5614                           indf0	equ	0xFEF
  5615                           postinc0	equ	0xFEE
  5616                           plusw0	equ	0xFEB
  5617                           fsr0h	equ	0xFEA
  5618                           fsr0l	equ	0xFE9
  5619                           wreg	equ	0xFE8
  5620                           indf1	equ	0xFE7
  5621                           postinc1	equ	0xFE6
  5622                           postdec1	equ	0xFE5
  5623                           fsr1h	equ	0xFE2
  5624                           fsr1l	equ	0xFE1
  5625                           bsr	equ	0xFE0
  5626                           indf2	equ	0xFDF
  5627                           postinc2	equ	0xFDE
  5628                           postdec2	equ	0xFDD
  5629                           plusw2	equ	0xFDB
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           pclatu	equ	0xFFB
  5634                           pclath	equ	0xFFA
  5635                           tblptru	equ	0xFF8
  5636                           tblptrh	equ	0xFF7
  5637                           tblptrl	equ	0xFF6
  5638                           tablat	equ	0xFF5
  5639                           prodh	equ	0xFF4
  5640                           prodl	equ	0xFF3
  5641                           intcon	equ	0xFF2
  5642                           intcon2	equ	0xFF1
  5643                           indf0	equ	0xFEF
  5644                           postinc0	equ	0xFEE
  5645                           plusw0	equ	0xFEB
  5646                           fsr0h	equ	0xFEA
  5647                           fsr0l	equ	0xFE9
  5648                           wreg	equ	0xFE8
  5649                           indf1	equ	0xFE7
  5650                           postinc1	equ	0xFE6
  5651                           postdec1	equ	0xFE5
  5652                           fsr1h	equ	0xFE2
  5653                           fsr1l	equ	0xFE1
  5654                           bsr	equ	0xFE0
  5655                           indf2	equ	0xFDF
  5656                           postinc2	equ	0xFDE
  5657                           postdec2	equ	0xFDD
  5658                           plusw2	equ	0xFDB
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663                           	psect	rparam
  5664  0000                     pclatu	equ	0xFFB
  5665                           pclath	equ	0xFFA
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           intcon2	equ	0xFF1
  5674                           indf0	equ	0xFEF
  5675                           postinc0	equ	0xFEE
  5676                           plusw0	equ	0xFEB
  5677                           fsr0h	equ	0xFEA
  5678                           fsr0l	equ	0xFE9
  5679                           wreg	equ	0xFE8
  5680                           indf1	equ	0xFE7
  5681                           postinc1	equ	0xFE6
  5682                           postdec1	equ	0xFE5
  5683                           fsr1h	equ	0xFE2
  5684                           fsr1l	equ	0xFE1
  5685                           bsr	equ	0xFE0
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           postdec2	equ	0xFDD
  5689                           plusw2	equ	0xFDB
  5690                           fsr2h	equ	0xFDA
  5691                           fsr2l	equ	0xFD9
  5692                           status	equ	0xFD8
  5693                           
  5694                           	psect	temp
  5695  000044                     btemp:
  5696                           	opt stack 0
  5697  000044                     	ds	1
  5698  0000                     int$flags	set	btemp
  5699  0000                     wtemp6	set	btemp+1
  5700                           pclatu	equ	0xFFB
  5701                           pclath	equ	0xFFA
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           intcon	equ	0xFF2
  5709                           intcon2	equ	0xFF1
  5710                           indf0	equ	0xFEF
  5711                           postinc0	equ	0xFEE
  5712                           plusw0	equ	0xFEB
  5713                           fsr0h	equ	0xFEA
  5714                           fsr0l	equ	0xFE9
  5715                           wreg	equ	0xFE8
  5716                           indf1	equ	0xFE7
  5717                           postinc1	equ	0xFE6
  5718                           postdec1	equ	0xFE5
  5719                           fsr1h	equ	0xFE2
  5720                           fsr1l	equ	0xFE1
  5721                           bsr	equ	0xFE0
  5722                           indf2	equ	0xFDF
  5723                           postinc2	equ	0xFDE
  5724                           postdec2	equ	0xFDD
  5725                           plusw2	equ	0xFDB
  5726                           fsr2h	equ	0xFDA
  5727                           fsr2l	equ	0xFD9
  5728                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    8
    Data        8
    BSS         289
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     34     158
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S97$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S97$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S97$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _initDoors->_C_DOOR_Init
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6880
                                             32 BANK0      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1003
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     333
                                              5 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     266
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    2524
                                             23 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     405
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1877
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      9E       5       98.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     187      20        0.0%
DATA                 0      0     187       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Mar 12 21:16:17 2018

                         l13 1434                           l50 1122                           l18 0F66  
                         l51 106A                           l19 0E84                           l44 13D6  
                         l52 1120                           l45 1360                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l203 1714                          l311 1650  
                        l312 164A                          l400 11A2                          l401 1196  
                        l404 11D6                          l333 0BEC                          l405 11E4  
                        l334 0C52                          l326 0BD4                          l406 11FA  
                        l254 16B6                          l327 0BE4                          l271 0972  
                        l263 08A0                          l328 0BF4                          l176 1676  
                        l337 0CE0                          l281 0A0E                          l265 08E4  
                        l338 0C88                          l282 09FE                          l275 09C2  
                        l267 090A                          l284 0A24                          l276 09D8  
                        l285 0A02                          l269 093C                          l286 0A08  
                        l397 115C                          l750 1558                          l398 1174  
                        l745 152E                          l746 1526                          l749 154E  
                        l890 15B6                          l889 15C0                 __CFG_CPB$OFF 000000  
                        _PR2 000FCB                 __CFG_CPD$OFF 000000                          u810 1532  
                        u900 0C82                          u910 0CEA                          u920 0D16  
                        u870 0C20                          u927 0D0C                          u877 0C16  
                        _pwm 00D7                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000          __end_ofi1_writeByte 175C                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1611 0C7A                         l1525 1746  
                       STR_1 0835                         STR_2 0833                         STR_3 081E  
                       STR_4 081A                         STR_5 0822                         STR_6 0837  
                       STR_7 0837                         STR_8 082D                         STR_9 082B  
                       u1110 11A6                         u1041 0FF8                         u1051 1032  
                       u1301 1626                         u1144 13C8                         u1145 13C4  
                       u1330 15F6                         u1171 10B8                         u1441 08B6  
                       u1557 0846                         u1567 088A                         u1577 0964  
                       u1587 1056                 ?_C_DOOR_Init 0001                         _baud 0043  
                       _main 083A                         _read 00C4                         _tick 00D8  
                       fsr0h 000FEA                         fsr1h 000FE2                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0044                         prodh 000FF4                         prodl 000FF3  
                       start 00D4                __CFG_IESO$OFF 000000              __end_ofi1_putch 1770  
            __end_of_HighISR 1358                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
                ?_D_PWM_Init 0001            initDoors@door_cnt 00DF               _startCharacter 0041  
            D_PWM_SetPwm@pwm 00DA                __CFG_PLLDIV$5 000000         commandAndMessage@com 00E4  
    __size_of_C_DOOR_LockAll 000E         commandAndMessage@mes 00E6              __end_of___aldiv 120C  
                      ?_main 0001                        STR_10 0831                        STR_11 0829  
                      STR_12 082F                        STR_13 082D                        STR_14 0825  
                      STR_15 0827                        STR_16 0831                        STR_17 0809  
                      u10411 0FF6                        u10511 1030              __end_of___lwdiv 1562  
                      i1l141 0A64                        i1l150 0B0E                        i1l142 0A86  
                      i1l135 0B9E                        i1l160 0B98                        i1l136 0A34  
                      i1l153 0B30                        i1l145 0AA8                        i1l137 0A5C  
                      i1l154 0B52                        i1l146 0ACA                        i1l333 0D42  
                      i1l157 0B74                        i1l149 0AEC                        i1l334 0DA2  
                      i1l326 0D2C                        i1l158 0B8E                        i1l327 0D3C  
                      i1l328 0D4A                        i1l337 0E2E                        i1l338 0DD8  
                      i1l186 007C                        i1l750 15AA                        i1l745 1580  
                      i1l746 1578                        i1l749 15A0                        i2l294 130C  
                      _RCREG 000FAE         __size_of_acknowledge 0060                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
 __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               C_DOOR_Init@cnt 00DD               __CFG_EBTRB$OFF 000000  
                      _doors 0060                        _putch 1734              i1writeByte@data 0013  
                      pclath 000FFA                        tablat 000FF5                 ?_D_UART_Init 00E8  
               ?_D_UART_Read 00DA                 ?_D_TMR0_Init 0001                        plusw0 000FEB  
                      plusw2 000FDB                        status 000FD8                        wtemp6 0045  
               ?_D_PORT_Init 0001           __size_ofi1___lwdiv 0052                _stopCharacter 003F  
           __end_ofi1_printf 0E6A                   i1printf@ap 0020              __initialization 14B2  
           _D_UART_Init$1672 00ED                 __end_of_main 0A30                       ??_main 00FA  
                i1_writeByte 1750                __activetblptr 000003              __CFG_CCP2MX$OFF 000000  
      commandAndMessage@door 00DA                       _ADCON1 000FC1                       _CCPR1L 000FBE  
        __size_of_D_PWM_Init 001E                       ?_putch 0001                       i1l1529 1752  
                     i1l1653 0DCA                    ??i1_putch 0014             _C_DOOR_UnlockAll 1726  
                  ??_HighISR 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___aldiv 00E2                setAlarm@alarm 00DA                    ??___lwdiv 00DE  
           __end_of_readByte 1778                       clear_0 14F0                       clear_1 14FC  
                     _printf 0BC8             __end_of_setAlarm 1766                       _strcmp 15B4  
          __end_ofi1___lwdiv 15B4                 __pdataCOMRAM 003D        D_UART_Init@interrupts 00EC  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 00EC              D_UART_Init@baud 00EA  
            D_UART_Init@name 00E8   __end_of_C_DOOR_ReadSensors 13F2                   __accesstop 0060  
    __end_of__initialization 1504              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 0118                  i1printf@idx 0022                  i1printf@val 0023  
             __pcstackCOMRAM 0001                 __pidataBANK0 177E                 C_DOOR_Init@d 00DE  
                i1putch@data 0014                __end_of_putch 1742             _messageCharacter 00FC  
              ?_D_PWM_SetPwm 0001               _C_DOOR_LockAll 1718       __size_of_D_UART_Enable 0024  
             ??_D_UART_Write 00F0                    ?i1_printf 001A       __size_of_D_TMR0_Enable 0014  
          _C_DOOR_SendStates 1062                      ??_putch 00DB           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100           __size_of_initDoors 0022  
       __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 002E         __size_of_D_TMR0_Init 0024  
        ??_C_DOOR_SendStates 00F1                      ?_LowISR 0001         __size_of_D_PORT_Init 001E  
               ??_D_PWM_Init 00DA       __end_of_C_DOOR_LockAll 1726               ??_D_PWM_SetPwm 00DA  
                 _deviceName 00D0                      ?_printf 00E1                      ?_strcmp 00DA  
  __end_of_C_DOOR_SendStates 113E                   ??i1_printf 001F      __size_of_fillDataBuffer 0198  
                    i1u84_20 1584          D_UART_Enable@enable 00DA                      i1u95_20 0D74  
                    i1u95_27 0D6A                      i1u98_20 0DD2                      i1u99_20 0E36  
         __end_of_D_PWM_Init 16E6              __CFG_VREGEN$OFF 000000                      i1_putch 1766  
                    _HighISR 0008                    ?_readByte 0001           __size_of_writeByte 000E  
              _D_UART_Enable 165E                    ?_setAlarm 0001                      __Hparam 0000  
                    __Lparam 0000              __size_of_LowISR 00BC                _D_TMR0_Enable 1704  
                 _readBuffer 0100                      ___aldiv 113E              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 150E                 __psmallconst 0800          C_DOOR_ReadSensors@d 00DE  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0027                      __pcinit 14B2  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 1734                      __ptext0 083A  
                    __ptext1 15B4                      __ptext2 175C                      __ptext3 16A6  
                    __ptext4 1718                      __ptext5 0E6A                      __ptext6 1602  
                    __ptext7 120C                      __ptext8 113E                      __ptext9 165E  
            __size_of_printf 015A            __end_of_initDoors 16C8                    _T0CONbits 000FD5  
               ?i1_writeByte 0001              __size_of_strcmp 004E            __end_of_hexpowers 0809  
          i1___lwdiv@divisor 0015                    _T2CONbits 000FCA            i1___lwdiv@counter 0019  
       C_DOOR_SendStates@com 00F4         C_DOOR_SendStates@mes 00F7             ___aldiv@dividend 00DA  
             __pintcode_body 12B6         end_of_initialization 1504                   ??_readByte 0013  
        D_TMR0_Enable@enable 00DA                      int_func 12B6               ?_D_UART_Enable 0001  
                 ??_setAlarm 00DA               ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 1062  
                  _RCSTAbits 000FAB                      printf@c 00EB                      printf@f 00E1  
           ___aldiv@quotient 00E4                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00DF                    _PORTCbits 000F82            __end_of_writeByte 1750  
 __size_of_C_DOOR_SendStates 00DC                    _TRISCbits 000F94          __end_of_acknowledge 14B2  
                  i1___lwdiv 1562         __end_of_D_PWM_SetPwm 165E                  _CCP1CONbits 000FBD  
                  _TXSTAbits 000FAC                 i1printf@flag 001F                 i1printf@prec 0025  
         _C_DOOR_ReadSensors 1358               __end_of_LowISR 00D4                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 1778               __end_of_printf 0D22  
             __end_of_strcmp 1602          start_initialization 14B2               _fillDataBuffer 0A30  
                  i1printf@c 0026                    i1printf@f 001A                   ?i1___lwdiv 0013  
          __size_ofi1_printf 0148         ??_C_DOOR_ReadSensors 00DA              ??_D_UART_Enable 00DA  
              ??_C_DOOR_Init 00DA              ??_D_TMR0_Enable 00DA                     ??_LowISR 0028  
                __pdataBANK0 00FC             __CFG_LPT1OSC$OFF 000000                  _acknowledge 1452  
           D_UART_Write@data 00EE                     ??_printf 00E4                     ??_strcmp 00DE  
     __end_of_fillDataBuffer 0BC8                  __pbssCOMRAM 0043         __size_ofi1_writeByte 000C  
              __pcstackBANK0 00DA                ??_D_UART_Init 00ED                ??_D_UART_Read 00E0  
              ??_D_TMR0_Init 00DB                     ?i1_putch 0001                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00DA             ??_C_DOOR_LockAll 00DA  
          __size_of_readByte 0008             ___lwdiv@dividend 00DA          __end_of_C_DOOR_Init 0F82  
          __size_of_setAlarm 000A                    __pintcode 0008                     ?___aldiv 00DA  
                   ?___lwdiv 00DA                  __pintcodelo 0018           fillDataBuffer@data 0027  
          ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001                  __smallconst 0800  
         ??_C_DOOR_UnlockAll 00DA        __size_of_D_PWM_SetPwm 002E                    _initDoors 16A6  
               _D_UART_Write 0F82                    _hexpowers 0801                    _readReady 00D9  
           ___lwdiv@quotient 00DE                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00DE              ___aldiv@counter 00E2                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D                     i1u100_20 0E60                     i1u100_27 0E56  
        __end_of_D_UART_Init 12B6          __end_of_D_UART_Read 1630                     _PIR1bits 000F9E  
        __end_of_D_TMR0_Init 16A6                     _RCONbits 000FD0             __CFG_WDTPS$32768 000000  
        __end_of_D_PORT_Init 1704                 _D_PWM_SetPwm 1630                   printf@flag 00E4  
                 printf@prec 00EA                     i1_printf 0D22                   ?_initDoors 0001  
                  _writeByte 1742                  _INTCON2bits 000FF1                    copy_data0 14DE  
                _C_DOOR_Init 0E6A             __size_ofi1_putch 000A             __size_of_HighISR 1350  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___aldiv 00CE  
           __size_of___lwdiv 0054              ___lwdiv@divisor 00DC              ___lwdiv@counter 00E0  
                   __ptext10 1682                     __ptext11 1704                     __ptext20 1734  
                   __ptext12 1630                     __ptext21 1742                     __ptext13 16C8  
                   __ptext30 1750                     __ptext22 150E                     __ptext14 16E6  
                   __ptext31 1562                     __ptext23 1358                     __ptext15 1726  
                   __ptext16 1062                     __ptext25 1770                     __ptext17 13F2  
                   __ptext26 0A30                     __ptext18 0F82                     __ptext27 1452  
                   __ptext19 0BC8                     __ptext28 0D22                     __ptext29 1766  
                 ?_writeByte 0001                     _door_cnt 00D3           i1___lwdiv@dividend 0013  
                _D_UART_Init 120C                  _D_UART_Read 1602                     _oldAlarm 00D5  
                   _newAlarm 00D6                     _readData 00CA                  _D_TMR0_Init 1682  
                   _readByte 1770                __size_of_main 01F6           C_DOOR_SendStates@d 00F9  
                _D_PORT_Init 16E6                     _setAlarm 175C                     int$flags 0044  
                  printf@idx 00E7                    printf@val 00E8                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00DB  
                 _INTCONbits 000FF2                  ??_initDoors 00DF            _commandAndMessage 13F2  
                   intlevel1 0000                     intlevel2 0000  __size_of_C_DOOR_ReadSensors 009A  
         ?_commandAndMessage 00DA        __end_of_D_UART_Enable 1682        __end_of_D_TMR0_Enable 1718  
        ??_commandAndMessage 00E8                   _D_PWM_Init 16C8                     printf@ap 00E5  
           ??_fillDataBuffer 0027          D_UART_Write@command 00EC                ??i1_writeByte 0013  
                   strcmp@s1 00DA                     strcmp@s2 00DC                writeByte@data 00DA  
  __end_of_commandAndMessage 1452                 ___aldiv@sign 00E3                  ??_writeByte 00DA  
  __size_of_C_DOOR_UnlockAll 000E  
