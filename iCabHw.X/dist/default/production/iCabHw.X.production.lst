

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov 25 19:04:37 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  0015CE                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  0015CE  20                 	db	low STR_4
    92  0015CF  08                 	db	high STR_4
    93                           
    94                           ;initializer for _stopCharacter
    95  0015D0  37                 	db	low STR_2
    96  0015D1  08                 	db	high STR_2
    97                           
    98                           ;initializer for _startCharacter
    99  0015D2  39                 	db	low STR_1
   100  0015D3  08                 	db	high STR_1
   101                           
   102                           	psect	idataBANK0
   103  0015D4                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _messageCharacter
   107  0015D4  24                 	db	low STR_3
   108  0015D5  08                 	db	high STR_3
   109                           
   110                           	psect	smallconst
   111  000800                     __psmallconst:
   112                           	opt stack 0
   113  000800  00                 	db	0
   114  000801                     _hexpowers:
   115                           	opt stack 0
   116  000801  0001               	dw	1
   117  000803  0010               	dw	16
   118  000805  0100               	dw	256
   119  000807  1000               	dw	4096
   120  000809                     __end_of_hexpowers:
   121                           	opt stack 0
   122  000809                     STR_16:
   123  000809  30                 	db	48	;'0'
   124  00080A  31                 	db	49	;'1'
   125  00080B  32                 	db	50	;'2'
   126  00080C  33                 	db	51	;'3'
   127  00080D  34                 	db	52	;'4'
   128  00080E  35                 	db	53	;'5'
   129  00080F  36                 	db	54	;'6'
   130  000810  37                 	db	55	;'7'
   131  000811  38                 	db	56	;'8'
   132  000812  39                 	db	57	;'9'
   133  000813  61                 	db	97	;'a'
   134  000814  62                 	db	98	;'b'
   135  000815  63                 	db	99	;'c'
   136  000816  64                 	db	100	;'d'
   137  000817  65                 	db	101	;'e'
   138  000818  66                 	db	102	;'f'
   139  000819  00                 	db	0
   140  00081A                     STR_10:
   141  00081A  53                 	db	83	;'S'
   142  00081B  74                 	db	116	;'t'
   143  00081C  61                 	db	97	;'a'
   144  00081D  72                 	db	114	;'r'
   145  00081E  74                 	db	116	;'t'
   146  00081F  00                 	db	0
   147  000820                     STR_4:
   148  000820  5B                 	db	91	;'['
   149  000821  41                 	db	65	;'A'
   150  000822  5D                 	db	93	;']'
   151  000823  00                 	db	0
   152  000824                     STR_3:
   153  000824  5B                 	db	91	;'['
   154  000825  4D                 	db	77	;'M'
   155  000826  5D                 	db	93	;']'
   156  000827  00                 	db	0
   157  000828                     STR_5:
   158  000828  25                 	db	37
   159  000829  78                 	db	120	;'x'
   160  00082A  00                 	db	0
   161  00082B                     STR_14:
   162  00082B  45                 	db	69	;'E'
   163  00082C  00                 	db	0
   164  00082D                     STR_9:
   165  00082D  49                 	db	73	;'I'
   166  00082E  00                 	db	0
   167  00082F                     STR_11:
   168  00082F  4C                 	db	76	;'L'
   169  000830  00                 	db	0
   170  000831                     STR_8:
   171  000831  50                 	db	80	;'P'
   172  000832  00                 	db	0
   173  000833                     STR_13:
   174  000833  52                 	db	82	;'R'
   175  000834  00                 	db	0
   176  000835                     STR_12:
   177  000835  55                 	db	85	;'U'
   178  000836  00                 	db	0
   179  000837                     STR_2:
   180  000837  24                 	db	36
   181  000838  00                 	db	0
   182  000839                     STR_1:
   183  000839  26                 	db	38
   184  00083A  00                 	db	0
   185  00083B                     STR_6:
   186  00083B  3A                 	db	58	;':'
   187  00083C  00                 	db	0
   188  0000                     
   189                           ; #config settings
   190  00083D  00                 	db	0	; dummy byte at the end
   191  0000                     
   192                           	psect	nvBANK0
   193  0000C1                     __pnvBANK0:
   194                           	opt stack 0
   195  0000C1                     _deviceName:
   196                           	opt stack 0
   197  0000C1                     	ds	3
   198  0000                     _INTCON2bits	set	4081
   199  0000                     _T0CONbits	set	4053
   200  0000                     _PIE1bits	set	3997
   201  0000                     _IPR1bits	set	3999
   202  0000                     _PIR1bits	set	3998
   203  0000                     _INTCONbits	set	4082
   204  0000                     _RCONbits	set	4048
   205  0000                     _SPBRG	set	4015
   206  0000                     _BAUDCONbits	set	4024
   207  0000                     _TRISCbits	set	3988
   208  0000                     _RCREG	set	4014
   209  0000                     _RCSTAbits	set	4011
   210  0000                     _TXREG	set	4013
   211  0000                     _TXSTAbits	set	4012
   212  0000                     _ADCON1	set	4033
   213  0000                     _PORTC	set	3970
   214  0000                     _TRISC	set	3988
   215  0000                     _PORTA	set	3968
   216  0000                     _TRISA	set	3986
   217  0000                     _TRISB	set	3987
   218  0000                     _PORTB	set	3969
   219                           
   220                           	psect	cinit
   221  001330                     __pcinit:
   222                           	opt stack 0
   223  001330                     start_initialization:
   224                           	opt stack 0
   225  001330                     __initialization:
   226                           	opt stack 0
   227                           
   228                           ; Initialize objects allocated to BANK0 (2 bytes)
   229                           ; load TBLPTR registers with __pidataBANK0
   230  001330  0ED4               	movlw	low __pidataBANK0
   231  001332  6EF6               	movwf	tblptrl,c
   232  001334  0E15               	movlw	high __pidataBANK0
   233  001336  6EF7               	movwf	tblptrh,c
   234  001338  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   235  00133A  6EF8               	movwf	tblptru,c
   236  00133C  0009               	tblrd		*+	;fetch initializer
   237  00133E  CFF5 F0C4          	movff	tablat,__pdataBANK0
   238  001342  0009               	tblrd		*+	;fetch initializer
   239  001344  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   240                           
   241                           ; Initialize objects allocated to COMRAM (6 bytes)
   242                           ; load TBLPTR registers with __pidataCOMRAM
   243  001348  0ECE               	movlw	low __pidataCOMRAM
   244  00134A  6EF6               	movwf	tblptrl,c
   245  00134C  0E15               	movlw	high __pidataCOMRAM
   246  00134E  6EF7               	movwf	tblptrh,c
   247  001350  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   248  001352  6EF8               	movwf	tblptru,c
   249  001354  EE00  F03D         	lfsr	0,__pdataCOMRAM
   250  001358  EE10 F006          	lfsr	1,6
   251  00135C                     copy_data0:
   252  00135C  0009               	tblrd		*+
   253  00135E  CFF5 FFEE          	movff	tablat,postinc0
   254  001362  50E5               	movf	postdec1,w,c
   255  001364  50E1               	movf	fsr1l,w,c
   256  001366  E1FA               	bnz	copy_data0
   257                           
   258                           ; Clear objects allocated to BANK1 (166 bytes)
   259  001368  EE01  F000         	lfsr	0,__pbssBANK1
   260  00136C  0EA6               	movlw	166
   261  00136E                     clear_0:
   262  00136E  6AEE               	clrf	postinc0,c
   263  001370  06E8               	decf	wreg,f,c
   264  001372  E1FD               	bnz	clear_0
   265                           
   266                           ; Clear objects allocated to BANK0 (64 bytes)
   267  001374  EE00  F060         	lfsr	0,__pbssBANK0
   268  001378  0E40               	movlw	64
   269  00137A                     clear_1:
   270  00137A  6AEE               	clrf	postinc0,c
   271  00137C  06E8               	decf	wreg,f,c
   272  00137E  E1FD               	bnz	clear_1
   273                           
   274                           ; Clear objects allocated to COMRAM (1 bytes)
   275  001380  6A43               	clrf	__pbssCOMRAM& (0+255),c
   276  001382                     end_of_initialization:
   277                           	opt stack 0
   278  001382                     __end_of__initialization:
   279                           	opt stack 0
   280  001382  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   281  001384  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   282  001386  0100               	movlb	0
   283  001388  EF3C  F006         	goto	_main	;jump to C main() function
   284                           tblptru	equ	0xFF8
   285                           tblptrh	equ	0xFF7
   286                           tblptrl	equ	0xFF6
   287                           tablat	equ	0xFF5
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           postdec1	equ	0xFE5
   291                           fsr1l	equ	0xFE1
   292                           
   293                           	psect	bssCOMRAM
   294  000043                     __pbssCOMRAM:
   295                           	opt stack 0
   296  000043                     _baud:
   297                           	opt stack 0
   298  000043                     	ds	1
   299                           tblptru	equ	0xFF8
   300                           tblptrh	equ	0xFF7
   301                           tblptrl	equ	0xFF6
   302                           tablat	equ	0xFF5
   303                           postinc0	equ	0xFEE
   304                           wreg	equ	0xFE8
   305                           postdec1	equ	0xFE5
   306                           fsr1l	equ	0xFE1
   307                           
   308                           	psect	dataCOMRAM
   309  00003D                     __pdataCOMRAM:
   310                           	opt stack 0
   311  00003D                     _ackCharacter:
   312                           	opt stack 0
   313  00003D                     	ds	2
   314  00003F                     _stopCharacter:
   315                           	opt stack 0
   316  00003F                     	ds	2
   317  000041                     _startCharacter:
   318                           	opt stack 0
   319  000041                     	ds	2
   320                           tblptru	equ	0xFF8
   321                           tblptrh	equ	0xFF7
   322                           tblptrl	equ	0xFF6
   323                           tablat	equ	0xFF5
   324                           postinc0	equ	0xFEE
   325                           wreg	equ	0xFE8
   326                           postdec1	equ	0xFE5
   327                           fsr1l	equ	0xFE1
   328                           
   329                           	psect	bssBANK0
   330  000060                     __pbssBANK0:
   331                           	opt stack 0
   332  000060                     _doors:
   333                           	opt stack 0
   334  000060                     	ds	50
   335  000092                     _read:
   336                           	opt stack 0
   337  000092                     	ds	6
   338  000098                     _readData:
   339                           	opt stack 0
   340  000098                     	ds	6
   341  00009E                     _tick:
   342                           	opt stack 0
   343  00009E                     	ds	1
   344  00009F                     _readReady:
   345                           	opt stack 0
   346  00009F                     	ds	1
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           postdec1	equ	0xFE5
   354                           fsr1l	equ	0xFE1
   355                           
   356                           	psect	dataBANK0
   357  0000C4                     __pdataBANK0:
   358                           	opt stack 0
   359  0000C4                     _messageCharacter:
   360                           	opt stack 0
   361  0000C4                     	ds	2
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	bssBANK1
   372  000100                     __pbssBANK1:
   373                           	opt stack 0
   374  000100                     _readBuffer:
   375                           	opt stack 0
   376  000100                     	ds	166
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	cstackBANK0
   387  0000A0                     __pcstackBANK0:
   388                           	opt stack 0
   389  0000A0                     ??_C_DOOR_ReadSensors:
   390  0000A0                     ?_strcmp:
   391                           	opt stack 0
   392  0000A0                     ?___lwdiv:
   393                           	opt stack 0
   394  0000A0                     ?___aldiv:
   395                           	opt stack 0
   396  0000A0                     ?_D_UART_Read:
   397                           	opt stack 0
   398  0000A0                     C_DOOR_Init@d:
   399                           	opt stack 0
   400  0000A0                     writeByte@data:
   401                           	opt stack 0
   402  0000A0                     D_UART_Enable@enable:
   403                           	opt stack 0
   404  0000A0                     D_TMR0_Enable@enable:
   405                           	opt stack 0
   406  0000A0                     ___lwdiv@dividend:
   407                           	opt stack 0
   408  0000A0                     strcmp@s1:
   409                           	opt stack 0
   410  0000A0                     ___aldiv@dividend:
   411                           	opt stack 0
   412  0000A0                     commandAndMessage@door:
   413                           	opt stack 0
   414                           
   415                           ; 10 bytes @ 0x0
   416  0000A0                     	ds	1
   417  0000A1                     putch@data:
   418                           	opt stack 0
   419                           
   420                           ; 1 bytes @ 0x1
   421  0000A1                     	ds	1
   422  0000A2                     ___lwdiv@divisor:
   423                           	opt stack 0
   424  0000A2                     strcmp@s2:
   425                           	opt stack 0
   426                           
   427                           ; 2 bytes @ 0x2
   428  0000A2                     	ds	2
   429  0000A4                     ??_strcmp:
   430  0000A4                     C_DOOR_ReadSensors@d:
   431                           	opt stack 0
   432  0000A4                     ___lwdiv@quotient:
   433                           	opt stack 0
   434  0000A4                     ___aldiv@divisor:
   435                           	opt stack 0
   436                           
   437                           ; 4 bytes @ 0x4
   438  0000A4                     	ds	1
   439  0000A5                     strcmp@r:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x5
   443  0000A5                     	ds	1
   444  0000A6                     ___lwdiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x6
   448  0000A6                     	ds	1
   449  0000A7                     ?_printf:
   450                           	opt stack 0
   451  0000A7                     printf@f:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0x7
   455  0000A7                     	ds	1
   456  0000A8                     ___aldiv@counter:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x8
   460  0000A8                     	ds	1
   461  0000A9                     ___aldiv@sign:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x9
   465  0000A9                     	ds	1
   466  0000AA                     printf@flag:
   467                           	opt stack 0
   468  0000AA                     commandAndMessage@com:
   469                           	opt stack 0
   470  0000AA                     ___aldiv@quotient:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0xA
   474  0000AA                     	ds	1
   475  0000AB                     printf@ap:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0xB
   479  0000AB                     	ds	1
   480  0000AC                     commandAndMessage@mes:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0xC
   484  0000AC                     	ds	1
   485  0000AD                     printf@idx:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0xD
   489  0000AD                     	ds	1
   490  0000AE                     D_UART_Init@name:
   491                           	opt stack 0
   492  0000AE                     printf@val:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0xE
   496  0000AE                     	ds	2
   497  0000B0                     printf@prec:
   498                           	opt stack 0
   499  0000B0                     D_UART_Init@baud:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x10
   503  0000B0                     	ds	1
   504  0000B1                     printf@c:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x11
   508  0000B1                     	ds	1
   509  0000B2                     D_UART_Init@interrupts:
   510                           	opt stack 0
   511  0000B2                     D_UART_Write@command:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x12
   515  0000B2                     	ds	1
   516  0000B3                     _D_UART_Init$1497:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x13
   520  0000B3                     	ds	1
   521  0000B4                     D_UART_Write@data:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x14
   525  0000B4                     	ds	2
   526  0000B6                     ??_D_UART_Write:
   527                           
   528                           ; 1 bytes @ 0x16
   529  0000B6                     	ds	1
   530  0000B7                     
   531                           ; 1 bytes @ 0x17
   532  0000B7                     	ds	2
   533  0000B9                     C_DOOR_SendStates@com:
   534                           	opt stack 0
   535                           
   536                           ; 3 bytes @ 0x19
   537  0000B9                     	ds	3
   538  0000BC                     C_DOOR_SendStates@mes:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x1C
   542  0000BC                     	ds	2
   543  0000BE                     C_DOOR_SendStates@d:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x1E
   547  0000BE                     	ds	1
   548  0000BF                     ??_main:
   549                           
   550                           ; 1 bytes @ 0x1F
   551  0000BF                     	ds	2
   552                           tblptru	equ	0xFF8
   553                           tblptrh	equ	0xFF7
   554                           tblptrl	equ	0xFF6
   555                           tablat	equ	0xFF5
   556                           postinc0	equ	0xFEE
   557                           wreg	equ	0xFE8
   558                           postdec1	equ	0xFE5
   559                           fsr1l	equ	0xFE1
   560                           
   561                           	psect	cstackCOMRAM
   562  000001                     __pcstackCOMRAM:
   563                           	opt stack 0
   564  000001                     ??_HighISR:
   565  000001                     
   566                           ; 1 bytes @ 0x0
   567  000001                     	ds	18
   568  000013                     ?i1___lwdiv:
   569                           	opt stack 0
   570  000013                     i1writeByte@data:
   571                           	opt stack 0
   572  000013                     i1___lwdiv@dividend:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x12
   576  000013                     	ds	1
   577  000014                     i1putch@data:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x13
   581  000014                     	ds	1
   582  000015                     i1___lwdiv@divisor:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x14
   586  000015                     	ds	2
   587  000017                     i1___lwdiv@quotient:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x16
   591  000017                     	ds	2
   592  000019                     i1___lwdiv@counter:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x18
   596  000019                     	ds	1
   597  00001A                     ?i1_printf:
   598                           	opt stack 0
   599  00001A                     i1printf@f:
   600                           	opt stack 0
   601                           
   602                           ; 3 bytes @ 0x19
   603  00001A                     	ds	5
   604  00001F                     i1printf@flag:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x1E
   608  00001F                     	ds	1
   609  000020                     i1printf@ap:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x1F
   613  000020                     	ds	2
   614  000022                     i1printf@idx:
   615                           	opt stack 0
   616                           
   617                           ; 1 bytes @ 0x21
   618  000022                     	ds	1
   619  000023                     i1printf@val:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0x22
   623  000023                     	ds	2
   624  000025                     i1printf@prec:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x24
   628  000025                     	ds	1
   629  000026                     i1printf@c:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x25
   633  000026                     	ds	1
   634  000027                     fillDataBuffer@data:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x26
   638  000027                     	ds	1
   639  000028                     ??_LowISR:
   640                           
   641                           ; 1 bytes @ 0x27
   642  000028                     	ds	21
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           postdec1	equ	0xFE5
   650                           fsr1l	equ	0xFE1
   651                           
   652 ;;
   653 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   654 ;;
   655 ;; *************** function _main *****************
   656 ;; Defined at:
   657 ;;		line 17 in file "main.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;		None
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      void 
   664 ;; Registers used:
   665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   671 ;;      Params:         0       0       0       0       0       0       0       0       0
   672 ;;      Locals:         0       0       0       0       0       0       0       0       0
   673 ;;      Temps:          0       2       0       0       0       0       0       0       0
   674 ;;      Totals:         0       2       0       0       0       0       0       0       0
   675 ;;Total ram usage:        2 bytes
   676 ;; Hardware stack levels required when called:   12
   677 ;; This function calls:
   678 ;;		_C_DOOR_Init
   679 ;;		_C_DOOR_LockAll
   680 ;;		_C_DOOR_ReadSensors
   681 ;;		_C_DOOR_SendStates
   682 ;;		_C_DOOR_UnlockAll
   683 ;;		_D_PORT_Init
   684 ;;		_D_TMR0_Enable
   685 ;;		_D_TMR0_Init
   686 ;;		_D_UART_Enable
   687 ;;		_D_UART_Init
   688 ;;		_D_UART_Read
   689 ;;		_D_UART_Write
   690 ;;		_strcmp
   691 ;; This function is called by:
   692 ;;		Startup code after reset
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text0
   697  000C78                     __ptext0:
   698                           	opt stack 0
   699  000C78                     _main:
   700                           	opt stack 19
   701                           
   702                           ;main.c: 19: D_PORT_Init();
   703                           
   704                           ;incstack = 0
   705  000C78  ECA3  F00A         	call	_D_PORT_Init	;wreg free
   706                           
   707                           ;main.c: 23: D_UART_Init("P", 9600, 1);
   708  000C7C  0E31               	movlw	low STR_8
   709  000C7E  0100               	movlb	0	; () banked
   710  000C80  6FAE               	movwf	D_UART_Init@name& (0+255),b
   711  000C82  0E08               	movlw	high STR_8
   712  000C84  6FAF               	movwf	(D_UART_Init@name+1)& (0+255),b
   713  000C86  0E25               	movlw	37
   714  000C88  6FB1               	movwf	(D_UART_Init@baud+1)& (0+255),b
   715  000C8A  0E80               	movlw	128
   716  000C8C  6FB0               	movwf	D_UART_Init@baud& (0+255),b
   717  000C8E  0E01               	movlw	1
   718  000C90  6FB2               	movwf	D_UART_Init@interrupts& (0+255),b
   719  000C92  EC83  F008         	call	_D_UART_Init	;wreg free
   720                           
   721                           ;main.c: 24: D_UART_Enable(1);
   722  000C96  0E01               	movlw	1
   723  000C98  EC7F  F00A         	call	_D_UART_Enable
   724                           
   725                           ;main.c: 27: D_TMR0_Init();
   726  000C9C  EC91  F00A         	call	_D_TMR0_Init	;wreg free
   727                           
   728                           ;main.c: 30: C_DOOR_Init();
   729  000CA0  ECCB  F006         	call	_C_DOOR_Init	;wreg free
   730                           
   731                           ;main.c: 31: C_DOOR_UnlockAll();
   732  000CA4  ECBC  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   733                           
   734                           ;main.c: 33: _delay((unsigned long)((200)*(16000000/4000.0)));
   735  000CA8  0E05               	movlw	5
   736  000CAA  0100               	movlb	0	; () banked
   737  000CAC  6FC0               	movwf	(??_main+1)& (0+255),b
   738  000CAE  0E0F               	movlw	15
   739  000CB0  6FBF               	movwf	??_main& (0+255),b
   740  000CB2  0EF1               	movlw	241
   741  000CB4                     u1477:
   742  000CB4  2EE8               	decfsz	wreg,f,c
   743  000CB6  D7FE               	bra	u1477
   744  000CB8  2FBF               	decfsz	??_main& (0+255),f,b
   745  000CBA  D7FC               	bra	u1477
   746  000CBC  2FC0               	decfsz	(??_main+1)& (0+255),f,b
   747  000CBE  D7FA               	bra	u1477
   748                           
   749                           ;main.c: 36: D_UART_Write("I", "Start");
   750  000CC0  0E2D               	movlw	low STR_9
   751  000CC2  0100               	movlb	0	; () banked
   752  000CC4  6FB2               	movwf	D_UART_Write@command& (0+255),b
   753  000CC6  0E08               	movlw	high STR_9
   754  000CC8  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
   755  000CCA  0E1A               	movlw	low STR_10
   756  000CCC  6FB4               	movwf	D_UART_Write@data& (0+255),b
   757  000CCE  0E08               	movlw	high STR_10
   758  000CD0  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
   759  000CD2  EC48  F007         	call	_D_UART_Write	;wreg free
   760                           
   761                           ;main.c: 37: D_TMR0_Enable(1);
   762  000CD6  0E01               	movlw	1
   763  000CD8  ECB2  F00A         	call	_D_TMR0_Enable
   764  000CDC                     
   765                           ;main.c: 41: if (readReady) {
   766  000CDC  0100               	movlb	0	; () banked
   767  000CDE  519F               	movf	_readReady& (0+255),w,b
   768  000CE0  B4D8               	btfsc	status,2,c
   769  000CE2  D04E               	goto	l244
   770                           
   771                           ; BSR set to: 0
   772                           ;main.c: 42: readReady = 0;
   773  000CE4  0E00               	movlw	0
   774  000CE6  6F9F               	movwf	_readReady& (0+255),b
   775                           
   776                           ; BSR set to: 0
   777                           ;main.c: 43: read = D_UART_Read();
   778  000CE8  EC68  F00A         	call	_D_UART_Read	;wreg free
   779  000CEC  EE20  F092         	lfsr	2,_read
   780  000CF0  0E05               	movlw	5
   781  000CF2                     u1411:
   782  000CF2  CFEB FFDB          	movff	plusw0,plusw2
   783  000CF6  06E8               	decf	wreg,f,c
   784  000CF8  E2FC               	bc	u1411
   785                           
   786                           ;main.c: 44: if (strcmp(read.command, "L") == 0) {
   787  000CFA  C094  F0A0         	movff	_read+2,strcmp@s1
   788  000CFE  C095  F0A1         	movff	_read+3,strcmp@s1+1
   789  000D02  0E2F               	movlw	low STR_11
   790  000D04  0100               	movlb	0	; () banked
   791  000D06  6FA2               	movwf	strcmp@s2& (0+255),b
   792  000D08  0E08               	movlw	high STR_11
   793  000D0A  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   794  000D0C  EC41  F00A         	call	_strcmp	;wreg free
   795  000D10  0100               	movlb	0	; () banked
   796  000D12  51A0               	movf	?_strcmp& (0+255),w,b
   797  000D14  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   798  000D16  A4D8               	btfss	status,2,c
   799  000D18  D003               	goto	l239
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 45: C_DOOR_LockAll();
   803  000D1A  ECD1  F00A         	call	_C_DOOR_LockAll	;wreg free
   804                           
   805                           ;main.c: 46: } else if (strcmp(read.command, "U") == 0) {
   806  000D1E  D030               	goto	l244
   807  000D20                     l239:
   808  000D20  C094  F0A0         	movff	_read+2,strcmp@s1
   809  000D24  C095  F0A1         	movff	_read+3,strcmp@s1+1
   810  000D28  0E35               	movlw	low STR_12
   811  000D2A  0100               	movlb	0	; () banked
   812  000D2C  6FA2               	movwf	strcmp@s2& (0+255),b
   813  000D2E  0E08               	movlw	high STR_12
   814  000D30  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   815  000D32  EC41  F00A         	call	_strcmp	;wreg free
   816  000D36  0100               	movlb	0	; () banked
   817  000D38  51A0               	movf	?_strcmp& (0+255),w,b
   818  000D3A  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   819  000D3C  A4D8               	btfss	status,2,c
   820  000D3E  D003               	goto	l241
   821                           
   822                           ; BSR set to: 0
   823                           ;main.c: 47: C_DOOR_UnlockAll();
   824  000D40  ECBC  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   825                           
   826                           ;main.c: 48: } else if (strcmp(read.command, "R") == 0) {
   827  000D44  D01D               	goto	l244
   828  000D46                     l241:
   829  000D46  C094  F0A0         	movff	_read+2,strcmp@s1
   830  000D4A  C095  F0A1         	movff	_read+3,strcmp@s1+1
   831  000D4E  0E33               	movlw	low STR_13
   832  000D50  0100               	movlb	0	; () banked
   833  000D52  6FA2               	movwf	strcmp@s2& (0+255),b
   834  000D54  0E08               	movlw	high STR_13
   835  000D56  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   836  000D58  EC41  F00A         	call	_strcmp	;wreg free
   837  000D5C  0100               	movlb	0	; () banked
   838  000D5E  51A0               	movf	?_strcmp& (0+255),w,b
   839  000D60  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   840  000D62  A4D8               	btfss	status,2,c
   841  000D64  D002               	goto	l243
   842                           
   843                           ; BSR set to: 0
   844  000D66  00FF               	reset		;# 
   845                           
   846                           ;main.c: 50: } else {
   847  000D68  D00B               	goto	l244
   848  000D6A                     l243:
   849                           
   850                           ;main.c: 51: D_UART_Write("E", "U");
   851  000D6A  0E2B               	movlw	low STR_14
   852  000D6C  0100               	movlb	0	; () banked
   853  000D6E  6FB2               	movwf	D_UART_Write@command& (0+255),b
   854  000D70  0E08               	movlw	high STR_14
   855  000D72  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
   856  000D74  0E35               	movlw	low STR_12
   857  000D76  6FB4               	movwf	D_UART_Write@data& (0+255),b
   858  000D78  0E08               	movlw	high STR_12
   859  000D7A  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
   860  000D7C  EC48  F007         	call	_D_UART_Write	;wreg free
   861  000D80                     l244:
   862                           
   863                           ;main.c: 52: }
   864                           ;main.c: 53: }
   865                           ;main.c: 56: if (tick) {
   866  000D80  0100               	movlb	0	; () banked
   867  000D82  519E               	movf	_tick& (0+255),w,b
   868  000D84  B4D8               	btfsc	status,2,c
   869  000D86  D7AA               	goto	l237
   870                           
   871                           ; BSR set to: 0
   872                           ;main.c: 57: tick = 0;
   873  000D88  0E00               	movlw	0
   874  000D8A  6F9E               	movwf	_tick& (0+255),b
   875                           
   876                           ; BSR set to: 0
   877                           ;main.c: 60: C_DOOR_ReadSensors();
   878  000D8C  EC25  F009         	call	_C_DOOR_ReadSensors	;wreg free
   879                           
   880                           ;main.c: 63: C_DOOR_SendStates();
   881  000D90  EC1F  F008         	call	_C_DOOR_SendStates	;wreg free
   882  000D94  D7A3               	goto	l237
   883  000D96                     __end_of_main:
   884                           	opt stack 0
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           plusw0	equ	0xFEB
   891                           wreg	equ	0xFE8
   892                           postdec1	equ	0xFE5
   893                           fsr1l	equ	0xFE1
   894                           plusw2	equ	0xFDB
   895                           status	equ	0xFD8
   896                           
   897 ;; *************** function _strcmp *****************
   898 ;; Defined at:
   899 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   902 ;;		 -> readBuffer(166), 
   903 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   904 ;;		 -> STR_13(2), STR_12(2), STR_11(2), 
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  r               1    5[BANK0 ] char 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  2    0[BANK0 ] int 
   909 ;; Registers used:
   910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   916 ;;      Params:         0       4       0       0       0       0       0       0       0
   917 ;;      Locals:         0       1       0       0       0       0       0       0       0
   918 ;;      Temps:          0       1       0       0       0       0       0       0       0
   919 ;;      Totals:         0       6       0       0       0       0       0       0       0
   920 ;;Total ram usage:        6 bytes
   921 ;; Hardware stack levels used:    1
   922 ;; Hardware stack levels required when called:    7
   923 ;; This function calls:
   924 ;;		Nothing
   925 ;; This function is called by:
   926 ;;		_main
   927 ;; This function uses a non-reentrant model
   928 ;;
   929                           
   930                           	psect	text1
   931  001482                     __ptext1:
   932                           	opt stack 0
   933  001482                     _strcmp:
   934                           	opt stack 23
   935                           
   936                           ;incstack = 0
   937  001482  D005               	goto	l829
   938  001484  0100               	movlb	0	; () banked
   939  001486  4BA0               	infsnz	strcmp@s1& (0+255),f,b
   940  001488  2BA1               	incf	(strcmp@s1+1)& (0+255),f,b
   941  00148A  4BA2               	infsnz	strcmp@s2& (0+255),f,b
   942  00148C  2BA3               	incf	(strcmp@s2+1)& (0+255),f,b
   943  00148E                     l829:
   944                           
   945                           ; BSR set to: 0
   946  00148E  C0A0  FFD9         	movff	strcmp@s1,fsr2l
   947  001492  C0A1  FFDA         	movff	strcmp@s1+1,fsr2h
   948  001496  50DF               	movf	indf2,w,c
   949  001498  0100               	movlb	0	; () banked
   950  00149A  6FA4               	movwf	??_strcmp& (0+255),b
   951  00149C  C0A2  FFF6         	movff	strcmp@s2,tblptrl
   952  0014A0  C0A3  FFF7         	movff	strcmp@s2+1,tblptrh
   953  0014A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   954  0014A4  6AF8               	clrf	tblptru,c
   955  0014A6                     	endif
   956  0014A6                     	if	0	;tblptru may be non-zero
   957  0014A6                     	endif
   958  0014A6  0008               	tblrd		*
   959  0014A8  50F5               	movf	tablat,w,c
   960  0014AA  0800               	sublw	0
   961  0014AC  25A4               	addwf	??_strcmp& (0+255),w,b
   962  0014AE  6FA5               	movwf	strcmp@r& (0+255),b
   963  0014B0  51A5               	movf	strcmp@r& (0+255),w,b
   964  0014B2  A4D8               	btfss	status,2,c
   965  0014B4  D007               	goto	u1300
   966                           
   967                           ; BSR set to: 0
   968  0014B6  C0A0  FFD9         	movff	strcmp@s1,fsr2l
   969  0014BA  C0A1  FFDA         	movff	strcmp@s1+1,fsr2h
   970  0014BE  50DF               	movf	indf2,w,c
   971  0014C0  A4D8               	btfss	status,2,c
   972  0014C2  D7E0               	goto	l830
   973  0014C4                     u1300:
   974                           
   975                           ; BSR set to: 0
   976                           
   977                           ; BSR set to: 0
   978                           
   979                           ; BSR set to: 0
   980  0014C4  51A5               	movf	strcmp@r& (0+255),w,b
   981  0014C6  6FA0               	movwf	?_strcmp& (0+255),b
   982  0014C8  6BA1               	clrf	(?_strcmp+1)& (0+255),b
   983  0014CA  BFA0               	btfsc	?_strcmp& (0+255),7,b
   984  0014CC  07A1               	decf	(?_strcmp+1)& (0+255),f,b
   985  0014CE  0012               	return	
   986  0014D0                     __end_of_strcmp:
   987                           	opt stack 0
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           plusw0	equ	0xFEB
   994                           wreg	equ	0xFE8
   995                           postdec1	equ	0xFE5
   996                           fsr1l	equ	0xFE1
   997                           indf2	equ	0xFDF
   998                           plusw2	equ	0xFDB
   999                           fsr2h	equ	0xFDA
  1000                           fsr2l	equ	0xFD9
  1001                           status	equ	0xFD8
  1002                           
  1003 ;; *************** function _D_UART_Read *****************
  1004 ;; Defined at:
  1005 ;;		line 237 in file "Drivers/UART_Driver.c"
  1006 ;; Parameters:    Size  Location     Type
  1007 ;;		None
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;		None
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  6    0[BANK0 ] struct .
  1012 ;; Registers used:
  1013 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1019 ;;      Params:         0       6       0       0       0       0       0       0       0
  1020 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1021 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1022 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1023 ;;Total ram usage:        6 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    7
  1026 ;; This function calls:
  1027 ;;		Nothing
  1028 ;; This function is called by:
  1029 ;;		_main
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           	psect	text2
  1034  0014D0                     __ptext2:
  1035                           	opt stack 0
  1036  0014D0                     _D_UART_Read:
  1037                           	opt stack 23
  1038                           
  1039                           ;UART_Driver.c: 238: readData.sender = readBuffer.sender;
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;incstack = 0
  1043  0014D0  0E0B               	movlw	low (_readBuffer+11)
  1044  0014D2  0100               	movlb	0	; () banked
  1045  0014D4  6F98               	movwf	_readData& (0+255),b
  1046  0014D6  0E01               	movlw	high (_readBuffer+11)
  1047  0014D8  6F99               	movwf	(_readData+1)& (0+255),b
  1048                           
  1049                           ;UART_Driver.c: 239: readData.command = readBuffer.command;
  1050  0014DA  0E3E               	movlw	low (_readBuffer+62)
  1051  0014DC  6F9A               	movwf	(_readData+2)& (0+255),b
  1052  0014DE  0E01               	movlw	high (_readBuffer+62)
  1053  0014E0  6F9B               	movwf	(_readData+3)& (0+255),b
  1054                           
  1055                           ;UART_Driver.c: 240: readData.message = readBuffer.message;
  1056  0014E2  0E71               	movlw	low (_readBuffer+113)
  1057  0014E4  6F9C               	movwf	(_readData+4)& (0+255),b
  1058  0014E6  0E01               	movlw	high (_readBuffer+113)
  1059  0014E8  6F9D               	movwf	(_readData+5)& (0+255),b
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;UART_Driver.c: 241: return readData;
  1063  0014EA  EE20  F098         	lfsr	2,_readData
  1064  0014EE  EE00  F0A0         	lfsr	0,?_D_UART_Read
  1065  0014F2  0E05               	movlw	5
  1066  0014F4                     u1281:
  1067  0014F4  CFDB FFEB          	movff	plusw2,plusw0
  1068  0014F8  06E8               	decf	wreg,f,c
  1069  0014FA  E2FC               	bc	u1281
  1070  0014FC  0012               	return	
  1071  0014FE                     __end_of_D_UART_Read:
  1072                           	opt stack 0
  1073                           tblptru	equ	0xFF8
  1074                           tblptrh	equ	0xFF7
  1075                           tblptrl	equ	0xFF6
  1076                           tablat	equ	0xFF5
  1077                           postinc0	equ	0xFEE
  1078                           plusw0	equ	0xFEB
  1079                           wreg	equ	0xFE8
  1080                           postdec1	equ	0xFE5
  1081                           fsr1l	equ	0xFE1
  1082                           indf2	equ	0xFDF
  1083                           plusw2	equ	0xFDB
  1084                           fsr2h	equ	0xFDA
  1085                           fsr2l	equ	0xFD9
  1086                           status	equ	0xFD8
  1087                           
  1088 ;; *************** function _D_UART_Init *****************
  1089 ;; Defined at:
  1090 ;;		line 182 in file "Drivers/UART_Driver.c"
  1091 ;; Parameters:    Size  Location     Type
  1092 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1093 ;;		 -> STR_8(2), 
  1094 ;;  baud            2   16[BANK0 ] unsigned int 
  1095 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;		None
  1098 ;; Return value:  Size  Location     Type
  1099 ;;                  1    wreg      void 
  1100 ;; Registers used:
  1101 ;;		wreg, status,2, status,0, cstack
  1102 ;; Tracked objects:
  1103 ;;		On entry : 0/0
  1104 ;;		On exit  : 0/0
  1105 ;;		Unchanged: 0/0
  1106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1107 ;;      Params:         0       5       0       0       0       0       0       0       0
  1108 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1109 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1110 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1111 ;;Total ram usage:        9 bytes
  1112 ;; Hardware stack levels used:    1
  1113 ;; Hardware stack levels required when called:    8
  1114 ;; This function calls:
  1115 ;;		_D_UART_Enable
  1116 ;;		___aldiv
  1117 ;; This function is called by:
  1118 ;;		_main
  1119 ;; This function uses a non-reentrant model
  1120 ;;
  1121                           
  1122                           	psect	text3
  1123  001106                     __ptext3:
  1124                           	opt stack 0
  1125  001106                     _D_UART_Init:
  1126                           	opt stack 22
  1127                           
  1128                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1129                           
  1130                           ; BSR set to: 0
  1131                           ;incstack = 0
  1132  001106  9E94               	bcf	3988,7,c	;volatile
  1133                           
  1134                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1135  001108  8C94               	bsf	3988,6,c	;volatile
  1136                           
  1137                           ;UART_Driver.c: 188: deviceName = name;
  1138  00110A  C0AE  F0C1         	movff	D_UART_Init@name,_deviceName
  1139  00110E  C0AF  F0C2         	movff	D_UART_Init@name+1,_deviceName+1
  1140  001112  0100               	movlb	0	; () banked
  1141  001114  51C1               	movf	_deviceName& (0+255),w,b
  1142  001116  11C2               	iorwf	(_deviceName+1)& (0+255),w,b
  1143  001118  A4D8               	btfss	status,2,c
  1144  00111A  0E00               	movlw	low (__mediumconst shr (0+16))
  1145  00111C  6FC3               	movwf	(_deviceName+2)& (0+255),b
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;UART_Driver.c: 189: readReady = 0;
  1149  00111E  0E00               	movlw	0
  1150  001120  6F9F               	movwf	_readReady& (0+255),b
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1154  001122  0E00               	movlw	0
  1155  001124  EC7F  F00A         	call	_D_UART_Enable
  1156                           
  1157                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1158  001128  9CAC               	bcf	4012,6,c	;volatile
  1159                           
  1160                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1161  00112A  98AC               	bcf	4012,4,c	;volatile
  1162                           
  1163                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1164  00112C  94AC               	bcf	4012,2,c	;volatile
  1165                           
  1166                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1167  00112E  9CAB               	bcf	4011,6,c	;volatile
  1168                           
  1169                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1170  001130  9AB8               	bcf	4024,5,c	;volatile
  1171                           
  1172                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1173  001132  98B8               	bcf	4024,4,c	;volatile
  1174                           
  1175                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1176  001134  96B8               	bcf	4024,3,c	;volatile
  1177                           
  1178                           ;UART_Driver.c: 210: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1179  001136  C0B0  F0A4         	movff	D_UART_Init@baud,___aldiv@divisor
  1180  00113A  C0B1  F0A5         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1181  00113E  0100               	movlb	0	; () banked
  1182  001140  6BA6               	clrf	(___aldiv@divisor+2)& (0+255),b
  1183  001142  6BA7               	clrf	(___aldiv@divisor+3)& (0+255),b
  1184  001144  0E00               	movlw	0
  1185  001146  6FA0               	movwf	___aldiv@dividend& (0+255),b
  1186  001148  0E24               	movlw	36
  1187  00114A  6FA1               	movwf	(___aldiv@dividend+1)& (0+255),b
  1188  00114C  0EF4               	movlw	244
  1189  00114E  6FA2               	movwf	(___aldiv@dividend+2)& (0+255),b
  1190  001150  0E00               	movlw	0
  1191  001152  6FA3               	movwf	(___aldiv@dividend+3)& (0+255),b
  1192  001154  ECB8  F007         	call	___aldiv	;wreg free
  1193  001158  C0A0  F0B3         	movff	?___aldiv,_D_UART_Init$1497
  1194  00115C  C0A1  F0B4         	movff	?___aldiv+1,_D_UART_Init$1497+1
  1195  001160  C0A2  F0B5         	movff	?___aldiv+2,_D_UART_Init$1497+2
  1196  001164  C0A3  F0B6         	movff	?___aldiv+3,_D_UART_Init$1497+3
  1197                           
  1198                           ;UART_Driver.c: 210: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1199  001168  C0B3  F0A0         	movff	_D_UART_Init$1497,___aldiv@dividend
  1200  00116C  C0B4  F0A1         	movff	_D_UART_Init$1497+1,___aldiv@dividend+1
  1201  001170  C0B5  F0A2         	movff	_D_UART_Init$1497+2,___aldiv@dividend+2
  1202  001174  C0B6  F0A3         	movff	_D_UART_Init$1497+3,___aldiv@dividend+3
  1203  001178  0E40               	movlw	64
  1204  00117A  0100               	movlb	0	; () banked
  1205  00117C  6FA4               	movwf	___aldiv@divisor& (0+255),b
  1206  00117E  0E00               	movlw	0
  1207  001180  6FA5               	movwf	(___aldiv@divisor+1)& (0+255),b
  1208  001182  0E00               	movlw	0
  1209  001184  6FA6               	movwf	(___aldiv@divisor+2)& (0+255),b
  1210  001186  0E00               	movlw	0
  1211  001188  6FA7               	movwf	(___aldiv@divisor+3)& (0+255),b
  1212  00118A  ECB8  F007         	call	___aldiv	;wreg free
  1213  00118E  0100               	movlb	0	; () banked
  1214  001190  05A0               	decf	?___aldiv& (0+255),w,b
  1215  001192  6EAF               	movwf	4015,c	;volatile
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;UART_Driver.c: 213: if (interrupts) {
  1219  001194  51B2               	movf	D_UART_Init@interrupts& (0+255),w,b
  1220  001196  B4D8               	btfsc	status,2,c
  1221  001198  0012               	return	
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1225  00119A  8ED0               	bsf	4048,7,c	;volatile
  1226                           
  1227                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1228  00119C  8EF2               	bsf	intcon,7,c	;volatile
  1229                           
  1230                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1231  00119E  8CF2               	bsf	intcon,6,c	;volatile
  1232                           
  1233                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1234  0011A0  9A9E               	bcf	3998,5,c	;volatile
  1235                           
  1236                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1237  0011A2  9A9F               	bcf	3999,5,c	;volatile
  1238                           
  1239                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1240  0011A4  8A9D               	bsf	3997,5,c	;volatile
  1241  0011A6  0012               	return	
  1242  0011A8                     __end_of_D_UART_Init:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           intcon	equ	0xFF2
  1249                           postinc0	equ	0xFEE
  1250                           plusw0	equ	0xFEB
  1251                           wreg	equ	0xFE8
  1252                           postdec1	equ	0xFE5
  1253                           fsr1l	equ	0xFE1
  1254                           indf2	equ	0xFDF
  1255                           plusw2	equ	0xFDB
  1256                           fsr2h	equ	0xFDA
  1257                           fsr2l	equ	0xFD9
  1258                           status	equ	0xFD8
  1259                           
  1260 ;; *************** function ___aldiv *****************
  1261 ;; Defined at:
  1262 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;  dividend        4    0[BANK0 ] long 
  1265 ;;  divisor         4    4[BANK0 ] long 
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;  quotient        4   10[BANK0 ] long 
  1268 ;;  sign            1    9[BANK0 ] unsigned char 
  1269 ;;  counter         1    8[BANK0 ] unsigned char 
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  4    0[BANK0 ] long 
  1272 ;; Registers used:
  1273 ;;		wreg, status,2, status,0
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1279 ;;      Params:         0       8       0       0       0       0       0       0       0
  1280 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1282 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1283 ;;Total ram usage:       14 bytes
  1284 ;; Hardware stack levels used:    1
  1285 ;; Hardware stack levels required when called:    7
  1286 ;; This function calls:
  1287 ;;		Nothing
  1288 ;; This function is called by:
  1289 ;;		_D_UART_Init
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text4
  1294  000F70                     __ptext4:
  1295                           	opt stack 0
  1296  000F70                     ___aldiv:
  1297                           	opt stack 22
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;incstack = 0
  1301  000F70  0E00               	movlw	0
  1302  000F72  0100               	movlb	0	; () banked
  1303  000F74  6FA9               	movwf	___aldiv@sign& (0+255),b
  1304                           
  1305                           ; BSR set to: 0
  1306  000F76  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1307  000F78  D00A               	goto	l337
  1308                           
  1309                           ; BSR set to: 0
  1310  000F7A  1FA7               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1311  000F7C  1FA6               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1312  000F7E  1FA5               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1313  000F80  6DA4               	negf	___aldiv@divisor& (0+255),b
  1314  000F82  0E00               	movlw	0
  1315  000F84  23A5               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1316  000F86  23A6               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1317  000F88  23A7               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320  000F8A  0E01               	movlw	1
  1321  000F8C  6FA9               	movwf	___aldiv@sign& (0+255),b
  1322  000F8E                     l337:
  1323                           
  1324                           ; BSR set to: 0
  1325                           
  1326                           ; BSR set to: 0
  1327  000F8E  AFA3               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1328  000F90  D00A               	goto	l338
  1329                           
  1330                           ; BSR set to: 0
  1331  000F92  1FA3               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1332  000F94  1FA2               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1333  000F96  1FA1               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1334  000F98  6DA0               	negf	___aldiv@dividend& (0+255),b
  1335  000F9A  0E00               	movlw	0
  1336  000F9C  23A1               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1337  000F9E  23A2               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1338  000FA0  23A3               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1339                           
  1340                           ; BSR set to: 0
  1341  000FA2  0E01               	movlw	1
  1342  000FA4  1BA9               	xorwf	___aldiv@sign& (0+255),f,b
  1343  000FA6                     l338:
  1344                           
  1345                           ; BSR set to: 0
  1346                           
  1347                           ; BSR set to: 0
  1348  000FA6  0E00               	movlw	0
  1349  000FA8  6FAA               	movwf	___aldiv@quotient& (0+255),b
  1350  000FAA  0E00               	movlw	0
  1351  000FAC  6FAB               	movwf	(___aldiv@quotient+1)& (0+255),b
  1352  000FAE  0E00               	movlw	0
  1353  000FB0  6FAC               	movwf	(___aldiv@quotient+2)& (0+255),b
  1354  000FB2  0E00               	movlw	0
  1355  000FB4  6FAD               	movwf	(___aldiv@quotient+3)& (0+255),b
  1356                           
  1357                           ; BSR set to: 0
  1358  000FB6  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1359  000FB8  11A5               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1360  000FBA  11A6               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1361  000FBC  11A7               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1362  000FBE  B4D8               	btfsc	status,2,c
  1363  000FC0  D02A               	goto	l345
  1364                           
  1365                           ; BSR set to: 0
  1366  000FC2  0E01               	movlw	1
  1367  000FC4  6FA8               	movwf	___aldiv@counter& (0+255),b
  1368  000FC6  D006               	goto	l340
  1369  000FC8                     
  1370                           ; BSR set to: 0
  1371                           
  1372                           ; BSR set to: 0
  1373  000FC8  90D8               	bcf	status,0,c
  1374  000FCA  37A4               	rlcf	___aldiv@divisor& (0+255),f,b
  1375  000FCC  37A5               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1376  000FCE  37A6               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1377  000FD0  37A7               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1378  000FD2  2BA8               	incf	___aldiv@counter& (0+255),f,b
  1379  000FD4                     l340:
  1380                           
  1381                           ; BSR set to: 0
  1382                           
  1383                           ; BSR set to: 0
  1384  000FD4  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1385  000FD6  D7F8               	goto	l341
  1386  000FD8                     u1050:
  1387                           
  1388                           ; BSR set to: 0
  1389                           
  1390                           ; BSR set to: 0
  1391                           
  1392                           ; BSR set to: 0
  1393  000FD8  90D8               	bcf	status,0,c
  1394  000FDA  37AA               	rlcf	___aldiv@quotient& (0+255),f,b
  1395  000FDC  37AB               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1396  000FDE  37AC               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1397  000FE0  37AD               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1398                           
  1399                           ; BSR set to: 0
  1400  000FE2  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1401  000FE4  5DA0               	subwf	___aldiv@dividend& (0+255),w,b
  1402  000FE6  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1403  000FE8  59A1               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1404  000FEA  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1405  000FEC  59A2               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1406  000FEE  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1407  000FF0  59A3               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1408  000FF2  A0D8               	btfss	status,0,c
  1409  000FF4  D009               	goto	l344
  1410                           
  1411                           ; BSR set to: 0
  1412  000FF6  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1413  000FF8  5FA0               	subwf	___aldiv@dividend& (0+255),f,b
  1414  000FFA  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1415  000FFC  5BA1               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1416  000FFE  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1417  001000  5BA2               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1418  001002  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1419  001004  5BA3               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1420                           
  1421                           ; BSR set to: 0
  1422  001006  81AA               	bsf	___aldiv@quotient& (0+255),0,b
  1423  001008                     l344:
  1424                           
  1425                           ; BSR set to: 0
  1426                           
  1427                           ; BSR set to: 0
  1428  001008  90D8               	bcf	status,0,c
  1429  00100A  33A7               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1430  00100C  33A6               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1431  00100E  33A5               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1432  001010  33A4               	rrcf	___aldiv@divisor& (0+255),f,b
  1433                           
  1434                           ; BSR set to: 0
  1435  001012  2FA8               	decfsz	___aldiv@counter& (0+255),f,b
  1436  001014  D7E1               	goto	u1050
  1437  001016                     l345:
  1438                           
  1439                           ; BSR set to: 0
  1440                           
  1441                           ; BSR set to: 0
  1442                           
  1443                           ; BSR set to: 0
  1444  001016  51A9               	movf	___aldiv@sign& (0+255),w,b
  1445  001018  B4D8               	btfsc	status,2,c
  1446  00101A  D008               	goto	l346
  1447                           
  1448                           ; BSR set to: 0
  1449  00101C  1FAD               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1450  00101E  1FAC               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1451  001020  1FAB               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1452  001022  6DAA               	negf	___aldiv@quotient& (0+255),b
  1453  001024  0E00               	movlw	0
  1454  001026  23AB               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1455  001028  23AC               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1456  00102A  23AD               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1457  00102C                     l346:
  1458                           
  1459                           ; BSR set to: 0
  1460                           
  1461                           ; BSR set to: 0
  1462  00102C  C0AA  F0A0         	movff	___aldiv@quotient,?___aldiv
  1463  001030  C0AB  F0A1         	movff	___aldiv@quotient+1,?___aldiv+1
  1464  001034  C0AC  F0A2         	movff	___aldiv@quotient+2,?___aldiv+2
  1465  001038  C0AD  F0A3         	movff	___aldiv@quotient+3,?___aldiv+3
  1466  00103C  0012               	return	
  1467  00103E                     __end_of___aldiv:
  1468                           	opt stack 0
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           intcon	equ	0xFF2
  1474                           postinc0	equ	0xFEE
  1475                           plusw0	equ	0xFEB
  1476                           wreg	equ	0xFE8
  1477                           postdec1	equ	0xFE5
  1478                           fsr1l	equ	0xFE1
  1479                           indf2	equ	0xFDF
  1480                           plusw2	equ	0xFDB
  1481                           fsr2h	equ	0xFDA
  1482                           fsr2l	equ	0xFD9
  1483                           status	equ	0xFD8
  1484                           
  1485 ;; *************** function _D_UART_Enable *****************
  1486 ;; Defined at:
  1487 ;;		line 244 in file "Drivers/UART_Driver.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  enable          1    wreg     unsigned char 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  enable          1    0[BANK0 ] unsigned char 
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		wreg, status,2
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1501 ;;      Params:         0       0       0       0       0       0       0       0       0
  1502 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1503 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1504 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1505 ;;Total ram usage:        1 bytes
  1506 ;; Hardware stack levels used:    1
  1507 ;; Hardware stack levels required when called:    7
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_D_UART_Init
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text5
  1517  0014FE                     __ptext5:
  1518                           	opt stack 0
  1519  0014FE                     _D_UART_Enable:
  1520                           	opt stack 22
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;incstack = 0
  1524                           ;D_UART_Enable@enable stored from wreg
  1525  0014FE  0100               	movlb	0	; () banked
  1526  001500  6FA0               	movwf	D_UART_Enable@enable& (0+255),b
  1527                           
  1528                           ;UART_Driver.c: 245: if(enable) {
  1529  001502  0100               	movlb	0	; () banked
  1530  001504  51A0               	movf	D_UART_Enable@enable& (0+255),w,b
  1531  001506  B4D8               	btfsc	status,2,c
  1532  001508  D006               	goto	l167
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  1536  00150A  9E94               	bcf	3988,7,c	;volatile
  1537                           
  1538                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  1539  00150C  8C94               	bsf	3988,6,c	;volatile
  1540                           
  1541                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  1542  00150E  8AAC               	bsf	4012,5,c	;volatile
  1543                           
  1544                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  1545  001510  88AB               	bsf	4011,4,c	;volatile
  1546                           
  1547                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  1548  001512  8EAB               	bsf	4011,7,c	;volatile
  1549                           
  1550                           ;UART_Driver.c: 251: } else {
  1551  001514  0012               	return	
  1552  001516                     l167:
  1553                           
  1554                           ; BSR set to: 0
  1555                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  1556  001516  9E94               	bcf	3988,7,c	;volatile
  1557                           
  1558                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  1559  001518  9C94               	bcf	3988,6,c	;volatile
  1560                           
  1561                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  1562  00151A  9AAC               	bcf	4012,5,c	;volatile
  1563                           
  1564                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  1565  00151C  98AB               	bcf	4011,4,c	;volatile
  1566                           
  1567                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  1568  00151E  9EAB               	bcf	4011,7,c	;volatile
  1569  001520  0012               	return	
  1570  001522                     __end_of_D_UART_Enable:
  1571                           	opt stack 0
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           intcon	equ	0xFF2
  1577                           postinc0	equ	0xFEE
  1578                           plusw0	equ	0xFEB
  1579                           wreg	equ	0xFE8
  1580                           postdec1	equ	0xFE5
  1581                           fsr1l	equ	0xFE1
  1582                           indf2	equ	0xFDF
  1583                           plusw2	equ	0xFDB
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _D_TMR0_Init *****************
  1589 ;; Defined at:
  1590 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;		None
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0
  1605 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1607 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1608 ;;Total ram usage:        0 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    8
  1611 ;; This function calls:
  1612 ;;		_D_TMR0_Enable
  1613 ;; This function is called by:
  1614 ;;		_main
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text6
  1619  001522                     __ptext6:
  1620                           	opt stack 0
  1621  001522                     _D_TMR0_Init:
  1622                           	opt stack 22
  1623                           
  1624                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1625                           
  1626                           ; BSR set to: 0
  1627                           ;incstack = 0
  1628  001522  0E00               	movlw	0
  1629  001524  ECB2  F00A         	call	_D_TMR0_Enable
  1630                           
  1631                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1632  001528  9CD5               	bcf	4053,6,c	;volatile
  1633                           
  1634                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1635  00152A  9AD5               	bcf	4053,5,c	;volatile
  1636                           
  1637                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1638  00152C  98D5               	bcf	4053,4,c	;volatile
  1639                           
  1640                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1641  00152E  96D5               	bcf	4053,3,c	;volatile
  1642                           
  1643                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1644  001530  50D5               	movf	4053,w,c	;volatile
  1645  001532  0BF8               	andlw	-8
  1646  001534  0902               	iorlw	2
  1647  001536  6ED5               	movwf	4053,c	;volatile
  1648                           
  1649                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1650  001538  8ED0               	bsf	4048,7,c	;volatile
  1651                           
  1652                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1653  00153A  8EF2               	bsf	intcon,7,c	;volatile
  1654                           
  1655                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1656  00153C  8CF2               	bsf	intcon,6,c	;volatile
  1657                           
  1658                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1659  00153E  94F2               	bcf	intcon,2,c	;volatile
  1660                           
  1661                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1662  001540  84F1               	bsf	intcon2,2,c	;volatile
  1663                           
  1664                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1665  001542  8AF2               	bsf	intcon,5,c	;volatile
  1666  001544  0012               	return		;funcret
  1667  001546                     __end_of_D_TMR0_Init:
  1668                           	opt stack 0
  1669                           tblptru	equ	0xFF8
  1670                           tblptrh	equ	0xFF7
  1671                           tblptrl	equ	0xFF6
  1672                           tablat	equ	0xFF5
  1673                           intcon	equ	0xFF2
  1674                           intcon2	equ	0xFF1
  1675                           postinc0	equ	0xFEE
  1676                           plusw0	equ	0xFEB
  1677                           wreg	equ	0xFE8
  1678                           postdec1	equ	0xFE5
  1679                           fsr1l	equ	0xFE1
  1680                           indf2	equ	0xFDF
  1681                           plusw2	equ	0xFDB
  1682                           fsr2h	equ	0xFDA
  1683                           fsr2l	equ	0xFD9
  1684                           status	equ	0xFD8
  1685                           
  1686 ;; *************** function _D_TMR0_Enable *****************
  1687 ;; Defined at:
  1688 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;  enable          1    wreg     unsigned char 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  enable          1    0[BANK0 ] unsigned char 
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      void 
  1695 ;; Registers used:
  1696 ;;		wreg, status,2
  1697 ;; Tracked objects:
  1698 ;;		On entry : 0/0
  1699 ;;		On exit  : 0/0
  1700 ;;		Unchanged: 0/0
  1701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1702 ;;      Params:         0       0       0       0       0       0       0       0       0
  1703 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1705 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1706 ;;Total ram usage:        1 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    7
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_D_TMR0_Init
  1713 ;;		_main
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	text7
  1718  001564                     __ptext7:
  1719                           	opt stack 0
  1720  001564                     _D_TMR0_Enable:
  1721                           	opt stack 22
  1722                           
  1723                           ;incstack = 0
  1724                           ;D_TMR0_Enable@enable stored from wreg
  1725  001564  0100               	movlb	0	; () banked
  1726  001566  6FA0               	movwf	D_TMR0_Enable@enable& (0+255),b
  1727                           
  1728                           ;TMR0_Driver.c: 54: if (enable) {
  1729  001568  0100               	movlb	0	; () banked
  1730  00156A  51A0               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1731  00156C  B4D8               	btfsc	status,2,c
  1732  00156E  D002               	goto	l194
  1733                           
  1734                           ; BSR set to: 0
  1735                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1736  001570  8ED5               	bsf	4053,7,c	;volatile
  1737                           
  1738                           ;TMR0_Driver.c: 56: } else {
  1739  001572  0012               	return	
  1740  001574                     l194:
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1744  001574  9ED5               	bcf	4053,7,c	;volatile
  1745  001576  0012               	return	
  1746  001578                     __end_of_D_TMR0_Enable:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           intcon	equ	0xFF2
  1753                           intcon2	equ	0xFF1
  1754                           postinc0	equ	0xFEE
  1755                           plusw0	equ	0xFEB
  1756                           wreg	equ	0xFE8
  1757                           postdec1	equ	0xFE5
  1758                           fsr1l	equ	0xFE1
  1759                           indf2	equ	0xFDF
  1760                           plusw2	equ	0xFDB
  1761                           fsr2h	equ	0xFDA
  1762                           fsr2l	equ	0xFD9
  1763                           status	equ	0xFD8
  1764                           
  1765 ;; *************** function _D_PORT_Init *****************
  1766 ;; Defined at:
  1767 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;		None
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  1    wreg      void 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1781 ;;      Params:         0       0       0       0       0       0       0       0       0
  1782 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1784 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1785 ;;Total ram usage:        0 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; Hardware stack levels required when called:    7
  1788 ;; This function calls:
  1789 ;;		Nothing
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text8
  1796  001546                     __ptext8:
  1797                           	opt stack 0
  1798  001546                     _D_PORT_Init:
  1799                           	opt stack 23
  1800                           
  1801                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;incstack = 0
  1805  001546  0E00               	movlw	0
  1806  001548  6E92               	movwf	3986,c	;volatile
  1807  00154A  0E00               	movlw	0
  1808  00154C  6E80               	movwf	3968,c	;volatile
  1809                           
  1810                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1811  00154E  0E00               	movlw	0
  1812  001550  6E93               	movwf	3987,c	;volatile
  1813  001552  0E00               	movlw	0
  1814  001554  6E81               	movwf	3969,c	;volatile
  1815                           
  1816                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1817  001556  0E00               	movlw	0
  1818  001558  6E94               	movwf	3988,c	;volatile
  1819  00155A  0E00               	movlw	0
  1820  00155C  6E82               	movwf	3970,c	;volatile
  1821                           
  1822                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1823  00155E  0E0F               	movlw	15
  1824  001560  6EC1               	movwf	4033,c	;volatile
  1825  001562  0012               	return		;funcret
  1826  001564                     __end_of_D_PORT_Init:
  1827                           	opt stack 0
  1828                           tblptru	equ	0xFF8
  1829                           tblptrh	equ	0xFF7
  1830                           tblptrl	equ	0xFF6
  1831                           tablat	equ	0xFF5
  1832                           intcon	equ	0xFF2
  1833                           intcon2	equ	0xFF1
  1834                           postinc0	equ	0xFEE
  1835                           plusw0	equ	0xFEB
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1l	equ	0xFE1
  1839                           indf2	equ	0xFDF
  1840                           plusw2	equ	0xFDB
  1841                           fsr2h	equ	0xFDA
  1842                           fsr2l	equ	0xFD9
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _C_DOOR_UnlockAll *****************
  1846 ;; Defined at:
  1847 ;;		line 87 in file "Controllers/DOOR_Controller.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, fsr2l, fsr2h
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1861 ;;      Params:         0       0       0       0       0       0       0       0       0
  1862 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1863 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1864 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    7
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_main
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           	psect	text9
  1876  001578                     __ptext9:
  1877                           	opt stack 0
  1878  001578                     _C_DOOR_UnlockAll:
  1879                           	opt stack 23
  1880                           
  1881                           ;DOOR_Controller.c: 92: *doors[0].lock_port &= 0x3F;
  1882                           
  1883                           ;incstack = 0
  1884  001578  C062  FFD9         	movff	_doors+2,fsr2l
  1885  00157C  C063  FFDA         	movff	_doors+3,fsr2h
  1886  001580  0E3F               	movlw	63
  1887  001582  16DF               	andwf	indf2,f,c
  1888  001584  0012               	return		;funcret
  1889  001586                     __end_of_C_DOOR_UnlockAll:
  1890                           	opt stack 0
  1891                           tblptru	equ	0xFF8
  1892                           tblptrh	equ	0xFF7
  1893                           tblptrl	equ	0xFF6
  1894                           tablat	equ	0xFF5
  1895                           intcon	equ	0xFF2
  1896                           intcon2	equ	0xFF1
  1897                           postinc0	equ	0xFEE
  1898                           plusw0	equ	0xFEB
  1899                           wreg	equ	0xFE8
  1900                           postdec1	equ	0xFE5
  1901                           fsr1l	equ	0xFE1
  1902                           indf2	equ	0xFDF
  1903                           plusw2	equ	0xFDB
  1904                           fsr2h	equ	0xFDA
  1905                           fsr2l	equ	0xFD9
  1906                           status	equ	0xFD8
  1907                           
  1908 ;; *************** function _C_DOOR_SendStates *****************
  1909 ;; Defined at:
  1910 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  com             3   25[BANK0 ] unsigned char [3]
  1915 ;;  mes             2   28[BANK0 ] unsigned char [2]
  1916 ;;  d               1   30[BANK0 ] unsigned char 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1926 ;;      Params:         0       0       0       0       0       0       0       0       0
  1927 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1928 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1929 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1930 ;;Total ram usage:        8 bytes
  1931 ;; Hardware stack levels used:    1
  1932 ;; Hardware stack levels required when called:   11
  1933 ;; This function calls:
  1934 ;;		_D_UART_Write
  1935 ;;		_commandAndMessage
  1936 ;; This function is called by:
  1937 ;;		_main
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text10
  1942  00103E                     __ptext10:
  1943                           	opt stack 0
  1944  00103E                     _C_DOOR_SendStates:
  1945                           	opt stack 19
  1946                           
  1947                           ;DOOR_Controller.c: 103: uint8_t d;
  1948                           ;DOOR_Controller.c: 104: for (d = 0; d < 5; d++) {
  1949                           
  1950                           ;incstack = 0
  1951  00103E  0E00               	movlw	0
  1952  001040  0100               	movlb	0	; () banked
  1953  001042  6FBE               	movwf	C_DOOR_SendStates@d& (0+255),b
  1954  001044                     l1651:
  1955                           
  1956                           ; BSR set to: 0
  1957  001044  0E04               	movlw	4
  1958  001046  65BE               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  1959  001048  D001               	goto	l42
  1960  00104A  0012               	return	
  1961  00104C                     l42:
  1962                           
  1963                           ; BSR set to: 0
  1964                           ;DOOR_Controller.c: 105: if (doors[d].was_open != doors[d].is_open) {
  1965                           
  1966                           ; BSR set to: 0
  1967  00104C  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1968  00104E  0D0A               	mullw	10
  1969  001050  0E06               	movlw	6
  1970  001052  26F3               	addwf	prodl,f,c
  1971  001054  0E00               	movlw	0
  1972  001056  22F4               	addwfc	prodh,f,c
  1973  001058  0E60               	movlw	low _doors
  1974  00105A  24F3               	addwf	prodl,w,c
  1975  00105C  6ED9               	movwf	fsr2l,c
  1976  00105E  0E00               	movlw	high _doors
  1977  001060  20F4               	addwfc	prodh,w,c
  1978  001062  6EDA               	movwf	fsr2h,c
  1979  001064  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1980  001066  0D0A               	mullw	10
  1981  001068  0E05               	movlw	5
  1982  00106A  26F3               	addwf	prodl,f,c
  1983  00106C  0E00               	movlw	0
  1984  00106E  22F4               	addwfc	prodh,f,c
  1985  001070  0E60               	movlw	low _doors
  1986  001072  24F3               	addwf	prodl,w,c
  1987  001074  6EE1               	movwf	fsr1l,c
  1988  001076  0E00               	movlw	high _doors
  1989  001078  20F4               	addwfc	prodh,w,c
  1990  00107A  6EE2               	movwf	fsr1h,c
  1991  00107C  50DE               	movf	postinc2,w,c
  1992  00107E  18E6               	xorwf	postinc1,w,c
  1993  001080  B4D8               	btfsc	status,2,c
  1994  001082  D03F               	goto	l44
  1995                           
  1996                           ; BSR set to: 0
  1997                           ;DOOR_Controller.c: 107: char com[3];
  1998                           ;DOOR_Controller.c: 108: char mes[2];
  1999                           ;DOOR_Controller.c: 109: commandAndMessage(doors[d], com, mes);
  2000  001084  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2001  001086  0D0A               	mullw	10
  2002  001088  0E60               	movlw	low _doors
  2003  00108A  24F3               	addwf	prodl,w,c
  2004  00108C  6ED9               	movwf	fsr2l,c
  2005  00108E  0E00               	movlw	high _doors
  2006  001090  20F4               	addwfc	prodh,w,c
  2007  001092  6EDA               	movwf	fsr2h,c
  2008  001094  EE00  F0A0         	lfsr	0,commandAndMessage@door
  2009  001098  0E09               	movlw	9
  2010  00109A                     u1151:
  2011  00109A  CFDB FFEB          	movff	plusw2,plusw0
  2012  00109E  06E8               	decf	wreg,f,c
  2013  0010A0  E2FC               	bc	u1151
  2014  0010A2  0EB9               	movlw	low C_DOOR_SendStates@com
  2015  0010A4  6FAA               	movwf	commandAndMessage@com& (0+255),b
  2016  0010A6  0E00               	movlw	high C_DOOR_SendStates@com
  2017  0010A8  6FAB               	movwf	(commandAndMessage@com+1)& (0+255),b
  2018  0010AA  0EBC               	movlw	low C_DOOR_SendStates@mes
  2019  0010AC  6FAC               	movwf	commandAndMessage@mes& (0+255),b
  2020  0010AE  0E00               	movlw	high C_DOOR_SendStates@mes
  2021  0010B0  6FAD               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2022  0010B2  EC19  F00A         	call	_commandAndMessage	;wreg free
  2023                           
  2024                           ;DOOR_Controller.c: 112: D_UART_Write(com, mes);
  2025  0010B6  0EB9               	movlw	low C_DOOR_SendStates@com
  2026  0010B8  0100               	movlb	0	; () banked
  2027  0010BA  6FB2               	movwf	D_UART_Write@command& (0+255),b
  2028  0010BC  0E00               	movlw	high C_DOOR_SendStates@com
  2029  0010BE  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
  2030  0010C0  0EBC               	movlw	low C_DOOR_SendStates@mes
  2031  0010C2  6FB4               	movwf	D_UART_Write@data& (0+255),b
  2032  0010C4  0E00               	movlw	high C_DOOR_SendStates@mes
  2033  0010C6  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
  2034  0010C8  EC48  F007         	call	_D_UART_Write	;wreg free
  2035                           
  2036                           ;DOOR_Controller.c: 114: doors[d].was_open = doors[d].is_open;
  2037  0010CC  0100               	movlb	0	; () banked
  2038  0010CE  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2039  0010D0  0D0A               	mullw	10
  2040  0010D2  0E06               	movlw	6
  2041  0010D4  26F3               	addwf	prodl,f,c
  2042  0010D6  0E00               	movlw	0
  2043  0010D8  22F4               	addwfc	prodh,f,c
  2044  0010DA  0E60               	movlw	low _doors
  2045  0010DC  24F3               	addwf	prodl,w,c
  2046  0010DE  6ED9               	movwf	fsr2l,c
  2047  0010E0  0E00               	movlw	high _doors
  2048  0010E2  20F4               	addwfc	prodh,w,c
  2049  0010E4  6EDA               	movwf	fsr2h,c
  2050  0010E6  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2051  0010E8  0D0A               	mullw	10
  2052  0010EA  0E05               	movlw	5
  2053  0010EC  26F3               	addwf	prodl,f,c
  2054  0010EE  0E00               	movlw	0
  2055  0010F0  22F4               	addwfc	prodh,f,c
  2056  0010F2  0E60               	movlw	low _doors
  2057  0010F4  24F3               	addwf	prodl,w,c
  2058  0010F6  6EE1               	movwf	fsr1l,c
  2059  0010F8  0E00               	movlw	high _doors
  2060  0010FA  20F4               	addwfc	prodh,w,c
  2061  0010FC  6EE2               	movwf	fsr1h,c
  2062  0010FE  CFDF FFE7          	movff	indf2,indf1
  2063  001102                     l44:
  2064                           
  2065                           ; BSR set to: 0
  2066                           
  2067                           ; BSR set to: 0
  2068  001102  2BBE               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2069  001104  D79F               	goto	l1651
  2070  001106                     __end_of_C_DOOR_SendStates:
  2071                           	opt stack 0
  2072                           tblptru	equ	0xFF8
  2073                           tblptrh	equ	0xFF7
  2074                           tblptrl	equ	0xFF6
  2075                           tablat	equ	0xFF5
  2076                           prodh	equ	0xFF4
  2077                           prodl	equ	0xFF3
  2078                           intcon	equ	0xFF2
  2079                           intcon2	equ	0xFF1
  2080                           postinc0	equ	0xFEE
  2081                           plusw0	equ	0xFEB
  2082                           wreg	equ	0xFE8
  2083                           indf1	equ	0xFE7
  2084                           postinc1	equ	0xFE6
  2085                           postdec1	equ	0xFE5
  2086                           fsr1h	equ	0xFE2
  2087                           fsr1l	equ	0xFE1
  2088                           indf2	equ	0xFDF
  2089                           postinc2	equ	0xFDE
  2090                           plusw2	equ	0xFDB
  2091                           fsr2h	equ	0xFDA
  2092                           fsr2l	equ	0xFD9
  2093                           status	equ	0xFD8
  2094                           
  2095 ;; *************** function _commandAndMessage *****************
  2096 ;; Defined at:
  2097 ;;		line 26 in file "Controllers/DOOR_Controller.c"
  2098 ;; Parameters:    Size  Location     Type
  2099 ;;  door           10    0[BANK0 ] struct .
  2100 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2101 ;;		 -> C_DOOR_SendStates@com(3), 
  2102 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2103 ;;		 -> C_DOOR_SendStates@mes(2), 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;		None
  2106 ;; Return value:  Size  Location     Type
  2107 ;;                  1    wreg      void 
  2108 ;; Registers used:
  2109 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2115 ;;      Params:         0      14       0       0       0       0       0       0       0
  2116 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2118 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2119 ;;Total ram usage:       14 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    7
  2122 ;; This function calls:
  2123 ;;		Nothing
  2124 ;; This function is called by:
  2125 ;;		_C_DOOR_SendStates
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text11
  2130  001432                     __ptext11:
  2131                           	opt stack 0
  2132  001432                     _commandAndMessage:
  2133                           	opt stack 22
  2134                           
  2135                           ;DOOR_Controller.c: 28: com[0] = 'P';
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;incstack = 0
  2139  001432  C0AA  FFD9         	movff	commandAndMessage@com,fsr2l
  2140  001436  C0AB  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2141  00143A  0E50               	movlw	80
  2142  00143C  6EDF               	movwf	indf2,c
  2143                           
  2144                           ;DOOR_Controller.c: 29: com[1] = door.id + 0x30;
  2145  00143E  0100               	movlb	0	; () banked
  2146  001440  EE20 F001          	lfsr	2,1
  2147  001444  51AA               	movf	commandAndMessage@com& (0+255),w,b
  2148  001446  26D9               	addwf	fsr2l,f,c
  2149  001448  51AB               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2150  00144A  22DA               	addwfc	fsr2h,f,c
  2151  00144C  51A0               	movf	commandAndMessage@door& (0+255),w,b
  2152  00144E  0F30               	addlw	48
  2153  001450  6EDF               	movwf	indf2,c
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;DOOR_Controller.c: 30: com[2] = '\0';
  2157  001452  EE20 F002          	lfsr	2,2
  2158  001456  51AA               	movf	commandAndMessage@com& (0+255),w,b
  2159  001458  26D9               	addwf	fsr2l,f,c
  2160  00145A  51AB               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2161  00145C  22DA               	addwfc	fsr2h,f,c
  2162  00145E  0E00               	movlw	0
  2163  001460  6EDF               	movwf	indf2,c
  2164                           
  2165                           ; BSR set to: 0
  2166                           ;DOOR_Controller.c: 33: mes[0] = door.is_open + 0x30;
  2167  001462  51A6               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2168  001464  0F30               	addlw	48
  2169  001466  C0AC  FFD9         	movff	commandAndMessage@mes,fsr2l
  2170  00146A  C0AD  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2171  00146E  6EDF               	movwf	indf2,c
  2172                           
  2173                           ; BSR set to: 0
  2174                           ;DOOR_Controller.c: 34: mes[1] = '\0';
  2175  001470  EE20 F001          	lfsr	2,1
  2176  001474  51AC               	movf	commandAndMessage@mes& (0+255),w,b
  2177  001476  26D9               	addwf	fsr2l,f,c
  2178  001478  51AD               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2179  00147A  22DA               	addwfc	fsr2h,f,c
  2180  00147C  0E00               	movlw	0
  2181  00147E  6EDF               	movwf	indf2,c
  2182                           
  2183                           ; BSR set to: 0
  2184  001480  0012               	return		;funcret
  2185  001482                     __end_of_commandAndMessage:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           prodh	equ	0xFF4
  2192                           prodl	equ	0xFF3
  2193                           intcon	equ	0xFF2
  2194                           intcon2	equ	0xFF1
  2195                           postinc0	equ	0xFEE
  2196                           plusw0	equ	0xFEB
  2197                           wreg	equ	0xFE8
  2198                           indf1	equ	0xFE7
  2199                           postinc1	equ	0xFE6
  2200                           postdec1	equ	0xFE5
  2201                           fsr1h	equ	0xFE2
  2202                           fsr1l	equ	0xFE1
  2203                           indf2	equ	0xFDF
  2204                           postinc2	equ	0xFDE
  2205                           plusw2	equ	0xFDB
  2206                           fsr2h	equ	0xFDA
  2207                           fsr2l	equ	0xFD9
  2208                           status	equ	0xFD8
  2209                           
  2210 ;; *************** function _D_UART_Write *****************
  2211 ;; Defined at:
  2212 ;;		line 223 in file "Drivers/UART_Driver.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2215 ;;		 -> STR_14(2), STR_9(2), C_DOOR_SendStates@com(3), 
  2216 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2217 ;;		 -> STR_15(2), STR_10(6), C_DOOR_SendStates@mes(2), 
  2218 ;; Auto vars:     Size  Location     Type
  2219 ;;		None
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      void 
  2222 ;; Registers used:
  2223 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2229 ;;      Params:         0       4       0       0       0       0       0       0       0
  2230 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2231 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2232 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2233 ;;Total ram usage:        5 bytes
  2234 ;; Hardware stack levels used:    1
  2235 ;; Hardware stack levels required when called:   10
  2236 ;; This function calls:
  2237 ;;		_printf
  2238 ;; This function is called by:
  2239 ;;		_C_DOOR_SendStates
  2240 ;;		_main
  2241 ;; This function uses a non-reentrant model
  2242 ;;
  2243                           
  2244                           	psect	text12
  2245  000E90                     __ptext12:
  2246                           	opt stack 0
  2247  000E90                     _D_UART_Write:
  2248                           	opt stack 20
  2249                           
  2250                           ;UART_Driver.c: 224: printf(startCharacter);
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;incstack = 0
  2254  000E90  C041  F0A7         	movff	_startCharacter,printf@f
  2255  000E94  C042  F0A8         	movff	_startCharacter+1,printf@f+1
  2256  000E98  0100               	movlb	0	; () banked
  2257  000E9A  51A7               	movf	printf@f& (0+255),w,b
  2258  000E9C  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2259  000E9E  A4D8               	btfss	status,2,c
  2260  000EA0  0E00               	movlw	low (__mediumconst shr (0+16))
  2261  000EA2  6FA9               	movwf	(printf@f+2)& (0+255),b
  2262  000EA4  ECEB  F004         	call	_printf	;wreg free
  2263                           
  2264                           ;UART_Driver.c: 226: printf(messageCharacter);
  2265  000EA8  C0C4  F0A7         	movff	_messageCharacter,printf@f
  2266  000EAC  C0C5  F0A8         	movff	_messageCharacter+1,printf@f+1
  2267  000EB0  0100               	movlb	0	; () banked
  2268  000EB2  51A7               	movf	printf@f& (0+255),w,b
  2269  000EB4  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2270  000EB6  A4D8               	btfss	status,2,c
  2271  000EB8  0E00               	movlw	low (__mediumconst shr (0+16))
  2272  000EBA  6FA9               	movwf	(printf@f+2)& (0+255),b
  2273  000EBC  ECEB  F004         	call	_printf	;wreg free
  2274                           
  2275                           ;UART_Driver.c: 227: printf(deviceName);
  2276  000EC0  C0C1  F0A7         	movff	_deviceName,printf@f
  2277  000EC4  C0C2  F0A8         	movff	_deviceName+1,printf@f+1
  2278  000EC8  C0C3  F0A9         	movff	_deviceName+2,printf@f+2
  2279  000ECC  ECEB  F004         	call	_printf	;wreg free
  2280                           
  2281                           ;UART_Driver.c: 229: printf(":");printf(command);
  2282  000ED0  0E3B               	movlw	low STR_6
  2283  000ED2  0100               	movlb	0	; () banked
  2284  000ED4  6FA7               	movwf	printf@f& (0+255),b
  2285  000ED6  0E08               	movlw	high STR_6
  2286  000ED8  6FA8               	movwf	(printf@f+1)& (0+255),b
  2287  000EDA  51A7               	movf	printf@f& (0+255),w,b
  2288  000EDC  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2289  000EDE  A4D8               	btfss	status,2,c
  2290  000EE0  0E00               	movlw	low (__mediumconst shr (0+16))
  2291  000EE2  6FA9               	movwf	(printf@f+2)& (0+255),b
  2292  000EE4  ECEB  F004         	call	_printf	;wreg free
  2293  000EE8  C0B2  F0A7         	movff	D_UART_Write@command,printf@f
  2294  000EEC  C0B3  F0A8         	movff	D_UART_Write@command+1,printf@f+1
  2295  000EF0  0100               	movlb	0	; () banked
  2296  000EF2  6BA9               	clrf	(printf@f+2)& (0+255),b
  2297  000EF4  51A7               	movf	printf@f& (0+255),w,b
  2298  000EF6  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2299  000EF8  B4D8               	btfsc	status,2,c
  2300  000EFA  D005               	goto	u981
  2301  000EFC  0E07               	movlw	(high __ramtop+-1)
  2302  000EFE  65B3               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2303  000F00  D001               	goto	u9811
  2304  000F02  D001               	goto	u981
  2305  000F04                     u9811:
  2306  000F04  8BA9               	bsf	(printf@f+2)& (0+255),5,b
  2307  000F06                     u981:
  2308  000F06  ECEB  F004         	call	_printf	;wreg free
  2309                           
  2310                           ;UART_Driver.c: 231: printf(":");printf(data);
  2311  000F0A  0E3B               	movlw	low STR_6
  2312  000F0C  0100               	movlb	0	; () banked
  2313  000F0E  6FA7               	movwf	printf@f& (0+255),b
  2314  000F10  0E08               	movlw	high STR_6
  2315  000F12  6FA8               	movwf	(printf@f+1)& (0+255),b
  2316  000F14  51A7               	movf	printf@f& (0+255),w,b
  2317  000F16  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2318  000F18  A4D8               	btfss	status,2,c
  2319  000F1A  0E00               	movlw	low (__mediumconst shr (0+16))
  2320  000F1C  6FA9               	movwf	(printf@f+2)& (0+255),b
  2321  000F1E  ECEB  F004         	call	_printf	;wreg free
  2322  000F22  C0B4  F0A7         	movff	D_UART_Write@data,printf@f
  2323  000F26  C0B5  F0A8         	movff	D_UART_Write@data+1,printf@f+1
  2324  000F2A  0100               	movlb	0	; () banked
  2325  000F2C  6BA9               	clrf	(printf@f+2)& (0+255),b
  2326  000F2E  51A7               	movf	printf@f& (0+255),w,b
  2327  000F30  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2328  000F32  B4D8               	btfsc	status,2,c
  2329  000F34  D005               	goto	u991
  2330  000F36  0E07               	movlw	(high __ramtop+-1)
  2331  000F38  65B5               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2332  000F3A  D001               	goto	u9911
  2333  000F3C  D001               	goto	u991
  2334  000F3E                     u9911:
  2335  000F3E  8BA9               	bsf	(printf@f+2)& (0+255),5,b
  2336  000F40                     u991:
  2337  000F40  ECEB  F004         	call	_printf	;wreg free
  2338                           
  2339                           ;UART_Driver.c: 233: printf(stopCharacter);
  2340  000F44  C03F  F0A7         	movff	_stopCharacter,printf@f
  2341  000F48  C040  F0A8         	movff	_stopCharacter+1,printf@f+1
  2342  000F4C  0100               	movlb	0	; () banked
  2343  000F4E  51A7               	movf	printf@f& (0+255),w,b
  2344  000F50  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2345  000F52  A4D8               	btfss	status,2,c
  2346  000F54  0E00               	movlw	low (__mediumconst shr (0+16))
  2347  000F56  6FA9               	movwf	(printf@f+2)& (0+255),b
  2348  000F58  ECEB  F004         	call	_printf	;wreg free
  2349                           
  2350                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(16000000/4000.0)));
  2351  000F5C  0E06               	movlw	6
  2352  000F5E  0100               	movlb	0	; () banked
  2353  000F60  6FB6               	movwf	??_D_UART_Write& (0+255),b
  2354  000F62  0E30               	movlw	48
  2355  000F64                     u1487:
  2356  000F64  2EE8               	decfsz	wreg,f,c
  2357  000F66  D7FE               	bra	u1487
  2358  000F68  2FB6               	decfsz	??_D_UART_Write& (0+255),f,b
  2359  000F6A  D7FC               	bra	u1487
  2360  000F6C  F000               	nop	
  2361  000F6E  0012               	return		;funcret
  2362  000F70                     __end_of_D_UART_Write:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           prodh	equ	0xFF4
  2369                           prodl	equ	0xFF3
  2370                           intcon	equ	0xFF2
  2371                           intcon2	equ	0xFF1
  2372                           postinc0	equ	0xFEE
  2373                           plusw0	equ	0xFEB
  2374                           wreg	equ	0xFE8
  2375                           indf1	equ	0xFE7
  2376                           postinc1	equ	0xFE6
  2377                           postdec1	equ	0xFE5
  2378                           fsr1h	equ	0xFE2
  2379                           fsr1l	equ	0xFE1
  2380                           indf2	equ	0xFDF
  2381                           postinc2	equ	0xFDE
  2382                           plusw2	equ	0xFDB
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8
  2386                           
  2387 ;; *************** function _printf *****************
  2388 ;; Defined at:
  2389 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2392 ;;		 -> STR_15(2), STR_14(2), STR_10(6), STR_9(2), 
  2393 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  2394 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  2395 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  idx             1   13[BANK0 ] unsigned char 
  2398 ;;  tmpval          4    0        struct .
  2399 ;;  cp              3    0        PTR const unsigned char 
  2400 ;;  val             2   14[BANK0 ] unsigned int 
  2401 ;;  ap              2   11[BANK0 ] PTR void [1]
  2402 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2403 ;;  len             2    0        unsigned int 
  2404 ;;  c               1   17[BANK0 ] char 
  2405 ;;  prec            1   16[BANK0 ] char 
  2406 ;;  flag            1   10[BANK0 ] unsigned char 
  2407 ;; Return value:  Size  Location     Type
  2408 ;;                  2    7[BANK0 ] int 
  2409 ;; Registers used:
  2410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2411 ;; Tracked objects:
  2412 ;;		On entry : 0/0
  2413 ;;		On exit  : 0/0
  2414 ;;		Unchanged: 0/0
  2415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2416 ;;      Params:         0       3       0       0       0       0       0       0       0
  2417 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2418 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2419 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2420 ;;Total ram usage:       11 bytes
  2421 ;; Hardware stack levels used:    1
  2422 ;; Hardware stack levels required when called:    9
  2423 ;; This function calls:
  2424 ;;		___lwdiv
  2425 ;;		_putch
  2426 ;; This function is called by:
  2427 ;;		_D_UART_Write
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text13
  2432  0009D6                     __ptext13:
  2433                           	opt stack 0
  2434  0009D6                     _printf:
  2435                           	opt stack 20
  2436                           
  2437                           ;doprnt.c: 466: va_list ap;
  2438                           ;doprnt.c: 499: signed char c;
  2439                           ;doprnt.c: 506: signed char prec;
  2440                           ;doprnt.c: 508: unsigned char flag;
  2441                           ;doprnt.c: 523: union {
  2442                           ;doprnt.c: 524: unsigned long vd;
  2443                           ;doprnt.c: 525: double integ;
  2444                           ;doprnt.c: 526: } tmpval;
  2445                           ;doprnt.c: 528: unsigned int val;
  2446                           ;doprnt.c: 529: unsigned len;
  2447                           ;doprnt.c: 530: const char * cp;
  2448                           ;doprnt.c: 533: *ap = __va_start();
  2449                           
  2450                           ;incstack = 0
  2451  0009D6  0EAA               	movlw	low (?_printf+3)
  2452  0009D8  0100               	movlb	0	; () banked
  2453  0009DA  6FAB               	movwf	printf@ap& (0+255),b
  2454  0009DC  0E00               	movlw	high (?_printf+3)
  2455  0009DE  6FAC               	movwf	(printf@ap+1)& (0+255),b
  2456                           
  2457                           ;doprnt.c: 536: while(c = *f++) {
  2458  0009E0  D08B               	goto	u870
  2459  0009E2                     
  2460                           ; BSR set to: 0
  2461                           ;doprnt.c: 538: if(c != '%')
  2462                           
  2463                           ; BSR set to: 0
  2464  0009E2  0E25               	movlw	37
  2465  0009E4  19B1               	xorwf	printf@c& (0+255),w,b
  2466  0009E6  B4D8               	btfsc	status,2,c
  2467  0009E8  D004               	goto	l267
  2468                           
  2469                           ; BSR set to: 0
  2470                           ;doprnt.c: 540: {
  2471                           ;doprnt.c: 541: (putch(c) );
  2472  0009EA  51B1               	movf	printf@c& (0+255),w,b
  2473  0009EC  ECC3  F00A         	call	_putch
  2474                           
  2475                           ;doprnt.c: 542: continue;
  2476  0009F0  D083               	goto	u870
  2477  0009F2                     l267:
  2478                           
  2479                           ;doprnt.c: 543: }
  2480                           ;doprnt.c: 548: flag = 0;
  2481  0009F2  0E00               	movlw	0
  2482  0009F4  0100               	movlb	0	; () banked
  2483  0009F6  6FAA               	movwf	printf@flag& (0+255),b
  2484                           
  2485                           ;doprnt.c: 635: switch(c = *f++) {
  2486  0009F8  D004               	goto	l268
  2487  0009FA                     
  2488                           ; BSR set to: 0
  2489                           ;doprnt.c: 809: (putch(c) );
  2490                           
  2491                           ; BSR set to: 0
  2492  0009FA  51B1               	movf	printf@c& (0+255),w,b
  2493  0009FC  ECC3  F00A         	call	_putch
  2494                           
  2495                           ;doprnt.c: 810: continue;
  2496  000A00  D07B               	goto	u870
  2497  000A02                     l268:
  2498  000A02  C0A7  FFF6         	movff	printf@f,tblptrl
  2499  000A06  C0A8  FFF7         	movff	printf@f+1,tblptrh
  2500  000A0A  C0A9  FFF8         	movff	printf@f+2,tblptru
  2501  000A0E  0E01               	movlw	1
  2502  000A10  0100               	movlb	0	; () banked
  2503  000A12  27A7               	addwf	printf@f& (0+255),f,b
  2504  000A14  0E00               	movlw	0
  2505  000A16  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2506  000A18  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2507  000A1A  BAF8               	btfsc	tblptru,5,c
  2508  000A1C  D003               	bra	u837
  2509  000A1E  0008               	tblrd		*
  2510  000A20  50F5               	movf	tablat,w,c
  2511  000A22  D005               	bra	u830
  2512  000A24                     u837:
  2513  000A24  CFF6 FFE9          	movff	tblptrl,fsr0l
  2514  000A28  CFF7 FFEA          	movff	tblptrh,fsr0h
  2515  000A2C  50EF               	movf	indf0,w,c
  2516  000A2E                     u830:
  2517  000A2E  0100               	movlb	0	; () banked
  2518  000A30  6FB1               	movwf	printf@c& (0+255),b
  2519  000A32  51B1               	movf	printf@c& (0+255),w,b
  2520                           
  2521                           ; Switch size 1, requested type "space"
  2522                           ; Number of cases is 2, Range of values is 0 to 120
  2523                           ; switch strategies available:
  2524                           ; Name         Instructions Cycles
  2525                           ; simple_byte            7     4 (average)
  2526                           ;	Chosen strategy is simple_byte
  2527  000A34  0A00               	xorlw	0	; case 0
  2528  000A36  B4D8               	btfsc	status,2,c
  2529  000A38  0012               	return	
  2530  000A3A  0A78               	xorlw	120	; case 120
  2531  000A3C  A4D8               	btfss	status,2,c
  2532  000A3E  D7DD               	goto	l273
  2533                           
  2534                           ;doprnt.c: 1273: {
  2535                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2536                           
  2537                           ; BSR set to: 0
  2538  000A40  C0AB  FFD9         	movff	printf@ap,fsr2l
  2539  000A44  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  2540  000A48  CFDE F0AE          	movff	postinc2,printf@val
  2541  000A4C  CFDD F0AF          	movff	postdec2,printf@val+1
  2542  000A50  0E02               	movlw	2
  2543  000A52  0100               	movlb	0	; () banked
  2544  000A54  27AB               	addwf	printf@ap& (0+255),f,b
  2545  000A56  0E00               	movlw	0
  2546  000A58  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;doprnt.c: 1287: }
  2550                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2551  000A5A  0E01               	movlw	1
  2552  000A5C  6FB1               	movwf	printf@c& (0+255),b
  2553  000A5E  D014               	goto	l1497
  2554  000A60                     
  2555                           ; BSR set to: 0
  2556                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2557                           
  2558                           ; BSR set to: 0
  2559  000A60  51B1               	movf	printf@c& (0+255),w,b
  2560  000A62  0D02               	mullw	2
  2561  000A64  0E01               	movlw	low _hexpowers
  2562  000A66  24F3               	addwf	prodl,w,c
  2563  000A68  6EF6               	movwf	tblptrl,c
  2564  000A6A  0E08               	movlw	high _hexpowers
  2565  000A6C  20F4               	addwfc	prodh,w,c
  2566  000A6E  6EF7               	movwf	tblptrh,c
  2567  000A70                     	if	1	;There are 3 active tblptr bytes
  2568  000A70  6AF8               	clrf	tblptru,c
  2569  000A72  0E00               	movlw	low (__mediumconst shr (0+16))
  2570  000A74  22F8               	addwfc	tblptru,f,c
  2571  000A76                     	endif
  2572  000A76  0009               	tblrd		*+
  2573  000A78  50F5               	movf	tablat,w,c
  2574  000A7A  5DAE               	subwf	printf@val& (0+255),w,b
  2575  000A7C  0009               	tblrd		*+
  2576  000A7E  50F5               	movf	tablat,w,c
  2577  000A80  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  2578  000A82  A0D8               	btfss	status,0,c
  2579  000A84  D005               	goto	u860
  2580                           
  2581                           ; BSR set to: 0
  2582                           
  2583                           ; BSR set to: 0
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1318: break;
  2587  000A86  2BB1               	incf	printf@c& (0+255),f,b
  2588  000A88                     l1497:
  2589                           
  2590                           ; BSR set to: 0
  2591  000A88  0E04               	movlw	4
  2592  000A8A  19B1               	xorwf	printf@c& (0+255),w,b
  2593  000A8C  A4D8               	btfss	status,2,c
  2594  000A8E  D7E8               	goto	l274
  2595  000A90                     u860:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 1422: {
  2599                           ;doprnt.c: 1469: }
  2600                           ;doprnt.c: 1472: prec = c;
  2601  000A90  C0B1  F0B0         	movff	printf@c,printf@prec
  2602                           
  2603                           ;doprnt.c: 1474: while(prec--) {
  2604  000A94  D02C               	goto	l277
  2605  000A96                     
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 1478: {
  2608                           ;doprnt.c: 1499: {
  2609                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2610                           
  2611                           ; BSR set to: 0
  2612  000A96  C0AE  F0A0         	movff	printf@val,___lwdiv@dividend
  2613  000A9A  C0AF  F0A1         	movff	printf@val+1,___lwdiv@dividend+1
  2614  000A9E  51B0               	movf	printf@prec& (0+255),w,b
  2615  000AA0  0D02               	mullw	2
  2616  000AA2  0E01               	movlw	low _hexpowers
  2617  000AA4  24F3               	addwf	prodl,w,c
  2618  000AA6  6EF6               	movwf	tblptrl,c
  2619  000AA8  0E08               	movlw	high _hexpowers
  2620  000AAA  20F4               	addwfc	prodh,w,c
  2621  000AAC  6EF7               	movwf	tblptrh,c
  2622  000AAE                     	if	1	;There are 3 active tblptr bytes
  2623  000AAE  6AF8               	clrf	tblptru,c
  2624  000AB0  0E00               	movlw	low (__mediumconst shr (0+16))
  2625  000AB2  22F8               	addwfc	tblptru,f,c
  2626  000AB4                     	endif
  2627  000AB4  0009               	tblrd		*+
  2628  000AB6  CFF5 F0A2          	movff	tablat,___lwdiv@divisor
  2629  000ABA  000A               	tblrd		*-
  2630  000ABC  CFF5 F0A3          	movff	tablat,___lwdiv@divisor+1
  2631  000AC0  ECC6  F009         	call	___lwdiv	;wreg free
  2632  000AC4  0100               	movlb	0	; () banked
  2633  000AC6  51A0               	movf	?___lwdiv& (0+255),w,b
  2634  000AC8  0B0F               	andlw	15
  2635  000ACA  6FAD               	movwf	printf@idx& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2639  000ACC  51AD               	movf	printf@idx& (0+255),w,b
  2640  000ACE  0D01               	mullw	1
  2641  000AD0  0E09               	movlw	low STR_16
  2642  000AD2  24F3               	addwf	prodl,w,c
  2643  000AD4  6EF6               	movwf	tblptrl,c
  2644  000AD6  0E08               	movlw	high STR_16
  2645  000AD8  20F4               	addwfc	prodh,w,c
  2646  000ADA  6EF7               	movwf	tblptrh,c
  2647  000ADC                     	if	1	;There are 3 active tblptr bytes
  2648  000ADC  6AF8               	clrf	tblptru,c
  2649  000ADE  0E00               	movlw	low (__mediumconst shr (0+16))
  2650  000AE0  22F8               	addwfc	tblptru,f,c
  2651  000AE2                     	endif
  2652  000AE2  0008               	tblrd		*
  2653  000AE4  CFF5 F0B1          	movff	tablat,printf@c
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1508: }
  2657                           ;doprnt.c: 1523: }
  2658                           ;doprnt.c: 1524: (putch(c) );
  2659  000AE8  51B1               	movf	printf@c& (0+255),w,b
  2660  000AEA  ECC3  F00A         	call	_putch
  2661  000AEE                     l277:
  2662  000AEE  0100               	movlb	0	; () banked
  2663  000AF0  07B0               	decf	printf@prec& (0+255),f,b
  2664  000AF2  29B0               	incf	printf@prec& (0+255),w,b
  2665  000AF4  A4D8               	btfss	status,2,c
  2666  000AF6  D7CF               	goto	l278
  2667  000AF8                     u870:
  2668                           
  2669                           ; BSR set to: 0
  2670                           
  2671                           ; BSR set to: 0
  2672  000AF8  C0A7  FFF6         	movff	printf@f,tblptrl
  2673  000AFC  C0A8  FFF7         	movff	printf@f+1,tblptrh
  2674  000B00  C0A9  FFF8         	movff	printf@f+2,tblptru
  2675  000B04  0E01               	movlw	1
  2676  000B06  0100               	movlb	0	; () banked
  2677  000B08  27A7               	addwf	printf@f& (0+255),f,b
  2678  000B0A  0E00               	movlw	0
  2679  000B0C  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2680  000B0E  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2681  000B10  BAF8               	btfsc	tblptru,5,c
  2682  000B12  D003               	bra	u887
  2683  000B14  0008               	tblrd		*
  2684  000B16  50F5               	movf	tablat,w,c
  2685  000B18  D005               	bra	u880
  2686  000B1A                     u887:
  2687  000B1A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2688  000B1E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2689  000B22  50EF               	movf	indf0,w,c
  2690  000B24                     u880:
  2691  000B24  0100               	movlb	0	; () banked
  2692  000B26  6FB1               	movwf	printf@c& (0+255),b
  2693  000B28  51B1               	movf	printf@c& (0+255),w,b
  2694  000B2A  B4D8               	btfsc	status,2,c
  2695  000B2C  0012               	return	
  2696  000B2E  D759               	goto	l266
  2697  000B30                     __end_of_printf:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           intcon	equ	0xFF2
  2706                           intcon2	equ	0xFF1
  2707                           indf0	equ	0xFEF
  2708                           postinc0	equ	0xFEE
  2709                           plusw0	equ	0xFEB
  2710                           fsr0h	equ	0xFEA
  2711                           fsr0l	equ	0xFE9
  2712                           wreg	equ	0xFE8
  2713                           indf1	equ	0xFE7
  2714                           postinc1	equ	0xFE6
  2715                           postdec1	equ	0xFE5
  2716                           fsr1h	equ	0xFE2
  2717                           fsr1l	equ	0xFE1
  2718                           indf2	equ	0xFDF
  2719                           postinc2	equ	0xFDE
  2720                           postdec2	equ	0xFDD
  2721                           plusw2	equ	0xFDB
  2722                           fsr2h	equ	0xFDA
  2723                           fsr2l	equ	0xFD9
  2724                           status	equ	0xFD8
  2725                           
  2726 ;; *************** function _putch *****************
  2727 ;; Defined at:
  2728 ;;		line 260 in file "Drivers/UART_Driver.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  data            1    wreg     unsigned char 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  data            1    1[BANK0 ] unsigned char 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, status,2, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2742 ;;      Params:         0       0       0       0       0       0       0       0       0
  2743 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2744 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2745 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2746 ;;Total ram usage:        1 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    8
  2749 ;; This function calls:
  2750 ;;		_writeByte
  2751 ;; This function is called by:
  2752 ;;		_printf
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755                           
  2756                           	psect	text14
  2757  001586                     __ptext14:
  2758                           	opt stack 0
  2759  001586                     _putch:
  2760                           	opt stack 20
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;incstack = 0
  2764                           ;putch@data stored from wreg
  2765  001586  0100               	movlb	0	; () banked
  2766  001588  6FA1               	movwf	putch@data& (0+255),b
  2767                           
  2768                           ;UART_Driver.c: 261: writeByte(data);
  2769  00158A  0100               	movlb	0	; () banked
  2770  00158C  51A1               	movf	putch@data& (0+255),w,b
  2771  00158E  ECCA  F00A         	call	_writeByte
  2772  001592  0012               	return		;funcret
  2773  001594                     __end_of_putch:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           intcon2	equ	0xFF1
  2783                           indf0	equ	0xFEF
  2784                           postinc0	equ	0xFEE
  2785                           plusw0	equ	0xFEB
  2786                           fsr0h	equ	0xFEA
  2787                           fsr0l	equ	0xFE9
  2788                           wreg	equ	0xFE8
  2789                           indf1	equ	0xFE7
  2790                           postinc1	equ	0xFE6
  2791                           postdec1	equ	0xFE5
  2792                           fsr1h	equ	0xFE2
  2793                           fsr1l	equ	0xFE1
  2794                           indf2	equ	0xFDF
  2795                           postinc2	equ	0xFDE
  2796                           postdec2	equ	0xFDD
  2797                           plusw2	equ	0xFDB
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _writeByte *****************
  2803 ;; Defined at:
  2804 ;;		line 69 in file "Drivers/UART_Driver.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  data            1    wreg     unsigned char 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  data            1    0[BANK0 ] unsigned char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2818 ;;      Params:         0       0       0       0       0       0       0       0       0
  2819 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2821 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2822 ;;Total ram usage:        1 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    7
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_putch
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           	psect	text15
  2833  001594                     __ptext15:
  2834                           	opt stack 0
  2835  001594                     _writeByte:
  2836                           	opt stack 20
  2837                           
  2838                           ;incstack = 0
  2839                           ;writeByte@data stored from wreg
  2840  001594  0100               	movlb	0	; () banked
  2841  001596  6FA0               	movwf	writeByte@data& (0+255),b
  2842  001598                     
  2843                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2844  001598  A2AC               	btfss	4012,1,c	;volatile
  2845  00159A  D7FE               	goto	l1411
  2846                           
  2847                           ;UART_Driver.c: 71: TXREG = data;
  2848  00159C  C0A0  FFAD         	movff	writeByte@data,4013	;volatile
  2849  0015A0  0012               	return		;funcret
  2850  0015A2                     __end_of_writeByte:
  2851                           	opt stack 0
  2852                           tblptru	equ	0xFF8
  2853                           tblptrh	equ	0xFF7
  2854                           tblptrl	equ	0xFF6
  2855                           tablat	equ	0xFF5
  2856                           prodh	equ	0xFF4
  2857                           prodl	equ	0xFF3
  2858                           intcon	equ	0xFF2
  2859                           intcon2	equ	0xFF1
  2860                           indf0	equ	0xFEF
  2861                           postinc0	equ	0xFEE
  2862                           plusw0	equ	0xFEB
  2863                           fsr0h	equ	0xFEA
  2864                           fsr0l	equ	0xFE9
  2865                           wreg	equ	0xFE8
  2866                           indf1	equ	0xFE7
  2867                           postinc1	equ	0xFE6
  2868                           postdec1	equ	0xFE5
  2869                           fsr1h	equ	0xFE2
  2870                           fsr1l	equ	0xFE1
  2871                           indf2	equ	0xFDF
  2872                           postinc2	equ	0xFDE
  2873                           postdec2	equ	0xFDD
  2874                           plusw2	equ	0xFDB
  2875                           fsr2h	equ	0xFDA
  2876                           fsr2l	equ	0xFD9
  2877                           status	equ	0xFD8
  2878                           
  2879 ;; *************** function ___lwdiv *****************
  2880 ;; Defined at:
  2881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;  dividend        2    0[BANK0 ] unsigned int 
  2884 ;;  divisor         2    2[BANK0 ] unsigned int 
  2885 ;; Auto vars:     Size  Location     Type
  2886 ;;  quotient        2    4[BANK0 ] unsigned int 
  2887 ;;  counter         1    6[BANK0 ] unsigned char 
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  2    0[BANK0 ] unsigned int 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, status,0
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2897 ;;      Params:         0       4       0       0       0       0       0       0       0
  2898 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2900 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2901 ;;Total ram usage:        7 bytes
  2902 ;; Hardware stack levels used:    1
  2903 ;; Hardware stack levels required when called:    7
  2904 ;; This function calls:
  2905 ;;		Nothing
  2906 ;; This function is called by:
  2907 ;;		_printf
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text16
  2912  00138C                     __ptext16:
  2913                           	opt stack 0
  2914  00138C                     ___lwdiv:
  2915                           	opt stack 21
  2916                           
  2917                           ;incstack = 0
  2918  00138C  0E00               	movlw	0
  2919  00138E  0100               	movlb	0	; () banked
  2920  001390  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2921  001392  0E00               	movlw	0
  2922  001394  6FA4               	movwf	___lwdiv@quotient& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925  001396  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2926  001398  11A3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2927  00139A  B4D8               	btfsc	status,2,c
  2928  00139C  D01C               	goto	l690
  2929                           
  2930                           ; BSR set to: 0
  2931  00139E  0E01               	movlw	1
  2932  0013A0  6FA6               	movwf	___lwdiv@counter& (0+255),b
  2933  0013A2  D004               	goto	l685
  2934  0013A4                     
  2935                           ; BSR set to: 0
  2936                           
  2937                           ; BSR set to: 0
  2938  0013A4  90D8               	bcf	status,0,c
  2939  0013A6  37A2               	rlcf	___lwdiv@divisor& (0+255),f,b
  2940  0013A8  37A3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2941  0013AA  2BA6               	incf	___lwdiv@counter& (0+255),f,b
  2942  0013AC                     l685:
  2943                           
  2944                           ; BSR set to: 0
  2945                           
  2946                           ; BSR set to: 0
  2947  0013AC  AFA3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2948  0013AE  D7FA               	goto	l686
  2949  0013B0                     u770:
  2950                           
  2951                           ; BSR set to: 0
  2952                           
  2953                           ; BSR set to: 0
  2954                           
  2955                           ; BSR set to: 0
  2956  0013B0  90D8               	bcf	status,0,c
  2957  0013B2  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
  2958  0013B4  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2959                           
  2960                           ; BSR set to: 0
  2961  0013B6  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2962  0013B8  5DA0               	subwf	___lwdiv@dividend& (0+255),w,b
  2963  0013BA  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2964  0013BC  59A1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2965  0013BE  A0D8               	btfss	status,0,c
  2966  0013C0  D005               	goto	l689
  2967                           
  2968                           ; BSR set to: 0
  2969  0013C2  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2970  0013C4  5FA0               	subwf	___lwdiv@dividend& (0+255),f,b
  2971  0013C6  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2972  0013C8  5BA1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2973                           
  2974                           ; BSR set to: 0
  2975  0013CA  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
  2976  0013CC                     l689:
  2977                           
  2978                           ; BSR set to: 0
  2979                           
  2980                           ; BSR set to: 0
  2981  0013CC  90D8               	bcf	status,0,c
  2982  0013CE  33A3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2983  0013D0  33A2               	rrcf	___lwdiv@divisor& (0+255),f,b
  2984                           
  2985                           ; BSR set to: 0
  2986  0013D2  2FA6               	decfsz	___lwdiv@counter& (0+255),f,b
  2987  0013D4  D7ED               	goto	u770
  2988  0013D6                     l690:
  2989                           
  2990                           ; BSR set to: 0
  2991                           
  2992                           ; BSR set to: 0
  2993  0013D6  C0A4  F0A0         	movff	___lwdiv@quotient,?___lwdiv
  2994  0013DA  C0A5  F0A1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2995                           
  2996                           ; BSR set to: 0
  2997  0013DE  0012               	return		;funcret
  2998  0013E0                     __end_of___lwdiv:
  2999                           	opt stack 0
  3000                           tblptru	equ	0xFF8
  3001                           tblptrh	equ	0xFF7
  3002                           tblptrl	equ	0xFF6
  3003                           tablat	equ	0xFF5
  3004                           prodh	equ	0xFF4
  3005                           prodl	equ	0xFF3
  3006                           intcon	equ	0xFF2
  3007                           intcon2	equ	0xFF1
  3008                           indf0	equ	0xFEF
  3009                           postinc0	equ	0xFEE
  3010                           plusw0	equ	0xFEB
  3011                           fsr0h	equ	0xFEA
  3012                           fsr0l	equ	0xFE9
  3013                           wreg	equ	0xFE8
  3014                           indf1	equ	0xFE7
  3015                           postinc1	equ	0xFE6
  3016                           postdec1	equ	0xFE5
  3017                           fsr1h	equ	0xFE2
  3018                           fsr1l	equ	0xFE1
  3019                           indf2	equ	0xFDF
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           plusw2	equ	0xFDB
  3023                           fsr2h	equ	0xFDA
  3024                           fsr2l	equ	0xFD9
  3025                           status	equ	0xFD8
  3026                           
  3027 ;; *************** function _C_DOOR_ReadSensors *****************
  3028 ;; Defined at:
  3029 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;		None
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  d               1    4[BANK0 ] unsigned char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  1    wreg      void 
  3036 ;; Registers used:
  3037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3043 ;;      Params:         0       0       0       0       0       0       0       0       0
  3044 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3045 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3046 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3047 ;;Total ram usage:        5 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    7
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_main
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text17
  3058  00124A                     __ptext17:
  3059                           	opt stack 0
  3060  00124A                     _C_DOOR_ReadSensors:
  3061                           	opt stack 23
  3062                           
  3063                           ;DOOR_Controller.c: 96: uint8_t d;
  3064                           ;DOOR_Controller.c: 97: for (d = 0; d < 5; d++) {
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;incstack = 0
  3068  00124A  0E00               	movlw	0
  3069  00124C  0100               	movlb	0	; () banked
  3070  00124E  6FA4               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3071  001250                     l1639:
  3072                           
  3073                           ; BSR set to: 0
  3074  001250  0E04               	movlw	4
  3075  001252  65A4               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  3076  001254  D001               	goto	l37
  3077  001256  0012               	return	
  3078  001258                     l37:
  3079                           
  3080                           ; BSR set to: 0
  3081                           ;DOOR_Controller.c: 98: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pin
      +                          ) & 0x01;
  3082                           
  3083                           ; BSR set to: 0
  3084  001258  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3085  00125A  0D0A               	mullw	10
  3086  00125C  0E06               	movlw	6
  3087  00125E  26F3               	addwf	prodl,f,c
  3088  001260  0E00               	movlw	0
  3089  001262  22F4               	addwfc	prodh,f,c
  3090  001264  0E60               	movlw	low _doors
  3091  001266  24F3               	addwf	prodl,w,c
  3092  001268  6ED9               	movwf	fsr2l,c
  3093  00126A  0E00               	movlw	high _doors
  3094  00126C  20F4               	addwfc	prodh,w,c
  3095  00126E  6EDA               	movwf	fsr2h,c
  3096  001270  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3097  001272  0D0A               	mullw	10
  3098  001274  0E09               	movlw	9
  3099  001276  26F3               	addwf	prodl,f,c
  3100  001278  0E00               	movlw	0
  3101  00127A  22F4               	addwfc	prodh,f,c
  3102  00127C  0E60               	movlw	low _doors
  3103  00127E  24F3               	addwf	prodl,w,c
  3104  001280  6EE1               	movwf	fsr1l,c
  3105  001282  0E00               	movlw	high _doors
  3106  001284  20F4               	addwfc	prodh,w,c
  3107  001286  6EE2               	movwf	fsr1h,c
  3108  001288  50E7               	movf	indf1,w,c
  3109  00128A  6FA0               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3110  00128C  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3111  00128E  0D0A               	mullw	10
  3112  001290  0E07               	movlw	7
  3113  001292  26F3               	addwf	prodl,f,c
  3114  001294  0E00               	movlw	0
  3115  001296  22F4               	addwfc	prodh,f,c
  3116  001298  0E60               	movlw	low _doors
  3117  00129A  24F3               	addwf	prodl,w,c
  3118  00129C  6EE1               	movwf	fsr1l,c
  3119  00129E  0E00               	movlw	high _doors
  3120  0012A0  20F4               	addwfc	prodh,w,c
  3121  0012A2  6EE2               	movwf	fsr1h,c
  3122  0012A4  CFE6 F0A1          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3123  0012A8  CFE5 F0A2          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3124  0012AC  C0A1  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3125  0012B0  C0A2  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3126  0012B4  50E7               	movf	indf1,w,c
  3127  0012B6  6FA3               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3128  0012B8  2BA0               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3129  0012BA  D002               	goto	u1114
  3130  0012BC                     u1115:
  3131  0012BC  90D8               	bcf	status,0,c
  3132  0012BE  33A3               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3133  0012C0                     u1114:
  3134  0012C0  2FA0               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3135  0012C2  D7FC               	goto	u1115
  3136  0012C4  0100               	movlb	0	; () banked
  3137  0012C6  51A3               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3138  0012C8  0B01               	andlw	1
  3139  0012CA  6EDF               	movwf	indf2,c
  3140                           
  3141                           ; BSR set to: 0
  3142  0012CC  2BA4               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3143  0012CE  D7C0               	goto	l1639
  3144  0012D0                     __end_of_C_DOOR_ReadSensors:
  3145                           	opt stack 0
  3146                           tblptru	equ	0xFF8
  3147                           tblptrh	equ	0xFF7
  3148                           tblptrl	equ	0xFF6
  3149                           tablat	equ	0xFF5
  3150                           prodh	equ	0xFF4
  3151                           prodl	equ	0xFF3
  3152                           intcon	equ	0xFF2
  3153                           intcon2	equ	0xFF1
  3154                           indf0	equ	0xFEF
  3155                           postinc0	equ	0xFEE
  3156                           plusw0	equ	0xFEB
  3157                           fsr0h	equ	0xFEA
  3158                           fsr0l	equ	0xFE9
  3159                           wreg	equ	0xFE8
  3160                           indf1	equ	0xFE7
  3161                           postinc1	equ	0xFE6
  3162                           postdec1	equ	0xFE5
  3163                           fsr1h	equ	0xFE2
  3164                           fsr1l	equ	0xFE1
  3165                           indf2	equ	0xFDF
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           plusw2	equ	0xFDB
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _C_DOOR_LockAll *****************
  3174 ;; Defined at:
  3175 ;;		line 70 in file "Controllers/DOOR_Controller.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;		None
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		wreg, fsr2l, fsr2h
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3189 ;;      Params:         0       0       0       0       0       0       0       0       0
  3190 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3192 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3193 ;;Total ram usage:        0 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    7
  3196 ;; This function calls:
  3197 ;;		Nothing
  3198 ;; This function is called by:
  3199 ;;		_main
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           	psect	text18
  3204  0015A2                     __ptext18:
  3205                           	opt stack 0
  3206  0015A2                     _C_DOOR_LockAll:
  3207                           	opt stack 23
  3208                           
  3209                           ;DOOR_Controller.c: 75: *doors[0].lock_port |= 0xC0;
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;incstack = 0
  3213  0015A2  C062  FFD9         	movff	_doors+2,fsr2l
  3214  0015A6  C063  FFDA         	movff	_doors+3,fsr2h
  3215  0015AA  0EC0               	movlw	192
  3216  0015AC  12DF               	iorwf	indf2,f,c
  3217  0015AE  0012               	return		;funcret
  3218  0015B0                     __end_of_C_DOOR_LockAll:
  3219                           	opt stack 0
  3220                           tblptru	equ	0xFF8
  3221                           tblptrh	equ	0xFF7
  3222                           tblptrl	equ	0xFF6
  3223                           tablat	equ	0xFF5
  3224                           prodh	equ	0xFF4
  3225                           prodl	equ	0xFF3
  3226                           intcon	equ	0xFF2
  3227                           intcon2	equ	0xFF1
  3228                           indf0	equ	0xFEF
  3229                           postinc0	equ	0xFEE
  3230                           plusw0	equ	0xFEB
  3231                           fsr0h	equ	0xFEA
  3232                           fsr0l	equ	0xFE9
  3233                           wreg	equ	0xFE8
  3234                           indf1	equ	0xFE7
  3235                           postinc1	equ	0xFE6
  3236                           postdec1	equ	0xFE5
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _C_DOOR_Init *****************
  3248 ;; Defined at:
  3249 ;;		line 40 in file "Controllers/DOOR_Controller.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  d               1    0[BANK0 ] unsigned char 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  1    wreg      void 
  3256 ;; Registers used:
  3257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3263 ;;      Params:         0       0       0       0       0       0       0       0       0
  3264 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3266 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3267 ;;Total ram usage:        1 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    7
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_main
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text19
  3278  000D96                     __ptext19:
  3279                           	opt stack 0
  3280  000D96                     _C_DOOR_Init:
  3281                           	opt stack 23
  3282                           
  3283                           ;DOOR_Controller.c: 42: TRISB &= 0x3F;
  3284                           
  3285                           ;incstack = 0
  3286  000D96  0E3F               	movlw	63
  3287  000D98  1693               	andwf	3987,f,c	;volatile
  3288                           
  3289                           ;DOOR_Controller.c: 43: TRISB |= 0x3F;
  3290  000D9A  0E3F               	movlw	63
  3291  000D9C  1293               	iorwf	3987,f,c	;volatile
  3292                           
  3293                           ;DOOR_Controller.c: 46: uint8_t d;
  3294                           ;DOOR_Controller.c: 47: for (d = 0; d < 5; d++) {
  3295  000D9E  0E00               	movlw	0
  3296  000DA0  0100               	movlb	0	; () banked
  3297  000DA2  6FA0               	movwf	C_DOOR_Init@d& (0+255),b
  3298  000DA4                     l1623:
  3299                           
  3300                           ; BSR set to: 0
  3301  000DA4  0E04               	movlw	4
  3302  000DA6  65A0               	cpfsgt	C_DOOR_Init@d& (0+255),b
  3303  000DA8  D001               	goto	l14
  3304  000DAA  0012               	return	
  3305  000DAC                     l14:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;DOOR_Controller.c: 48: doors[d].id = d;
  3309                           
  3310                           ; BSR set to: 0
  3311  000DAC  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3312  000DAE  0D0A               	mullw	10
  3313  000DB0  0E60               	movlw	low _doors
  3314  000DB2  24F3               	addwf	prodl,w,c
  3315  000DB4  6ED9               	movwf	fsr2l,c
  3316  000DB6  0E00               	movlw	high _doors
  3317  000DB8  20F4               	addwfc	prodh,w,c
  3318  000DBA  6EDA               	movwf	fsr2h,c
  3319  000DBC  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  3320                           
  3321                           ;DOOR_Controller.c: 50: doors[d].locked = 1;
  3322  000DC0  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3323  000DC2  0D0A               	mullw	10
  3324  000DC4  0E01               	movlw	1
  3325  000DC6  26F3               	addwf	prodl,f,c
  3326  000DC8  0E00               	movlw	0
  3327  000DCA  22F4               	addwfc	prodh,f,c
  3328  000DCC  0E60               	movlw	low _doors
  3329  000DCE  24F3               	addwf	prodl,w,c
  3330  000DD0  6ED9               	movwf	fsr2l,c
  3331  000DD2  0E00               	movlw	high _doors
  3332  000DD4  20F4               	addwfc	prodh,w,c
  3333  000DD6  6EDA               	movwf	fsr2h,c
  3334  000DD8  0E01               	movlw	1
  3335  000DDA  6EDF               	movwf	indf2,c
  3336                           
  3337                           ;DOOR_Controller.c: 51: doors[d].lock_port = &PORTB;
  3338  000DDC  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3339  000DDE  0D0A               	mullw	10
  3340  000DE0  0E02               	movlw	2
  3341  000DE2  26F3               	addwf	prodl,f,c
  3342  000DE4  0E00               	movlw	0
  3343  000DE6  22F4               	addwfc	prodh,f,c
  3344  000DE8  0E60               	movlw	low _doors
  3345  000DEA  24F3               	addwf	prodl,w,c
  3346  000DEC  6ED9               	movwf	fsr2l,c
  3347  000DEE  0E00               	movlw	high _doors
  3348  000DF0  20F4               	addwfc	prodh,w,c
  3349  000DF2  6EDA               	movwf	fsr2h,c
  3350  000DF4  0E81               	movlw	129
  3351  000DF6  6EDE               	movwf	postinc2,c
  3352  000DF8  0E0F               	movlw	15
  3353  000DFA  6EDD               	movwf	postdec2,c
  3354                           
  3355                           ;DOOR_Controller.c: 52: doors[d].lock_pin = 7;
  3356  000DFC  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3357  000DFE  0D0A               	mullw	10
  3358  000E00  0E04               	movlw	4
  3359  000E02  26F3               	addwf	prodl,f,c
  3360  000E04  0E00               	movlw	0
  3361  000E06  22F4               	addwfc	prodh,f,c
  3362  000E08  0E60               	movlw	low _doors
  3363  000E0A  24F3               	addwf	prodl,w,c
  3364  000E0C  6ED9               	movwf	fsr2l,c
  3365  000E0E  0E00               	movlw	high _doors
  3366  000E10  20F4               	addwfc	prodh,w,c
  3367  000E12  6EDA               	movwf	fsr2h,c
  3368  000E14  0E07               	movlw	7
  3369  000E16  6EDF               	movwf	indf2,c
  3370                           
  3371                           ;DOOR_Controller.c: 54: doors[d].is_open = 0;
  3372  000E18  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3373  000E1A  0D0A               	mullw	10
  3374  000E1C  0E06               	movlw	6
  3375  000E1E  26F3               	addwf	prodl,f,c
  3376  000E20  0E00               	movlw	0
  3377  000E22  22F4               	addwfc	prodh,f,c
  3378  000E24  0E60               	movlw	low _doors
  3379  000E26  24F3               	addwf	prodl,w,c
  3380  000E28  6ED9               	movwf	fsr2l,c
  3381  000E2A  0E00               	movlw	high _doors
  3382  000E2C  20F4               	addwfc	prodh,w,c
  3383  000E2E  6EDA               	movwf	fsr2h,c
  3384  000E30  0E00               	movlw	0
  3385  000E32  6EDF               	movwf	indf2,c
  3386                           
  3387                           ;DOOR_Controller.c: 55: doors[d].was_open = 0;
  3388  000E34  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3389  000E36  0D0A               	mullw	10
  3390  000E38  0E05               	movlw	5
  3391  000E3A  26F3               	addwf	prodl,f,c
  3392  000E3C  0E00               	movlw	0
  3393  000E3E  22F4               	addwfc	prodh,f,c
  3394  000E40  0E60               	movlw	low _doors
  3395  000E42  24F3               	addwf	prodl,w,c
  3396  000E44  6ED9               	movwf	fsr2l,c
  3397  000E46  0E00               	movlw	high _doors
  3398  000E48  20F4               	addwfc	prodh,w,c
  3399  000E4A  6EDA               	movwf	fsr2h,c
  3400  000E4C  0E00               	movlw	0
  3401  000E4E  6EDF               	movwf	indf2,c
  3402                           
  3403                           ;DOOR_Controller.c: 56: doors[d].sensor_port = &PORTB;
  3404  000E50  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3405  000E52  0D0A               	mullw	10
  3406  000E54  0E07               	movlw	7
  3407  000E56  26F3               	addwf	prodl,f,c
  3408  000E58  0E00               	movlw	0
  3409  000E5A  22F4               	addwfc	prodh,f,c
  3410  000E5C  0E60               	movlw	low _doors
  3411  000E5E  24F3               	addwf	prodl,w,c
  3412  000E60  6ED9               	movwf	fsr2l,c
  3413  000E62  0E00               	movlw	high _doors
  3414  000E64  20F4               	addwfc	prodh,w,c
  3415  000E66  6EDA               	movwf	fsr2h,c
  3416  000E68  0E81               	movlw	129
  3417  000E6A  6EDE               	movwf	postinc2,c
  3418  000E6C  0E0F               	movlw	15
  3419  000E6E  6EDD               	movwf	postdec2,c
  3420                           
  3421                           ;DOOR_Controller.c: 57: doors[d].sensor_pin = d;
  3422  000E70  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3423  000E72  0D0A               	mullw	10
  3424  000E74  0E09               	movlw	9
  3425  000E76  26F3               	addwf	prodl,f,c
  3426  000E78  0E00               	movlw	0
  3427  000E7A  22F4               	addwfc	prodh,f,c
  3428  000E7C  0E60               	movlw	low _doors
  3429  000E7E  24F3               	addwf	prodl,w,c
  3430  000E80  6ED9               	movwf	fsr2l,c
  3431  000E82  0E00               	movlw	high _doors
  3432  000E84  20F4               	addwfc	prodh,w,c
  3433  000E86  6EDA               	movwf	fsr2h,c
  3434  000E88  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  3435                           
  3436                           ; BSR set to: 0
  3437  000E8C  2BA0               	incf	C_DOOR_Init@d& (0+255),f,b
  3438  000E8E  D78A               	goto	l1623
  3439  000E90                     __end_of_C_DOOR_Init:
  3440                           	opt stack 0
  3441                           tblptru	equ	0xFF8
  3442                           tblptrh	equ	0xFF7
  3443                           tblptrl	equ	0xFF6
  3444                           tablat	equ	0xFF5
  3445                           prodh	equ	0xFF4
  3446                           prodl	equ	0xFF3
  3447                           intcon	equ	0xFF2
  3448                           intcon2	equ	0xFF1
  3449                           indf0	equ	0xFEF
  3450                           postinc0	equ	0xFEE
  3451                           plusw0	equ	0xFEB
  3452                           fsr0h	equ	0xFEA
  3453                           fsr0l	equ	0xFE9
  3454                           wreg	equ	0xFE8
  3455                           indf1	equ	0xFE7
  3456                           postinc1	equ	0xFE6
  3457                           postdec1	equ	0xFE5
  3458                           fsr1h	equ	0xFE2
  3459                           fsr1l	equ	0xFE1
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           plusw2	equ	0xFDB
  3464                           fsr2h	equ	0xFDA
  3465                           fsr2l	equ	0xFD9
  3466                           status	equ	0xFD8
  3467                           
  3468 ;; *************** function _LowISR *****************
  3469 ;; Defined at:
  3470 ;;		line 264 in file "Drivers/UART_Driver.c"
  3471 ;; Parameters:    Size  Location     Type
  3472 ;;		None
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;		None
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3484 ;;      Params:         0       0       0       0       0       0       0       0       0
  3485 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3486 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3487 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3488 ;;Total ram usage:       21 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    6
  3491 ;; This function calls:
  3492 ;;		_fillDataBuffer
  3493 ;;		_readByte
  3494 ;; This function is called by:
  3495 ;;		Interrupt level 1
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499                           	psect	intcodelo
  3500  000018                     __pintcodelo:
  3501                           	opt stack 0
  3502  000018                     _LowISR:
  3503                           	opt stack 19
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;incstack = 0
  3507  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3508  00001A  CFD8 F028          	movff	status,??_LowISR
  3509  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3510  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3511  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3512  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3513  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3514  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3515  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3516  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3517  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3518  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3519  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3520  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3521  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3522  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3523  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3524  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3525  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3526  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3527  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3528  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3529                           
  3530                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  3531  00006E  AA9E               	btfss	3998,5,c	;volatile
  3532  000070  D005               	goto	i1l177
  3533                           
  3534                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  3535  000072  ECE3  F00A         	call	_readByte	;wreg free
  3536  000076  EC1F  F004         	call	_fillDataBuffer
  3537                           
  3538                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  3539  00007A  9A9E               	bcf	3998,5,c	;volatile
  3540  00007C                     i1l177:
  3541  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3542  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3543  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3544  000088  C039  F044         	movff	??_LowISR+17,btemp
  3545  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3546  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3547  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3548  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3549  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3550  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3551  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3552  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3553  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3554  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3555  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3556  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3557  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3558  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3559  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3560  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3561  0000CC  C028  FFD8         	movff	??_LowISR,status
  3562  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3563  0000D2  0010               	retfie	
  3564  0000D4                     __end_of_LowISR:
  3565                           	opt stack 0
  3566                           pclatu	equ	0xFFB
  3567                           pclath	equ	0xFFA
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           intcon2	equ	0xFF1
  3576                           indf0	equ	0xFEF
  3577                           postinc0	equ	0xFEE
  3578                           plusw0	equ	0xFEB
  3579                           fsr0h	equ	0xFEA
  3580                           fsr0l	equ	0xFE9
  3581                           wreg	equ	0xFE8
  3582                           indf1	equ	0xFE7
  3583                           postinc1	equ	0xFE6
  3584                           postdec1	equ	0xFE5
  3585                           fsr1h	equ	0xFE2
  3586                           fsr1l	equ	0xFE1
  3587                           bsr	equ	0xFE0
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           plusw2	equ	0xFDB
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _readByte *****************
  3597 ;; Defined at:
  3598 ;;		line 74 in file "Drivers/UART_Driver.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;		None
  3601 ;; Auto vars:     Size  Location     Type
  3602 ;;		None
  3603 ;; Return value:  Size  Location     Type
  3604 ;;                  1    wreg      unsigned char 
  3605 ;; Registers used:
  3606 ;;		wreg, status,2
  3607 ;; Tracked objects:
  3608 ;;		On entry : 0/0
  3609 ;;		On exit  : 0/0
  3610 ;;		Unchanged: 0/0
  3611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3612 ;;      Params:         0       0       0       0       0       0       0       0       0
  3613 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3614 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3615 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3616 ;;Total ram usage:        0 bytes
  3617 ;; Hardware stack levels used:    1
  3618 ;; Hardware stack levels required when called:    1
  3619 ;; This function calls:
  3620 ;;		Nothing
  3621 ;; This function is called by:
  3622 ;;		_LowISR
  3623 ;; This function uses a non-reentrant model
  3624 ;;
  3625                           
  3626                           	psect	text21
  3627  0015C6                     __ptext21:
  3628                           	opt stack 0
  3629  0015C6                     _readByte:
  3630                           	opt stack 23
  3631                           
  3632                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3633                           
  3634                           ;incstack = 0
  3635  0015C6  50AB               	movf	4011,w,c	;volatile
  3636                           
  3637                           ;UART_Driver.c: 77: }
  3638                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3639  0015C8  50AB               	movf	4011,w,c	;volatile
  3640                           
  3641                           ;UART_Driver.c: 80: }
  3642                           ;UART_Driver.c: 81: return RCREG;
  3643  0015CA  50AE               	movf	4014,w,c	;volatile
  3644  0015CC  0012               	return	
  3645  0015CE                     __end_of_readByte:
  3646                           	opt stack 0
  3647                           pclatu	equ	0xFFB
  3648                           pclath	equ	0xFFA
  3649                           tblptru	equ	0xFF8
  3650                           tblptrh	equ	0xFF7
  3651                           tblptrl	equ	0xFF6
  3652                           tablat	equ	0xFF5
  3653                           prodh	equ	0xFF4
  3654                           prodl	equ	0xFF3
  3655                           intcon	equ	0xFF2
  3656                           intcon2	equ	0xFF1
  3657                           indf0	equ	0xFEF
  3658                           postinc0	equ	0xFEE
  3659                           plusw0	equ	0xFEB
  3660                           fsr0h	equ	0xFEA
  3661                           fsr0l	equ	0xFE9
  3662                           wreg	equ	0xFE8
  3663                           indf1	equ	0xFE7
  3664                           postinc1	equ	0xFE6
  3665                           postdec1	equ	0xFE5
  3666                           fsr1h	equ	0xFE2
  3667                           fsr1l	equ	0xFE1
  3668                           bsr	equ	0xFE0
  3669                           indf2	equ	0xFDF
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           plusw2	equ	0xFDB
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _fillDataBuffer *****************
  3678 ;; Defined at:
  3679 ;;		line 84 in file "Drivers/UART_Driver.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  data            1    wreg     unsigned char 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  data            1   38[COMRAM] unsigned char 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      void 
  3686 ;; Registers used:
  3687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0
  3694 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3696 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3697 ;;Total ram usage:        1 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    5
  3700 ;; This function calls:
  3701 ;;		_acknowledge
  3702 ;; This function is called by:
  3703 ;;		_LowISR
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text22
  3708  00083E                     __ptext22:
  3709                           	opt stack 0
  3710  00083E                     _fillDataBuffer:
  3711                           	opt stack 19
  3712                           
  3713                           ;incstack = 0
  3714                           ;fillDataBuffer@data stored from wreg
  3715  00083E  6E27               	movwf	fillDataBuffer@data,c
  3716                           
  3717                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3718  000840  D0B5               	goto	i1l126
  3719  000842                     
  3720                           ;UART_Driver.c: 87: if(data == 0x26) {
  3721  000842  0E26               	movlw	38
  3722  000844  1827               	xorwf	fillDataBuffer@data,w,c
  3723  000846  A4D8               	btfss	status,2,c
  3724  000848  D010               	goto	i1l128
  3725                           
  3726                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3727  00084A  0E00               	movlw	0
  3728  00084C  0101               	movlb	1	; () banked
  3729  00084E  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3730                           
  3731                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3732  000850  0E00               	movlw	0
  3733  000852  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3734                           
  3735                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3736  000854  0E00               	movlw	0
  3737  000856  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3738                           
  3739                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3740  000858  0E00               	movlw	0
  3741  00085A  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3742                           
  3743                           ;UART_Driver.c: 92: readReady = 0;
  3744  00085C  0E00               	movlw	0
  3745  00085E  0100               	movlb	0	; () banked
  3746  000860  6F9F               	movwf	_readReady& (0+255),b
  3747                           
  3748                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3749  000862  0E01               	movlw	1
  3750  000864  0101               	movlb	1	; () banked
  3751  000866  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3752                           
  3753                           ;UART_Driver.c: 94: } else {
  3754  000868  0012               	return	
  3755  00086A                     i1l128:
  3756                           
  3757                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3758                           
  3759                           ; BSR set to: 1
  3760  00086A  0E00               	movlw	0
  3761  00086C  0101               	movlb	1	; () banked
  3762  00086E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3763                           
  3764                           ; BSR set to: 1
  3765                           ;UART_Driver.c: 97: }
  3766                           ;UART_Driver.c: 98: break;
  3767                           
  3768                           ; BSR set to: 1
  3769                           ;UART_Driver.c: 96: return;
  3770  000870  0012               	return	
  3771  000872                     
  3772                           ; BSR set to: 1
  3773                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3774                           
  3775                           ; BSR set to: 1
  3776  000872  0E3A               	movlw	58
  3777  000874  1827               	xorwf	fillDataBuffer@data,w,c
  3778  000876  A4D8               	btfss	status,2,c
  3779  000878  D00D               	goto	i1l133
  3780                           
  3781                           ; BSR set to: 1
  3782                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3783  00087A  0E02               	movlw	2
  3784  00087C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3785                           
  3786                           ; BSR set to: 1
  3787                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3788  00087E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3789  000880  0D01               	mullw	1
  3790  000882  0E00               	movlw	low _readBuffer
  3791  000884  24F3               	addwf	prodl,w,c
  3792  000886  6ED9               	movwf	fsr2l,c
  3793  000888  0E01               	movlw	high _readBuffer
  3794  00088A  20F4               	addwfc	prodh,w,c
  3795  00088C  6EDA               	movwf	fsr2h,c
  3796  00088E  0E00               	movlw	0
  3797  000890  6EDF               	movwf	indf2,c
  3798                           
  3799                           ;UART_Driver.c: 104: } else {
  3800  000892  0012               	return	
  3801  000894                     i1l133:
  3802                           
  3803                           ; BSR set to: 1
  3804                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3805                           
  3806                           ; BSR set to: 1
  3807  000894  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3808  000896  0D01               	mullw	1
  3809  000898  0E00               	movlw	low _readBuffer
  3810  00089A  24F3               	addwf	prodl,w,c
  3811  00089C  6ED9               	movwf	fsr2l,c
  3812  00089E  0E01               	movlw	high _readBuffer
  3813  0008A0  20F4               	addwfc	prodh,w,c
  3814  0008A2  6EDA               	movwf	fsr2h,c
  3815  0008A4  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3816                           
  3817                           ; BSR set to: 1
  3818                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3819  0008A8  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3820                           
  3821                           ; BSR set to: 1
  3822                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3823  0008AA  0E0A               	movlw	10
  3824  0008AC  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3825  0008AE  0012               	return	
  3826                           
  3827                           ; BSR set to: 1
  3828                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3829  0008B0  0E00               	movlw	0
  3830  0008B2  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3831                           
  3832                           ; BSR set to: 1
  3833                           ;UART_Driver.c: 109: }
  3834                           ;UART_Driver.c: 110: }
  3835                           ;UART_Driver.c: 111: break;
  3836                           
  3837                           ; BSR set to: 1
  3838  0008B4  0012               	return	
  3839  0008B6                     
  3840                           ; BSR set to: 1
  3841                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3842                           
  3843                           ; BSR set to: 1
  3844  0008B6  0E3A               	movlw	58
  3845  0008B8  1827               	xorwf	fillDataBuffer@data,w,c
  3846  0008BA  A4D8               	btfss	status,2,c
  3847  0008BC  D00D               	goto	i1l137
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3851  0008BE  0E03               	movlw	3
  3852  0008C0  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3853                           
  3854                           ; BSR set to: 1
  3855                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3856  0008C2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3857  0008C4  0D01               	mullw	1
  3858  0008C6  0E0B               	movlw	low (_readBuffer+11)
  3859  0008C8  24F3               	addwf	prodl,w,c
  3860  0008CA  6ED9               	movwf	fsr2l,c
  3861  0008CC  0E01               	movlw	high (_readBuffer+11)
  3862  0008CE  20F4               	addwfc	prodh,w,c
  3863  0008D0  6EDA               	movwf	fsr2h,c
  3864  0008D2  0E00               	movlw	0
  3865  0008D4  6EDF               	movwf	indf2,c
  3866                           
  3867                           ;UART_Driver.c: 117: } else {
  3868  0008D6  0012               	return	
  3869  0008D8                     i1l137:
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3873                           
  3874                           ; BSR set to: 1
  3875  0008D8  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3876  0008DA  0D01               	mullw	1
  3877  0008DC  0E0B               	movlw	low (_readBuffer+11)
  3878  0008DE  24F3               	addwf	prodl,w,c
  3879  0008E0  6ED9               	movwf	fsr2l,c
  3880  0008E2  0E01               	movlw	high (_readBuffer+11)
  3881  0008E4  20F4               	addwfc	prodh,w,c
  3882  0008E6  6EDA               	movwf	fsr2h,c
  3883  0008E8  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3884                           
  3885                           ; BSR set to: 1
  3886                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3887  0008EC  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3888                           
  3889                           ; BSR set to: 1
  3890                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3891  0008EE  0E32               	movlw	50
  3892  0008F0  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3893  0008F2  0012               	return	
  3894                           
  3895                           ; BSR set to: 1
  3896                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3897  0008F4  0E00               	movlw	0
  3898  0008F6  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3899                           
  3900                           ; BSR set to: 1
  3901                           ;UART_Driver.c: 122: }
  3902                           ;UART_Driver.c: 123: }
  3903                           ;UART_Driver.c: 124: break;
  3904                           
  3905                           ; BSR set to: 1
  3906  0008F8  0012               	return	
  3907  0008FA                     
  3908                           ; BSR set to: 1
  3909                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3910                           
  3911                           ; BSR set to: 1
  3912  0008FA  0E3A               	movlw	58
  3913  0008FC  1827               	xorwf	fillDataBuffer@data,w,c
  3914  0008FE  A4D8               	btfss	status,2,c
  3915  000900  D00D               	goto	i1l141
  3916                           
  3917                           ; BSR set to: 1
  3918                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3919  000902  0E04               	movlw	4
  3920  000904  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3921                           
  3922                           ; BSR set to: 1
  3923                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3924  000906  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3925  000908  0D01               	mullw	1
  3926  00090A  0E3E               	movlw	low (_readBuffer+62)
  3927  00090C  24F3               	addwf	prodl,w,c
  3928  00090E  6ED9               	movwf	fsr2l,c
  3929  000910  0E01               	movlw	high (_readBuffer+62)
  3930  000912  20F4               	addwfc	prodh,w,c
  3931  000914  6EDA               	movwf	fsr2h,c
  3932  000916  0E00               	movlw	0
  3933  000918  6EDF               	movwf	indf2,c
  3934                           
  3935                           ;UART_Driver.c: 130: } else {
  3936  00091A  0012               	return	
  3937  00091C                     i1l141:
  3938                           
  3939                           ; BSR set to: 1
  3940                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  3941                           
  3942                           ; BSR set to: 1
  3943  00091C  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3944  00091E  0D01               	mullw	1
  3945  000920  0E3E               	movlw	low (_readBuffer+62)
  3946  000922  24F3               	addwf	prodl,w,c
  3947  000924  6ED9               	movwf	fsr2l,c
  3948  000926  0E01               	movlw	high (_readBuffer+62)
  3949  000928  20F4               	addwfc	prodh,w,c
  3950  00092A  6EDA               	movwf	fsr2h,c
  3951  00092C  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3952                           
  3953                           ; BSR set to: 1
  3954                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  3955  000930  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  3956                           
  3957                           ; BSR set to: 1
  3958                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  3959  000932  0E32               	movlw	50
  3960  000934  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  3961  000936  0012               	return	
  3962                           
  3963                           ; BSR set to: 1
  3964                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  3965  000938  0E00               	movlw	0
  3966  00093A  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3967                           
  3968                           ; BSR set to: 1
  3969                           ;UART_Driver.c: 135: }
  3970                           ;UART_Driver.c: 136: }
  3971                           ;UART_Driver.c: 137: break;
  3972                           
  3973                           ; BSR set to: 1
  3974  00093C  0012               	return	
  3975  00093E                     
  3976                           ; BSR set to: 1
  3977                           ;UART_Driver.c: 140: if (data == 0x3A) {
  3978                           
  3979                           ; BSR set to: 1
  3980  00093E  0E3A               	movlw	58
  3981  000940  1827               	xorwf	fillDataBuffer@data,w,c
  3982  000942  A4D8               	btfss	status,2,c
  3983  000944  D00D               	goto	i1l145
  3984                           
  3985                           ; BSR set to: 1
  3986                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  3987  000946  0E05               	movlw	5
  3988  000948  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3989                           
  3990                           ; BSR set to: 1
  3991                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  3992  00094A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  3993  00094C  0D01               	mullw	1
  3994  00094E  0E71               	movlw	low (_readBuffer+113)
  3995  000950  24F3               	addwf	prodl,w,c
  3996  000952  6ED9               	movwf	fsr2l,c
  3997  000954  0E01               	movlw	high (_readBuffer+113)
  3998  000956  20F4               	addwfc	prodh,w,c
  3999  000958  6EDA               	movwf	fsr2h,c
  4000  00095A  0E00               	movlw	0
  4001  00095C  6EDF               	movwf	indf2,c
  4002                           
  4003                           ;UART_Driver.c: 143: } else {
  4004  00095E  0012               	return	
  4005  000960                     i1l145:
  4006                           
  4007                           ; BSR set to: 1
  4008                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4009                           
  4010                           ; BSR set to: 1
  4011  000960  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4012  000962  0D01               	mullw	1
  4013  000964  0E71               	movlw	low (_readBuffer+113)
  4014  000966  24F3               	addwf	prodl,w,c
  4015  000968  6ED9               	movwf	fsr2l,c
  4016  00096A  0E01               	movlw	high (_readBuffer+113)
  4017  00096C  20F4               	addwfc	prodh,w,c
  4018  00096E  6EDA               	movwf	fsr2h,c
  4019  000970  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4020                           
  4021                           ; BSR set to: 1
  4022                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4023  000974  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4024                           
  4025                           ; BSR set to: 1
  4026                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4027  000976  0E32               	movlw	50
  4028  000978  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4029  00097A  0012               	return	
  4030                           
  4031                           ; BSR set to: 1
  4032                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4033  00097C  0E00               	movlw	0
  4034  00097E  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;UART_Driver.c: 148: }
  4038                           ;UART_Driver.c: 149: }
  4039                           ;UART_Driver.c: 150: break;
  4040                           
  4041                           ; BSR set to: 1
  4042  000980  0012               	return	
  4043  000982                     
  4044                           ; BSR set to: 1
  4045                           ;UART_Driver.c: 153: if (data == 0x24) {
  4046                           
  4047                           ; BSR set to: 1
  4048  000982  0E24               	movlw	36
  4049  000984  1827               	xorwf	fillDataBuffer@data,w,c
  4050  000986  A4D8               	btfss	status,2,c
  4051  000988  D009               	goto	i1l149
  4052                           
  4053                           ; BSR set to: 1
  4054                           ;UART_Driver.c: 154: acknowledge();
  4055  00098A  EC68  F009         	call	_acknowledge	;wreg free
  4056                           
  4057                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4058  00098E  0E00               	movlw	0
  4059  000990  0101               	movlb	1	; () banked
  4060  000992  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;UART_Driver.c: 156: readReady = 1;
  4064  000994  0E01               	movlw	1
  4065  000996  0100               	movlb	0	; () banked
  4066  000998  6F9F               	movwf	_readReady& (0+255),b
  4067                           
  4068                           ;UART_Driver.c: 157: } else {
  4069  00099A  0012               	return	
  4070  00099C                     i1l149:
  4071                           
  4072                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4073                           
  4074                           ; BSR set to: 0
  4075  00099C  5027               	movf	fillDataBuffer@data,w,c
  4076  00099E  0FD0               	addlw	208
  4077  0009A0  0101               	movlb	1	; () banked
  4078  0009A2  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4079                           
  4080                           ; BSR set to: 1
  4081                           ;UART_Driver.c: 160: }
  4082                           ;UART_Driver.c: 161: break;
  4083  0009A4  0012               	return	
  4084  0009A6                     
  4085                           ; BSR set to: 1
  4086                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4087                           
  4088                           ; BSR set to: 1
  4089  0009A6  0E00               	movlw	0
  4090  0009A8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4091                           
  4092                           ; BSR set to: 1
  4093                           ;UART_Driver.c: 166: }
  4094                           
  4095                           ;UART_Driver.c: 165: break;
  4096  0009AA  0012               	return	
  4097  0009AC                     i1l126:
  4098                           
  4099                           ; BSR set to: 1
  4100  0009AC  0101               	movlb	1	; () banked
  4101  0009AE  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4102                           
  4103                           ; Switch size 1, requested type "space"
  4104                           ; Number of cases is 6, Range of values is 0 to 5
  4105                           ; switch strategies available:
  4106                           ; Name         Instructions Cycles
  4107                           ; simple_byte           19    10 (average)
  4108                           ;	Chosen strategy is simple_byte
  4109  0009B0  0A00               	xorlw	0	; case 0
  4110  0009B2  B4D8               	btfsc	status,2,c
  4111  0009B4  D746               	goto	i1l127
  4112  0009B6  0A01               	xorlw	1	; case 1
  4113  0009B8  B4D8               	btfsc	status,2,c
  4114  0009BA  D75B               	goto	i1l132
  4115  0009BC  0A03               	xorlw	3	; case 2
  4116  0009BE  B4D8               	btfsc	status,2,c
  4117  0009C0  D77A               	goto	i1l136
  4118  0009C2  0A01               	xorlw	1	; case 3
  4119  0009C4  B4D8               	btfsc	status,2,c
  4120  0009C6  D799               	goto	i1l140
  4121  0009C8  0A07               	xorlw	7	; case 4
  4122  0009CA  B4D8               	btfsc	status,2,c
  4123  0009CC  D7B8               	goto	i1l144
  4124  0009CE  0A01               	xorlw	1	; case 5
  4125  0009D0  B4D8               	btfsc	status,2,c
  4126  0009D2  D7D7               	goto	i1l148
  4127  0009D4  D7E8               	goto	i1l151
  4128  0009D6                     __end_of_fillDataBuffer:
  4129                           	opt stack 0
  4130                           pclatu	equ	0xFFB
  4131                           pclath	equ	0xFFA
  4132                           tblptru	equ	0xFF8
  4133                           tblptrh	equ	0xFF7
  4134                           tblptrl	equ	0xFF6
  4135                           tablat	equ	0xFF5
  4136                           prodh	equ	0xFF4
  4137                           prodl	equ	0xFF3
  4138                           intcon	equ	0xFF2
  4139                           intcon2	equ	0xFF1
  4140                           indf0	equ	0xFEF
  4141                           postinc0	equ	0xFEE
  4142                           plusw0	equ	0xFEB
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           indf1	equ	0xFE7
  4147                           postinc1	equ	0xFE6
  4148                           postdec1	equ	0xFE5
  4149                           fsr1h	equ	0xFE2
  4150                           fsr1l	equ	0xFE1
  4151                           bsr	equ	0xFE0
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           plusw2	equ	0xFDB
  4156                           fsr2h	equ	0xFDA
  4157                           fsr2l	equ	0xFD9
  4158                           status	equ	0xFD8
  4159                           
  4160 ;; *************** function _acknowledge *****************
  4161 ;; Defined at:
  4162 ;;		line 169 in file "Drivers/UART_Driver.c"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;		None
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4176 ;;      Params:         0       0       0       0       0       0       0       0       0
  4177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4179 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4180 ;;Total ram usage:        0 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:    4
  4183 ;; This function calls:
  4184 ;;		i1_printf
  4185 ;; This function is called by:
  4186 ;;		_fillDataBuffer
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           	psect	text23
  4191  0012D0                     __ptext23:
  4192                           	opt stack 0
  4193  0012D0                     _acknowledge:
  4194                           	opt stack 19
  4195                           
  4196                           ;UART_Driver.c: 170: printf(startCharacter);
  4197                           
  4198                           ;incstack = 0
  4199  0012D0  C041  F01A         	movff	_startCharacter,i1printf@f
  4200  0012D4  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4201  0012D8  501A               	movf	i1printf@f,w,c
  4202  0012DA  101B               	iorwf	i1printf@f+1,w,c
  4203  0012DC  A4D8               	btfss	status,2,c
  4204  0012DE  0E00               	movlw	low (__mediumconst shr (0+16))
  4205  0012E0  6E1C               	movwf	i1printf@f+2,c
  4206  0012E2  EC98  F005         	call	i1_printf	;wreg free
  4207                           
  4208                           ;UART_Driver.c: 172: printf(ackCharacter);
  4209  0012E6  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4210  0012EA  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4211  0012EE  501A               	movf	i1printf@f,w,c
  4212  0012F0  101B               	iorwf	i1printf@f+1,w,c
  4213  0012F2  A4D8               	btfss	status,2,c
  4214  0012F4  0E00               	movlw	low (__mediumconst shr (0+16))
  4215  0012F6  6E1C               	movwf	i1printf@f+2,c
  4216  0012F8  EC98  F005         	call	i1_printf	;wreg free
  4217                           
  4218                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4219  0012FC  0E28               	movlw	low STR_5
  4220  0012FE  6E1A               	movwf	i1printf@f,c
  4221  001300  0E08               	movlw	high STR_5
  4222  001302  6E1B               	movwf	i1printf@f+1,c
  4223  001304  501A               	movf	i1printf@f,w,c
  4224  001306  101B               	iorwf	i1printf@f+1,w,c
  4225  001308  A4D8               	btfss	status,2,c
  4226  00130A  0E00               	movlw	low (__mediumconst shr (0+16))
  4227  00130C  6E1C               	movwf	i1printf@f+2,c
  4228  00130E  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4229  001312  6A1E               	clrf	?i1_printf+4,c
  4230  001314  EC98  F005         	call	i1_printf	;wreg free
  4231                           
  4232                           ;UART_Driver.c: 176: printf(stopCharacter);
  4233  001318  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4234  00131C  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4235  001320  501A               	movf	i1printf@f,w,c
  4236  001322  101B               	iorwf	i1printf@f+1,w,c
  4237  001324  A4D8               	btfss	status,2,c
  4238  001326  0E00               	movlw	low (__mediumconst shr (0+16))
  4239  001328  6E1C               	movwf	i1printf@f+2,c
  4240  00132A  EC98  F005         	call	i1_printf	;wreg free
  4241  00132E  0012               	return		;funcret
  4242  001330                     __end_of_acknowledge:
  4243                           	opt stack 0
  4244                           pclatu	equ	0xFFB
  4245                           pclath	equ	0xFFA
  4246                           tblptru	equ	0xFF8
  4247                           tblptrh	equ	0xFF7
  4248                           tblptrl	equ	0xFF6
  4249                           tablat	equ	0xFF5
  4250                           prodh	equ	0xFF4
  4251                           prodl	equ	0xFF3
  4252                           intcon	equ	0xFF2
  4253                           intcon2	equ	0xFF1
  4254                           indf0	equ	0xFEF
  4255                           postinc0	equ	0xFEE
  4256                           plusw0	equ	0xFEB
  4257                           fsr0h	equ	0xFEA
  4258                           fsr0l	equ	0xFE9
  4259                           wreg	equ	0xFE8
  4260                           indf1	equ	0xFE7
  4261                           postinc1	equ	0xFE6
  4262                           postdec1	equ	0xFE5
  4263                           fsr1h	equ	0xFE2
  4264                           fsr1l	equ	0xFE1
  4265                           bsr	equ	0xFE0
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           plusw2	equ	0xFDB
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function i1_printf *****************
  4275 ;; Defined at:
  4276 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4279 ;;		 -> STR_15(2), STR_14(2), STR_10(6), STR_9(2), 
  4280 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  4281 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  4282 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  printf          4    0        struct .
  4285 ;;  printf          3    0        PTR const unsigned char 
  4286 ;;  printf          2   34[COMRAM] unsigned int 
  4287 ;;  printf          2   31[COMRAM] PTR void [1]
  4288 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4289 ;;  printf          2    0        unsigned int 
  4290 ;;  printf          1   37[COMRAM] char 
  4291 ;;  printf          1   36[COMRAM] char 
  4292 ;;  printf          1   33[COMRAM] unsigned char 
  4293 ;;  printf          1   30[COMRAM] unsigned char 
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  2   25[COMRAM] int 
  4296 ;; Registers used:
  4297 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4303 ;;      Params:         5       0       0       0       0       0       0       0       0
  4304 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4306 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4307 ;;Total ram usage:       13 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    3
  4310 ;; This function calls:
  4311 ;;		i1___lwdiv
  4312 ;;		i1_putch
  4313 ;; This function is called by:
  4314 ;;		_acknowledge
  4315 ;; This function uses a non-reentrant model
  4316 ;;
  4317                           
  4318                           	psect	text24
  4319  000B30                     __ptext24:
  4320                           	opt stack 0
  4321  000B30                     i1_printf:
  4322                           	opt stack 19
  4323                           
  4324                           ;doprnt.c: 466: va_list ap;
  4325                           ;doprnt.c: 499: signed char c;
  4326                           ;doprnt.c: 506: signed char prec;
  4327                           ;doprnt.c: 508: unsigned char flag;
  4328                           ;doprnt.c: 523: union {
  4329                           ;doprnt.c: 524: unsigned long vd;
  4330                           ;doprnt.c: 525: double integ;
  4331                           ;doprnt.c: 526: } tmpval;
  4332                           ;doprnt.c: 528: unsigned int val;
  4333                           ;doprnt.c: 529: unsigned len;
  4334                           ;doprnt.c: 530: const char * cp;
  4335                           ;doprnt.c: 533: *ap = __va_start();
  4336                           
  4337                           ;incstack = 0
  4338  000B30  0E1D               	movlw	low (?i1_printf+3)
  4339  000B32  6E20               	movwf	i1printf@ap,c
  4340  000B34  0E00               	movlw	high (?i1_printf+3)
  4341  000B36  6E21               	movwf	i1printf@ap+1,c
  4342                           
  4343                           ;doprnt.c: 536: while(c = *f++) {
  4344  000B38  D085               	goto	i1u95_20
  4345  000B3A                     
  4346                           ;doprnt.c: 538: if(c != '%')
  4347  000B3A  0E25               	movlw	37
  4348  000B3C  1826               	xorwf	i1printf@c,w,c
  4349  000B3E  B4D8               	btfsc	status,2,c
  4350  000B40  D004               	goto	i1l267
  4351                           
  4352                           ;doprnt.c: 540: {
  4353                           ;doprnt.c: 541: (putch(c) );
  4354  000B42  5026               	movf	i1printf@c,w,c
  4355  000B44  ECDE  F00A         	call	i1_putch
  4356                           
  4357                           ;doprnt.c: 542: continue;
  4358  000B48  D07D               	goto	i1u95_20
  4359  000B4A                     i1l267:
  4360                           
  4361                           ;doprnt.c: 543: }
  4362                           ;doprnt.c: 548: flag = 0;
  4363  000B4A  0E00               	movlw	0
  4364  000B4C  6E1F               	movwf	i1printf@flag,c
  4365                           
  4366                           ;doprnt.c: 635: switch(c = *f++) {
  4367  000B4E  D004               	goto	i1l268
  4368  000B50                     
  4369                           ;doprnt.c: 809: (putch(c) );
  4370  000B50  5026               	movf	i1printf@c,w,c
  4371  000B52  ECDE  F00A         	call	i1_putch
  4372                           
  4373                           ;doprnt.c: 810: continue;
  4374  000B56  D076               	goto	i1u95_20
  4375  000B58                     i1l268:
  4376  000B58  C01A  FFF6         	movff	i1printf@f,tblptrl
  4377  000B5C  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4378  000B60  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4379  000B64  0E01               	movlw	1
  4380  000B66  261A               	addwf	i1printf@f,f,c
  4381  000B68  0E00               	movlw	0
  4382  000B6A  221B               	addwfc	i1printf@f+1,f,c
  4383  000B6C  221C               	addwfc	i1printf@f+2,f,c
  4384  000B6E  BAF8               	btfsc	tblptru,5,c
  4385  000B70  D003               	bra	i1u91_27
  4386  000B72  0008               	tblrd		*
  4387  000B74  50F5               	movf	tablat,w,c
  4388  000B76  D005               	bra	i1u91_20
  4389  000B78                     i1u91_27:
  4390  000B78  CFF6 FFE9          	movff	tblptrl,fsr0l
  4391  000B7C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4392  000B80  50EF               	movf	indf0,w,c
  4393  000B82                     i1u91_20:
  4394  000B82  6E26               	movwf	i1printf@c,c
  4395  000B84  5026               	movf	i1printf@c,w,c
  4396                           
  4397                           ; Switch size 1, requested type "space"
  4398                           ; Number of cases is 2, Range of values is 0 to 120
  4399                           ; switch strategies available:
  4400                           ; Name         Instructions Cycles
  4401                           ; simple_byte            7     4 (average)
  4402                           ;	Chosen strategy is simple_byte
  4403  000B86  0A00               	xorlw	0	; case 0
  4404  000B88  B4D8               	btfsc	status,2,c
  4405  000B8A  0012               	return	
  4406  000B8C  0A78               	xorlw	120	; case 120
  4407  000B8E  A4D8               	btfss	status,2,c
  4408  000B90  D7DF               	goto	i1l273
  4409                           
  4410                           ;doprnt.c: 1273: {
  4411                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4412  000B92  C020  FFD9         	movff	i1printf@ap,fsr2l
  4413  000B96  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4414  000B9A  CFDE F023          	movff	postinc2,i1printf@val
  4415  000B9E  CFDD F024          	movff	postdec2,i1printf@val+1
  4416  000BA2  0E02               	movlw	2
  4417  000BA4  2620               	addwf	i1printf@ap,f,c
  4418  000BA6  0E00               	movlw	0
  4419  000BA8  2221               	addwfc	i1printf@ap+1,f,c
  4420                           
  4421                           ;doprnt.c: 1287: }
  4422                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4423  000BAA  0E01               	movlw	1
  4424  000BAC  6E26               	movwf	i1printf@c,c
  4425  000BAE  D014               	goto	i1l1539
  4426  000BB0                     
  4427                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4428  000BB0  5026               	movf	i1printf@c,w,c
  4429  000BB2  0D02               	mullw	2
  4430  000BB4  0E01               	movlw	low _hexpowers
  4431  000BB6  24F3               	addwf	prodl,w,c
  4432  000BB8  6EF6               	movwf	tblptrl,c
  4433  000BBA  0E08               	movlw	high _hexpowers
  4434  000BBC  20F4               	addwfc	prodh,w,c
  4435  000BBE  6EF7               	movwf	tblptrh,c
  4436  000BC0                     	if	1	;There are 3 active tblptr bytes
  4437  000BC0  6AF8               	clrf	tblptru,c
  4438  000BC2  0E00               	movlw	low (__mediumconst shr (0+16))
  4439  000BC4  22F8               	addwfc	tblptru,f,c
  4440  000BC6                     	endif
  4441  000BC6  0009               	tblrd		*+
  4442  000BC8  50F5               	movf	tablat,w,c
  4443  000BCA  5C23               	subwf	i1printf@val,w,c
  4444  000BCC  0009               	tblrd		*+
  4445  000BCE  50F5               	movf	tablat,w,c
  4446  000BD0  5824               	subwfb	i1printf@val+1,w,c
  4447  000BD2  A0D8               	btfss	status,0,c
  4448  000BD4  D005               	goto	i1u94_20
  4449                           
  4450                           ;doprnt.c: 1318: break;
  4451  000BD6  2A26               	incf	i1printf@c,f,c
  4452  000BD8                     i1l1539:
  4453  000BD8  0E04               	movlw	4
  4454  000BDA  1826               	xorwf	i1printf@c,w,c
  4455  000BDC  A4D8               	btfss	status,2,c
  4456  000BDE  D7E8               	goto	i1l274
  4457  000BE0                     i1u94_20:
  4458                           
  4459                           ;doprnt.c: 1422: {
  4460                           ;doprnt.c: 1469: }
  4461                           ;doprnt.c: 1472: prec = c;
  4462  000BE0  C026  F025         	movff	i1printf@c,i1printf@prec
  4463                           
  4464                           ;doprnt.c: 1474: while(prec--) {
  4465  000BE4  D02B               	goto	i1l277
  4466  000BE6                     
  4467                           ;doprnt.c: 1478: {
  4468                           ;doprnt.c: 1499: {
  4469                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4470  000BE6  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4471  000BEA  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4472  000BEE  5025               	movf	i1printf@prec,w,c
  4473  000BF0  0D02               	mullw	2
  4474  000BF2  0E01               	movlw	low _hexpowers
  4475  000BF4  24F3               	addwf	prodl,w,c
  4476  000BF6  6EF6               	movwf	tblptrl,c
  4477  000BF8  0E08               	movlw	high _hexpowers
  4478  000BFA  20F4               	addwfc	prodh,w,c
  4479  000BFC  6EF7               	movwf	tblptrh,c
  4480  000BFE                     	if	1	;There are 3 active tblptr bytes
  4481  000BFE  6AF8               	clrf	tblptru,c
  4482  000C00  0E00               	movlw	low (__mediumconst shr (0+16))
  4483  000C02  22F8               	addwfc	tblptru,f,c
  4484  000C04                     	endif
  4485  000C04  0009               	tblrd		*+
  4486  000C06  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4487  000C0A  000A               	tblrd		*-
  4488  000C0C  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4489  000C10  ECF0  F009         	call	i1___lwdiv	;wreg free
  4490  000C14  5013               	movf	?i1___lwdiv,w,c
  4491  000C16  0B0F               	andlw	15
  4492  000C18  6E22               	movwf	i1printf@idx,c
  4493                           
  4494                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4495  000C1A  5022               	movf	i1printf@idx,w,c
  4496  000C1C  0D01               	mullw	1
  4497  000C1E  0E09               	movlw	low STR_16
  4498  000C20  24F3               	addwf	prodl,w,c
  4499  000C22  6EF6               	movwf	tblptrl,c
  4500  000C24  0E08               	movlw	high STR_16
  4501  000C26  20F4               	addwfc	prodh,w,c
  4502  000C28  6EF7               	movwf	tblptrh,c
  4503  000C2A                     	if	1	;There are 3 active tblptr bytes
  4504  000C2A  6AF8               	clrf	tblptru,c
  4505  000C2C  0E00               	movlw	low (__mediumconst shr (0+16))
  4506  000C2E  22F8               	addwfc	tblptru,f,c
  4507  000C30                     	endif
  4508  000C30  0008               	tblrd		*
  4509  000C32  CFF5 F026          	movff	tablat,i1printf@c
  4510                           
  4511                           ;doprnt.c: 1508: }
  4512                           ;doprnt.c: 1523: }
  4513                           ;doprnt.c: 1524: (putch(c) );
  4514  000C36  5026               	movf	i1printf@c,w,c
  4515  000C38  ECDE  F00A         	call	i1_putch
  4516  000C3C                     i1l277:
  4517  000C3C  0625               	decf	i1printf@prec,f,c
  4518  000C3E  2825               	incf	i1printf@prec,w,c
  4519  000C40  A4D8               	btfss	status,2,c
  4520  000C42  D7D1               	goto	i1l278
  4521  000C44                     i1u95_20:
  4522  000C44  C01A  FFF6         	movff	i1printf@f,tblptrl
  4523  000C48  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4524  000C4C  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4525  000C50  0E01               	movlw	1
  4526  000C52  261A               	addwf	i1printf@f,f,c
  4527  000C54  0E00               	movlw	0
  4528  000C56  221B               	addwfc	i1printf@f+1,f,c
  4529  000C58  221C               	addwfc	i1printf@f+2,f,c
  4530  000C5A  BAF8               	btfsc	tblptru,5,c
  4531  000C5C  D003               	bra	i1u96_27
  4532  000C5E  0008               	tblrd		*
  4533  000C60  50F5               	movf	tablat,w,c
  4534  000C62  D005               	bra	i1u96_20
  4535  000C64                     i1u96_27:
  4536  000C64  CFF6 FFE9          	movff	tblptrl,fsr0l
  4537  000C68  CFF7 FFEA          	movff	tblptrh,fsr0h
  4538  000C6C  50EF               	movf	indf0,w,c
  4539  000C6E                     i1u96_20:
  4540  000C6E  6E26               	movwf	i1printf@c,c
  4541  000C70  5026               	movf	i1printf@c,w,c
  4542  000C72  B4D8               	btfsc	status,2,c
  4543  000C74  0012               	return	
  4544  000C76  D761               	goto	i1l266
  4545  000C78                     __end_ofi1_printf:
  4546                           	opt stack 0
  4547                           pclatu	equ	0xFFB
  4548                           pclath	equ	0xFFA
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           intcon	equ	0xFF2
  4556                           intcon2	equ	0xFF1
  4557                           indf0	equ	0xFEF
  4558                           postinc0	equ	0xFEE
  4559                           plusw0	equ	0xFEB
  4560                           fsr0h	equ	0xFEA
  4561                           fsr0l	equ	0xFE9
  4562                           wreg	equ	0xFE8
  4563                           indf1	equ	0xFE7
  4564                           postinc1	equ	0xFE6
  4565                           postdec1	equ	0xFE5
  4566                           fsr1h	equ	0xFE2
  4567                           fsr1l	equ	0xFE1
  4568                           bsr	equ	0xFE0
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           plusw2	equ	0xFDB
  4573                           fsr2h	equ	0xFDA
  4574                           fsr2l	equ	0xFD9
  4575                           status	equ	0xFD8
  4576                           
  4577 ;; *************** function i1_putch *****************
  4578 ;; Defined at:
  4579 ;;		line 260 in file "Drivers/UART_Driver.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;  data            1    wreg     unsigned char 
  4582 ;; Auto vars:     Size  Location     Type
  4583 ;;  data            1   19[COMRAM] unsigned char 
  4584 ;; Return value:  Size  Location     Type
  4585 ;;                  1    wreg      void 
  4586 ;; Registers used:
  4587 ;;		wreg, status,2, cstack
  4588 ;; Tracked objects:
  4589 ;;		On entry : 0/0
  4590 ;;		On exit  : 0/0
  4591 ;;		Unchanged: 0/0
  4592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4593 ;;      Params:         0       0       0       0       0       0       0       0       0
  4594 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4596 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4597 ;;Total ram usage:        1 bytes
  4598 ;; Hardware stack levels used:    1
  4599 ;; Hardware stack levels required when called:    2
  4600 ;; This function calls:
  4601 ;;		i1_writeByte
  4602 ;; This function is called by:
  4603 ;;		i1_printf
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text25
  4608  0015BC                     __ptext25:
  4609                           	opt stack 0
  4610  0015BC                     i1_putch:
  4611                           	opt stack 19
  4612                           
  4613                           ;incstack = 0
  4614                           ;i1putch@data stored from wreg
  4615  0015BC  6E14               	movwf	i1putch@data,c
  4616                           
  4617                           ;UART_Driver.c: 261: writeByte(data);
  4618  0015BE  5014               	movf	i1putch@data,w,c
  4619  0015C0  ECD8  F00A         	call	i1_writeByte
  4620  0015C4  0012               	return		;funcret
  4621  0015C6                     __end_ofi1_putch:
  4622                           	opt stack 0
  4623                           pclatu	equ	0xFFB
  4624                           pclath	equ	0xFFA
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           intcon2	equ	0xFF1
  4633                           indf0	equ	0xFEF
  4634                           postinc0	equ	0xFEE
  4635                           plusw0	equ	0xFEB
  4636                           fsr0h	equ	0xFEA
  4637                           fsr0l	equ	0xFE9
  4638                           wreg	equ	0xFE8
  4639                           indf1	equ	0xFE7
  4640                           postinc1	equ	0xFE6
  4641                           postdec1	equ	0xFE5
  4642                           fsr1h	equ	0xFE2
  4643                           fsr1l	equ	0xFE1
  4644                           bsr	equ	0xFE0
  4645                           indf2	equ	0xFDF
  4646                           postinc2	equ	0xFDE
  4647                           postdec2	equ	0xFDD
  4648                           plusw2	equ	0xFDB
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function i1_writeByte *****************
  4654 ;; Defined at:
  4655 ;;		line 69 in file "Drivers/UART_Driver.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  data            1    wreg     unsigned char 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  data            1   18[COMRAM] unsigned char 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;                  1    wreg      void 
  4662 ;; Registers used:
  4663 ;;		wreg
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4669 ;;      Params:         0       0       0       0       0       0       0       0       0
  4670 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4671 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4672 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4673 ;;Total ram usage:        1 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; Hardware stack levels required when called:    1
  4676 ;; This function calls:
  4677 ;;		Nothing
  4678 ;; This function is called by:
  4679 ;;		i1_putch
  4680 ;; This function uses a non-reentrant model
  4681 ;;
  4682                           
  4683                           	psect	text26
  4684  0015B0                     __ptext26:
  4685                           	opt stack 0
  4686  0015B0                     i1_writeByte:
  4687                           	opt stack 19
  4688                           
  4689                           ;incstack = 0
  4690                           ;i1writeByte@data stored from wreg
  4691  0015B0  6E13               	movwf	i1writeByte@data,c
  4692  0015B2                     
  4693                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4694  0015B2  A2AC               	btfss	4012,1,c	;volatile
  4695  0015B4  D7FE               	goto	i1l1415
  4696                           
  4697                           ;UART_Driver.c: 71: TXREG = data;
  4698  0015B6  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4699  0015BA  0012               	return		;funcret
  4700  0015BC                     __end_ofi1_writeByte:
  4701                           	opt stack 0
  4702                           pclatu	equ	0xFFB
  4703                           pclath	equ	0xFFA
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           intcon2	equ	0xFF1
  4712                           indf0	equ	0xFEF
  4713                           postinc0	equ	0xFEE
  4714                           plusw0	equ	0xFEB
  4715                           fsr0h	equ	0xFEA
  4716                           fsr0l	equ	0xFE9
  4717                           wreg	equ	0xFE8
  4718                           indf1	equ	0xFE7
  4719                           postinc1	equ	0xFE6
  4720                           postdec1	equ	0xFE5
  4721                           fsr1h	equ	0xFE2
  4722                           fsr1l	equ	0xFE1
  4723                           bsr	equ	0xFE0
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           plusw2	equ	0xFDB
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732 ;; *************** function i1___lwdiv *****************
  4733 ;; Defined at:
  4734 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  dividend        2   18[COMRAM] unsigned int 
  4737 ;;  divisor         2   20[COMRAM] unsigned int 
  4738 ;; Auto vars:     Size  Location     Type
  4739 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4740 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  2   18[COMRAM] unsigned int 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4750 ;;      Params:         4       0       0       0       0       0       0       0       0
  4751 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4753 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4754 ;;Total ram usage:        7 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    1
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		i1_printf
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text27
  4765  0013E0                     __ptext27:
  4766                           	opt stack 0
  4767  0013E0                     i1___lwdiv:
  4768                           	opt stack 20
  4769                           
  4770                           ;incstack = 0
  4771  0013E0  0E00               	movlw	0
  4772  0013E2  6E18               	movwf	i1___lwdiv@quotient+1,c
  4773  0013E4  0E00               	movlw	0
  4774  0013E6  6E17               	movwf	i1___lwdiv@quotient,c
  4775  0013E8  5015               	movf	i1___lwdiv@divisor,w,c
  4776  0013EA  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4777  0013EC  B4D8               	btfsc	status,2,c
  4778  0013EE  D01C               	goto	i1l690
  4779  0013F0  0E01               	movlw	1
  4780  0013F2  6E19               	movwf	i1___lwdiv@counter,c
  4781  0013F4  D004               	goto	i1l685
  4782  0013F6  90D8               	bcf	status,0,c
  4783  0013F8  3615               	rlcf	i1___lwdiv@divisor,f,c
  4784  0013FA  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4785  0013FC  2A19               	incf	i1___lwdiv@counter,f,c
  4786  0013FE                     i1l685:
  4787  0013FE  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4788  001400  D7FA               	goto	i1l686
  4789  001402                     i1u80_20:
  4790  001402  90D8               	bcf	status,0,c
  4791  001404  3617               	rlcf	i1___lwdiv@quotient,f,c
  4792  001406  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4793  001408  5015               	movf	i1___lwdiv@divisor,w,c
  4794  00140A  5C13               	subwf	i1___lwdiv@dividend,w,c
  4795  00140C  5016               	movf	i1___lwdiv@divisor+1,w,c
  4796  00140E  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4797  001410  A0D8               	btfss	status,0,c
  4798  001412  D005               	goto	i1l689
  4799  001414  5015               	movf	i1___lwdiv@divisor,w,c
  4800  001416  5E13               	subwf	i1___lwdiv@dividend,f,c
  4801  001418  5016               	movf	i1___lwdiv@divisor+1,w,c
  4802  00141A  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4803  00141C  8017               	bsf	i1___lwdiv@quotient,0,c
  4804  00141E                     i1l689:
  4805  00141E  90D8               	bcf	status,0,c
  4806  001420  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4807  001422  3215               	rrcf	i1___lwdiv@divisor,f,c
  4808  001424  2E19               	decfsz	i1___lwdiv@counter,f,c
  4809  001426  D7ED               	goto	i1u80_20
  4810  001428                     i1l690:
  4811  001428  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4812  00142C  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4813  001430  0012               	return		;funcret
  4814  001432                     __end_ofi1___lwdiv:
  4815                           	opt stack 0
  4816                           pclatu	equ	0xFFB
  4817                           pclath	equ	0xFFA
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           intcon2	equ	0xFF1
  4826                           indf0	equ	0xFEF
  4827                           postinc0	equ	0xFEE
  4828                           plusw0	equ	0xFEB
  4829                           fsr0h	equ	0xFEA
  4830                           fsr0l	equ	0xFE9
  4831                           wreg	equ	0xFE8
  4832                           indf1	equ	0xFE7
  4833                           postinc1	equ	0xFE6
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           bsr	equ	0xFE0
  4838                           indf2	equ	0xFDF
  4839                           postinc2	equ	0xFDE
  4840                           postdec2	equ	0xFDD
  4841                           plusw2	equ	0xFDB
  4842                           fsr2h	equ	0xFDA
  4843                           fsr2l	equ	0xFD9
  4844                           status	equ	0xFD8
  4845                           
  4846 ;; *************** function _HighISR *****************
  4847 ;; Defined at:
  4848 ;;		line 69 in file "main.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;		None
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;		None
  4853 ;; Return value:  Size  Location     Type
  4854 ;;                  1    wreg      void 
  4855 ;; Registers used:
  4856 ;;		wreg, status,2
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4862 ;;      Params:         0       0       0       0       0       0       0       0       0
  4863 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4864 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4865 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4866 ;;Total ram usage:       18 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		Interrupt level 2
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	intcode
  4876  000008                     __pintcode:
  4877                           	opt stack 0
  4878  000008                     _HighISR:
  4879                           	opt stack 19
  4880                           
  4881                           ;incstack = 0
  4882  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4883  00000A  EDD4  F008         	call	int_func,f	;refresh shadow registers
  4884                           pclatu	equ	0xFFB
  4885                           pclath	equ	0xFFA
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon2	equ	0xFF1
  4894                           indf0	equ	0xFEF
  4895                           postinc0	equ	0xFEE
  4896                           plusw0	equ	0xFEB
  4897                           fsr0h	equ	0xFEA
  4898                           fsr0l	equ	0xFE9
  4899                           wreg	equ	0xFE8
  4900                           indf1	equ	0xFE7
  4901                           postinc1	equ	0xFE6
  4902                           postdec1	equ	0xFE5
  4903                           fsr1h	equ	0xFE2
  4904                           fsr1l	equ	0xFE1
  4905                           bsr	equ	0xFE0
  4906                           indf2	equ	0xFDF
  4907                           postinc2	equ	0xFDE
  4908                           postdec2	equ	0xFDD
  4909                           plusw2	equ	0xFDB
  4910                           fsr2h	equ	0xFDA
  4911                           fsr2l	equ	0xFD9
  4912                           status	equ	0xFD8
  4913                           
  4914                           	psect	intcode_body
  4915  0011A8                     __pintcode_body:
  4916                           	opt stack 19
  4917  0011A8                     int_func:
  4918                           	opt stack 19
  4919  0011A8  0006               	pop		; remove dummy address from shadow register refresh
  4920  0011AA  CFFA F001          	movff	pclath,??_HighISR
  4921  0011AE  CFFB F002          	movff	pclatu,??_HighISR+1
  4922  0011B2  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4923  0011B6  CFEA F004          	movff	fsr0h,??_HighISR+3
  4924  0011BA  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4925  0011BE  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4926  0011C2  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4927  0011C6  CFDA F008          	movff	fsr2h,??_HighISR+7
  4928  0011CA  CFF3 F009          	movff	prodl,??_HighISR+8
  4929  0011CE  CFF4 F00A          	movff	prodh,??_HighISR+9
  4930  0011D2  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  4931  0011D6  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  4932  0011DA  CFF8 F00D          	movff	tblptru,??_HighISR+12
  4933  0011DE  CFF5 F00E          	movff	tablat,??_HighISR+13
  4934  0011E2  C044  F00F         	movff	btemp,??_HighISR+14
  4935  0011E6  C045  F010         	movff	btemp+1,??_HighISR+15
  4936  0011EA  C046  F011         	movff	btemp+2,??_HighISR+16
  4937  0011EE  C047  F012         	movff	btemp+3,??_HighISR+17
  4938                           
  4939                           ;main.c: 70: if (INTCONbits.TMR0IF) {
  4940  0011F2  A4F2               	btfss	intcon,2,c	;volatile
  4941  0011F4  D004               	goto	i2l253
  4942                           
  4943                           ;main.c: 71: tick = 1;
  4944  0011F6  0E01               	movlw	1
  4945  0011F8  0100               	movlb	0	; () banked
  4946  0011FA  6F9E               	movwf	_tick& (0+255),b
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;main.c: 72: INTCONbits.TMR0IF = 0;
  4950  0011FC  94F2               	bcf	intcon,2,c	;volatile
  4951  0011FE                     i2l253:
  4952                           
  4953                           ; BSR set to: 0
  4954  0011FE  C012  F047         	movff	??_HighISR+17,btemp+3
  4955  001202  C011  F046         	movff	??_HighISR+16,btemp+2
  4956  001206  C010  F045         	movff	??_HighISR+15,btemp+1
  4957  00120A  C00F  F044         	movff	??_HighISR+14,btemp
  4958  00120E  C00E  FFF5         	movff	??_HighISR+13,tablat
  4959  001212  C00D  FFF8         	movff	??_HighISR+12,tblptru
  4960  001216  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  4961  00121A  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  4962  00121E  C00A  FFF4         	movff	??_HighISR+9,prodh
  4963  001222  C009  FFF3         	movff	??_HighISR+8,prodl
  4964  001226  C008  FFDA         	movff	??_HighISR+7,fsr2h
  4965  00122A  C007  FFD9         	movff	??_HighISR+6,fsr2l
  4966  00122E  C006  FFE2         	movff	??_HighISR+5,fsr1h
  4967  001232  C005  FFE1         	movff	??_HighISR+4,fsr1l
  4968  001236  C004  FFEA         	movff	??_HighISR+3,fsr0h
  4969  00123A  C003  FFE9         	movff	??_HighISR+2,fsr0l
  4970  00123E  C002  FFFB         	movff	??_HighISR+1,pclatu
  4971  001242  C001  FFFA         	movff	??_HighISR,pclath
  4972  001246  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4973  001248  0011               	retfie		f
  4974  00124A                     __end_of_HighISR:
  4975                           	opt stack 0
  4976                           pclatu	equ	0xFFB
  4977                           pclath	equ	0xFFA
  4978                           tblptru	equ	0xFF8
  4979                           tblptrh	equ	0xFF7
  4980                           tblptrl	equ	0xFF6
  4981                           tablat	equ	0xFF5
  4982                           prodh	equ	0xFF4
  4983                           prodl	equ	0xFF3
  4984                           intcon	equ	0xFF2
  4985                           intcon2	equ	0xFF1
  4986                           indf0	equ	0xFEF
  4987                           postinc0	equ	0xFEE
  4988                           plusw0	equ	0xFEB
  4989                           fsr0h	equ	0xFEA
  4990                           fsr0l	equ	0xFE9
  4991                           wreg	equ	0xFE8
  4992                           indf1	equ	0xFE7
  4993                           postinc1	equ	0xFE6
  4994                           postdec1	equ	0xFE5
  4995                           fsr1h	equ	0xFE2
  4996                           fsr1l	equ	0xFE1
  4997                           bsr	equ	0xFE0
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           plusw2	equ	0xFDB
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           pclatu	equ	0xFFB
  5006                           pclath	equ	0xFFA
  5007                           tblptru	equ	0xFF8
  5008                           tblptrh	equ	0xFF7
  5009                           tblptrl	equ	0xFF6
  5010                           tablat	equ	0xFF5
  5011                           prodh	equ	0xFF4
  5012                           prodl	equ	0xFF3
  5013                           intcon	equ	0xFF2
  5014                           intcon2	equ	0xFF1
  5015                           indf0	equ	0xFEF
  5016                           postinc0	equ	0xFEE
  5017                           plusw0	equ	0xFEB
  5018                           fsr0h	equ	0xFEA
  5019                           fsr0l	equ	0xFE9
  5020                           wreg	equ	0xFE8
  5021                           indf1	equ	0xFE7
  5022                           postinc1	equ	0xFE6
  5023                           postdec1	equ	0xFE5
  5024                           fsr1h	equ	0xFE2
  5025                           fsr1l	equ	0xFE1
  5026                           bsr	equ	0xFE0
  5027                           indf2	equ	0xFDF
  5028                           postinc2	equ	0xFDE
  5029                           postdec2	equ	0xFDD
  5030                           plusw2	equ	0xFDB
  5031                           fsr2h	equ	0xFDA
  5032                           fsr2l	equ	0xFD9
  5033                           status	equ	0xFD8
  5034                           
  5035                           	psect	rparam
  5036  0000                     pclatu	equ	0xFFB
  5037                           pclath	equ	0xFFA
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           intcon	equ	0xFF2
  5045                           intcon2	equ	0xFF1
  5046                           indf0	equ	0xFEF
  5047                           postinc0	equ	0xFEE
  5048                           plusw0	equ	0xFEB
  5049                           fsr0h	equ	0xFEA
  5050                           fsr0l	equ	0xFE9
  5051                           wreg	equ	0xFE8
  5052                           indf1	equ	0xFE7
  5053                           postinc1	equ	0xFE6
  5054                           postdec1	equ	0xFE5
  5055                           fsr1h	equ	0xFE2
  5056                           fsr1l	equ	0xFE1
  5057                           bsr	equ	0xFE0
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           plusw2	equ	0xFDB
  5062                           fsr2h	equ	0xFDA
  5063                           fsr2l	equ	0xFD9
  5064                           status	equ	0xFD8
  5065                           
  5066                           	psect	temp
  5067  000044                     btemp:
  5068                           	opt stack 0
  5069  000044                     	ds	1
  5070  0000                     int$flags	set	btemp
  5071  0000                     wtemp6	set	btemp+1
  5072                           pclatu	equ	0xFFB
  5073                           pclath	equ	0xFFA
  5074                           tblptru	equ	0xFF8
  5075                           tblptrh	equ	0xFF7
  5076                           tblptrl	equ	0xFF6
  5077                           tablat	equ	0xFF5
  5078                           prodh	equ	0xFF4
  5079                           prodl	equ	0xFF3
  5080                           intcon	equ	0xFF2
  5081                           intcon2	equ	0xFF1
  5082                           indf0	equ	0xFEF
  5083                           postinc0	equ	0xFEE
  5084                           plusw0	equ	0xFEB
  5085                           fsr0h	equ	0xFEA
  5086                           fsr0l	equ	0xFE9
  5087                           wreg	equ	0xFE8
  5088                           indf1	equ	0xFE7
  5089                           postinc1	equ	0xFE6
  5090                           postdec1	equ	0xFE5
  5091                           fsr1h	equ	0xFE2
  5092                           fsr1l	equ	0xFE1
  5093                           bsr	equ	0xFE0
  5094                           indf2	equ	0xFDF
  5095                           postinc2	equ	0xFDE
  5096                           postdec2	equ	0xFDD
  5097                           plusw2	equ	0xFDB
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8


Data Sizes:
    Strings     52
    Constant    8
    Data        8
    BSS         231
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     33     102
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_10(CODE[6]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), ROM(CODE[32767]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_15(CODE[2]), STR_10(CODE[6]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_14(CODE[2]), STR_9(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6637
                                             31 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     547
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    8     8      0    2674
                                             23 BANK0      8     8      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     383
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2029
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F      20        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov 25 19:04:37 2017

                         l14 0DAC                           l42 104C                           l44 1102  
                         l37 1258                  __CFG_BOR$ON 000000                           bsr 000FE0  
                __CFG_BORV$3 000000                 _ackCharacter 003D                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l241 0D46                          l243 0D6A                          l340 0FD4  
                        l244 0D80                          l341 0FC8                          l237 0CDC  
                        l167 1516                          l239 0D20                          l344 1008  
                        l273 09FA                          l345 1016                          l337 0F8E  
                        l274 0A60                          l266 09E2                          l194 1574  
                        l346 102C                          l338 0FA6                          l267 09F2  
                        l268 0A02                          l277 0AEE                          l278 0A96  
                        l830 1484                          l690 13D6                          l685 13AC  
                        l829 148E                          l686 13A4                          l689 13CC  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          u830 0A2E  
                        u770 13B0                          u860 0A90                          u837 0A24  
                        u870 0AF8                          u880 0B24                          u981 0F06  
                        u887 0B1A                          u991 0F40                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000          __end_ofi1_writeByte 15BC  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1411 1598  
                       l1623 0DA4                         l1651 1044                         l1639 1250  
                       l1497 0A88                         STR_1 0839                         STR_2 0837  
                       STR_3 0824                         STR_4 0820                         STR_5 0828  
                       STR_6 083B                         STR_7 083B                         STR_8 0831  
                       STR_9 082D                         u1114 12C0                         u1050 0FD8  
                       u1115 12BC                         u1300 14C4                         u1151 109A  
                       u1411 0CF2                         u1281 14F4                         u1477 0CB4  
                       u1487 0F64                         u9811 0F04                         u9911 0F3E  
               ?_C_DOOR_Init 0001                         _baud 0043                         _main 0C78  
                       _read 0092                         _tick 009E                         fsr0h 000FEA  
                       fsr1h 000FE2                         indf0 000FEF                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0044  
                       prodh 000FF4                         prodl 000FF3                         start 00D4  
              __CFG_IESO$OFF 000000              __end_ofi1_putch 15C6              __end_of_HighISR 124A  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000               _startCharacter 0041  
              __CFG_PLLDIV$5 000000         commandAndMessage@com 00AA      __size_of_C_DOOR_LockAll 000E  
       commandAndMessage@mes 00AC              __end_of___aldiv 103E                        ?_main 0001  
                      STR_10 081A                        STR_11 082F                        STR_12 0835  
                      STR_13 0833                        STR_14 082B                        STR_15 0835  
                      STR_16 0809              __end_of___lwdiv 13E0                        i1l140 08FA  
                      i1l132 0872                        i1l141 091C                        i1l133 0894  
                      i1l126 09AC                        i1l151 09A6                        i1l127 0842  
                      i1l144 093E                        i1l136 08B6                        i1l128 086A  
                      i1l145 0960                        i1l137 08D8                        i1l148 0982  
                      i1l149 099C                        i1l273 0B50                        i1l177 007C  
                      i1l274 0BB0                        i1l266 0B3A                        i1l267 0B4A  
                      i1l268 0B58                        i1l277 0C3C                        i1l278 0BE6  
                      i2l253 11FE                        i1l690 1428                        i1l685 13FE  
                      i1l686 13F6                        i1l689 141E                        _RCREG 000FAE  
       __size_of_acknowledge 0060                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0050  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 1586  
            i1writeByte@data 0013                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00AE                 ?_D_UART_Read 00A0                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                        plusw2 000FDB                        status 000FD8  
                      wtemp6 0045                 ?_D_PORT_Init 0001           __size_ofi1___lwdiv 0052  
              _stopCharacter 003F             __end_ofi1_printf 0C78                   i1printf@ap 0020  
            __initialization 1330             _D_UART_Init$1497 00B3                 __end_of_main 0D96  
                     ??_main 00BF                  i1_writeByte 15B0                __activetblptr 000003  
            __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00A0                       _ADCON1 000FC1  
                     ?_putch 0001                       i1l1415 15B2                       i1l1539 0BD8  
                  ??i1_putch 0014             _C_DOOR_UnlockAll 1578                    ??_HighISR 0001  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___aldiv 00A8  
                  ??___lwdiv 00A4             __end_of_readByte 15CE                       clear_0 136E  
                     clear_1 137A                       _printf 09D6                       _strcmp 1482  
          __end_ofi1___lwdiv 1432                 __pdataCOMRAM 003D        D_UART_Init@interrupts 00B2  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 00B2              D_UART_Init@baud 00B0  
            D_UART_Init@name 00AE   __end_of_C_DOOR_ReadSensors 12D0                   __accesstop 0060  
    __end_of__initialization 1382              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 00FA                  i1printf@idx 0022                  i1printf@val 0023  
             __pcstackCOMRAM 0001                 __pidataBANK0 15D4                 C_DOOR_Init@d 00A0  
                i1putch@data 0014                __end_of_putch 1594             _messageCharacter 00C4  
             _C_DOOR_LockAll 15A2       __size_of_D_UART_Enable 0024               ??_D_UART_Write 00B6  
                  ?i1_printf 001A       __size_of_D_TMR0_Enable 0014            _C_DOOR_SendStates 103E  
                    ??_putch 00A1           ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060  
                 __pbssBANK1 0100         __size_of_D_UART_Init 00A2         __size_of_D_UART_Read 002E  
       __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00B7                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E       __end_of_C_DOOR_LockAll 15B0                   _deviceName 00C1  
                    ?_printf 00A7                      ?_strcmp 00A0    __end_of_C_DOOR_SendStates 1106  
                 ??i1_printf 001F      __size_of_fillDataBuffer 0198                      i1u80_20 1402  
                    i1u91_20 0B82                      i1u91_27 0B78                      i1u94_20 0BE0  
        D_UART_Enable@enable 00A0                      i1u95_20 0C44                      i1u96_20 0C6E  
                    i1u96_27 0C64              __CFG_VREGEN$OFF 000000                      i1_putch 15BC  
                    _HighISR 0008                    ?_readByte 0001           __size_of_writeByte 000E  
              _D_UART_Enable 14FE                      __Hparam 0000                      __Lparam 0000  
            __size_of_LowISR 00BC                _D_TMR0_Enable 1564                   _readBuffer 0100  
                    ___aldiv 0F70              ?_C_DOOR_LockAll 0001                      ___lwdiv 138C  
               __psmallconst 0800          C_DOOR_ReadSensors@d 00A4              __CFG_STVREN$OFF 000000  
              ??_acknowledge 0027                      __pcinit 1330                      __ramtop 0800  
   __end_of_C_DOOR_UnlockAll 1586                      __ptext0 0C78                      __ptext1 1482  
                    __ptext2 14D0                      __ptext3 1106                      __ptext4 0F70  
                    __ptext5 14FE                      __ptext6 1522                      __ptext7 1564  
                    __ptext8 1546                      __ptext9 1578              __size_of_printf 015A  
                  _T0CONbits 000FD5                 ?i1_writeByte 0001              __size_of_strcmp 004E  
          __end_of_hexpowers 0809            i1___lwdiv@divisor 0015            i1___lwdiv@counter 0019  
       C_DOOR_SendStates@com 00B9         C_DOOR_SendStates@mes 00BC             ___aldiv@dividend 00A0  
             __pintcode_body 11A8         end_of_initialization 1382                   ??_readByte 0013  
        D_TMR0_Enable@enable 00A0                      int_func 11A8               ?_D_UART_Enable 0001  
             ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0F70                    _RCSTAbits 000FAB  
                    printf@c 00B1                      printf@f 00A7             ___aldiv@quotient 00AA  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE                      strcmp@r 00A5  
          __end_of_writeByte 15A2   __size_of_C_DOOR_SendStates 00C8                    _TRISCbits 000F94  
        __end_of_acknowledge 1330                    i1___lwdiv 13E0                    _TXSTAbits 000FAC  
               i1printf@flag 001F                 i1printf@prec 0025           _C_DOOR_ReadSensors 124A  
             __end_of_LowISR 00D4                  _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001  
              __pidataCOMRAM 15CE               __end_of_printf 0B30               __end_of_strcmp 14D0  
        start_initialization 1330               _fillDataBuffer 083E                    i1printf@c 0026  
                  i1printf@f 001A                   ?i1___lwdiv 0013            __size_ofi1_printf 0148  
       ??_C_DOOR_ReadSensors 00A0              ??_D_UART_Enable 00A0                ??_C_DOOR_Init 00A0  
            ??_D_TMR0_Enable 00A0                     ??_LowISR 0028                  __pdataBANK0 00C4  
           __CFG_LPT1OSC$OFF 000000                  _acknowledge 12D0             D_UART_Write@data 00B4  
                   ??_printf 00AA                     ??_strcmp 00A4       __end_of_fillDataBuffer 09D6  
                __pbssCOMRAM 0043         __size_ofi1_writeByte 000C                __pcstackBANK0 00A0  
              ??_D_UART_Init 00B3                ??_D_UART_Read 00A6                ??_D_TMR0_Init 00A1  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00E0  
              ??_D_PORT_Init 00A0                    __pnvBANK0 00C1             ??_C_DOOR_LockAll 00A0  
          __size_of_readByte 0008             ___lwdiv@dividend 00A0          __end_of_C_DOOR_Init 0E90  
                  __pintcode 0008                     ?___aldiv 00A0                     ?___lwdiv 00A0  
                __pintcodelo 0018           fillDataBuffer@data 0027            ?_C_DOOR_UnlockAll 0001  
            ?_fillDataBuffer 0001                  __smallconst 0800           ??_C_DOOR_UnlockAll 00A0  
               _D_UART_Write 0E90                    _hexpowers 0801                    _readReady 009F  
           ___lwdiv@quotient 00A4                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00A4              ___aldiv@counter 00A8                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 11A8          __end_of_D_UART_Read 14FE  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 1546                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 1564                   printf@flag 00AA  
                 printf@prec 00B0                     i1_printf 0B30                    _writeByte 1594  
                _INTCON2bits 000FF1                    copy_data0 135C                  _C_DOOR_Init 0D96  
           __size_ofi1_putch 000A             __size_of_HighISR 1242                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___aldiv 00CE             __size_of___lwdiv 0054  
            ___lwdiv@divisor 00A2              ___lwdiv@counter 00A6                     __ptext10 103E  
                   __ptext11 1432                     __ptext12 0E90                     __ptext21 15C6  
                   __ptext13 09D6                     __ptext22 083E                     __ptext14 1586  
                   __ptext23 12D0                     __ptext15 1594                     __ptext24 0B30  
                   __ptext16 138C                     __ptext25 15BC                     __ptext17 124A  
                   __ptext26 15B0                     __ptext18 15A2                     __ptext27 13E0  
                   __ptext19 0D96                   ?_writeByte 0001           i1___lwdiv@dividend 0013  
                _D_UART_Init 1106                  _D_UART_Read 14D0                     _readData 0098  
                _D_TMR0_Init 1522                     _readByte 15C6                __size_of_main 011E  
         C_DOOR_SendStates@d 00BE                  _D_PORT_Init 1546                     int$flags 0044  
                  printf@idx 00AD                    printf@val 00AE                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00A1  
                 _INTCONbits 000FF2            _commandAndMessage 1432                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 0086           ?_commandAndMessage 00A0  
      __end_of_D_UART_Enable 1522        __end_of_D_TMR0_Enable 1578          ??_commandAndMessage 00AE  
                   printf@ap 00AB             ??_fillDataBuffer 0027          D_UART_Write@command 00B2  
              ??i1_writeByte 0013                     strcmp@s1 00A0                     strcmp@s2 00A2  
              writeByte@data 00A0    __end_of_commandAndMessage 1482                 ___aldiv@sign 00A9  
                ??_writeByte 00A0    __size_of_C_DOOR_UnlockAll 000E  
