

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov 25 22:01:17 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  0015E6                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  0015E6  1A                 	db	low STR_4
    92  0015E7  08                 	db	high STR_4
    93                           
    94                           ;initializer for _stopCharacter
    95  0015E8  31                 	db	low STR_2
    96  0015E9  08                 	db	high STR_2
    97                           
    98                           ;initializer for _startCharacter
    99  0015EA  33                 	db	low STR_1
   100  0015EB  08                 	db	high STR_1
   101                           
   102                           	psect	idataBANK0
   103  0015EC                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _messageCharacter
   107  0015EC  1E                 	db	low STR_3
   108  0015ED  08                 	db	high STR_3
   109                           
   110                           	psect	smallconst
   111  000800                     __psmallconst:
   112                           	opt stack 0
   113  000800  00                 	db	0
   114  000801                     _hexpowers:
   115                           	opt stack 0
   116  000801  0001               	dw	1
   117  000803  0010               	dw	16
   118  000805  0100               	dw	256
   119  000807  1000               	dw	4096
   120  000809                     __end_of_hexpowers:
   121                           	opt stack 0
   122  000809                     STR_17:
   123  000809  30                 	db	48	;'0'
   124  00080A  31                 	db	49	;'1'
   125  00080B  32                 	db	50	;'2'
   126  00080C  33                 	db	51	;'3'
   127  00080D  34                 	db	52	;'4'
   128  00080E  35                 	db	53	;'5'
   129  00080F  36                 	db	54	;'6'
   130  000810  37                 	db	55	;'7'
   131  000811  38                 	db	56	;'8'
   132  000812  39                 	db	57	;'9'
   133  000813  61                 	db	97	;'a'
   134  000814  62                 	db	98	;'b'
   135  000815  63                 	db	99	;'c'
   136  000816  64                 	db	100	;'d'
   137  000817  65                 	db	101	;'e'
   138  000818  66                 	db	102	;'f'
   139  000819  00                 	db	0
   140  00081A                     STR_4:
   141  00081A  5B                 	db	91	;'['
   142  00081B  41                 	db	65	;'A'
   143  00081C  5D                 	db	93	;']'
   144  00081D  00                 	db	0
   145  00081E                     STR_3:
   146  00081E  5B                 	db	91	;'['
   147  00081F  4D                 	db	77	;'M'
   148  000820  5D                 	db	93	;']'
   149  000821  00                 	db	0
   150  000822                     STR_5:
   151  000822  25                 	db	37
   152  000823  78                 	db	120	;'x'
   153  000824  00                 	db	0
   154  000825                     STR_15:
   155  000825  45                 	db	69	;'E'
   156  000826  00                 	db	0
   157  000827                     STR_9:
   158  000827  49                 	db	73	;'I'
   159  000828  00                 	db	0
   160  000829                     STR_11:
   161  000829  4C                 	db	76	;'L'
   162  00082A  00                 	db	0
   163  00082B                     STR_8:
   164  00082B  50                 	db	80	;'P'
   165  00082C  00                 	db	0
   166  00082D                     STR_14:
   167  00082D  52                 	db	82	;'R'
   168  00082E  00                 	db	0
   169  00082F                     STR_12:
   170  00082F  55                 	db	85	;'U'
   171  000830  00                 	db	0
   172  000831                     STR_2:
   173  000831  24                 	db	36
   174  000832  00                 	db	0
   175  000833                     STR_1:
   176  000833  26                 	db	38
   177  000834  00                 	db	0
   178  000835                     STR_6:
   179  000835  3A                 	db	58	;':'
   180  000836  00                 	db	0
   181  0000                     
   182                           ; #config settings
   183  000837  00                 	db	0	; dummy byte at the end
   184  0000                     
   185                           	psect	nvBANK0
   186  0000C1                     __pnvBANK0:
   187                           	opt stack 0
   188  0000C1                     _deviceName:
   189                           	opt stack 0
   190  0000C1                     	ds	3
   191  0000                     _INTCON2bits	set	4081
   192  0000                     _T0CONbits	set	4053
   193  0000                     _PIE1bits	set	3997
   194  0000                     _IPR1bits	set	3999
   195  0000                     _PIR1bits	set	3998
   196  0000                     _INTCONbits	set	4082
   197  0000                     _RCONbits	set	4048
   198  0000                     _SPBRG	set	4015
   199  0000                     _BAUDCONbits	set	4024
   200  0000                     _TRISCbits	set	3988
   201  0000                     _RCREG	set	4014
   202  0000                     _RCSTAbits	set	4011
   203  0000                     _TXREG	set	4013
   204  0000                     _TXSTAbits	set	4012
   205  0000                     _ADCON1	set	4033
   206  0000                     _PORTC	set	3970
   207  0000                     _TRISC	set	3988
   208  0000                     _PORTA	set	3968
   209  0000                     _TRISA	set	3986
   210  0000                     _TRISB	set	3987
   211  0000                     _PORTB	set	3969
   212                           
   213                           	psect	cinit
   214  001348                     __pcinit:
   215                           	opt stack 0
   216  001348                     start_initialization:
   217                           	opt stack 0
   218  001348                     __initialization:
   219                           	opt stack 0
   220                           
   221                           ; Initialize objects allocated to BANK0 (2 bytes)
   222                           ; load TBLPTR registers with __pidataBANK0
   223  001348  0EEC               	movlw	low __pidataBANK0
   224  00134A  6EF6               	movwf	tblptrl,c
   225  00134C  0E15               	movlw	high __pidataBANK0
   226  00134E  6EF7               	movwf	tblptrh,c
   227  001350  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   228  001352  6EF8               	movwf	tblptru,c
   229  001354  0009               	tblrd		*+	;fetch initializer
   230  001356  CFF5 F0C4          	movff	tablat,__pdataBANK0
   231  00135A  0009               	tblrd		*+	;fetch initializer
   232  00135C  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   233                           
   234                           ; Initialize objects allocated to COMRAM (6 bytes)
   235                           ; load TBLPTR registers with __pidataCOMRAM
   236  001360  0EE6               	movlw	low __pidataCOMRAM
   237  001362  6EF6               	movwf	tblptrl,c
   238  001364  0E15               	movlw	high __pidataCOMRAM
   239  001366  6EF7               	movwf	tblptrh,c
   240  001368  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   241  00136A  6EF8               	movwf	tblptru,c
   242  00136C  EE00  F03D         	lfsr	0,__pdataCOMRAM
   243  001370  EE10 F006          	lfsr	1,6
   244  001374                     copy_data0:
   245  001374  0009               	tblrd		*+
   246  001376  CFF5 FFEE          	movff	tablat,postinc0
   247  00137A  50E5               	movf	postdec1,w,c
   248  00137C  50E1               	movf	fsr1l,w,c
   249  00137E  E1FA               	bnz	copy_data0
   250                           
   251                           ; Clear objects allocated to BANK1 (166 bytes)
   252  001380  EE01  F000         	lfsr	0,__pbssBANK1
   253  001384  0EA6               	movlw	166
   254  001386                     clear_0:
   255  001386  6AEE               	clrf	postinc0,c
   256  001388  06E8               	decf	wreg,f,c
   257  00138A  E1FD               	bnz	clear_0
   258                           
   259                           ; Clear objects allocated to BANK0 (64 bytes)
   260  00138C  EE00  F060         	lfsr	0,__pbssBANK0
   261  001390  0E40               	movlw	64
   262  001392                     clear_1:
   263  001392  6AEE               	clrf	postinc0,c
   264  001394  06E8               	decf	wreg,f,c
   265  001396  E1FD               	bnz	clear_1
   266                           
   267                           ; Clear objects allocated to COMRAM (1 bytes)
   268  001398  6A43               	clrf	__pbssCOMRAM& (0+255),c
   269  00139A                     end_of_initialization:
   270                           	opt stack 0
   271  00139A                     __end_of__initialization:
   272                           	opt stack 0
   273  00139A  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274  00139C  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275  00139E  0100               	movlb	0
   276  0013A0  EF39  F006         	goto	_main	;jump to C main() function
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1l	equ	0xFE1
   285                           
   286                           	psect	bssCOMRAM
   287  000043                     __pbssCOMRAM:
   288                           	opt stack 0
   289  000043                     _baud:
   290                           	opt stack 0
   291  000043                     	ds	1
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           postdec1	equ	0xFE5
   299                           fsr1l	equ	0xFE1
   300                           
   301                           	psect	dataCOMRAM
   302  00003D                     __pdataCOMRAM:
   303                           	opt stack 0
   304  00003D                     _ackCharacter:
   305                           	opt stack 0
   306  00003D                     	ds	2
   307  00003F                     _stopCharacter:
   308                           	opt stack 0
   309  00003F                     	ds	2
   310  000041                     _startCharacter:
   311                           	opt stack 0
   312  000041                     	ds	2
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           	psect	bssBANK0
   323  000060                     __pbssBANK0:
   324                           	opt stack 0
   325  000060                     _doors:
   326                           	opt stack 0
   327  000060                     	ds	50
   328  000092                     _read:
   329                           	opt stack 0
   330  000092                     	ds	6
   331  000098                     _readData:
   332                           	opt stack 0
   333  000098                     	ds	6
   334  00009E                     _tick:
   335                           	opt stack 0
   336  00009E                     	ds	1
   337  00009F                     _readReady:
   338                           	opt stack 0
   339  00009F                     	ds	1
   340                           tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           postdec1	equ	0xFE5
   347                           fsr1l	equ	0xFE1
   348                           
   349                           	psect	dataBANK0
   350  0000C4                     __pdataBANK0:
   351                           	opt stack 0
   352  0000C4                     _messageCharacter:
   353                           	opt stack 0
   354  0000C4                     	ds	2
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           postdec1	equ	0xFE5
   362                           fsr1l	equ	0xFE1
   363                           
   364                           	psect	bssBANK1
   365  000100                     __pbssBANK1:
   366                           	opt stack 0
   367  000100                     _readBuffer:
   368                           	opt stack 0
   369  000100                     	ds	166
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           postinc0	equ	0xFEE
   375                           wreg	equ	0xFE8
   376                           postdec1	equ	0xFE5
   377                           fsr1l	equ	0xFE1
   378                           
   379                           	psect	cstackBANK0
   380  0000A0                     __pcstackBANK0:
   381                           	opt stack 0
   382  0000A0                     ??_C_DOOR_ReadSensors:
   383  0000A0                     ?_strcmp:
   384                           	opt stack 0
   385  0000A0                     ?___lwdiv:
   386                           	opt stack 0
   387  0000A0                     ?___aldiv:
   388                           	opt stack 0
   389  0000A0                     ?_D_UART_Read:
   390                           	opt stack 0
   391  0000A0                     C_DOOR_Init@d:
   392                           	opt stack 0
   393  0000A0                     writeByte@data:
   394                           	opt stack 0
   395  0000A0                     D_UART_Enable@enable:
   396                           	opt stack 0
   397  0000A0                     D_TMR0_Enable@enable:
   398                           	opt stack 0
   399  0000A0                     ___lwdiv@dividend:
   400                           	opt stack 0
   401  0000A0                     strcmp@s1:
   402                           	opt stack 0
   403  0000A0                     ___aldiv@dividend:
   404                           	opt stack 0
   405  0000A0                     commandAndMessage@door:
   406                           	opt stack 0
   407                           
   408                           ; 10 bytes @ 0x0
   409  0000A0                     	ds	1
   410  0000A1                     putch@data:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x1
   414  0000A1                     	ds	1
   415  0000A2                     ___lwdiv@divisor:
   416                           	opt stack 0
   417  0000A2                     strcmp@s2:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x2
   421  0000A2                     	ds	2
   422  0000A4                     ??_strcmp:
   423  0000A4                     C_DOOR_ReadSensors@d:
   424                           	opt stack 0
   425  0000A4                     ___lwdiv@quotient:
   426                           	opt stack 0
   427  0000A4                     ___aldiv@divisor:
   428                           	opt stack 0
   429                           
   430                           ; 4 bytes @ 0x4
   431  0000A4                     	ds	1
   432  0000A5                     strcmp@r:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x5
   436  0000A5                     	ds	1
   437  0000A6                     ___lwdiv@counter:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x6
   441  0000A6                     	ds	1
   442  0000A7                     ?_printf:
   443                           	opt stack 0
   444  0000A7                     printf@f:
   445                           	opt stack 0
   446                           
   447                           ; 3 bytes @ 0x7
   448  0000A7                     	ds	1
   449  0000A8                     ___aldiv@counter:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x8
   453  0000A8                     	ds	1
   454  0000A9                     ___aldiv@sign:
   455                           	opt stack 0
   456                           
   457                           ; 1 bytes @ 0x9
   458  0000A9                     	ds	1
   459  0000AA                     printf@flag:
   460                           	opt stack 0
   461  0000AA                     commandAndMessage@com:
   462                           	opt stack 0
   463  0000AA                     ___aldiv@quotient:
   464                           	opt stack 0
   465                           
   466                           ; 4 bytes @ 0xA
   467  0000AA                     	ds	1
   468  0000AB                     printf@ap:
   469                           	opt stack 0
   470                           
   471                           ; 2 bytes @ 0xB
   472  0000AB                     	ds	1
   473  0000AC                     commandAndMessage@mes:
   474                           	opt stack 0
   475                           
   476                           ; 2 bytes @ 0xC
   477  0000AC                     	ds	1
   478  0000AD                     printf@idx:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0xD
   482  0000AD                     	ds	1
   483  0000AE                     D_UART_Init@name:
   484                           	opt stack 0
   485  0000AE                     printf@val:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xE
   489  0000AE                     	ds	2
   490  0000B0                     printf@prec:
   491                           	opt stack 0
   492  0000B0                     D_UART_Init@baud:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x10
   496  0000B0                     	ds	1
   497  0000B1                     printf@c:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x11
   501  0000B1                     	ds	1
   502  0000B2                     D_UART_Init@interrupts:
   503                           	opt stack 0
   504  0000B2                     D_UART_Write@command:
   505                           	opt stack 0
   506                           
   507                           ; 2 bytes @ 0x12
   508  0000B2                     	ds	1
   509  0000B3                     _D_UART_Init$1498:
   510                           	opt stack 0
   511                           
   512                           ; 4 bytes @ 0x13
   513  0000B3                     	ds	1
   514  0000B4                     D_UART_Write@data:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x14
   518  0000B4                     	ds	2
   519  0000B6                     ??_D_UART_Write:
   520                           
   521                           ; 1 bytes @ 0x16
   522  0000B6                     	ds	1
   523  0000B7                     
   524                           ; 1 bytes @ 0x17
   525  0000B7                     	ds	2
   526  0000B9                     C_DOOR_SendStates@com:
   527                           	opt stack 0
   528                           
   529                           ; 3 bytes @ 0x19
   530  0000B9                     	ds	3
   531  0000BC                     C_DOOR_SendStates@mes:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x1C
   535  0000BC                     	ds	2
   536  0000BE                     C_DOOR_SendStates@d:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x1E
   540  0000BE                     	ds	1
   541  0000BF                     ??_main:
   542                           
   543                           ; 1 bytes @ 0x1F
   544  0000BF                     	ds	2
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1l	equ	0xFE1
   553                           
   554                           	psect	cstackCOMRAM
   555  000001                     __pcstackCOMRAM:
   556                           	opt stack 0
   557  000001                     ??_HighISR:
   558  000001                     
   559                           ; 1 bytes @ 0x0
   560  000001                     	ds	18
   561  000013                     ?i1___lwdiv:
   562                           	opt stack 0
   563  000013                     i1writeByte@data:
   564                           	opt stack 0
   565  000013                     i1___lwdiv@dividend:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x12
   569  000013                     	ds	1
   570  000014                     i1putch@data:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x13
   574  000014                     	ds	1
   575  000015                     i1___lwdiv@divisor:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x14
   579  000015                     	ds	2
   580  000017                     i1___lwdiv@quotient:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x16
   584  000017                     	ds	2
   585  000019                     i1___lwdiv@counter:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x18
   589  000019                     	ds	1
   590  00001A                     ?i1_printf:
   591                           	opt stack 0
   592  00001A                     i1printf@f:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x19
   596  00001A                     	ds	5
   597  00001F                     i1printf@flag:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x1E
   601  00001F                     	ds	1
   602  000020                     i1printf@ap:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x1F
   606  000020                     	ds	2
   607  000022                     i1printf@idx:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x21
   611  000022                     	ds	1
   612  000023                     i1printf@val:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x22
   616  000023                     	ds	2
   617  000025                     i1printf@prec:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x24
   621  000025                     	ds	1
   622  000026                     i1printf@c:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x25
   626  000026                     	ds	1
   627  000027                     fillDataBuffer@data:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x26
   631  000027                     	ds	1
   632  000028                     ??_LowISR:
   633                           
   634                           ; 1 bytes @ 0x27
   635  000028                     	ds	21
   636                           tblptru	equ	0xFF8
   637                           tblptrh	equ	0xFF7
   638                           tblptrl	equ	0xFF6
   639                           tablat	equ	0xFF5
   640                           postinc0	equ	0xFEE
   641                           wreg	equ	0xFE8
   642                           postdec1	equ	0xFE5
   643                           fsr1l	equ	0xFE1
   644                           
   645 ;;
   646 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   647 ;;
   648 ;; *************** function _main *****************
   649 ;; Defined at:
   650 ;;		line 24 in file "main.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;		None
   655 ;; Return value:  Size  Location     Type
   656 ;;                  1    wreg      void 
   657 ;; Registers used:
   658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   659 ;; Tracked objects:
   660 ;;		On entry : 0/0
   661 ;;		On exit  : 0/0
   662 ;;		Unchanged: 0/0
   663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   664 ;;      Params:         0       0       0       0       0       0       0       0       0
   665 ;;      Locals:         0       0       0       0       0       0       0       0       0
   666 ;;      Temps:          0       2       0       0       0       0       0       0       0
   667 ;;      Totals:         0       2       0       0       0       0       0       0       0
   668 ;;Total ram usage:        2 bytes
   669 ;; Hardware stack levels required when called:   12
   670 ;; This function calls:
   671 ;;		_C_DOOR_Init
   672 ;;		_C_DOOR_LockAll
   673 ;;		_C_DOOR_ReadSensors
   674 ;;		_C_DOOR_SendStates
   675 ;;		_C_DOOR_UnlockAll
   676 ;;		_D_PORT_Init
   677 ;;		_D_TMR0_Enable
   678 ;;		_D_TMR0_Init
   679 ;;		_D_UART_Enable
   680 ;;		_D_UART_Init
   681 ;;		_D_UART_Read
   682 ;;		_D_UART_Write
   683 ;;		_strcmp
   684 ;; This function is called by:
   685 ;;		Startup code after reset
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           	psect	text0
   690  000C72                     __ptext0:
   691                           	opt stack 0
   692  000C72                     _main:
   693                           	opt stack 19
   694                           
   695                           ;main.c: 26: D_PORT_Init();
   696                           
   697                           ;incstack = 0
   698  000C72  ECAF  F00A         	call	_D_PORT_Init	;wreg free
   699                           
   700                           ;main.c: 30: D_UART_Init("P", 9600, 1);
   701  000C76  0E2B               	movlw	low STR_8
   702  000C78  0100               	movlb	0	; () banked
   703  000C7A  6FAE               	movwf	D_UART_Init@name& (0+255),b
   704  000C7C  0E08               	movlw	high STR_8
   705  000C7E  6FAF               	movwf	(D_UART_Init@name+1)& (0+255),b
   706  000C80  0E25               	movlw	37
   707  000C82  6FB1               	movwf	(D_UART_Init@baud+1)& (0+255),b
   708  000C84  0E80               	movlw	128
   709  000C86  6FB0               	movwf	D_UART_Init@baud& (0+255),b
   710  000C88  0E01               	movlw	1
   711  000C8A  6FB2               	movwf	D_UART_Init@interrupts& (0+255),b
   712  000C8C  EC8F  F008         	call	_D_UART_Init	;wreg free
   713                           
   714                           ;main.c: 31: D_UART_Enable(1);
   715  000C90  0E01               	movlw	1
   716  000C92  EC8B  F00A         	call	_D_UART_Enable
   717                           
   718                           ;main.c: 34: D_TMR0_Init();
   719  000C96  EC9D  F00A         	call	_D_TMR0_Init	;wreg free
   720                           
   721                           ;main.c: 37: C_DOOR_Init();
   722  000C9A  ECD7  F006         	call	_C_DOOR_Init	;wreg free
   723                           
   724                           ;main.c: 38: C_DOOR_UnlockAll();
   725  000C9E  ECC8  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   726                           
   727                           ;main.c: 40: _delay((unsigned long)((200)*(16000000/4000.0)));
   728  000CA2  0E05               	movlw	5
   729  000CA4  0100               	movlb	0	; () banked
   730  000CA6  6FC0               	movwf	(??_main+1)& (0+255),b
   731  000CA8  0E0F               	movlw	15
   732  000CAA  6FBF               	movwf	??_main& (0+255),b
   733  000CAC  0EF1               	movlw	241
   734  000CAE                     u1497:
   735  000CAE  2EE8               	decfsz	wreg,f,c
   736  000CB0  D7FE               	bra	u1497
   737  000CB2  2FBF               	decfsz	??_main& (0+255),f,b
   738  000CB4  D7FC               	bra	u1497
   739  000CB6  2FC0               	decfsz	(??_main+1)& (0+255),f,b
   740  000CB8  D7FA               	bra	u1497
   741                           
   742                           ;main.c: 41: D_UART_Write("I", "I");
   743  000CBA  0E27               	movlw	low STR_9
   744  000CBC  0100               	movlb	0	; () banked
   745  000CBE  6FB2               	movwf	D_UART_Write@command& (0+255),b
   746  000CC0  0E08               	movlw	high STR_9
   747  000CC2  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
   748  000CC4  0E27               	movlw	low STR_9
   749  000CC6  6FB4               	movwf	D_UART_Write@data& (0+255),b
   750  000CC8  0E08               	movlw	high STR_9
   751  000CCA  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
   752  000CCC  EC54  F007         	call	_D_UART_Write	;wreg free
   753                           
   754                           ;main.c: 44: D_TMR0_Enable(1);
   755  000CD0  0E01               	movlw	1
   756  000CD2  ECBE  F00A         	call	_D_TMR0_Enable
   757  000CD6                     
   758                           ;main.c: 48: if (readReady) {
   759  000CD6  0100               	movlb	0	; () banked
   760  000CD8  519F               	movf	_readReady& (0+255),w,b
   761  000CDA  B4D8               	btfsc	status,2,c
   762  000CDC  D05D               	goto	l246
   763                           
   764                           ; BSR set to: 0
   765                           ;main.c: 49: readReady = 0;
   766  000CDE  0E00               	movlw	0
   767  000CE0  6F9F               	movwf	_readReady& (0+255),b
   768                           
   769                           ; BSR set to: 0
   770                           ;main.c: 50: read = D_UART_Read();
   771  000CE2  EC74  F00A         	call	_D_UART_Read	;wreg free
   772  000CE6  EE20  F092         	lfsr	2,_read
   773  000CEA  0E05               	movlw	5
   774  000CEC                     u1421:
   775  000CEC  CFEB FFDB          	movff	plusw0,plusw2
   776  000CF0  06E8               	decf	wreg,f,c
   777  000CF2  E2FC               	bc	u1421
   778                           
   779                           ;main.c: 51: if (strcmp(read.command, "L") == 0) {
   780  000CF4  C094  F0A0         	movff	_read+2,strcmp@s1
   781  000CF8  C095  F0A1         	movff	_read+3,strcmp@s1+1
   782  000CFC  0E29               	movlw	low STR_11
   783  000CFE  0100               	movlb	0	; () banked
   784  000D00  6FA2               	movwf	strcmp@s2& (0+255),b
   785  000D02  0E08               	movlw	high STR_11
   786  000D04  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   787  000D06  EC4D  F00A         	call	_strcmp	;wreg free
   788  000D0A  0100               	movlb	0	; () banked
   789  000D0C  51A0               	movf	?_strcmp& (0+255),w,b
   790  000D0E  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   791  000D10  A4D8               	btfss	status,2,c
   792  000D12  D003               	goto	l239
   793                           
   794                           ; BSR set to: 0
   795                           ;main.c: 52: C_DOOR_LockAll();
   796  000D14  ECDD  F00A         	call	_C_DOOR_LockAll	;wreg free
   797                           
   798                           ;main.c: 53: } else if (strcmp(read.command, "U") == 0) {
   799  000D18  D03F               	goto	l246
   800  000D1A                     l239:
   801  000D1A  C094  F0A0         	movff	_read+2,strcmp@s1
   802  000D1E  C095  F0A1         	movff	_read+3,strcmp@s1+1
   803  000D22  0E2F               	movlw	low STR_12
   804  000D24  0100               	movlb	0	; () banked
   805  000D26  6FA2               	movwf	strcmp@s2& (0+255),b
   806  000D28  0E08               	movlw	high STR_12
   807  000D2A  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   808  000D2C  EC4D  F00A         	call	_strcmp	;wreg free
   809  000D30  0100               	movlb	0	; () banked
   810  000D32  51A0               	movf	?_strcmp& (0+255),w,b
   811  000D34  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   812  000D36  A4D8               	btfss	status,2,c
   813  000D38  D003               	goto	l241
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 54: C_DOOR_UnlockAll();
   817  000D3A  ECC8  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   818                           
   819                           ;main.c: 55: } else if (strcmp(read.command, "I") == 0) {
   820  000D3E  D02C               	goto	l246
   821  000D40                     l241:
   822  000D40  C094  F0A0         	movff	_read+2,strcmp@s1
   823  000D44  C095  F0A1         	movff	_read+3,strcmp@s1+1
   824  000D48  0E27               	movlw	low STR_9
   825  000D4A  0100               	movlb	0	; () banked
   826  000D4C  6FA2               	movwf	strcmp@s2& (0+255),b
   827  000D4E  0E08               	movlw	high STR_9
   828  000D50  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   829  000D52  EC4D  F00A         	call	_strcmp	;wreg free
   830  000D56  0100               	movlb	0	; () banked
   831  000D58  51A0               	movf	?_strcmp& (0+255),w,b
   832  000D5A  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   833  000D5C  B4D8               	btfsc	status,2,c
   834  000D5E  D01C               	goto	l246
   835                           
   836                           ; BSR set to: 0
   837                           
   838                           ; BSR set to: 0
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 57: } else if (strcmp(read.command, "R") == 0) {
   842  000D60  C094  F0A0         	movff	_read+2,strcmp@s1
   843  000D64  C095  F0A1         	movff	_read+3,strcmp@s1+1
   844  000D68  0E2D               	movlw	low STR_14
   845  000D6A  6FA2               	movwf	strcmp@s2& (0+255),b
   846  000D6C  0E08               	movlw	high STR_14
   847  000D6E  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   848  000D70  EC4D  F00A         	call	_strcmp	;wreg free
   849  000D74  0100               	movlb	0	; () banked
   850  000D76  51A0               	movf	?_strcmp& (0+255),w,b
   851  000D78  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   852  000D7A  A4D8               	btfss	status,2,c
   853  000D7C  D002               	goto	l245
   854                           
   855                           ; BSR set to: 0
   856  000D7E  00FF               	reset		;# 
   857                           
   858                           ;main.c: 59: } else {
   859  000D80  D00B               	goto	l246
   860  000D82                     l245:
   861                           
   862                           ;main.c: 60: D_UART_Write("E", "U");
   863  000D82  0E25               	movlw	low STR_15
   864  000D84  0100               	movlb	0	; () banked
   865  000D86  6FB2               	movwf	D_UART_Write@command& (0+255),b
   866  000D88  0E08               	movlw	high STR_15
   867  000D8A  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
   868  000D8C  0E2F               	movlw	low STR_12
   869  000D8E  6FB4               	movwf	D_UART_Write@data& (0+255),b
   870  000D90  0E08               	movlw	high STR_12
   871  000D92  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
   872  000D94  EC54  F007         	call	_D_UART_Write	;wreg free
   873  000D98                     l246:
   874                           
   875                           ;main.c: 61: }
   876                           ;main.c: 62: }
   877                           ;main.c: 65: if (tick) {
   878  000D98  0100               	movlb	0	; () banked
   879  000D9A  519E               	movf	_tick& (0+255),w,b
   880  000D9C  B4D8               	btfsc	status,2,c
   881  000D9E  D79B               	goto	l237
   882                           
   883                           ; BSR set to: 0
   884                           ;main.c: 66: tick = 0;
   885  000DA0  0E00               	movlw	0
   886  000DA2  6F9E               	movwf	_tick& (0+255),b
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 69: C_DOOR_ReadSensors();
   890  000DA4  EC31  F009         	call	_C_DOOR_ReadSensors	;wreg free
   891                           
   892                           ;main.c: 72: C_DOOR_SendStates();
   893  000DA8  EC2B  F008         	call	_C_DOOR_SendStates	;wreg free
   894  000DAC  D794               	goto	l237
   895  000DAE                     __end_of_main:
   896                           	opt stack 0
   897                           tblptru	equ	0xFF8
   898                           tblptrh	equ	0xFF7
   899                           tblptrl	equ	0xFF6
   900                           tablat	equ	0xFF5
   901                           postinc0	equ	0xFEE
   902                           plusw0	equ	0xFEB
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1l	equ	0xFE1
   906                           plusw2	equ	0xFDB
   907                           status	equ	0xFD8
   908                           
   909 ;; *************** function _strcmp *****************
   910 ;; Defined at:
   911 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   914 ;;		 -> readBuffer(166), 
   915 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   916 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  r               1    5[BANK0 ] char 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  2    0[BANK0 ] int 
   921 ;; Registers used:
   922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   928 ;;      Params:         0       4       0       0       0       0       0       0       0
   929 ;;      Locals:         0       1       0       0       0       0       0       0       0
   930 ;;      Temps:          0       1       0       0       0       0       0       0       0
   931 ;;      Totals:         0       6       0       0       0       0       0       0       0
   932 ;;Total ram usage:        6 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    7
   935 ;; This function calls:
   936 ;;		Nothing
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text1
   943  00149A                     __ptext1:
   944                           	opt stack 0
   945  00149A                     _strcmp:
   946                           	opt stack 23
   947                           
   948                           ;incstack = 0
   949  00149A  D005               	goto	l831
   950  00149C  0100               	movlb	0	; () banked
   951  00149E  4BA0               	infsnz	strcmp@s1& (0+255),f,b
   952  0014A0  2BA1               	incf	(strcmp@s1+1)& (0+255),f,b
   953  0014A2  4BA2               	infsnz	strcmp@s2& (0+255),f,b
   954  0014A4  2BA3               	incf	(strcmp@s2+1)& (0+255),f,b
   955  0014A6                     l831:
   956                           
   957                           ; BSR set to: 0
   958  0014A6  C0A0  FFD9         	movff	strcmp@s1,fsr2l
   959  0014AA  C0A1  FFDA         	movff	strcmp@s1+1,fsr2h
   960  0014AE  50DF               	movf	indf2,w,c
   961  0014B0  0100               	movlb	0	; () banked
   962  0014B2  6FA4               	movwf	??_strcmp& (0+255),b
   963  0014B4  C0A2  FFF6         	movff	strcmp@s2,tblptrl
   964  0014B8  C0A3  FFF7         	movff	strcmp@s2+1,tblptrh
   965  0014BC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   966  0014BC  6AF8               	clrf	tblptru,c
   967  0014BE                     	endif
   968  0014BE                     	if	0	;tblptru may be non-zero
   969  0014BE                     	endif
   970  0014BE  0008               	tblrd		*
   971  0014C0  50F5               	movf	tablat,w,c
   972  0014C2  0800               	sublw	0
   973  0014C4  25A4               	addwf	??_strcmp& (0+255),w,b
   974  0014C6  6FA5               	movwf	strcmp@r& (0+255),b
   975  0014C8  51A5               	movf	strcmp@r& (0+255),w,b
   976  0014CA  A4D8               	btfss	status,2,c
   977  0014CC  D007               	goto	u1310
   978                           
   979                           ; BSR set to: 0
   980  0014CE  C0A0  FFD9         	movff	strcmp@s1,fsr2l
   981  0014D2  C0A1  FFDA         	movff	strcmp@s1+1,fsr2h
   982  0014D6  50DF               	movf	indf2,w,c
   983  0014D8  A4D8               	btfss	status,2,c
   984  0014DA  D7E0               	goto	l832
   985  0014DC                     u1310:
   986                           
   987                           ; BSR set to: 0
   988                           
   989                           ; BSR set to: 0
   990                           
   991                           ; BSR set to: 0
   992  0014DC  51A5               	movf	strcmp@r& (0+255),w,b
   993  0014DE  6FA0               	movwf	?_strcmp& (0+255),b
   994  0014E0  6BA1               	clrf	(?_strcmp+1)& (0+255),b
   995  0014E2  BFA0               	btfsc	?_strcmp& (0+255),7,b
   996  0014E4  07A1               	decf	(?_strcmp+1)& (0+255),f,b
   997  0014E6  0012               	return	
   998  0014E8                     __end_of_strcmp:
   999                           	opt stack 0
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           postinc0	equ	0xFEE
  1005                           plusw0	equ	0xFEB
  1006                           wreg	equ	0xFE8
  1007                           postdec1	equ	0xFE5
  1008                           fsr1l	equ	0xFE1
  1009                           indf2	equ	0xFDF
  1010                           plusw2	equ	0xFDB
  1011                           fsr2h	equ	0xFDA
  1012                           fsr2l	equ	0xFD9
  1013                           status	equ	0xFD8
  1014                           
  1015 ;; *************** function _D_UART_Read *****************
  1016 ;; Defined at:
  1017 ;;		line 237 in file "Drivers/UART_Driver.c"
  1018 ;; Parameters:    Size  Location     Type
  1019 ;;		None
  1020 ;; Auto vars:     Size  Location     Type
  1021 ;;		None
  1022 ;; Return value:  Size  Location     Type
  1023 ;;                  6    0[BANK0 ] struct .
  1024 ;; Registers used:
  1025 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1026 ;; Tracked objects:
  1027 ;;		On entry : 0/0
  1028 ;;		On exit  : 0/0
  1029 ;;		Unchanged: 0/0
  1030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1031 ;;      Params:         0       6       0       0       0       0       0       0       0
  1032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1034 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1035 ;;Total ram usage:        6 bytes
  1036 ;; Hardware stack levels used:    1
  1037 ;; Hardware stack levels required when called:    7
  1038 ;; This function calls:
  1039 ;;		Nothing
  1040 ;; This function is called by:
  1041 ;;		_main
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text2
  1046  0014E8                     __ptext2:
  1047                           	opt stack 0
  1048  0014E8                     _D_UART_Read:
  1049                           	opt stack 23
  1050                           
  1051                           ;UART_Driver.c: 238: readData.sender = readBuffer.sender;
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;incstack = 0
  1055  0014E8  0E0B               	movlw	low (_readBuffer+11)
  1056  0014EA  0100               	movlb	0	; () banked
  1057  0014EC  6F98               	movwf	_readData& (0+255),b
  1058  0014EE  0E01               	movlw	high (_readBuffer+11)
  1059  0014F0  6F99               	movwf	(_readData+1)& (0+255),b
  1060                           
  1061                           ;UART_Driver.c: 239: readData.command = readBuffer.command;
  1062  0014F2  0E3E               	movlw	low (_readBuffer+62)
  1063  0014F4  6F9A               	movwf	(_readData+2)& (0+255),b
  1064  0014F6  0E01               	movlw	high (_readBuffer+62)
  1065  0014F8  6F9B               	movwf	(_readData+3)& (0+255),b
  1066                           
  1067                           ;UART_Driver.c: 240: readData.message = readBuffer.message;
  1068  0014FA  0E71               	movlw	low (_readBuffer+113)
  1069  0014FC  6F9C               	movwf	(_readData+4)& (0+255),b
  1070  0014FE  0E01               	movlw	high (_readBuffer+113)
  1071  001500  6F9D               	movwf	(_readData+5)& (0+255),b
  1072                           
  1073                           ; BSR set to: 0
  1074                           ;UART_Driver.c: 241: return readData;
  1075  001502  EE20  F098         	lfsr	2,_readData
  1076  001506  EE00  F0A0         	lfsr	0,?_D_UART_Read
  1077  00150A  0E05               	movlw	5
  1078  00150C                     u1291:
  1079  00150C  CFDB FFEB          	movff	plusw2,plusw0
  1080  001510  06E8               	decf	wreg,f,c
  1081  001512  E2FC               	bc	u1291
  1082  001514  0012               	return	
  1083  001516                     __end_of_D_UART_Read:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           plusw0	equ	0xFEB
  1091                           wreg	equ	0xFE8
  1092                           postdec1	equ	0xFE5
  1093                           fsr1l	equ	0xFE1
  1094                           indf2	equ	0xFDF
  1095                           plusw2	equ	0xFDB
  1096                           fsr2h	equ	0xFDA
  1097                           fsr2l	equ	0xFD9
  1098                           status	equ	0xFD8
  1099                           
  1100 ;; *************** function _D_UART_Init *****************
  1101 ;; Defined at:
  1102 ;;		line 182 in file "Drivers/UART_Driver.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1105 ;;		 -> STR_8(2), 
  1106 ;;  baud            2   16[BANK0 ] unsigned int 
  1107 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;		None
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, status,2, status,0, cstack
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1119 ;;      Params:         0       5       0       0       0       0       0       0       0
  1120 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1122 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1123 ;;Total ram usage:        9 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    8
  1126 ;; This function calls:
  1127 ;;		_D_UART_Enable
  1128 ;;		___aldiv
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text3
  1135  00111E                     __ptext3:
  1136                           	opt stack 0
  1137  00111E                     _D_UART_Init:
  1138                           	opt stack 22
  1139                           
  1140                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1141                           
  1142                           ; BSR set to: 0
  1143                           ;incstack = 0
  1144  00111E  9E94               	bcf	3988,7,c	;volatile
  1145                           
  1146                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1147  001120  8C94               	bsf	3988,6,c	;volatile
  1148                           
  1149                           ;UART_Driver.c: 188: deviceName = name;
  1150  001122  C0AE  F0C1         	movff	D_UART_Init@name,_deviceName
  1151  001126  C0AF  F0C2         	movff	D_UART_Init@name+1,_deviceName+1
  1152  00112A  0100               	movlb	0	; () banked
  1153  00112C  51C1               	movf	_deviceName& (0+255),w,b
  1154  00112E  11C2               	iorwf	(_deviceName+1)& (0+255),w,b
  1155  001130  A4D8               	btfss	status,2,c
  1156  001132  0E00               	movlw	low (__mediumconst shr (0+16))
  1157  001134  6FC3               	movwf	(_deviceName+2)& (0+255),b
  1158                           
  1159                           ; BSR set to: 0
  1160                           ;UART_Driver.c: 189: readReady = 0;
  1161  001136  0E00               	movlw	0
  1162  001138  6F9F               	movwf	_readReady& (0+255),b
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1166  00113A  0E00               	movlw	0
  1167  00113C  EC8B  F00A         	call	_D_UART_Enable
  1168                           
  1169                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1170  001140  9CAC               	bcf	4012,6,c	;volatile
  1171                           
  1172                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1173  001142  98AC               	bcf	4012,4,c	;volatile
  1174                           
  1175                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1176  001144  94AC               	bcf	4012,2,c	;volatile
  1177                           
  1178                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1179  001146  9CAB               	bcf	4011,6,c	;volatile
  1180                           
  1181                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1182  001148  9AB8               	bcf	4024,5,c	;volatile
  1183                           
  1184                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1185  00114A  98B8               	bcf	4024,4,c	;volatile
  1186                           
  1187                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1188  00114C  96B8               	bcf	4024,3,c	;volatile
  1189                           
  1190                           ;UART_Driver.c: 210: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1191  00114E  C0B0  F0A4         	movff	D_UART_Init@baud,___aldiv@divisor
  1192  001152  C0B1  F0A5         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1193  001156  0100               	movlb	0	; () banked
  1194  001158  6BA6               	clrf	(___aldiv@divisor+2)& (0+255),b
  1195  00115A  6BA7               	clrf	(___aldiv@divisor+3)& (0+255),b
  1196  00115C  0E00               	movlw	0
  1197  00115E  6FA0               	movwf	___aldiv@dividend& (0+255),b
  1198  001160  0E24               	movlw	36
  1199  001162  6FA1               	movwf	(___aldiv@dividend+1)& (0+255),b
  1200  001164  0EF4               	movlw	244
  1201  001166  6FA2               	movwf	(___aldiv@dividend+2)& (0+255),b
  1202  001168  0E00               	movlw	0
  1203  00116A  6FA3               	movwf	(___aldiv@dividend+3)& (0+255),b
  1204  00116C  ECC4  F007         	call	___aldiv	;wreg free
  1205  001170  C0A0  F0B3         	movff	?___aldiv,_D_UART_Init$1498
  1206  001174  C0A1  F0B4         	movff	?___aldiv+1,_D_UART_Init$1498+1
  1207  001178  C0A2  F0B5         	movff	?___aldiv+2,_D_UART_Init$1498+2
  1208  00117C  C0A3  F0B6         	movff	?___aldiv+3,_D_UART_Init$1498+3
  1209                           
  1210                           ;UART_Driver.c: 210: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1211  001180  C0B3  F0A0         	movff	_D_UART_Init$1498,___aldiv@dividend
  1212  001184  C0B4  F0A1         	movff	_D_UART_Init$1498+1,___aldiv@dividend+1
  1213  001188  C0B5  F0A2         	movff	_D_UART_Init$1498+2,___aldiv@dividend+2
  1214  00118C  C0B6  F0A3         	movff	_D_UART_Init$1498+3,___aldiv@dividend+3
  1215  001190  0E40               	movlw	64
  1216  001192  0100               	movlb	0	; () banked
  1217  001194  6FA4               	movwf	___aldiv@divisor& (0+255),b
  1218  001196  0E00               	movlw	0
  1219  001198  6FA5               	movwf	(___aldiv@divisor+1)& (0+255),b
  1220  00119A  0E00               	movlw	0
  1221  00119C  6FA6               	movwf	(___aldiv@divisor+2)& (0+255),b
  1222  00119E  0E00               	movlw	0
  1223  0011A0  6FA7               	movwf	(___aldiv@divisor+3)& (0+255),b
  1224  0011A2  ECC4  F007         	call	___aldiv	;wreg free
  1225  0011A6  0100               	movlb	0	; () banked
  1226  0011A8  05A0               	decf	?___aldiv& (0+255),w,b
  1227  0011AA  6EAF               	movwf	4015,c	;volatile
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;UART_Driver.c: 213: if (interrupts) {
  1231  0011AC  51B2               	movf	D_UART_Init@interrupts& (0+255),w,b
  1232  0011AE  B4D8               	btfsc	status,2,c
  1233  0011B0  0012               	return	
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1237  0011B2  8ED0               	bsf	4048,7,c	;volatile
  1238                           
  1239                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1240  0011B4  8EF2               	bsf	intcon,7,c	;volatile
  1241                           
  1242                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1243  0011B6  8CF2               	bsf	intcon,6,c	;volatile
  1244                           
  1245                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1246  0011B8  9A9E               	bcf	3998,5,c	;volatile
  1247                           
  1248                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1249  0011BA  9A9F               	bcf	3999,5,c	;volatile
  1250                           
  1251                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1252  0011BC  8A9D               	bsf	3997,5,c	;volatile
  1253  0011BE  0012               	return	
  1254  0011C0                     __end_of_D_UART_Init:
  1255                           	opt stack 0
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           intcon	equ	0xFF2
  1261                           postinc0	equ	0xFEE
  1262                           plusw0	equ	0xFEB
  1263                           wreg	equ	0xFE8
  1264                           postdec1	equ	0xFE5
  1265                           fsr1l	equ	0xFE1
  1266                           indf2	equ	0xFDF
  1267                           plusw2	equ	0xFDB
  1268                           fsr2h	equ	0xFDA
  1269                           fsr2l	equ	0xFD9
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function ___aldiv *****************
  1273 ;; Defined at:
  1274 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  dividend        4    0[BANK0 ] long 
  1277 ;;  divisor         4    4[BANK0 ] long 
  1278 ;; Auto vars:     Size  Location     Type
  1279 ;;  quotient        4   10[BANK0 ] long 
  1280 ;;  sign            1    9[BANK0 ] unsigned char 
  1281 ;;  counter         1    8[BANK0 ] unsigned char 
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  4    0[BANK0 ] long 
  1284 ;; Registers used:
  1285 ;;		wreg, status,2, status,0
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1291 ;;      Params:         0       8       0       0       0       0       0       0       0
  1292 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1294 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1295 ;;Total ram usage:       14 bytes
  1296 ;; Hardware stack levels used:    1
  1297 ;; Hardware stack levels required when called:    7
  1298 ;; This function calls:
  1299 ;;		Nothing
  1300 ;; This function is called by:
  1301 ;;		_D_UART_Init
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305                           	psect	text4
  1306  000F88                     __ptext4:
  1307                           	opt stack 0
  1308  000F88                     ___aldiv:
  1309                           	opt stack 22
  1310                           
  1311                           ; BSR set to: 0
  1312                           ;incstack = 0
  1313  000F88  0E00               	movlw	0
  1314  000F8A  0100               	movlb	0	; () banked
  1315  000F8C  6FA9               	movwf	___aldiv@sign& (0+255),b
  1316                           
  1317                           ; BSR set to: 0
  1318  000F8E  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1319  000F90  D00A               	goto	l339
  1320                           
  1321                           ; BSR set to: 0
  1322  000F92  1FA7               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1323  000F94  1FA6               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1324  000F96  1FA5               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1325  000F98  6DA4               	negf	___aldiv@divisor& (0+255),b
  1326  000F9A  0E00               	movlw	0
  1327  000F9C  23A5               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1328  000F9E  23A6               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1329  000FA0  23A7               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1330                           
  1331                           ; BSR set to: 0
  1332  000FA2  0E01               	movlw	1
  1333  000FA4  6FA9               	movwf	___aldiv@sign& (0+255),b
  1334  000FA6                     l339:
  1335                           
  1336                           ; BSR set to: 0
  1337                           
  1338                           ; BSR set to: 0
  1339  000FA6  AFA3               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1340  000FA8  D00A               	goto	l340
  1341                           
  1342                           ; BSR set to: 0
  1343  000FAA  1FA3               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1344  000FAC  1FA2               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1345  000FAE  1FA1               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1346  000FB0  6DA0               	negf	___aldiv@dividend& (0+255),b
  1347  000FB2  0E00               	movlw	0
  1348  000FB4  23A1               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1349  000FB6  23A2               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1350  000FB8  23A3               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1351                           
  1352                           ; BSR set to: 0
  1353  000FBA  0E01               	movlw	1
  1354  000FBC  1BA9               	xorwf	___aldiv@sign& (0+255),f,b
  1355  000FBE                     l340:
  1356                           
  1357                           ; BSR set to: 0
  1358                           
  1359                           ; BSR set to: 0
  1360  000FBE  0E00               	movlw	0
  1361  000FC0  6FAA               	movwf	___aldiv@quotient& (0+255),b
  1362  000FC2  0E00               	movlw	0
  1363  000FC4  6FAB               	movwf	(___aldiv@quotient+1)& (0+255),b
  1364  000FC6  0E00               	movlw	0
  1365  000FC8  6FAC               	movwf	(___aldiv@quotient+2)& (0+255),b
  1366  000FCA  0E00               	movlw	0
  1367  000FCC  6FAD               	movwf	(___aldiv@quotient+3)& (0+255),b
  1368                           
  1369                           ; BSR set to: 0
  1370  000FCE  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1371  000FD0  11A5               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1372  000FD2  11A6               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1373  000FD4  11A7               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1374  000FD6  B4D8               	btfsc	status,2,c
  1375  000FD8  D02A               	goto	l347
  1376                           
  1377                           ; BSR set to: 0
  1378  000FDA  0E01               	movlw	1
  1379  000FDC  6FA8               	movwf	___aldiv@counter& (0+255),b
  1380  000FDE  D006               	goto	l342
  1381  000FE0                     
  1382                           ; BSR set to: 0
  1383                           
  1384                           ; BSR set to: 0
  1385  000FE0  90D8               	bcf	status,0,c
  1386  000FE2  37A4               	rlcf	___aldiv@divisor& (0+255),f,b
  1387  000FE4  37A5               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1388  000FE6  37A6               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1389  000FE8  37A7               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1390  000FEA  2BA8               	incf	___aldiv@counter& (0+255),f,b
  1391  000FEC                     l342:
  1392                           
  1393                           ; BSR set to: 0
  1394                           
  1395                           ; BSR set to: 0
  1396  000FEC  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1397  000FEE  D7F8               	goto	l343
  1398  000FF0                     u1060:
  1399                           
  1400                           ; BSR set to: 0
  1401                           
  1402                           ; BSR set to: 0
  1403                           
  1404                           ; BSR set to: 0
  1405  000FF0  90D8               	bcf	status,0,c
  1406  000FF2  37AA               	rlcf	___aldiv@quotient& (0+255),f,b
  1407  000FF4  37AB               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1408  000FF6  37AC               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1409  000FF8  37AD               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1410                           
  1411                           ; BSR set to: 0
  1412  000FFA  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1413  000FFC  5DA0               	subwf	___aldiv@dividend& (0+255),w,b
  1414  000FFE  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1415  001000  59A1               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1416  001002  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1417  001004  59A2               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1418  001006  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1419  001008  59A3               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1420  00100A  A0D8               	btfss	status,0,c
  1421  00100C  D009               	goto	l346
  1422                           
  1423                           ; BSR set to: 0
  1424  00100E  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1425  001010  5FA0               	subwf	___aldiv@dividend& (0+255),f,b
  1426  001012  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1427  001014  5BA1               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1428  001016  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1429  001018  5BA2               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1430  00101A  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1431  00101C  5BA3               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1432                           
  1433                           ; BSR set to: 0
  1434  00101E  81AA               	bsf	___aldiv@quotient& (0+255),0,b
  1435  001020                     l346:
  1436                           
  1437                           ; BSR set to: 0
  1438                           
  1439                           ; BSR set to: 0
  1440  001020  90D8               	bcf	status,0,c
  1441  001022  33A7               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1442  001024  33A6               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1443  001026  33A5               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1444  001028  33A4               	rrcf	___aldiv@divisor& (0+255),f,b
  1445                           
  1446                           ; BSR set to: 0
  1447  00102A  2FA8               	decfsz	___aldiv@counter& (0+255),f,b
  1448  00102C  D7E1               	goto	u1060
  1449  00102E                     l347:
  1450                           
  1451                           ; BSR set to: 0
  1452                           
  1453                           ; BSR set to: 0
  1454                           
  1455                           ; BSR set to: 0
  1456  00102E  51A9               	movf	___aldiv@sign& (0+255),w,b
  1457  001030  B4D8               	btfsc	status,2,c
  1458  001032  D008               	goto	l348
  1459                           
  1460                           ; BSR set to: 0
  1461  001034  1FAD               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1462  001036  1FAC               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1463  001038  1FAB               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1464  00103A  6DAA               	negf	___aldiv@quotient& (0+255),b
  1465  00103C  0E00               	movlw	0
  1466  00103E  23AB               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1467  001040  23AC               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1468  001042  23AD               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1469  001044                     l348:
  1470                           
  1471                           ; BSR set to: 0
  1472                           
  1473                           ; BSR set to: 0
  1474  001044  C0AA  F0A0         	movff	___aldiv@quotient,?___aldiv
  1475  001048  C0AB  F0A1         	movff	___aldiv@quotient+1,?___aldiv+1
  1476  00104C  C0AC  F0A2         	movff	___aldiv@quotient+2,?___aldiv+2
  1477  001050  C0AD  F0A3         	movff	___aldiv@quotient+3,?___aldiv+3
  1478  001054  0012               	return	
  1479  001056                     __end_of___aldiv:
  1480                           	opt stack 0
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           intcon	equ	0xFF2
  1486                           postinc0	equ	0xFEE
  1487                           plusw0	equ	0xFEB
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           indf2	equ	0xFDF
  1492                           plusw2	equ	0xFDB
  1493                           fsr2h	equ	0xFDA
  1494                           fsr2l	equ	0xFD9
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function _D_UART_Enable *****************
  1498 ;; Defined at:
  1499 ;;		line 244 in file "Drivers/UART_Driver.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  enable          1    wreg     unsigned char 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  enable          1    0[BANK0 ] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, status,2
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        1 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    7
  1520 ;; This function calls:
  1521 ;;		Nothing
  1522 ;; This function is called by:
  1523 ;;		_D_UART_Init
  1524 ;;		_main
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text5
  1529  001516                     __ptext5:
  1530                           	opt stack 0
  1531  001516                     _D_UART_Enable:
  1532                           	opt stack 22
  1533                           
  1534                           ; BSR set to: 0
  1535                           ;incstack = 0
  1536                           ;D_UART_Enable@enable stored from wreg
  1537  001516  0100               	movlb	0	; () banked
  1538  001518  6FA0               	movwf	D_UART_Enable@enable& (0+255),b
  1539                           
  1540                           ;UART_Driver.c: 245: if(enable) {
  1541  00151A  0100               	movlb	0	; () banked
  1542  00151C  51A0               	movf	D_UART_Enable@enable& (0+255),w,b
  1543  00151E  B4D8               	btfsc	status,2,c
  1544  001520  D006               	goto	l167
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  1548  001522  9E94               	bcf	3988,7,c	;volatile
  1549                           
  1550                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  1551  001524  8C94               	bsf	3988,6,c	;volatile
  1552                           
  1553                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  1554  001526  8AAC               	bsf	4012,5,c	;volatile
  1555                           
  1556                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  1557  001528  88AB               	bsf	4011,4,c	;volatile
  1558                           
  1559                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  1560  00152A  8EAB               	bsf	4011,7,c	;volatile
  1561                           
  1562                           ;UART_Driver.c: 251: } else {
  1563  00152C  0012               	return	
  1564  00152E                     l167:
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  1568  00152E  9E94               	bcf	3988,7,c	;volatile
  1569                           
  1570                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  1571  001530  9C94               	bcf	3988,6,c	;volatile
  1572                           
  1573                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  1574  001532  9AAC               	bcf	4012,5,c	;volatile
  1575                           
  1576                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  1577  001534  98AB               	bcf	4011,4,c	;volatile
  1578                           
  1579                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  1580  001536  9EAB               	bcf	4011,7,c	;volatile
  1581  001538  0012               	return	
  1582  00153A                     __end_of_D_UART_Enable:
  1583                           	opt stack 0
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           intcon	equ	0xFF2
  1589                           postinc0	equ	0xFEE
  1590                           plusw0	equ	0xFEB
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           indf2	equ	0xFDF
  1595                           plusw2	equ	0xFDB
  1596                           fsr2h	equ	0xFDA
  1597                           fsr2l	equ	0xFD9
  1598                           status	equ	0xFD8
  1599                           
  1600 ;; *************** function _D_TMR0_Init *****************
  1601 ;; Defined at:
  1602 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;		None
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1616 ;;      Params:         0       0       0       0       0       0       0       0       0
  1617 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1618 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1619 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1620 ;;Total ram usage:        0 bytes
  1621 ;; Hardware stack levels used:    1
  1622 ;; Hardware stack levels required when called:    8
  1623 ;; This function calls:
  1624 ;;		_D_TMR0_Enable
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text6
  1631  00153A                     __ptext6:
  1632                           	opt stack 0
  1633  00153A                     _D_TMR0_Init:
  1634                           	opt stack 22
  1635                           
  1636                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;incstack = 0
  1640  00153A  0E00               	movlw	0
  1641  00153C  ECBE  F00A         	call	_D_TMR0_Enable
  1642                           
  1643                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1644  001540  9CD5               	bcf	4053,6,c	;volatile
  1645                           
  1646                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1647  001542  9AD5               	bcf	4053,5,c	;volatile
  1648                           
  1649                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1650  001544  98D5               	bcf	4053,4,c	;volatile
  1651                           
  1652                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1653  001546  96D5               	bcf	4053,3,c	;volatile
  1654                           
  1655                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1656  001548  50D5               	movf	4053,w,c	;volatile
  1657  00154A  0BF8               	andlw	-8
  1658  00154C  0902               	iorlw	2
  1659  00154E  6ED5               	movwf	4053,c	;volatile
  1660                           
  1661                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1662  001550  8ED0               	bsf	4048,7,c	;volatile
  1663                           
  1664                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1665  001552  8EF2               	bsf	intcon,7,c	;volatile
  1666                           
  1667                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1668  001554  8CF2               	bsf	intcon,6,c	;volatile
  1669                           
  1670                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1671  001556  94F2               	bcf	intcon,2,c	;volatile
  1672                           
  1673                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1674  001558  84F1               	bsf	intcon2,2,c	;volatile
  1675                           
  1676                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1677  00155A  8AF2               	bsf	intcon,5,c	;volatile
  1678  00155C  0012               	return		;funcret
  1679  00155E                     __end_of_D_TMR0_Init:
  1680                           	opt stack 0
  1681                           tblptru	equ	0xFF8
  1682                           tblptrh	equ	0xFF7
  1683                           tblptrl	equ	0xFF6
  1684                           tablat	equ	0xFF5
  1685                           intcon	equ	0xFF2
  1686                           intcon2	equ	0xFF1
  1687                           postinc0	equ	0xFEE
  1688                           plusw0	equ	0xFEB
  1689                           wreg	equ	0xFE8
  1690                           postdec1	equ	0xFE5
  1691                           fsr1l	equ	0xFE1
  1692                           indf2	equ	0xFDF
  1693                           plusw2	equ	0xFDB
  1694                           fsr2h	equ	0xFDA
  1695                           fsr2l	equ	0xFD9
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _D_TMR0_Enable *****************
  1699 ;; Defined at:
  1700 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  enable          1    wreg     unsigned char 
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  enable          1    0[BANK0 ] unsigned char 
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg, status,2
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1714 ;;      Params:         0       0       0       0       0       0       0       0       0
  1715 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1717 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1718 ;;Total ram usage:        1 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    7
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_D_TMR0_Init
  1725 ;;		_main
  1726 ;; This function uses a non-reentrant model
  1727 ;;
  1728                           
  1729                           	psect	text7
  1730  00157C                     __ptext7:
  1731                           	opt stack 0
  1732  00157C                     _D_TMR0_Enable:
  1733                           	opt stack 22
  1734                           
  1735                           ;incstack = 0
  1736                           ;D_TMR0_Enable@enable stored from wreg
  1737  00157C  0100               	movlb	0	; () banked
  1738  00157E  6FA0               	movwf	D_TMR0_Enable@enable& (0+255),b
  1739                           
  1740                           ;TMR0_Driver.c: 54: if (enable) {
  1741  001580  0100               	movlb	0	; () banked
  1742  001582  51A0               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1743  001584  B4D8               	btfsc	status,2,c
  1744  001586  D002               	goto	l194
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1748  001588  8ED5               	bsf	4053,7,c	;volatile
  1749                           
  1750                           ;TMR0_Driver.c: 56: } else {
  1751  00158A  0012               	return	
  1752  00158C                     l194:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1756  00158C  9ED5               	bcf	4053,7,c	;volatile
  1757  00158E  0012               	return	
  1758  001590                     __end_of_D_TMR0_Enable:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           tblptrh	equ	0xFF7
  1762                           tblptrl	equ	0xFF6
  1763                           tablat	equ	0xFF5
  1764                           intcon	equ	0xFF2
  1765                           intcon2	equ	0xFF1
  1766                           postinc0	equ	0xFEE
  1767                           plusw0	equ	0xFEB
  1768                           wreg	equ	0xFE8
  1769                           postdec1	equ	0xFE5
  1770                           fsr1l	equ	0xFE1
  1771                           indf2	equ	0xFDF
  1772                           plusw2	equ	0xFDB
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _D_PORT_Init *****************
  1778 ;; Defined at:
  1779 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;		None
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;		None
  1784 ;; Return value:  Size  Location     Type
  1785 ;;                  1    wreg      void 
  1786 ;; Registers used:
  1787 ;;		wreg, status,2
  1788 ;; Tracked objects:
  1789 ;;		On entry : 0/0
  1790 ;;		On exit  : 0/0
  1791 ;;		Unchanged: 0/0
  1792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1793 ;;      Params:         0       0       0       0       0       0       0       0       0
  1794 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1795 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1796 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1797 ;;Total ram usage:        0 bytes
  1798 ;; Hardware stack levels used:    1
  1799 ;; Hardware stack levels required when called:    7
  1800 ;; This function calls:
  1801 ;;		Nothing
  1802 ;; This function is called by:
  1803 ;;		_main
  1804 ;; This function uses a non-reentrant model
  1805 ;;
  1806                           
  1807                           	psect	text8
  1808  00155E                     __ptext8:
  1809                           	opt stack 0
  1810  00155E                     _D_PORT_Init:
  1811                           	opt stack 23
  1812                           
  1813                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;incstack = 0
  1817  00155E  0E00               	movlw	0
  1818  001560  6E92               	movwf	3986,c	;volatile
  1819  001562  0E00               	movlw	0
  1820  001564  6E80               	movwf	3968,c	;volatile
  1821                           
  1822                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1823  001566  0E00               	movlw	0
  1824  001568  6E93               	movwf	3987,c	;volatile
  1825  00156A  0E00               	movlw	0
  1826  00156C  6E81               	movwf	3969,c	;volatile
  1827                           
  1828                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1829  00156E  0E00               	movlw	0
  1830  001570  6E94               	movwf	3988,c	;volatile
  1831  001572  0E00               	movlw	0
  1832  001574  6E82               	movwf	3970,c	;volatile
  1833                           
  1834                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1835  001576  0E0F               	movlw	15
  1836  001578  6EC1               	movwf	4033,c	;volatile
  1837  00157A  0012               	return		;funcret
  1838  00157C                     __end_of_D_PORT_Init:
  1839                           	opt stack 0
  1840                           tblptru	equ	0xFF8
  1841                           tblptrh	equ	0xFF7
  1842                           tblptrl	equ	0xFF6
  1843                           tablat	equ	0xFF5
  1844                           intcon	equ	0xFF2
  1845                           intcon2	equ	0xFF1
  1846                           postinc0	equ	0xFEE
  1847                           plusw0	equ	0xFEB
  1848                           wreg	equ	0xFE8
  1849                           postdec1	equ	0xFE5
  1850                           fsr1l	equ	0xFE1
  1851                           indf2	equ	0xFDF
  1852                           plusw2	equ	0xFDB
  1853                           fsr2h	equ	0xFDA
  1854                           fsr2l	equ	0xFD9
  1855                           status	equ	0xFD8
  1856                           
  1857 ;; *************** function _C_DOOR_UnlockAll *****************
  1858 ;; Defined at:
  1859 ;;		line 87 in file "Controllers/DOOR_Controller.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;		None
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;		None
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      void 
  1866 ;; Registers used:
  1867 ;;		wreg, fsr2l, fsr2h
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1873 ;;      Params:         0       0       0       0       0       0       0       0       0
  1874 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1876 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1877 ;;Total ram usage:        0 bytes
  1878 ;; Hardware stack levels used:    1
  1879 ;; Hardware stack levels required when called:    7
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_main
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text9
  1888  001590                     __ptext9:
  1889                           	opt stack 0
  1890  001590                     _C_DOOR_UnlockAll:
  1891                           	opt stack 23
  1892                           
  1893                           ;DOOR_Controller.c: 92: *doors[0].lock_port &= 0x3F;
  1894                           
  1895                           ;incstack = 0
  1896  001590  C062  FFD9         	movff	_doors+2,fsr2l
  1897  001594  C063  FFDA         	movff	_doors+3,fsr2h
  1898  001598  0E3F               	movlw	63
  1899  00159A  16DF               	andwf	indf2,f,c
  1900  00159C  0012               	return		;funcret
  1901  00159E                     __end_of_C_DOOR_UnlockAll:
  1902                           	opt stack 0
  1903                           tblptru	equ	0xFF8
  1904                           tblptrh	equ	0xFF7
  1905                           tblptrl	equ	0xFF6
  1906                           tablat	equ	0xFF5
  1907                           intcon	equ	0xFF2
  1908                           intcon2	equ	0xFF1
  1909                           postinc0	equ	0xFEE
  1910                           plusw0	equ	0xFEB
  1911                           wreg	equ	0xFE8
  1912                           postdec1	equ	0xFE5
  1913                           fsr1l	equ	0xFE1
  1914                           indf2	equ	0xFDF
  1915                           plusw2	equ	0xFDB
  1916                           fsr2h	equ	0xFDA
  1917                           fsr2l	equ	0xFD9
  1918                           status	equ	0xFD8
  1919                           
  1920 ;; *************** function _C_DOOR_SendStates *****************
  1921 ;; Defined at:
  1922 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  1923 ;; Parameters:    Size  Location     Type
  1924 ;;		None
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  com             3   25[BANK0 ] unsigned char [3]
  1927 ;;  mes             2   28[BANK0 ] unsigned char [2]
  1928 ;;  d               1   30[BANK0 ] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1938 ;;      Params:         0       0       0       0       0       0       0       0       0
  1939 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1940 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1941 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1942 ;;Total ram usage:        8 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:   11
  1945 ;; This function calls:
  1946 ;;		_D_UART_Write
  1947 ;;		_commandAndMessage
  1948 ;; This function is called by:
  1949 ;;		_main
  1950 ;; This function uses a non-reentrant model
  1951 ;;
  1952                           
  1953                           	psect	text10
  1954  001056                     __ptext10:
  1955                           	opt stack 0
  1956  001056                     _C_DOOR_SendStates:
  1957                           	opt stack 19
  1958                           
  1959                           ;DOOR_Controller.c: 103: uint8_t d;
  1960                           ;DOOR_Controller.c: 104: for (d = 0; d < 5; d++) {
  1961                           
  1962                           ;incstack = 0
  1963  001056  0E00               	movlw	0
  1964  001058  0100               	movlb	0	; () banked
  1965  00105A  6FBE               	movwf	C_DOOR_SendStates@d& (0+255),b
  1966  00105C                     l1657:
  1967                           
  1968                           ; BSR set to: 0
  1969  00105C  0E04               	movlw	4
  1970  00105E  65BE               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  1971  001060  D001               	goto	l42
  1972  001062  0012               	return	
  1973  001064                     l42:
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;DOOR_Controller.c: 105: if (doors[d].was_open != doors[d].is_open) {
  1977                           
  1978                           ; BSR set to: 0
  1979  001064  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1980  001066  0D0A               	mullw	10
  1981  001068  0E06               	movlw	6
  1982  00106A  26F3               	addwf	prodl,f,c
  1983  00106C  0E00               	movlw	0
  1984  00106E  22F4               	addwfc	prodh,f,c
  1985  001070  0E60               	movlw	low _doors
  1986  001072  24F3               	addwf	prodl,w,c
  1987  001074  6ED9               	movwf	fsr2l,c
  1988  001076  0E00               	movlw	high _doors
  1989  001078  20F4               	addwfc	prodh,w,c
  1990  00107A  6EDA               	movwf	fsr2h,c
  1991  00107C  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1992  00107E  0D0A               	mullw	10
  1993  001080  0E05               	movlw	5
  1994  001082  26F3               	addwf	prodl,f,c
  1995  001084  0E00               	movlw	0
  1996  001086  22F4               	addwfc	prodh,f,c
  1997  001088  0E60               	movlw	low _doors
  1998  00108A  24F3               	addwf	prodl,w,c
  1999  00108C  6EE1               	movwf	fsr1l,c
  2000  00108E  0E00               	movlw	high _doors
  2001  001090  20F4               	addwfc	prodh,w,c
  2002  001092  6EE2               	movwf	fsr1h,c
  2003  001094  50DE               	movf	postinc2,w,c
  2004  001096  18E6               	xorwf	postinc1,w,c
  2005  001098  B4D8               	btfsc	status,2,c
  2006  00109A  D03F               	goto	l44
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;DOOR_Controller.c: 107: char com[3];
  2010                           ;DOOR_Controller.c: 108: char mes[2];
  2011                           ;DOOR_Controller.c: 109: commandAndMessage(doors[d], com, mes);
  2012  00109C  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2013  00109E  0D0A               	mullw	10
  2014  0010A0  0E60               	movlw	low _doors
  2015  0010A2  24F3               	addwf	prodl,w,c
  2016  0010A4  6ED9               	movwf	fsr2l,c
  2017  0010A6  0E00               	movlw	high _doors
  2018  0010A8  20F4               	addwfc	prodh,w,c
  2019  0010AA  6EDA               	movwf	fsr2h,c
  2020  0010AC  EE00  F0A0         	lfsr	0,commandAndMessage@door
  2021  0010B0  0E09               	movlw	9
  2022  0010B2                     u1161:
  2023  0010B2  CFDB FFEB          	movff	plusw2,plusw0
  2024  0010B6  06E8               	decf	wreg,f,c
  2025  0010B8  E2FC               	bc	u1161
  2026  0010BA  0EB9               	movlw	low C_DOOR_SendStates@com
  2027  0010BC  6FAA               	movwf	commandAndMessage@com& (0+255),b
  2028  0010BE  0E00               	movlw	high C_DOOR_SendStates@com
  2029  0010C0  6FAB               	movwf	(commandAndMessage@com+1)& (0+255),b
  2030  0010C2  0EBC               	movlw	low C_DOOR_SendStates@mes
  2031  0010C4  6FAC               	movwf	commandAndMessage@mes& (0+255),b
  2032  0010C6  0E00               	movlw	high C_DOOR_SendStates@mes
  2033  0010C8  6FAD               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2034  0010CA  EC25  F00A         	call	_commandAndMessage	;wreg free
  2035                           
  2036                           ;DOOR_Controller.c: 112: D_UART_Write(com, mes);
  2037  0010CE  0EB9               	movlw	low C_DOOR_SendStates@com
  2038  0010D0  0100               	movlb	0	; () banked
  2039  0010D2  6FB2               	movwf	D_UART_Write@command& (0+255),b
  2040  0010D4  0E00               	movlw	high C_DOOR_SendStates@com
  2041  0010D6  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
  2042  0010D8  0EBC               	movlw	low C_DOOR_SendStates@mes
  2043  0010DA  6FB4               	movwf	D_UART_Write@data& (0+255),b
  2044  0010DC  0E00               	movlw	high C_DOOR_SendStates@mes
  2045  0010DE  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
  2046  0010E0  EC54  F007         	call	_D_UART_Write	;wreg free
  2047                           
  2048                           ;DOOR_Controller.c: 114: doors[d].was_open = doors[d].is_open;
  2049  0010E4  0100               	movlb	0	; () banked
  2050  0010E6  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2051  0010E8  0D0A               	mullw	10
  2052  0010EA  0E06               	movlw	6
  2053  0010EC  26F3               	addwf	prodl,f,c
  2054  0010EE  0E00               	movlw	0
  2055  0010F0  22F4               	addwfc	prodh,f,c
  2056  0010F2  0E60               	movlw	low _doors
  2057  0010F4  24F3               	addwf	prodl,w,c
  2058  0010F6  6ED9               	movwf	fsr2l,c
  2059  0010F8  0E00               	movlw	high _doors
  2060  0010FA  20F4               	addwfc	prodh,w,c
  2061  0010FC  6EDA               	movwf	fsr2h,c
  2062  0010FE  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2063  001100  0D0A               	mullw	10
  2064  001102  0E05               	movlw	5
  2065  001104  26F3               	addwf	prodl,f,c
  2066  001106  0E00               	movlw	0
  2067  001108  22F4               	addwfc	prodh,f,c
  2068  00110A  0E60               	movlw	low _doors
  2069  00110C  24F3               	addwf	prodl,w,c
  2070  00110E  6EE1               	movwf	fsr1l,c
  2071  001110  0E00               	movlw	high _doors
  2072  001112  20F4               	addwfc	prodh,w,c
  2073  001114  6EE2               	movwf	fsr1h,c
  2074  001116  CFDF FFE7          	movff	indf2,indf1
  2075  00111A                     l44:
  2076                           
  2077                           ; BSR set to: 0
  2078                           
  2079                           ; BSR set to: 0
  2080  00111A  2BBE               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2081  00111C  D79F               	goto	l1657
  2082  00111E                     __end_of_C_DOOR_SendStates:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           prodh	equ	0xFF4
  2089                           prodl	equ	0xFF3
  2090                           intcon	equ	0xFF2
  2091                           intcon2	equ	0xFF1
  2092                           postinc0	equ	0xFEE
  2093                           plusw0	equ	0xFEB
  2094                           wreg	equ	0xFE8
  2095                           indf1	equ	0xFE7
  2096                           postinc1	equ	0xFE6
  2097                           postdec1	equ	0xFE5
  2098                           fsr1h	equ	0xFE2
  2099                           fsr1l	equ	0xFE1
  2100                           indf2	equ	0xFDF
  2101                           postinc2	equ	0xFDE
  2102                           plusw2	equ	0xFDB
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _commandAndMessage *****************
  2108 ;; Defined at:
  2109 ;;		line 26 in file "Controllers/DOOR_Controller.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  door           10    0[BANK0 ] struct .
  2112 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2113 ;;		 -> C_DOOR_SendStates@com(3), 
  2114 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2115 ;;		 -> C_DOOR_SendStates@mes(2), 
  2116 ;; Auto vars:     Size  Location     Type
  2117 ;;		None
  2118 ;; Return value:  Size  Location     Type
  2119 ;;                  1    wreg      void 
  2120 ;; Registers used:
  2121 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2122 ;; Tracked objects:
  2123 ;;		On entry : 0/0
  2124 ;;		On exit  : 0/0
  2125 ;;		Unchanged: 0/0
  2126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2127 ;;      Params:         0      14       0       0       0       0       0       0       0
  2128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2130 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2131 ;;Total ram usage:       14 bytes
  2132 ;; Hardware stack levels used:    1
  2133 ;; Hardware stack levels required when called:    7
  2134 ;; This function calls:
  2135 ;;		Nothing
  2136 ;; This function is called by:
  2137 ;;		_C_DOOR_SendStates
  2138 ;; This function uses a non-reentrant model
  2139 ;;
  2140                           
  2141                           	psect	text11
  2142  00144A                     __ptext11:
  2143                           	opt stack 0
  2144  00144A                     _commandAndMessage:
  2145                           	opt stack 22
  2146                           
  2147                           ;DOOR_Controller.c: 28: com[0] = 'P';
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;incstack = 0
  2151  00144A  C0AA  FFD9         	movff	commandAndMessage@com,fsr2l
  2152  00144E  C0AB  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2153  001452  0E50               	movlw	80
  2154  001454  6EDF               	movwf	indf2,c
  2155                           
  2156                           ;DOOR_Controller.c: 29: com[1] = door.id + 0x30;
  2157  001456  0100               	movlb	0	; () banked
  2158  001458  EE20 F001          	lfsr	2,1
  2159  00145C  51AA               	movf	commandAndMessage@com& (0+255),w,b
  2160  00145E  26D9               	addwf	fsr2l,f,c
  2161  001460  51AB               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2162  001462  22DA               	addwfc	fsr2h,f,c
  2163  001464  51A0               	movf	commandAndMessage@door& (0+255),w,b
  2164  001466  0F30               	addlw	48
  2165  001468  6EDF               	movwf	indf2,c
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;DOOR_Controller.c: 30: com[2] = '\0';
  2169  00146A  EE20 F002          	lfsr	2,2
  2170  00146E  51AA               	movf	commandAndMessage@com& (0+255),w,b
  2171  001470  26D9               	addwf	fsr2l,f,c
  2172  001472  51AB               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2173  001474  22DA               	addwfc	fsr2h,f,c
  2174  001476  0E00               	movlw	0
  2175  001478  6EDF               	movwf	indf2,c
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;DOOR_Controller.c: 33: mes[0] = door.is_open + 0x30;
  2179  00147A  51A6               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2180  00147C  0F30               	addlw	48
  2181  00147E  C0AC  FFD9         	movff	commandAndMessage@mes,fsr2l
  2182  001482  C0AD  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2183  001486  6EDF               	movwf	indf2,c
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;DOOR_Controller.c: 34: mes[1] = '\0';
  2187  001488  EE20 F001          	lfsr	2,1
  2188  00148C  51AC               	movf	commandAndMessage@mes& (0+255),w,b
  2189  00148E  26D9               	addwf	fsr2l,f,c
  2190  001490  51AD               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2191  001492  22DA               	addwfc	fsr2h,f,c
  2192  001494  0E00               	movlw	0
  2193  001496  6EDF               	movwf	indf2,c
  2194                           
  2195                           ; BSR set to: 0
  2196  001498  0012               	return		;funcret
  2197  00149A                     __end_of_commandAndMessage:
  2198                           	opt stack 0
  2199                           tblptru	equ	0xFF8
  2200                           tblptrh	equ	0xFF7
  2201                           tblptrl	equ	0xFF6
  2202                           tablat	equ	0xFF5
  2203                           prodh	equ	0xFF4
  2204                           prodl	equ	0xFF3
  2205                           intcon	equ	0xFF2
  2206                           intcon2	equ	0xFF1
  2207                           postinc0	equ	0xFEE
  2208                           plusw0	equ	0xFEB
  2209                           wreg	equ	0xFE8
  2210                           indf1	equ	0xFE7
  2211                           postinc1	equ	0xFE6
  2212                           postdec1	equ	0xFE5
  2213                           fsr1h	equ	0xFE2
  2214                           fsr1l	equ	0xFE1
  2215                           indf2	equ	0xFDF
  2216                           postinc2	equ	0xFDE
  2217                           plusw2	equ	0xFDB
  2218                           fsr2h	equ	0xFDA
  2219                           fsr2l	equ	0xFD9
  2220                           status	equ	0xFD8
  2221                           
  2222 ;; *************** function _D_UART_Write *****************
  2223 ;; Defined at:
  2224 ;;		line 223 in file "Drivers/UART_Driver.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2227 ;;		 -> STR_15(2), STR_9(2), C_DOOR_SendStates@com(3), 
  2228 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2229 ;;		 -> STR_16(2), STR_10(2), C_DOOR_SendStates@mes(2), 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2241 ;;      Params:         0       4       0       0       0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2243 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2244 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2245 ;;Total ram usage:        5 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:   10
  2248 ;; This function calls:
  2249 ;;		_printf
  2250 ;; This function is called by:
  2251 ;;		_C_DOOR_SendStates
  2252 ;;		_main
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text12
  2257  000EA8                     __ptext12:
  2258                           	opt stack 0
  2259  000EA8                     _D_UART_Write:
  2260                           	opt stack 20
  2261                           
  2262                           ;UART_Driver.c: 224: printf(startCharacter);
  2263                           
  2264                           ; BSR set to: 0
  2265                           ;incstack = 0
  2266  000EA8  C041  F0A7         	movff	_startCharacter,printf@f
  2267  000EAC  C042  F0A8         	movff	_startCharacter+1,printf@f+1
  2268  000EB0  0100               	movlb	0	; () banked
  2269  000EB2  51A7               	movf	printf@f& (0+255),w,b
  2270  000EB4  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2271  000EB6  A4D8               	btfss	status,2,c
  2272  000EB8  0E00               	movlw	low (__mediumconst shr (0+16))
  2273  000EBA  6FA9               	movwf	(printf@f+2)& (0+255),b
  2274  000EBC  ECE8  F004         	call	_printf	;wreg free
  2275                           
  2276                           ;UART_Driver.c: 226: printf(messageCharacter);
  2277  000EC0  C0C4  F0A7         	movff	_messageCharacter,printf@f
  2278  000EC4  C0C5  F0A8         	movff	_messageCharacter+1,printf@f+1
  2279  000EC8  0100               	movlb	0	; () banked
  2280  000ECA  51A7               	movf	printf@f& (0+255),w,b
  2281  000ECC  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2282  000ECE  A4D8               	btfss	status,2,c
  2283  000ED0  0E00               	movlw	low (__mediumconst shr (0+16))
  2284  000ED2  6FA9               	movwf	(printf@f+2)& (0+255),b
  2285  000ED4  ECE8  F004         	call	_printf	;wreg free
  2286                           
  2287                           ;UART_Driver.c: 227: printf(deviceName);
  2288  000ED8  C0C1  F0A7         	movff	_deviceName,printf@f
  2289  000EDC  C0C2  F0A8         	movff	_deviceName+1,printf@f+1
  2290  000EE0  C0C3  F0A9         	movff	_deviceName+2,printf@f+2
  2291  000EE4  ECE8  F004         	call	_printf	;wreg free
  2292                           
  2293                           ;UART_Driver.c: 229: printf(":");printf(command);
  2294  000EE8  0E35               	movlw	low STR_6
  2295  000EEA  0100               	movlb	0	; () banked
  2296  000EEC  6FA7               	movwf	printf@f& (0+255),b
  2297  000EEE  0E08               	movlw	high STR_6
  2298  000EF0  6FA8               	movwf	(printf@f+1)& (0+255),b
  2299  000EF2  51A7               	movf	printf@f& (0+255),w,b
  2300  000EF4  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2301  000EF6  A4D8               	btfss	status,2,c
  2302  000EF8  0E00               	movlw	low (__mediumconst shr (0+16))
  2303  000EFA  6FA9               	movwf	(printf@f+2)& (0+255),b
  2304  000EFC  ECE8  F004         	call	_printf	;wreg free
  2305  000F00  C0B2  F0A7         	movff	D_UART_Write@command,printf@f
  2306  000F04  C0B3  F0A8         	movff	D_UART_Write@command+1,printf@f+1
  2307  000F08  0100               	movlb	0	; () banked
  2308  000F0A  6BA9               	clrf	(printf@f+2)& (0+255),b
  2309  000F0C  51A7               	movf	printf@f& (0+255),w,b
  2310  000F0E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2311  000F10  B4D8               	btfsc	status,2,c
  2312  000F12  D005               	goto	u991
  2313  000F14  0E07               	movlw	(high __ramtop+-1)
  2314  000F16  65B3               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2315  000F18  D001               	goto	u9911
  2316  000F1A  D001               	goto	u991
  2317  000F1C                     u9911:
  2318  000F1C  8BA9               	bsf	(printf@f+2)& (0+255),5,b
  2319  000F1E                     u991:
  2320  000F1E  ECE8  F004         	call	_printf	;wreg free
  2321                           
  2322                           ;UART_Driver.c: 231: printf(":");printf(data);
  2323  000F22  0E35               	movlw	low STR_6
  2324  000F24  0100               	movlb	0	; () banked
  2325  000F26  6FA7               	movwf	printf@f& (0+255),b
  2326  000F28  0E08               	movlw	high STR_6
  2327  000F2A  6FA8               	movwf	(printf@f+1)& (0+255),b
  2328  000F2C  51A7               	movf	printf@f& (0+255),w,b
  2329  000F2E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2330  000F30  A4D8               	btfss	status,2,c
  2331  000F32  0E00               	movlw	low (__mediumconst shr (0+16))
  2332  000F34  6FA9               	movwf	(printf@f+2)& (0+255),b
  2333  000F36  ECE8  F004         	call	_printf	;wreg free
  2334  000F3A  C0B4  F0A7         	movff	D_UART_Write@data,printf@f
  2335  000F3E  C0B5  F0A8         	movff	D_UART_Write@data+1,printf@f+1
  2336  000F42  0100               	movlb	0	; () banked
  2337  000F44  6BA9               	clrf	(printf@f+2)& (0+255),b
  2338  000F46  51A7               	movf	printf@f& (0+255),w,b
  2339  000F48  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2340  000F4A  B4D8               	btfsc	status,2,c
  2341  000F4C  D005               	goto	u1001
  2342  000F4E  0E07               	movlw	(high __ramtop+-1)
  2343  000F50  65B5               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2344  000F52  D001               	goto	u10011
  2345  000F54  D001               	goto	u1001
  2346  000F56                     u10011:
  2347  000F56  8BA9               	bsf	(printf@f+2)& (0+255),5,b
  2348  000F58                     u1001:
  2349  000F58  ECE8  F004         	call	_printf	;wreg free
  2350                           
  2351                           ;UART_Driver.c: 233: printf(stopCharacter);
  2352  000F5C  C03F  F0A7         	movff	_stopCharacter,printf@f
  2353  000F60  C040  F0A8         	movff	_stopCharacter+1,printf@f+1
  2354  000F64  0100               	movlb	0	; () banked
  2355  000F66  51A7               	movf	printf@f& (0+255),w,b
  2356  000F68  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2357  000F6A  A4D8               	btfss	status,2,c
  2358  000F6C  0E00               	movlw	low (__mediumconst shr (0+16))
  2359  000F6E  6FA9               	movwf	(printf@f+2)& (0+255),b
  2360  000F70  ECE8  F004         	call	_printf	;wreg free
  2361                           
  2362                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(16000000/4000.0)));
  2363  000F74  0E06               	movlw	6
  2364  000F76  0100               	movlb	0	; () banked
  2365  000F78  6FB6               	movwf	??_D_UART_Write& (0+255),b
  2366  000F7A  0E30               	movlw	48
  2367  000F7C                     u1507:
  2368  000F7C  2EE8               	decfsz	wreg,f,c
  2369  000F7E  D7FE               	bra	u1507
  2370  000F80  2FB6               	decfsz	??_D_UART_Write& (0+255),f,b
  2371  000F82  D7FC               	bra	u1507
  2372  000F84  F000               	nop	
  2373  000F86  0012               	return		;funcret
  2374  000F88                     __end_of_D_UART_Write:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           tblptrh	equ	0xFF7
  2378                           tblptrl	equ	0xFF6
  2379                           tablat	equ	0xFF5
  2380                           prodh	equ	0xFF4
  2381                           prodl	equ	0xFF3
  2382                           intcon	equ	0xFF2
  2383                           intcon2	equ	0xFF1
  2384                           postinc0	equ	0xFEE
  2385                           plusw0	equ	0xFEB
  2386                           wreg	equ	0xFE8
  2387                           indf1	equ	0xFE7
  2388                           postinc1	equ	0xFE6
  2389                           postdec1	equ	0xFE5
  2390                           fsr1h	equ	0xFE2
  2391                           fsr1l	equ	0xFE1
  2392                           indf2	equ	0xFDF
  2393                           postinc2	equ	0xFDE
  2394                           plusw2	equ	0xFDB
  2395                           fsr2h	equ	0xFDA
  2396                           fsr2l	equ	0xFD9
  2397                           status	equ	0xFD8
  2398                           
  2399 ;; *************** function _printf *****************
  2400 ;; Defined at:
  2401 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2402 ;; Parameters:    Size  Location     Type
  2403 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2404 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  2405 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  2406 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  2407 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  idx             1   13[BANK0 ] unsigned char 
  2410 ;;  tmpval          4    0        struct .
  2411 ;;  cp              3    0        PTR const unsigned char 
  2412 ;;  val             2   14[BANK0 ] unsigned int 
  2413 ;;  ap              2   11[BANK0 ] PTR void [1]
  2414 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2415 ;;  len             2    0        unsigned int 
  2416 ;;  c               1   17[BANK0 ] char 
  2417 ;;  prec            1   16[BANK0 ] char 
  2418 ;;  flag            1   10[BANK0 ] unsigned char 
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  2    7[BANK0 ] int 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2428 ;;      Params:         0       3       0       0       0       0       0       0       0
  2429 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2431 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2432 ;;Total ram usage:       11 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    9
  2435 ;; This function calls:
  2436 ;;		___lwdiv
  2437 ;;		_putch
  2438 ;; This function is called by:
  2439 ;;		_D_UART_Write
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442                           
  2443                           	psect	text13
  2444  0009D0                     __ptext13:
  2445                           	opt stack 0
  2446  0009D0                     _printf:
  2447                           	opt stack 20
  2448                           
  2449                           ;doprnt.c: 466: va_list ap;
  2450                           ;doprnt.c: 499: signed char c;
  2451                           ;doprnt.c: 506: signed char prec;
  2452                           ;doprnt.c: 508: unsigned char flag;
  2453                           ;doprnt.c: 523: union {
  2454                           ;doprnt.c: 524: unsigned long vd;
  2455                           ;doprnt.c: 525: double integ;
  2456                           ;doprnt.c: 526: } tmpval;
  2457                           ;doprnt.c: 528: unsigned int val;
  2458                           ;doprnt.c: 529: unsigned len;
  2459                           ;doprnt.c: 530: const char * cp;
  2460                           ;doprnt.c: 533: *ap = __va_start();
  2461                           
  2462                           ;incstack = 0
  2463  0009D0  0EAA               	movlw	low (?_printf+3)
  2464  0009D2  0100               	movlb	0	; () banked
  2465  0009D4  6FAB               	movwf	printf@ap& (0+255),b
  2466  0009D6  0E00               	movlw	high (?_printf+3)
  2467  0009D8  6FAC               	movwf	(printf@ap+1)& (0+255),b
  2468                           
  2469                           ;doprnt.c: 536: while(c = *f++) {
  2470  0009DA  D08B               	goto	u880
  2471  0009DC                     
  2472                           ; BSR set to: 0
  2473                           ;doprnt.c: 538: if(c != '%')
  2474                           
  2475                           ; BSR set to: 0
  2476  0009DC  0E25               	movlw	37
  2477  0009DE  19B1               	xorwf	printf@c& (0+255),w,b
  2478  0009E0  B4D8               	btfsc	status,2,c
  2479  0009E2  D004               	goto	l269
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 540: {
  2483                           ;doprnt.c: 541: (putch(c) );
  2484  0009E4  51B1               	movf	printf@c& (0+255),w,b
  2485  0009E6  ECCF  F00A         	call	_putch
  2486                           
  2487                           ;doprnt.c: 542: continue;
  2488  0009EA  D083               	goto	u880
  2489  0009EC                     l269:
  2490                           
  2491                           ;doprnt.c: 543: }
  2492                           ;doprnt.c: 548: flag = 0;
  2493  0009EC  0E00               	movlw	0
  2494  0009EE  0100               	movlb	0	; () banked
  2495  0009F0  6FAA               	movwf	printf@flag& (0+255),b
  2496                           
  2497                           ;doprnt.c: 635: switch(c = *f++) {
  2498  0009F2  D004               	goto	l270
  2499  0009F4                     
  2500                           ; BSR set to: 0
  2501                           ;doprnt.c: 809: (putch(c) );
  2502                           
  2503                           ; BSR set to: 0
  2504  0009F4  51B1               	movf	printf@c& (0+255),w,b
  2505  0009F6  ECCF  F00A         	call	_putch
  2506                           
  2507                           ;doprnt.c: 810: continue;
  2508  0009FA  D07B               	goto	u880
  2509  0009FC                     l270:
  2510  0009FC  C0A7  FFF6         	movff	printf@f,tblptrl
  2511  000A00  C0A8  FFF7         	movff	printf@f+1,tblptrh
  2512  000A04  C0A9  FFF8         	movff	printf@f+2,tblptru
  2513  000A08  0E01               	movlw	1
  2514  000A0A  0100               	movlb	0	; () banked
  2515  000A0C  27A7               	addwf	printf@f& (0+255),f,b
  2516  000A0E  0E00               	movlw	0
  2517  000A10  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2518  000A12  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2519  000A14  BAF8               	btfsc	tblptru,5,c
  2520  000A16  D003               	bra	u847
  2521  000A18  0008               	tblrd		*
  2522  000A1A  50F5               	movf	tablat,w,c
  2523  000A1C  D005               	bra	u840
  2524  000A1E                     u847:
  2525  000A1E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2526  000A22  CFF7 FFEA          	movff	tblptrh,fsr0h
  2527  000A26  50EF               	movf	indf0,w,c
  2528  000A28                     u840:
  2529  000A28  0100               	movlb	0	; () banked
  2530  000A2A  6FB1               	movwf	printf@c& (0+255),b
  2531  000A2C  51B1               	movf	printf@c& (0+255),w,b
  2532                           
  2533                           ; Switch size 1, requested type "space"
  2534                           ; Number of cases is 2, Range of values is 0 to 120
  2535                           ; switch strategies available:
  2536                           ; Name         Instructions Cycles
  2537                           ; simple_byte            7     4 (average)
  2538                           ;	Chosen strategy is simple_byte
  2539  000A2E  0A00               	xorlw	0	; case 0
  2540  000A30  B4D8               	btfsc	status,2,c
  2541  000A32  0012               	return	
  2542  000A34  0A78               	xorlw	120	; case 120
  2543  000A36  A4D8               	btfss	status,2,c
  2544  000A38  D7DD               	goto	l275
  2545                           
  2546                           ;doprnt.c: 1273: {
  2547                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2548                           
  2549                           ; BSR set to: 0
  2550  000A3A  C0AB  FFD9         	movff	printf@ap,fsr2l
  2551  000A3E  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  2552  000A42  CFDE F0AE          	movff	postinc2,printf@val
  2553  000A46  CFDD F0AF          	movff	postdec2,printf@val+1
  2554  000A4A  0E02               	movlw	2
  2555  000A4C  0100               	movlb	0	; () banked
  2556  000A4E  27AB               	addwf	printf@ap& (0+255),f,b
  2557  000A50  0E00               	movlw	0
  2558  000A52  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;doprnt.c: 1287: }
  2562                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2563  000A54  0E01               	movlw	1
  2564  000A56  6FB1               	movwf	printf@c& (0+255),b
  2565  000A58  D014               	goto	l1503
  2566  000A5A                     
  2567                           ; BSR set to: 0
  2568                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2569                           
  2570                           ; BSR set to: 0
  2571  000A5A  51B1               	movf	printf@c& (0+255),w,b
  2572  000A5C  0D02               	mullw	2
  2573  000A5E  0E01               	movlw	low _hexpowers
  2574  000A60  24F3               	addwf	prodl,w,c
  2575  000A62  6EF6               	movwf	tblptrl,c
  2576  000A64  0E08               	movlw	high _hexpowers
  2577  000A66  20F4               	addwfc	prodh,w,c
  2578  000A68  6EF7               	movwf	tblptrh,c
  2579  000A6A                     	if	1	;There are 3 active tblptr bytes
  2580  000A6A  6AF8               	clrf	tblptru,c
  2581  000A6C  0E00               	movlw	low (__mediumconst shr (0+16))
  2582  000A6E  22F8               	addwfc	tblptru,f,c
  2583  000A70                     	endif
  2584  000A70  0009               	tblrd		*+
  2585  000A72  50F5               	movf	tablat,w,c
  2586  000A74  5DAE               	subwf	printf@val& (0+255),w,b
  2587  000A76  0009               	tblrd		*+
  2588  000A78  50F5               	movf	tablat,w,c
  2589  000A7A  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  2590  000A7C  A0D8               	btfss	status,0,c
  2591  000A7E  D005               	goto	u870
  2592                           
  2593                           ; BSR set to: 0
  2594                           
  2595                           ; BSR set to: 0
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;doprnt.c: 1318: break;
  2599  000A80  2BB1               	incf	printf@c& (0+255),f,b
  2600  000A82                     l1503:
  2601                           
  2602                           ; BSR set to: 0
  2603  000A82  0E04               	movlw	4
  2604  000A84  19B1               	xorwf	printf@c& (0+255),w,b
  2605  000A86  A4D8               	btfss	status,2,c
  2606  000A88  D7E8               	goto	l276
  2607  000A8A                     u870:
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;doprnt.c: 1422: {
  2611                           ;doprnt.c: 1469: }
  2612                           ;doprnt.c: 1472: prec = c;
  2613  000A8A  C0B1  F0B0         	movff	printf@c,printf@prec
  2614                           
  2615                           ;doprnt.c: 1474: while(prec--) {
  2616  000A8E  D02C               	goto	l279
  2617  000A90                     
  2618                           ; BSR set to: 0
  2619                           ;doprnt.c: 1478: {
  2620                           ;doprnt.c: 1499: {
  2621                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2622                           
  2623                           ; BSR set to: 0
  2624  000A90  C0AE  F0A0         	movff	printf@val,___lwdiv@dividend
  2625  000A94  C0AF  F0A1         	movff	printf@val+1,___lwdiv@dividend+1
  2626  000A98  51B0               	movf	printf@prec& (0+255),w,b
  2627  000A9A  0D02               	mullw	2
  2628  000A9C  0E01               	movlw	low _hexpowers
  2629  000A9E  24F3               	addwf	prodl,w,c
  2630  000AA0  6EF6               	movwf	tblptrl,c
  2631  000AA2  0E08               	movlw	high _hexpowers
  2632  000AA4  20F4               	addwfc	prodh,w,c
  2633  000AA6  6EF7               	movwf	tblptrh,c
  2634  000AA8                     	if	1	;There are 3 active tblptr bytes
  2635  000AA8  6AF8               	clrf	tblptru,c
  2636  000AAA  0E00               	movlw	low (__mediumconst shr (0+16))
  2637  000AAC  22F8               	addwfc	tblptru,f,c
  2638  000AAE                     	endif
  2639  000AAE  0009               	tblrd		*+
  2640  000AB0  CFF5 F0A2          	movff	tablat,___lwdiv@divisor
  2641  000AB4  000A               	tblrd		*-
  2642  000AB6  CFF5 F0A3          	movff	tablat,___lwdiv@divisor+1
  2643  000ABA  ECD2  F009         	call	___lwdiv	;wreg free
  2644  000ABE  0100               	movlb	0	; () banked
  2645  000AC0  51A0               	movf	?___lwdiv& (0+255),w,b
  2646  000AC2  0B0F               	andlw	15
  2647  000AC4  6FAD               	movwf	printf@idx& (0+255),b
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2651  000AC6  51AD               	movf	printf@idx& (0+255),w,b
  2652  000AC8  0D01               	mullw	1
  2653  000ACA  0E09               	movlw	low STR_17
  2654  000ACC  24F3               	addwf	prodl,w,c
  2655  000ACE  6EF6               	movwf	tblptrl,c
  2656  000AD0  0E08               	movlw	high STR_17
  2657  000AD2  20F4               	addwfc	prodh,w,c
  2658  000AD4  6EF7               	movwf	tblptrh,c
  2659  000AD6                     	if	1	;There are 3 active tblptr bytes
  2660  000AD6  6AF8               	clrf	tblptru,c
  2661  000AD8  0E00               	movlw	low (__mediumconst shr (0+16))
  2662  000ADA  22F8               	addwfc	tblptru,f,c
  2663  000ADC                     	endif
  2664  000ADC  0008               	tblrd		*
  2665  000ADE  CFF5 F0B1          	movff	tablat,printf@c
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;doprnt.c: 1508: }
  2669                           ;doprnt.c: 1523: }
  2670                           ;doprnt.c: 1524: (putch(c) );
  2671  000AE2  51B1               	movf	printf@c& (0+255),w,b
  2672  000AE4  ECCF  F00A         	call	_putch
  2673  000AE8                     l279:
  2674  000AE8  0100               	movlb	0	; () banked
  2675  000AEA  07B0               	decf	printf@prec& (0+255),f,b
  2676  000AEC  29B0               	incf	printf@prec& (0+255),w,b
  2677  000AEE  A4D8               	btfss	status,2,c
  2678  000AF0  D7CF               	goto	l280
  2679  000AF2                     u880:
  2680                           
  2681                           ; BSR set to: 0
  2682                           
  2683                           ; BSR set to: 0
  2684  000AF2  C0A7  FFF6         	movff	printf@f,tblptrl
  2685  000AF6  C0A8  FFF7         	movff	printf@f+1,tblptrh
  2686  000AFA  C0A9  FFF8         	movff	printf@f+2,tblptru
  2687  000AFE  0E01               	movlw	1
  2688  000B00  0100               	movlb	0	; () banked
  2689  000B02  27A7               	addwf	printf@f& (0+255),f,b
  2690  000B04  0E00               	movlw	0
  2691  000B06  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2692  000B08  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2693  000B0A  BAF8               	btfsc	tblptru,5,c
  2694  000B0C  D003               	bra	u897
  2695  000B0E  0008               	tblrd		*
  2696  000B10  50F5               	movf	tablat,w,c
  2697  000B12  D005               	bra	u890
  2698  000B14                     u897:
  2699  000B14  CFF6 FFE9          	movff	tblptrl,fsr0l
  2700  000B18  CFF7 FFEA          	movff	tblptrh,fsr0h
  2701  000B1C  50EF               	movf	indf0,w,c
  2702  000B1E                     u890:
  2703  000B1E  0100               	movlb	0	; () banked
  2704  000B20  6FB1               	movwf	printf@c& (0+255),b
  2705  000B22  51B1               	movf	printf@c& (0+255),w,b
  2706  000B24  B4D8               	btfsc	status,2,c
  2707  000B26  0012               	return	
  2708  000B28  D759               	goto	l268
  2709  000B2A                     __end_of_printf:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           intcon	equ	0xFF2
  2718                           intcon2	equ	0xFF1
  2719                           indf0	equ	0xFEF
  2720                           postinc0	equ	0xFEE
  2721                           plusw0	equ	0xFEB
  2722                           fsr0h	equ	0xFEA
  2723                           fsr0l	equ	0xFE9
  2724                           wreg	equ	0xFE8
  2725                           indf1	equ	0xFE7
  2726                           postinc1	equ	0xFE6
  2727                           postdec1	equ	0xFE5
  2728                           fsr1h	equ	0xFE2
  2729                           fsr1l	equ	0xFE1
  2730                           indf2	equ	0xFDF
  2731                           postinc2	equ	0xFDE
  2732                           postdec2	equ	0xFDD
  2733                           plusw2	equ	0xFDB
  2734                           fsr2h	equ	0xFDA
  2735                           fsr2l	equ	0xFD9
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _putch *****************
  2739 ;; Defined at:
  2740 ;;		line 260 in file "Drivers/UART_Driver.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  data            1    wreg     unsigned char 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  data            1    1[BANK0 ] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2754 ;;      Params:         0       0       0       0       0       0       0       0       0
  2755 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2757 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2758 ;;Total ram usage:        1 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    8
  2761 ;; This function calls:
  2762 ;;		_writeByte
  2763 ;; This function is called by:
  2764 ;;		_printf
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text14
  2769  00159E                     __ptext14:
  2770                           	opt stack 0
  2771  00159E                     _putch:
  2772                           	opt stack 20
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;incstack = 0
  2776                           ;putch@data stored from wreg
  2777  00159E  0100               	movlb	0	; () banked
  2778  0015A0  6FA1               	movwf	putch@data& (0+255),b
  2779                           
  2780                           ;UART_Driver.c: 261: writeByte(data);
  2781  0015A2  0100               	movlb	0	; () banked
  2782  0015A4  51A1               	movf	putch@data& (0+255),w,b
  2783  0015A6  ECD6  F00A         	call	_writeByte
  2784  0015AA  0012               	return		;funcret
  2785  0015AC                     __end_of_putch:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           intcon2	equ	0xFF1
  2795                           indf0	equ	0xFEF
  2796                           postinc0	equ	0xFEE
  2797                           plusw0	equ	0xFEB
  2798                           fsr0h	equ	0xFEA
  2799                           fsr0l	equ	0xFE9
  2800                           wreg	equ	0xFE8
  2801                           indf1	equ	0xFE7
  2802                           postinc1	equ	0xFE6
  2803                           postdec1	equ	0xFE5
  2804                           fsr1h	equ	0xFE2
  2805                           fsr1l	equ	0xFE1
  2806                           indf2	equ	0xFDF
  2807                           postinc2	equ	0xFDE
  2808                           postdec2	equ	0xFDD
  2809                           plusw2	equ	0xFDB
  2810                           fsr2h	equ	0xFDA
  2811                           fsr2l	equ	0xFD9
  2812                           status	equ	0xFD8
  2813                           
  2814 ;; *************** function _writeByte *****************
  2815 ;; Defined at:
  2816 ;;		line 69 in file "Drivers/UART_Driver.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  data            1    wreg     unsigned char 
  2819 ;; Auto vars:     Size  Location     Type
  2820 ;;  data            1    0[BANK0 ] unsigned char 
  2821 ;; Return value:  Size  Location     Type
  2822 ;;                  1    wreg      void 
  2823 ;; Registers used:
  2824 ;;		wreg
  2825 ;; Tracked objects:
  2826 ;;		On entry : 0/0
  2827 ;;		On exit  : 0/0
  2828 ;;		Unchanged: 0/0
  2829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2830 ;;      Params:         0       0       0       0       0       0       0       0       0
  2831 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2832 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2833 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2834 ;;Total ram usage:        1 bytes
  2835 ;; Hardware stack levels used:    1
  2836 ;; Hardware stack levels required when called:    7
  2837 ;; This function calls:
  2838 ;;		Nothing
  2839 ;; This function is called by:
  2840 ;;		_putch
  2841 ;; This function uses a non-reentrant model
  2842 ;;
  2843                           
  2844                           	psect	text15
  2845  0015AC                     __ptext15:
  2846                           	opt stack 0
  2847  0015AC                     _writeByte:
  2848                           	opt stack 20
  2849                           
  2850                           ;incstack = 0
  2851                           ;writeByte@data stored from wreg
  2852  0015AC  0100               	movlb	0	; () banked
  2853  0015AE  6FA0               	movwf	writeByte@data& (0+255),b
  2854  0015B0                     
  2855                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2856  0015B0  A2AC               	btfss	4012,1,c	;volatile
  2857  0015B2  D7FE               	goto	l1417
  2858                           
  2859                           ;UART_Driver.c: 71: TXREG = data;
  2860  0015B4  C0A0  FFAD         	movff	writeByte@data,4013	;volatile
  2861  0015B8  0012               	return		;funcret
  2862  0015BA                     __end_of_writeByte:
  2863                           	opt stack 0
  2864                           tblptru	equ	0xFF8
  2865                           tblptrh	equ	0xFF7
  2866                           tblptrl	equ	0xFF6
  2867                           tablat	equ	0xFF5
  2868                           prodh	equ	0xFF4
  2869                           prodl	equ	0xFF3
  2870                           intcon	equ	0xFF2
  2871                           intcon2	equ	0xFF1
  2872                           indf0	equ	0xFEF
  2873                           postinc0	equ	0xFEE
  2874                           plusw0	equ	0xFEB
  2875                           fsr0h	equ	0xFEA
  2876                           fsr0l	equ	0xFE9
  2877                           wreg	equ	0xFE8
  2878                           indf1	equ	0xFE7
  2879                           postinc1	equ	0xFE6
  2880                           postdec1	equ	0xFE5
  2881                           fsr1h	equ	0xFE2
  2882                           fsr1l	equ	0xFE1
  2883                           indf2	equ	0xFDF
  2884                           postinc2	equ	0xFDE
  2885                           postdec2	equ	0xFDD
  2886                           plusw2	equ	0xFDB
  2887                           fsr2h	equ	0xFDA
  2888                           fsr2l	equ	0xFD9
  2889                           status	equ	0xFD8
  2890                           
  2891 ;; *************** function ___lwdiv *****************
  2892 ;; Defined at:
  2893 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2894 ;; Parameters:    Size  Location     Type
  2895 ;;  dividend        2    0[BANK0 ] unsigned int 
  2896 ;;  divisor         2    2[BANK0 ] unsigned int 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  quotient        2    4[BANK0 ] unsigned int 
  2899 ;;  counter         1    6[BANK0 ] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  2    0[BANK0 ] unsigned int 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2909 ;;      Params:         0       4       0       0       0       0       0       0       0
  2910 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2912 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2913 ;;Total ram usage:        7 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    7
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_printf
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922                           
  2923                           	psect	text16
  2924  0013A4                     __ptext16:
  2925                           	opt stack 0
  2926  0013A4                     ___lwdiv:
  2927                           	opt stack 21
  2928                           
  2929                           ;incstack = 0
  2930  0013A4  0E00               	movlw	0
  2931  0013A6  0100               	movlb	0	; () banked
  2932  0013A8  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2933  0013AA  0E00               	movlw	0
  2934  0013AC  6FA4               	movwf	___lwdiv@quotient& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937  0013AE  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2938  0013B0  11A3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2939  0013B2  B4D8               	btfsc	status,2,c
  2940  0013B4  D01C               	goto	l692
  2941                           
  2942                           ; BSR set to: 0
  2943  0013B6  0E01               	movlw	1
  2944  0013B8  6FA6               	movwf	___lwdiv@counter& (0+255),b
  2945  0013BA  D004               	goto	l687
  2946  0013BC                     
  2947                           ; BSR set to: 0
  2948                           
  2949                           ; BSR set to: 0
  2950  0013BC  90D8               	bcf	status,0,c
  2951  0013BE  37A2               	rlcf	___lwdiv@divisor& (0+255),f,b
  2952  0013C0  37A3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2953  0013C2  2BA6               	incf	___lwdiv@counter& (0+255),f,b
  2954  0013C4                     l687:
  2955                           
  2956                           ; BSR set to: 0
  2957                           
  2958                           ; BSR set to: 0
  2959  0013C4  AFA3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2960  0013C6  D7FA               	goto	l688
  2961  0013C8                     u780:
  2962                           
  2963                           ; BSR set to: 0
  2964                           
  2965                           ; BSR set to: 0
  2966                           
  2967                           ; BSR set to: 0
  2968  0013C8  90D8               	bcf	status,0,c
  2969  0013CA  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
  2970  0013CC  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2971                           
  2972                           ; BSR set to: 0
  2973  0013CE  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2974  0013D0  5DA0               	subwf	___lwdiv@dividend& (0+255),w,b
  2975  0013D2  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2976  0013D4  59A1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2977  0013D6  A0D8               	btfss	status,0,c
  2978  0013D8  D005               	goto	l691
  2979                           
  2980                           ; BSR set to: 0
  2981  0013DA  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2982  0013DC  5FA0               	subwf	___lwdiv@dividend& (0+255),f,b
  2983  0013DE  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2984  0013E0  5BA1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2985                           
  2986                           ; BSR set to: 0
  2987  0013E2  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
  2988  0013E4                     l691:
  2989                           
  2990                           ; BSR set to: 0
  2991                           
  2992                           ; BSR set to: 0
  2993  0013E4  90D8               	bcf	status,0,c
  2994  0013E6  33A3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2995  0013E8  33A2               	rrcf	___lwdiv@divisor& (0+255),f,b
  2996                           
  2997                           ; BSR set to: 0
  2998  0013EA  2FA6               	decfsz	___lwdiv@counter& (0+255),f,b
  2999  0013EC  D7ED               	goto	u780
  3000  0013EE                     l692:
  3001                           
  3002                           ; BSR set to: 0
  3003                           
  3004                           ; BSR set to: 0
  3005  0013EE  C0A4  F0A0         	movff	___lwdiv@quotient,?___lwdiv
  3006  0013F2  C0A5  F0A1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3007                           
  3008                           ; BSR set to: 0
  3009  0013F6  0012               	return		;funcret
  3010  0013F8                     __end_of___lwdiv:
  3011                           	opt stack 0
  3012                           tblptru	equ	0xFF8
  3013                           tblptrh	equ	0xFF7
  3014                           tblptrl	equ	0xFF6
  3015                           tablat	equ	0xFF5
  3016                           prodh	equ	0xFF4
  3017                           prodl	equ	0xFF3
  3018                           intcon	equ	0xFF2
  3019                           intcon2	equ	0xFF1
  3020                           indf0	equ	0xFEF
  3021                           postinc0	equ	0xFEE
  3022                           plusw0	equ	0xFEB
  3023                           fsr0h	equ	0xFEA
  3024                           fsr0l	equ	0xFE9
  3025                           wreg	equ	0xFE8
  3026                           indf1	equ	0xFE7
  3027                           postinc1	equ	0xFE6
  3028                           postdec1	equ	0xFE5
  3029                           fsr1h	equ	0xFE2
  3030                           fsr1l	equ	0xFE1
  3031                           indf2	equ	0xFDF
  3032                           postinc2	equ	0xFDE
  3033                           postdec2	equ	0xFDD
  3034                           plusw2	equ	0xFDB
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _C_DOOR_ReadSensors *****************
  3040 ;; Defined at:
  3041 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  d               1    4[BANK0 ] unsigned char 
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0
  3056 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3057 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3058 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3059 ;;Total ram usage:        5 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    7
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text17
  3070  001262                     __ptext17:
  3071                           	opt stack 0
  3072  001262                     _C_DOOR_ReadSensors:
  3073                           	opt stack 23
  3074                           
  3075                           ;DOOR_Controller.c: 96: uint8_t d;
  3076                           ;DOOR_Controller.c: 97: for (d = 0; d < 5; d++) {
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;incstack = 0
  3080  001262  0E00               	movlw	0
  3081  001264  0100               	movlb	0	; () banked
  3082  001266  6FA4               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3083  001268                     l1645:
  3084                           
  3085                           ; BSR set to: 0
  3086  001268  0E04               	movlw	4
  3087  00126A  65A4               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  3088  00126C  D001               	goto	l37
  3089  00126E  0012               	return	
  3090  001270                     l37:
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;DOOR_Controller.c: 98: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pin
      +                          ) & 0x01;
  3094                           
  3095                           ; BSR set to: 0
  3096  001270  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3097  001272  0D0A               	mullw	10
  3098  001274  0E06               	movlw	6
  3099  001276  26F3               	addwf	prodl,f,c
  3100  001278  0E00               	movlw	0
  3101  00127A  22F4               	addwfc	prodh,f,c
  3102  00127C  0E60               	movlw	low _doors
  3103  00127E  24F3               	addwf	prodl,w,c
  3104  001280  6ED9               	movwf	fsr2l,c
  3105  001282  0E00               	movlw	high _doors
  3106  001284  20F4               	addwfc	prodh,w,c
  3107  001286  6EDA               	movwf	fsr2h,c
  3108  001288  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3109  00128A  0D0A               	mullw	10
  3110  00128C  0E09               	movlw	9
  3111  00128E  26F3               	addwf	prodl,f,c
  3112  001290  0E00               	movlw	0
  3113  001292  22F4               	addwfc	prodh,f,c
  3114  001294  0E60               	movlw	low _doors
  3115  001296  24F3               	addwf	prodl,w,c
  3116  001298  6EE1               	movwf	fsr1l,c
  3117  00129A  0E00               	movlw	high _doors
  3118  00129C  20F4               	addwfc	prodh,w,c
  3119  00129E  6EE2               	movwf	fsr1h,c
  3120  0012A0  50E7               	movf	indf1,w,c
  3121  0012A2  6FA0               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3122  0012A4  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3123  0012A6  0D0A               	mullw	10
  3124  0012A8  0E07               	movlw	7
  3125  0012AA  26F3               	addwf	prodl,f,c
  3126  0012AC  0E00               	movlw	0
  3127  0012AE  22F4               	addwfc	prodh,f,c
  3128  0012B0  0E60               	movlw	low _doors
  3129  0012B2  24F3               	addwf	prodl,w,c
  3130  0012B4  6EE1               	movwf	fsr1l,c
  3131  0012B6  0E00               	movlw	high _doors
  3132  0012B8  20F4               	addwfc	prodh,w,c
  3133  0012BA  6EE2               	movwf	fsr1h,c
  3134  0012BC  CFE6 F0A1          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3135  0012C0  CFE5 F0A2          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3136  0012C4  C0A1  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3137  0012C8  C0A2  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3138  0012CC  50E7               	movf	indf1,w,c
  3139  0012CE  6FA3               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3140  0012D0  2BA0               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3141  0012D2  D002               	goto	u1124
  3142  0012D4                     u1125:
  3143  0012D4  90D8               	bcf	status,0,c
  3144  0012D6  33A3               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3145  0012D8                     u1124:
  3146  0012D8  2FA0               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3147  0012DA  D7FC               	goto	u1125
  3148  0012DC  0100               	movlb	0	; () banked
  3149  0012DE  51A3               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3150  0012E0  0B01               	andlw	1
  3151  0012E2  6EDF               	movwf	indf2,c
  3152                           
  3153                           ; BSR set to: 0
  3154  0012E4  2BA4               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3155  0012E6  D7C0               	goto	l1645
  3156  0012E8                     __end_of_C_DOOR_ReadSensors:
  3157                           	opt stack 0
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           intcon2	equ	0xFF1
  3166                           indf0	equ	0xFEF
  3167                           postinc0	equ	0xFEE
  3168                           plusw0	equ	0xFEB
  3169                           fsr0h	equ	0xFEA
  3170                           fsr0l	equ	0xFE9
  3171                           wreg	equ	0xFE8
  3172                           indf1	equ	0xFE7
  3173                           postinc1	equ	0xFE6
  3174                           postdec1	equ	0xFE5
  3175                           fsr1h	equ	0xFE2
  3176                           fsr1l	equ	0xFE1
  3177                           indf2	equ	0xFDF
  3178                           postinc2	equ	0xFDE
  3179                           postdec2	equ	0xFDD
  3180                           plusw2	equ	0xFDB
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185 ;; *************** function _C_DOOR_LockAll *****************
  3186 ;; Defined at:
  3187 ;;		line 70 in file "Controllers/DOOR_Controller.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;		None
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;		None
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr2l, fsr2h
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3201 ;;      Params:         0       0       0       0       0       0       0       0       0
  3202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3205 ;;Total ram usage:        0 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    7
  3208 ;; This function calls:
  3209 ;;		Nothing
  3210 ;; This function is called by:
  3211 ;;		_main
  3212 ;; This function uses a non-reentrant model
  3213 ;;
  3214                           
  3215                           	psect	text18
  3216  0015BA                     __ptext18:
  3217                           	opt stack 0
  3218  0015BA                     _C_DOOR_LockAll:
  3219                           	opt stack 23
  3220                           
  3221                           ;DOOR_Controller.c: 75: *doors[0].lock_port |= 0xC0;
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;incstack = 0
  3225  0015BA  C062  FFD9         	movff	_doors+2,fsr2l
  3226  0015BE  C063  FFDA         	movff	_doors+3,fsr2h
  3227  0015C2  0EC0               	movlw	192
  3228  0015C4  12DF               	iorwf	indf2,f,c
  3229  0015C6  0012               	return		;funcret
  3230  0015C8                     __end_of_C_DOOR_LockAll:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodh	equ	0xFF4
  3237                           prodl	equ	0xFF3
  3238                           intcon	equ	0xFF2
  3239                           intcon2	equ	0xFF1
  3240                           indf0	equ	0xFEF
  3241                           postinc0	equ	0xFEE
  3242                           plusw0	equ	0xFEB
  3243                           fsr0h	equ	0xFEA
  3244                           fsr0l	equ	0xFE9
  3245                           wreg	equ	0xFE8
  3246                           indf1	equ	0xFE7
  3247                           postinc1	equ	0xFE6
  3248                           postdec1	equ	0xFE5
  3249                           fsr1h	equ	0xFE2
  3250                           fsr1l	equ	0xFE1
  3251                           indf2	equ	0xFDF
  3252                           postinc2	equ	0xFDE
  3253                           postdec2	equ	0xFDD
  3254                           plusw2	equ	0xFDB
  3255                           fsr2h	equ	0xFDA
  3256                           fsr2l	equ	0xFD9
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _C_DOOR_Init *****************
  3260 ;; Defined at:
  3261 ;;		line 40 in file "Controllers/DOOR_Controller.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  d               1    0[BANK0 ] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      void 
  3268 ;; Registers used:
  3269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3275 ;;      Params:         0       0       0       0       0       0       0       0       0
  3276 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3277 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3278 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3279 ;;Total ram usage:        1 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:    7
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text19
  3290  000DAE                     __ptext19:
  3291                           	opt stack 0
  3292  000DAE                     _C_DOOR_Init:
  3293                           	opt stack 23
  3294                           
  3295                           ;DOOR_Controller.c: 42: TRISB &= 0x3F;
  3296                           
  3297                           ;incstack = 0
  3298  000DAE  0E3F               	movlw	63
  3299  000DB0  1693               	andwf	3987,f,c	;volatile
  3300                           
  3301                           ;DOOR_Controller.c: 43: TRISB |= 0x3F;
  3302  000DB2  0E3F               	movlw	63
  3303  000DB4  1293               	iorwf	3987,f,c	;volatile
  3304                           
  3305                           ;DOOR_Controller.c: 46: uint8_t d;
  3306                           ;DOOR_Controller.c: 47: for (d = 0; d < 5; d++) {
  3307  000DB6  0E00               	movlw	0
  3308  000DB8  0100               	movlb	0	; () banked
  3309  000DBA  6FA0               	movwf	C_DOOR_Init@d& (0+255),b
  3310  000DBC                     l1629:
  3311                           
  3312                           ; BSR set to: 0
  3313  000DBC  0E04               	movlw	4
  3314  000DBE  65A0               	cpfsgt	C_DOOR_Init@d& (0+255),b
  3315  000DC0  D001               	goto	l14
  3316  000DC2  0012               	return	
  3317  000DC4                     l14:
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;DOOR_Controller.c: 48: doors[d].id = d;
  3321                           
  3322                           ; BSR set to: 0
  3323  000DC4  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3324  000DC6  0D0A               	mullw	10
  3325  000DC8  0E60               	movlw	low _doors
  3326  000DCA  24F3               	addwf	prodl,w,c
  3327  000DCC  6ED9               	movwf	fsr2l,c
  3328  000DCE  0E00               	movlw	high _doors
  3329  000DD0  20F4               	addwfc	prodh,w,c
  3330  000DD2  6EDA               	movwf	fsr2h,c
  3331  000DD4  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  3332                           
  3333                           ;DOOR_Controller.c: 50: doors[d].locked = 1;
  3334  000DD8  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3335  000DDA  0D0A               	mullw	10
  3336  000DDC  0E01               	movlw	1
  3337  000DDE  26F3               	addwf	prodl,f,c
  3338  000DE0  0E00               	movlw	0
  3339  000DE2  22F4               	addwfc	prodh,f,c
  3340  000DE4  0E60               	movlw	low _doors
  3341  000DE6  24F3               	addwf	prodl,w,c
  3342  000DE8  6ED9               	movwf	fsr2l,c
  3343  000DEA  0E00               	movlw	high _doors
  3344  000DEC  20F4               	addwfc	prodh,w,c
  3345  000DEE  6EDA               	movwf	fsr2h,c
  3346  000DF0  0E01               	movlw	1
  3347  000DF2  6EDF               	movwf	indf2,c
  3348                           
  3349                           ;DOOR_Controller.c: 51: doors[d].lock_port = &PORTB;
  3350  000DF4  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3351  000DF6  0D0A               	mullw	10
  3352  000DF8  0E02               	movlw	2
  3353  000DFA  26F3               	addwf	prodl,f,c
  3354  000DFC  0E00               	movlw	0
  3355  000DFE  22F4               	addwfc	prodh,f,c
  3356  000E00  0E60               	movlw	low _doors
  3357  000E02  24F3               	addwf	prodl,w,c
  3358  000E04  6ED9               	movwf	fsr2l,c
  3359  000E06  0E00               	movlw	high _doors
  3360  000E08  20F4               	addwfc	prodh,w,c
  3361  000E0A  6EDA               	movwf	fsr2h,c
  3362  000E0C  0E81               	movlw	129
  3363  000E0E  6EDE               	movwf	postinc2,c
  3364  000E10  0E0F               	movlw	15
  3365  000E12  6EDD               	movwf	postdec2,c
  3366                           
  3367                           ;DOOR_Controller.c: 52: doors[d].lock_pin = 7;
  3368  000E14  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3369  000E16  0D0A               	mullw	10
  3370  000E18  0E04               	movlw	4
  3371  000E1A  26F3               	addwf	prodl,f,c
  3372  000E1C  0E00               	movlw	0
  3373  000E1E  22F4               	addwfc	prodh,f,c
  3374  000E20  0E60               	movlw	low _doors
  3375  000E22  24F3               	addwf	prodl,w,c
  3376  000E24  6ED9               	movwf	fsr2l,c
  3377  000E26  0E00               	movlw	high _doors
  3378  000E28  20F4               	addwfc	prodh,w,c
  3379  000E2A  6EDA               	movwf	fsr2h,c
  3380  000E2C  0E07               	movlw	7
  3381  000E2E  6EDF               	movwf	indf2,c
  3382                           
  3383                           ;DOOR_Controller.c: 54: doors[d].is_open = 0;
  3384  000E30  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3385  000E32  0D0A               	mullw	10
  3386  000E34  0E06               	movlw	6
  3387  000E36  26F3               	addwf	prodl,f,c
  3388  000E38  0E00               	movlw	0
  3389  000E3A  22F4               	addwfc	prodh,f,c
  3390  000E3C  0E60               	movlw	low _doors
  3391  000E3E  24F3               	addwf	prodl,w,c
  3392  000E40  6ED9               	movwf	fsr2l,c
  3393  000E42  0E00               	movlw	high _doors
  3394  000E44  20F4               	addwfc	prodh,w,c
  3395  000E46  6EDA               	movwf	fsr2h,c
  3396  000E48  0E00               	movlw	0
  3397  000E4A  6EDF               	movwf	indf2,c
  3398                           
  3399                           ;DOOR_Controller.c: 55: doors[d].was_open = 0;
  3400  000E4C  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3401  000E4E  0D0A               	mullw	10
  3402  000E50  0E05               	movlw	5
  3403  000E52  26F3               	addwf	prodl,f,c
  3404  000E54  0E00               	movlw	0
  3405  000E56  22F4               	addwfc	prodh,f,c
  3406  000E58  0E60               	movlw	low _doors
  3407  000E5A  24F3               	addwf	prodl,w,c
  3408  000E5C  6ED9               	movwf	fsr2l,c
  3409  000E5E  0E00               	movlw	high _doors
  3410  000E60  20F4               	addwfc	prodh,w,c
  3411  000E62  6EDA               	movwf	fsr2h,c
  3412  000E64  0E00               	movlw	0
  3413  000E66  6EDF               	movwf	indf2,c
  3414                           
  3415                           ;DOOR_Controller.c: 56: doors[d].sensor_port = &PORTB;
  3416  000E68  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3417  000E6A  0D0A               	mullw	10
  3418  000E6C  0E07               	movlw	7
  3419  000E6E  26F3               	addwf	prodl,f,c
  3420  000E70  0E00               	movlw	0
  3421  000E72  22F4               	addwfc	prodh,f,c
  3422  000E74  0E60               	movlw	low _doors
  3423  000E76  24F3               	addwf	prodl,w,c
  3424  000E78  6ED9               	movwf	fsr2l,c
  3425  000E7A  0E00               	movlw	high _doors
  3426  000E7C  20F4               	addwfc	prodh,w,c
  3427  000E7E  6EDA               	movwf	fsr2h,c
  3428  000E80  0E81               	movlw	129
  3429  000E82  6EDE               	movwf	postinc2,c
  3430  000E84  0E0F               	movlw	15
  3431  000E86  6EDD               	movwf	postdec2,c
  3432                           
  3433                           ;DOOR_Controller.c: 57: doors[d].sensor_pin = d;
  3434  000E88  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3435  000E8A  0D0A               	mullw	10
  3436  000E8C  0E09               	movlw	9
  3437  000E8E  26F3               	addwf	prodl,f,c
  3438  000E90  0E00               	movlw	0
  3439  000E92  22F4               	addwfc	prodh,f,c
  3440  000E94  0E60               	movlw	low _doors
  3441  000E96  24F3               	addwf	prodl,w,c
  3442  000E98  6ED9               	movwf	fsr2l,c
  3443  000E9A  0E00               	movlw	high _doors
  3444  000E9C  20F4               	addwfc	prodh,w,c
  3445  000E9E  6EDA               	movwf	fsr2h,c
  3446  000EA0  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  3447                           
  3448                           ; BSR set to: 0
  3449  000EA4  2BA0               	incf	C_DOOR_Init@d& (0+255),f,b
  3450  000EA6  D78A               	goto	l1629
  3451  000EA8                     __end_of_C_DOOR_Init:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           tblptrh	equ	0xFF7
  3455                           tblptrl	equ	0xFF6
  3456                           tablat	equ	0xFF5
  3457                           prodh	equ	0xFF4
  3458                           prodl	equ	0xFF3
  3459                           intcon	equ	0xFF2
  3460                           intcon2	equ	0xFF1
  3461                           indf0	equ	0xFEF
  3462                           postinc0	equ	0xFEE
  3463                           plusw0	equ	0xFEB
  3464                           fsr0h	equ	0xFEA
  3465                           fsr0l	equ	0xFE9
  3466                           wreg	equ	0xFE8
  3467                           indf1	equ	0xFE7
  3468                           postinc1	equ	0xFE6
  3469                           postdec1	equ	0xFE5
  3470                           fsr1h	equ	0xFE2
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           plusw2	equ	0xFDB
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _LowISR *****************
  3481 ;; Defined at:
  3482 ;;		line 264 in file "Drivers/UART_Driver.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3496 ;;      Params:         0       0       0       0       0       0       0       0       0
  3497 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3498 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3499 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3500 ;;Total ram usage:       21 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    6
  3503 ;; This function calls:
  3504 ;;		_fillDataBuffer
  3505 ;;		_readByte
  3506 ;; This function is called by:
  3507 ;;		Interrupt level 1
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	intcodelo
  3512  000018                     __pintcodelo:
  3513                           	opt stack 0
  3514  000018                     _LowISR:
  3515                           	opt stack 19
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;incstack = 0
  3519  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3520  00001A  CFD8 F028          	movff	status,??_LowISR
  3521  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3522  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3523  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3524  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3525  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3526  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3527  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3528  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3529  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3530  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3531  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3532  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3533  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3534  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3535  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3536  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3537  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3538  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3539  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3540  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3541                           
  3542                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  3543  00006E  AA9E               	btfss	3998,5,c	;volatile
  3544  000070  D005               	goto	i1l177
  3545                           
  3546                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  3547  000072  ECEF  F00A         	call	_readByte	;wreg free
  3548  000076  EC1C  F004         	call	_fillDataBuffer
  3549                           
  3550                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  3551  00007A  9A9E               	bcf	3998,5,c	;volatile
  3552  00007C                     i1l177:
  3553  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3554  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3555  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3556  000088  C039  F044         	movff	??_LowISR+17,btemp
  3557  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3558  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3559  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3560  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3561  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3562  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3563  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3564  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3565  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3566  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3567  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3568  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3569  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3570  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3571  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3572  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3573  0000CC  C028  FFD8         	movff	??_LowISR,status
  3574  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3575  0000D2  0010               	retfie	
  3576  0000D4                     __end_of_LowISR:
  3577                           	opt stack 0
  3578                           pclatu	equ	0xFFB
  3579                           pclath	equ	0xFFA
  3580                           tblptru	equ	0xFF8
  3581                           tblptrh	equ	0xFF7
  3582                           tblptrl	equ	0xFF6
  3583                           tablat	equ	0xFF5
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           intcon	equ	0xFF2
  3587                           intcon2	equ	0xFF1
  3588                           indf0	equ	0xFEF
  3589                           postinc0	equ	0xFEE
  3590                           plusw0	equ	0xFEB
  3591                           fsr0h	equ	0xFEA
  3592                           fsr0l	equ	0xFE9
  3593                           wreg	equ	0xFE8
  3594                           indf1	equ	0xFE7
  3595                           postinc1	equ	0xFE6
  3596                           postdec1	equ	0xFE5
  3597                           fsr1h	equ	0xFE2
  3598                           fsr1l	equ	0xFE1
  3599                           bsr	equ	0xFE0
  3600                           indf2	equ	0xFDF
  3601                           postinc2	equ	0xFDE
  3602                           postdec2	equ	0xFDD
  3603                           plusw2	equ	0xFDB
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _readByte *****************
  3609 ;; Defined at:
  3610 ;;		line 74 in file "Drivers/UART_Driver.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  1    wreg      unsigned char 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3624 ;;      Params:         0       0       0       0       0       0       0       0       0
  3625 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3627 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3628 ;;Total ram usage:        0 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    1
  3631 ;; This function calls:
  3632 ;;		Nothing
  3633 ;; This function is called by:
  3634 ;;		_LowISR
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text21
  3639  0015DE                     __ptext21:
  3640                           	opt stack 0
  3641  0015DE                     _readByte:
  3642                           	opt stack 23
  3643                           
  3644                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3645                           
  3646                           ;incstack = 0
  3647  0015DE  50AB               	movf	4011,w,c	;volatile
  3648                           
  3649                           ;UART_Driver.c: 77: }
  3650                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3651  0015E0  50AB               	movf	4011,w,c	;volatile
  3652                           
  3653                           ;UART_Driver.c: 80: }
  3654                           ;UART_Driver.c: 81: return RCREG;
  3655  0015E2  50AE               	movf	4014,w,c	;volatile
  3656  0015E4  0012               	return	
  3657  0015E6                     __end_of_readByte:
  3658                           	opt stack 0
  3659                           pclatu	equ	0xFFB
  3660                           pclath	equ	0xFFA
  3661                           tblptru	equ	0xFF8
  3662                           tblptrh	equ	0xFF7
  3663                           tblptrl	equ	0xFF6
  3664                           tablat	equ	0xFF5
  3665                           prodh	equ	0xFF4
  3666                           prodl	equ	0xFF3
  3667                           intcon	equ	0xFF2
  3668                           intcon2	equ	0xFF1
  3669                           indf0	equ	0xFEF
  3670                           postinc0	equ	0xFEE
  3671                           plusw0	equ	0xFEB
  3672                           fsr0h	equ	0xFEA
  3673                           fsr0l	equ	0xFE9
  3674                           wreg	equ	0xFE8
  3675                           indf1	equ	0xFE7
  3676                           postinc1	equ	0xFE6
  3677                           postdec1	equ	0xFE5
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           bsr	equ	0xFE0
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           plusw2	equ	0xFDB
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _fillDataBuffer *****************
  3690 ;; Defined at:
  3691 ;;		line 84 in file "Drivers/UART_Driver.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;  data            1    wreg     unsigned char 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  data            1   38[COMRAM] unsigned char 
  3696 ;; Return value:  Size  Location     Type
  3697 ;;                  1    wreg      void 
  3698 ;; Registers used:
  3699 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3705 ;;      Params:         0       0       0       0       0       0       0       0       0
  3706 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3708 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3709 ;;Total ram usage:        1 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    5
  3712 ;; This function calls:
  3713 ;;		_acknowledge
  3714 ;; This function is called by:
  3715 ;;		_LowISR
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text22
  3720  000838                     __ptext22:
  3721                           	opt stack 0
  3722  000838                     _fillDataBuffer:
  3723                           	opt stack 19
  3724                           
  3725                           ;incstack = 0
  3726                           ;fillDataBuffer@data stored from wreg
  3727  000838  6E27               	movwf	fillDataBuffer@data,c
  3728                           
  3729                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3730  00083A  D0B5               	goto	i1l126
  3731  00083C                     
  3732                           ;UART_Driver.c: 87: if(data == 0x26) {
  3733  00083C  0E26               	movlw	38
  3734  00083E  1827               	xorwf	fillDataBuffer@data,w,c
  3735  000840  A4D8               	btfss	status,2,c
  3736  000842  D010               	goto	i1l128
  3737                           
  3738                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3739  000844  0E00               	movlw	0
  3740  000846  0101               	movlb	1	; () banked
  3741  000848  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3742                           
  3743                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3744  00084A  0E00               	movlw	0
  3745  00084C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3746                           
  3747                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3748  00084E  0E00               	movlw	0
  3749  000850  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3750                           
  3751                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3752  000852  0E00               	movlw	0
  3753  000854  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3754                           
  3755                           ;UART_Driver.c: 92: readReady = 0;
  3756  000856  0E00               	movlw	0
  3757  000858  0100               	movlb	0	; () banked
  3758  00085A  6F9F               	movwf	_readReady& (0+255),b
  3759                           
  3760                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3761  00085C  0E01               	movlw	1
  3762  00085E  0101               	movlb	1	; () banked
  3763  000860  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3764                           
  3765                           ;UART_Driver.c: 94: } else {
  3766  000862  0012               	return	
  3767  000864                     i1l128:
  3768                           
  3769                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3770                           
  3771                           ; BSR set to: 1
  3772  000864  0E00               	movlw	0
  3773  000866  0101               	movlb	1	; () banked
  3774  000868  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3775                           
  3776                           ; BSR set to: 1
  3777                           ;UART_Driver.c: 97: }
  3778                           ;UART_Driver.c: 98: break;
  3779                           
  3780                           ; BSR set to: 1
  3781                           ;UART_Driver.c: 96: return;
  3782  00086A  0012               	return	
  3783  00086C                     
  3784                           ; BSR set to: 1
  3785                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3786                           
  3787                           ; BSR set to: 1
  3788  00086C  0E3A               	movlw	58
  3789  00086E  1827               	xorwf	fillDataBuffer@data,w,c
  3790  000870  A4D8               	btfss	status,2,c
  3791  000872  D00D               	goto	i1l133
  3792                           
  3793                           ; BSR set to: 1
  3794                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3795  000874  0E02               	movlw	2
  3796  000876  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3800  000878  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3801  00087A  0D01               	mullw	1
  3802  00087C  0E00               	movlw	low _readBuffer
  3803  00087E  24F3               	addwf	prodl,w,c
  3804  000880  6ED9               	movwf	fsr2l,c
  3805  000882  0E01               	movlw	high _readBuffer
  3806  000884  20F4               	addwfc	prodh,w,c
  3807  000886  6EDA               	movwf	fsr2h,c
  3808  000888  0E00               	movlw	0
  3809  00088A  6EDF               	movwf	indf2,c
  3810                           
  3811                           ;UART_Driver.c: 104: } else {
  3812  00088C  0012               	return	
  3813  00088E                     i1l133:
  3814                           
  3815                           ; BSR set to: 1
  3816                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3817                           
  3818                           ; BSR set to: 1
  3819  00088E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3820  000890  0D01               	mullw	1
  3821  000892  0E00               	movlw	low _readBuffer
  3822  000894  24F3               	addwf	prodl,w,c
  3823  000896  6ED9               	movwf	fsr2l,c
  3824  000898  0E01               	movlw	high _readBuffer
  3825  00089A  20F4               	addwfc	prodh,w,c
  3826  00089C  6EDA               	movwf	fsr2h,c
  3827  00089E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3828                           
  3829                           ; BSR set to: 1
  3830                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3831  0008A2  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3835  0008A4  0E0A               	movlw	10
  3836  0008A6  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3837  0008A8  0012               	return	
  3838                           
  3839                           ; BSR set to: 1
  3840                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3841  0008AA  0E00               	movlw	0
  3842  0008AC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3843                           
  3844                           ; BSR set to: 1
  3845                           ;UART_Driver.c: 109: }
  3846                           ;UART_Driver.c: 110: }
  3847                           ;UART_Driver.c: 111: break;
  3848                           
  3849                           ; BSR set to: 1
  3850  0008AE  0012               	return	
  3851  0008B0                     
  3852                           ; BSR set to: 1
  3853                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3854                           
  3855                           ; BSR set to: 1
  3856  0008B0  0E3A               	movlw	58
  3857  0008B2  1827               	xorwf	fillDataBuffer@data,w,c
  3858  0008B4  A4D8               	btfss	status,2,c
  3859  0008B6  D00D               	goto	i1l137
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3863  0008B8  0E03               	movlw	3
  3864  0008BA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3865                           
  3866                           ; BSR set to: 1
  3867                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3868  0008BC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3869  0008BE  0D01               	mullw	1
  3870  0008C0  0E0B               	movlw	low (_readBuffer+11)
  3871  0008C2  24F3               	addwf	prodl,w,c
  3872  0008C4  6ED9               	movwf	fsr2l,c
  3873  0008C6  0E01               	movlw	high (_readBuffer+11)
  3874  0008C8  20F4               	addwfc	prodh,w,c
  3875  0008CA  6EDA               	movwf	fsr2h,c
  3876  0008CC  0E00               	movlw	0
  3877  0008CE  6EDF               	movwf	indf2,c
  3878                           
  3879                           ;UART_Driver.c: 117: } else {
  3880  0008D0  0012               	return	
  3881  0008D2                     i1l137:
  3882                           
  3883                           ; BSR set to: 1
  3884                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3885                           
  3886                           ; BSR set to: 1
  3887  0008D2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3888  0008D4  0D01               	mullw	1
  3889  0008D6  0E0B               	movlw	low (_readBuffer+11)
  3890  0008D8  24F3               	addwf	prodl,w,c
  3891  0008DA  6ED9               	movwf	fsr2l,c
  3892  0008DC  0E01               	movlw	high (_readBuffer+11)
  3893  0008DE  20F4               	addwfc	prodh,w,c
  3894  0008E0  6EDA               	movwf	fsr2h,c
  3895  0008E2  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3899  0008E6  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3900                           
  3901                           ; BSR set to: 1
  3902                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3903  0008E8  0E32               	movlw	50
  3904  0008EA  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3905  0008EC  0012               	return	
  3906                           
  3907                           ; BSR set to: 1
  3908                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3909  0008EE  0E00               	movlw	0
  3910  0008F0  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;UART_Driver.c: 122: }
  3914                           ;UART_Driver.c: 123: }
  3915                           ;UART_Driver.c: 124: break;
  3916                           
  3917                           ; BSR set to: 1
  3918  0008F2  0012               	return	
  3919  0008F4                     
  3920                           ; BSR set to: 1
  3921                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3922                           
  3923                           ; BSR set to: 1
  3924  0008F4  0E3A               	movlw	58
  3925  0008F6  1827               	xorwf	fillDataBuffer@data,w,c
  3926  0008F8  A4D8               	btfss	status,2,c
  3927  0008FA  D00D               	goto	i1l141
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3931  0008FC  0E04               	movlw	4
  3932  0008FE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3933                           
  3934                           ; BSR set to: 1
  3935                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3936  000900  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3937  000902  0D01               	mullw	1
  3938  000904  0E3E               	movlw	low (_readBuffer+62)
  3939  000906  24F3               	addwf	prodl,w,c
  3940  000908  6ED9               	movwf	fsr2l,c
  3941  00090A  0E01               	movlw	high (_readBuffer+62)
  3942  00090C  20F4               	addwfc	prodh,w,c
  3943  00090E  6EDA               	movwf	fsr2h,c
  3944  000910  0E00               	movlw	0
  3945  000912  6EDF               	movwf	indf2,c
  3946                           
  3947                           ;UART_Driver.c: 130: } else {
  3948  000914  0012               	return	
  3949  000916                     i1l141:
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  3953                           
  3954                           ; BSR set to: 1
  3955  000916  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3956  000918  0D01               	mullw	1
  3957  00091A  0E3E               	movlw	low (_readBuffer+62)
  3958  00091C  24F3               	addwf	prodl,w,c
  3959  00091E  6ED9               	movwf	fsr2l,c
  3960  000920  0E01               	movlw	high (_readBuffer+62)
  3961  000922  20F4               	addwfc	prodh,w,c
  3962  000924  6EDA               	movwf	fsr2h,c
  3963  000926  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3964                           
  3965                           ; BSR set to: 1
  3966                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  3967  00092A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  3968                           
  3969                           ; BSR set to: 1
  3970                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  3971  00092C  0E32               	movlw	50
  3972  00092E  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  3973  000930  0012               	return	
  3974                           
  3975                           ; BSR set to: 1
  3976                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  3977  000932  0E00               	movlw	0
  3978  000934  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3979                           
  3980                           ; BSR set to: 1
  3981                           ;UART_Driver.c: 135: }
  3982                           ;UART_Driver.c: 136: }
  3983                           ;UART_Driver.c: 137: break;
  3984                           
  3985                           ; BSR set to: 1
  3986  000936  0012               	return	
  3987  000938                     
  3988                           ; BSR set to: 1
  3989                           ;UART_Driver.c: 140: if (data == 0x3A) {
  3990                           
  3991                           ; BSR set to: 1
  3992  000938  0E3A               	movlw	58
  3993  00093A  1827               	xorwf	fillDataBuffer@data,w,c
  3994  00093C  A4D8               	btfss	status,2,c
  3995  00093E  D00D               	goto	i1l145
  3996                           
  3997                           ; BSR set to: 1
  3998                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  3999  000940  0E05               	movlw	5
  4000  000942  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4001                           
  4002                           ; BSR set to: 1
  4003                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4004  000944  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4005  000946  0D01               	mullw	1
  4006  000948  0E71               	movlw	low (_readBuffer+113)
  4007  00094A  24F3               	addwf	prodl,w,c
  4008  00094C  6ED9               	movwf	fsr2l,c
  4009  00094E  0E01               	movlw	high (_readBuffer+113)
  4010  000950  20F4               	addwfc	prodh,w,c
  4011  000952  6EDA               	movwf	fsr2h,c
  4012  000954  0E00               	movlw	0
  4013  000956  6EDF               	movwf	indf2,c
  4014                           
  4015                           ;UART_Driver.c: 143: } else {
  4016  000958  0012               	return	
  4017  00095A                     i1l145:
  4018                           
  4019                           ; BSR set to: 1
  4020                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4021                           
  4022                           ; BSR set to: 1
  4023  00095A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4024  00095C  0D01               	mullw	1
  4025  00095E  0E71               	movlw	low (_readBuffer+113)
  4026  000960  24F3               	addwf	prodl,w,c
  4027  000962  6ED9               	movwf	fsr2l,c
  4028  000964  0E01               	movlw	high (_readBuffer+113)
  4029  000966  20F4               	addwfc	prodh,w,c
  4030  000968  6EDA               	movwf	fsr2h,c
  4031  00096A  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4032                           
  4033                           ; BSR set to: 1
  4034                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4035  00096E  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4036                           
  4037                           ; BSR set to: 1
  4038                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4039  000970  0E32               	movlw	50
  4040  000972  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4041  000974  0012               	return	
  4042                           
  4043                           ; BSR set to: 1
  4044                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4045  000976  0E00               	movlw	0
  4046  000978  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4047                           
  4048                           ; BSR set to: 1
  4049                           ;UART_Driver.c: 148: }
  4050                           ;UART_Driver.c: 149: }
  4051                           ;UART_Driver.c: 150: break;
  4052                           
  4053                           ; BSR set to: 1
  4054  00097A  0012               	return	
  4055  00097C                     
  4056                           ; BSR set to: 1
  4057                           ;UART_Driver.c: 153: if (data == 0x24) {
  4058                           
  4059                           ; BSR set to: 1
  4060  00097C  0E24               	movlw	36
  4061  00097E  1827               	xorwf	fillDataBuffer@data,w,c
  4062  000980  A4D8               	btfss	status,2,c
  4063  000982  D009               	goto	i1l149
  4064                           
  4065                           ; BSR set to: 1
  4066                           ;UART_Driver.c: 154: acknowledge();
  4067  000984  EC74  F009         	call	_acknowledge	;wreg free
  4068                           
  4069                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4070  000988  0E00               	movlw	0
  4071  00098A  0101               	movlb	1	; () banked
  4072  00098C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4073                           
  4074                           ; BSR set to: 1
  4075                           ;UART_Driver.c: 156: readReady = 1;
  4076  00098E  0E01               	movlw	1
  4077  000990  0100               	movlb	0	; () banked
  4078  000992  6F9F               	movwf	_readReady& (0+255),b
  4079                           
  4080                           ;UART_Driver.c: 157: } else {
  4081  000994  0012               	return	
  4082  000996                     i1l149:
  4083                           
  4084                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4085                           
  4086                           ; BSR set to: 0
  4087  000996  5027               	movf	fillDataBuffer@data,w,c
  4088  000998  0FD0               	addlw	208
  4089  00099A  0101               	movlb	1	; () banked
  4090  00099C  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4091                           
  4092                           ; BSR set to: 1
  4093                           ;UART_Driver.c: 160: }
  4094                           ;UART_Driver.c: 161: break;
  4095  00099E  0012               	return	
  4096  0009A0                     
  4097                           ; BSR set to: 1
  4098                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4099                           
  4100                           ; BSR set to: 1
  4101  0009A0  0E00               	movlw	0
  4102  0009A2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4103                           
  4104                           ; BSR set to: 1
  4105                           ;UART_Driver.c: 166: }
  4106                           
  4107                           ;UART_Driver.c: 165: break;
  4108  0009A4  0012               	return	
  4109  0009A6                     i1l126:
  4110                           
  4111                           ; BSR set to: 1
  4112  0009A6  0101               	movlb	1	; () banked
  4113  0009A8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4114                           
  4115                           ; Switch size 1, requested type "space"
  4116                           ; Number of cases is 6, Range of values is 0 to 5
  4117                           ; switch strategies available:
  4118                           ; Name         Instructions Cycles
  4119                           ; simple_byte           19    10 (average)
  4120                           ;	Chosen strategy is simple_byte
  4121  0009AA  0A00               	xorlw	0	; case 0
  4122  0009AC  B4D8               	btfsc	status,2,c
  4123  0009AE  D746               	goto	i1l127
  4124  0009B0  0A01               	xorlw	1	; case 1
  4125  0009B2  B4D8               	btfsc	status,2,c
  4126  0009B4  D75B               	goto	i1l132
  4127  0009B6  0A03               	xorlw	3	; case 2
  4128  0009B8  B4D8               	btfsc	status,2,c
  4129  0009BA  D77A               	goto	i1l136
  4130  0009BC  0A01               	xorlw	1	; case 3
  4131  0009BE  B4D8               	btfsc	status,2,c
  4132  0009C0  D799               	goto	i1l140
  4133  0009C2  0A07               	xorlw	7	; case 4
  4134  0009C4  B4D8               	btfsc	status,2,c
  4135  0009C6  D7B8               	goto	i1l144
  4136  0009C8  0A01               	xorlw	1	; case 5
  4137  0009CA  B4D8               	btfsc	status,2,c
  4138  0009CC  D7D7               	goto	i1l148
  4139  0009CE  D7E8               	goto	i1l151
  4140  0009D0                     __end_of_fillDataBuffer:
  4141                           	opt stack 0
  4142                           pclatu	equ	0xFFB
  4143                           pclath	equ	0xFFA
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           intcon2	equ	0xFF1
  4152                           indf0	equ	0xFEF
  4153                           postinc0	equ	0xFEE
  4154                           plusw0	equ	0xFEB
  4155                           fsr0h	equ	0xFEA
  4156                           fsr0l	equ	0xFE9
  4157                           wreg	equ	0xFE8
  4158                           indf1	equ	0xFE7
  4159                           postinc1	equ	0xFE6
  4160                           postdec1	equ	0xFE5
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           bsr	equ	0xFE0
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           postdec2	equ	0xFDD
  4167                           plusw2	equ	0xFDB
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _acknowledge *****************
  4173 ;; Defined at:
  4174 ;;		line 169 in file "Drivers/UART_Driver.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      void 
  4181 ;; Registers used:
  4182 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4192 ;;Total ram usage:        0 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    4
  4195 ;; This function calls:
  4196 ;;		i1_printf
  4197 ;; This function is called by:
  4198 ;;		_fillDataBuffer
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text23
  4203  0012E8                     __ptext23:
  4204                           	opt stack 0
  4205  0012E8                     _acknowledge:
  4206                           	opt stack 19
  4207                           
  4208                           ;UART_Driver.c: 170: printf(startCharacter);
  4209                           
  4210                           ;incstack = 0
  4211  0012E8  C041  F01A         	movff	_startCharacter,i1printf@f
  4212  0012EC  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4213  0012F0  501A               	movf	i1printf@f,w,c
  4214  0012F2  101B               	iorwf	i1printf@f+1,w,c
  4215  0012F4  A4D8               	btfss	status,2,c
  4216  0012F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4217  0012F8  6E1C               	movwf	i1printf@f+2,c
  4218  0012FA  EC95  F005         	call	i1_printf	;wreg free
  4219                           
  4220                           ;UART_Driver.c: 172: printf(ackCharacter);
  4221  0012FE  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4222  001302  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4223  001306  501A               	movf	i1printf@f,w,c
  4224  001308  101B               	iorwf	i1printf@f+1,w,c
  4225  00130A  A4D8               	btfss	status,2,c
  4226  00130C  0E00               	movlw	low (__mediumconst shr (0+16))
  4227  00130E  6E1C               	movwf	i1printf@f+2,c
  4228  001310  EC95  F005         	call	i1_printf	;wreg free
  4229                           
  4230                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4231  001314  0E22               	movlw	low STR_5
  4232  001316  6E1A               	movwf	i1printf@f,c
  4233  001318  0E08               	movlw	high STR_5
  4234  00131A  6E1B               	movwf	i1printf@f+1,c
  4235  00131C  501A               	movf	i1printf@f,w,c
  4236  00131E  101B               	iorwf	i1printf@f+1,w,c
  4237  001320  A4D8               	btfss	status,2,c
  4238  001322  0E00               	movlw	low (__mediumconst shr (0+16))
  4239  001324  6E1C               	movwf	i1printf@f+2,c
  4240  001326  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4241  00132A  6A1E               	clrf	?i1_printf+4,c
  4242  00132C  EC95  F005         	call	i1_printf	;wreg free
  4243                           
  4244                           ;UART_Driver.c: 176: printf(stopCharacter);
  4245  001330  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4246  001334  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4247  001338  501A               	movf	i1printf@f,w,c
  4248  00133A  101B               	iorwf	i1printf@f+1,w,c
  4249  00133C  A4D8               	btfss	status,2,c
  4250  00133E  0E00               	movlw	low (__mediumconst shr (0+16))
  4251  001340  6E1C               	movwf	i1printf@f+2,c
  4252  001342  EC95  F005         	call	i1_printf	;wreg free
  4253  001346  0012               	return		;funcret
  4254  001348                     __end_of_acknowledge:
  4255                           	opt stack 0
  4256                           pclatu	equ	0xFFB
  4257                           pclath	equ	0xFFA
  4258                           tblptru	equ	0xFF8
  4259                           tblptrh	equ	0xFF7
  4260                           tblptrl	equ	0xFF6
  4261                           tablat	equ	0xFF5
  4262                           prodh	equ	0xFF4
  4263                           prodl	equ	0xFF3
  4264                           intcon	equ	0xFF2
  4265                           intcon2	equ	0xFF1
  4266                           indf0	equ	0xFEF
  4267                           postinc0	equ	0xFEE
  4268                           plusw0	equ	0xFEB
  4269                           fsr0h	equ	0xFEA
  4270                           fsr0l	equ	0xFE9
  4271                           wreg	equ	0xFE8
  4272                           indf1	equ	0xFE7
  4273                           postinc1	equ	0xFE6
  4274                           postdec1	equ	0xFE5
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           bsr	equ	0xFE0
  4278                           indf2	equ	0xFDF
  4279                           postinc2	equ	0xFDE
  4280                           postdec2	equ	0xFDD
  4281                           plusw2	equ	0xFDB
  4282                           fsr2h	equ	0xFDA
  4283                           fsr2l	equ	0xFD9
  4284                           status	equ	0xFD8
  4285                           
  4286 ;; *************** function i1_printf *****************
  4287 ;; Defined at:
  4288 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4291 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  4292 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  4293 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  4294 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  4295 ;; Auto vars:     Size  Location     Type
  4296 ;;  printf          4    0        struct .
  4297 ;;  printf          3    0        PTR const unsigned char 
  4298 ;;  printf          2   34[COMRAM] unsigned int 
  4299 ;;  printf          2   31[COMRAM] PTR void [1]
  4300 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4301 ;;  printf          2    0        unsigned int 
  4302 ;;  printf          1   37[COMRAM] char 
  4303 ;;  printf          1   36[COMRAM] char 
  4304 ;;  printf          1   33[COMRAM] unsigned char 
  4305 ;;  printf          1   30[COMRAM] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  2   25[COMRAM] int 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4315 ;;      Params:         5       0       0       0       0       0       0       0       0
  4316 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4318 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4319 ;;Total ram usage:       13 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    3
  4322 ;; This function calls:
  4323 ;;		i1___lwdiv
  4324 ;;		i1_putch
  4325 ;; This function is called by:
  4326 ;;		_acknowledge
  4327 ;; This function uses a non-reentrant model
  4328 ;;
  4329                           
  4330                           	psect	text24
  4331  000B2A                     __ptext24:
  4332                           	opt stack 0
  4333  000B2A                     i1_printf:
  4334                           	opt stack 19
  4335                           
  4336                           ;doprnt.c: 466: va_list ap;
  4337                           ;doprnt.c: 499: signed char c;
  4338                           ;doprnt.c: 506: signed char prec;
  4339                           ;doprnt.c: 508: unsigned char flag;
  4340                           ;doprnt.c: 523: union {
  4341                           ;doprnt.c: 524: unsigned long vd;
  4342                           ;doprnt.c: 525: double integ;
  4343                           ;doprnt.c: 526: } tmpval;
  4344                           ;doprnt.c: 528: unsigned int val;
  4345                           ;doprnt.c: 529: unsigned len;
  4346                           ;doprnt.c: 530: const char * cp;
  4347                           ;doprnt.c: 533: *ap = __va_start();
  4348                           
  4349                           ;incstack = 0
  4350  000B2A  0E1D               	movlw	low (?i1_printf+3)
  4351  000B2C  6E20               	movwf	i1printf@ap,c
  4352  000B2E  0E00               	movlw	high (?i1_printf+3)
  4353  000B30  6E21               	movwf	i1printf@ap+1,c
  4354                           
  4355                           ;doprnt.c: 536: while(c = *f++) {
  4356  000B32  D085               	goto	i1u96_20
  4357  000B34                     
  4358                           ;doprnt.c: 538: if(c != '%')
  4359  000B34  0E25               	movlw	37
  4360  000B36  1826               	xorwf	i1printf@c,w,c
  4361  000B38  B4D8               	btfsc	status,2,c
  4362  000B3A  D004               	goto	i1l269
  4363                           
  4364                           ;doprnt.c: 540: {
  4365                           ;doprnt.c: 541: (putch(c) );
  4366  000B3C  5026               	movf	i1printf@c,w,c
  4367  000B3E  ECEA  F00A         	call	i1_putch
  4368                           
  4369                           ;doprnt.c: 542: continue;
  4370  000B42  D07D               	goto	i1u96_20
  4371  000B44                     i1l269:
  4372                           
  4373                           ;doprnt.c: 543: }
  4374                           ;doprnt.c: 548: flag = 0;
  4375  000B44  0E00               	movlw	0
  4376  000B46  6E1F               	movwf	i1printf@flag,c
  4377                           
  4378                           ;doprnt.c: 635: switch(c = *f++) {
  4379  000B48  D004               	goto	i1l270
  4380  000B4A                     
  4381                           ;doprnt.c: 809: (putch(c) );
  4382  000B4A  5026               	movf	i1printf@c,w,c
  4383  000B4C  ECEA  F00A         	call	i1_putch
  4384                           
  4385                           ;doprnt.c: 810: continue;
  4386  000B50  D076               	goto	i1u96_20
  4387  000B52                     i1l270:
  4388  000B52  C01A  FFF6         	movff	i1printf@f,tblptrl
  4389  000B56  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4390  000B5A  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4391  000B5E  0E01               	movlw	1
  4392  000B60  261A               	addwf	i1printf@f,f,c
  4393  000B62  0E00               	movlw	0
  4394  000B64  221B               	addwfc	i1printf@f+1,f,c
  4395  000B66  221C               	addwfc	i1printf@f+2,f,c
  4396  000B68  BAF8               	btfsc	tblptru,5,c
  4397  000B6A  D003               	bra	i1u92_27
  4398  000B6C  0008               	tblrd		*
  4399  000B6E  50F5               	movf	tablat,w,c
  4400  000B70  D005               	bra	i1u92_20
  4401  000B72                     i1u92_27:
  4402  000B72  CFF6 FFE9          	movff	tblptrl,fsr0l
  4403  000B76  CFF7 FFEA          	movff	tblptrh,fsr0h
  4404  000B7A  50EF               	movf	indf0,w,c
  4405  000B7C                     i1u92_20:
  4406  000B7C  6E26               	movwf	i1printf@c,c
  4407  000B7E  5026               	movf	i1printf@c,w,c
  4408                           
  4409                           ; Switch size 1, requested type "space"
  4410                           ; Number of cases is 2, Range of values is 0 to 120
  4411                           ; switch strategies available:
  4412                           ; Name         Instructions Cycles
  4413                           ; simple_byte            7     4 (average)
  4414                           ;	Chosen strategy is simple_byte
  4415  000B80  0A00               	xorlw	0	; case 0
  4416  000B82  B4D8               	btfsc	status,2,c
  4417  000B84  0012               	return	
  4418  000B86  0A78               	xorlw	120	; case 120
  4419  000B88  A4D8               	btfss	status,2,c
  4420  000B8A  D7DF               	goto	i1l275
  4421                           
  4422                           ;doprnt.c: 1273: {
  4423                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4424  000B8C  C020  FFD9         	movff	i1printf@ap,fsr2l
  4425  000B90  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4426  000B94  CFDE F023          	movff	postinc2,i1printf@val
  4427  000B98  CFDD F024          	movff	postdec2,i1printf@val+1
  4428  000B9C  0E02               	movlw	2
  4429  000B9E  2620               	addwf	i1printf@ap,f,c
  4430  000BA0  0E00               	movlw	0
  4431  000BA2  2221               	addwfc	i1printf@ap+1,f,c
  4432                           
  4433                           ;doprnt.c: 1287: }
  4434                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4435  000BA4  0E01               	movlw	1
  4436  000BA6  6E26               	movwf	i1printf@c,c
  4437  000BA8  D014               	goto	i1l1545
  4438  000BAA                     
  4439                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4440  000BAA  5026               	movf	i1printf@c,w,c
  4441  000BAC  0D02               	mullw	2
  4442  000BAE  0E01               	movlw	low _hexpowers
  4443  000BB0  24F3               	addwf	prodl,w,c
  4444  000BB2  6EF6               	movwf	tblptrl,c
  4445  000BB4  0E08               	movlw	high _hexpowers
  4446  000BB6  20F4               	addwfc	prodh,w,c
  4447  000BB8  6EF7               	movwf	tblptrh,c
  4448  000BBA                     	if	1	;There are 3 active tblptr bytes
  4449  000BBA  6AF8               	clrf	tblptru,c
  4450  000BBC  0E00               	movlw	low (__mediumconst shr (0+16))
  4451  000BBE  22F8               	addwfc	tblptru,f,c
  4452  000BC0                     	endif
  4453  000BC0  0009               	tblrd		*+
  4454  000BC2  50F5               	movf	tablat,w,c
  4455  000BC4  5C23               	subwf	i1printf@val,w,c
  4456  000BC6  0009               	tblrd		*+
  4457  000BC8  50F5               	movf	tablat,w,c
  4458  000BCA  5824               	subwfb	i1printf@val+1,w,c
  4459  000BCC  A0D8               	btfss	status,0,c
  4460  000BCE  D005               	goto	i1u95_20
  4461                           
  4462                           ;doprnt.c: 1318: break;
  4463  000BD0  2A26               	incf	i1printf@c,f,c
  4464  000BD2                     i1l1545:
  4465  000BD2  0E04               	movlw	4
  4466  000BD4  1826               	xorwf	i1printf@c,w,c
  4467  000BD6  A4D8               	btfss	status,2,c
  4468  000BD8  D7E8               	goto	i1l276
  4469  000BDA                     i1u95_20:
  4470                           
  4471                           ;doprnt.c: 1422: {
  4472                           ;doprnt.c: 1469: }
  4473                           ;doprnt.c: 1472: prec = c;
  4474  000BDA  C026  F025         	movff	i1printf@c,i1printf@prec
  4475                           
  4476                           ;doprnt.c: 1474: while(prec--) {
  4477  000BDE  D02B               	goto	i1l279
  4478  000BE0                     
  4479                           ;doprnt.c: 1478: {
  4480                           ;doprnt.c: 1499: {
  4481                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4482  000BE0  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4483  000BE4  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4484  000BE8  5025               	movf	i1printf@prec,w,c
  4485  000BEA  0D02               	mullw	2
  4486  000BEC  0E01               	movlw	low _hexpowers
  4487  000BEE  24F3               	addwf	prodl,w,c
  4488  000BF0  6EF6               	movwf	tblptrl,c
  4489  000BF2  0E08               	movlw	high _hexpowers
  4490  000BF4  20F4               	addwfc	prodh,w,c
  4491  000BF6  6EF7               	movwf	tblptrh,c
  4492  000BF8                     	if	1	;There are 3 active tblptr bytes
  4493  000BF8  6AF8               	clrf	tblptru,c
  4494  000BFA  0E00               	movlw	low (__mediumconst shr (0+16))
  4495  000BFC  22F8               	addwfc	tblptru,f,c
  4496  000BFE                     	endif
  4497  000BFE  0009               	tblrd		*+
  4498  000C00  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4499  000C04  000A               	tblrd		*-
  4500  000C06  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4501  000C0A  ECFC  F009         	call	i1___lwdiv	;wreg free
  4502  000C0E  5013               	movf	?i1___lwdiv,w,c
  4503  000C10  0B0F               	andlw	15
  4504  000C12  6E22               	movwf	i1printf@idx,c
  4505                           
  4506                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4507  000C14  5022               	movf	i1printf@idx,w,c
  4508  000C16  0D01               	mullw	1
  4509  000C18  0E09               	movlw	low STR_17
  4510  000C1A  24F3               	addwf	prodl,w,c
  4511  000C1C  6EF6               	movwf	tblptrl,c
  4512  000C1E  0E08               	movlw	high STR_17
  4513  000C20  20F4               	addwfc	prodh,w,c
  4514  000C22  6EF7               	movwf	tblptrh,c
  4515  000C24                     	if	1	;There are 3 active tblptr bytes
  4516  000C24  6AF8               	clrf	tblptru,c
  4517  000C26  0E00               	movlw	low (__mediumconst shr (0+16))
  4518  000C28  22F8               	addwfc	tblptru,f,c
  4519  000C2A                     	endif
  4520  000C2A  0008               	tblrd		*
  4521  000C2C  CFF5 F026          	movff	tablat,i1printf@c
  4522                           
  4523                           ;doprnt.c: 1508: }
  4524                           ;doprnt.c: 1523: }
  4525                           ;doprnt.c: 1524: (putch(c) );
  4526  000C30  5026               	movf	i1printf@c,w,c
  4527  000C32  ECEA  F00A         	call	i1_putch
  4528  000C36                     i1l279:
  4529  000C36  0625               	decf	i1printf@prec,f,c
  4530  000C38  2825               	incf	i1printf@prec,w,c
  4531  000C3A  A4D8               	btfss	status,2,c
  4532  000C3C  D7D1               	goto	i1l280
  4533  000C3E                     i1u96_20:
  4534  000C3E  C01A  FFF6         	movff	i1printf@f,tblptrl
  4535  000C42  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4536  000C46  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4537  000C4A  0E01               	movlw	1
  4538  000C4C  261A               	addwf	i1printf@f,f,c
  4539  000C4E  0E00               	movlw	0
  4540  000C50  221B               	addwfc	i1printf@f+1,f,c
  4541  000C52  221C               	addwfc	i1printf@f+2,f,c
  4542  000C54  BAF8               	btfsc	tblptru,5,c
  4543  000C56  D003               	bra	i1u97_27
  4544  000C58  0008               	tblrd		*
  4545  000C5A  50F5               	movf	tablat,w,c
  4546  000C5C  D005               	bra	i1u97_20
  4547  000C5E                     i1u97_27:
  4548  000C5E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4549  000C62  CFF7 FFEA          	movff	tblptrh,fsr0h
  4550  000C66  50EF               	movf	indf0,w,c
  4551  000C68                     i1u97_20:
  4552  000C68  6E26               	movwf	i1printf@c,c
  4553  000C6A  5026               	movf	i1printf@c,w,c
  4554  000C6C  B4D8               	btfsc	status,2,c
  4555  000C6E  0012               	return	
  4556  000C70  D761               	goto	i1l268
  4557  000C72                     __end_ofi1_printf:
  4558                           	opt stack 0
  4559                           pclatu	equ	0xFFB
  4560                           pclath	equ	0xFFA
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           intcon	equ	0xFF2
  4568                           intcon2	equ	0xFF1
  4569                           indf0	equ	0xFEF
  4570                           postinc0	equ	0xFEE
  4571                           plusw0	equ	0xFEB
  4572                           fsr0h	equ	0xFEA
  4573                           fsr0l	equ	0xFE9
  4574                           wreg	equ	0xFE8
  4575                           indf1	equ	0xFE7
  4576                           postinc1	equ	0xFE6
  4577                           postdec1	equ	0xFE5
  4578                           fsr1h	equ	0xFE2
  4579                           fsr1l	equ	0xFE1
  4580                           bsr	equ	0xFE0
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           plusw2	equ	0xFDB
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function i1_putch *****************
  4590 ;; Defined at:
  4591 ;;		line 260 in file "Drivers/UART_Driver.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;  data            1    wreg     unsigned char 
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;  data            1   19[COMRAM] unsigned char 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  1    wreg      void 
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4605 ;;      Params:         0       0       0       0       0       0       0       0       0
  4606 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4608 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4609 ;;Total ram usage:        1 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    2
  4612 ;; This function calls:
  4613 ;;		i1_writeByte
  4614 ;; This function is called by:
  4615 ;;		i1_printf
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text25
  4620  0015D4                     __ptext25:
  4621                           	opt stack 0
  4622  0015D4                     i1_putch:
  4623                           	opt stack 19
  4624                           
  4625                           ;incstack = 0
  4626                           ;i1putch@data stored from wreg
  4627  0015D4  6E14               	movwf	i1putch@data,c
  4628                           
  4629                           ;UART_Driver.c: 261: writeByte(data);
  4630  0015D6  5014               	movf	i1putch@data,w,c
  4631  0015D8  ECE4  F00A         	call	i1_writeByte
  4632  0015DC  0012               	return		;funcret
  4633  0015DE                     __end_ofi1_putch:
  4634                           	opt stack 0
  4635                           pclatu	equ	0xFFB
  4636                           pclath	equ	0xFFA
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           intcon2	equ	0xFF1
  4645                           indf0	equ	0xFEF
  4646                           postinc0	equ	0xFEE
  4647                           plusw0	equ	0xFEB
  4648                           fsr0h	equ	0xFEA
  4649                           fsr0l	equ	0xFE9
  4650                           wreg	equ	0xFE8
  4651                           indf1	equ	0xFE7
  4652                           postinc1	equ	0xFE6
  4653                           postdec1	equ	0xFE5
  4654                           fsr1h	equ	0xFE2
  4655                           fsr1l	equ	0xFE1
  4656                           bsr	equ	0xFE0
  4657                           indf2	equ	0xFDF
  4658                           postinc2	equ	0xFDE
  4659                           postdec2	equ	0xFDD
  4660                           plusw2	equ	0xFDB
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function i1_writeByte *****************
  4666 ;; Defined at:
  4667 ;;		line 69 in file "Drivers/UART_Driver.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  data            1    wreg     unsigned char 
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;  data            1   18[COMRAM] unsigned char 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  1    wreg      void 
  4674 ;; Registers used:
  4675 ;;		wreg
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4681 ;;      Params:         0       0       0       0       0       0       0       0       0
  4682 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4684 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4685 ;;Total ram usage:        1 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:    1
  4688 ;; This function calls:
  4689 ;;		Nothing
  4690 ;; This function is called by:
  4691 ;;		i1_putch
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text26
  4696  0015C8                     __ptext26:
  4697                           	opt stack 0
  4698  0015C8                     i1_writeByte:
  4699                           	opt stack 19
  4700                           
  4701                           ;incstack = 0
  4702                           ;i1writeByte@data stored from wreg
  4703  0015C8  6E13               	movwf	i1writeByte@data,c
  4704  0015CA                     
  4705                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4706  0015CA  A2AC               	btfss	4012,1,c	;volatile
  4707  0015CC  D7FE               	goto	i1l1421
  4708                           
  4709                           ;UART_Driver.c: 71: TXREG = data;
  4710  0015CE  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4711  0015D2  0012               	return		;funcret
  4712  0015D4                     __end_ofi1_writeByte:
  4713                           	opt stack 0
  4714                           pclatu	equ	0xFFB
  4715                           pclath	equ	0xFFA
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           intcon	equ	0xFF2
  4723                           intcon2	equ	0xFF1
  4724                           indf0	equ	0xFEF
  4725                           postinc0	equ	0xFEE
  4726                           plusw0	equ	0xFEB
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           bsr	equ	0xFE0
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           plusw2	equ	0xFDB
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function i1___lwdiv *****************
  4745 ;; Defined at:
  4746 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  dividend        2   18[COMRAM] unsigned int 
  4749 ;;  divisor         2   20[COMRAM] unsigned int 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4752 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  2   18[COMRAM] unsigned int 
  4755 ;; Registers used:
  4756 ;;		wreg, status,2, status,0
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4762 ;;      Params:         4       0       0       0       0       0       0       0       0
  4763 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4765 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4766 ;;Total ram usage:        7 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    1
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		i1_printf
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text27
  4777  0013F8                     __ptext27:
  4778                           	opt stack 0
  4779  0013F8                     i1___lwdiv:
  4780                           	opt stack 20
  4781                           
  4782                           ;incstack = 0
  4783  0013F8  0E00               	movlw	0
  4784  0013FA  6E18               	movwf	i1___lwdiv@quotient+1,c
  4785  0013FC  0E00               	movlw	0
  4786  0013FE  6E17               	movwf	i1___lwdiv@quotient,c
  4787  001400  5015               	movf	i1___lwdiv@divisor,w,c
  4788  001402  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4789  001404  B4D8               	btfsc	status,2,c
  4790  001406  D01C               	goto	i1l692
  4791  001408  0E01               	movlw	1
  4792  00140A  6E19               	movwf	i1___lwdiv@counter,c
  4793  00140C  D004               	goto	i1l687
  4794  00140E  90D8               	bcf	status,0,c
  4795  001410  3615               	rlcf	i1___lwdiv@divisor,f,c
  4796  001412  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4797  001414  2A19               	incf	i1___lwdiv@counter,f,c
  4798  001416                     i1l687:
  4799  001416  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4800  001418  D7FA               	goto	i1l688
  4801  00141A                     i1u81_20:
  4802  00141A  90D8               	bcf	status,0,c
  4803  00141C  3617               	rlcf	i1___lwdiv@quotient,f,c
  4804  00141E  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4805  001420  5015               	movf	i1___lwdiv@divisor,w,c
  4806  001422  5C13               	subwf	i1___lwdiv@dividend,w,c
  4807  001424  5016               	movf	i1___lwdiv@divisor+1,w,c
  4808  001426  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4809  001428  A0D8               	btfss	status,0,c
  4810  00142A  D005               	goto	i1l691
  4811  00142C  5015               	movf	i1___lwdiv@divisor,w,c
  4812  00142E  5E13               	subwf	i1___lwdiv@dividend,f,c
  4813  001430  5016               	movf	i1___lwdiv@divisor+1,w,c
  4814  001432  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4815  001434  8017               	bsf	i1___lwdiv@quotient,0,c
  4816  001436                     i1l691:
  4817  001436  90D8               	bcf	status,0,c
  4818  001438  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4819  00143A  3215               	rrcf	i1___lwdiv@divisor,f,c
  4820  00143C  2E19               	decfsz	i1___lwdiv@counter,f,c
  4821  00143E  D7ED               	goto	i1u81_20
  4822  001440                     i1l692:
  4823  001440  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4824  001444  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4825  001448  0012               	return		;funcret
  4826  00144A                     __end_ofi1___lwdiv:
  4827                           	opt stack 0
  4828                           pclatu	equ	0xFFB
  4829                           pclath	equ	0xFFA
  4830                           tblptru	equ	0xFF8
  4831                           tblptrh	equ	0xFF7
  4832                           tblptrl	equ	0xFF6
  4833                           tablat	equ	0xFF5
  4834                           prodh	equ	0xFF4
  4835                           prodl	equ	0xFF3
  4836                           intcon	equ	0xFF2
  4837                           intcon2	equ	0xFF1
  4838                           indf0	equ	0xFEF
  4839                           postinc0	equ	0xFEE
  4840                           plusw0	equ	0xFEB
  4841                           fsr0h	equ	0xFEA
  4842                           fsr0l	equ	0xFE9
  4843                           wreg	equ	0xFE8
  4844                           indf1	equ	0xFE7
  4845                           postinc1	equ	0xFE6
  4846                           postdec1	equ	0xFE5
  4847                           fsr1h	equ	0xFE2
  4848                           fsr1l	equ	0xFE1
  4849                           bsr	equ	0xFE0
  4850                           indf2	equ	0xFDF
  4851                           postinc2	equ	0xFDE
  4852                           postdec2	equ	0xFDD
  4853                           plusw2	equ	0xFDB
  4854                           fsr2h	equ	0xFDA
  4855                           fsr2l	equ	0xFD9
  4856                           status	equ	0xFD8
  4857                           
  4858 ;; *************** function _HighISR *****************
  4859 ;; Defined at:
  4860 ;;		line 78 in file "main.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;		None
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;		None
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  1    wreg      void 
  4867 ;; Registers used:
  4868 ;;		wreg, status,2
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4874 ;;      Params:         0       0       0       0       0       0       0       0       0
  4875 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4876 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4877 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4878 ;;Total ram usage:       18 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; This function calls:
  4881 ;;		Nothing
  4882 ;; This function is called by:
  4883 ;;		Interrupt level 2
  4884 ;; This function uses a non-reentrant model
  4885 ;;
  4886                           
  4887                           	psect	intcode
  4888  000008                     __pintcode:
  4889                           	opt stack 0
  4890  000008                     _HighISR:
  4891                           	opt stack 19
  4892                           
  4893                           ;incstack = 0
  4894  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4895  00000A  EDE0  F008         	call	int_func,f	;refresh shadow registers
  4896                           pclatu	equ	0xFFB
  4897                           pclath	equ	0xFFA
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           intcon2	equ	0xFF1
  4906                           indf0	equ	0xFEF
  4907                           postinc0	equ	0xFEE
  4908                           plusw0	equ	0xFEB
  4909                           fsr0h	equ	0xFEA
  4910                           fsr0l	equ	0xFE9
  4911                           wreg	equ	0xFE8
  4912                           indf1	equ	0xFE7
  4913                           postinc1	equ	0xFE6
  4914                           postdec1	equ	0xFE5
  4915                           fsr1h	equ	0xFE2
  4916                           fsr1l	equ	0xFE1
  4917                           bsr	equ	0xFE0
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           plusw2	equ	0xFDB
  4922                           fsr2h	equ	0xFDA
  4923                           fsr2l	equ	0xFD9
  4924                           status	equ	0xFD8
  4925                           
  4926                           	psect	intcode_body
  4927  0011C0                     __pintcode_body:
  4928                           	opt stack 19
  4929  0011C0                     int_func:
  4930                           	opt stack 19
  4931  0011C0  0006               	pop		; remove dummy address from shadow register refresh
  4932  0011C2  CFFA F001          	movff	pclath,??_HighISR
  4933  0011C6  CFFB F002          	movff	pclatu,??_HighISR+1
  4934  0011CA  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4935  0011CE  CFEA F004          	movff	fsr0h,??_HighISR+3
  4936  0011D2  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4937  0011D6  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4938  0011DA  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4939  0011DE  CFDA F008          	movff	fsr2h,??_HighISR+7
  4940  0011E2  CFF3 F009          	movff	prodl,??_HighISR+8
  4941  0011E6  CFF4 F00A          	movff	prodh,??_HighISR+9
  4942  0011EA  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  4943  0011EE  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  4944  0011F2  CFF8 F00D          	movff	tblptru,??_HighISR+12
  4945  0011F6  CFF5 F00E          	movff	tablat,??_HighISR+13
  4946  0011FA  C044  F00F         	movff	btemp,??_HighISR+14
  4947  0011FE  C045  F010         	movff	btemp+1,??_HighISR+15
  4948  001202  C046  F011         	movff	btemp+2,??_HighISR+16
  4949  001206  C047  F012         	movff	btemp+3,??_HighISR+17
  4950                           
  4951                           ;main.c: 79: if (INTCONbits.TMR0IF) {
  4952  00120A  A4F2               	btfss	intcon,2,c	;volatile
  4953  00120C  D004               	goto	i2l255
  4954                           
  4955                           ;main.c: 80: tick = 1;
  4956  00120E  0E01               	movlw	1
  4957  001210  0100               	movlb	0	; () banked
  4958  001212  6F9E               	movwf	_tick& (0+255),b
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;main.c: 81: INTCONbits.TMR0IF = 0;
  4962  001214  94F2               	bcf	intcon,2,c	;volatile
  4963  001216                     i2l255:
  4964                           
  4965                           ; BSR set to: 0
  4966  001216  C012  F047         	movff	??_HighISR+17,btemp+3
  4967  00121A  C011  F046         	movff	??_HighISR+16,btemp+2
  4968  00121E  C010  F045         	movff	??_HighISR+15,btemp+1
  4969  001222  C00F  F044         	movff	??_HighISR+14,btemp
  4970  001226  C00E  FFF5         	movff	??_HighISR+13,tablat
  4971  00122A  C00D  FFF8         	movff	??_HighISR+12,tblptru
  4972  00122E  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  4973  001232  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  4974  001236  C00A  FFF4         	movff	??_HighISR+9,prodh
  4975  00123A  C009  FFF3         	movff	??_HighISR+8,prodl
  4976  00123E  C008  FFDA         	movff	??_HighISR+7,fsr2h
  4977  001242  C007  FFD9         	movff	??_HighISR+6,fsr2l
  4978  001246  C006  FFE2         	movff	??_HighISR+5,fsr1h
  4979  00124A  C005  FFE1         	movff	??_HighISR+4,fsr1l
  4980  00124E  C004  FFEA         	movff	??_HighISR+3,fsr0h
  4981  001252  C003  FFE9         	movff	??_HighISR+2,fsr0l
  4982  001256  C002  FFFB         	movff	??_HighISR+1,pclatu
  4983  00125A  C001  FFFA         	movff	??_HighISR,pclath
  4984  00125E  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4985  001260  0011               	retfie		f
  4986  001262                     __end_of_HighISR:
  4987                           	opt stack 0
  4988                           pclatu	equ	0xFFB
  4989                           pclath	equ	0xFFA
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           intcon2	equ	0xFF1
  4998                           indf0	equ	0xFEF
  4999                           postinc0	equ	0xFEE
  5000                           plusw0	equ	0xFEB
  5001                           fsr0h	equ	0xFEA
  5002                           fsr0l	equ	0xFE9
  5003                           wreg	equ	0xFE8
  5004                           indf1	equ	0xFE7
  5005                           postinc1	equ	0xFE6
  5006                           postdec1	equ	0xFE5
  5007                           fsr1h	equ	0xFE2
  5008                           fsr1l	equ	0xFE1
  5009                           bsr	equ	0xFE0
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           plusw2	equ	0xFDB
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           pclatu	equ	0xFFB
  5018                           pclath	equ	0xFFA
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           intcon2	equ	0xFF1
  5027                           indf0	equ	0xFEF
  5028                           postinc0	equ	0xFEE
  5029                           plusw0	equ	0xFEB
  5030                           fsr0h	equ	0xFEA
  5031                           fsr0l	equ	0xFE9
  5032                           wreg	equ	0xFE8
  5033                           indf1	equ	0xFE7
  5034                           postinc1	equ	0xFE6
  5035                           postdec1	equ	0xFE5
  5036                           fsr1h	equ	0xFE2
  5037                           fsr1l	equ	0xFE1
  5038                           bsr	equ	0xFE0
  5039                           indf2	equ	0xFDF
  5040                           postinc2	equ	0xFDE
  5041                           postdec2	equ	0xFDD
  5042                           plusw2	equ	0xFDB
  5043                           fsr2h	equ	0xFDA
  5044                           fsr2l	equ	0xFD9
  5045                           status	equ	0xFD8
  5046                           
  5047                           	psect	rparam
  5048  0000                     pclatu	equ	0xFFB
  5049                           pclath	equ	0xFFA
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon2	equ	0xFF1
  5058                           indf0	equ	0xFEF
  5059                           postinc0	equ	0xFEE
  5060                           plusw0	equ	0xFEB
  5061                           fsr0h	equ	0xFEA
  5062                           fsr0l	equ	0xFE9
  5063                           wreg	equ	0xFE8
  5064                           indf1	equ	0xFE7
  5065                           postinc1	equ	0xFE6
  5066                           postdec1	equ	0xFE5
  5067                           fsr1h	equ	0xFE2
  5068                           fsr1l	equ	0xFE1
  5069                           bsr	equ	0xFE0
  5070                           indf2	equ	0xFDF
  5071                           postinc2	equ	0xFDE
  5072                           postdec2	equ	0xFDD
  5073                           plusw2	equ	0xFDB
  5074                           fsr2h	equ	0xFDA
  5075                           fsr2l	equ	0xFD9
  5076                           status	equ	0xFD8
  5077                           
  5078                           	psect	temp
  5079  000044                     btemp:
  5080                           	opt stack 0
  5081  000044                     	ds	1
  5082  0000                     int$flags	set	btemp
  5083  0000                     wtemp6	set	btemp+1
  5084                           pclatu	equ	0xFFB
  5085                           pclath	equ	0xFFA
  5086                           tblptru	equ	0xFF8
  5087                           tblptrh	equ	0xFF7
  5088                           tblptrl	equ	0xFF6
  5089                           tablat	equ	0xFF5
  5090                           prodh	equ	0xFF4
  5091                           prodl	equ	0xFF3
  5092                           intcon	equ	0xFF2
  5093                           intcon2	equ	0xFF1
  5094                           indf0	equ	0xFEF
  5095                           postinc0	equ	0xFEE
  5096                           plusw0	equ	0xFEB
  5097                           fsr0h	equ	0xFEA
  5098                           fsr0l	equ	0xFE9
  5099                           wreg	equ	0xFE8
  5100                           indf1	equ	0xFE7
  5101                           postinc1	equ	0xFE6
  5102                           postdec1	equ	0xFE5
  5103                           fsr1h	equ	0xFE2
  5104                           fsr1l	equ	0xFE1
  5105                           bsr	equ	0xFE0
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           plusw2	equ	0xFDB
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    8
    Data        8
    BSS         231
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     33     102
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), ROM(CODE[32767]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), STR_10(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), STR_9(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6789
                                             31 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     699
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    8     8      0    2674
                                             23 BANK0      8     8      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     383
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2029
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F      20        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov 25 22:01:17 2017

                         l14 0DC4                           l42 1064                           l44 111A  
                         l37 1270                  __CFG_BOR$ON 000000                           bsr 000FE0  
                __CFG_BORV$3 000000                 _ackCharacter 003D                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l241 0D40                          l340 0FBE                          l245 0D82  
                        l237 0CD6                          l270 09FC                          l342 0FEC  
                        l246 0D98                          l167 152E                          l343 0FE0  
                        l239 0D1A                          l280 0A90                          l194 158C  
                        l346 1020                          l275 09F4                          l347 102E  
                        l339 0FA6                          l276 0A5A                          l268 09DC  
                        l348 1044                          l269 09EC                          l279 0AE8  
                        l831 14A6                          l832 149C                          l691 13E4  
                        l692 13EE                          l687 13C4                          l688 13BC  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          u840 0A28  
                        u780 13C8                          u870 0A8A                          u847 0A1E  
                        u880 0AF2                          u890 0B1E                          u991 0F1E  
                        u897 0B14                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000          __end_ofi1_writeByte 15D4                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1503 0A82                         l1417 15B0  
                       l1629 0DBC                         l1645 1268                         l1657 105C  
                       STR_1 0833                         STR_2 0831                         STR_3 081E  
                       STR_4 081A                         STR_5 0822                         STR_6 0835  
                       STR_7 0835                         STR_8 082B                         STR_9 0827  
                       u1001 0F58                         u1124 12D8                         u1060 0FF0  
                       u1125 12D4                         u1310 14DC                         u1161 10B2  
                       u1421 0CEC                         u1507 0F7C                         u1291 150C  
                       u1497 0CAE                         u9911 0F1C                 ?_C_DOOR_Init 0001  
                       _baud 0043                         _main 0C72                         _read 0092  
                       _tick 009E                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0044                         prodh 000FF4  
                       prodl 000FF3                         start 00D4                __CFG_IESO$OFF 000000  
            __end_ofi1_putch 15DE              __end_of_HighISR 1262                __CFG_MCLRE$ON 000000  
               ___param_bank 000000               _startCharacter 0041                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 00AA      __size_of_C_DOOR_LockAll 000E         commandAndMessage@mes 00AC  
            __end_of___aldiv 1056                        ?_main 0001                        STR_10 0827  
                      STR_11 0829                        STR_12 082F                        STR_13 0827  
                      STR_14 082D                        STR_15 0825                        STR_16 082F  
                      STR_17 0809                        u10011 0F56              __end_of___lwdiv 13F8  
                      i1l140 08F4                        i1l132 086C                        i1l141 0916  
                      i1l133 088E                        i1l126 09A6                        i1l151 09A0  
                      i1l127 083C                        i1l144 0938                        i1l136 08B0  
                      i1l128 0864                        i1l145 095A                        i1l137 08D2  
                      i1l148 097C                        i1l149 0996                        i1l270 0B52  
                      i1l280 0BE0                        i1l177 007C                        i1l275 0B4A  
                      i1l276 0BAA                        i1l268 0B34                        i1l269 0B44  
                      i1l279 0C36                        i2l255 1216                        i1l691 1436  
                      i1l692 1440                        i1l687 1416                        i1l688 140E  
                      _RCREG 000FAE         __size_of_acknowledge 0060                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
 __size_of_commandAndMessage 0050               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000                        _doors 0060  
                      _putch 159E              i1writeByte@data 0013                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 00AE                 ?_D_UART_Read 00A0  
               ?_D_TMR0_Init 0001                        plusw0 000FEB                        plusw2 000FDB  
                      status 000FD8                        wtemp6 0045                 ?_D_PORT_Init 0001  
         __size_ofi1___lwdiv 0052                _stopCharacter 003F             __end_ofi1_printf 0C72  
                 i1printf@ap 0020              __initialization 1348             _D_UART_Init$1498 00B3  
               __end_of_main 0DAE                       ??_main 00BF                  i1_writeByte 15C8  
              __activetblptr 000003              __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00A0  
                     _ADCON1 000FC1                       ?_putch 0001                       i1l1421 15CA  
                     i1l1545 0BD2                    ??i1_putch 0014             _C_DOOR_UnlockAll 1590  
                  ??_HighISR 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___aldiv 00A8                    ??___lwdiv 00A4             __end_of_readByte 15E6  
                     clear_0 1386                       clear_1 1392                       _printf 09D0  
                     _strcmp 149A            __end_ofi1___lwdiv 144A                 __pdataCOMRAM 003D  
      D_UART_Init@interrupts 00B2                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00B2  
            D_UART_Init@baud 00B0              D_UART_Init@name 00AE   __end_of_C_DOOR_ReadSensors 12E8  
                 __accesstop 0060      __end_of__initialization 139A              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 00FA                  i1printf@idx 0022  
                i1printf@val 0023               __pcstackCOMRAM 0001                 __pidataBANK0 15EC  
               C_DOOR_Init@d 00A0                  i1putch@data 0014                __end_of_putch 15AC  
           _messageCharacter 00C4               _C_DOOR_LockAll 15BA       __size_of_D_UART_Enable 0024  
             ??_D_UART_Write 00B6                    ?i1_printf 001A       __size_of_D_TMR0_Enable 0014  
          _C_DOOR_SendStates 1056                      ??_putch 00A1           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100         __size_of_D_UART_Init 00A2  
       __size_of_D_UART_Read 002E         __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00B7  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E       __end_of_C_DOOR_LockAll 15C8  
                 _deviceName 00C1                      ?_printf 00A7                      ?_strcmp 00A0  
  __end_of_C_DOOR_SendStates 111E                   ??i1_printf 001F      __size_of_fillDataBuffer 0198  
                    i1u81_20 141A                      i1u92_20 0B7C                      i1u92_27 0B72  
        D_UART_Enable@enable 00A0                      i1u95_20 0BDA                      i1u96_20 0C3E  
                    i1u97_20 0C68                      i1u97_27 0C5E              __CFG_VREGEN$OFF 000000  
                    i1_putch 15D4                      _HighISR 0008                    ?_readByte 0001  
         __size_of_writeByte 000E                _D_UART_Enable 1516                      __Hparam 0000  
                    __Lparam 0000              __size_of_LowISR 00BC                _D_TMR0_Enable 157C  
                 _readBuffer 0100                      ___aldiv 0F88              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 13A4                 __psmallconst 0800          C_DOOR_ReadSensors@d 00A4  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0027                      __pcinit 1348  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 159E                      __ptext0 0C72  
                    __ptext1 149A                      __ptext2 14E8                      __ptext3 111E  
                    __ptext4 0F88                      __ptext5 1516                      __ptext6 153A  
                    __ptext7 157C                      __ptext8 155E                      __ptext9 1590  
            __size_of_printf 015A                    _T0CONbits 000FD5                 ?i1_writeByte 0001  
            __size_of_strcmp 004E            __end_of_hexpowers 0809            i1___lwdiv@divisor 0015  
          i1___lwdiv@counter 0019         C_DOOR_SendStates@com 00B9         C_DOOR_SendStates@mes 00BC  
           ___aldiv@dividend 00A0               __pintcode_body 11C0         end_of_initialization 139A  
                 ??_readByte 0013          D_TMR0_Enable@enable 00A0                      int_func 11C0  
             ?_D_UART_Enable 0001               ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0F88  
                  _RCSTAbits 000FAB                      printf@c 00B1                      printf@f 00A7  
           ___aldiv@quotient 00AA                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00A5            __end_of_writeByte 15BA   __size_of_C_DOOR_SendStates 00C8  
                  _TRISCbits 000F94          __end_of_acknowledge 1348                    i1___lwdiv 13F8  
                  _TXSTAbits 000FAC                 i1printf@flag 001F                 i1printf@prec 0025  
         _C_DOOR_ReadSensors 1262               __end_of_LowISR 00D4                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 15E6               __end_of_printf 0B2A  
             __end_of_strcmp 14E8          start_initialization 1348               _fillDataBuffer 0838  
                  i1printf@c 0026                    i1printf@f 001A                   ?i1___lwdiv 0013  
          __size_ofi1_printf 0148         ??_C_DOOR_ReadSensors 00A0              ??_D_UART_Enable 00A0  
              ??_C_DOOR_Init 00A0              ??_D_TMR0_Enable 00A0                     ??_LowISR 0028  
                __pdataBANK0 00C4             __CFG_LPT1OSC$OFF 000000                  _acknowledge 12E8  
           D_UART_Write@data 00B4                     ??_printf 00AA                     ??_strcmp 00A4  
     __end_of_fillDataBuffer 09D0                  __pbssCOMRAM 0043         __size_ofi1_writeByte 000C  
              __pcstackBANK0 00A0                ??_D_UART_Init 00B3                ??_D_UART_Read 00A6  
              ??_D_TMR0_Init 00A1                     ?i1_putch 0001                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00A0                    __pnvBANK0 00C1  
           ??_C_DOOR_LockAll 00A0            __size_of_readByte 0008             ___lwdiv@dividend 00A0  
        __end_of_C_DOOR_Init 0EA8                    __pintcode 0008                     ?___aldiv 00A0  
                   ?___lwdiv 00A0                  __pintcodelo 0018           fillDataBuffer@data 0027  
          ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001                  __smallconst 0800  
         ??_C_DOOR_UnlockAll 00A0                 _D_UART_Write 0EA8                    _hexpowers 0801  
                  _readReady 009F             ___lwdiv@quotient 00A4                  ??i1___lwdiv 0017  
             __size_of_putch 000E              ___aldiv@divisor 00A4              ___aldiv@counter 00A8  
                   _IPR1bits 000F9F                     _PIE1bits 000F9D          __end_of_D_UART_Init 11C0  
        __end_of_D_UART_Read 1516                     _PIR1bits 000F9E          __end_of_D_TMR0_Init 155E  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 157C  
                 printf@flag 00AA                   printf@prec 00B0                     i1_printf 0B2A  
                  _writeByte 15AC                  _INTCON2bits 000FF1                    copy_data0 1374  
                _C_DOOR_Init 0DAE             __size_ofi1_putch 000A             __size_of_HighISR 125A  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___aldiv 00CE  
           __size_of___lwdiv 0054              ___lwdiv@divisor 00A2              ___lwdiv@counter 00A6  
                   __ptext10 1056                     __ptext11 144A                     __ptext12 0EA8  
                   __ptext21 15DE                     __ptext13 09D0                     __ptext22 0838  
                   __ptext14 159E                     __ptext23 12E8                     __ptext15 15AC  
                   __ptext24 0B2A                     __ptext16 13A4                     __ptext25 15D4  
                   __ptext17 1262                     __ptext26 15C8                     __ptext18 15BA  
                   __ptext27 13F8                     __ptext19 0DAE                   ?_writeByte 0001  
         i1___lwdiv@dividend 0013                  _D_UART_Init 111E                  _D_UART_Read 14E8  
                   _readData 0098                  _D_TMR0_Init 153A                     _readByte 15DE  
              __size_of_main 013C           C_DOOR_SendStates@d 00BE                  _D_PORT_Init 155E  
                   int$flags 0044                    printf@idx 00AD                    printf@val 00AE  
               ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017  
                  putch@data 00A1                   _INTCONbits 000FF2            _commandAndMessage 144A  
                   intlevel1 0000                     intlevel2 0000  __size_of_C_DOOR_ReadSensors 0086  
         ?_commandAndMessage 00A0        __end_of_D_UART_Enable 153A        __end_of_D_TMR0_Enable 1590  
        ??_commandAndMessage 00AE                     printf@ap 00AB             ??_fillDataBuffer 0027  
        D_UART_Write@command 00B2                ??i1_writeByte 0013                     strcmp@s1 00A0  
                   strcmp@s2 00A2                writeByte@data 00A0    __end_of_commandAndMessage 149A  
               ___aldiv@sign 00A9                  ??_writeByte 00A0    __size_of_C_DOOR_UnlockAll 000E  
