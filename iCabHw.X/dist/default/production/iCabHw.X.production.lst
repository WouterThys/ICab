

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 16 13:32:34 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.45
    52                           ; Generated 16/11/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataBANK0
    87  001A34                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  001A34  24                 	db	low STR_4
    92  001A35  08                 	db	high STR_4
    93                           
    94                           ;initializer for _messageCharacter
    95  001A36  28                 	db	low STR_3
    96  001A37  08                 	db	high STR_3
    97                           
    98                           ;initializer for _stopCharacter
    99  001A38  42                 	db	low STR_2
   100  001A39  08                 	db	high STR_2
   101                           
   102                           ;initializer for _startCharacter
   103  001A3A  44                 	db	low STR_1
   104  001A3B  08                 	db	high STR_1
   105                           
   106                           	psect	smallconst
   107  000800                     __psmallconst:
   108                           	opt stack 0
   109  000800  00                 	db	0
   110  000801                     _dpowers:
   111                           	opt stack 0
   112  000801  0001               	dw	1
   113  000803  000A               	dw	10
   114  000805  0064               	dw	100
   115  000807  03E8               	dw	1000
   116  000809  2710               	dw	10000
   117  00080B                     __end_of_dpowers:
   118                           	opt stack 0
   119  00080B                     _hexpowers:
   120                           	opt stack 0
   121  00080B  0001               	dw	1
   122  00080D  0010               	dw	16
   123  00080F  0100               	dw	256
   124  000811  1000               	dw	4096
   125  000813                     __end_of_hexpowers:
   126                           	opt stack 0
   127  0000                     _TMR1L	set	4046
   128  0000                     _TMR1H	set	4047
   129  0000                     _PORTBbits	set	3969
   130  0000                     _T1CONbits	set	4045
   131  0000                     _PORTCbits	set	3970
   132  0000                     _CCP1CONbits	set	4029
   133  0000                     _CCPR1L	set	4030
   134  0000                     _T2CONbits	set	4042
   135  0000                     _PR2	set	4043
   136  0000                     _INTCON2bits	set	4081
   137  0000                     _T0CONbits	set	4053
   138  0000                     _TXREG	set	4013
   139  0000                     _TRISCbits	set	3988
   140  0000                     _PIE1bits	set	3997
   141  0000                     _IPR1bits	set	3999
   142  0000                     _PIR1bits	set	3998
   143  0000                     _INTCONbits	set	4082
   144  0000                     _RCONbits	set	4048
   145  0000                     _SPBRG	set	4015
   146  0000                     _BAUDCONbits	set	4024
   147  0000                     _TXSTAbits	set	4012
   148  0000                     _RCREG	set	4014
   149  0000                     _RCSTAbits	set	4011
   150  0000                     _ADCON1	set	4033
   151  0000                     _PORTC	set	3970
   152  0000                     _TRISC	set	3988
   153  0000                     _TRISA	set	3986
   154  0000                     _TRISB	set	3987
   155  0000                     _PORTA	set	3968
   156  0000                     _PORTB	set	3969
   157  000813                     STR_21:
   158                           
   159                           ; BSR set to: 1
   160  000813  30                 	db	48	;'0'
   161  000814  31                 	db	49	;'1'
   162  000815  32                 	db	50	;'2'
   163  000816  33                 	db	51	;'3'
   164  000817  34                 	db	52	;'4'
   165  000818  35                 	db	53	;'5'
   166  000819  36                 	db	54	;'6'
   167  00081A  37                 	db	55	;'7'
   168  00081B  38                 	db	56	;'8'
   169  00081C  39                 	db	57	;'9'
   170  00081D  61                 	db	97	;'a'
   171  00081E  62                 	db	98	;'b'
   172  00081F  63                 	db	99	;'c'
   173  000820  64                 	db	100	;'d'
   174  000821  65                 	db	101	;'e'
   175  000822  66                 	db	102	;'f'
   176  000823  00                 	db	0
   177  000824                     STR_4:
   178                           
   179                           ; BSR set to: 1
   180  000824  5B                 	db	91	;'['
   181  000825  41                 	db	65	;'A'
   182  000826  5D                 	db	93	;']'
   183  000827  00                 	db	0
   184  000828                     STR_3:
   185                           
   186                           ; BSR set to: 1
   187  000828  5B                 	db	91	;'['
   188  000829  4D                 	db	77	;'M'
   189  00082A  5D                 	db	93	;']'
   190  00082B  00                 	db	0
   191  00082C                     STR_9:
   192                           
   193                           ; BSR set to: 1
   194  00082C  25                 	db	37
   195  00082D  64                 	db	100	;'d'
   196  00082E  00                 	db	0
   197  00082F                     STR_10:
   198                           
   199                           ; BSR set to: 1
   200  00082F  25                 	db	37
   201  000830  78                 	db	120	;'x'
   202  000831  00                 	db	0
   203  000832                     STR_18:
   204                           
   205                           ; BSR set to: 1
   206  000832  41                 	db	65	;'A'
   207  000833  00                 	db	0
   208  000834                     STR_19:
   209                           
   210                           ; BSR set to: 1
   211  000834  45                 	db	69	;'E'
   212  000835  00                 	db	0
   213  000836                     STR_14:
   214                           
   215                           ; BSR set to: 1
   216  000836  49                 	db	73	;'I'
   217  000837  00                 	db	0
   218  000838                     STR_12:
   219                           
   220                           ; BSR set to: 1
   221  000838  4C                 	db	76	;'L'
   222  000839  00                 	db	0
   223  00083A                     STR_11:
   224                           
   225                           ; BSR set to: 1
   226  00083A  50                 	db	80	;'P'
   227  00083B  00                 	db	0
   228  00083C                     STR_15:
   229                           
   230                           ; BSR set to: 1
   231  00083C  52                 	db	82	;'R'
   232  00083D  00                 	db	0
   233  00083E                     STR_17:
   234                           
   235                           ; BSR set to: 1
   236  00083E  53                 	db	83	;'S'
   237  00083F  00                 	db	0
   238  000840                     STR_13:
   239                           
   240                           ; BSR set to: 1
   241  000840  55                 	db	85	;'U'
   242  000841  00                 	db	0
   243  000842                     STR_2:
   244                           
   245                           ; BSR set to: 1
   246  000842  24                 	db	36
   247  000843  00                 	db	0
   248  000844                     STR_1:
   249                           
   250                           ; BSR set to: 1
   251  000844  26                 	db	38
   252  000845  00                 	db	0
   253  000846                     STR_5:
   254                           
   255                           ; BSR set to: 1
   256  000846  3A                 	db	58	;':'
   257  000847  00                 	db	0
   258  0000                     
   259                           ; #config settings
   260  000848  00                 	db	0	; dummy byte at the end
   261  0000                     
   262                           	psect	cinit
   263  0017D6                     __pcinit:
   264                           	opt stack 0
   265  0017D6                     start_initialization:
   266                           	opt stack 0
   267  0017D6                     __initialization:
   268                           	opt stack 0
   269                           
   270                           ; Initialize objects allocated to BANK0 (8 bytes)
   271                           ; load TBLPTR registers with __pidataBANK0
   272  0017D6  0E34               	movlw	low __pidataBANK0
   273  0017D8  6EF6               	movwf	tblptrl,c
   274  0017DA  0E1A               	movlw	high __pidataBANK0
   275  0017DC  6EF7               	movwf	tblptrh,c
   276  0017DE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   277  0017E0  6EF8               	movwf	tblptru,c
   278  0017E2  EE00  F0F2         	lfsr	0,__pdataBANK0
   279  0017E6  EE10 F008          	lfsr	1,8
   280  0017EA                     copy_data0:
   281  0017EA  0009               	tblrd		*+
   282  0017EC  CFF5 FFEE          	movff	tablat,postinc0
   283  0017F0  50E5               	movf	postdec1,w,c
   284  0017F2  50E1               	movf	fsr1l,w,c
   285  0017F4  E1FA               	bnz	copy_data0
   286                           
   287                           ; Clear objects allocated to BANK1 (166 bytes)
   288  0017F6  EE01  F000         	lfsr	0,__pbssBANK1
   289  0017FA  0EA6               	movlw	166
   290  0017FC                     clear_0:
   291  0017FC  6AEE               	clrf	postinc0,c
   292  0017FE  06E8               	decf	wreg,f,c
   293  001800  E1FD               	bnz	clear_0
   294                           
   295                           ; Clear objects allocated to BANK0 (103 bytes)
   296  001802  EE00  F060         	lfsr	0,__pbssBANK0
   297  001806  0E67               	movlw	103
   298  001808                     clear_1:
   299  001808  6AEE               	clrf	postinc0,c
   300  00180A  06E8               	decf	wreg,f,c
   301  00180C  E1FD               	bnz	clear_1
   302                           
   303                           ; Clear objects allocated to COMRAM (27 bytes)
   304  00180E  EE00  F029         	lfsr	0,__pbssCOMRAM
   305  001812  0E1B               	movlw	27
   306  001814                     clear_2:
   307  001814  6AEE               	clrf	postinc0,c
   308  001816  06E8               	decf	wreg,f,c
   309  001818  E1FD               	bnz	clear_2
   310  00181A                     end_of_initialization:
   311                           	opt stack 0
   312  00181A                     __end_of__initialization:
   313                           	opt stack 0
   314  00181A  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   315  00181C  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   316  00181E  0100               	movlb	0
   317  001820  EF8D  F00A         	goto	_main	;jump to C main() function
   318                           tblptru	equ	0xFF8
   319                           tblptrh	equ	0xFF7
   320                           tblptrl	equ	0xFF6
   321                           tablat	equ	0xFF5
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           postdec1	equ	0xFE5
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	bssCOMRAM
   328  000029                     __pbssCOMRAM:
   329                           	opt stack 0
   330  000029                     _read:
   331                           	opt stack 0
   332  000029                     	ds	7
   333  000030                     _readData:
   334                           	opt stack 0
   335  000030                     	ds	7
   336  000037                     _door_cnt:
   337                           	opt stack 0
   338  000037                     	ds	2
   339  000039                     _oldAlarm:
   340                           	opt stack 0
   341  000039                     	ds	1
   342  00003A                     _newAlarm:
   343                           	opt stack 0
   344  00003A                     	ds	1
   345  00003B                     _pwm:
   346                           	opt stack 0
   347  00003B                     	ds	1
   348  00003C                     _running:
   349                           	opt stack 0
   350  00003C                     	ds	1
   351  00003D                     _lock:
   352                           	opt stack 0
   353  00003D                     	ds	1
   354  00003E                     _tick:
   355                           	opt stack 0
   356  00003E                     	ds	1
   357  00003F                     _ledDelayCnt:
   358                           	opt stack 0
   359  00003F                     	ds	1
   360  000040                     _communicationCnt:
   361                           	opt stack 0
   362  000040                     	ds	1
   363  000041                     _lockDelayCnt:
   364                           	opt stack 0
   365  000041                     	ds	1
   366  000042                     _readReady:
   367                           	opt stack 0
   368  000042                     	ds	1
   369  000043                     _baud:
   370                           	opt stack 0
   371  000043                     	ds	1
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           postdec1	equ	0xFE5
   379                           fsr1l	equ	0xFE1
   380                           
   381                           	psect	bssBANK0
   382  000060                     __pbssBANK0:
   383                           	opt stack 0
   384  000060                     _doors:
   385                           	opt stack 0
   386  000060                     	ds	100
   387  0000C4                     _deviceName:
   388                           	opt stack 0
   389  0000C4                     	ds	3
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           postdec1	equ	0xFE5
   397                           fsr1l	equ	0xFE1
   398                           
   399                           	psect	dataBANK0
   400  0000F2                     __pdataBANK0:
   401                           	opt stack 0
   402  0000F2                     _ackCharacter:
   403                           	opt stack 0
   404  0000F2                     	ds	2
   405  0000F4                     _messageCharacter:
   406                           	opt stack 0
   407  0000F4                     	ds	2
   408  0000F6                     _stopCharacter:
   409                           	opt stack 0
   410  0000F6                     	ds	2
   411  0000F8                     _startCharacter:
   412                           	opt stack 0
   413  0000F8                     	ds	2
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1l	equ	0xFE1
   422                           
   423                           	psect	bssBANK1
   424  000100                     __pbssBANK1:
   425                           	opt stack 0
   426  000100                     _readBuffer:
   427                           	opt stack 0
   428  000100                     	ds	166
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           postdec1	equ	0xFE5
   436                           fsr1l	equ	0xFE1
   437                           
   438                           	psect	cstackBANK0
   439  0000C7                     __pcstackBANK0:
   440                           	opt stack 0
   441  0000C7                     ??_C_DOOR_Init:
   442  0000C7                     ??_C_DOOR_LockAll:
   443  0000C7                     ??_C_DOOR_UnlockAll:
   444  0000C7                     ??_C_DOOR_ReadSensors:
   445  0000C7                     ?_strcmp:
   446                           	opt stack 0
   447  0000C7                     ?___lwdiv:
   448                           	opt stack 0
   449  0000C7                     ?___lldiv:
   450                           	opt stack 0
   451  0000C7                     ?_D_UART_Read:
   452                           	opt stack 0
   453  0000C7                     D_UART_Enable@enable:
   454                           	opt stack 0
   455  0000C7                     putch@data:
   456                           	opt stack 0
   457  0000C7                     D_TMR0_Enable@enable:
   458                           	opt stack 0
   459  0000C7                     D_PWM_SetPwm@pwm:
   460                           	opt stack 0
   461  0000C7                     D_TMR1_Enable@enable:
   462                           	opt stack 0
   463  0000C7                     setAlarm@alarm:
   464                           	opt stack 0
   465  0000C7                     ___lwdiv@dividend:
   466                           	opt stack 0
   467  0000C7                     strcmp@s1:
   468                           	opt stack 0
   469  0000C7                     ___lldiv@dividend:
   470                           	opt stack 0
   471  0000C7                     commandAndMessage@door:
   472                           	opt stack 0
   473                           
   474                           ; 10 bytes @ 0x0
   475  0000C7                     	ds	1
   476  0000C8                     putch@max:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x1
   480  0000C8                     	ds	1
   481  0000C9                     ___lwdiv@divisor:
   482                           	opt stack 0
   483  0000C9                     strcmp@s2:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x2
   487  0000C9                     	ds	1
   488  0000CA                     C_DOOR_Init@cnt:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x3
   492  0000CA                     	ds	1
   493  0000CB                     ??_strcmp:
   494  0000CB                     C_DOOR_Init@d:
   495                           	opt stack 0
   496  0000CB                     C_DOOR_ReadSensors@d:
   497                           	opt stack 0
   498  0000CB                     ___lwdiv@counter:
   499                           	opt stack 0
   500  0000CB                     ___lldiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x4
   504  0000CB                     	ds	1
   505  0000CC                     strcmp@r:
   506                           	opt stack 0
   507  0000CC                     ___lwdiv@quotient:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x5
   511  0000CC                     	ds	2
   512  0000CE                     ?___lwmod:
   513                           	opt stack 0
   514  0000CE                     ___lwmod@dividend:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0x7
   518  0000CE                     	ds	1
   519  0000CF                     C_DOOR_LockAll@d:
   520                           	opt stack 0
   521  0000CF                     C_DOOR_UnlockAll@d:
   522                           	opt stack 0
   523  0000CF                     ___lldiv@quotient:
   524                           	opt stack 0
   525                           
   526                           ; 4 bytes @ 0x8
   527  0000CF                     	ds	1
   528  0000D0                     initDoors@door_cnt:
   529                           	opt stack 0
   530  0000D0                     ___lwmod@divisor:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x9
   534  0000D0                     	ds	1
   535  0000D1                     commandAndMessage@com:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0xA
   539  0000D1                     	ds	1
   540  0000D2                     ___lwmod@counter:
   541                           	opt stack 0
   542                           
   543                           ; 1 bytes @ 0xB
   544  0000D2                     	ds	1
   545  0000D3                     ?_printf:
   546                           	opt stack 0
   547  0000D3                     ___lldiv@counter:
   548                           	opt stack 0
   549  0000D3                     commandAndMessage@mes:
   550                           	opt stack 0
   551  0000D3                     printf@f:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0xC
   555  0000D3                     	ds	1
   556  0000D4                     D_UART_Init@name:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0xD
   560  0000D4                     	ds	1
   561  0000D5                     
   562                           ; 1 bytes @ 0xE
   563  0000D5                     	ds	1
   564  0000D6                     D_UART_Init@baud:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0xF
   568  0000D6                     	ds	2
   569  0000D8                     ??_printf:
   570  0000D8                     D_UART_Init@interrupts:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x11
   574  0000D8                     	ds	1
   575  0000D9                     printf@idx:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x12
   579  0000D9                     	ds	1
   580  0000DA                     printf@ap:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x13
   584  0000DA                     	ds	2
   585  0000DC                     printf@prec:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x15
   589  0000DC                     	ds	1
   590  0000DD                     printf@flag:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0x16
   594  0000DD                     	ds	1
   595  0000DE                     printf@val:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x17
   599  0000DE                     	ds	2
   600  0000E0                     printf@c:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x19
   604  0000E0                     	ds	1
   605  0000E1                     D_UART_Acknowledge@i:
   606                           	opt stack 0
   607  0000E1                     D_UART_Write@command:
   608                           	opt stack 0
   609  0000E1                     D_UART_WriteInt@command:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x1A
   613  0000E1                     	ds	2
   614  0000E3                     D_UART_Write@data:
   615                           	opt stack 0
   616  0000E3                     D_UART_WriteInt@d:
   617                           	opt stack 0
   618                           
   619                           ; 2 bytes @ 0x1C
   620  0000E3                     	ds	2
   621  0000E5                     ??_D_UART_Write:
   622  0000E5                     ??_D_UART_WriteInt:
   623                           
   624                           ; 1 bytes @ 0x1E
   625  0000E5                     	ds	1
   626  0000E6                     ??_C_DOOR_SendStates:
   627                           
   628                           ; 1 bytes @ 0x1F
   629  0000E6                     	ds	3
   630  0000E9                     C_DOOR_SendStates@com:
   631                           	opt stack 0
   632                           
   633                           ; 3 bytes @ 0x22
   634  0000E9                     	ds	3
   635  0000EC                     C_DOOR_SendStates@mes:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x25
   639  0000EC                     	ds	2
   640  0000EE                     C_DOOR_SendStates@d:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x27
   644  0000EE                     	ds	1
   645  0000EF                     ??_run:
   646                           
   647                           ; 1 bytes @ 0x28
   648  0000EF                     	ds	1
   649  0000F0                     ??_main:
   650                           
   651                           ; 1 bytes @ 0x29
   652  0000F0                     	ds	2
   653                           tblptru	equ	0xFF8
   654                           tblptrh	equ	0xFF7
   655                           tblptrl	equ	0xFF6
   656                           tablat	equ	0xFF5
   657                           postinc0	equ	0xFEE
   658                           wreg	equ	0xFE8
   659                           postdec1	equ	0xFE5
   660                           fsr1l	equ	0xFE1
   661                           
   662                           	psect	cstackCOMRAM
   663  000001                     __pcstackCOMRAM:
   664                           	opt stack 0
   665  000001                     fillDataBuffer@data:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x0
   669  000001                     	ds	1
   670  000002                     ??_HighISR:
   671                           
   672                           ; 1 bytes @ 0x1
   673  000002                     	ds	18
   674  000014                     ??_LowISR:
   675                           
   676                           ; 1 bytes @ 0x13
   677  000014                     	ds	21
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           postdec1	equ	0xFE5
   685                           fsr1l	equ	0xFE1
   686                           
   687 ;;
   688 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   689 ;;
   690 ;; *************** function _main *****************
   691 ;; Defined at:
   692 ;;		line 64 in file "main.c"
   693 ;; Parameters:    Size  Location     Type
   694 ;;		None
   695 ;; Auto vars:     Size  Location     Type
   696 ;;		None
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   706 ;;      Params:         0       0       0       0       0       0       0       0       0
   707 ;;      Locals:         0       0       0       0       0       0       0       0       0
   708 ;;      Temps:          0       2       0       0       0       0       0       0       0
   709 ;;      Totals:         0       2       0       0       0       0       0       0       0
   710 ;;Total ram usage:        2 bytes
   711 ;; Hardware stack levels required when called:    8
   712 ;; This function calls:
   713 ;;		_D_PORT_Init
   714 ;;		_D_PWM_Init
   715 ;;		_D_TMR0_Init
   716 ;;		_D_TMR1_Init
   717 ;;		_D_UART_Enable
   718 ;;		_D_UART_Init
   719 ;;		_run
   720 ;; This function is called by:
   721 ;;		Startup code after reset
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text0
   726  00151A                     __ptext0:
   727                           	opt stack 0
   728  00151A                     _main:
   729                           	opt stack 23
   730                           
   731                           ;main.c: 65: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   732                           
   733                           ;incstack = 0
   734  00151A  0E05               	movlw	5
   735  00151C  0100               	movlb	0	; () banked
   736  00151E  6FF1               	movwf	(??_main+1)& (0+255),b
   737  001520  0E0F               	movlw	15
   738  001522  6FF0               	movwf	??_main& (0+255),b
   739  001524  0EF1               	movlw	241
   740  001526                     u2207:
   741  001526  2EE8               	decfsz	wreg,f,c
   742  001528  D7FE               	bra	u2207
   743  00152A  2FF0               	decfsz	??_main& (0+255),f,b
   744  00152C  D7FC               	bra	u2207
   745  00152E  2FF1               	decfsz	(??_main+1)& (0+255),f,b
   746  001530  D7FA               	bra	u2207
   747                           
   748                           ;main.c: 67: D_PORT_Init();
   749  001532  ECF2  F00C         	call	_D_PORT_Init	;wreg free
   750                           
   751                           ;main.c: 71: D_UART_Init("P", 9600, 1);
   752  001536  0E3A               	movlw	low STR_11
   753  001538  0100               	movlb	0	; () banked
   754  00153A  6FD4               	movwf	D_UART_Init@name& (0+255),b
   755  00153C  0E08               	movlw	high STR_11
   756  00153E  6FD5               	movwf	(D_UART_Init@name+1)& (0+255),b
   757  001540  0E25               	movlw	37
   758  001542  6FD7               	movwf	(D_UART_Init@baud+1)& (0+255),b
   759  001544  0E80               	movlw	128
   760  001546  6FD6               	movwf	D_UART_Init@baud& (0+255),b
   761  001548  0E01               	movlw	1
   762  00154A  6FD8               	movwf	D_UART_Init@interrupts& (0+255),b
   763  00154C  EC1A  F00B         	call	_D_UART_Init	;wreg free
   764                           
   765                           ;main.c: 72: D_UART_Enable(1);
   766  001550  0E01               	movlw	1
   767  001552  EC9E  F00C         	call	_D_UART_Enable
   768                           
   769                           ;main.c: 75: D_TMR0_Init();
   770  001556  ECB0  F00C         	call	_D_TMR0_Init	;wreg free
   771                           
   772                           ;main.c: 76: D_TMR1_Init();
   773  00155A  ECD3  F00C         	call	_D_TMR1_Init	;wreg free
   774                           
   775                           ;main.c: 79: D_PWM_Init();
   776  00155E  ECE3  F00C         	call	_D_PWM_Init	;wreg free
   777                           
   778                           ;main.c: 81: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   779  001562  0E05               	movlw	5
   780  001564  0100               	movlb	0	; () banked
   781  001566  6FF1               	movwf	(??_main+1)& (0+255),b
   782  001568  0E0F               	movlw	15
   783  00156A  6FF0               	movwf	??_main& (0+255),b
   784  00156C  0EF1               	movlw	241
   785  00156E                     u2217:
   786  00156E  2EE8               	decfsz	wreg,f,c
   787  001570  D7FE               	bra	u2217
   788  001572  2FF0               	decfsz	??_main& (0+255),f,b
   789  001574  D7FC               	bra	u2217
   790  001576  2FF1               	decfsz	(??_main+1)& (0+255),f,b
   791  001578  D7FA               	bra	u2217
   792                           
   793                           ;main.c: 83: newAlarm = 0;
   794  00157A  0E00               	movlw	0
   795  00157C  6E3A               	movwf	_newAlarm,c
   796                           
   797                           ;main.c: 84: oldAlarm = 0;
   798  00157E  0E00               	movlw	0
   799  001580  6E39               	movwf	_oldAlarm,c
   800                           
   801                           ;main.c: 85: lock = 0;
   802  001582  0E00               	movlw	0
   803  001584  6E3D               	movwf	_lock,c
   804                           
   805                           ;main.c: 86: tick = 0;
   806  001586  0E00               	movlw	0
   807  001588  6E3E               	movwf	_tick,c
   808                           
   809                           ;main.c: 87: running = 0;
   810  00158A  0E00               	movlw	0
   811  00158C  6E3C               	movwf	_running,c
   812                           
   813                           ;main.c: 89: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   814  00158E  0E05               	movlw	5
   815  001590  0100               	movlb	0	; () banked
   816  001592  6FF1               	movwf	(??_main+1)& (0+255),b
   817  001594  0E0F               	movlw	15
   818  001596  6FF0               	movwf	??_main& (0+255),b
   819  001598  0EF1               	movlw	241
   820  00159A                     u2227:
   821  00159A  2EE8               	decfsz	wreg,f,c
   822  00159C  D7FE               	bra	u2227
   823  00159E  2FF0               	decfsz	??_main& (0+255),f,b
   824  0015A0  D7FC               	bra	u2227
   825  0015A2  2FF1               	decfsz	(??_main+1)& (0+255),f,b
   826  0015A4  D7FA               	bra	u2227
   827                           
   828                           ;main.c: 93: PORTB = 0xFF;
   829                           
   830                           ;main.c: 92: } else {
   831                           
   832                           ;main.c: 91: PORTB = 0x00;
   833                           
   834                           ;main.c: 90: if (0) {
   835  0015A6  6881               	setf	3969,c	;volatile
   836                           
   837                           ;main.c: 94: }
   838                           ;main.c: 96: run();
   839  0015A8  EC51  F005         	call	_run	;wreg free
   840  0015AC  EF76  F000         	goto	start
   841  0015B0                     __end_of_main:
   842                           	opt stack 0
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           postdec1	equ	0xFE5
   850                           fsr1l	equ	0xFE1
   851                           
   852 ;; *************** function _run *****************
   853 ;; Defined at:
   854 ;;		line 107 in file "main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   868 ;;      Params:         0       0       0       0       0       0       0       0       0
   869 ;;      Locals:         0       0       0       0       0       0       0       0       0
   870 ;;      Temps:          0       1       0       0       0       0       0       0       0
   871 ;;      Totals:         0       1       0       0       0       0       0       0       0
   872 ;;Total ram usage:        1 bytes
   873 ;; Hardware stack levels used:    1
   874 ;; Hardware stack levels required when called:    7
   875 ;; This function calls:
   876 ;;		_C_DOOR_LockAll
   877 ;;		_C_DOOR_ReadSensors
   878 ;;		_C_DOOR_SendStates
   879 ;;		_C_DOOR_UnlockAll
   880 ;;		_D_PWM_SetPwm
   881 ;;		_D_TMR1_Enable
   882 ;;		_D_UART_Acknowledge
   883 ;;		_D_UART_Read
   884 ;;		_D_UART_Write
   885 ;;		_D_UART_WriteInt
   886 ;;		_initDoors
   887 ;;		_setAlarm
   888 ;;		_strcmp
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text1
   895  000AA2                     __ptext1:
   896                           	opt stack 0
   897  000AA2                     _run:
   898                           	opt stack 23
   899                           
   900                           ;main.c: 111: if (lock) {
   901                           
   902                           ;incstack = 0
   903                           ;main.c: 108: while(1) {
   904  000AA2  503D               	movf	_lock,w,c
   905  000AA4  B4D8               	btfsc	status,2,c
   906  000AA6  D009               	goto	l335
   907                           
   908                           ;main.c: 112: D_TMR1_Enable(0);
   909  000AA8  0E00               	movlw	0
   910  000AAA  EC01  F00D         	call	_D_TMR1_Enable
   911                           
   912                           ;main.c: 113: lockDelayCnt = 0;
   913  000AAE  0E00               	movlw	0
   914  000AB0  6E41               	movwf	_lockDelayCnt,c
   915                           
   916                           ;main.c: 114: C_DOOR_LockAll();
   917  000AB2  ECE4  F009         	call	_C_DOOR_LockAll	;wreg free
   918                           
   919                           ;main.c: 115: lock = 0;
   920  000AB6  0E00               	movlw	0
   921  000AB8  6E3D               	movwf	_lock,c
   922  000ABA                     l335:
   923                           
   924                           ;main.c: 116: }
   925                           ;main.c: 119: if (readReady) {
   926  000ABA  5042               	movf	_readReady,w,c
   927  000ABC  B4D8               	btfsc	status,2,c
   928  000ABE  D0B8               	goto	l349
   929                           
   930                           ;main.c: 120: readReady = 0;
   931  000AC0  0E00               	movlw	0
   932  000AC2  6E42               	movwf	_readReady,c
   933                           
   934                           ;main.c: 121: read = D_UART_Read();
   935  000AC4  EC5B  F00C         	call	_D_UART_Read	;wreg free
   936  000AC8  EE20  F029         	lfsr	2,_read
   937  000ACC  0E06               	movlw	6
   938  000ACE                     u2021:
   939  000ACE  CFEB FFDB          	movff	plusw0,plusw2
   940  000AD2  06E8               	decf	wreg,f,c
   941  000AD4  E2FC               	bc	u2021
   942                           
   943                           ;main.c: 125: D_UART_Acknowledge(read.ackId);
   944  000AD6  502F               	movf	_read+6,w,c
   945  000AD8  EC5B  F00B         	call	_D_UART_Acknowledge
   946                           
   947                           ;main.c: 128: communicationCnt = 0;
   948  000ADC  0E00               	movlw	0
   949  000ADE  6E40               	movwf	_communicationCnt,c
   950                           
   951                           ;main.c: 129: if (oldAlarm == 3) {
   952  000AE0  0E03               	movlw	3
   953  000AE2  1839               	xorwf	_oldAlarm,w,c
   954  000AE4  A4D8               	btfss	status,2,c
   955  000AE6  D002               	goto	l337
   956                           
   957                           ;main.c: 130: newAlarm = 0;
   958  000AE8  0E00               	movlw	0
   959  000AEA  6E3A               	movwf	_newAlarm,c
   960  000AEC                     l337:
   961                           
   962                           ;main.c: 131: }
   963                           ;main.c: 134: if (strcmp(read.command, "L") == 0) {
   964  000AEC  C02B  F0C7         	movff	_read+2,strcmp@s1
   965  000AF0  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   966  000AF4  0E38               	movlw	low STR_12
   967  000AF6  0100               	movlb	0	; () banked
   968  000AF8  6FC9               	movwf	strcmp@s2& (0+255),b
   969  000AFA  0E08               	movlw	high STR_12
   970  000AFC  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   971  000AFE  EC12  F00C         	call	_strcmp	;wreg free
   972  000B02  0100               	movlb	0	; () banked
   973  000B04  51C7               	movf	?_strcmp& (0+255),w,b
   974  000B06  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
   975  000B08  A4D8               	btfss	status,2,c
   976  000B0A  D006               	goto	l338
   977                           
   978                           ; BSR set to: 0
   979                           ;main.c: 135: lockDelayCnt = 0;
   980  000B0C  0E00               	movlw	0
   981  000B0E  6E41               	movwf	_lockDelayCnt,c
   982                           
   983                           ; BSR set to: 0
   984                           ;main.c: 136: D_TMR1_Enable(1);
   985  000B10  0E01               	movlw	1
   986  000B12  EC01  F00D         	call	_D_TMR1_Enable
   987                           
   988                           ;main.c: 139: } else if (strcmp(read.command, "U") == 0) {
   989  000B16  D08C               	goto	l349
   990  000B18                     l338:
   991  000B18  C02B  F0C7         	movff	_read+2,strcmp@s1
   992  000B1C  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   993  000B20  0E40               	movlw	low STR_13
   994  000B22  0100               	movlb	0	; () banked
   995  000B24  6FC9               	movwf	strcmp@s2& (0+255),b
   996  000B26  0E08               	movlw	high STR_13
   997  000B28  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   998  000B2A  EC12  F00C         	call	_strcmp	;wreg free
   999  000B2E  0100               	movlb	0	; () banked
  1000  000B30  51C7               	movf	?_strcmp& (0+255),w,b
  1001  000B32  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1002  000B34  A4D8               	btfss	status,2,c
  1003  000B36  D008               	goto	l340
  1004                           
  1005                           ; BSR set to: 0
  1006                           ;main.c: 140: lockDelayCnt = 0;
  1007  000B38  0E00               	movlw	0
  1008  000B3A  6E41               	movwf	_lockDelayCnt,c
  1009                           
  1010                           ; BSR set to: 0
  1011                           ;main.c: 141: D_TMR1_Enable(0);
  1012  000B3C  0E00               	movlw	0
  1013  000B3E  EC01  F00D         	call	_D_TMR1_Enable
  1014                           
  1015                           ;main.c: 142: C_DOOR_UnlockAll();
  1016  000B42  EC8A  F009         	call	_C_DOOR_UnlockAll	;wreg free
  1017                           
  1018                           ;main.c: 145: } else if (strcmp(read.command, "I") == 0) {
  1019  000B46  D074               	goto	l349
  1020  000B48                     l340:
  1021  000B48  C02B  F0C7         	movff	_read+2,strcmp@s1
  1022  000B4C  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1023  000B50  0E36               	movlw	low STR_14
  1024  000B52  0100               	movlb	0	; () banked
  1025  000B54  6FC9               	movwf	strcmp@s2& (0+255),b
  1026  000B56  0E08               	movlw	high STR_14
  1027  000B58  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1028  000B5A  EC12  F00C         	call	_strcmp	;wreg free
  1029  000B5E  0100               	movlb	0	; () banked
  1030  000B60  51C7               	movf	?_strcmp& (0+255),w,b
  1031  000B62  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1032  000B64  A4D8               	btfss	status,2,c
  1033  000B66  D00B               	goto	l342
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 146: initDoors((uint8_t)(*read.message - 0x30));
  1037  000B68  C02D  FFD9         	movff	_read+4,fsr2l
  1038  000B6C  C02E  FFDA         	movff	_read+5,fsr2h
  1039  000B70  50DF               	movf	indf2,w,c
  1040  000B72  0FD0               	addlw	208
  1041  000B74  ECC2  F00C         	call	_initDoors
  1042                           
  1043                           ;main.c: 147: running = 1;
  1044  000B78  0E01               	movlw	1
  1045  000B7A  6E3C               	movwf	_running,c
  1046                           
  1047                           ;main.c: 150: } else if (strcmp(read.command, "R") == 0) {
  1048  000B7C  D059               	goto	l349
  1049  000B7E                     l342:
  1050  000B7E  C02B  F0C7         	movff	_read+2,strcmp@s1
  1051  000B82  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1052  000B86  0E3C               	movlw	low STR_15
  1053  000B88  0100               	movlb	0	; () banked
  1054  000B8A  6FC9               	movwf	strcmp@s2& (0+255),b
  1055  000B8C  0E08               	movlw	high STR_15
  1056  000B8E  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1057  000B90  EC12  F00C         	call	_strcmp	;wreg free
  1058  000B94  0100               	movlb	0	; () banked
  1059  000B96  51C7               	movf	?_strcmp& (0+255),w,b
  1060  000B98  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1061  000B9A  A4D8               	btfss	status,2,c
  1062  000B9C  D00B               	goto	l344
  1063                           
  1064                           ; BSR set to: 0
  1065                           ;main.c: 151: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1066  000B9E  0E68               	movlw	104
  1067  000BA0  0100               	movlb	0	; () banked
  1068  000BA2  6FEF               	movwf	??_run& (0+255),b
  1069  000BA4  0EE4               	movlw	228
  1070  000BA6                     u2237:
  1071  000BA6  2EE8               	decfsz	wreg,f,c
  1072  000BA8  D7FE               	bra	u2237
  1073  000BAA  2FEF               	decfsz	??_run& (0+255),f,b
  1074  000BAC  D7FC               	bra	u2237
  1075  000BAE  F000               	nop	
  1076  000BB0  00FF               	reset		;# 
  1077                           
  1078                           ;main.c: 155: } else if (strcmp(read.command, "P") == 0) {
  1079  000BB2  D03E               	goto	l349
  1080  000BB4                     l344:
  1081  000BB4  C02B  F0C7         	movff	_read+2,strcmp@s1
  1082  000BB8  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1083  000BBC  0E3A               	movlw	low STR_11
  1084  000BBE  0100               	movlb	0	; () banked
  1085  000BC0  6FC9               	movwf	strcmp@s2& (0+255),b
  1086  000BC2  0E08               	movlw	high STR_11
  1087  000BC4  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1088  000BC6  EC12  F00C         	call	_strcmp	;wreg free
  1089  000BCA  0100               	movlb	0	; () banked
  1090  000BCC  51C7               	movf	?_strcmp& (0+255),w,b
  1091  000BCE  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1092  000BD0  A4D8               	btfss	status,2,c
  1093  000BD2  D00A               	goto	l346
  1094                           
  1095                           ; BSR set to: 0
  1096                           ;main.c: 156: D_UART_WriteInt("S", running);
  1097  000BD4  0E3E               	movlw	low STR_17
  1098  000BD6  6FE1               	movwf	D_UART_WriteInt@command& (0+255),b
  1099  000BD8  0E08               	movlw	high STR_17
  1100  000BDA  6FE2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  1101  000BDC  C03C  F0E3         	movff	_running,D_UART_WriteInt@d
  1102  000BE0  6BE4               	clrf	(D_UART_WriteInt@d+1)& (0+255),b
  1103  000BE2  ECC5  F008         	call	_D_UART_WriteInt	;wreg free
  1104                           
  1105                           ;main.c: 159: } else if (strcmp(read.command, "A") == 0) {
  1106  000BE6  D024               	goto	l349
  1107  000BE8                     l346:
  1108  000BE8  C02B  F0C7         	movff	_read+2,strcmp@s1
  1109  000BEC  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1110  000BF0  0E32               	movlw	low STR_18
  1111  000BF2  0100               	movlb	0	; () banked
  1112  000BF4  6FC9               	movwf	strcmp@s2& (0+255),b
  1113  000BF6  0E08               	movlw	high STR_18
  1114  000BF8  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1115  000BFA  EC12  F00C         	call	_strcmp	;wreg free
  1116  000BFE  0100               	movlb	0	; () banked
  1117  000C00  51C7               	movf	?_strcmp& (0+255),w,b
  1118  000C02  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1119  000C04  A4D8               	btfss	status,2,c
  1120  000C06  D009               	goto	l348
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;main.c: 160: setAlarm((uint8_t)(*read.message - 0x30));
  1124  000C08  C02D  FFD9         	movff	_read+4,fsr2l
  1125  000C0C  C02E  FFDA         	movff	_read+5,fsr2h
  1126  000C10  50DF               	movf	indf2,w,c
  1127  000C12  0FD0               	addlw	208
  1128  000C14  EC15  F00D         	call	_setAlarm
  1129                           
  1130                           ;main.c: 162: } else {
  1131  000C18  D00B               	goto	l349
  1132  000C1A                     l348:
  1133                           
  1134                           ;main.c: 163: D_UART_Write("E", "U");
  1135  000C1A  0E34               	movlw	low STR_19
  1136  000C1C  0100               	movlb	0	; () banked
  1137  000C1E  6FE1               	movwf	D_UART_Write@command& (0+255),b
  1138  000C20  0E08               	movlw	high STR_19
  1139  000C22  6FE2               	movwf	(D_UART_Write@command+1)& (0+255),b
  1140  000C24  0E40               	movlw	low STR_13
  1141  000C26  6FE3               	movwf	D_UART_Write@data& (0+255),b
  1142  000C28  0E08               	movlw	high STR_13
  1143  000C2A  6FE4               	movwf	(D_UART_Write@data+1)& (0+255),b
  1144  000C2C  EC55  F008         	call	_D_UART_Write	;wreg free
  1145  000C30                     l349:
  1146                           
  1147                           ;main.c: 165: }
  1148                           ;main.c: 166: }
  1149                           ;main.c: 169: if (tick) {
  1150  000C30  503E               	movf	_tick,w,c
  1151  000C32  B4D8               	btfsc	status,2,c
  1152  000C34  D736               	goto	_run
  1153                           
  1154                           ;main.c: 170: tick = 0;
  1155  000C36  0E00               	movlw	0
  1156  000C38  6E3E               	movwf	_tick,c
  1157                           
  1158                           ;main.c: 173: if (ledDelayCnt < 2) {
  1159  000C3A  0E02               	movlw	2
  1160  000C3C  603F               	cpfslt	_ledDelayCnt,c
  1161  000C3E  D002               	goto	l351
  1162                           
  1163                           ;main.c: 174: ledDelayCnt++;
  1164  000C40  2A3F               	incf	_ledDelayCnt,f,c
  1165                           
  1166                           ;main.c: 175: } else {
  1167  000C42  D011               	goto	l352
  1168  000C44                     l351:
  1169                           
  1170                           ;main.c: 176: PORTBbits.RB5 = !PORTBbits.RB5;
  1171  000C44  BA81               	btfsc	3969,5,c	;volatile
  1172  000C46  D004               	goto	u2120
  1173  000C48  0100               	movlb	0	; () banked
  1174  000C4A  6BEF               	clrf	??_run& (0+255),b
  1175  000C4C  2BEF               	incf	??_run& (0+255),f,b
  1176  000C4E  D002               	goto	u2138
  1177  000C50                     u2120:
  1178  000C50  0100               	movlb	0	; () banked
  1179  000C52  6BEF               	clrf	??_run& (0+255),b
  1180  000C54                     u2138:
  1181  000C54  3BEF               	swapf	??_run& (0+255),f,b
  1182  000C56  47EF               	rlncf	??_run& (0+255),f,b
  1183  000C58  5081               	movf	3969,w,c	;volatile
  1184  000C5A  19EF               	xorwf	??_run& (0+255),w,b
  1185  000C5C  0BDF               	andlw	-33
  1186  000C5E  19EF               	xorwf	??_run& (0+255),w,b
  1187  000C60  6E81               	movwf	3969,c	;volatile
  1188                           
  1189                           ; BSR set to: 0
  1190                           ;main.c: 177: ledDelayCnt = 0;
  1191  000C62  0E00               	movlw	0
  1192  000C64  6E3F               	movwf	_ledDelayCnt,c
  1193  000C66                     l352:
  1194                           
  1195                           ;main.c: 178: }
  1196                           ;main.c: 181: C_DOOR_ReadSensors();
  1197                           
  1198                           ; BSR set to: 0
  1199  000C66  EC3D  F00A         	call	_C_DOOR_ReadSensors	;wreg free
  1200                           
  1201                           ;main.c: 184: C_DOOR_SendStates();
  1202  000C6A  ECDE  F007         	call	_C_DOOR_SendStates	;wreg free
  1203                           
  1204                           ;main.c: 187: if (communicationCnt < 60) {
  1205  000C6E  0E3C               	movlw	60
  1206  000C70  6040               	cpfslt	_communicationCnt,c
  1207  000C72  D002               	goto	l353
  1208                           
  1209                           ;main.c: 188: communicationCnt++;
  1210  000C74  2A40               	incf	_communicationCnt,f,c
  1211                           
  1212                           ;main.c: 189: } else {
  1213  000C76  D005               	goto	l355
  1214  000C78                     l353:
  1215                           
  1216                           ;main.c: 190: if (oldAlarm == 0) {
  1217  000C78  5039               	movf	_oldAlarm,w,c
  1218  000C7A  A4D8               	btfss	status,2,c
  1219  000C7C  D002               	goto	l355
  1220                           
  1221                           ;main.c: 191: newAlarm = 3;
  1222  000C7E  0E03               	movlw	3
  1223  000C80  6E3A               	movwf	_newAlarm,c
  1224  000C82                     l355:
  1225                           
  1226                           ;main.c: 192: }
  1227                           ;main.c: 193: }
  1228                           ;main.c: 196: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1229  000C82  5039               	movf	_oldAlarm,w,c
  1230  000C84  183A               	xorwf	_newAlarm,w,c
  1231  000C86  A4D8               	btfss	status,2,c
  1232  000C88  D017               	goto	l359
  1233  000C8A  043A               	decf	_newAlarm,w,c
  1234  000C8C  B4D8               	btfsc	status,2,c
  1235  000C8E  D014               	goto	l359
  1236  000C90  0E03               	movlw	3
  1237  000C92  183A               	xorwf	_newAlarm,w,c
  1238  000C94  B4D8               	btfsc	status,2,c
  1239  000C96  D010               	goto	l359
  1240  000C98  D704               	goto	_run
  1241  000C9A                     
  1242                           ;main.c: 200: pwm = 0x00;
  1243                           
  1244                           ;main.c: 199: case 0:
  1245  000C9A  0E00               	movlw	0
  1246  000C9C  D00B               	goto	L1
  1247  000C9E                     
  1248                           ;main.c: 204: case 1:
  1249                           ;main.c: 205: if (pwm == 0) {
  1250  000C9E  503B               	movf	_pwm,w,c
  1251  000CA0  A4D8               	btfss	status,2,c
  1252  000CA2  D002               	goto	l365
  1253                           
  1254                           ;main.c: 206: pwm = 1;
  1255  000CA4  0E01               	movlw	1
  1256  000CA6  6E3B               	movwf	_pwm,c
  1257  000CA8                     l365:
  1258                           
  1259                           ;main.c: 207: }
  1260                           ;main.c: 208: pwm = (uint8_t)(pwm * 0x02);
  1261  000CA8  503B               	movf	_pwm,w,c
  1262  000CAA  0D02               	mullw	2
  1263  000CAC  CFF3 F03B          	movff	prodl,_pwm
  1264                           
  1265                           ;main.c: 209: break;
  1266  000CB0  D011               	goto	l362
  1267  000CB2                     
  1268                           ;main.c: 212: pwm = 0x7F;
  1269  000CB2  0E7F               	movlw	127
  1270  000CB4                     L1:
  1271  000CB4  6E3B               	movwf	_pwm,c
  1272                           
  1273                           ;main.c: 214: }
  1274                           
  1275                           ;main.c: 213: break;
  1276  000CB6  D00E               	goto	l362
  1277  000CB8                     l359:
  1278  000CB8  503A               	movf	_newAlarm,w,c
  1279                           
  1280                           ; Switch size 1, requested type "space"
  1281                           ; Number of cases is 4, Range of values is 0 to 3
  1282                           ; switch strategies available:
  1283                           ; Name         Instructions Cycles
  1284                           ; simple_byte           13     7 (average)
  1285                           ;	Chosen strategy is simple_byte
  1286  000CBA  0A00               	xorlw	0	; case 0
  1287  000CBC  B4D8               	btfsc	status,2,c
  1288  000CBE  D7ED               	goto	l360
  1289  000CC0  0A01               	xorlw	1	; case 1
  1290  000CC2  B4D8               	btfsc	status,2,c
  1291  000CC4  D7EC               	goto	l363
  1292  000CC6  0A03               	xorlw	3	; case 2
  1293  000CC8  B4D8               	btfsc	status,2,c
  1294  000CCA  D7F3               	goto	l366
  1295  000CCC  0A01               	xorlw	1	; case 3
  1296  000CCE  B4D8               	btfsc	status,2,c
  1297  000CD0  D7E6               	goto	l363
  1298  000CD2  D7E3               	goto	l360
  1299  000CD4                     l362:
  1300                           
  1301                           ;main.c: 215: D_PWM_SetPwm(pwm);
  1302  000CD4  503B               	movf	_pwm,w,c
  1303  000CD6  EC73  F00C         	call	_D_PWM_SetPwm
  1304                           
  1305                           ;main.c: 216: oldAlarm = newAlarm;
  1306  000CDA  C03A  F039         	movff	_newAlarm,_oldAlarm
  1307  000CDE  D6E1               	goto	_run
  1308  000CE0                     __end_of_run:
  1309                           	opt stack 0
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           prodl	equ	0xFF3
  1315                           postinc0	equ	0xFEE
  1316                           plusw0	equ	0xFEB
  1317                           wreg	equ	0xFE8
  1318                           postdec1	equ	0xFE5
  1319                           fsr1l	equ	0xFE1
  1320                           indf2	equ	0xFDF
  1321                           plusw2	equ	0xFDB
  1322                           fsr2h	equ	0xFDA
  1323                           fsr2l	equ	0xFD9
  1324                           status	equ	0xFD8
  1325                           
  1326 ;; *************** function _strcmp *****************
  1327 ;; Defined at:
  1328 ;;		line 33 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcmp.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  1331 ;;		 -> readBuffer(166), 
  1332 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  1333 ;;		 -> STR_18(2), STR_16(2), STR_15(2), STR_14(2), 
  1334 ;;		 -> STR_13(2), STR_12(2), 
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;  r               1    5[BANK0 ] char 
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  2    0[BANK0 ] int 
  1339 ;; Registers used:
  1340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1346 ;;      Params:         0       4       0       0       0       0       0       0       0
  1347 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1348 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1349 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1350 ;;Total ram usage:        6 bytes
  1351 ;; Hardware stack levels used:    1
  1352 ;; Hardware stack levels required when called:    3
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_run
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text2
  1361  001824                     __ptext2:
  1362                           	opt stack 0
  1363  001824                     _strcmp:
  1364                           	opt stack 26
  1365                           
  1366                           ;incstack = 0
  1367  001824  D005               	goto	l972
  1368  001826  0100               	movlb	0	; () banked
  1369  001828  4BC7               	infsnz	strcmp@s1& (0+255),f,b
  1370  00182A  2BC8               	incf	(strcmp@s1+1)& (0+255),f,b
  1371  00182C  4BC9               	infsnz	strcmp@s2& (0+255),f,b
  1372  00182E  2BCA               	incf	(strcmp@s2+1)& (0+255),f,b
  1373  001830                     l972:
  1374                           
  1375                           ; BSR set to: 0
  1376  001830  C0C7  FFD9         	movff	strcmp@s1,fsr2l
  1377  001834  C0C8  FFDA         	movff	strcmp@s1+1,fsr2h
  1378  001838  50DF               	movf	indf2,w,c
  1379  00183A  0100               	movlb	0	; () banked
  1380  00183C  6FCB               	movwf	??_strcmp& (0+255),b
  1381  00183E  C0C9  FFF6         	movff	strcmp@s2,tblptrl
  1382  001842  C0CA  FFF7         	movff	strcmp@s2+1,tblptrh
  1383  001846                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1384  001846  6AF8               	clrf	tblptru,c
  1385  001848                     	endif
  1386  001848                     	if	0	;tblptru may be non-zero
  1387  001848                     	endif
  1388  001848  0008               	tblrd		*
  1389  00184A  50F5               	movf	tablat,w,c
  1390  00184C  0800               	sublw	0
  1391  00184E  25CB               	addwf	??_strcmp& (0+255),w,b
  1392  001850  6FCC               	movwf	strcmp@r& (0+255),b
  1393  001852  51CC               	movf	strcmp@r& (0+255),w,b
  1394  001854  A4D8               	btfss	status,2,c
  1395  001856  D007               	goto	u1940
  1396                           
  1397                           ; BSR set to: 0
  1398  001858  C0C7  FFD9         	movff	strcmp@s1,fsr2l
  1399  00185C  C0C8  FFDA         	movff	strcmp@s1+1,fsr2h
  1400  001860  50DF               	movf	indf2,w,c
  1401  001862  A4D8               	btfss	status,2,c
  1402  001864  D7E0               	goto	l973
  1403  001866                     u1940:
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ; BSR set to: 0
  1408                           
  1409                           ; BSR set to: 0
  1410  001866  51CC               	movf	strcmp@r& (0+255),w,b
  1411  001868  6FC7               	movwf	?_strcmp& (0+255),b
  1412  00186A  6BC8               	clrf	(?_strcmp+1)& (0+255),b
  1413  00186C  BFC7               	btfsc	?_strcmp& (0+255),7,b
  1414  00186E  07C8               	decf	(?_strcmp+1)& (0+255),f,b
  1415  001870  0012               	return	
  1416  001872                     __end_of_strcmp:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           prodl	equ	0xFF3
  1423                           postinc0	equ	0xFEE
  1424                           plusw0	equ	0xFEB
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1l	equ	0xFE1
  1428                           indf2	equ	0xFDF
  1429                           plusw2	equ	0xFDB
  1430                           fsr2h	equ	0xFDA
  1431                           fsr2l	equ	0xFD9
  1432                           status	equ	0xFD8
  1433                           
  1434 ;; *************** function _setAlarm *****************
  1435 ;; Defined at:
  1436 ;;		line 60 in file "main.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  alarm           1    wreg     unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  alarm           1    0[BANK0 ] unsigned char 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1450 ;;      Params:         0       0       0       0       0       0       0       0       0
  1451 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1453 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1454 ;;Total ram usage:        1 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    3
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_run
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text3
  1465  001A2A                     __ptext3:
  1466                           	opt stack 0
  1467  001A2A                     _setAlarm:
  1468                           	opt stack 26
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;incstack = 0
  1472                           ;setAlarm@alarm stored from wreg
  1473  001A2A  0100               	movlb	0	; () banked
  1474  001A2C  6FC7               	movwf	setAlarm@alarm& (0+255),b
  1475                           
  1476                           ;main.c: 61: newAlarm = alarm;
  1477  001A2E  C0C7  F03A         	movff	setAlarm@alarm,_newAlarm
  1478  001A32  0012               	return		;funcret
  1479  001A34                     __end_of_setAlarm:
  1480                           	opt stack 0
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           prodl	equ	0xFF3
  1486                           postinc0	equ	0xFEE
  1487                           plusw0	equ	0xFEB
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           indf2	equ	0xFDF
  1492                           plusw2	equ	0xFDB
  1493                           fsr2h	equ	0xFDA
  1494                           fsr2l	equ	0xFD9
  1495                           status	equ	0xFD8
  1496                           
  1497 ;; *************** function _initDoors *****************
  1498 ;; Defined at:
  1499 ;;		line 48 in file "main.c"
  1500 ;; Parameters:    Size  Location     Type
  1501 ;;  door_cnt        1    wreg     unsigned char 
  1502 ;; Auto vars:     Size  Location     Type
  1503 ;;  door_cnt        1    9[BANK0 ] unsigned char 
  1504 ;; Return value:  Size  Location     Type
  1505 ;;                  1    wreg      void 
  1506 ;; Registers used:
  1507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1508 ;; Tracked objects:
  1509 ;;		On entry : 0/0
  1510 ;;		On exit  : 0/0
  1511 ;;		Unchanged: 0/0
  1512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1513 ;;      Params:         0       0       0       0       0       0       0       0       0
  1514 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1515 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1516 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1517 ;;Total ram usage:        1 bytes
  1518 ;; Hardware stack levels used:    1
  1519 ;; Hardware stack levels required when called:    4
  1520 ;; This function calls:
  1521 ;;		_C_DOOR_Init
  1522 ;;		_C_DOOR_LockAll
  1523 ;;		_D_TMR0_Enable
  1524 ;; This function is called by:
  1525 ;;		_run
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529                           	psect	text4
  1530  001984                     __ptext4:
  1531                           	opt stack 0
  1532  001984                     _initDoors:
  1533                           	opt stack 25
  1534                           
  1535                           ;incstack = 0
  1536                           ;initDoors@door_cnt stored from wreg
  1537  001984  0100               	movlb	0	; () banked
  1538  001986  6FD0               	movwf	initDoors@door_cnt& (0+255),b
  1539                           
  1540                           ;main.c: 49: if (door_cnt < 1) {
  1541  001988  0100               	movlb	0	; () banked
  1542  00198A  51D0               	movf	initDoors@door_cnt& (0+255),w,b
  1543  00198C  A4D8               	btfss	status,2,c
  1544  00198E  D002               	goto	l320
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 50: door_cnt = 1;
  1548  001990  0E01               	movlw	1
  1549  001992  6FD0               	movwf	initDoors@door_cnt& (0+255),b
  1550  001994                     l320:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 51: }
  1554                           ;main.c: 53: C_DOOR_Init(door_cnt);
  1555                           
  1556                           ; BSR set to: 0
  1557  001994  51D0               	movf	initDoors@door_cnt& (0+255),w,b
  1558  001996  EC35  F007         	call	_C_DOOR_Init
  1559                           
  1560                           ;main.c: 54: C_DOOR_LockAll();
  1561  00199A  ECE4  F009         	call	_C_DOOR_LockAll	;wreg free
  1562                           
  1563                           ;main.c: 57: D_TMR0_Enable(1);
  1564  00199E  0E01               	movlw	1
  1565  0019A0  EC0B  F00D         	call	_D_TMR0_Enable
  1566  0019A4  0012               	return		;funcret
  1567  0019A6                     __end_of_initDoors:
  1568                           	opt stack 0
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           prodl	equ	0xFF3
  1574                           postinc0	equ	0xFEE
  1575                           plusw0	equ	0xFEB
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           fsr1l	equ	0xFE1
  1579                           indf2	equ	0xFDF
  1580                           plusw2	equ	0xFDB
  1581                           fsr2h	equ	0xFDA
  1582                           fsr2l	equ	0xFD9
  1583                           status	equ	0xFD8
  1584                           
  1585 ;; *************** function _C_DOOR_LockAll *****************
  1586 ;; Defined at:
  1587 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  d               1    8[BANK0 ] unsigned char 
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1601 ;;      Params:         0       0       0       0       0       0       0       0       0
  1602 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1603 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1604 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1605 ;;Total ram usage:        9 bytes
  1606 ;; Hardware stack levels used:    1
  1607 ;; Hardware stack levels required when called:    3
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_initDoors
  1612 ;;		_run
  1613 ;; This function uses a non-reentrant model
  1614 ;;
  1615                           
  1616                           	psect	text5
  1617  0013C8                     __ptext5:
  1618                           	opt stack 0
  1619  0013C8                     _C_DOOR_LockAll:
  1620                           	opt stack 25
  1621                           
  1622                           ;DOOR_Controller.c: 80: uint8_t d;
  1623                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1624                           
  1625                           ;incstack = 0
  1626  0013C8  0E00               	movlw	0
  1627  0013CA  0100               	movlb	0	; () banked
  1628  0013CC  6FCF               	movwf	C_DOOR_LockAll@d& (0+255),b
  1629  0013CE  D047               	goto	l30
  1630  0013D0                     
  1631                           ; BSR set to: 0
  1632                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1633                           
  1634                           ; BSR set to: 0
  1635  0013D0  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1636  0013D2  0D0A               	mullw	10
  1637  0013D4  0E02               	movlw	2
  1638  0013D6  26F3               	addwf	prodl,f,c
  1639  0013D8  0E00               	movlw	0
  1640  0013DA  22F4               	addwfc	prodh,f,c
  1641  0013DC  0E60               	movlw	low _doors
  1642  0013DE  24F3               	addwf	prodl,w,c
  1643  0013E0  6ED9               	movwf	fsr2l,c
  1644  0013E2  0E00               	movlw	high _doors
  1645  0013E4  20F4               	addwfc	prodh,w,c
  1646  0013E6  6EDA               	movwf	fsr2h,c
  1647  0013E8  CFDE F0C7          	movff	postinc2,??_C_DOOR_LockAll
  1648  0013EC  CFDD F0C8          	movff	postdec2,??_C_DOOR_LockAll+1
  1649  0013F0  C0C7  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1650  0013F4  C0C8  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1651  0013F8  50DF               	movf	indf2,w,c
  1652  0013FA  6FC9               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1653  0013FC  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1654  0013FE  0D0A               	mullw	10
  1655  001400  0E04               	movlw	4
  1656  001402  26F3               	addwf	prodl,f,c
  1657  001404  0E00               	movlw	0
  1658  001406  22F4               	addwfc	prodh,f,c
  1659  001408  0E60               	movlw	low _doors
  1660  00140A  24F3               	addwf	prodl,w,c
  1661  00140C  6ED9               	movwf	fsr2l,c
  1662  00140E  0E00               	movlw	high _doors
  1663  001410  20F4               	addwfc	prodh,w,c
  1664  001412  6EDA               	movwf	fsr2h,c
  1665  001414  50DF               	movf	indf2,w,c
  1666  001416  6FCA               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1667  001418  0E01               	movlw	1
  1668  00141A  6FCB               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1669  00141C  2BCA               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1670  00141E  D002               	goto	u1734
  1671  001420                     u1735:
  1672  001420  90D8               	bcf	status,0,c
  1673  001422  37CB               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1674  001424                     u1734:
  1675  001424  2FCA               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1676  001426  D7FC               	goto	u1735
  1677  001428  0100               	movlb	0	; () banked
  1678  00142A  51CB               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1679  00142C  15C9               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1680  00142E  6FCC               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1681  001430  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1682  001432  0D0A               	mullw	10
  1683  001434  0E02               	movlw	2
  1684  001436  26F3               	addwf	prodl,f,c
  1685  001438  0E00               	movlw	0
  1686  00143A  22F4               	addwfc	prodh,f,c
  1687  00143C  0E60               	movlw	low _doors
  1688  00143E  24F3               	addwf	prodl,w,c
  1689  001440  6ED9               	movwf	fsr2l,c
  1690  001442  0E00               	movlw	high _doors
  1691  001444  20F4               	addwfc	prodh,w,c
  1692  001446  6EDA               	movwf	fsr2h,c
  1693  001448  CFDE F0CD          	movff	postinc2,??_C_DOOR_LockAll+6
  1694  00144C  CFDD F0CE          	movff	postdec2,??_C_DOOR_LockAll+7
  1695  001450  C0CD  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1696  001454  C0CE  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1697  001458  51CC               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1698  00145A  1ADF               	xorwf	indf2,f,c
  1699                           
  1700                           ; BSR set to: 0
  1701  00145C  2BCF               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1702  00145E                     l30:
  1703                           
  1704                           ; BSR set to: 0
  1705                           
  1706                           ; BSR set to: 0
  1707  00145E  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1708  001460  6FC7               	movwf	??_C_DOOR_LockAll& (0+255),b
  1709  001462  6BC8               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1710  001464  5037               	movf	_door_cnt,w,c
  1711  001466  5DC7               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1712  001468  51C8               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1713  00146A  0A80               	xorlw	128
  1714  00146C  6FC9               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1715  00146E  5038               	movf	_door_cnt+1,w,c
  1716  001470  0A80               	xorlw	128
  1717  001472  59C9               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1718  001474  B0D8               	btfsc	status,0,c
  1719  001476  0012               	return	
  1720  001478  D7AB               	goto	l31
  1721  00147A                     __end_of_C_DOOR_LockAll:
  1722                           	opt stack 0
  1723                           tblptru	equ	0xFF8
  1724                           tblptrh	equ	0xFF7
  1725                           tblptrl	equ	0xFF6
  1726                           tablat	equ	0xFF5
  1727                           prodh	equ	0xFF4
  1728                           prodl	equ	0xFF3
  1729                           postinc0	equ	0xFEE
  1730                           plusw0	equ	0xFEB
  1731                           wreg	equ	0xFE8
  1732                           postdec1	equ	0xFE5
  1733                           fsr1l	equ	0xFE1
  1734                           indf2	equ	0xFDF
  1735                           postinc2	equ	0xFDE
  1736                           postdec2	equ	0xFDD
  1737                           plusw2	equ	0xFDB
  1738                           fsr2h	equ	0xFDA
  1739                           fsr2l	equ	0xFD9
  1740                           status	equ	0xFD8
  1741                           
  1742 ;; *************** function _C_DOOR_Init *****************
  1743 ;; Defined at:
  1744 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1745 ;; Parameters:    Size  Location     Type
  1746 ;;  cnt             1    wreg     unsigned char 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;  cnt             1    3[BANK0 ] unsigned char 
  1749 ;;  d               1    4[BANK0 ] unsigned char 
  1750 ;; Return value:  Size  Location     Type
  1751 ;;                  1    wreg      void 
  1752 ;; Registers used:
  1753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1754 ;; Tracked objects:
  1755 ;;		On entry : 0/0
  1756 ;;		On exit  : 0/0
  1757 ;;		Unchanged: 0/0
  1758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1759 ;;      Params:         0       0       0       0       0       0       0       0       0
  1760 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1761 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1762 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1763 ;;Total ram usage:        5 bytes
  1764 ;; Hardware stack levels used:    1
  1765 ;; Hardware stack levels required when called:    3
  1766 ;; This function calls:
  1767 ;;		Nothing
  1768 ;; This function is called by:
  1769 ;;		_initDoors
  1770 ;; This function uses a non-reentrant model
  1771 ;;
  1772                           
  1773                           	psect	text6
  1774  000E6A                     __ptext6:
  1775                           	opt stack 0
  1776  000E6A                     _C_DOOR_Init:
  1777                           	opt stack 25
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;incstack = 0
  1781                           ;C_DOOR_Init@cnt stored from wreg
  1782  000E6A  0100               	movlb	0	; () banked
  1783  000E6C  6FCA               	movwf	C_DOOR_Init@cnt& (0+255),b
  1784                           
  1785                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1786  000E6E  C0CA  F037         	movff	C_DOOR_Init@cnt,_door_cnt
  1787  000E72  6A38               	clrf	_door_cnt+1,c
  1788                           
  1789                           ;DOOR_Controller.c: 52: uint8_t d;
  1790                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1791  000E74  0E00               	movlw	0
  1792  000E76  0100               	movlb	0	; () banked
  1793  000E78  6FCB               	movwf	C_DOOR_Init@d& (0+255),b
  1794  000E7A  D092               	goto	l24
  1795  000E7C                     
  1796                           ; BSR set to: 0
  1797                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1798                           
  1799                           ; BSR set to: 0
  1800  000E7C  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1801  000E7E  0D0A               	mullw	10
  1802  000E80  0E60               	movlw	low _doors
  1803  000E82  24F3               	addwf	prodl,w,c
  1804  000E84  6ED9               	movwf	fsr2l,c
  1805  000E86  0E00               	movlw	high _doors
  1806  000E88  20F4               	addwfc	prodh,w,c
  1807  000E8A  6EDA               	movwf	fsr2h,c
  1808  000E8C  C0CB  FFDF         	movff	C_DOOR_Init@d,indf2
  1809                           
  1810                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1811  000E90  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1812  000E92  0D0A               	mullw	10
  1813  000E94  0E01               	movlw	1
  1814  000E96  26F3               	addwf	prodl,f,c
  1815  000E98  0E00               	movlw	0
  1816  000E9A  22F4               	addwfc	prodh,f,c
  1817  000E9C  0E60               	movlw	low _doors
  1818  000E9E  24F3               	addwf	prodl,w,c
  1819  000EA0  6ED9               	movwf	fsr2l,c
  1820  000EA2  0E00               	movlw	high _doors
  1821  000EA4  20F4               	addwfc	prodh,w,c
  1822  000EA6  6EDA               	movwf	fsr2h,c
  1823  000EA8  0E01               	movlw	1
  1824  000EAA  6EDF               	movwf	indf2,c
  1825                           
  1826                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1827  000EAC  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1828  000EAE  0D0A               	mullw	10
  1829  000EB0  0E02               	movlw	2
  1830  000EB2  26F3               	addwf	prodl,f,c
  1831  000EB4  0E00               	movlw	0
  1832  000EB6  22F4               	addwfc	prodh,f,c
  1833  000EB8  0E60               	movlw	low _doors
  1834  000EBA  24F3               	addwf	prodl,w,c
  1835  000EBC  6ED9               	movwf	fsr2l,c
  1836  000EBE  0E00               	movlw	high _doors
  1837  000EC0  20F4               	addwfc	prodh,w,c
  1838  000EC2  6EDA               	movwf	fsr2h,c
  1839  000EC4  0E81               	movlw	129
  1840  000EC6  6EDE               	movwf	postinc2,c
  1841  000EC8  0E0F               	movlw	15
  1842  000ECA  6EDD               	movwf	postdec2,c
  1843                           
  1844                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1845  000ECC  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1846  000ECE  0D0A               	mullw	10
  1847  000ED0  0E04               	movlw	4
  1848  000ED2  26F3               	addwf	prodl,f,c
  1849  000ED4  0E00               	movlw	0
  1850  000ED6  22F4               	addwfc	prodh,f,c
  1851  000ED8  0E60               	movlw	low _doors
  1852  000EDA  24F3               	addwf	prodl,w,c
  1853  000EDC  6ED9               	movwf	fsr2l,c
  1854  000EDE  0E00               	movlw	high _doors
  1855  000EE0  20F4               	addwfc	prodh,w,c
  1856  000EE2  6EDA               	movwf	fsr2h,c
  1857  000EE4  C0CB  FFDF         	movff	C_DOOR_Init@d,indf2
  1858                           
  1859                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1860  000EE8  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1861  000EEA  0D0A               	mullw	10
  1862  000EEC  0E06               	movlw	6
  1863  000EEE  26F3               	addwf	prodl,f,c
  1864  000EF0  0E00               	movlw	0
  1865  000EF2  22F4               	addwfc	prodh,f,c
  1866  000EF4  0E60               	movlw	low _doors
  1867  000EF6  24F3               	addwf	prodl,w,c
  1868  000EF8  6ED9               	movwf	fsr2l,c
  1869  000EFA  0E00               	movlw	high _doors
  1870  000EFC  20F4               	addwfc	prodh,w,c
  1871  000EFE  6EDA               	movwf	fsr2h,c
  1872  000F00  0E00               	movlw	0
  1873  000F02  6EDF               	movwf	indf2,c
  1874                           
  1875                           ;DOOR_Controller.c: 61: doors[d].was_open = !0;
  1876  000F04  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1877  000F06  0D0A               	mullw	10
  1878  000F08  0E05               	movlw	5
  1879  000F0A  26F3               	addwf	prodl,f,c
  1880  000F0C  0E00               	movlw	0
  1881  000F0E  22F4               	addwfc	prodh,f,c
  1882  000F10  0E60               	movlw	low _doors
  1883  000F12  24F3               	addwf	prodl,w,c
  1884  000F14  6ED9               	movwf	fsr2l,c
  1885  000F16  0E00               	movlw	high _doors
  1886  000F18  20F4               	addwfc	prodh,w,c
  1887  000F1A  6EDA               	movwf	fsr2h,c
  1888  000F1C  0E01               	movlw	1
  1889  000F1E  6EDF               	movwf	indf2,c
  1890                           
  1891                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1892  000F20  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1893  000F22  0D0A               	mullw	10
  1894  000F24  0E07               	movlw	7
  1895  000F26  26F3               	addwf	prodl,f,c
  1896  000F28  0E00               	movlw	0
  1897  000F2A  22F4               	addwfc	prodh,f,c
  1898  000F2C  0E60               	movlw	low _doors
  1899  000F2E  24F3               	addwf	prodl,w,c
  1900  000F30  6ED9               	movwf	fsr2l,c
  1901  000F32  0E00               	movlw	high _doors
  1902  000F34  20F4               	addwfc	prodh,w,c
  1903  000F36  6EDA               	movwf	fsr2h,c
  1904  000F38  0E80               	movlw	128
  1905  000F3A  6EDE               	movwf	postinc2,c
  1906  000F3C  0E0F               	movlw	15
  1907  000F3E  6EDD               	movwf	postdec2,c
  1908                           
  1909                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1910  000F40  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1911  000F42  0D0A               	mullw	10
  1912  000F44  0E09               	movlw	9
  1913  000F46  26F3               	addwf	prodl,f,c
  1914  000F48  0E00               	movlw	0
  1915  000F4A  22F4               	addwfc	prodh,f,c
  1916  000F4C  0E60               	movlw	low _doors
  1917  000F4E  24F3               	addwf	prodl,w,c
  1918  000F50  6ED9               	movwf	fsr2l,c
  1919  000F52  0E00               	movlw	high _doors
  1920  000F54  20F4               	addwfc	prodh,w,c
  1921  000F56  6EDA               	movwf	fsr2h,c
  1922  000F58  29CB               	incf	C_DOOR_Init@d& (0+255),w,b
  1923  000F5A  6EDF               	movwf	indf2,c
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1927  000F5C  C0CB  F0C7         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1928  000F60  0E01               	movlw	1
  1929  000F62  6FC8               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1930  000F64  2BC7               	incf	??_C_DOOR_Init& (0+255),f,b
  1931  000F66  D002               	goto	u1704
  1932  000F68                     u1705:
  1933  000F68  90D8               	bcf	status,0,c
  1934  000F6A  37C8               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1935  000F6C                     u1704:
  1936  000F6C  2FC7               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1937  000F6E  D7FC               	goto	u1705
  1938  000F70  0100               	movlb	0	; () banked
  1939  000F72  51C8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1940  000F74  1493               	andwf	3987,w,c	;volatile
  1941  000F76  1A93               	xorwf	3987,f,c	;volatile
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1945  000F78  5092               	movf	3986,w,c	;volatile
  1946  000F7A  0AFF               	xorlw	255
  1947  000F7C  6FC7               	movwf	??_C_DOOR_Init& (0+255),b
  1948  000F7E  C0CB  F0C8         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1949  000F82  0E01               	movlw	1
  1950  000F84  27C8               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1951  000F86  0E01               	movlw	1
  1952  000F88  6FC9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1953  000F8A  2BC8               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1954  000F8C  D002               	goto	u1714
  1955  000F8E                     u1715:
  1956  000F8E  90D8               	bcf	status,0,c
  1957  000F90  37C9               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1958  000F92                     u1714:
  1959  000F92  2FC8               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1960  000F94  D7FC               	goto	u1715
  1961  000F96  0100               	movlb	0	; () banked
  1962  000F98  51C9               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1963  000F9A  15C7               	andwf	??_C_DOOR_Init& (0+255),w,b
  1964  000F9C  1A92               	xorwf	3986,f,c	;volatile
  1965                           
  1966                           ; BSR set to: 0
  1967  000F9E  2BCB               	incf	C_DOOR_Init@d& (0+255),f,b
  1968  000FA0                     l24:
  1969                           
  1970                           ; BSR set to: 0
  1971                           
  1972                           ; BSR set to: 0
  1973  000FA0  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1974  000FA2  6FC7               	movwf	??_C_DOOR_Init& (0+255),b
  1975  000FA4  6BC8               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1976  000FA6  5037               	movf	_door_cnt,w,c
  1977  000FA8  5DC7               	subwf	??_C_DOOR_Init& (0+255),w,b
  1978  000FAA  51C8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1979  000FAC  0A80               	xorlw	128
  1980  000FAE  6FC9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1981  000FB0  5038               	movf	_door_cnt+1,w,c
  1982  000FB2  0A80               	xorlw	128
  1983  000FB4  59C9               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1984  000FB6  B0D8               	btfsc	status,0,c
  1985  000FB8  0012               	return	
  1986  000FBA  D760               	goto	l25
  1987  000FBC                     __end_of_C_DOOR_Init:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           prodh	equ	0xFF4
  1994                           prodl	equ	0xFF3
  1995                           postinc0	equ	0xFEE
  1996                           plusw0	equ	0xFEB
  1997                           wreg	equ	0xFE8
  1998                           postdec1	equ	0xFE5
  1999                           fsr1l	equ	0xFE1
  2000                           indf2	equ	0xFDF
  2001                           postinc2	equ	0xFDE
  2002                           postdec2	equ	0xFDD
  2003                           plusw2	equ	0xFDB
  2004                           fsr2h	equ	0xFDA
  2005                           fsr2l	equ	0xFD9
  2006                           status	equ	0xFD8
  2007                           
  2008 ;; *************** function _D_UART_WriteInt *****************
  2009 ;; Defined at:
  2010 ;;		line 220 in file "Drivers/UART_Driver.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;  command         2   26[BANK0 ] PTR const unsigned char 
  2013 ;;		 -> STR_17(2), 
  2014 ;;  d               2   28[BANK0 ] int 
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2026 ;;      Params:         0       4       0       0       0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2028 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2029 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2030 ;;Total ram usage:        5 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    5
  2033 ;; This function calls:
  2034 ;;		_printf
  2035 ;; This function is called by:
  2036 ;;		_run
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text7
  2041  00118A                     __ptext7:
  2042                           	opt stack 0
  2043  00118A                     _D_UART_WriteInt:
  2044                           	opt stack 24
  2045                           
  2046                           ;UART_Driver.c: 221: printf(startCharacter);
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;incstack = 0
  2050  00118A  C0F8  F0D3         	movff	_startCharacter,printf@f
  2051  00118E  C0F9  F0D4         	movff	_startCharacter+1,printf@f+1
  2052  001192  0100               	movlb	0	; () banked
  2053  001194  51D3               	movf	printf@f& (0+255),w,b
  2054  001196  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2055  001198  A4D8               	btfss	status,2,c
  2056  00119A  0E00               	movlw	low (__mediumconst shr (0+16))
  2057  00119C  6FD5               	movwf	(printf@f+2)& (0+255),b
  2058  00119E  EC25  F004         	call	_printf	;wreg free
  2059                           
  2060                           ;UART_Driver.c: 223: printf(messageCharacter);
  2061  0011A2  C0F4  F0D3         	movff	_messageCharacter,printf@f
  2062  0011A6  C0F5  F0D4         	movff	_messageCharacter+1,printf@f+1
  2063  0011AA  0100               	movlb	0	; () banked
  2064  0011AC  51D3               	movf	printf@f& (0+255),w,b
  2065  0011AE  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2066  0011B0  A4D8               	btfss	status,2,c
  2067  0011B2  0E00               	movlw	low (__mediumconst shr (0+16))
  2068  0011B4  6FD5               	movwf	(printf@f+2)& (0+255),b
  2069  0011B6  EC25  F004         	call	_printf	;wreg free
  2070                           
  2071                           ;UART_Driver.c: 224: printf(deviceName);
  2072  0011BA  C0C4  F0D3         	movff	_deviceName,printf@f
  2073  0011BE  C0C5  F0D4         	movff	_deviceName+1,printf@f+1
  2074  0011C2  C0C6  F0D5         	movff	_deviceName+2,printf@f+2
  2075  0011C6  EC25  F004         	call	_printf	;wreg free
  2076                           
  2077                           ;UART_Driver.c: 226: printf(":");printf(command);
  2078  0011CA  0E46               	movlw	low STR_5
  2079  0011CC  0100               	movlb	0	; () banked
  2080  0011CE  6FD3               	movwf	printf@f& (0+255),b
  2081  0011D0  0E08               	movlw	high STR_5
  2082  0011D2  6FD4               	movwf	(printf@f+1)& (0+255),b
  2083  0011D4  51D3               	movf	printf@f& (0+255),w,b
  2084  0011D6  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2085  0011D8  A4D8               	btfss	status,2,c
  2086  0011DA  0E00               	movlw	low (__mediumconst shr (0+16))
  2087  0011DC  6FD5               	movwf	(printf@f+2)& (0+255),b
  2088  0011DE  EC25  F004         	call	_printf	;wreg free
  2089  0011E2  C0E1  F0D3         	movff	D_UART_WriteInt@command,printf@f
  2090  0011E6  C0E2  F0D4         	movff	D_UART_WriteInt@command+1,printf@f+1
  2091  0011EA  0100               	movlb	0	; () banked
  2092  0011EC  51D3               	movf	printf@f& (0+255),w,b
  2093  0011EE  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2094  0011F0  A4D8               	btfss	status,2,c
  2095  0011F2  0E00               	movlw	low (__mediumconst shr (0+16))
  2096  0011F4  6FD5               	movwf	(printf@f+2)& (0+255),b
  2097  0011F6  EC25  F004         	call	_printf	;wreg free
  2098                           
  2099                           ;UART_Driver.c: 228: printf(":");printf("%d", d);
  2100  0011FA  0E46               	movlw	low STR_5
  2101  0011FC  0100               	movlb	0	; () banked
  2102  0011FE  6FD3               	movwf	printf@f& (0+255),b
  2103  001200  0E08               	movlw	high STR_5
  2104  001202  6FD4               	movwf	(printf@f+1)& (0+255),b
  2105  001204  51D3               	movf	printf@f& (0+255),w,b
  2106  001206  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2107  001208  A4D8               	btfss	status,2,c
  2108  00120A  0E00               	movlw	low (__mediumconst shr (0+16))
  2109  00120C  6FD5               	movwf	(printf@f+2)& (0+255),b
  2110  00120E  EC25  F004         	call	_printf	;wreg free
  2111  001212  0E2C               	movlw	low STR_9
  2112  001214  0100               	movlb	0	; () banked
  2113  001216  6FD3               	movwf	printf@f& (0+255),b
  2114  001218  0E08               	movlw	high STR_9
  2115  00121A  6FD4               	movwf	(printf@f+1)& (0+255),b
  2116  00121C  51D3               	movf	printf@f& (0+255),w,b
  2117  00121E  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2118  001220  A4D8               	btfss	status,2,c
  2119  001222  0E00               	movlw	low (__mediumconst shr (0+16))
  2120  001224  6FD5               	movwf	(printf@f+2)& (0+255),b
  2121  001226  C0E3  F0D6         	movff	D_UART_WriteInt@d,?_printf+3
  2122  00122A  C0E4  F0D7         	movff	D_UART_WriteInt@d+1,?_printf+4
  2123  00122E  EC25  F004         	call	_printf	;wreg free
  2124                           
  2125                           ;UART_Driver.c: 230: printf(stopCharacter);
  2126  001232  C0F6  F0D3         	movff	_stopCharacter,printf@f
  2127  001236  C0F7  F0D4         	movff	_stopCharacter+1,printf@f+1
  2128  00123A  0100               	movlb	0	; () banked
  2129  00123C  51D3               	movf	printf@f& (0+255),w,b
  2130  00123E  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2131  001240  A4D8               	btfss	status,2,c
  2132  001242  0E00               	movlw	low (__mediumconst shr (0+16))
  2133  001244  6FD5               	movwf	(printf@f+2)& (0+255),b
  2134  001246  EC25  F004         	call	_printf	;wreg free
  2135                           
  2136                           ;UART_Driver.c: 231: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  2137  00124A  0E06               	movlw	6
  2138  00124C  0100               	movlb	0	; () banked
  2139  00124E  6FE5               	movwf	??_D_UART_WriteInt& (0+255),b
  2140  001250  0E30               	movlw	48
  2141  001252                     u2247:
  2142  001252  2EE8               	decfsz	wreg,f,c
  2143  001254  D7FE               	bra	u2247
  2144  001256  2FE5               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  2145  001258  D7FC               	bra	u2247
  2146  00125A  F000               	nop	
  2147  00125C  0012               	return		;funcret
  2148  00125E                     __end_of_D_UART_WriteInt:
  2149                           	opt stack 0
  2150                           tblptru	equ	0xFF8
  2151                           tblptrh	equ	0xFF7
  2152                           tblptrl	equ	0xFF6
  2153                           tablat	equ	0xFF5
  2154                           prodh	equ	0xFF4
  2155                           prodl	equ	0xFF3
  2156                           postinc0	equ	0xFEE
  2157                           plusw0	equ	0xFEB
  2158                           wreg	equ	0xFE8
  2159                           postdec1	equ	0xFE5
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           postinc2	equ	0xFDE
  2163                           postdec2	equ	0xFDD
  2164                           plusw2	equ	0xFDB
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _D_UART_Read *****************
  2170 ;; Defined at:
  2171 ;;		line 234 in file "Drivers/UART_Driver.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;		None
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;		None
  2176 ;; Return value:  Size  Location     Type
  2177 ;;                  7    0[BANK0 ] struct .
  2178 ;; Registers used:
  2179 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2185 ;;      Params:         0       7       0       0       0       0       0       0       0
  2186 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2188 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2189 ;;Total ram usage:        7 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    3
  2192 ;; This function calls:
  2193 ;;		Nothing
  2194 ;; This function is called by:
  2195 ;;		_run
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text8
  2200  0018B6                     __ptext8:
  2201                           	opt stack 0
  2202  0018B6                     _D_UART_Read:
  2203                           	opt stack 26
  2204                           
  2205                           ;UART_Driver.c: 235: readData.sender = readBuffer.sender;
  2206                           
  2207                           ;incstack = 0
  2208  0018B6  0E0B               	movlw	low (_readBuffer+11)
  2209  0018B8  6E30               	movwf	_readData,c
  2210  0018BA  0E01               	movlw	high (_readBuffer+11)
  2211  0018BC  6E31               	movwf	_readData+1,c
  2212                           
  2213                           ;UART_Driver.c: 236: readData.command = readBuffer.command;
  2214  0018BE  0E3E               	movlw	low (_readBuffer+62)
  2215  0018C0  6E32               	movwf	_readData+2,c
  2216  0018C2  0E01               	movlw	high (_readBuffer+62)
  2217  0018C4  6E33               	movwf	_readData+3,c
  2218                           
  2219                           ;UART_Driver.c: 237: readData.message = readBuffer.message;
  2220  0018C6  0E71               	movlw	low (_readBuffer+113)
  2221  0018C8  6E34               	movwf	_readData+4,c
  2222  0018CA  0E01               	movlw	high (_readBuffer+113)
  2223  0018CC  6E35               	movwf	_readData+5,c
  2224                           
  2225                           ;UART_Driver.c: 238: readData.ackId = readBuffer.readId;
  2226  0018CE  C1A4  F036         	movff	_readBuffer+164,_readData+6
  2227                           
  2228                           ;UART_Driver.c: 239: return readData;
  2229  0018D2  EE20  F030         	lfsr	2,_readData
  2230  0018D6  EE00  F0C7         	lfsr	0,?_D_UART_Read
  2231  0018DA  0E06               	movlw	6
  2232  0018DC                     u1881:
  2233  0018DC  CFDB FFEB          	movff	plusw2,plusw0
  2234  0018E0  06E8               	decf	wreg,f,c
  2235  0018E2  E2FC               	bc	u1881
  2236  0018E4  0012               	return	
  2237  0018E6                     __end_of_D_UART_Read:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           prodh	equ	0xFF4
  2244                           prodl	equ	0xFF3
  2245                           postinc0	equ	0xFEE
  2246                           plusw0	equ	0xFEB
  2247                           wreg	equ	0xFE8
  2248                           postdec1	equ	0xFE5
  2249                           fsr1l	equ	0xFE1
  2250                           indf2	equ	0xFDF
  2251                           postinc2	equ	0xFDE
  2252                           postdec2	equ	0xFDD
  2253                           plusw2	equ	0xFDB
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _D_UART_Acknowledge *****************
  2259 ;; Defined at:
  2260 ;;		line 289 in file "Drivers/UART_Driver.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  i               1    wreg     unsigned char 
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;  i               1   26[BANK0 ] unsigned char 
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2274 ;;      Params:         0       0       0       0       0       0       0       0       0
  2275 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2277 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2278 ;;Total ram usage:        1 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    5
  2281 ;; This function calls:
  2282 ;;		_printf
  2283 ;; This function is called by:
  2284 ;;		_run
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text9
  2289  0016B6                     __ptext9:
  2290                           	opt stack 0
  2291  0016B6                     _D_UART_Acknowledge:
  2292                           	opt stack 24
  2293                           
  2294                           ;incstack = 0
  2295                           ;D_UART_Acknowledge@i stored from wreg
  2296  0016B6  0100               	movlb	0	; () banked
  2297  0016B8  6FE1               	movwf	D_UART_Acknowledge@i& (0+255),b
  2298                           
  2299                           ;UART_Driver.c: 290: printf(startCharacter);
  2300  0016BA  C0F8  F0D3         	movff	_startCharacter,printf@f
  2301  0016BE  C0F9  F0D4         	movff	_startCharacter+1,printf@f+1
  2302  0016C2  0100               	movlb	0	; () banked
  2303  0016C4  51D3               	movf	printf@f& (0+255),w,b
  2304  0016C6  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2305  0016C8  A4D8               	btfss	status,2,c
  2306  0016CA  0E00               	movlw	low (__mediumconst shr (0+16))
  2307  0016CC  6FD5               	movwf	(printf@f+2)& (0+255),b
  2308  0016CE  EC25  F004         	call	_printf	;wreg free
  2309                           
  2310                           ;UART_Driver.c: 292: printf(ackCharacter);
  2311  0016D2  C0F2  F0D3         	movff	_ackCharacter,printf@f
  2312  0016D6  C0F3  F0D4         	movff	_ackCharacter+1,printf@f+1
  2313  0016DA  0100               	movlb	0	; () banked
  2314  0016DC  51D3               	movf	printf@f& (0+255),w,b
  2315  0016DE  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2316  0016E0  A4D8               	btfss	status,2,c
  2317  0016E2  0E00               	movlw	low (__mediumconst shr (0+16))
  2318  0016E4  6FD5               	movwf	(printf@f+2)& (0+255),b
  2319  0016E6  EC25  F004         	call	_printf	;wreg free
  2320                           
  2321                           ;UART_Driver.c: 294: printf("%x", i);
  2322  0016EA  0E2F               	movlw	low STR_10
  2323  0016EC  0100               	movlb	0	; () banked
  2324  0016EE  6FD3               	movwf	printf@f& (0+255),b
  2325  0016F0  0E08               	movlw	high STR_10
  2326  0016F2  6FD4               	movwf	(printf@f+1)& (0+255),b
  2327  0016F4  51D3               	movf	printf@f& (0+255),w,b
  2328  0016F6  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2329  0016F8  A4D8               	btfss	status,2,c
  2330  0016FA  0E00               	movlw	low (__mediumconst shr (0+16))
  2331  0016FC  6FD5               	movwf	(printf@f+2)& (0+255),b
  2332  0016FE  C0E1  F0D6         	movff	D_UART_Acknowledge@i,?_printf+3
  2333  001702  6BD7               	clrf	(?_printf+4)& (0+255),b
  2334  001704  EC25  F004         	call	_printf	;wreg free
  2335                           
  2336                           ;UART_Driver.c: 296: printf(stopCharacter);
  2337  001708  C0F6  F0D3         	movff	_stopCharacter,printf@f
  2338  00170C  C0F7  F0D4         	movff	_stopCharacter+1,printf@f+1
  2339  001710  0100               	movlb	0	; () banked
  2340  001712  51D3               	movf	printf@f& (0+255),w,b
  2341  001714  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2342  001716  A4D8               	btfss	status,2,c
  2343  001718  0E00               	movlw	low (__mediumconst shr (0+16))
  2344  00171A  6FD5               	movwf	(printf@f+2)& (0+255),b
  2345  00171C  EC25  F004         	call	_printf	;wreg free
  2346  001720  0012               	return		;funcret
  2347  001722                     __end_of_D_UART_Acknowledge:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           postinc0	equ	0xFEE
  2356                           plusw0	equ	0xFEB
  2357                           wreg	equ	0xFE8
  2358                           postdec1	equ	0xFE5
  2359                           fsr1l	equ	0xFE1
  2360                           indf2	equ	0xFDF
  2361                           postinc2	equ	0xFDE
  2362                           postdec2	equ	0xFDD
  2363                           plusw2	equ	0xFDB
  2364                           fsr2h	equ	0xFDA
  2365                           fsr2l	equ	0xFD9
  2366                           status	equ	0xFD8
  2367                           
  2368 ;; *************** function _D_PWM_SetPwm *****************
  2369 ;; Defined at:
  2370 ;;		line 44 in file "Drivers/PWM_Driver.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  pwm             1    wreg     unsigned char 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;  pwm             1    0[BANK0 ] unsigned char 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2384 ;;      Params:         0       0       0       0       0       0       0       0       0
  2385 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2386 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2387 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2388 ;;Total ram usage:        1 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    3
  2391 ;; This function calls:
  2392 ;;		Nothing
  2393 ;; This function is called by:
  2394 ;;		_run
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text10
  2399  0018E6                     __ptext10:
  2400                           	opt stack 0
  2401  0018E6                     _D_PWM_SetPwm:
  2402                           	opt stack 26
  2403                           
  2404                           ;incstack = 0
  2405                           ;D_PWM_SetPwm@pwm stored from wreg
  2406  0018E6  0100               	movlb	0	; () banked
  2407  0018E8  6FC7               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2408                           
  2409                           ;PWM_Driver.c: 45: if (pwm > 0) {
  2410  0018EA  0100               	movlb	0	; () banked
  2411  0018EC  51C7               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2412  0018EE  B4D8               	btfsc	status,2,c
  2413  0018F0  D00A               	goto	l216
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  2417  0018F2  B4CA               	btfsc	4042,2,c	;volatile
  2418  0018F4  D005               	goto	l217
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  2422  0018F6  50BD               	movf	4029,w,c	;volatile
  2423  0018F8  0BF0               	andlw	-16
  2424  0018FA  090C               	iorlw	12
  2425  0018FC  6EBD               	movwf	4029,c	;volatile
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  2429  0018FE  84CA               	bsf	4042,2,c	;volatile
  2430  001900                     l217:
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;PWM_Driver.c: 49: }
  2434                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  2435                           
  2436                           ; BSR set to: 0
  2437  001900  C0C7  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2438                           
  2439                           ;PWM_Driver.c: 51: } else {
  2440  001904  0012               	return	
  2441  001906                     l216:
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  2445  001906  90BD               	bcf	4029,0,c	;volatile
  2446  001908  92BD               	bcf	4029,1,c	;volatile
  2447  00190A  94BD               	bcf	4029,2,c	;volatile
  2448  00190C  96BD               	bcf	4029,3,c	;volatile
  2449                           
  2450                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  2451  00190E  94CA               	bcf	4042,2,c	;volatile
  2452                           
  2453                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  2454  001910  9482               	bcf	3970,2,c	;volatile
  2455  001912  0012               	return	
  2456  001914                     __end_of_D_PWM_SetPwm:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           prodh	equ	0xFF4
  2463                           prodl	equ	0xFF3
  2464                           postinc0	equ	0xFEE
  2465                           plusw0	equ	0xFEB
  2466                           wreg	equ	0xFE8
  2467                           postdec1	equ	0xFE5
  2468                           fsr1l	equ	0xFE1
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           postdec2	equ	0xFDD
  2472                           plusw2	equ	0xFDB
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _C_DOOR_UnlockAll *****************
  2478 ;; Defined at:
  2479 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  d               1    8[BANK0 ] unsigned char 
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2495 ;;      Temps:          0       8       0       0       0       0       0       0       0
  2496 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        9 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    3
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_run
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           	psect	text11
  2508  001314                     __ptext11:
  2509                           	opt stack 0
  2510  001314                     _C_DOOR_UnlockAll:
  2511                           	opt stack 26
  2512                           
  2513                           ;DOOR_Controller.c: 96: uint8_t d;
  2514                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;incstack = 0
  2518  001314  0E00               	movlw	0
  2519  001316  0100               	movlb	0	; () banked
  2520  001318  6FCF               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  2521  00131A  D048               	goto	l36
  2522  00131C                     
  2523                           ; BSR set to: 0
  2524                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  2525                           
  2526                           ; BSR set to: 0
  2527  00131C  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2528  00131E  0D0A               	mullw	10
  2529  001320  0E02               	movlw	2
  2530  001322  26F3               	addwf	prodl,f,c
  2531  001324  0E00               	movlw	0
  2532  001326  22F4               	addwfc	prodh,f,c
  2533  001328  0E60               	movlw	low _doors
  2534  00132A  24F3               	addwf	prodl,w,c
  2535  00132C  6ED9               	movwf	fsr2l,c
  2536  00132E  0E00               	movlw	high _doors
  2537  001330  20F4               	addwfc	prodh,w,c
  2538  001332  6EDA               	movwf	fsr2h,c
  2539  001334  CFDE F0C7          	movff	postinc2,??_C_DOOR_UnlockAll
  2540  001338  CFDD F0C8          	movff	postdec2,??_C_DOOR_UnlockAll+1
  2541  00133C  C0C7  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  2542  001340  C0C8  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  2543  001344  50DF               	movf	indf2,w,c
  2544  001346  0AFF               	xorlw	255
  2545  001348  6FC9               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  2546  00134A  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2547  00134C  0D0A               	mullw	10
  2548  00134E  0E04               	movlw	4
  2549  001350  26F3               	addwf	prodl,f,c
  2550  001352  0E00               	movlw	0
  2551  001354  22F4               	addwfc	prodh,f,c
  2552  001356  0E60               	movlw	low _doors
  2553  001358  24F3               	addwf	prodl,w,c
  2554  00135A  6ED9               	movwf	fsr2l,c
  2555  00135C  0E00               	movlw	high _doors
  2556  00135E  20F4               	addwfc	prodh,w,c
  2557  001360  6EDA               	movwf	fsr2h,c
  2558  001362  50DF               	movf	indf2,w,c
  2559  001364  6FCA               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  2560  001366  0E01               	movlw	1
  2561  001368  6FCB               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  2562  00136A  2BCA               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  2563  00136C  D002               	goto	u1784
  2564  00136E                     u1785:
  2565  00136E  90D8               	bcf	status,0,c
  2566  001370  37CB               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  2567  001372                     u1784:
  2568  001372  2FCA               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  2569  001374  D7FC               	goto	u1785
  2570  001376  0100               	movlb	0	; () banked
  2571  001378  51CB               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  2572  00137A  15C9               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  2573  00137C  6FCC               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  2574  00137E  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2575  001380  0D0A               	mullw	10
  2576  001382  0E02               	movlw	2
  2577  001384  26F3               	addwf	prodl,f,c
  2578  001386  0E00               	movlw	0
  2579  001388  22F4               	addwfc	prodh,f,c
  2580  00138A  0E60               	movlw	low _doors
  2581  00138C  24F3               	addwf	prodl,w,c
  2582  00138E  6ED9               	movwf	fsr2l,c
  2583  001390  0E00               	movlw	high _doors
  2584  001392  20F4               	addwfc	prodh,w,c
  2585  001394  6EDA               	movwf	fsr2h,c
  2586  001396  CFDE F0CD          	movff	postinc2,??_C_DOOR_UnlockAll+6
  2587  00139A  CFDD F0CE          	movff	postdec2,??_C_DOOR_UnlockAll+7
  2588  00139E  C0CD  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  2589  0013A2  C0CE  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  2590  0013A6  51CC               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  2591  0013A8  1ADF               	xorwf	indf2,f,c
  2592                           
  2593                           ; BSR set to: 0
  2594  0013AA  2BCF               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  2595  0013AC                     l36:
  2596                           
  2597                           ; BSR set to: 0
  2598                           
  2599                           ; BSR set to: 0
  2600  0013AC  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2601  0013AE  6FC7               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  2602  0013B0  6BC8               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  2603  0013B2  5037               	movf	_door_cnt,w,c
  2604  0013B4  5DC7               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  2605  0013B6  51C8               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  2606  0013B8  0A80               	xorlw	128
  2607  0013BA  6FC9               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  2608  0013BC  5038               	movf	_door_cnt+1,w,c
  2609  0013BE  0A80               	xorlw	128
  2610  0013C0  59C9               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  2611  0013C2  B0D8               	btfsc	status,0,c
  2612  0013C4  0012               	return	
  2613  0013C6  D7AA               	goto	l37
  2614  0013C8                     __end_of_C_DOOR_UnlockAll:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           postinc0	equ	0xFEE
  2623                           plusw0	equ	0xFEB
  2624                           wreg	equ	0xFE8
  2625                           postdec1	equ	0xFE5
  2626                           fsr1l	equ	0xFE1
  2627                           indf2	equ	0xFDF
  2628                           postinc2	equ	0xFDE
  2629                           postdec2	equ	0xFDD
  2630                           plusw2	equ	0xFDB
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _C_DOOR_SendStates *****************
  2636 ;; Defined at:
  2637 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;		None
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  com             3   34[BANK0 ] unsigned char [3]
  2642 ;;  mes             2   37[BANK0 ] unsigned char [2]
  2643 ;;  d               1   39[BANK0 ] unsigned char 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0
  2654 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2655 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2656 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2657 ;;Total ram usage:        9 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    6
  2660 ;; This function calls:
  2661 ;;		_D_UART_Write
  2662 ;;		_commandAndMessage
  2663 ;; This function is called by:
  2664 ;;		_run
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text12
  2669  000FBC                     __ptext12:
  2670                           	opt stack 0
  2671  000FBC                     _C_DOOR_SendStates:
  2672                           	opt stack 23
  2673                           
  2674                           ;DOOR_Controller.c: 110: uint8_t d;
  2675                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;incstack = 0
  2679  000FBC  0E00               	movlw	0
  2680  000FBE  0100               	movlb	0	; () banked
  2681  000FC0  6FEE               	movwf	C_DOOR_SendStates@d& (0+255),b
  2682  000FC2  D065               	goto	l48
  2683  000FC4                     
  2684                           ; BSR set to: 0
  2685                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  2686                           
  2687                           ; BSR set to: 0
  2688  000FC4  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2689  000FC6  0D0A               	mullw	10
  2690  000FC8  0E06               	movlw	6
  2691  000FCA  26F3               	addwf	prodl,f,c
  2692  000FCC  0E00               	movlw	0
  2693  000FCE  22F4               	addwfc	prodh,f,c
  2694  000FD0  0E60               	movlw	low _doors
  2695  000FD2  24F3               	addwf	prodl,w,c
  2696  000FD4  6ED9               	movwf	fsr2l,c
  2697  000FD6  0E00               	movlw	high _doors
  2698  000FD8  20F4               	addwfc	prodh,w,c
  2699  000FDA  6EDA               	movwf	fsr2h,c
  2700  000FDC  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2701  000FDE  0D0A               	mullw	10
  2702  000FE0  0E05               	movlw	5
  2703  000FE2  26F3               	addwf	prodl,f,c
  2704  000FE4  0E00               	movlw	0
  2705  000FE6  22F4               	addwfc	prodh,f,c
  2706  000FE8  0E60               	movlw	low _doors
  2707  000FEA  24F3               	addwf	prodl,w,c
  2708  000FEC  6EE1               	movwf	fsr1l,c
  2709  000FEE  0E00               	movlw	high _doors
  2710  000FF0  20F4               	addwfc	prodh,w,c
  2711  000FF2  6EE2               	movwf	fsr1h,c
  2712  000FF4  50DE               	movf	postinc2,w,c
  2713  000FF6  18E6               	xorwf	postinc1,w,c
  2714  000FF8  B4D8               	btfsc	status,2,c
  2715  000FFA  D048               	goto	l50
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;DOOR_Controller.c: 114: char com[3];
  2719                           ;DOOR_Controller.c: 115: char mes[2];
  2720                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  2721  000FFC  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2722  000FFE  0D0A               	mullw	10
  2723  001000  0E60               	movlw	low _doors
  2724  001002  24F3               	addwf	prodl,w,c
  2725  001004  6ED9               	movwf	fsr2l,c
  2726  001006  0E00               	movlw	high _doors
  2727  001008  20F4               	addwfc	prodh,w,c
  2728  00100A  6EDA               	movwf	fsr2h,c
  2729  00100C  EE00  F0C7         	lfsr	0,commandAndMessage@door
  2730  001010  0E09               	movlw	9
  2731  001012                     u1851:
  2732  001012  CFDB FFEB          	movff	plusw2,plusw0
  2733  001016  06E8               	decf	wreg,f,c
  2734  001018  E2FC               	bc	u1851
  2735  00101A  0EE9               	movlw	low C_DOOR_SendStates@com
  2736  00101C  6FD1               	movwf	commandAndMessage@com& (0+255),b
  2737  00101E  0E00               	movlw	high C_DOOR_SendStates@com
  2738  001020  6FD2               	movwf	(commandAndMessage@com+1)& (0+255),b
  2739  001022  0EEC               	movlw	low C_DOOR_SendStates@mes
  2740  001024  6FD3               	movwf	commandAndMessage@mes& (0+255),b
  2741  001026  0E00               	movlw	high C_DOOR_SendStates@mes
  2742  001028  6FD4               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2743  00102A  EC91  F00B         	call	_commandAndMessage	;wreg free
  2744                           
  2745                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  2746  00102E  0EE9               	movlw	low C_DOOR_SendStates@com
  2747  001030  0100               	movlb	0	; () banked
  2748  001032  6FE1               	movwf	D_UART_Write@command& (0+255),b
  2749  001034  0E00               	movlw	high C_DOOR_SendStates@com
  2750  001036  6FE2               	movwf	(D_UART_Write@command+1)& (0+255),b
  2751  001038  0EEC               	movlw	low C_DOOR_SendStates@mes
  2752  00103A  6FE3               	movwf	D_UART_Write@data& (0+255),b
  2753  00103C  0E00               	movlw	high C_DOOR_SendStates@mes
  2754  00103E  6FE4               	movwf	(D_UART_Write@data+1)& (0+255),b
  2755  001040  EC55  F008         	call	_D_UART_Write	;wreg free
  2756                           
  2757                           ;DOOR_Controller.c: 120: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  2758  001044  0E06               	movlw	6
  2759  001046  0100               	movlb	0	; () banked
  2760  001048  6FE6               	movwf	??_C_DOOR_SendStates& (0+255),b
  2761  00104A  0E30               	movlw	48
  2762  00104C                     u2257:
  2763  00104C  2EE8               	decfsz	wreg,f,c
  2764  00104E  D7FE               	bra	u2257
  2765  001050  2FE6               	decfsz	??_C_DOOR_SendStates& (0+255),f,b
  2766  001052  D7FC               	bra	u2257
  2767  001054  F000               	nop	
  2768                           
  2769                           ;DOOR_Controller.c: 122: doors[d].was_open = doors[d].is_open;
  2770  001056  0100               	movlb	0	; () banked
  2771  001058  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2772  00105A  0D0A               	mullw	10
  2773  00105C  0E06               	movlw	6
  2774  00105E  26F3               	addwf	prodl,f,c
  2775  001060  0E00               	movlw	0
  2776  001062  22F4               	addwfc	prodh,f,c
  2777  001064  0E60               	movlw	low _doors
  2778  001066  24F3               	addwf	prodl,w,c
  2779  001068  6ED9               	movwf	fsr2l,c
  2780  00106A  0E00               	movlw	high _doors
  2781  00106C  20F4               	addwfc	prodh,w,c
  2782  00106E  6EDA               	movwf	fsr2h,c
  2783  001070  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2784  001072  0D0A               	mullw	10
  2785  001074  0E05               	movlw	5
  2786  001076  26F3               	addwf	prodl,f,c
  2787  001078  0E00               	movlw	0
  2788  00107A  22F4               	addwfc	prodh,f,c
  2789  00107C  0E60               	movlw	low _doors
  2790  00107E  24F3               	addwf	prodl,w,c
  2791  001080  6EE1               	movwf	fsr1l,c
  2792  001082  0E00               	movlw	high _doors
  2793  001084  20F4               	addwfc	prodh,w,c
  2794  001086  6EE2               	movwf	fsr1h,c
  2795  001088  CFDF FFE7          	movff	indf2,indf1
  2796  00108C                     l50:
  2797                           
  2798                           ; BSR set to: 0
  2799                           
  2800                           ; BSR set to: 0
  2801  00108C  2BEE               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2802  00108E                     l48:
  2803                           
  2804                           ; BSR set to: 0
  2805                           
  2806                           ; BSR set to: 0
  2807  00108E  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2808  001090  6FE6               	movwf	??_C_DOOR_SendStates& (0+255),b
  2809  001092  6BE7               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  2810  001094  5037               	movf	_door_cnt,w,c
  2811  001096  5DE6               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  2812  001098  51E7               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  2813  00109A  0A80               	xorlw	128
  2814  00109C  6FE8               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  2815  00109E  5038               	movf	_door_cnt+1,w,c
  2816  0010A0  0A80               	xorlw	128
  2817  0010A2  59E8               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  2818  0010A4  B0D8               	btfsc	status,0,c
  2819  0010A6  0012               	return	
  2820  0010A8  D78D               	goto	l49
  2821  0010AA                     __end_of_C_DOOR_SendStates:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           prodh	equ	0xFF4
  2828                           prodl	equ	0xFF3
  2829                           postinc0	equ	0xFEE
  2830                           plusw0	equ	0xFEB
  2831                           wreg	equ	0xFE8
  2832                           indf1	equ	0xFE7
  2833                           postinc1	equ	0xFE6
  2834                           postdec1	equ	0xFE5
  2835                           fsr1h	equ	0xFE2
  2836                           fsr1l	equ	0xFE1
  2837                           indf2	equ	0xFDF
  2838                           postinc2	equ	0xFDE
  2839                           postdec2	equ	0xFDD
  2840                           plusw2	equ	0xFDB
  2841                           fsr2h	equ	0xFDA
  2842                           fsr2l	equ	0xFD9
  2843                           status	equ	0xFD8
  2844                           
  2845 ;; *************** function _commandAndMessage *****************
  2846 ;; Defined at:
  2847 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  door           10    0[BANK0 ] struct .
  2850 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2851 ;;		 -> C_DOOR_SendStates@com(3), 
  2852 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2853 ;;		 -> C_DOOR_SendStates@mes(2), 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2865 ;;      Params:         0      14       0       0       0       0       0       0       0
  2866 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2868 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2869 ;;Total ram usage:       14 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    3
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_C_DOOR_SendStates
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           	psect	text13
  2880  001722                     __ptext13:
  2881                           	opt stack 0
  2882  001722                     _commandAndMessage:
  2883                           	opt stack 25
  2884                           
  2885                           ;DOOR_Controller.c: 33: com[0] = 'D';
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;incstack = 0
  2889  001722  C0D1  FFD9         	movff	commandAndMessage@com,fsr2l
  2890  001726  C0D2  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2891  00172A  0E44               	movlw	68
  2892  00172C  6EDF               	movwf	indf2,c
  2893                           
  2894                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  2895  00172E  0100               	movlb	0	; () banked
  2896  001730  EE20 F001          	lfsr	2,1
  2897  001734  51D1               	movf	commandAndMessage@com& (0+255),w,b
  2898  001736  26D9               	addwf	fsr2l,f,c
  2899  001738  51D2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2900  00173A  22DA               	addwfc	fsr2h,f,c
  2901  00173C  51C7               	movf	commandAndMessage@door& (0+255),w,b
  2902  00173E  0F30               	addlw	48
  2903  001740  6EDF               	movwf	indf2,c
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;DOOR_Controller.c: 35: com[2] = '\0';
  2907  001742  EE20 F002          	lfsr	2,2
  2908  001746  51D1               	movf	commandAndMessage@com& (0+255),w,b
  2909  001748  26D9               	addwf	fsr2l,f,c
  2910  00174A  51D2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2911  00174C  22DA               	addwfc	fsr2h,f,c
  2912  00174E  0E00               	movlw	0
  2913  001750  6EDF               	movwf	indf2,c
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;DOOR_Controller.c: 38: if (door.is_open) {
  2917  001752  51CD               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2918  001754  B4D8               	btfsc	status,2,c
  2919  001756  D006               	goto	l19
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  2923  001758  C0D3  FFD9         	movff	commandAndMessage@mes,fsr2l
  2924  00175C  C0D4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2925  001760  0E43               	movlw	67
  2926  001762  D005               	goto	L2
  2927  001764                     l19:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  2931                           
  2932                           ; BSR set to: 0
  2933  001764  C0D3  FFD9         	movff	commandAndMessage@mes,fsr2l
  2934  001768  C0D4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2935  00176C  0E4F               	movlw	79
  2936  00176E                     L2:
  2937  00176E  6EDF               	movwf	indf2,c
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;DOOR_Controller.c: 42: }
  2941                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  2942                           
  2943                           ; BSR set to: 0
  2944  001770  EE20 F001          	lfsr	2,1
  2945  001774  51D3               	movf	commandAndMessage@mes& (0+255),w,b
  2946  001776  26D9               	addwf	fsr2l,f,c
  2947  001778  51D4               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2948  00177A  22DA               	addwfc	fsr2h,f,c
  2949  00177C  0E00               	movlw	0
  2950  00177E  6EDF               	movwf	indf2,c
  2951                           
  2952                           ; BSR set to: 0
  2953  001780  0012               	return		;funcret
  2954  001782                     __end_of_commandAndMessage:
  2955                           	opt stack 0
  2956                           tblptru	equ	0xFF8
  2957                           tblptrh	equ	0xFF7
  2958                           tblptrl	equ	0xFF6
  2959                           tablat	equ	0xFF5
  2960                           prodh	equ	0xFF4
  2961                           prodl	equ	0xFF3
  2962                           postinc0	equ	0xFEE
  2963                           plusw0	equ	0xFEB
  2964                           wreg	equ	0xFE8
  2965                           indf1	equ	0xFE7
  2966                           postinc1	equ	0xFE6
  2967                           postdec1	equ	0xFE5
  2968                           fsr1h	equ	0xFE2
  2969                           fsr1l	equ	0xFE1
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           postdec2	equ	0xFDD
  2973                           plusw2	equ	0xFDB
  2974                           fsr2h	equ	0xFDA
  2975                           fsr2l	equ	0xFD9
  2976                           status	equ	0xFD8
  2977                           
  2978 ;; *************** function _D_UART_Write *****************
  2979 ;; Defined at:
  2980 ;;		line 206 in file "Drivers/UART_Driver.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;  command         2   26[BANK0 ] PTR const unsigned char 
  2983 ;;		 -> STR_19(2), C_DOOR_SendStates@com(3), 
  2984 ;;  data            2   28[BANK0 ] PTR const unsigned char 
  2985 ;;		 -> STR_20(2), C_DOOR_SendStates@mes(2), 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;		None
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2997 ;;      Params:         0       4       0       0       0       0       0       0       0
  2998 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2999 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3000 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3001 ;;Total ram usage:        5 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    5
  3004 ;; This function calls:
  3005 ;;		_printf
  3006 ;; This function is called by:
  3007 ;;		_C_DOOR_SendStates
  3008 ;;		_run
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text14
  3013  0010AA                     __ptext14:
  3014                           	opt stack 0
  3015  0010AA                     _D_UART_Write:
  3016                           	opt stack 24
  3017                           
  3018                           ;UART_Driver.c: 207: printf(startCharacter);
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;incstack = 0
  3022  0010AA  C0F8  F0D3         	movff	_startCharacter,printf@f
  3023  0010AE  C0F9  F0D4         	movff	_startCharacter+1,printf@f+1
  3024  0010B2  0100               	movlb	0	; () banked
  3025  0010B4  51D3               	movf	printf@f& (0+255),w,b
  3026  0010B6  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3027  0010B8  A4D8               	btfss	status,2,c
  3028  0010BA  0E00               	movlw	low (__mediumconst shr (0+16))
  3029  0010BC  6FD5               	movwf	(printf@f+2)& (0+255),b
  3030  0010BE  EC25  F004         	call	_printf	;wreg free
  3031                           
  3032                           ;UART_Driver.c: 209: printf(messageCharacter);
  3033  0010C2  C0F4  F0D3         	movff	_messageCharacter,printf@f
  3034  0010C6  C0F5  F0D4         	movff	_messageCharacter+1,printf@f+1
  3035  0010CA  0100               	movlb	0	; () banked
  3036  0010CC  51D3               	movf	printf@f& (0+255),w,b
  3037  0010CE  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3038  0010D0  A4D8               	btfss	status,2,c
  3039  0010D2  0E00               	movlw	low (__mediumconst shr (0+16))
  3040  0010D4  6FD5               	movwf	(printf@f+2)& (0+255),b
  3041  0010D6  EC25  F004         	call	_printf	;wreg free
  3042                           
  3043                           ;UART_Driver.c: 210: printf(deviceName);
  3044  0010DA  C0C4  F0D3         	movff	_deviceName,printf@f
  3045  0010DE  C0C5  F0D4         	movff	_deviceName+1,printf@f+1
  3046  0010E2  C0C6  F0D5         	movff	_deviceName+2,printf@f+2
  3047  0010E6  EC25  F004         	call	_printf	;wreg free
  3048                           
  3049                           ;UART_Driver.c: 212: printf(":");printf(command);
  3050  0010EA  0E46               	movlw	low STR_5
  3051  0010EC  0100               	movlb	0	; () banked
  3052  0010EE  6FD3               	movwf	printf@f& (0+255),b
  3053  0010F0  0E08               	movlw	high STR_5
  3054  0010F2  6FD4               	movwf	(printf@f+1)& (0+255),b
  3055  0010F4  51D3               	movf	printf@f& (0+255),w,b
  3056  0010F6  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3057  0010F8  A4D8               	btfss	status,2,c
  3058  0010FA  0E00               	movlw	low (__mediumconst shr (0+16))
  3059  0010FC  6FD5               	movwf	(printf@f+2)& (0+255),b
  3060  0010FE  EC25  F004         	call	_printf	;wreg free
  3061  001102  C0E1  F0D3         	movff	D_UART_Write@command,printf@f
  3062  001106  C0E2  F0D4         	movff	D_UART_Write@command+1,printf@f+1
  3063  00110A  0100               	movlb	0	; () banked
  3064  00110C  6BD5               	clrf	(printf@f+2)& (0+255),b
  3065  00110E  51D3               	movf	printf@f& (0+255),w,b
  3066  001110  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3067  001112  B4D8               	btfsc	status,2,c
  3068  001114  D005               	goto	u1751
  3069  001116  0E07               	movlw	(high __ramtop+-1)
  3070  001118  65E2               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3071  00111A  D001               	goto	u17511
  3072  00111C  D001               	goto	u1751
  3073  00111E                     u17511:
  3074  00111E  8BD5               	bsf	(printf@f+2)& (0+255),5,b
  3075  001120                     u1751:
  3076  001120  EC25  F004         	call	_printf	;wreg free
  3077                           
  3078                           ;UART_Driver.c: 214: printf(":");printf(data);
  3079  001124  0E46               	movlw	low STR_5
  3080  001126  0100               	movlb	0	; () banked
  3081  001128  6FD3               	movwf	printf@f& (0+255),b
  3082  00112A  0E08               	movlw	high STR_5
  3083  00112C  6FD4               	movwf	(printf@f+1)& (0+255),b
  3084  00112E  51D3               	movf	printf@f& (0+255),w,b
  3085  001130  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3086  001132  A4D8               	btfss	status,2,c
  3087  001134  0E00               	movlw	low (__mediumconst shr (0+16))
  3088  001136  6FD5               	movwf	(printf@f+2)& (0+255),b
  3089  001138  EC25  F004         	call	_printf	;wreg free
  3090  00113C  C0E3  F0D3         	movff	D_UART_Write@data,printf@f
  3091  001140  C0E4  F0D4         	movff	D_UART_Write@data+1,printf@f+1
  3092  001144  0100               	movlb	0	; () banked
  3093  001146  6BD5               	clrf	(printf@f+2)& (0+255),b
  3094  001148  51D3               	movf	printf@f& (0+255),w,b
  3095  00114A  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3096  00114C  B4D8               	btfsc	status,2,c
  3097  00114E  D005               	goto	u1761
  3098  001150  0E07               	movlw	(high __ramtop+-1)
  3099  001152  65E4               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3100  001154  D001               	goto	u17611
  3101  001156  D001               	goto	u1761
  3102  001158                     u17611:
  3103  001158  8BD5               	bsf	(printf@f+2)& (0+255),5,b
  3104  00115A                     u1761:
  3105  00115A  EC25  F004         	call	_printf	;wreg free
  3106                           
  3107                           ;UART_Driver.c: 216: printf(stopCharacter);
  3108  00115E  C0F6  F0D3         	movff	_stopCharacter,printf@f
  3109  001162  C0F7  F0D4         	movff	_stopCharacter+1,printf@f+1
  3110  001166  0100               	movlb	0	; () banked
  3111  001168  51D3               	movf	printf@f& (0+255),w,b
  3112  00116A  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3113  00116C  A4D8               	btfss	status,2,c
  3114  00116E  0E00               	movlw	low (__mediumconst shr (0+16))
  3115  001170  6FD5               	movwf	(printf@f+2)& (0+255),b
  3116  001172  EC25  F004         	call	_printf	;wreg free
  3117                           
  3118                           ;UART_Driver.c: 217: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3119  001176  0E06               	movlw	6
  3120  001178  0100               	movlb	0	; () banked
  3121  00117A  6FE5               	movwf	??_D_UART_Write& (0+255),b
  3122  00117C  0E30               	movlw	48
  3123  00117E                     u2267:
  3124  00117E  2EE8               	decfsz	wreg,f,c
  3125  001180  D7FE               	bra	u2267
  3126  001182  2FE5               	decfsz	??_D_UART_Write& (0+255),f,b
  3127  001184  D7FC               	bra	u2267
  3128  001186  F000               	nop	
  3129  001188  0012               	return		;funcret
  3130  00118A                     __end_of_D_UART_Write:
  3131                           	opt stack 0
  3132                           tblptru	equ	0xFF8
  3133                           tblptrh	equ	0xFF7
  3134                           tblptrl	equ	0xFF6
  3135                           tablat	equ	0xFF5
  3136                           prodh	equ	0xFF4
  3137                           prodl	equ	0xFF3
  3138                           postinc0	equ	0xFEE
  3139                           plusw0	equ	0xFEB
  3140                           wreg	equ	0xFE8
  3141                           indf1	equ	0xFE7
  3142                           postinc1	equ	0xFE6
  3143                           postdec1	equ	0xFE5
  3144                           fsr1h	equ	0xFE2
  3145                           fsr1l	equ	0xFE1
  3146                           indf2	equ	0xFDF
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           plusw2	equ	0xFDB
  3150                           fsr2h	equ	0xFDA
  3151                           fsr2l	equ	0xFD9
  3152                           status	equ	0xFD8
  3153                           
  3154 ;; *************** function _printf *****************
  3155 ;; Defined at:
  3156 ;;		line 464 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3157 ;; Parameters:    Size  Location     Type
  3158 ;;  f               3   12[BANK0 ] PTR const unsigned char 
  3159 ;;		 -> STR_20(2), STR_19(2), STR_17(2), STR_11(2), 
  3160 ;;		 -> STR_10(3), STR_9(3), STR_8(2), STR_7(2), 
  3161 ;;		 -> STR_6(2), STR_5(2), STR_4(4), STR_3(4), 
  3162 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3163 ;;		 -> C_DOOR_SendStates@com(3), 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  idx             1   18[BANK0 ] unsigned char 
  3166 ;;  tmpval          4    0        struct .
  3167 ;;  cp              3    0        PTR const unsigned char 
  3168 ;;  val             2   23[BANK0 ] unsigned int 
  3169 ;;  ap              2   19[BANK0 ] PTR void [1]
  3170 ;;		 -> ?_printf(2), 
  3171 ;;  len             2    0        unsigned int 
  3172 ;;  c               1   25[BANK0 ] char 
  3173 ;;  flag            1   22[BANK0 ] unsigned char 
  3174 ;;  prec            1   21[BANK0 ] char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  2   12[BANK0 ] int 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3184 ;;      Params:         0       5       0       0       0       0       0       0       0
  3185 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3186 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3187 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3188 ;;Total ram usage:       14 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    4
  3191 ;; This function calls:
  3192 ;;		___lwdiv
  3193 ;;		___lwmod
  3194 ;;		_putch
  3195 ;; This function is called by:
  3196 ;;		_D_UART_Write
  3197 ;;		_D_UART_WriteInt
  3198 ;;		_D_UART_Acknowledge
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text15
  3203  00084A                     __ptext15:
  3204                           	opt stack 0
  3205  00084A                     _printf:
  3206                           	opt stack 24
  3207                           
  3208                           ;doprnt.c: 466: va_list ap;
  3209                           ;doprnt.c: 499: signed char c;
  3210                           ;doprnt.c: 506: signed char prec;
  3211                           ;doprnt.c: 508: unsigned char flag;
  3212                           ;doprnt.c: 523: union {
  3213                           ;doprnt.c: 524: unsigned long vd;
  3214                           ;doprnt.c: 525: double integ;
  3215                           ;doprnt.c: 526: } tmpval;
  3216                           ;doprnt.c: 528: unsigned int val;
  3217                           ;doprnt.c: 529: unsigned len;
  3218                           ;doprnt.c: 530: const char * cp;
  3219                           ;doprnt.c: 533: *ap = __va_start();
  3220                           
  3221                           ;incstack = 0
  3222  00084A  0ED6               	movlw	low (?_printf+3)
  3223  00084C  0100               	movlb	0	; () banked
  3224  00084E  6FDA               	movwf	printf@ap& (0+255),b
  3225  000850  0E00               	movlw	high (?_printf+3)
  3226  000852  6FDB               	movwf	(printf@ap+1)& (0+255),b
  3227                           
  3228                           ;doprnt.c: 536: while(c = *f++) {
  3229  000854  D10A               	goto	u1660
  3230  000856                     
  3231                           ; BSR set to: 0
  3232                           ;doprnt.c: 538: if(c != '%')
  3233                           
  3234                           ; BSR set to: 0
  3235  000856  0E25               	movlw	37
  3236  000858  19E0               	xorwf	printf@c& (0+255),w,b
  3237  00085A  B4D8               	btfsc	status,2,c
  3238  00085C  D004               	goto	l393
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;doprnt.c: 540: {
  3242                           ;doprnt.c: 541: (putch(c) );
  3243  00085E  51E0               	movf	printf@c& (0+255),w,b
  3244  000860  EC8A  F00C         	call	_putch
  3245                           
  3246                           ;doprnt.c: 542: continue;
  3247  000864  D102               	goto	u1660
  3248  000866                     l393:
  3249                           
  3250                           ;doprnt.c: 543: }
  3251                           ;doprnt.c: 548: flag = 0;
  3252  000866  0E00               	movlw	0
  3253  000868  0100               	movlb	0	; () banked
  3254  00086A  6FDD               	movwf	printf@flag& (0+255),b
  3255                           
  3256                           ;doprnt.c: 635: switch(c = *f++) {
  3257  00086C  D006               	goto	l394
  3258  00086E                     
  3259                           ; BSR set to: 0
  3260                           ;doprnt.c: 721: flag |= 0x80;
  3261                           
  3262                           ; BSR set to: 0
  3263  00086E  8FDD               	bsf	printf@flag& (0+255),7,b
  3264                           
  3265                           ;doprnt.c: 723: break;
  3266  000870  D02A               	goto	l399
  3267  000872                     
  3268                           ; BSR set to: 0
  3269                           ;doprnt.c: 809: (putch(c) );
  3270                           
  3271                           ; BSR set to: 0
  3272  000872  51E0               	movf	printf@c& (0+255),w,b
  3273  000874  EC8A  F00C         	call	_putch
  3274                           
  3275                           ;doprnt.c: 810: continue;
  3276  000878  D0F8               	goto	u1660
  3277  00087A                     l394:
  3278  00087A  C0D3  FFF6         	movff	printf@f,tblptrl
  3279  00087E  C0D4  FFF7         	movff	printf@f+1,tblptrh
  3280  000882  C0D5  FFF8         	movff	printf@f+2,tblptru
  3281  000886  0E01               	movlw	1
  3282  000888  0100               	movlb	0	; () banked
  3283  00088A  27D3               	addwf	printf@f& (0+255),f,b
  3284  00088C  0E00               	movlw	0
  3285  00088E  23D4               	addwfc	(printf@f+1)& (0+255),f,b
  3286  000890  23D5               	addwfc	(printf@f+2)& (0+255),f,b
  3287  000892  BAF8               	btfsc	tblptru,5,c
  3288  000894  D003               	bra	u1567
  3289  000896  0008               	tblrd		*
  3290  000898  50F5               	movf	tablat,w,c
  3291  00089A  D005               	bra	u1560
  3292  00089C                     u1567:
  3293  00089C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3294  0008A0  CFF7 FFEA          	movff	tblptrh,fsr0h
  3295  0008A4  50EF               	movf	indf0,w,c
  3296  0008A6                     u1560:
  3297  0008A6  0100               	movlb	0	; () banked
  3298  0008A8  6FE0               	movwf	printf@c& (0+255),b
  3299  0008AA  51E0               	movf	printf@c& (0+255),w,b
  3300                           
  3301                           ; Switch size 1, requested type "space"
  3302                           ; Number of cases is 4, Range of values is 0 to 120
  3303                           ; switch strategies available:
  3304                           ; Name         Instructions Cycles
  3305                           ; simple_byte           13     7 (average)
  3306                           ;	Chosen strategy is simple_byte
  3307  0008AC  0A00               	xorlw	0	; case 0
  3308  0008AE  B4D8               	btfsc	status,2,c
  3309  0008B0  0012               	return	
  3310  0008B2  0A64               	xorlw	100	; case 100
  3311  0008B4  B4D8               	btfsc	status,2,c
  3312  0008B6  D007               	goto	l399
  3313  0008B8  0A0D               	xorlw	13	; case 105
  3314  0008BA  B4D8               	btfsc	status,2,c
  3315  0008BC  D004               	goto	l399
  3316  0008BE  0A11               	xorlw	17	; case 120
  3317  0008C0  B4D8               	btfsc	status,2,c
  3318  0008C2  D7D5               	goto	l400
  3319  0008C4  D7D6               	goto	l401
  3320  0008C6                     l399:
  3321                           
  3322                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3323  0008C6  0100               	movlb	0	; () banked
  3324  0008C8  BFDD               	btfsc	printf@flag& (0+255),7,b
  3325  0008CA  D015               	goto	l402
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;doprnt.c: 1253: {
  3329                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3330  0008CC  C0DA  FFD9         	movff	printf@ap,fsr2l
  3331  0008D0  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  3332  0008D4  CFDE F0DE          	movff	postinc2,printf@val
  3333  0008D8  CFDD F0DF          	movff	postdec2,printf@val+1
  3334                           
  3335                           ; BSR set to: 0
  3336  0008DC  0E02               	movlw	2
  3337  0008DE  27DA               	addwf	printf@ap& (0+255),f,b
  3338  0008E0  0E00               	movlw	0
  3339  0008E2  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;doprnt.c: 1261: if((int)val < 0) {
  3343  0008E4  AFDF               	btfss	(printf@val+1)& (0+255),7,b
  3344  0008E6  D04A               	goto	l405
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;doprnt.c: 1262: flag |= 0x03;
  3348  0008E8  0E03               	movlw	3
  3349  0008EA  13DD               	iorwf	printf@flag& (0+255),f,b
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;doprnt.c: 1263: val = -val;
  3353  0008EC  6DDE               	negf	printf@val& (0+255),b
  3354  0008EE  1FDF               	comf	(printf@val+1)& (0+255),f,b
  3355  0008F0  B0D8               	btfsc	status,0,c
  3356  0008F2  2BDF               	incf	(printf@val+1)& (0+255),f,b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;doprnt.c: 1264: }
  3360                           ;doprnt.c: 1266: }
  3361  0008F4  D043               	goto	l405
  3362  0008F6                     l402:
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;doprnt.c: 1268: else
  3366                           ;doprnt.c: 1273: {
  3367                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3368                           
  3369                           ; BSR set to: 0
  3370  0008F6  C0DA  FFD9         	movff	printf@ap,fsr2l
  3371  0008FA  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  3372  0008FE  CFDE F0DE          	movff	postinc2,printf@val
  3373  000902  CFDD F0DF          	movff	postdec2,printf@val+1
  3374                           
  3375                           ; BSR set to: 0
  3376  000906  0E02               	movlw	2
  3377  000908  27DA               	addwf	printf@ap& (0+255),f,b
  3378  00090A  0E00               	movlw	0
  3379  00090C  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;doprnt.c: 1287: }
  3383                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3384  00090E  D036               	goto	l405
  3385  000910                     
  3386                           ; BSR set to: 0
  3387                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3388                           
  3389                           ; BSR set to: 0
  3390  000910  0E01               	movlw	1
  3391  000912  6FE0               	movwf	printf@c& (0+255),b
  3392  000914                     l2138:
  3393                           
  3394                           ; BSR set to: 0
  3395  000914  0E05               	movlw	5
  3396  000916  19E0               	xorwf	printf@c& (0+255),w,b
  3397  000918  B4D8               	btfsc	status,2,c
  3398  00091A  D038               	goto	l410
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;doprnt.c: 1306: if(val < dpowers[c])
  3402                           
  3403                           ; BSR set to: 0
  3404                           
  3405                           ; BSR set to: 0
  3406  00091C  51E0               	movf	printf@c& (0+255),w,b
  3407  00091E  0D02               	mullw	2
  3408  000920  0E01               	movlw	low _dpowers
  3409  000922  24F3               	addwf	prodl,w,c
  3410  000924  6EF6               	movwf	tblptrl,c
  3411  000926  0E08               	movlw	high _dpowers
  3412  000928  20F4               	addwfc	prodh,w,c
  3413  00092A  6EF7               	movwf	tblptrh,c
  3414  00092C                     	if	1	;There are 3 active tblptr bytes
  3415  00092C  6AF8               	clrf	tblptru,c
  3416  00092E  0E00               	movlw	low (__mediumconst shr (0+16))
  3417  000930  22F8               	addwfc	tblptru,f,c
  3418  000932                     	endif
  3419  000932  0009               	tblrd		*+
  3420  000934  50F5               	movf	tablat,w,c
  3421  000936  5DDE               	subwf	printf@val& (0+255),w,b
  3422  000938  0009               	tblrd		*+
  3423  00093A  50F5               	movf	tablat,w,c
  3424  00093C  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  3425  00093E  A0D8               	btfss	status,0,c
  3426  000940  D025               	goto	l410
  3427                           
  3428                           ; BSR set to: 0
  3429                           
  3430                           ; BSR set to: 0
  3431                           
  3432                           ; BSR set to: 0
  3433                           ;doprnt.c: 1307: break;
  3434  000942  2BE0               	incf	printf@c& (0+255),f,b
  3435  000944  D7E7               	goto	l2138
  3436  000946                     
  3437                           ; BSR set to: 0
  3438                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3439                           
  3440                           ; BSR set to: 0
  3441  000946  0E01               	movlw	1
  3442  000948  6FE0               	movwf	printf@c& (0+255),b
  3443  00094A                     l2152:
  3444                           
  3445                           ; BSR set to: 0
  3446  00094A  0E04               	movlw	4
  3447  00094C  19E0               	xorwf	printf@c& (0+255),w,b
  3448  00094E  B4D8               	btfsc	status,2,c
  3449  000950  D01D               	goto	l410
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3453                           
  3454                           ; BSR set to: 0
  3455                           
  3456                           ; BSR set to: 0
  3457  000952  51E0               	movf	printf@c& (0+255),w,b
  3458  000954  0D02               	mullw	2
  3459  000956  0E0B               	movlw	low _hexpowers
  3460  000958  24F3               	addwf	prodl,w,c
  3461  00095A  6EF6               	movwf	tblptrl,c
  3462  00095C  0E08               	movlw	high _hexpowers
  3463  00095E  20F4               	addwfc	prodh,w,c
  3464  000960  6EF7               	movwf	tblptrh,c
  3465  000962                     	if	1	;There are 3 active tblptr bytes
  3466  000962  6AF8               	clrf	tblptru,c
  3467  000964  0E00               	movlw	low (__mediumconst shr (0+16))
  3468  000966  22F8               	addwfc	tblptru,f,c
  3469  000968                     	endif
  3470  000968  0009               	tblrd		*+
  3471  00096A  50F5               	movf	tablat,w,c
  3472  00096C  5DDE               	subwf	printf@val& (0+255),w,b
  3473  00096E  0009               	tblrd		*+
  3474  000970  50F5               	movf	tablat,w,c
  3475  000972  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  3476  000974  A0D8               	btfss	status,0,c
  3477  000976  D00A               	goto	l410
  3478                           
  3479                           ; BSR set to: 0
  3480                           
  3481                           ; BSR set to: 0
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;doprnt.c: 1318: break;
  3485  000978  2BE0               	incf	printf@c& (0+255),f,b
  3486  00097A  D7E7               	goto	l2152
  3487  00097C                     l405:
  3488                           
  3489                           ; BSR set to: 0
  3490                           
  3491                           ; BSR set to: 0
  3492  00097C  51DD               	movf	printf@flag& (0+255),w,b
  3493  00097E  0B80               	andlw	128
  3494                           
  3495                           ; Switch size 1, requested type "space"
  3496                           ; Number of cases is 2, Range of values is 0 to 128
  3497                           ; switch strategies available:
  3498                           ; Name         Instructions Cycles
  3499                           ; simple_byte            7     4 (average)
  3500                           ;	Chosen strategy is simple_byte
  3501  000980  0A00               	xorlw	0	; case 0
  3502  000982  B4D8               	btfsc	status,2,c
  3503  000984  D7C5               	goto	l406
  3504  000986  0A80               	xorlw	128	; case 128
  3505  000988  B4D8               	btfsc	status,2,c
  3506  00098A  D7DD               	goto	l411
  3507  00098C                     l410:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;doprnt.c: 1422: {
  3511                           ;doprnt.c: 1438: if(flag & 0x03)
  3512                           
  3513                           ; BSR set to: 0
  3514  00098C  C0DD  F0D8         	movff	printf@flag,??_printf
  3515  000990  0E03               	movlw	3
  3516  000992  17D8               	andwf	??_printf& (0+255),f,b
  3517  000994  B4D8               	btfsc	status,2,c
  3518  000996  D003               	goto	l415
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;doprnt.c: 1439: (putch('-') );
  3522  000998  0E2D               	movlw	45
  3523  00099A  EC8A  F00C         	call	_putch
  3524  00099E                     l415:
  3525                           
  3526                           ;doprnt.c: 1469: }
  3527                           ;doprnt.c: 1472: prec = c;
  3528  00099E  C0E0  F0DC         	movff	printf@c,printf@prec
  3529                           
  3530                           ;doprnt.c: 1474: while(prec--) {
  3531  0009A2  D05E               	goto	l416
  3532  0009A4                     
  3533                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3534  0009A4  0100               	movlb	0	; () banked
  3535  0009A6  51DC               	movf	printf@prec& (0+255),w,b
  3536  0009A8  0D02               	mullw	2
  3537  0009AA  0E01               	movlw	low _dpowers
  3538  0009AC  24F3               	addwf	prodl,w,c
  3539  0009AE  6EF6               	movwf	tblptrl,c
  3540  0009B0  0E08               	movlw	high _dpowers
  3541  0009B2  20F4               	addwfc	prodh,w,c
  3542  0009B4  6EF7               	movwf	tblptrh,c
  3543  0009B6                     	if	1	;There are 3 active tblptr bytes
  3544  0009B6  6AF8               	clrf	tblptru,c
  3545  0009B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3546  0009BA  22F8               	addwfc	tblptru,f,c
  3547  0009BC                     	endif
  3548  0009BC  0009               	tblrd		*+
  3549  0009BE  CFF5 F0C9          	movff	tablat,___lwdiv@divisor
  3550  0009C2  000A               	tblrd		*-
  3551  0009C4  CFF5 F0CA          	movff	tablat,___lwdiv@divisor+1
  3552  0009C8  C0DE  F0C7         	movff	printf@val,___lwdiv@dividend
  3553  0009CC  C0DF  F0C8         	movff	printf@val+1,___lwdiv@dividend+1
  3554  0009D0  ECC1  F00B         	call	___lwdiv	;wreg free
  3555  0009D4  C0C7  F0CE         	movff	?___lwdiv,___lwmod@dividend
  3556  0009D8  C0C8  F0CF         	movff	?___lwdiv+1,___lwmod@dividend+1
  3557  0009DC  0E00               	movlw	0
  3558  0009DE  0100               	movlb	0	; () banked
  3559  0009E0  6FD1               	movwf	(___lwmod@divisor+1)& (0+255),b
  3560  0009E2  0E0A               	movlw	10
  3561  0009E4  6FD0               	movwf	___lwmod@divisor& (0+255),b
  3562  0009E6  EC39  F00C         	call	___lwmod	;wreg free
  3563  0009EA  0100               	movlb	0	; () banked
  3564  0009EC  51CE               	movf	?___lwmod& (0+255),w,b
  3565  0009EE  0F30               	addlw	48
  3566  0009F0  6FE0               	movwf	printf@c& (0+255),b
  3567                           
  3568                           ;doprnt.c: 1491: break;
  3569  0009F2  D033               	goto	l420
  3570  0009F4                     
  3571                           ; BSR set to: 0
  3572                           ;doprnt.c: 1499: {
  3573                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3574                           
  3575                           ; BSR set to: 0
  3576  0009F4  C0DE  F0C7         	movff	printf@val,___lwdiv@dividend
  3577  0009F8  C0DF  F0C8         	movff	printf@val+1,___lwdiv@dividend+1
  3578  0009FC  51DC               	movf	printf@prec& (0+255),w,b
  3579  0009FE  0D02               	mullw	2
  3580  000A00  0E0B               	movlw	low _hexpowers
  3581  000A02  24F3               	addwf	prodl,w,c
  3582  000A04  6EF6               	movwf	tblptrl,c
  3583  000A06  0E08               	movlw	high _hexpowers
  3584  000A08  20F4               	addwfc	prodh,w,c
  3585  000A0A  6EF7               	movwf	tblptrh,c
  3586  000A0C                     	if	1	;There are 3 active tblptr bytes
  3587  000A0C  6AF8               	clrf	tblptru,c
  3588  000A0E  0E00               	movlw	low (__mediumconst shr (0+16))
  3589  000A10  22F8               	addwfc	tblptru,f,c
  3590  000A12                     	endif
  3591  000A12  0009               	tblrd		*+
  3592  000A14  CFF5 F0C9          	movff	tablat,___lwdiv@divisor
  3593  000A18  000A               	tblrd		*-
  3594  000A1A  CFF5 F0CA          	movff	tablat,___lwdiv@divisor+1
  3595  000A1E  ECC1  F00B         	call	___lwdiv	;wreg free
  3596  000A22  0100               	movlb	0	; () banked
  3597  000A24  51C7               	movf	?___lwdiv& (0+255),w,b
  3598  000A26  0B0F               	andlw	15
  3599  000A28  6FD9               	movwf	printf@idx& (0+255),b
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3603  000A2A  51D9               	movf	printf@idx& (0+255),w,b
  3604  000A2C  0D01               	mullw	1
  3605  000A2E  0E13               	movlw	low STR_21
  3606  000A30  24F3               	addwf	prodl,w,c
  3607  000A32  6EF6               	movwf	tblptrl,c
  3608  000A34  0E08               	movlw	high STR_21
  3609  000A36  20F4               	addwfc	prodh,w,c
  3610  000A38  6EF7               	movwf	tblptrh,c
  3611  000A3A                     	if	1	;There are 3 active tblptr bytes
  3612  000A3A  6AF8               	clrf	tblptru,c
  3613  000A3C  0E00               	movlw	low (__mediumconst shr (0+16))
  3614  000A3E  22F8               	addwfc	tblptru,f,c
  3615  000A40                     	endif
  3616  000A40  0008               	tblrd		*
  3617  000A42  CFF5 F0E0          	movff	tablat,printf@c
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;doprnt.c: 1523: }
  3621                           
  3622                           ;doprnt.c: 1508: }
  3623                           ;doprnt.c: 1510: break;
  3624  000A46  D009               	goto	l420
  3625  000A48                     
  3626                           ; BSR set to: 0
  3627  000A48  0100               	movlb	0	; () banked
  3628  000A4A  51DD               	movf	printf@flag& (0+255),w,b
  3629  000A4C  0B80               	andlw	128
  3630                           
  3631                           ; Switch size 1, requested type "space"
  3632                           ; Number of cases is 2, Range of values is 0 to 128
  3633                           ; switch strategies available:
  3634                           ; Name         Instructions Cycles
  3635                           ; simple_byte            7     4 (average)
  3636                           ;	Chosen strategy is simple_byte
  3637  000A4E  0A00               	xorlw	0	; case 0
  3638  000A50  B4D8               	btfsc	status,2,c
  3639  000A52  D7A8               	goto	l419
  3640  000A54  0A80               	xorlw	128	; case 128
  3641  000A56  B4D8               	btfsc	status,2,c
  3642  000A58  D7CD               	goto	l421
  3643  000A5A                     l420:
  3644                           
  3645                           ; BSR set to: 0
  3646                           ;doprnt.c: 1524: (putch(c) );
  3647                           
  3648                           ; BSR set to: 0
  3649  000A5A  51E0               	movf	printf@c& (0+255),w,b
  3650  000A5C  EC8A  F00C         	call	_putch
  3651  000A60                     l416:
  3652  000A60  0100               	movlb	0	; () banked
  3653  000A62  07DC               	decf	printf@prec& (0+255),f,b
  3654  000A64  29DC               	incf	printf@prec& (0+255),w,b
  3655  000A66  A4D8               	btfss	status,2,c
  3656  000A68  D7EF               	goto	l418
  3657  000A6A                     u1660:
  3658                           
  3659                           ; BSR set to: 0
  3660                           
  3661                           ; BSR set to: 0
  3662  000A6A  C0D3  FFF6         	movff	printf@f,tblptrl
  3663  000A6E  C0D4  FFF7         	movff	printf@f+1,tblptrh
  3664  000A72  C0D5  FFF8         	movff	printf@f+2,tblptru
  3665  000A76  0E01               	movlw	1
  3666  000A78  0100               	movlb	0	; () banked
  3667  000A7A  27D3               	addwf	printf@f& (0+255),f,b
  3668  000A7C  0E00               	movlw	0
  3669  000A7E  23D4               	addwfc	(printf@f+1)& (0+255),f,b
  3670  000A80  23D5               	addwfc	(printf@f+2)& (0+255),f,b
  3671  000A82  BAF8               	btfsc	tblptru,5,c
  3672  000A84  D003               	bra	u1677
  3673  000A86  0008               	tblrd		*
  3674  000A88  50F5               	movf	tablat,w,c
  3675  000A8A  D005               	bra	u1670
  3676  000A8C                     u1677:
  3677  000A8C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3678  000A90  CFF7 FFEA          	movff	tblptrh,fsr0h
  3679  000A94  50EF               	movf	indf0,w,c
  3680  000A96                     u1670:
  3681  000A96  0100               	movlb	0	; () banked
  3682  000A98  6FE0               	movwf	printf@c& (0+255),b
  3683  000A9A  51E0               	movf	printf@c& (0+255),w,b
  3684  000A9C  B4D8               	btfsc	status,2,c
  3685  000A9E  0012               	return	
  3686  000AA0  D6DA               	goto	l392
  3687  000AA2                     __end_of_printf:
  3688                           	opt stack 0
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           indf0	equ	0xFEF
  3696                           postinc0	equ	0xFEE
  3697                           plusw0	equ	0xFEB
  3698                           fsr0h	equ	0xFEA
  3699                           fsr0l	equ	0xFE9
  3700                           wreg	equ	0xFE8
  3701                           indf1	equ	0xFE7
  3702                           postinc1	equ	0xFE6
  3703                           postdec1	equ	0xFE5
  3704                           fsr1h	equ	0xFE2
  3705                           fsr1l	equ	0xFE1
  3706                           indf2	equ	0xFDF
  3707                           postinc2	equ	0xFDE
  3708                           postdec2	equ	0xFDD
  3709                           plusw2	equ	0xFDB
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _putch *****************
  3715 ;; Defined at:
  3716 ;;		line 258 in file "Drivers/UART_Driver.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  data            1    wreg     unsigned char 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  data            1    0[BANK0 ] unsigned char 
  3721 ;;  max             1    1[BANK0 ] unsigned char 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  1    wreg      void 
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3731 ;;      Params:         0       0       0       0       0       0       0       0       0
  3732 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3734 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3735 ;;Total ram usage:        2 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    3
  3738 ;; This function calls:
  3739 ;;		Nothing
  3740 ;; This function is called by:
  3741 ;;		_printf
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           	psect	text16
  3746  001914                     __ptext16:
  3747                           	opt stack 0
  3748  001914                     _putch:
  3749                           	opt stack 24
  3750                           
  3751                           ; BSR set to: 0
  3752                           ;incstack = 0
  3753                           ;putch@data stored from wreg
  3754  001914  0100               	movlb	0	; () banked
  3755  001916  6FC7               	movwf	putch@data& (0+255),b
  3756                           
  3757                           ;UART_Driver.c: 259: uint8_t max = 0;
  3758  001918  0E00               	movlw	0
  3759  00191A  0100               	movlb	0	; () banked
  3760  00191C  6FC8               	movwf	putch@max& (0+255),b
  3761                           
  3762                           ;UART_Driver.c: 261: while(TXSTAbits.TRMT == 0 && max < 200) {
  3763  00191E  D005               	goto	l166
  3764  001920                     
  3765                           ; BSR set to: 0
  3766                           ;UART_Driver.c: 262: max++;
  3767                           
  3768                           ; BSR set to: 0
  3769  001920  2BC8               	incf	putch@max& (0+255),f,b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;UART_Driver.c: 263: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  3773  001922  0E06               	movlw	6
  3774  001924                     u2277:
  3775  001924  2EE8               	decfsz	wreg,f,c
  3776  001926  D7FE               	bra	u2277
  3777  001928  D000               	nop2	
  3778  00192A                     l166:
  3779  00192A  B2AC               	btfsc	4012,1,c	;volatile
  3780  00192C  D004               	goto	u1480
  3781  00192E  0EC7               	movlw	199
  3782  001930  0100               	movlb	0	; () banked
  3783  001932  65C8               	cpfsgt	putch@max& (0+255),b
  3784  001934  D7F5               	goto	l167
  3785  001936                     u1480:
  3786                           
  3787                           ;UART_Driver.c: 264: }
  3788                           ;UART_Driver.c: 265: TXREG = data;
  3789                           
  3790                           ; BSR set to: 0
  3791  001936  C0C7  FFAD         	movff	putch@data,4013	;volatile
  3792  00193A  0012               	return		;funcret
  3793  00193C                     __end_of_putch:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           indf0	equ	0xFEF
  3802                           postinc0	equ	0xFEE
  3803                           plusw0	equ	0xFEB
  3804                           fsr0h	equ	0xFEA
  3805                           fsr0l	equ	0xFE9
  3806                           wreg	equ	0xFE8
  3807                           indf1	equ	0xFE7
  3808                           postinc1	equ	0xFE6
  3809                           postdec1	equ	0xFE5
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           indf2	equ	0xFDF
  3813                           postinc2	equ	0xFDE
  3814                           postdec2	equ	0xFDD
  3815                           plusw2	equ	0xFDB
  3816                           fsr2h	equ	0xFDA
  3817                           fsr2l	equ	0xFD9
  3818                           status	equ	0xFD8
  3819                           
  3820 ;; *************** function ___lwmod *****************
  3821 ;; Defined at:
  3822 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3823 ;; Parameters:    Size  Location     Type
  3824 ;;  dividend        2    7[BANK0 ] unsigned int 
  3825 ;;  divisor         2    9[BANK0 ] unsigned int 
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;  counter         1   11[BANK0 ] unsigned char 
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  2    7[BANK0 ] unsigned int 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3837 ;;      Params:         0       4       0       0       0       0       0       0       0
  3838 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3840 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3841 ;;Total ram usage:        5 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    3
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_printf
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text17
  3852  001872                     __ptext17:
  3853                           	opt stack 0
  3854  001872                     ___lwmod:
  3855                           	opt stack 24
  3856                           
  3857                           ;incstack = 0
  3858  001872  0100               	movlb	0	; () banked
  3859  001874  51D0               	movf	___lwmod@divisor& (0+255),w,b
  3860  001876  11D1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3861  001878  B4D8               	btfsc	status,2,c
  3862  00187A  D018               	goto	l843
  3863                           
  3864                           ; BSR set to: 0
  3865  00187C  0E01               	movlw	1
  3866  00187E  6FD2               	movwf	___lwmod@counter& (0+255),b
  3867  001880  D004               	goto	l838
  3868  001882                     
  3869                           ; BSR set to: 0
  3870                           
  3871                           ; BSR set to: 0
  3872  001882  90D8               	bcf	status,0,c
  3873  001884  37D0               	rlcf	___lwmod@divisor& (0+255),f,b
  3874  001886  37D1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3875  001888  2BD2               	incf	___lwmod@counter& (0+255),f,b
  3876  00188A                     l838:
  3877                           
  3878                           ; BSR set to: 0
  3879                           
  3880                           ; BSR set to: 0
  3881  00188A  AFD1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3882  00188C  D7FA               	goto	l839
  3883  00188E                     u1530:
  3884                           
  3885                           ; BSR set to: 0
  3886                           
  3887                           ; BSR set to: 0
  3888                           
  3889                           ; BSR set to: 0
  3890  00188E  51D0               	movf	___lwmod@divisor& (0+255),w,b
  3891  001890  5DCE               	subwf	___lwmod@dividend& (0+255),w,b
  3892  001892  51D1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3893  001894  59CF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3894  001896  A0D8               	btfss	status,0,c
  3895  001898  D004               	goto	l842
  3896                           
  3897                           ; BSR set to: 0
  3898  00189A  51D0               	movf	___lwmod@divisor& (0+255),w,b
  3899  00189C  5FCE               	subwf	___lwmod@dividend& (0+255),f,b
  3900  00189E  51D1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3901  0018A0  5BCF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3902  0018A2                     l842:
  3903                           
  3904                           ; BSR set to: 0
  3905                           
  3906                           ; BSR set to: 0
  3907  0018A2  90D8               	bcf	status,0,c
  3908  0018A4  33D1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3909  0018A6  33D0               	rrcf	___lwmod@divisor& (0+255),f,b
  3910                           
  3911                           ; BSR set to: 0
  3912  0018A8  2FD2               	decfsz	___lwmod@counter& (0+255),f,b
  3913  0018AA  D7F1               	goto	u1530
  3914  0018AC                     l843:
  3915                           
  3916                           ; BSR set to: 0
  3917                           
  3918                           ; BSR set to: 0
  3919  0018AC  C0CE  F0CE         	movff	___lwmod@dividend,?___lwmod
  3920  0018B0  C0CF  F0CF         	movff	___lwmod@dividend+1,?___lwmod+1
  3921                           
  3922                           ; BSR set to: 0
  3923  0018B4  0012               	return		;funcret
  3924  0018B6                     __end_of___lwmod:
  3925                           	opt stack 0
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           prodh	equ	0xFF4
  3931                           prodl	equ	0xFF3
  3932                           indf0	equ	0xFEF
  3933                           postinc0	equ	0xFEE
  3934                           plusw0	equ	0xFEB
  3935                           fsr0h	equ	0xFEA
  3936                           fsr0l	equ	0xFE9
  3937                           wreg	equ	0xFE8
  3938                           indf1	equ	0xFE7
  3939                           postinc1	equ	0xFE6
  3940                           postdec1	equ	0xFE5
  3941                           fsr1h	equ	0xFE2
  3942                           fsr1l	equ	0xFE1
  3943                           indf2	equ	0xFDF
  3944                           postinc2	equ	0xFDE
  3945                           postdec2	equ	0xFDD
  3946                           plusw2	equ	0xFDB
  3947                           fsr2h	equ	0xFDA
  3948                           fsr2l	equ	0xFD9
  3949                           status	equ	0xFD8
  3950                           
  3951 ;; *************** function ___lwdiv *****************
  3952 ;; Defined at:
  3953 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3954 ;; Parameters:    Size  Location     Type
  3955 ;;  dividend        2    0[BANK0 ] unsigned int 
  3956 ;;  divisor         2    2[BANK0 ] unsigned int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;  quotient        2    5[BANK0 ] unsigned int 
  3959 ;;  counter         1    4[BANK0 ] unsigned char 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  2    0[BANK0 ] unsigned int 
  3962 ;; Registers used:
  3963 ;;		wreg, status,2, status,0
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3969 ;;      Params:         0       4       0       0       0       0       0       0       0
  3970 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3971 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3972 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3973 ;;Total ram usage:        7 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    3
  3976 ;; This function calls:
  3977 ;;		Nothing
  3978 ;; This function is called by:
  3979 ;;		_printf
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text18
  3984  001782                     __ptext18:
  3985                           	opt stack 0
  3986  001782                     ___lwdiv:
  3987                           	opt stack 24
  3988                           
  3989                           ; BSR set to: 0
  3990                           ;incstack = 0
  3991  001782  0E00               	movlw	0
  3992  001784  0100               	movlb	0	; () banked
  3993  001786  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3994  001788  0E00               	movlw	0
  3995  00178A  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  3996                           
  3997                           ; BSR set to: 0
  3998  00178C  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  3999  00178E  11CA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4000  001790  B4D8               	btfsc	status,2,c
  4001  001792  D01C               	goto	l833
  4002                           
  4003                           ; BSR set to: 0
  4004  001794  0E01               	movlw	1
  4005  001796  6FCB               	movwf	___lwdiv@counter& (0+255),b
  4006  001798  D004               	goto	l828
  4007  00179A                     
  4008                           ; BSR set to: 0
  4009                           
  4010                           ; BSR set to: 0
  4011  00179A  90D8               	bcf	status,0,c
  4012  00179C  37C9               	rlcf	___lwdiv@divisor& (0+255),f,b
  4013  00179E  37CA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4014  0017A0  2BCB               	incf	___lwdiv@counter& (0+255),f,b
  4015  0017A2                     l828:
  4016                           
  4017                           ; BSR set to: 0
  4018                           
  4019                           ; BSR set to: 0
  4020  0017A2  AFCA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4021  0017A4  D7FA               	goto	l829
  4022  0017A6                     u1500:
  4023                           
  4024                           ; BSR set to: 0
  4025                           
  4026                           ; BSR set to: 0
  4027                           
  4028                           ; BSR set to: 0
  4029  0017A6  90D8               	bcf	status,0,c
  4030  0017A8  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  4031  0017AA  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4032                           
  4033                           ; BSR set to: 0
  4034  0017AC  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4035  0017AE  5DC7               	subwf	___lwdiv@dividend& (0+255),w,b
  4036  0017B0  51CA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4037  0017B2  59C8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4038  0017B4  A0D8               	btfss	status,0,c
  4039  0017B6  D005               	goto	l832
  4040                           
  4041                           ; BSR set to: 0
  4042  0017B8  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4043  0017BA  5FC7               	subwf	___lwdiv@dividend& (0+255),f,b
  4044  0017BC  51CA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4045  0017BE  5BC8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4046                           
  4047                           ; BSR set to: 0
  4048  0017C0  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  4049  0017C2                     l832:
  4050                           
  4051                           ; BSR set to: 0
  4052                           
  4053                           ; BSR set to: 0
  4054  0017C2  90D8               	bcf	status,0,c
  4055  0017C4  33CA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4056  0017C6  33C9               	rrcf	___lwdiv@divisor& (0+255),f,b
  4057                           
  4058                           ; BSR set to: 0
  4059  0017C8  2FCB               	decfsz	___lwdiv@counter& (0+255),f,b
  4060  0017CA  D7ED               	goto	u1500
  4061  0017CC                     l833:
  4062                           
  4063                           ; BSR set to: 0
  4064                           
  4065                           ; BSR set to: 0
  4066  0017CC  C0CC  F0C7         	movff	___lwdiv@quotient,?___lwdiv
  4067  0017D0  C0CD  F0C8         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4068                           
  4069                           ; BSR set to: 0
  4070  0017D4  0012               	return		;funcret
  4071  0017D6                     __end_of___lwdiv:
  4072                           	opt stack 0
  4073                           tblptru	equ	0xFF8
  4074                           tblptrh	equ	0xFF7
  4075                           tblptrl	equ	0xFF6
  4076                           tablat	equ	0xFF5
  4077                           prodh	equ	0xFF4
  4078                           prodl	equ	0xFF3
  4079                           indf0	equ	0xFEF
  4080                           postinc0	equ	0xFEE
  4081                           plusw0	equ	0xFEB
  4082                           fsr0h	equ	0xFEA
  4083                           fsr0l	equ	0xFE9
  4084                           wreg	equ	0xFE8
  4085                           indf1	equ	0xFE7
  4086                           postinc1	equ	0xFE6
  4087                           postdec1	equ	0xFE5
  4088                           fsr1h	equ	0xFE2
  4089                           fsr1l	equ	0xFE1
  4090                           indf2	equ	0xFDF
  4091                           postinc2	equ	0xFDE
  4092                           postdec2	equ	0xFDD
  4093                           plusw2	equ	0xFDB
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _C_DOOR_ReadSensors *****************
  4099 ;; Defined at:
  4100 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  d               1    4[BANK0 ] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0
  4115 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4116 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4117 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4118 ;;Total ram usage:        5 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    3
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_run
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text19
  4129  00147A                     __ptext19:
  4130                           	opt stack 0
  4131  00147A                     _C_DOOR_ReadSensors:
  4132                           	opt stack 26
  4133                           
  4134                           ;DOOR_Controller.c: 103: uint8_t d;
  4135                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;incstack = 0
  4139  00147A  0E00               	movlw	0
  4140  00147C  0100               	movlb	0	; () banked
  4141  00147E  6FCB               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  4142  001480  D03E               	goto	l42
  4143  001482                     
  4144                           ; BSR set to: 0
  4145                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 0x01) == 0);
  4146                           
  4147                           ; BSR set to: 0
  4148  001482  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4149  001484  0D0A               	mullw	10
  4150  001486  0E06               	movlw	6
  4151  001488  26F3               	addwf	prodl,f,c
  4152  00148A  0E00               	movlw	0
  4153  00148C  22F4               	addwfc	prodh,f,c
  4154  00148E  0E60               	movlw	low _doors
  4155  001490  24F3               	addwf	prodl,w,c
  4156  001492  6ED9               	movwf	fsr2l,c
  4157  001494  0E00               	movlw	high _doors
  4158  001496  20F4               	addwfc	prodh,w,c
  4159  001498  6EDA               	movwf	fsr2h,c
  4160  00149A  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4161  00149C  0D0A               	mullw	10
  4162  00149E  0E09               	movlw	9
  4163  0014A0  26F3               	addwf	prodl,f,c
  4164  0014A2  0E00               	movlw	0
  4165  0014A4  22F4               	addwfc	prodh,f,c
  4166  0014A6  0E60               	movlw	low _doors
  4167  0014A8  24F3               	addwf	prodl,w,c
  4168  0014AA  6EE1               	movwf	fsr1l,c
  4169  0014AC  0E00               	movlw	high _doors
  4170  0014AE  20F4               	addwfc	prodh,w,c
  4171  0014B0  6EE2               	movwf	fsr1h,c
  4172  0014B2  50E7               	movf	indf1,w,c
  4173  0014B4  6FC7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4174  0014B6  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4175  0014B8  0D0A               	mullw	10
  4176  0014BA  0E07               	movlw	7
  4177  0014BC  26F3               	addwf	prodl,f,c
  4178  0014BE  0E00               	movlw	0
  4179  0014C0  22F4               	addwfc	prodh,f,c
  4180  0014C2  0E60               	movlw	low _doors
  4181  0014C4  24F3               	addwf	prodl,w,c
  4182  0014C6  6EE1               	movwf	fsr1l,c
  4183  0014C8  0E00               	movlw	high _doors
  4184  0014CA  20F4               	addwfc	prodh,w,c
  4185  0014CC  6EE2               	movwf	fsr1h,c
  4186  0014CE  CFE6 F0C8          	movff	postinc1,??_C_DOOR_ReadSensors+1
  4187  0014D2  CFE5 F0C9          	movff	postdec1,??_C_DOOR_ReadSensors+2
  4188  0014D6  C0C8  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  4189  0014DA  C0C9  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  4190  0014DE  50E7               	movf	indf1,w,c
  4191  0014E0  6FCA               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  4192  0014E2  2BC7               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  4193  0014E4  D002               	goto	u1804
  4194  0014E6                     u1805:
  4195  0014E6  90D8               	bcf	status,0,c
  4196  0014E8  33CA               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  4197  0014EA                     u1804:
  4198  0014EA  2FC7               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  4199  0014EC  D7FC               	goto	u1805
  4200  0014EE  0100               	movlb	0	; () banked
  4201  0014F0  B1CA               	btfsc	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  4202  0014F2  D002               	goto	u1810
  4203  0014F4  0E01               	movlw	1
  4204  0014F6  D001               	goto	u1820
  4205  0014F8                     u1810:
  4206  0014F8  0E00               	movlw	0
  4207  0014FA                     u1820:
  4208  0014FA  6EDF               	movwf	indf2,c
  4209                           
  4210                           ; BSR set to: 0
  4211  0014FC  2BCB               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  4212  0014FE                     l42:
  4213                           
  4214                           ; BSR set to: 0
  4215                           
  4216                           ; BSR set to: 0
  4217  0014FE  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4218  001500  6FC7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4219  001502  6BC8               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4220  001504  5037               	movf	_door_cnt,w,c
  4221  001506  5DC7               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4222  001508  51C8               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4223  00150A  0A80               	xorlw	128
  4224  00150C  6FC9               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4225  00150E  5038               	movf	_door_cnt+1,w,c
  4226  001510  0A80               	xorlw	128
  4227  001512  59C9               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4228  001514  B0D8               	btfsc	status,0,c
  4229  001516  0012               	return	
  4230  001518  D7B4               	goto	l43
  4231  00151A                     __end_of_C_DOOR_ReadSensors:
  4232                           	opt stack 0
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           indf0	equ	0xFEF
  4240                           postinc0	equ	0xFEE
  4241                           plusw0	equ	0xFEB
  4242                           fsr0h	equ	0xFEA
  4243                           fsr0l	equ	0xFE9
  4244                           wreg	equ	0xFE8
  4245                           indf1	equ	0xFE7
  4246                           postinc1	equ	0xFE6
  4247                           postdec1	equ	0xFE5
  4248                           fsr1h	equ	0xFE2
  4249                           fsr1l	equ	0xFE1
  4250                           indf2	equ	0xFDF
  4251                           postinc2	equ	0xFDE
  4252                           postdec2	equ	0xFDD
  4253                           plusw2	equ	0xFDB
  4254                           fsr2h	equ	0xFDA
  4255                           fsr2l	equ	0xFD9
  4256                           status	equ	0xFD8
  4257                           
  4258 ;; *************** function _D_UART_Init *****************
  4259 ;; Defined at:
  4260 ;;		line 166 in file "Drivers/UART_Driver.c"
  4261 ;; Parameters:    Size  Location     Type
  4262 ;;  name            2   13[BANK0 ] PTR const unsigned char 
  4263 ;;		 -> STR_11(2), 
  4264 ;;  baud            2   15[BANK0 ] unsigned int 
  4265 ;;  interrupts      1   17[BANK0 ] unsigned char 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;		None
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4277 ;;      Params:         0       5       0       0       0       0       0       0       0
  4278 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4280 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4281 ;;Total ram usage:        5 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    4
  4284 ;; This function calls:
  4285 ;;		_D_UART_Enable
  4286 ;;		___lldiv
  4287 ;; This function is called by:
  4288 ;;		_main
  4289 ;; This function uses a non-reentrant model
  4290 ;;
  4291                           
  4292                           	psect	text20
  4293  001634                     __ptext20:
  4294                           	opt stack 0
  4295  001634                     _D_UART_Init:
  4296                           	opt stack 26
  4297                           
  4298                           ;UART_Driver.c: 168: deviceName = name;
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;incstack = 0
  4302  001634  C0D4  F0C4         	movff	D_UART_Init@name,_deviceName
  4303  001638  C0D5  F0C5         	movff	D_UART_Init@name+1,_deviceName+1
  4304  00163C  0100               	movlb	0	; () banked
  4305  00163E  51C4               	movf	_deviceName& (0+255),w,b
  4306  001640  11C5               	iorwf	(_deviceName+1)& (0+255),w,b
  4307  001642  A4D8               	btfss	status,2,c
  4308  001644  0E00               	movlw	low (__mediumconst shr (0+16))
  4309  001646  6FC6               	movwf	(_deviceName+2)& (0+255),b
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;UART_Driver.c: 169: readReady = 0;
  4313  001648  0E00               	movlw	0
  4314  00164A  6E42               	movwf	_readReady,c
  4315                           
  4316                           ; BSR set to: 0
  4317                           ;UART_Driver.c: 172: D_UART_Enable(0);
  4318  00164C  0E00               	movlw	0
  4319  00164E  EC9E  F00C         	call	_D_UART_Enable
  4320                           
  4321                           ;UART_Driver.c: 175: RCSTAbits.FERR = 0;
  4322  001652  94AB               	bcf	4011,2,c	;volatile
  4323                           
  4324                           ;UART_Driver.c: 176: RCSTAbits.OERR = 0;
  4325  001654  92AB               	bcf	4011,1,c	;volatile
  4326                           
  4327                           ;UART_Driver.c: 177: RCREG = 0x00;
  4328  001656  0E00               	movlw	0
  4329  001658  6EAE               	movwf	4014,c	;volatile
  4330                           
  4331                           ;UART_Driver.c: 180: TXSTAbits.TX9 = 0;
  4332  00165A  9CAC               	bcf	4012,6,c	;volatile
  4333                           
  4334                           ;UART_Driver.c: 181: TXSTAbits.SYNC = 0;
  4335  00165C  98AC               	bcf	4012,4,c	;volatile
  4336                           
  4337                           ;UART_Driver.c: 182: TXSTAbits.BRGH = 0;
  4338  00165E  94AC               	bcf	4012,2,c	;volatile
  4339                           
  4340                           ;UART_Driver.c: 185: RCSTAbits.RX9 = 0;
  4341  001660  9CAB               	bcf	4011,6,c	;volatile
  4342                           
  4343                           ;UART_Driver.c: 188: BAUDCONbits.RXDTP = 1;
  4344  001662  8AB8               	bsf	4024,5,c	;volatile
  4345                           
  4346                           ;UART_Driver.c: 189: BAUDCONbits.TXCKP = 1;
  4347  001664  88B8               	bsf	4024,4,c	;volatile
  4348                           
  4349                           ;UART_Driver.c: 190: BAUDCONbits.BRG16 = 0;
  4350  001666  96B8               	bcf	4024,3,c	;volatile
  4351                           
  4352                           ;UART_Driver.c: 193: SPBRG = ((16000000UL/baud)/64)-1;
  4353  001668  0E00               	movlw	0
  4354  00166A  0100               	movlb	0	; () banked
  4355  00166C  6FC7               	movwf	___lldiv@dividend& (0+255),b
  4356  00166E  0E24               	movlw	36
  4357  001670  6FC8               	movwf	(___lldiv@dividend+1)& (0+255),b
  4358  001672  0EF4               	movlw	244
  4359  001674  6FC9               	movwf	(___lldiv@dividend+2)& (0+255),b
  4360  001676  0E00               	movlw	0
  4361  001678  6FCA               	movwf	(___lldiv@dividend+3)& (0+255),b
  4362  00167A  C0D6  F0CB         	movff	D_UART_Init@baud,___lldiv@divisor
  4363  00167E  C0D7  F0CC         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  4364  001682  6BCD               	clrf	(___lldiv@divisor+2)& (0+255),b
  4365  001684  6BCE               	clrf	(___lldiv@divisor+3)& (0+255),b
  4366  001686  ECD8  F00A         	call	___lldiv	;wreg free
  4367  00168A  0E07               	movlw	7
  4368  00168C  D006               	goto	u1980
  4369  00168E                     u1985:
  4370  00168E  0100               	movlb	0	; () banked
  4371  001690  90D8               	bcf	status,0,c
  4372  001692  33CA               	rrcf	(?___lldiv+3)& (0+255),f,b
  4373  001694  33C9               	rrcf	(?___lldiv+2)& (0+255),f,b
  4374  001696  33C8               	rrcf	(?___lldiv+1)& (0+255),f,b
  4375  001698  33C7               	rrcf	?___lldiv& (0+255),f,b
  4376  00169A                     u1980:
  4377  00169A  2EE8               	decfsz	wreg,f,c
  4378  00169C  D7F8               	goto	u1985
  4379  00169E  05C7               	decf	?___lldiv& (0+255),w,b
  4380  0016A0  6EAF               	movwf	4015,c	;volatile
  4381                           
  4382                           ;UART_Driver.c: 196: if (interrupts) {
  4383  0016A2  51D8               	movf	D_UART_Init@interrupts& (0+255),w,b
  4384  0016A4  B4D8               	btfsc	status,2,c
  4385  0016A6  0012               	return	
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;UART_Driver.c: 197: RCONbits.IPEN = 1;
  4389  0016A8  8ED0               	bsf	4048,7,c	;volatile
  4390                           
  4391                           ;UART_Driver.c: 198: INTCONbits.GIEH = 1;
  4392  0016AA  8EF2               	bsf	intcon,7,c	;volatile
  4393                           
  4394                           ;UART_Driver.c: 199: INTCONbits.GIEL = 1;
  4395  0016AC  8CF2               	bsf	intcon,6,c	;volatile
  4396                           
  4397                           ;UART_Driver.c: 200: PIR1bits.RCIF = 0;
  4398  0016AE  9A9E               	bcf	3998,5,c	;volatile
  4399                           
  4400                           ;UART_Driver.c: 201: IPR1bits.RCIP = 1;
  4401  0016B0  8A9F               	bsf	3999,5,c	;volatile
  4402                           
  4403                           ;UART_Driver.c: 202: PIE1bits.RCIE = 1;
  4404  0016B2  8A9D               	bsf	3997,5,c	;volatile
  4405  0016B4  0012               	return	
  4406  0016B6                     __end_of_D_UART_Init:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           prodh	equ	0xFF4
  4413                           prodl	equ	0xFF3
  4414                           intcon	equ	0xFF2
  4415                           indf0	equ	0xFEF
  4416                           postinc0	equ	0xFEE
  4417                           plusw0	equ	0xFEB
  4418                           fsr0h	equ	0xFEA
  4419                           fsr0l	equ	0xFE9
  4420                           wreg	equ	0xFE8
  4421                           indf1	equ	0xFE7
  4422                           postinc1	equ	0xFE6
  4423                           postdec1	equ	0xFE5
  4424                           fsr1h	equ	0xFE2
  4425                           fsr1l	equ	0xFE1
  4426                           indf2	equ	0xFDF
  4427                           postinc2	equ	0xFDE
  4428                           postdec2	equ	0xFDD
  4429                           plusw2	equ	0xFDB
  4430                           fsr2h	equ	0xFDA
  4431                           fsr2l	equ	0xFD9
  4432                           status	equ	0xFD8
  4433                           
  4434 ;; *************** function ___lldiv *****************
  4435 ;; Defined at:
  4436 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;  dividend        4    0[BANK0 ] unsigned long 
  4439 ;;  divisor         4    4[BANK0 ] unsigned long 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  quotient        4    8[BANK0 ] unsigned long 
  4442 ;;  counter         1   12[BANK0 ] unsigned char 
  4443 ;; Return value:  Size  Location     Type
  4444 ;;                  4    0[BANK0 ] unsigned long 
  4445 ;; Registers used:
  4446 ;;		wreg, status,2, status,0
  4447 ;; Tracked objects:
  4448 ;;		On entry : 0/0
  4449 ;;		On exit  : 0/0
  4450 ;;		Unchanged: 0/0
  4451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4452 ;;      Params:         0       8       0       0       0       0       0       0       0
  4453 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4454 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4455 ;;      Totals:         0      13       0       0       0       0       0       0       0
  4456 ;;Total ram usage:       13 bytes
  4457 ;; Hardware stack levels used:    1
  4458 ;; Hardware stack levels required when called:    3
  4459 ;; This function calls:
  4460 ;;		Nothing
  4461 ;; This function is called by:
  4462 ;;		_D_UART_Init
  4463 ;; This function uses a non-reentrant model
  4464 ;;
  4465                           
  4466                           	psect	text21
  4467  0015B0                     __ptext21:
  4468                           	opt stack 0
  4469  0015B0                     ___lldiv:
  4470                           	opt stack 26
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;incstack = 0
  4474  0015B0  0E00               	movlw	0
  4475  0015B2  0100               	movlb	0	; () banked
  4476  0015B4  6FCF               	movwf	___lldiv@quotient& (0+255),b
  4477  0015B6  0E00               	movlw	0
  4478  0015B8  6FD0               	movwf	(___lldiv@quotient+1)& (0+255),b
  4479  0015BA  0E00               	movlw	0
  4480  0015BC  6FD1               	movwf	(___lldiv@quotient+2)& (0+255),b
  4481  0015BE  0E00               	movlw	0
  4482  0015C0  6FD2               	movwf	(___lldiv@quotient+3)& (0+255),b
  4483                           
  4484                           ; BSR set to: 0
  4485  0015C2  51CB               	movf	___lldiv@divisor& (0+255),w,b
  4486  0015C4  11CC               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4487  0015C6  11CD               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4488  0015C8  11CE               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4489  0015CA  B4D8               	btfsc	status,2,c
  4490  0015CC  D02A               	goto	l780
  4491                           
  4492                           ; BSR set to: 0
  4493  0015CE  0E01               	movlw	1
  4494  0015D0  6FD3               	movwf	___lldiv@counter& (0+255),b
  4495  0015D2  D006               	goto	l775
  4496  0015D4                     
  4497                           ; BSR set to: 0
  4498                           
  4499                           ; BSR set to: 0
  4500  0015D4  90D8               	bcf	status,0,c
  4501  0015D6  37CB               	rlcf	___lldiv@divisor& (0+255),f,b
  4502  0015D8  37CC               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4503  0015DA  37CD               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4504  0015DC  37CE               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4505  0015DE  2BD3               	incf	___lldiv@counter& (0+255),f,b
  4506  0015E0                     l775:
  4507                           
  4508                           ; BSR set to: 0
  4509                           
  4510                           ; BSR set to: 0
  4511  0015E0  AFCE               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4512  0015E2  D7F8               	goto	l776
  4513  0015E4                     u1960:
  4514                           
  4515                           ; BSR set to: 0
  4516                           
  4517                           ; BSR set to: 0
  4518                           
  4519                           ; BSR set to: 0
  4520  0015E4  90D8               	bcf	status,0,c
  4521  0015E6  37CF               	rlcf	___lldiv@quotient& (0+255),f,b
  4522  0015E8  37D0               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4523  0015EA  37D1               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4524  0015EC  37D2               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4525                           
  4526                           ; BSR set to: 0
  4527  0015EE  51CB               	movf	___lldiv@divisor& (0+255),w,b
  4528  0015F0  5DC7               	subwf	___lldiv@dividend& (0+255),w,b
  4529  0015F2  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4530  0015F4  59C8               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4531  0015F6  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4532  0015F8  59C9               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4533  0015FA  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4534  0015FC  59CA               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4535  0015FE  A0D8               	btfss	status,0,c
  4536  001600  D009               	goto	l779
  4537                           
  4538                           ; BSR set to: 0
  4539  001602  51CB               	movf	___lldiv@divisor& (0+255),w,b
  4540  001604  5FC7               	subwf	___lldiv@dividend& (0+255),f,b
  4541  001606  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4542  001608  5BC8               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4543  00160A  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4544  00160C  5BC9               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4545  00160E  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4546  001610  5BCA               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4547                           
  4548                           ; BSR set to: 0
  4549  001612  81CF               	bsf	___lldiv@quotient& (0+255),0,b
  4550  001614                     l779:
  4551                           
  4552                           ; BSR set to: 0
  4553                           
  4554                           ; BSR set to: 0
  4555  001614  90D8               	bcf	status,0,c
  4556  001616  33CE               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4557  001618  33CD               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4558  00161A  33CC               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4559  00161C  33CB               	rrcf	___lldiv@divisor& (0+255),f,b
  4560                           
  4561                           ; BSR set to: 0
  4562  00161E  2FD3               	decfsz	___lldiv@counter& (0+255),f,b
  4563  001620  D7E1               	goto	u1960
  4564  001622                     l780:
  4565                           
  4566                           ; BSR set to: 0
  4567                           
  4568                           ; BSR set to: 0
  4569  001622  C0CF  F0C7         	movff	___lldiv@quotient,?___lldiv
  4570  001626  C0D0  F0C8         	movff	___lldiv@quotient+1,?___lldiv+1
  4571  00162A  C0D1  F0C9         	movff	___lldiv@quotient+2,?___lldiv+2
  4572  00162E  C0D2  F0CA         	movff	___lldiv@quotient+3,?___lldiv+3
  4573                           
  4574                           ; BSR set to: 0
  4575  001632  0012               	return		;funcret
  4576  001634                     __end_of___lldiv:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           intcon	equ	0xFF2
  4585                           indf0	equ	0xFEF
  4586                           postinc0	equ	0xFEE
  4587                           plusw0	equ	0xFEB
  4588                           fsr0h	equ	0xFEA
  4589                           fsr0l	equ	0xFE9
  4590                           wreg	equ	0xFE8
  4591                           indf1	equ	0xFE7
  4592                           postinc1	equ	0xFE6
  4593                           postdec1	equ	0xFE5
  4594                           fsr1h	equ	0xFE2
  4595                           fsr1l	equ	0xFE1
  4596                           indf2	equ	0xFDF
  4597                           postinc2	equ	0xFDE
  4598                           postdec2	equ	0xFDD
  4599                           plusw2	equ	0xFDB
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _D_UART_Enable *****************
  4605 ;; Defined at:
  4606 ;;		line 242 in file "Drivers/UART_Driver.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;  enable          1    wreg     unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  enable          1    0[BANK0 ] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, status,2
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4620 ;;      Params:         0       0       0       0       0       0       0       0       0
  4621 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4623 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4624 ;;Total ram usage:        1 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    3
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_D_UART_Init
  4631 ;;		_main
  4632 ;; This function uses a non-reentrant model
  4633 ;;
  4634                           
  4635                           	psect	text22
  4636  00193C                     __ptext22:
  4637                           	opt stack 0
  4638  00193C                     _D_UART_Enable:
  4639                           	opt stack 26
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;incstack = 0
  4643                           ;D_UART_Enable@enable stored from wreg
  4644  00193C  0100               	movlb	0	; () banked
  4645  00193E  6FC7               	movwf	D_UART_Enable@enable& (0+255),b
  4646                           
  4647                           ;UART_Driver.c: 243: if(enable) {
  4648  001940  0100               	movlb	0	; () banked
  4649  001942  51C7               	movf	D_UART_Enable@enable& (0+255),w,b
  4650  001944  B4D8               	btfsc	status,2,c
  4651  001946  D006               	goto	l161
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;UART_Driver.c: 244: TRISCbits.TRISC7 = 0;
  4655  001948  9E94               	bcf	3988,7,c	;volatile
  4656                           
  4657                           ;UART_Driver.c: 245: TRISCbits.TRISC6 = 1;
  4658  00194A  8C94               	bsf	3988,6,c	;volatile
  4659                           
  4660                           ;UART_Driver.c: 246: TXSTAbits.TXEN = 1;
  4661  00194C  8AAC               	bsf	4012,5,c	;volatile
  4662                           
  4663                           ;UART_Driver.c: 247: RCSTAbits.CREN = 1;
  4664  00194E  88AB               	bsf	4011,4,c	;volatile
  4665                           
  4666                           ;UART_Driver.c: 248: RCSTAbits.SPEN = 1;
  4667  001950  8EAB               	bsf	4011,7,c	;volatile
  4668                           
  4669                           ;UART_Driver.c: 249: } else {
  4670  001952  0012               	return	
  4671  001954                     l161:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;UART_Driver.c: 250: TRISCbits.TRISC7 = 0;
  4675  001954  9E94               	bcf	3988,7,c	;volatile
  4676                           
  4677                           ;UART_Driver.c: 251: TRISCbits.TRISC6 = 0;
  4678  001956  9C94               	bcf	3988,6,c	;volatile
  4679                           
  4680                           ;UART_Driver.c: 252: TXSTAbits.TXEN = 0;
  4681  001958  9AAC               	bcf	4012,5,c	;volatile
  4682                           
  4683                           ;UART_Driver.c: 253: RCSTAbits.CREN = 0;
  4684  00195A  98AB               	bcf	4011,4,c	;volatile
  4685                           
  4686                           ;UART_Driver.c: 254: RCSTAbits.SPEN = 0;
  4687  00195C  9EAB               	bcf	4011,7,c	;volatile
  4688  00195E  0012               	return	
  4689  001960                     __end_of_D_UART_Enable:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           indf0	equ	0xFEF
  4699                           postinc0	equ	0xFEE
  4700                           plusw0	equ	0xFEB
  4701                           fsr0h	equ	0xFEA
  4702                           fsr0l	equ	0xFE9
  4703                           wreg	equ	0xFE8
  4704                           indf1	equ	0xFE7
  4705                           postinc1	equ	0xFE6
  4706                           postdec1	equ	0xFE5
  4707                           fsr1h	equ	0xFE2
  4708                           fsr1l	equ	0xFE1
  4709                           indf2	equ	0xFDF
  4710                           postinc2	equ	0xFDE
  4711                           postdec2	equ	0xFDD
  4712                           plusw2	equ	0xFDB
  4713                           fsr2h	equ	0xFDA
  4714                           fsr2l	equ	0xFD9
  4715                           status	equ	0xFD8
  4716                           
  4717 ;; *************** function _D_TMR1_Init *****************
  4718 ;; Defined at:
  4719 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  1    wreg      void 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4733 ;;      Params:         0       0       0       0       0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4735 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4736 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4737 ;;Total ram usage:        0 bytes
  4738 ;; Hardware stack levels used:    1
  4739 ;; Hardware stack levels required when called:    4
  4740 ;; This function calls:
  4741 ;;		_D_TMR1_Enable
  4742 ;; This function is called by:
  4743 ;;		_main
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text23
  4748  0019A6                     __ptext23:
  4749                           	opt stack 0
  4750  0019A6                     _D_TMR1_Init:
  4751                           	opt stack 26
  4752                           
  4753                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;incstack = 0
  4757  0019A6  0E00               	movlw	0
  4758  0019A8  EC01  F00D         	call	_D_TMR1_Enable
  4759                           
  4760                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  4761  0019AC  8ECD               	bsf	4045,7,c	;volatile
  4762                           
  4763                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  4764  0019AE  9CCD               	bcf	4045,6,c	;volatile
  4765                           
  4766                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  4767  0019B0  0ECF               	movlw	-49
  4768  0019B2  16CD               	andwf	4045,f,c	;volatile
  4769                           
  4770                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  4771  0019B4  96CD               	bcf	4045,3,c	;volatile
  4772                           
  4773                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  4774  0019B6  92CD               	bcf	4045,1,c	;volatile
  4775                           
  4776                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  4777  0019B8  8ED0               	bsf	4048,7,c	;volatile
  4778                           
  4779                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  4780  0019BA  8EF2               	bsf	intcon,7,c	;volatile
  4781                           
  4782                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  4783  0019BC  8CF2               	bsf	intcon,6,c	;volatile
  4784                           
  4785                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  4786  0019BE  909E               	bcf	3998,0,c	;volatile
  4787                           
  4788                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  4789  0019C0  909F               	bcf	3999,0,c	;volatile
  4790                           
  4791                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  4792  0019C2  809D               	bsf	3997,0,c	;volatile
  4793  0019C4  0012               	return		;funcret
  4794  0019C6                     __end_of_D_TMR1_Init:
  4795                           	opt stack 0
  4796                           tblptru	equ	0xFF8
  4797                           tblptrh	equ	0xFF7
  4798                           tblptrl	equ	0xFF6
  4799                           tablat	equ	0xFF5
  4800                           prodh	equ	0xFF4
  4801                           prodl	equ	0xFF3
  4802                           intcon	equ	0xFF2
  4803                           indf0	equ	0xFEF
  4804                           postinc0	equ	0xFEE
  4805                           plusw0	equ	0xFEB
  4806                           fsr0h	equ	0xFEA
  4807                           fsr0l	equ	0xFE9
  4808                           wreg	equ	0xFE8
  4809                           indf1	equ	0xFE7
  4810                           postinc1	equ	0xFE6
  4811                           postdec1	equ	0xFE5
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           plusw2	equ	0xFDB
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822 ;; *************** function _D_TMR1_Enable *****************
  4823 ;; Defined at:
  4824 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  enable          1    wreg     unsigned char 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  enable          1    0[BANK0 ] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4838 ;;      Params:         0       0       0       0       0       0       0       0       0
  4839 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4841 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4842 ;;Total ram usage:        1 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; Hardware stack levels required when called:    3
  4845 ;; This function calls:
  4846 ;;		Nothing
  4847 ;; This function is called by:
  4848 ;;		_D_TMR1_Init
  4849 ;;		_run
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text24
  4854  001A02                     __ptext24:
  4855                           	opt stack 0
  4856  001A02                     _D_TMR1_Enable:
  4857                           	opt stack 26
  4858                           
  4859                           ;incstack = 0
  4860                           ;D_TMR1_Enable@enable stored from wreg
  4861  001A02  0100               	movlb	0	; () banked
  4862  001A04  6FC7               	movwf	D_TMR1_Enable@enable& (0+255),b
  4863                           
  4864                           ;TMR1_Driver.c: 53: if (enable) {
  4865  001A06  0100               	movlb	0	; () banked
  4866  001A08  51C7               	movf	D_TMR1_Enable@enable& (0+255),w,b
  4867  001A0A  B4D8               	btfsc	status,2,c
  4868  001A0C  D002               	goto	l239
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  4872  001A0E  80CD               	bsf	4045,0,c	;volatile
  4873                           
  4874                           ;TMR1_Driver.c: 55: } else {
  4875  001A10  0012               	return	
  4876  001A12                     l239:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  4880  001A12  90CD               	bcf	4045,0,c	;volatile
  4881  001A14  0012               	return	
  4882  001A16                     __end_of_D_TMR1_Enable:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           prodh	equ	0xFF4
  4889                           prodl	equ	0xFF3
  4890                           intcon	equ	0xFF2
  4891                           indf0	equ	0xFEF
  4892                           postinc0	equ	0xFEE
  4893                           plusw0	equ	0xFEB
  4894                           fsr0h	equ	0xFEA
  4895                           fsr0l	equ	0xFE9
  4896                           wreg	equ	0xFE8
  4897                           indf1	equ	0xFE7
  4898                           postinc1	equ	0xFE6
  4899                           postdec1	equ	0xFE5
  4900                           fsr1h	equ	0xFE2
  4901                           fsr1l	equ	0xFE1
  4902                           indf2	equ	0xFDF
  4903                           postinc2	equ	0xFDE
  4904                           postdec2	equ	0xFDD
  4905                           plusw2	equ	0xFDB
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _D_TMR0_Init *****************
  4911 ;; Defined at:
  4912 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4926 ;;      Params:         0       0       0       0       0       0       0       0       0
  4927 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4929 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4930 ;;Total ram usage:        0 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    4
  4933 ;; This function calls:
  4934 ;;		_D_TMR0_Enable
  4935 ;; This function is called by:
  4936 ;;		_main
  4937 ;; This function uses a non-reentrant model
  4938 ;;
  4939                           
  4940                           	psect	text25
  4941  001960                     __ptext25:
  4942                           	opt stack 0
  4943  001960                     _D_TMR0_Init:
  4944                           	opt stack 26
  4945                           
  4946                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;incstack = 0
  4950  001960  0E00               	movlw	0
  4951  001962  EC0B  F00D         	call	_D_TMR0_Enable
  4952                           
  4953                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  4954  001966  9CD5               	bcf	4053,6,c	;volatile
  4955                           
  4956                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  4957  001968  9AD5               	bcf	4053,5,c	;volatile
  4958                           
  4959                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  4960  00196A  98D5               	bcf	4053,4,c	;volatile
  4961                           
  4962                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  4963  00196C  96D5               	bcf	4053,3,c	;volatile
  4964                           
  4965                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  4966  00196E  50D5               	movf	4053,w,c	;volatile
  4967  001970  0BF8               	andlw	-8
  4968  001972  0902               	iorlw	2
  4969  001974  6ED5               	movwf	4053,c	;volatile
  4970                           
  4971                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  4972  001976  8ED0               	bsf	4048,7,c	;volatile
  4973                           
  4974                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  4975  001978  8EF2               	bsf	intcon,7,c	;volatile
  4976                           
  4977                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  4978  00197A  8CF2               	bsf	intcon,6,c	;volatile
  4979                           
  4980                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  4981  00197C  94F2               	bcf	intcon,2,c	;volatile
  4982                           
  4983                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  4984  00197E  94F1               	bcf	intcon2,2,c	;volatile
  4985                           
  4986                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  4987  001980  8AF2               	bsf	intcon,5,c	;volatile
  4988  001982  0012               	return		;funcret
  4989  001984                     __end_of_D_TMR0_Init:
  4990                           	opt stack 0
  4991                           tblptru	equ	0xFF8
  4992                           tblptrh	equ	0xFF7
  4993                           tblptrl	equ	0xFF6
  4994                           tablat	equ	0xFF5
  4995                           prodh	equ	0xFF4
  4996                           prodl	equ	0xFF3
  4997                           intcon	equ	0xFF2
  4998                           intcon2	equ	0xFF1
  4999                           indf0	equ	0xFEF
  5000                           postinc0	equ	0xFEE
  5001                           plusw0	equ	0xFEB
  5002                           fsr0h	equ	0xFEA
  5003                           fsr0l	equ	0xFE9
  5004                           wreg	equ	0xFE8
  5005                           indf1	equ	0xFE7
  5006                           postinc1	equ	0xFE6
  5007                           postdec1	equ	0xFE5
  5008                           fsr1h	equ	0xFE2
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           plusw2	equ	0xFDB
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018 ;; *************** function _D_TMR0_Enable *****************
  5019 ;; Defined at:
  5020 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  5021 ;; Parameters:    Size  Location     Type
  5022 ;;  enable          1    wreg     unsigned char 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  enable          1    0[BANK0 ] unsigned char 
  5025 ;; Return value:  Size  Location     Type
  5026 ;;                  1    wreg      void 
  5027 ;; Registers used:
  5028 ;;		wreg, status,2
  5029 ;; Tracked objects:
  5030 ;;		On entry : 0/0
  5031 ;;		On exit  : 0/0
  5032 ;;		Unchanged: 0/0
  5033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5034 ;;      Params:         0       0       0       0       0       0       0       0       0
  5035 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5036 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5037 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5038 ;;Total ram usage:        1 bytes
  5039 ;; Hardware stack levels used:    1
  5040 ;; Hardware stack levels required when called:    3
  5041 ;; This function calls:
  5042 ;;		Nothing
  5043 ;; This function is called by:
  5044 ;;		_D_TMR0_Init
  5045 ;;		_initDoors
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049                           	psect	text26
  5050  001A16                     __ptext26:
  5051                           	opt stack 0
  5052  001A16                     _D_TMR0_Enable:
  5053                           	opt stack 25
  5054                           
  5055                           ;incstack = 0
  5056                           ;D_TMR0_Enable@enable stored from wreg
  5057  001A16  0100               	movlb	0	; () banked
  5058  001A18  6FC7               	movwf	D_TMR0_Enable@enable& (0+255),b
  5059                           
  5060                           ;TMR0_Driver.c: 54: if (enable) {
  5061  001A1A  0100               	movlb	0	; () banked
  5062  001A1C  51C7               	movf	D_TMR0_Enable@enable& (0+255),w,b
  5063  001A1E  B4D8               	btfsc	status,2,c
  5064  001A20  D002               	goto	l198
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  5068  001A22  8ED5               	bsf	4053,7,c	;volatile
  5069                           
  5070                           ;TMR0_Driver.c: 56: } else {
  5071  001A24  0012               	return	
  5072  001A26                     l198:
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  5076  001A26  9ED5               	bcf	4053,7,c	;volatile
  5077  001A28  0012               	return	
  5078  001A2A                     __end_of_D_TMR0_Enable:
  5079                           	opt stack 0
  5080                           tblptru	equ	0xFF8
  5081                           tblptrh	equ	0xFF7
  5082                           tblptrl	equ	0xFF6
  5083                           tablat	equ	0xFF5
  5084                           prodh	equ	0xFF4
  5085                           prodl	equ	0xFF3
  5086                           intcon	equ	0xFF2
  5087                           intcon2	equ	0xFF1
  5088                           indf0	equ	0xFEF
  5089                           postinc0	equ	0xFEE
  5090                           plusw0	equ	0xFEB
  5091                           fsr0h	equ	0xFEA
  5092                           fsr0l	equ	0xFE9
  5093                           wreg	equ	0xFE8
  5094                           indf1	equ	0xFE7
  5095                           postinc1	equ	0xFE6
  5096                           postdec1	equ	0xFE5
  5097                           fsr1h	equ	0xFE2
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           plusw2	equ	0xFDB
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _D_PWM_Init *****************
  5108 ;; Defined at:
  5109 ;;		line 31 in file "Drivers/PWM_Driver.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;		None
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1    wreg      void 
  5116 ;; Registers used:
  5117 ;;		wreg, status,2
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5123 ;;      Params:         0       0       0       0       0       0       0       0       0
  5124 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5125 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5126 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5127 ;;Total ram usage:        0 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    3
  5130 ;; This function calls:
  5131 ;;		Nothing
  5132 ;; This function is called by:
  5133 ;;		_main
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text27
  5138  0019C6                     __ptext27:
  5139                           	opt stack 0
  5140  0019C6                     _D_PWM_Init:
  5141                           	opt stack 27
  5142                           
  5143                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  5144                           
  5145                           ; BSR set to: 0
  5146                           ;incstack = 0
  5147  0019C6  68CB               	setf	4043,c	;volatile
  5148                           
  5149                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  5150  0019C8  94CA               	bcf	4042,2,c	;volatile
  5151                           
  5152                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  5153  0019CA  50CA               	movf	4042,w,c	;volatile
  5154  0019CC  0BFC               	andlw	-4
  5155  0019CE  0901               	iorlw	1
  5156  0019D0  6ECA               	movwf	4042,c	;volatile
  5157                           
  5158                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  5159  0019D2  96CA               	bcf	4042,3,c	;volatile
  5160  0019D4  98CA               	bcf	4042,4,c	;volatile
  5161  0019D6  9ACA               	bcf	4042,5,c	;volatile
  5162  0019D8  9CCA               	bcf	4042,6,c	;volatile
  5163                           
  5164                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  5165  0019DA  0E1F               	movlw	31
  5166  0019DC  6EBE               	movwf	4030,c	;volatile
  5167                           
  5168                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  5169  0019DE  0ECF               	movlw	-49
  5170  0019E0  16BD               	andwf	4029,f,c	;volatile
  5171  0019E2  0012               	return		;funcret
  5172  0019E4                     __end_of_D_PWM_Init:
  5173                           	opt stack 0
  5174                           tblptru	equ	0xFF8
  5175                           tblptrh	equ	0xFF7
  5176                           tblptrl	equ	0xFF6
  5177                           tablat	equ	0xFF5
  5178                           prodh	equ	0xFF4
  5179                           prodl	equ	0xFF3
  5180                           intcon	equ	0xFF2
  5181                           intcon2	equ	0xFF1
  5182                           indf0	equ	0xFEF
  5183                           postinc0	equ	0xFEE
  5184                           plusw0	equ	0xFEB
  5185                           fsr0h	equ	0xFEA
  5186                           fsr0l	equ	0xFE9
  5187                           wreg	equ	0xFE8
  5188                           indf1	equ	0xFE7
  5189                           postinc1	equ	0xFE6
  5190                           postdec1	equ	0xFE5
  5191                           fsr1h	equ	0xFE2
  5192                           fsr1l	equ	0xFE1
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           plusw2	equ	0xFDB
  5197                           fsr2h	equ	0xFDA
  5198                           fsr2l	equ	0xFD9
  5199                           status	equ	0xFD8
  5200                           
  5201 ;; *************** function _D_PORT_Init *****************
  5202 ;; Defined at:
  5203 ;;		line 31 in file "Drivers/PORT_Driver.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;		None
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;		None
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      void 
  5210 ;; Registers used:
  5211 ;;		wreg, status,2
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5217 ;;      Params:         0       0       0       0       0       0       0       0       0
  5218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5220 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5221 ;;Total ram usage:        0 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    3
  5224 ;; This function calls:
  5225 ;;		Nothing
  5226 ;; This function is called by:
  5227 ;;		_main
  5228 ;; This function uses a non-reentrant model
  5229 ;;
  5230                           
  5231                           	psect	text28
  5232  0019E4                     __ptext28:
  5233                           	opt stack 0
  5234  0019E4                     _D_PORT_Init:
  5235                           	opt stack 27
  5236                           
  5237                           ;PORT_Driver.c: 32: TRISA = 0x00; PORTA = 0x00;
  5238                           
  5239                           ;incstack = 0
  5240  0019E4  0E00               	movlw	0
  5241  0019E6  6E92               	movwf	3986,c	;volatile
  5242  0019E8  0E00               	movlw	0
  5243  0019EA  6E80               	movwf	3968,c	;volatile
  5244                           
  5245                           ;PORT_Driver.c: 33: TRISB = 0x00; PORTB = 0x00;
  5246  0019EC  0E00               	movlw	0
  5247  0019EE  6E93               	movwf	3987,c	;volatile
  5248  0019F0  0E00               	movlw	0
  5249  0019F2  6E81               	movwf	3969,c	;volatile
  5250                           
  5251                           ;PORT_Driver.c: 34: TRISC = 0x00; PORTC = 0x00;
  5252  0019F4  0E00               	movlw	0
  5253  0019F6  6E94               	movwf	3988,c	;volatile
  5254  0019F8  0E00               	movlw	0
  5255  0019FA  6E82               	movwf	3970,c	;volatile
  5256                           
  5257                           ;PORT_Driver.c: 35: ADCON1 = 0x0F;
  5258  0019FC  0E0F               	movlw	15
  5259  0019FE  6EC1               	movwf	4033,c	;volatile
  5260  001A00  0012               	return		;funcret
  5261  001A02                     __end_of_D_PORT_Init:
  5262                           	opt stack 0
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon2	equ	0xFF1
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           plusw0	equ	0xFEB
  5274                           fsr0h	equ	0xFEA
  5275                           fsr0l	equ	0xFE9
  5276                           wreg	equ	0xFE8
  5277                           indf1	equ	0xFE7
  5278                           postinc1	equ	0xFE6
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           indf2	equ	0xFDF
  5283                           postinc2	equ	0xFDE
  5284                           postdec2	equ	0xFDD
  5285                           plusw2	equ	0xFDB
  5286                           fsr2h	equ	0xFDA
  5287                           fsr2l	equ	0xFD9
  5288                           status	equ	0xFD8
  5289                           
  5290 ;; *************** function _LowISR *****************
  5291 ;; Defined at:
  5292 ;;		line 222 in file "main.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;		None
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;		None
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  1    wreg      void 
  5299 ;; Registers used:
  5300 ;;		wreg, status,2, status,0
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5306 ;;      Params:         0       0       0       0       0       0       0       0       0
  5307 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5308 ;;      Temps:         21       0       0       0       0       0       0       0       0
  5309 ;;      Totals:        21       0       0       0       0       0       0       0       0
  5310 ;;Total ram usage:       21 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    2
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		Interrupt level 1
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	intcodelo
  5321  000018                     __pintcodelo:
  5322                           	opt stack 0
  5323  000018                     _LowISR:
  5324                           	opt stack 23
  5325                           
  5326                           ;incstack = 0
  5327  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5328  00001A  CFD8 F014          	movff	status,??_LowISR
  5329  00001E  CFE8 F015          	movff	wreg,??_LowISR+1
  5330  000022  CFE0 F016          	movff	bsr,??_LowISR+2
  5331  000026  CFFA F017          	movff	pclath,??_LowISR+3
  5332  00002A  CFFB F018          	movff	pclatu,??_LowISR+4
  5333  00002E  CFE9 F019          	movff	fsr0l,??_LowISR+5
  5334  000032  CFEA F01A          	movff	fsr0h,??_LowISR+6
  5335  000036  CFE1 F01B          	movff	fsr1l,??_LowISR+7
  5336  00003A  CFE2 F01C          	movff	fsr1h,??_LowISR+8
  5337  00003E  CFD9 F01D          	movff	fsr2l,??_LowISR+9
  5338  000042  CFDA F01E          	movff	fsr2h,??_LowISR+10
  5339  000046  CFF3 F01F          	movff	prodl,??_LowISR+11
  5340  00004A  CFF4 F020          	movff	prodh,??_LowISR+12
  5341  00004E  CFF6 F021          	movff	tblptrl,??_LowISR+13
  5342  000052  CFF7 F022          	movff	tblptrh,??_LowISR+14
  5343  000056  CFF8 F023          	movff	tblptru,??_LowISR+15
  5344  00005A  CFF5 F024          	movff	tablat,??_LowISR+16
  5345  00005E  C044  F025         	movff	btemp,??_LowISR+17
  5346  000062  C045  F026         	movff	btemp+1,??_LowISR+18
  5347  000066  C046  F027         	movff	btemp+2,??_LowISR+19
  5348  00006A  C047  F028         	movff	btemp+3,??_LowISR+20
  5349                           
  5350                           ;main.c: 224: if (INTCONbits.TMR0IF) {
  5351  00006E  A4F2               	btfss	intcon,2,c	;volatile
  5352  000070  D003               	goto	i1l374
  5353                           
  5354                           ;main.c: 225: INTCONbits.TMR0IF = 0;
  5355  000072  94F2               	bcf	intcon,2,c	;volatile
  5356                           
  5357                           ;main.c: 226: tick = 1;
  5358  000074  0E01               	movlw	1
  5359  000076  6E3E               	movwf	_tick,c
  5360  000078                     i1l374:
  5361                           
  5362                           ;main.c: 227: }
  5363                           ;main.c: 230: if (PIR1bits.TMR1IF) {
  5364  000078  A09E               	btfss	3998,0,c	;volatile
  5365  00007A  D00C               	goto	i1l375
  5366                           
  5367                           ;main.c: 231: TMR1H = 0x5E;
  5368  00007C  0E5E               	movlw	94
  5369  00007E  6ECF               	movwf	4047,c	;volatile
  5370                           
  5371                           ;main.c: 232: TMR1L = 0x00;
  5372  000080  0E00               	movlw	0
  5373  000082  6ECE               	movwf	4046,c	;volatile
  5374                           
  5375                           ;main.c: 234: if (lockDelayCnt < 100-1) {
  5376  000084  0E63               	movlw	99
  5377  000086  6041               	cpfslt	_lockDelayCnt,c
  5378  000088  D002               	goto	i1l376
  5379                           
  5380                           ;main.c: 235: lockDelayCnt++;
  5381  00008A  2A41               	incf	_lockDelayCnt,f,c
  5382                           
  5383                           ;main.c: 236: } else {
  5384  00008C  D002               	goto	i1l377
  5385  00008E                     i1l376:
  5386                           
  5387                           ;main.c: 237: lock = 1;
  5388  00008E  0E01               	movlw	1
  5389  000090  6E3D               	movwf	_lock,c
  5390  000092                     i1l377:
  5391                           
  5392                           ;main.c: 238: }
  5393                           ;main.c: 240: PIR1bits.TMR1IF = 0;
  5394  000092  909E               	bcf	3998,0,c	;volatile
  5395  000094                     i1l375:
  5396  000094  C028  F047         	movff	??_LowISR+20,btemp+3
  5397  000098  C027  F046         	movff	??_LowISR+19,btemp+2
  5398  00009C  C026  F045         	movff	??_LowISR+18,btemp+1
  5399  0000A0  C025  F044         	movff	??_LowISR+17,btemp
  5400  0000A4  C024  FFF5         	movff	??_LowISR+16,tablat
  5401  0000A8  C023  FFF8         	movff	??_LowISR+15,tblptru
  5402  0000AC  C022  FFF7         	movff	??_LowISR+14,tblptrh
  5403  0000B0  C021  FFF6         	movff	??_LowISR+13,tblptrl
  5404  0000B4  C020  FFF4         	movff	??_LowISR+12,prodh
  5405  0000B8  C01F  FFF3         	movff	??_LowISR+11,prodl
  5406  0000BC  C01E  FFDA         	movff	??_LowISR+10,fsr2h
  5407  0000C0  C01D  FFD9         	movff	??_LowISR+9,fsr2l
  5408  0000C4  C01C  FFE2         	movff	??_LowISR+8,fsr1h
  5409  0000C8  C01B  FFE1         	movff	??_LowISR+7,fsr1l
  5410  0000CC  C01A  FFEA         	movff	??_LowISR+6,fsr0h
  5411  0000D0  C019  FFE9         	movff	??_LowISR+5,fsr0l
  5412  0000D4  C018  FFFB         	movff	??_LowISR+4,pclatu
  5413  0000D8  C017  FFFA         	movff	??_LowISR+3,pclath
  5414  0000DC  C016  FFE0         	movff	??_LowISR+2,bsr
  5415  0000E0  C015  FFE8         	movff	??_LowISR+1,wreg
  5416  0000E4  C014  FFD8         	movff	??_LowISR,status
  5417  0000E8  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5418  0000EA  0010               	retfie	
  5419  0000EC                     __end_of_LowISR:
  5420                           	opt stack 0
  5421                           pclatu	equ	0xFFB
  5422                           pclath	equ	0xFFA
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           prodh	equ	0xFF4
  5428                           prodl	equ	0xFF3
  5429                           intcon	equ	0xFF2
  5430                           intcon2	equ	0xFF1
  5431                           indf0	equ	0xFEF
  5432                           postinc0	equ	0xFEE
  5433                           plusw0	equ	0xFEB
  5434                           fsr0h	equ	0xFEA
  5435                           fsr0l	equ	0xFE9
  5436                           wreg	equ	0xFE8
  5437                           indf1	equ	0xFE7
  5438                           postinc1	equ	0xFE6
  5439                           postdec1	equ	0xFE5
  5440                           fsr1h	equ	0xFE2
  5441                           fsr1l	equ	0xFE1
  5442                           bsr	equ	0xFE0
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           plusw2	equ	0xFDB
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _HighISR *****************
  5452 ;; Defined at:
  5453 ;;		line 270 in file "Drivers/UART_Driver.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      void 
  5460 ;; Registers used:
  5461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5467 ;;      Params:         0       0       0       0       0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5469 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5470 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5471 ;;Total ram usage:       18 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; Hardware stack levels required when called:    1
  5474 ;; This function calls:
  5475 ;;		_fillDataBuffer
  5476 ;; This function is called by:
  5477 ;;		Interrupt level 2
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	intcode
  5482  000008                     __pintcode:
  5483                           	opt stack 0
  5484  000008                     _HighISR:
  5485                           	opt stack 23
  5486                           
  5487                           ;incstack = 0
  5488  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5489  00000A  ED2F  F009         	call	int_func,f	;refresh shadow registers
  5490                           pclatu	equ	0xFFB
  5491                           pclath	equ	0xFFA
  5492                           tblptru	equ	0xFF8
  5493                           tblptrh	equ	0xFF7
  5494                           tblptrl	equ	0xFF6
  5495                           tablat	equ	0xFF5
  5496                           prodh	equ	0xFF4
  5497                           prodl	equ	0xFF3
  5498                           intcon	equ	0xFF2
  5499                           intcon2	equ	0xFF1
  5500                           indf0	equ	0xFEF
  5501                           postinc0	equ	0xFEE
  5502                           plusw0	equ	0xFEB
  5503                           fsr0h	equ	0xFEA
  5504                           fsr0l	equ	0xFE9
  5505                           wreg	equ	0xFE8
  5506                           indf1	equ	0xFE7
  5507                           postinc1	equ	0xFE6
  5508                           postdec1	equ	0xFE5
  5509                           fsr1h	equ	0xFE2
  5510                           fsr1l	equ	0xFE1
  5511                           bsr	equ	0xFE0
  5512                           indf2	equ	0xFDF
  5513                           postinc2	equ	0xFDE
  5514                           postdec2	equ	0xFDD
  5515                           plusw2	equ	0xFDB
  5516                           fsr2h	equ	0xFDA
  5517                           fsr2l	equ	0xFD9
  5518                           status	equ	0xFD8
  5519                           
  5520                           	psect	intcode_body
  5521  00125E                     __pintcode_body:
  5522                           	opt stack 23
  5523  00125E                     int_func:
  5524                           	opt stack 23
  5525  00125E  0006               	pop		; remove dummy address from shadow register refresh
  5526  001260  CFFA F002          	movff	pclath,??_HighISR
  5527  001264  CFFB F003          	movff	pclatu,??_HighISR+1
  5528  001268  CFE9 F004          	movff	fsr0l,??_HighISR+2
  5529  00126C  CFEA F005          	movff	fsr0h,??_HighISR+3
  5530  001270  CFE1 F006          	movff	fsr1l,??_HighISR+4
  5531  001274  CFE2 F007          	movff	fsr1h,??_HighISR+5
  5532  001278  CFD9 F008          	movff	fsr2l,??_HighISR+6
  5533  00127C  CFDA F009          	movff	fsr2h,??_HighISR+7
  5534  001280  CFF3 F00A          	movff	prodl,??_HighISR+8
  5535  001284  CFF4 F00B          	movff	prodh,??_HighISR+9
  5536  001288  CFF6 F00C          	movff	tblptrl,??_HighISR+10
  5537  00128C  CFF7 F00D          	movff	tblptrh,??_HighISR+11
  5538  001290  CFF8 F00E          	movff	tblptru,??_HighISR+12
  5539  001294  CFF5 F00F          	movff	tablat,??_HighISR+13
  5540  001298  C044  F010         	movff	btemp,??_HighISR+14
  5541  00129C  C045  F011         	movff	btemp+1,??_HighISR+15
  5542  0012A0  C046  F012         	movff	btemp+2,??_HighISR+16
  5543  0012A4  C047  F013         	movff	btemp+3,??_HighISR+17
  5544                           
  5545                           ;UART_Driver.c: 271: if (PIR1bits.RC1IF) {
  5546  0012A8  AA9E               	btfss	3998,5,c	;volatile
  5547  0012AA  D00E               	goto	i2l176
  5548                           
  5549                           ;UART_Driver.c: 272: PIR1bits.RC1IF = 0;
  5550  0012AC  9A9E               	bcf	3998,5,c	;volatile
  5551                           
  5552                           ;UART_Driver.c: 275: if(RCSTAbits.FERR == 1) {
  5553  0012AE  A4AB               	btfss	4011,2,c	;volatile
  5554  0012B0  D003               	goto	i2l177
  5555                           
  5556                           ;UART_Driver.c: 276: RCREG = 0x00;
  5557  0012B2  0E00               	movlw	0
  5558  0012B4  6EAE               	movwf	4014,c	;volatile
  5559                           
  5560                           ;UART_Driver.c: 277: return;
  5561  0012B6  D008               	goto	i2l176
  5562  0012B8                     i2l177:
  5563                           
  5564                           ;UART_Driver.c: 278: }
  5565                           ;UART_Driver.c: 280: if(RCSTAbits.OERR == 1) {
  5566  0012B8  A2AB               	btfss	4011,1,c	;volatile
  5567  0012BA  D003               	goto	i2l179
  5568                           
  5569                           ;UART_Driver.c: 281: RCSTAbits.CREN = 0;
  5570  0012BC  98AB               	bcf	4011,4,c	;volatile
  5571                           
  5572                           ;UART_Driver.c: 282: RCSTAbits.CREN = 1;
  5573  0012BE  88AB               	bsf	4011,4,c	;volatile
  5574                           
  5575                           ;UART_Driver.c: 283: return;
  5576  0012C0  D003               	goto	i2l176
  5577  0012C2                     i2l179:
  5578                           
  5579                           ;UART_Driver.c: 284: }
  5580                           ;UART_Driver.c: 285: fillDataBuffer(RCREG);
  5581  0012C2  50AE               	movf	4014,w,c	;volatile
  5582  0012C4  EC70  F006         	call	_fillDataBuffer
  5583  0012C8                     i2l176:
  5584  0012C8  C013  F047         	movff	??_HighISR+17,btemp+3
  5585  0012CC  C012  F046         	movff	??_HighISR+16,btemp+2
  5586  0012D0  C011  F045         	movff	??_HighISR+15,btemp+1
  5587  0012D4  C010  F044         	movff	??_HighISR+14,btemp
  5588  0012D8  C00F  FFF5         	movff	??_HighISR+13,tablat
  5589  0012DC  C00E  FFF8         	movff	??_HighISR+12,tblptru
  5590  0012E0  C00D  FFF7         	movff	??_HighISR+11,tblptrh
  5591  0012E4  C00C  FFF6         	movff	??_HighISR+10,tblptrl
  5592  0012E8  C00B  FFF4         	movff	??_HighISR+9,prodh
  5593  0012EC  C00A  FFF3         	movff	??_HighISR+8,prodl
  5594  0012F0  C009  FFDA         	movff	??_HighISR+7,fsr2h
  5595  0012F4  C008  FFD9         	movff	??_HighISR+6,fsr2l
  5596  0012F8  C007  FFE2         	movff	??_HighISR+5,fsr1h
  5597  0012FC  C006  FFE1         	movff	??_HighISR+4,fsr1l
  5598  001300  C005  FFEA         	movff	??_HighISR+3,fsr0h
  5599  001304  C004  FFE9         	movff	??_HighISR+2,fsr0l
  5600  001308  C003  FFFB         	movff	??_HighISR+1,pclatu
  5601  00130C  C002  FFFA         	movff	??_HighISR,pclath
  5602  001310  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5603  001312  0011               	retfie		f
  5604  001314                     __end_of_HighISR:
  5605                           	opt stack 0
  5606                           pclatu	equ	0xFFB
  5607                           pclath	equ	0xFFA
  5608                           tblptru	equ	0xFF8
  5609                           tblptrh	equ	0xFF7
  5610                           tblptrl	equ	0xFF6
  5611                           tablat	equ	0xFF5
  5612                           prodh	equ	0xFF4
  5613                           prodl	equ	0xFF3
  5614                           intcon	equ	0xFF2
  5615                           intcon2	equ	0xFF1
  5616                           indf0	equ	0xFEF
  5617                           postinc0	equ	0xFEE
  5618                           plusw0	equ	0xFEB
  5619                           fsr0h	equ	0xFEA
  5620                           fsr0l	equ	0xFE9
  5621                           wreg	equ	0xFE8
  5622                           indf1	equ	0xFE7
  5623                           postinc1	equ	0xFE6
  5624                           postdec1	equ	0xFE5
  5625                           fsr1h	equ	0xFE2
  5626                           fsr1l	equ	0xFE1
  5627                           bsr	equ	0xFE0
  5628                           indf2	equ	0xFDF
  5629                           postinc2	equ	0xFDE
  5630                           postdec2	equ	0xFDD
  5631                           plusw2	equ	0xFDB
  5632                           fsr2h	equ	0xFDA
  5633                           fsr2l	equ	0xFD9
  5634                           status	equ	0xFD8
  5635                           
  5636 ;; *************** function _fillDataBuffer *****************
  5637 ;; Defined at:
  5638 ;;		line 68 in file "Drivers/UART_Driver.c"
  5639 ;; Parameters:    Size  Location     Type
  5640 ;;  data            1    wreg     unsigned char 
  5641 ;; Auto vars:     Size  Location     Type
  5642 ;;  data            1    0[COMRAM] unsigned char 
  5643 ;; Return value:  Size  Location     Type
  5644 ;;                  1    wreg      void 
  5645 ;; Registers used:
  5646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5647 ;; Tracked objects:
  5648 ;;		On entry : 0/0
  5649 ;;		On exit  : 0/0
  5650 ;;		Unchanged: 0/0
  5651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5652 ;;      Params:         0       0       0       0       0       0       0       0       0
  5653 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5654 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5655 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5656 ;;Total ram usage:        1 bytes
  5657 ;; Hardware stack levels used:    1
  5658 ;; This function calls:
  5659 ;;		Nothing
  5660 ;; This function is called by:
  5661 ;;		_HighISR
  5662 ;; This function uses a non-reentrant model
  5663 ;;
  5664                           
  5665                           	psect	text31
  5666  000CE0                     __ptext31:
  5667                           	opt stack 0
  5668  000CE0                     _fillDataBuffer:
  5669                           	opt stack 23
  5670                           
  5671                           ;incstack = 0
  5672                           ;fillDataBuffer@data stored from wreg
  5673  000CE0  6E01               	movwf	fillDataBuffer@data,c
  5674                           
  5675                           ;UART_Driver.c: 69: switch(readBuffer.state) {
  5676  000CE2  D0AE               	goto	i2l120
  5677  000CE4                     
  5678                           ;UART_Driver.c: 71: if(data == 0x26) {
  5679  000CE4  0E26               	movlw	38
  5680  000CE6  1801               	xorwf	fillDataBuffer@data,w,c
  5681  000CE8  A4D8               	btfss	status,2,c
  5682  000CEA  D00E               	goto	i2l122
  5683                           
  5684                           ;UART_Driver.c: 72: readBuffer.typeCnt = 0;
  5685  000CEC  0E00               	movlw	0
  5686  000CEE  0101               	movlb	1	; () banked
  5687  000CF0  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5688                           
  5689                           ;UART_Driver.c: 73: readBuffer.senderCnt = 0;
  5690  000CF2  0E00               	movlw	0
  5691  000CF4  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5692                           
  5693                           ;UART_Driver.c: 74: readBuffer.commandCnt = 0;
  5694  000CF6  0E00               	movlw	0
  5695  000CF8  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5696                           
  5697                           ;UART_Driver.c: 75: readBuffer.messageCnt = 0;
  5698  000CFA  0E00               	movlw	0
  5699  000CFC  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5700                           
  5701                           ;UART_Driver.c: 76: readReady = 0;
  5702  000CFE  0E00               	movlw	0
  5703  000D00  6E42               	movwf	_readReady,c
  5704                           
  5705                           ;UART_Driver.c: 77: readBuffer.state = 0x01;
  5706  000D02  0E01               	movlw	1
  5707  000D04  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5708                           
  5709                           ;UART_Driver.c: 78: } else {
  5710  000D06  0012               	return	
  5711  000D08                     i2l122:
  5712                           
  5713                           ;UART_Driver.c: 79: readBuffer.state = 0x00;
  5714                           
  5715                           ; BSR set to: 1
  5716  000D08  0E00               	movlw	0
  5717  000D0A  0101               	movlb	1	; () banked
  5718  000D0C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5719                           
  5720                           ; BSR set to: 1
  5721                           ;UART_Driver.c: 81: }
  5722                           ;UART_Driver.c: 82: break;
  5723                           
  5724                           ; BSR set to: 1
  5725                           ;UART_Driver.c: 80: return;
  5726  000D0E  0012               	return	
  5727  000D10                     
  5728                           ; BSR set to: 1
  5729                           ;UART_Driver.c: 85: if (data == 0x3A) {
  5730                           
  5731                           ; BSR set to: 1
  5732  000D10  0E3A               	movlw	58
  5733  000D12  1801               	xorwf	fillDataBuffer@data,w,c
  5734  000D14  A4D8               	btfss	status,2,c
  5735  000D16  D00D               	goto	i2l127
  5736                           
  5737                           ; BSR set to: 1
  5738                           ;UART_Driver.c: 86: readBuffer.state = 0x02;
  5739  000D18  0E02               	movlw	2
  5740  000D1A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5741                           
  5742                           ; BSR set to: 1
  5743                           ;UART_Driver.c: 87: readBuffer.type[readBuffer.typeCnt] = '\0';
  5744  000D1C  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5745  000D1E  0D01               	mullw	1
  5746  000D20  0E00               	movlw	low _readBuffer
  5747  000D22  24F3               	addwf	prodl,w,c
  5748  000D24  6ED9               	movwf	fsr2l,c
  5749  000D26  0E01               	movlw	high _readBuffer
  5750  000D28  20F4               	addwfc	prodh,w,c
  5751  000D2A  6EDA               	movwf	fsr2h,c
  5752  000D2C  0E00               	movlw	0
  5753  000D2E  6EDF               	movwf	indf2,c
  5754                           
  5755                           ;UART_Driver.c: 88: } else {
  5756  000D30  0012               	return	
  5757  000D32                     i2l127:
  5758                           
  5759                           ; BSR set to: 1
  5760                           ;UART_Driver.c: 89: readBuffer.type[readBuffer.typeCnt] = data;
  5761                           
  5762                           ; BSR set to: 1
  5763  000D32  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5764  000D34  0D01               	mullw	1
  5765  000D36  0E00               	movlw	low _readBuffer
  5766  000D38  24F3               	addwf	prodl,w,c
  5767  000D3A  6ED9               	movwf	fsr2l,c
  5768  000D3C  0E01               	movlw	high _readBuffer
  5769  000D3E  20F4               	addwfc	prodh,w,c
  5770  000D40  6EDA               	movwf	fsr2h,c
  5771  000D42  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5772                           
  5773                           ; BSR set to: 1
  5774                           ;UART_Driver.c: 90: readBuffer.typeCnt++;
  5775  000D46  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5776                           
  5777                           ; BSR set to: 1
  5778                           ;UART_Driver.c: 91: if(readBuffer.typeCnt > 10) {
  5779  000D48  0E0A               	movlw	10
  5780  000D4A  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5781  000D4C  0012               	return	
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;UART_Driver.c: 92: readBuffer.typeCnt = 0;
  5785  000D4E  0E00               	movlw	0
  5786  000D50  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5787                           
  5788                           ; BSR set to: 1
  5789                           ;UART_Driver.c: 93: }
  5790                           ;UART_Driver.c: 94: }
  5791                           ;UART_Driver.c: 95: break;
  5792                           
  5793                           ; BSR set to: 1
  5794  000D52  0012               	return	
  5795  000D54                     
  5796                           ; BSR set to: 1
  5797                           ;UART_Driver.c: 98: if (data == 0x3A) {
  5798                           
  5799                           ; BSR set to: 1
  5800  000D54  0E3A               	movlw	58
  5801  000D56  1801               	xorwf	fillDataBuffer@data,w,c
  5802  000D58  A4D8               	btfss	status,2,c
  5803  000D5A  D00D               	goto	i2l131
  5804                           
  5805                           ; BSR set to: 1
  5806                           ;UART_Driver.c: 99: readBuffer.state = 0x03;
  5807  000D5C  0E03               	movlw	3
  5808  000D5E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5809                           
  5810                           ; BSR set to: 1
  5811                           ;UART_Driver.c: 100: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5812  000D60  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5813  000D62  0D01               	mullw	1
  5814  000D64  0E0B               	movlw	low (_readBuffer+11)
  5815  000D66  24F3               	addwf	prodl,w,c
  5816  000D68  6ED9               	movwf	fsr2l,c
  5817  000D6A  0E01               	movlw	high (_readBuffer+11)
  5818  000D6C  20F4               	addwfc	prodh,w,c
  5819  000D6E  6EDA               	movwf	fsr2h,c
  5820  000D70  0E00               	movlw	0
  5821  000D72  6EDF               	movwf	indf2,c
  5822                           
  5823                           ;UART_Driver.c: 101: } else {
  5824  000D74  0012               	return	
  5825  000D76                     i2l131:
  5826                           
  5827                           ; BSR set to: 1
  5828                           ;UART_Driver.c: 102: readBuffer.sender[readBuffer.senderCnt] = data;
  5829                           
  5830                           ; BSR set to: 1
  5831  000D76  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5832  000D78  0D01               	mullw	1
  5833  000D7A  0E0B               	movlw	low (_readBuffer+11)
  5834  000D7C  24F3               	addwf	prodl,w,c
  5835  000D7E  6ED9               	movwf	fsr2l,c
  5836  000D80  0E01               	movlw	high (_readBuffer+11)
  5837  000D82  20F4               	addwfc	prodh,w,c
  5838  000D84  6EDA               	movwf	fsr2h,c
  5839  000D86  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5840                           
  5841                           ; BSR set to: 1
  5842                           ;UART_Driver.c: 103: readBuffer.senderCnt++;
  5843  000D8A  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5844                           
  5845                           ; BSR set to: 1
  5846                           ;UART_Driver.c: 104: if(readBuffer.senderCnt > 50) {
  5847  000D8C  0E32               	movlw	50
  5848  000D8E  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5849  000D90  0012               	return	
  5850                           
  5851                           ; BSR set to: 1
  5852                           ;UART_Driver.c: 105: readBuffer.senderCnt = 0;
  5853  000D92  0E00               	movlw	0
  5854  000D94  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5855                           
  5856                           ; BSR set to: 1
  5857                           ;UART_Driver.c: 106: }
  5858                           ;UART_Driver.c: 107: }
  5859                           ;UART_Driver.c: 108: break;
  5860                           
  5861                           ; BSR set to: 1
  5862  000D96  0012               	return	
  5863  000D98                     
  5864                           ; BSR set to: 1
  5865                           ;UART_Driver.c: 111: if (data == 0x3A) {
  5866                           
  5867                           ; BSR set to: 1
  5868  000D98  0E3A               	movlw	58
  5869  000D9A  1801               	xorwf	fillDataBuffer@data,w,c
  5870  000D9C  A4D8               	btfss	status,2,c
  5871  000D9E  D00D               	goto	i2l135
  5872                           
  5873                           ; BSR set to: 1
  5874                           ;UART_Driver.c: 112: readBuffer.state = 0x04;
  5875  000DA0  0E04               	movlw	4
  5876  000DA2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5877                           
  5878                           ; BSR set to: 1
  5879                           ;UART_Driver.c: 113: readBuffer.command[readBuffer.commandCnt] = '\0';
  5880  000DA4  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5881  000DA6  0D01               	mullw	1
  5882  000DA8  0E3E               	movlw	low (_readBuffer+62)
  5883  000DAA  24F3               	addwf	prodl,w,c
  5884  000DAC  6ED9               	movwf	fsr2l,c
  5885  000DAE  0E01               	movlw	high (_readBuffer+62)
  5886  000DB0  20F4               	addwfc	prodh,w,c
  5887  000DB2  6EDA               	movwf	fsr2h,c
  5888  000DB4  0E00               	movlw	0
  5889  000DB6  6EDF               	movwf	indf2,c
  5890                           
  5891                           ;UART_Driver.c: 114: } else {
  5892  000DB8  0012               	return	
  5893  000DBA                     i2l135:
  5894                           
  5895                           ; BSR set to: 1
  5896                           ;UART_Driver.c: 115: readBuffer.command[readBuffer.commandCnt] = data;
  5897                           
  5898                           ; BSR set to: 1
  5899  000DBA  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5900  000DBC  0D01               	mullw	1
  5901  000DBE  0E3E               	movlw	low (_readBuffer+62)
  5902  000DC0  24F3               	addwf	prodl,w,c
  5903  000DC2  6ED9               	movwf	fsr2l,c
  5904  000DC4  0E01               	movlw	high (_readBuffer+62)
  5905  000DC6  20F4               	addwfc	prodh,w,c
  5906  000DC8  6EDA               	movwf	fsr2h,c
  5907  000DCA  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5908                           
  5909                           ; BSR set to: 1
  5910                           ;UART_Driver.c: 116: readBuffer.commandCnt++;
  5911  000DCE  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5912                           
  5913                           ; BSR set to: 1
  5914                           ;UART_Driver.c: 117: if(readBuffer.commandCnt > 50) {
  5915  000DD0  0E32               	movlw	50
  5916  000DD2  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5917  000DD4  0012               	return	
  5918                           
  5919                           ; BSR set to: 1
  5920                           ;UART_Driver.c: 118: readBuffer.commandCnt = 0;
  5921  000DD6  0E00               	movlw	0
  5922  000DD8  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5923                           
  5924                           ; BSR set to: 1
  5925                           ;UART_Driver.c: 119: }
  5926                           ;UART_Driver.c: 120: }
  5927                           ;UART_Driver.c: 121: break;
  5928                           
  5929                           ; BSR set to: 1
  5930  000DDA  0012               	return	
  5931  000DDC                     
  5932                           ; BSR set to: 1
  5933                           ;UART_Driver.c: 124: if (data == 0x3A) {
  5934                           
  5935                           ; BSR set to: 1
  5936  000DDC  0E3A               	movlw	58
  5937  000DDE  1801               	xorwf	fillDataBuffer@data,w,c
  5938  000DE0  A4D8               	btfss	status,2,c
  5939  000DE2  D00D               	goto	i2l139
  5940                           
  5941                           ; BSR set to: 1
  5942                           ;UART_Driver.c: 125: readBuffer.state = 0x05;
  5943  000DE4  0E05               	movlw	5
  5944  000DE6  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5945                           
  5946                           ; BSR set to: 1
  5947                           ;UART_Driver.c: 126: readBuffer.message[readBuffer.messageCnt] = '\0';
  5948  000DE8  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5949  000DEA  0D01               	mullw	1
  5950  000DEC  0E71               	movlw	low (_readBuffer+113)
  5951  000DEE  24F3               	addwf	prodl,w,c
  5952  000DF0  6ED9               	movwf	fsr2l,c
  5953  000DF2  0E01               	movlw	high (_readBuffer+113)
  5954  000DF4  20F4               	addwfc	prodh,w,c
  5955  000DF6  6EDA               	movwf	fsr2h,c
  5956  000DF8  0E00               	movlw	0
  5957  000DFA  6EDF               	movwf	indf2,c
  5958                           
  5959                           ;UART_Driver.c: 127: } else {
  5960  000DFC  0012               	return	
  5961  000DFE                     i2l139:
  5962                           
  5963                           ; BSR set to: 1
  5964                           ;UART_Driver.c: 128: readBuffer.message[readBuffer.messageCnt] = data;
  5965                           
  5966                           ; BSR set to: 1
  5967  000DFE  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5968  000E00  0D01               	mullw	1
  5969  000E02  0E71               	movlw	low (_readBuffer+113)
  5970  000E04  24F3               	addwf	prodl,w,c
  5971  000E06  6ED9               	movwf	fsr2l,c
  5972  000E08  0E01               	movlw	high (_readBuffer+113)
  5973  000E0A  20F4               	addwfc	prodh,w,c
  5974  000E0C  6EDA               	movwf	fsr2h,c
  5975  000E0E  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5976                           
  5977                           ; BSR set to: 1
  5978                           ;UART_Driver.c: 129: readBuffer.messageCnt++;
  5979  000E12  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5980                           
  5981                           ; BSR set to: 1
  5982                           ;UART_Driver.c: 130: if(readBuffer.messageCnt > 50) {
  5983  000E14  0E32               	movlw	50
  5984  000E16  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5985  000E18  0012               	return	
  5986                           
  5987                           ; BSR set to: 1
  5988                           ;UART_Driver.c: 131: readBuffer.messageCnt = 0;
  5989  000E1A  0E00               	movlw	0
  5990  000E1C  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5991                           
  5992                           ; BSR set to: 1
  5993                           ;UART_Driver.c: 132: }
  5994                           ;UART_Driver.c: 133: }
  5995                           ;UART_Driver.c: 134: break;
  5996                           
  5997                           ; BSR set to: 1
  5998  000E1E  0012               	return	
  5999  000E20                     
  6000                           ; BSR set to: 1
  6001                           ;UART_Driver.c: 137: if (data == 0x24) {
  6002                           
  6003                           ; BSR set to: 1
  6004  000E20  0E24               	movlw	36
  6005  000E22  1801               	xorwf	fillDataBuffer@data,w,c
  6006  000E24  A4D8               	btfss	status,2,c
  6007  000E26  D005               	goto	i2l143
  6008                           
  6009                           ; BSR set to: 1
  6010                           ;UART_Driver.c: 139: readBuffer.state = 0x00;
  6011  000E28  0E00               	movlw	0
  6012  000E2A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  6013                           
  6014                           ;UART_Driver.c: 140: readReady = 1;
  6015  000E2C  0E01               	movlw	1
  6016  000E2E  6E42               	movwf	_readReady,c
  6017                           
  6018                           ;UART_Driver.c: 141: } else {
  6019  000E30  0012               	return	
  6020  000E32                     i2l143:
  6021                           
  6022                           ; BSR set to: 1
  6023                           ;UART_Driver.c: 143: readBuffer.readId = (uint8_t)(data - 0x30);
  6024                           
  6025                           ; BSR set to: 1
  6026  000E32  5001               	movf	fillDataBuffer@data,w,c
  6027  000E34  0FD0               	addlw	208
  6028  000E36  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  6029                           
  6030                           ; BSR set to: 1
  6031                           ;UART_Driver.c: 144: }
  6032                           ;UART_Driver.c: 145: break;
  6033  000E38  0012               	return	
  6034  000E3A                     
  6035                           ; BSR set to: 1
  6036                           ;UART_Driver.c: 148: readBuffer.state = 0x00;
  6037                           
  6038                           ; BSR set to: 1
  6039  000E3A  0E00               	movlw	0
  6040  000E3C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  6041                           
  6042                           ; BSR set to: 1
  6043                           ;UART_Driver.c: 150: }
  6044                           
  6045                           ;UART_Driver.c: 149: break;
  6046  000E3E  0012               	return	
  6047  000E40                     i2l120:
  6048                           
  6049                           ; BSR set to: 1
  6050  000E40  0101               	movlb	1	; () banked
  6051  000E42  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  6052                           
  6053                           ; Switch size 1, requested type "space"
  6054                           ; Number of cases is 6, Range of values is 0 to 5
  6055                           ; switch strategies available:
  6056                           ; Name         Instructions Cycles
  6057                           ; simple_byte           19    10 (average)
  6058                           ;	Chosen strategy is simple_byte
  6059  000E44  0A00               	xorlw	0	; case 0
  6060  000E46  B4D8               	btfsc	status,2,c
  6061  000E48  D74D               	goto	i2l121
  6062  000E4A  0A01               	xorlw	1	; case 1
  6063  000E4C  B4D8               	btfsc	status,2,c
  6064  000E4E  D760               	goto	i2l126
  6065  000E50  0A03               	xorlw	3	; case 2
  6066  000E52  B4D8               	btfsc	status,2,c
  6067  000E54  D77F               	goto	i2l130
  6068  000E56  0A01               	xorlw	1	; case 3
  6069  000E58  B4D8               	btfsc	status,2,c
  6070  000E5A  D79E               	goto	i2l134
  6071  000E5C  0A07               	xorlw	7	; case 4
  6072  000E5E  B4D8               	btfsc	status,2,c
  6073  000E60  D7BD               	goto	i2l138
  6074  000E62  0A01               	xorlw	1	; case 5
  6075  000E64  B4D8               	btfsc	status,2,c
  6076  000E66  D7DC               	goto	i2l142
  6077  000E68  D7E8               	goto	i2l145
  6078  000E6A                     __end_of_fillDataBuffer:
  6079                           	opt stack 0
  6080                           pclatu	equ	0xFFB
  6081                           pclath	equ	0xFFA
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           intcon2	equ	0xFF1
  6090                           indf0	equ	0xFEF
  6091                           postinc0	equ	0xFEE
  6092                           plusw0	equ	0xFEB
  6093                           fsr0h	equ	0xFEA
  6094                           fsr0l	equ	0xFE9
  6095                           wreg	equ	0xFE8
  6096                           indf1	equ	0xFE7
  6097                           postinc1	equ	0xFE6
  6098                           postdec1	equ	0xFE5
  6099                           fsr1h	equ	0xFE2
  6100                           fsr1l	equ	0xFE1
  6101                           bsr	equ	0xFE0
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           plusw2	equ	0xFDB
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           pclatu	equ	0xFFB
  6110                           pclath	equ	0xFFA
  6111                           tblptru	equ	0xFF8
  6112                           tblptrh	equ	0xFF7
  6113                           tblptrl	equ	0xFF6
  6114                           tablat	equ	0xFF5
  6115                           prodh	equ	0xFF4
  6116                           prodl	equ	0xFF3
  6117                           intcon	equ	0xFF2
  6118                           intcon2	equ	0xFF1
  6119                           indf0	equ	0xFEF
  6120                           postinc0	equ	0xFEE
  6121                           plusw0	equ	0xFEB
  6122                           fsr0h	equ	0xFEA
  6123                           fsr0l	equ	0xFE9
  6124                           wreg	equ	0xFE8
  6125                           indf1	equ	0xFE7
  6126                           postinc1	equ	0xFE6
  6127                           postdec1	equ	0xFE5
  6128                           fsr1h	equ	0xFE2
  6129                           fsr1l	equ	0xFE1
  6130                           bsr	equ	0xFE0
  6131                           indf2	equ	0xFDF
  6132                           postinc2	equ	0xFDE
  6133                           postdec2	equ	0xFDD
  6134                           plusw2	equ	0xFDB
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139                           	psect	rparam
  6140  0000                     pclatu	equ	0xFFB
  6141                           pclath	equ	0xFFA
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           intcon2	equ	0xFF1
  6150                           indf0	equ	0xFEF
  6151                           postinc0	equ	0xFEE
  6152                           plusw0	equ	0xFEB
  6153                           fsr0h	equ	0xFEA
  6154                           fsr0l	equ	0xFE9
  6155                           wreg	equ	0xFE8
  6156                           indf1	equ	0xFE7
  6157                           postinc1	equ	0xFE6
  6158                           postdec1	equ	0xFE5
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           bsr	equ	0xFE0
  6162                           indf2	equ	0xFDF
  6163                           postinc2	equ	0xFDE
  6164                           postdec2	equ	0xFDD
  6165                           plusw2	equ	0xFDB
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170                           	psect	temp
  6171  000044                     btemp:
  6172                           	opt stack 0
  6173  000044                     	ds	1
  6174  0000                     int$flags	set	btemp
  6175  0000                     wtemp6	set	btemp+1
  6176                           pclatu	equ	0xFFB
  6177                           pclath	equ	0xFFA
  6178                           tblptru	equ	0xFF8
  6179                           tblptrh	equ	0xFF7
  6180                           tblptrl	equ	0xFF6
  6181                           tablat	equ	0xFF5
  6182                           prodh	equ	0xFF4
  6183                           prodl	equ	0xFF3
  6184                           intcon	equ	0xFF2
  6185                           intcon2	equ	0xFF1
  6186                           indf0	equ	0xFEF
  6187                           postinc0	equ	0xFEE
  6188                           plusw0	equ	0xFEB
  6189                           fsr0h	equ	0xFEA
  6190                           fsr0l	equ	0xFE9
  6191                           wreg	equ	0xFE8
  6192                           indf1	equ	0xFE7
  6193                           postinc1	equ	0xFE6
  6194                           postdec1	equ	0xFE5
  6195                           fsr1h	equ	0xFE2
  6196                           fsr1l	equ	0xFE1
  6197                           bsr	equ	0xFE0
  6198                           indf2	equ	0xFDF
  6199                           postinc2	equ	0xFDE
  6200                           postdec2	equ	0xFDD
  6201                           plusw2	equ	0xFDB
  6202                           fsr2h	equ	0xFDA
  6203                           fsr2l	equ	0xFD9
  6204                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    18
    Data        8
    BSS         296
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      67
    BANK0           160     43     154
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_17(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_20(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_19(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_11(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_11(CODE[2]), ROM(CODE[32767]), 

    S101$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S101$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S101$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer

Critical Paths under _main in BANK0

    _main->_run
    _run->_C_DOOR_SendStates
    _initDoors->_C_DOOR_LockAll
    _D_UART_WriteInt->_printf
    _D_UART_Acknowledge->_printf
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _D_UART_Init->___lldiv
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20300
                                             41 BANK0      2     2      0
                        _D_PORT_Init
                         _D_PWM_Init
                        _D_TMR0_Init
                        _D_TMR1_Init
                      _D_UART_Enable
                        _D_UART_Init
                                _run
 ---------------------------------------------------------------------------------
 (1) _run                                                  1     1      0   19410
                                             40 BANK0      1     1      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                       _D_PWM_SetPwm
                      _D_TMR1_Enable
                 _D_UART_Acknowledge
                        _D_UART_Read
                       _D_UART_Write
                    _D_UART_WriteInt
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1213
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _setAlarm                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initDoors                                            1     1      0     489
                                              9 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (3) _C_DOOR_LockAll                                       9     9      0      90
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (3) _C_DOOR_Init                                          5     5      0     332
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    4079
                                             26 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Read                                          7     0      7       0
                                              0 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _D_UART_Acknowledge                                   1     1      0    3868
                                             26 BANK0      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_PWM_SetPwm                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_UnlockAll                                     9     9      0      90
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_SendStates                                    9     9      0    5144
                                             31 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (3) _commandAndMessage                                   14     0     14     521
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         5     1      4    4259
                                             26 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              23    18      5    3837
                                             12 BANK0     14     9      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     601
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_ReadSensors                                   5     5      0      90
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     815
                                             13 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (3) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0       0
                                             19 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                             18    18      0     165
                                              1 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (8) _fillDataBuffer                                       1     1      0     165
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PORT_Init
   _D_PWM_Init
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _run
     _C_DOOR_LockAll
     _C_DOOR_ReadSensors
     _C_DOOR_SendStates
       _D_UART_Write
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _commandAndMessage
     _C_DOOR_UnlockAll
     _D_PWM_SetPwm
     _D_TMR1_Enable
     _D_UART_Acknowledge
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _D_UART_Read
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _D_UART_WriteInt
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _initDoors
       _C_DOOR_Init
       _C_DOOR_LockAll
       _D_TMR0_Enable
     _setAlarm
     _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2B      9A       5       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     183      20        0.0%
DATA                 0      0     183       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 16 13:32:34 2019

                         l30 145E                           l31 13D0                           l24 0FA0  
                         l25 0E7C                           l42 14FE                           l50 108C  
                         l43 1482                           l19 1764                           l36 13AC  
                         l37 131C                           l48 108E                           l49 0FC4  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
               _ackCharacter 00F2                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l400 086E  
                        l216 1906                          l320 1994                          l161 1954  
                        l401 0872                          l217 1900                          l410 098C  
                        l402 08F6                          l411 0946                          l420 0A5A  
                        l340 0B48                          l421 09F4                          l405 097C  
                        l166 192A                          l406 0910                          l342 0B7E  
                        l239 1A12                          l167 1920                          l415 099E  
                        l351 0C44                          l335 0ABA                          l416 0A60  
                        l360 0C9A                          l352 0C66                          l344 0BB4  
                        l353 0C78                          l337 0AEC                          l418 0A48  
                        l362 0CD4                          l346 0BE8                          l338 0B18  
                        l419 09A4                          l363 0C9E                          l355 0C82  
                        l348 0C1A                          l365 0CA8                          l349 0C30  
                        l198 1A26                          l366 0CB2                          l359 0CB8  
                        l392 0856                          l393 0866                          l394 087A  
                        l399 08C6                          l832 17C2                          l833 17CC  
                        l842 18A2                          l843 18AC                          l780 1622  
                        l828 17A2                          l829 179A                          l838 188A  
                        l775 15E0                          l839 1882                          l776 15D4  
                        l779 1614                          l972 1830                          l973 1826  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _pwm 003B                          _run 0AA2                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2152 094A                         l2138 0914  
                       STR_1 0844                         ?_run 0001                         STR_2 0842  
                       STR_3 0828                         STR_4 0824                         STR_5 0846  
                       STR_6 0846                         STR_7 0846                         STR_8 0846  
                       STR_9 082C                         u2021 0ACE                         u2120 0C50  
                       u1500 17A6                         u2207 1526                         u2217 156E  
                       u1530 188E                         u2138 0C54                         u2227 159A  
                       u2237 0BA6                         u2247 1252                         u1480 1936  
                       u1560 08A6                         u1704 0F6C                         u2257 104C  
                       u1705 0F68                         u1810 14F8                         u1714 0F92  
                       u2267 117E                         u1715 0F8E                         u1820 14FA  
                       u1804 14EA                         u1660 0A6A                         u1805 14E6  
                       u2277 1924                         u1670 0A96                         u1734 1424  
                       u1567 089C                         u1751 1120                         u1735 1420  
                       u1761 115A                         u1851 1012                         u1940 1866  
                       u1677 0A8C                         u1960 15E4                         u1784 1372  
                       u1785 136E                         u1881 18DC                         u1980 169A  
                       u1985 168E                 ?_C_DOOR_Init 0001                         _baud 0043  
                       _main 151A                         _read 0029                         _lock 003D  
                       _tick 003E                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0044            C_DOOR_UnlockAll@d 00CF  
                       prodh 000FF4                         prodl 000FF3                         start 00EC  
              __CFG_IESO$OFF 000000              __end_of_HighISR 1314                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  ?_D_PWM_Init 0001            initDoors@door_cnt 00D0  
             _startCharacter 00F8                        ??_run 00EF              D_PWM_SetPwm@pwm 00C7  
              __CFG_PLLDIV$5 000000         commandAndMessage@com 00D1      __size_of_C_DOOR_LockAll 00B2  
       commandAndMessage@mes 00D3                        ?_main 0001                        STR_10 082F  
                      STR_11 083A                        STR_20 0840                        STR_12 0838  
                      STR_13 0840                        STR_21 0813                        STR_14 0836  
                      STR_15 083C                        STR_16 083A                        STR_17 083E  
                      STR_18 0832                        STR_19 0834              __end_of___lldiv 1634  
                      u17511 111E                        u17611 1158              __end_of___lwdiv 17D6  
        D_UART_Acknowledge@i 00E1                        i2l120 0E40                        i2l121 0CE4  
            __end_of___lwmod 18B6                        i2l130 0D54                        i2l122 0D08  
                      i2l131 0D76                        i2l142 0E20                        i2l134 0D98  
                      i2l126 0D10                        i1l374 0078                        i2l143 0E32  
                      i2l135 0DBA                        i2l127 0D32                        i1l375 0094  
                      i1l376 008E                        i2l145 0E3A                        i1l377 0092  
                      i2l138 0DDC                        i2l139 0DFE                        i2l176 12C8  
                      i2l177 12B8                        i2l179 12C2                        _RCREG 000FAE  
                      _TMR1H 000FCF                        _TMR1L 000FCE                        _SPBRG 000FAF  
                      _PORTA 000F80                        _PORTB 000F81                        _PORTC 000F82  
              __CFG_USBDIV$1 000000                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TXREG 000FAD                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
 __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               C_DOOR_Init@cnt 00CA               __CFG_EBTRB$OFF 000000  
            __end_of_dpowers 080B                        _doors 0060                        _putch 1914  
                      pclath 000FFA                        tablat 000FF5                 ?_D_UART_Init 00D4  
               ?_D_UART_Read 00C7                 ?_D_TMR0_Init 0001                        plusw0 000FEB  
               ?_D_TMR1_Init 0001                        plusw2 000FDB                        status 000FD8  
                      wtemp6 0045                 ?_D_PORT_Init 0001                _stopCharacter 00F6  
            __initialization 17D6                 __end_of_main 15B0                       ??_main 00F0  
              __activetblptr 000003   __end_of_D_UART_Acknowledge 1722              __CFG_CCP2MX$OFF 000000  
      commandAndMessage@door 00C7                       _ADCON1 000FC1                       _CCPR1L 000FBE  
        __size_of_D_PWM_Init 001E                       ?_putch 0001             _C_DOOR_UnlockAll 1314  
                  ??_HighISR 0002                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___lldiv 00CF                setAlarm@alarm 00C7              C_DOOR_LockAll@d 00CF  
                  ??___lwdiv 00CB                    ??___lwmod 00D2                       clear_0 17FC  
                     clear_1 1808                       clear_2 1814                       _printf 084A  
           __end_of_setAlarm 1A34     __size_of_D_UART_WriteInt 00D4                       _strcmp 1824  
      D_UART_Init@interrupts 00D8                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00E1  
            D_UART_Init@baud 00D6              D_UART_Init@name 00D4   __end_of_C_DOOR_ReadSensors 151A  
                 __accesstop 0060      __end_of__initialization 181A              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 0152               __pcstackCOMRAM 0001  
               __pidataBANK0 1A34                 C_DOOR_Init@d 00CB                __end_of_putch 193C  
           _messageCharacter 00F4                ?_D_PWM_SetPwm 0001               _C_DOOR_LockAll 13C8  
     __size_of_D_UART_Enable 0024               ??_D_UART_Write 00E5       __size_of_D_TMR0_Enable 0014  
     __size_of_D_TMR1_Enable 0014            _C_DOOR_SendStates 0FBC                      ??_putch 00C7  
         ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060                   __pbssBANK1 0100  
         __size_of_initDoors 0022             _communicationCnt 0040         __size_of_D_UART_Init 0082  
       __size_of_D_UART_Read 0030         __size_of_D_TMR0_Init 0024         __size_of_D_TMR1_Init 0020  
        ??_C_DOOR_SendStates 00E6                      ?_LowISR 0001         __size_of_D_PORT_Init 001E  
               ??_D_PWM_Init 00C7       __end_of_C_DOOR_LockAll 147A               ??_D_PWM_SetPwm 00C7  
                 _deviceName 00C4                      ?_printf 00D3                      ?_strcmp 00C7  
  __end_of_C_DOOR_SendStates 10AA      __size_of_fillDataBuffer 018A          D_UART_Enable@enable 00C7  
          ??_D_UART_WriteInt 00E5           __end_of_D_PWM_Init 19E4              __CFG_VREGEN$OFF 000000  
                    _HighISR 0008                _D_UART_Enable 193C                    ?_setAlarm 0001  
                    __Hparam 0000                      __Lparam 0000              __size_of_LowISR 00D4  
              _D_TMR0_Enable 1A16                _D_TMR1_Enable 1A02                   _readBuffer 0100  
                    ___lldiv 15B0              ?_C_DOOR_LockAll 0001                      ___lwdiv 1782  
                    ___lwmod 1872                 __psmallconst 0800          C_DOOR_ReadSensors@d 00CB  
            __CFG_STVREN$OFF 000000                      __pcinit 17D6                      __ramtop 0800  
   __end_of_C_DOOR_UnlockAll 13C8                      __ptext0 151A                      __ptext1 0AA2  
                    __ptext2 1824                      __ptext3 1A2A                      __ptext4 1984  
                    __ptext5 13C8                      __ptext6 0E6A                      __ptext7 118A  
                    __ptext8 18B6                      __ptext9 16B6              __size_of_printf 0258  
          __end_of_initDoors 19A6                    _T0CONbits 000FD5              __size_of_strcmp 004E  
          __end_of_hexpowers 0813                    _T1CONbits 000FCD                      _dpowers 0801  
                  _T2CONbits 000FCA                 __size_of_run 023E         C_DOOR_SendStates@com 00E9  
       C_DOOR_SendStates@mes 00EC                      _running 003C               __pintcode_body 125E  
       end_of_initialization 181A           _D_UART_Acknowledge 16B6          D_TMR0_Enable@enable 00C7  
                    int_func 125E               ?_D_UART_Enable 0001                   ??_setAlarm 00C7  
            ___lldiv@divisor 00CB               ?_D_TMR0_Enable 0001              ___lldiv@counter 00D3  
             ?_D_TMR1_Enable 0001         __end_of_D_UART_Write 118A          ?_D_UART_Acknowledge 0001  
                  _RCSTAbits 000FAB                      printf@c 00E0                      printf@f 00D3  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE                      strcmp@r 00CC  
                  _PORTBbits 000F81                    _PORTCbits 000F82   __size_of_C_DOOR_SendStates 00EE  
                  _TRISCbits 000F94         ??_D_UART_Acknowledge 00E1         __end_of_D_PWM_SetPwm 1914  
                _CCP1CONbits 000FBD                    _TXSTAbits 000FAC           _C_DOOR_ReadSensors 147A  
             __end_of_LowISR 00EC                  _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001  
             __end_of_printf 0AA2               __end_of_strcmp 1872          start_initialization 17D6  
             _fillDataBuffer 0CE0                  __end_of_run 0CE0         ??_C_DOOR_ReadSensors 00C7  
            ??_D_UART_Enable 00C7                ??_C_DOOR_Init 00C7              ??_D_TMR0_Enable 00C7  
            ??_D_TMR1_Enable 00C7                     ??_LowISR 0014                  __pdataBANK0 00F2  
           __CFG_LPT1OSC$OFF 000000              _D_UART_WriteInt 118A             D_UART_Write@data 00E3  
                   ??_printf 00D8                 _lockDelayCnt 0041                     ??_strcmp 00CB  
           D_UART_WriteInt@d 00E3       __end_of_fillDataBuffer 0E6A                  __pbssCOMRAM 0029  
              __pcstackBANK0 00C7                ??_D_UART_Init 00D9                ??_D_UART_Read 00CE  
              ??_D_TMR0_Init 00C8                ??_D_TMR1_Init 00C8                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00C7             ??_C_DOOR_LockAll 00C7  
           ___lwdiv@dividend 00C7          __end_of_C_DOOR_Init 0FBC            __size_of_setAlarm 000A  
                  __pintcode 0008                     ?___lldiv 00C7                     ?___lwdiv 00C7  
                   ?___lwmod 00CE                  __pintcodelo 0018           fillDataBuffer@data 0001  
                _ledDelayCnt 003F            ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001  
                __smallconst 0800           ??_C_DOOR_UnlockAll 00C7        __size_of_D_PWM_SetPwm 002E  
                  _initDoors 1984                 _D_UART_Write 10AA                    _hexpowers 080B  
                  _readReady 0042             ___lwdiv@quotient 00CC               __size_of_putch 0028  
        D_TMR1_Enable@enable 00C7                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
        __end_of_D_UART_Init 16B6          __end_of_D_UART_Read 18E6                     _PIR1bits 000F9E  
    __end_of_D_UART_WriteInt 125E          __end_of_D_TMR0_Init 1984          __end_of_D_TMR1_Init 19C6  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000       D_UART_WriteInt@command 00E1  
        __end_of_D_PORT_Init 1A02                 _D_PWM_SetPwm 18E6                   printf@flag 00DD  
                 printf@prec 00DC                   ?_initDoors 0001                  _INTCON2bits 000FF1  
                  copy_data0 17EA                  _C_DOOR_Init 0E6A             __size_of_HighISR 130C  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___lldiv 0084  
           __size_of___lwdiv 0054             __size_of___lwmod 0044              ___lwdiv@divisor 00C9  
__size_of_D_UART_Acknowledge 006C              ___lwdiv@counter 00CB                     __ptext10 18E6  
                   __ptext11 1314                     __ptext20 1634                     __ptext12 0FBC  
                   __ptext21 15B0                     __ptext13 1722                     __ptext22 193C  
                   __ptext14 10AA                     __ptext31 0CE0                     __ptext23 19A6  
                   __ptext15 084A                     __ptext24 1A02                     __ptext16 1914  
                   __ptext25 1960                     __ptext17 1872                     __ptext26 1A16  
                   __ptext18 1782                     __ptext27 19C6                     __ptext19 147A  
                   __ptext28 19E4                     _door_cnt 0037                  _D_UART_Init 1634  
                _D_UART_Read 18B6                     _oldAlarm 0039                     _newAlarm 003A  
                   _readData 0030                  _D_TMR0_Init 1960                  _D_TMR1_Init 19A6  
              __size_of_main 0096           C_DOOR_SendStates@d 00EE                  _D_PORT_Init 19E4  
                   _setAlarm 1A2A             ?_D_UART_WriteInt 00E1                     int$flags 0044  
                  printf@idx 00D9                    printf@val 00DE        __CFG_CPUDIV$OSC1_PLL2 000000  
                  putch@data 00C7                   _INTCONbits 000FF2                  ??_initDoors 00D0  
          _commandAndMessage 1722                     intlevel1 0000                     intlevel2 0000  
__size_of_C_DOOR_ReadSensors 00A0           ?_commandAndMessage 00C7             ___lwmod@dividend 00CE  
           ___lldiv@dividend 00C7        __end_of_D_UART_Enable 1960        __end_of_D_TMR0_Enable 1A2A  
        ??_commandAndMessage 00D5        __end_of_D_TMR1_Enable 1A16                   _D_PWM_Init 19C6  
                   printf@ap 00DA             ??_fillDataBuffer 0001          D_UART_Write@command 00E1  
                   putch@max 00C8                     strcmp@s1 00C7                     strcmp@s2 00C9  
           ___lldiv@quotient 00CF              ___lwmod@divisor 00D0              ___lwmod@counter 00D2  
  __end_of_commandAndMessage 1782    __size_of_C_DOOR_UnlockAll 00B4  
