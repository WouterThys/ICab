

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Apr 14 22:19:38 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.44
    58                           ; Generated 14/09/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F2550 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  001D26                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _ackCharacter
    97  001D26  24                 	db	low STR_4
    98  001D27  08                 	db	high STR_4
    99                           
   100                           ;initializer for _stopCharacter
   101  001D28  42                 	db	low STR_2
   102  001D29  08                 	db	high STR_2
   103                           
   104                           ;initializer for _startCharacter
   105  001D2A  44                 	db	low STR_1
   106  001D2B  08                 	db	high STR_1
   107                           
   108                           	psect	idataBANK0
   109  001D2C                     __pidataBANK0:
   110                           	opt stack 0
   111                           
   112                           ;initializer for _messageCharacter
   113  001D2C  28                 	db	low STR_3
   114  001D2D  08                 	db	high STR_3
   115                           
   116                           	psect	smallconst
   117  000800                     __psmallconst:
   118                           	opt stack 0
   119  000800  00                 	db	0
   120  000801                     _dpowers:
   121                           	opt stack 0
   122  000801  0001               	dw	1
   123  000803  000A               	dw	10
   124  000805  0064               	dw	100
   125  000807  03E8               	dw	1000
   126  000809  2710               	dw	10000
   127  00080B                     __end_of_dpowers:
   128                           	opt stack 0
   129  00080B                     _hexpowers:
   130                           	opt stack 0
   131  00080B  0001               	dw	1
   132  00080D  0010               	dw	16
   133  00080F  0100               	dw	256
   134  000811  1000               	dw	4096
   135  000813                     __end_of_hexpowers:
   136                           	opt stack 0
   137  0000                     _TMR1L	set	4046
   138  0000                     _TMR1H	set	4047
   139  0000                     _PORTBbits	set	3969
   140  0000                     _T1CONbits	set	4045
   141  0000                     _PORTCbits	set	3970
   142  0000                     _CCP1CONbits	set	4029
   143  0000                     _CCPR1L	set	4030
   144  0000                     _T2CONbits	set	4042
   145  0000                     _PR2	set	4043
   146  0000                     _INTCON2bits	set	4081
   147  0000                     _T0CONbits	set	4053
   148  0000                     _TXREG	set	4013
   149  0000                     _TRISCbits	set	3988
   150  0000                     _PIE1bits	set	3997
   151  0000                     _IPR1bits	set	3999
   152  0000                     _PIR1bits	set	3998
   153  0000                     _INTCONbits	set	4082
   154  0000                     _RCONbits	set	4048
   155  0000                     _SPBRG	set	4015
   156  0000                     _BAUDCONbits	set	4024
   157  0000                     _TXSTAbits	set	4012
   158  0000                     _RCREG	set	4014
   159  0000                     _RCSTAbits	set	4011
   160  0000                     _ADCON1	set	4033
   161  0000                     _PORTC	set	3970
   162  0000                     _TRISC	set	3988
   163  0000                     _TRISA	set	3986
   164  0000                     _TRISB	set	3987
   165  0000                     _PORTA	set	3968
   166  0000                     _PORTB	set	3969
   167  000813                     STR_21:
   168  000813  30                 	db	48	;'0'
   169  000814  31                 	db	49	;'1'
   170  000815  32                 	db	50	;'2'
   171  000816  33                 	db	51	;'3'
   172  000817  34                 	db	52	;'4'
   173  000818  35                 	db	53	;'5'
   174  000819  36                 	db	54	;'6'
   175  00081A  37                 	db	55	;'7'
   176  00081B  38                 	db	56	;'8'
   177  00081C  39                 	db	57	;'9'
   178  00081D  61                 	db	97	;'a'
   179  00081E  62                 	db	98	;'b'
   180  00081F  63                 	db	99	;'c'
   181  000820  64                 	db	100	;'d'
   182  000821  65                 	db	101	;'e'
   183  000822  66                 	db	102	;'f'
   184  000823  00                 	db	0
   185  000824                     STR_4:
   186  000824  5B                 	db	91	;'['
   187  000825  41                 	db	65	;'A'
   188  000826  5D                 	db	93	;']'
   189  000827  00                 	db	0
   190  000828                     STR_3:
   191  000828  5B                 	db	91	;'['
   192  000829  4D                 	db	77	;'M'
   193  00082A  5D                 	db	93	;']'
   194  00082B  00                 	db	0
   195  00082C                     STR_10:
   196  00082C  25                 	db	37
   197  00082D  64                 	db	100	;'d'
   198  00082E  00                 	db	0
   199  00082F                     STR_5:
   200  00082F  25                 	db	37
   201  000830  78                 	db	120	;'x'
   202  000831  00                 	db	0
   203  000832                     STR_18:
   204  000832  41                 	db	65	;'A'
   205  000833  00                 	db	0
   206  000834                     STR_19:
   207  000834  45                 	db	69	;'E'
   208  000835  00                 	db	0
   209  000836                     STR_14:
   210  000836  49                 	db	73	;'I'
   211  000837  00                 	db	0
   212  000838                     STR_12:
   213  000838  4C                 	db	76	;'L'
   214  000839  00                 	db	0
   215  00083A                     STR_11:
   216  00083A  50                 	db	80	;'P'
   217  00083B  00                 	db	0
   218  00083C                     STR_15:
   219  00083C  52                 	db	82	;'R'
   220  00083D  00                 	db	0
   221  00083E                     STR_17:
   222  00083E  53                 	db	83	;'S'
   223  00083F  00                 	db	0
   224  000840                     STR_13:
   225  000840  55                 	db	85	;'U'
   226  000841  00                 	db	0
   227  000842                     STR_2:
   228  000842  24                 	db	36
   229  000843  00                 	db	0
   230  000844                     STR_1:
   231  000844  26                 	db	38
   232  000845  00                 	db	0
   233  000846                     STR_6:
   234  000846  3A                 	db	58	;':'
   235  000847  00                 	db	0
   236  0000                     
   237                           ; #config settings
   238  000848  00                 	db	0	; dummy byte at the end
   239  0000                     
   240                           	psect	cinit
   241  0018DC                     __pcinit:
   242                           	opt stack 0
   243  0018DC                     start_initialization:
   244                           	opt stack 0
   245  0018DC                     __initialization:
   246                           	opt stack 0
   247                           
   248                           ; Initialize objects allocated to BANK0 (2 bytes)
   249                           ; load TBLPTR registers with __pidataBANK0
   250  0018DC  0E2C               	movlw	low __pidataBANK0
   251  0018DE  6EF6               	movwf	tblptrl,c
   252  0018E0  0E1D               	movlw	high __pidataBANK0
   253  0018E2  6EF7               	movwf	tblptrh,c
   254  0018E4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   255  0018E6  6EF8               	movwf	tblptru,c
   256  0018E8  0009               	tblrd		*+	;fetch initializer
   257  0018EA  CFF5 F0AA          	movff	tablat,__pdataBANK0
   258  0018EE  0009               	tblrd		*+	;fetch initializer
   259  0018F0  CFF5 F0AB          	movff	tablat,__pdataBANK0+1
   260                           
   261                           ; Initialize objects allocated to COMRAM (6 bytes)
   262                           ; load TBLPTR registers with __pidataCOMRAM
   263  0018F4  0E26               	movlw	low __pidataCOMRAM
   264  0018F6  6EF6               	movwf	tblptrl,c
   265  0018F8  0E1D               	movlw	high __pidataCOMRAM
   266  0018FA  6EF7               	movwf	tblptrh,c
   267  0018FC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   268  0018FE  6EF8               	movwf	tblptru,c
   269  001900  EE00  F03E         	lfsr	0,__pdataCOMRAM
   270  001904  EE10 F006          	lfsr	1,6
   271  001908                     copy_data0:
   272  001908  0009               	tblrd		*+
   273  00190A  CFF5 FFEE          	movff	tablat,postinc0
   274  00190E  50E5               	movf	postdec1,w,c
   275  001910  50E1               	movf	fsr1l,w,c
   276  001912  E1FA               	bnz	copy_data0
   277                           
   278                           ; Clear objects allocated to BANK2 (100 bytes)
   279  001914  EE02  F000         	lfsr	0,__pbssBANK2
   280  001918  0E64               	movlw	100
   281  00191A                     clear_0:
   282  00191A  6AEE               	clrf	postinc0,c
   283  00191C  06E8               	decf	wreg,f,c
   284  00191E  E1FD               	bnz	clear_0
   285                           
   286                           ; Clear objects allocated to BANK1 (166 bytes)
   287  001920  EE01  F000         	lfsr	0,__pbssBANK1
   288  001924  0EA6               	movlw	166
   289  001926                     clear_1:
   290  001926  6AEE               	clrf	postinc0,c
   291  001928  06E8               	decf	wreg,f,c
   292  00192A  E1FD               	bnz	clear_1
   293                           
   294                           ; Clear objects allocated to BANK0 (11 bytes)
   295  00192C  EE00  F09F         	lfsr	0,__pbssBANK0
   296  001930  0E0B               	movlw	11
   297  001932                     clear_2:
   298  001932  6AEE               	clrf	postinc0,c
   299  001934  06E8               	decf	wreg,f,c
   300  001936  E1FD               	bnz	clear_2
   301                           
   302                           ; Clear objects allocated to COMRAM (16 bytes)
   303  001938  EE00  F02E         	lfsr	0,__pbssCOMRAM
   304  00193C  0E10               	movlw	16
   305  00193E                     clear_3:
   306  00193E  6AEE               	clrf	postinc0,c
   307  001940  06E8               	decf	wreg,f,c
   308  001942  E1FD               	bnz	clear_3
   309  001944                     end_of_initialization:
   310                           	opt stack 0
   311  001944                     __end_of__initialization:
   312                           	opt stack 0
   313  001944  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   314  001946  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   315  001948  0100               	movlb	0
   316  00194A  EF25  F004         	goto	_main	;jump to C main() function
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	bssCOMRAM
   327  00002E                     __pbssCOMRAM:
   328                           	opt stack 0
   329  00002E                     _read:
   330                           	opt stack 0
   331  00002E                     	ds	6
   332  000034                     _oldAlarm:
   333                           	opt stack 0
   334  000034                     	ds	1
   335  000035                     _newAlarm:
   336                           	opt stack 0
   337  000035                     	ds	1
   338  000036                     _pwm:
   339                           	opt stack 0
   340  000036                     	ds	1
   341  000037                     _running:
   342                           	opt stack 0
   343  000037                     	ds	1
   344  000038                     _lock:
   345                           	opt stack 0
   346  000038                     	ds	1
   347  000039                     _tick:
   348                           	opt stack 0
   349  000039                     	ds	1
   350  00003A                     _communicationCnt:
   351                           	opt stack 0
   352  00003A                     	ds	1
   353  00003B                     _lockDelayCnt:
   354                           	opt stack 0
   355  00003B                     	ds	1
   356  00003C                     _readReady:
   357                           	opt stack 0
   358  00003C                     	ds	1
   359  00003D                     _baud:
   360                           	opt stack 0
   361  00003D                     	ds	1
   362                           tblptru	equ	0xFF8
   363                           tblptrh	equ	0xFF7
   364                           tblptrl	equ	0xFF6
   365                           tablat	equ	0xFF5
   366                           postinc0	equ	0xFEE
   367                           wreg	equ	0xFE8
   368                           postdec1	equ	0xFE5
   369                           fsr1l	equ	0xFE1
   370                           
   371                           	psect	dataCOMRAM
   372  00003E                     __pdataCOMRAM:
   373                           	opt stack 0
   374  00003E                     _ackCharacter:
   375                           	opt stack 0
   376  00003E                     	ds	2
   377  000040                     _stopCharacter:
   378                           	opt stack 0
   379  000040                     	ds	2
   380  000042                     _startCharacter:
   381                           	opt stack 0
   382  000042                     	ds	2
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	bssBANK0
   393  00009F                     __pbssBANK0:
   394                           	opt stack 0
   395  00009F                     _readData:
   396                           	opt stack 0
   397  00009F                     	ds	6
   398  0000A5                     _deviceName:
   399                           	opt stack 0
   400  0000A5                     	ds	3
   401  0000A8                     _door_cnt:
   402                           	opt stack 0
   403  0000A8                     	ds	2
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           postdec1	equ	0xFE5
   411                           fsr1l	equ	0xFE1
   412                           
   413                           	psect	dataBANK0
   414  0000AA                     __pdataBANK0:
   415                           	opt stack 0
   416  0000AA                     _messageCharacter:
   417                           	opt stack 0
   418  0000AA                     	ds	2
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           postdec1	equ	0xFE5
   426                           fsr1l	equ	0xFE1
   427                           
   428                           	psect	bssBANK1
   429  000100                     __pbssBANK1:
   430                           	opt stack 0
   431  000100                     _readBuffer:
   432                           	opt stack 0
   433  000100                     	ds	166
   434                           tblptru	equ	0xFF8
   435                           tblptrh	equ	0xFF7
   436                           tblptrl	equ	0xFF6
   437                           tablat	equ	0xFF5
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           postdec1	equ	0xFE5
   441                           fsr1l	equ	0xFE1
   442                           
   443                           	psect	bssBANK2
   444  000200                     __pbssBANK2:
   445                           	opt stack 0
   446  000200                     _doors:
   447                           	opt stack 0
   448  000200                     	ds	100
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           postdec1	equ	0xFE5
   456                           fsr1l	equ	0xFE1
   457                           
   458                           	psect	cstackBANK0
   459  000060                     __pcstackBANK0:
   460                           	opt stack 0
   461  000060                     ??_LowISR:
   462                           
   463                           ; 1 bytes @ 0x0
   464  000060                     	ds	21
   465  000075                     ??_C_DOOR_Init:
   466  000075                     ??_C_DOOR_LockAll:
   467  000075                     ??_C_DOOR_UnlockAll:
   468  000075                     ??_C_DOOR_ReadSensors:
   469  000075                     ?_strcmp:
   470                           	opt stack 0
   471  000075                     ?___lwdiv:
   472                           	opt stack 0
   473  000075                     ?___lldiv:
   474                           	opt stack 0
   475  000075                     ?_D_UART_Read:
   476                           	opt stack 0
   477  000075                     D_UART_Enable@enable:
   478                           	opt stack 0
   479  000075                     putch@data:
   480                           	opt stack 0
   481  000075                     D_TMR0_Enable@enable:
   482                           	opt stack 0
   483  000075                     D_PWM_SetPwm@pwm:
   484                           	opt stack 0
   485  000075                     D_TMR1_Enable@enable:
   486                           	opt stack 0
   487  000075                     setAlarm@alarm:
   488                           	opt stack 0
   489  000075                     ___lwdiv@dividend:
   490                           	opt stack 0
   491  000075                     strcmp@s1:
   492                           	opt stack 0
   493  000075                     ___lldiv@dividend:
   494                           	opt stack 0
   495  000075                     commandAndMessage@door:
   496                           	opt stack 0
   497                           
   498                           ; 10 bytes @ 0x15
   499  000075                     	ds	1
   500  000076                     putch@max:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x16
   504  000076                     	ds	1
   505  000077                     ___lwdiv@divisor:
   506                           	opt stack 0
   507  000077                     strcmp@s2:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x17
   511  000077                     	ds	1
   512  000078                     C_DOOR_Init@cnt:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x18
   516  000078                     	ds	1
   517  000079                     ??_strcmp:
   518  000079                     C_DOOR_Init@d:
   519                           	opt stack 0
   520  000079                     C_DOOR_ReadSensors@d:
   521                           	opt stack 0
   522  000079                     ___lwdiv@counter:
   523                           	opt stack 0
   524  000079                     ___lldiv@divisor:
   525                           	opt stack 0
   526                           
   527                           ; 4 bytes @ 0x19
   528  000079                     	ds	1
   529  00007A                     strcmp@r:
   530                           	opt stack 0
   531  00007A                     ___lwdiv@quotient:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x1A
   535  00007A                     	ds	1
   536  00007B                     
   537                           ; 1 bytes @ 0x1B
   538  00007B                     	ds	1
   539  00007C                     ?___lwmod:
   540                           	opt stack 0
   541  00007C                     ___lwmod@dividend:
   542                           	opt stack 0
   543                           
   544                           ; 2 bytes @ 0x1C
   545  00007C                     	ds	1
   546  00007D                     C_DOOR_LockAll@d:
   547                           	opt stack 0
   548  00007D                     C_DOOR_UnlockAll@d:
   549                           	opt stack 0
   550  00007D                     ___lldiv@quotient:
   551                           	opt stack 0
   552                           
   553                           ; 4 bytes @ 0x1D
   554  00007D                     	ds	1
   555  00007E                     initDoors@door_cnt:
   556                           	opt stack 0
   557  00007E                     ___lwmod@divisor:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x1E
   561  00007E                     	ds	1
   562  00007F                     commandAndMessage@com:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x1F
   566  00007F                     	ds	1
   567  000080                     ___lwmod@counter:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x20
   571  000080                     	ds	1
   572  000081                     ?_printf:
   573                           	opt stack 0
   574  000081                     ___lldiv@counter:
   575                           	opt stack 0
   576  000081                     commandAndMessage@mes:
   577                           	opt stack 0
   578  000081                     printf@f:
   579                           	opt stack 0
   580                           
   581                           ; 3 bytes @ 0x21
   582  000081                     	ds	1
   583  000082                     D_UART_Init@name:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x22
   587  000082                     	ds	1
   588  000083                     
   589                           ; 1 bytes @ 0x23
   590  000083                     	ds	1
   591  000084                     D_UART_Init@baud:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x24
   595  000084                     	ds	2
   596  000086                     ??_printf:
   597  000086                     D_UART_Init@interrupts:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x26
   601  000086                     	ds	1
   602  000087                     printf@idx:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x27
   606  000087                     	ds	1
   607  000088                     printf@ap:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x28
   611  000088                     	ds	2
   612  00008A                     printf@prec:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x2A
   616  00008A                     	ds	1
   617  00008B                     printf@flag:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x2B
   621  00008B                     	ds	1
   622  00008C                     printf@val:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x2C
   626  00008C                     	ds	2
   627  00008E                     printf@c:
   628                           	opt stack 0
   629                           
   630                           ; 1 bytes @ 0x2E
   631  00008E                     	ds	1
   632  00008F                     D_UART_Write@command:
   633                           	opt stack 0
   634  00008F                     D_UART_WriteInt@command:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x2F
   638  00008F                     	ds	2
   639  000091                     D_UART_Write@data:
   640                           	opt stack 0
   641  000091                     D_UART_WriteInt@d:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x31
   645  000091                     	ds	2
   646  000093                     ??_D_UART_Write:
   647  000093                     ??_D_UART_WriteInt:
   648                           
   649                           ; 1 bytes @ 0x33
   650  000093                     	ds	1
   651  000094                     ??_C_DOOR_SendStates:
   652                           
   653                           ; 1 bytes @ 0x34
   654  000094                     	ds	3
   655  000097                     C_DOOR_SendStates@com:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x37
   659  000097                     	ds	3
   660  00009A                     C_DOOR_SendStates@mes:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x3A
   664  00009A                     	ds	2
   665  00009C                     C_DOOR_SendStates@d:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x3C
   669  00009C                     	ds	1
   670  00009D                     ??_main:
   671                           
   672                           ; 1 bytes @ 0x3D
   673  00009D                     	ds	2
   674                           tblptru	equ	0xFF8
   675                           tblptrh	equ	0xFF7
   676                           tblptrl	equ	0xFF6
   677                           tablat	equ	0xFF5
   678                           postinc0	equ	0xFEE
   679                           wreg	equ	0xFE8
   680                           postdec1	equ	0xFE5
   681                           fsr1l	equ	0xFE1
   682                           
   683                           	psect	cstackCOMRAM
   684  000001                     __pcstackCOMRAM:
   685                           	opt stack 0
   686  000001                     ?i2___lwdiv:
   687                           	opt stack 0
   688  000001                     i2putch@data:
   689                           	opt stack 0
   690  000001                     i2___lwdiv@dividend:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x0
   694  000001                     	ds	1
   695  000002                     i2putch@max:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1
   699  000002                     	ds	1
   700  000003                     i2___lwdiv@divisor:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x2
   704  000003                     	ds	2
   705  000005                     i2___lwdiv@quotient:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x4
   709  000005                     	ds	2
   710  000007                     i2___lwdiv@counter:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0x6
   714  000007                     	ds	1
   715  000008                     ?i2___lwmod:
   716                           	opt stack 0
   717  000008                     i2___lwmod@dividend:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x7
   721  000008                     	ds	2
   722  00000A                     i2___lwmod@divisor:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x9
   726  00000A                     	ds	2
   727  00000C                     i2___lwmod@counter:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0xB
   731  00000C                     	ds	1
   732  00000D                     ?i2_printf:
   733                           	opt stack 0
   734  00000D                     i2printf@f:
   735                           	opt stack 0
   736                           
   737                           ; 3 bytes @ 0xC
   738  00000D                     	ds	5
   739  000012                     ??i2_printf:
   740                           
   741                           ; 1 bytes @ 0x11
   742  000012                     	ds	1
   743  000013                     i2printf@idx:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x12
   747  000013                     	ds	1
   748  000014                     i2printf@ap:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x13
   752  000014                     	ds	2
   753  000016                     i2printf@prec:
   754                           	opt stack 0
   755                           
   756                           ; 1 bytes @ 0x15
   757  000016                     	ds	1
   758  000017                     i2printf@flag:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x16
   762  000017                     	ds	1
   763  000018                     i2printf@val:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x17
   767  000018                     	ds	2
   768  00001A                     i2printf@c:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x19
   772  00001A                     	ds	1
   773  00001B                     fillDataBuffer@data:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x1A
   777  00001B                     	ds	1
   778  00001C                     ??_HighISR:
   779                           
   780                           ; 1 bytes @ 0x1B
   781  00001C                     	ds	18
   782                           tblptru	equ	0xFF8
   783                           tblptrh	equ	0xFF7
   784                           tblptrl	equ	0xFF6
   785                           tablat	equ	0xFF5
   786                           postinc0	equ	0xFEE
   787                           wreg	equ	0xFE8
   788                           postdec1	equ	0xFE5
   789                           fsr1l	equ	0xFE1
   790                           
   791 ;;
   792 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   793 ;;
   794 ;; *************** function _main *****************
   795 ;; Defined at:
   796 ;;		line 62 in file "main.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;		None
   799 ;; Auto vars:     Size  Location     Type
   800 ;;		None
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   810 ;;      Params:         0       0       0       0       0       0       0       0       0
   811 ;;      Locals:         0       0       0       0       0       0       0       0       0
   812 ;;      Temps:          0       2       0       0       0       0       0       0       0
   813 ;;      Totals:         0       2       0       0       0       0       0       0       0
   814 ;;Total ram usage:        2 bytes
   815 ;; Hardware stack levels required when called:   10
   816 ;; This function calls:
   817 ;;		_C_DOOR_LockAll
   818 ;;		_C_DOOR_ReadSensors
   819 ;;		_C_DOOR_SendStates
   820 ;;		_C_DOOR_UnlockAll
   821 ;;		_D_PORT_Init
   822 ;;		_D_PWM_Init
   823 ;;		_D_PWM_SetPwm
   824 ;;		_D_TMR0_Init
   825 ;;		_D_TMR1_Enable
   826 ;;		_D_TMR1_Init
   827 ;;		_D_UART_Enable
   828 ;;		_D_UART_Init
   829 ;;		_D_UART_Read
   830 ;;		_D_UART_Write
   831 ;;		_D_UART_WriteInt
   832 ;;		_initDoors
   833 ;;		_setAlarm
   834 ;;		_strcmp
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841  00084A                     __ptext0:
   842                           	opt stack 0
   843  00084A                     _main:
   844                           	opt stack 21
   845                           
   846                           ;main.c: 63: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   847                           
   848                           ;incstack = 0
   849  00084A  0E05               	movlw	5
   850  00084C  0100               	movlb	0	; () banked
   851  00084E  6F9E               	movwf	(??_main+1)& (0+255),b
   852  000850  0E0F               	movlw	15
   853  000852  6F9D               	movwf	??_main& (0+255),b
   854  000854  0EF1               	movlw	241
   855  000856                     u2897:
   856  000856  2EE8               	decfsz	wreg,f,c
   857  000858  D7FE               	bra	u2897
   858  00085A  2F9D               	decfsz	??_main& (0+255),f,b
   859  00085C  D7FC               	bra	u2897
   860  00085E  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   861  000860  D7FA               	bra	u2897
   862                           
   863                           ;main.c: 65: D_PORT_Init();
   864  000862  EC6B  F00E         	call	_D_PORT_Init	;wreg free
   865                           
   866                           ;main.c: 69: D_UART_Init("P", 9600, 1);
   867  000866  0E3A               	movlw	low STR_11
   868  000868  0100               	movlb	0	; () banked
   869  00086A  6F82               	movwf	D_UART_Init@name& (0+255),b
   870  00086C  0E08               	movlw	high STR_11
   871  00086E  6F83               	movwf	(D_UART_Init@name+1)& (0+255),b
   872  000870  0E25               	movlw	37
   873  000872  6F85               	movwf	(D_UART_Init@baud+1)& (0+255),b
   874  000874  0E80               	movlw	128
   875  000876  6F84               	movwf	D_UART_Init@baud& (0+255),b
   876  000878  0E01               	movlw	1
   877  00087A  6F86               	movwf	D_UART_Init@interrupts& (0+255),b
   878  00087C  EC2D  F00C         	call	_D_UART_Init	;wreg free
   879                           
   880                           ;main.c: 70: D_UART_Enable(1);
   881  000880  0E01               	movlw	1
   882  000882  EC06  F00E         	call	_D_UART_Enable
   883                           
   884                           ;main.c: 73: D_TMR0_Init();
   885  000886  EC18  F00E         	call	_D_TMR0_Init	;wreg free
   886                           
   887                           ;main.c: 74: D_TMR1_Init();
   888  00088A  EC4C  F00E         	call	_D_TMR1_Init	;wreg free
   889                           
   890                           ;main.c: 77: D_PWM_Init();
   891  00088E  EC5C  F00E         	call	_D_PWM_Init	;wreg free
   892                           
   893                           ;main.c: 79: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   894  000892  0E05               	movlw	5
   895  000894  0100               	movlb	0	; () banked
   896  000896  6F9E               	movwf	(??_main+1)& (0+255),b
   897  000898  0E0F               	movlw	15
   898  00089A  6F9D               	movwf	??_main& (0+255),b
   899  00089C  0EF1               	movlw	241
   900  00089E                     u2907:
   901  00089E  2EE8               	decfsz	wreg,f,c
   902  0008A0  D7FE               	bra	u2907
   903  0008A2  2F9D               	decfsz	??_main& (0+255),f,b
   904  0008A4  D7FC               	bra	u2907
   905  0008A6  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   906  0008A8  D7FA               	bra	u2907
   907                           
   908                           ;main.c: 81: newAlarm = 0;
   909  0008AA  0E00               	movlw	0
   910  0008AC  6E35               	movwf	_newAlarm,c
   911                           
   912                           ;main.c: 82: oldAlarm = 0;
   913  0008AE  0E00               	movlw	0
   914  0008B0  6E34               	movwf	_oldAlarm,c
   915                           
   916                           ;main.c: 83: lock = 0;
   917  0008B2  0E00               	movlw	0
   918  0008B4  6E38               	movwf	_lock,c
   919                           
   920                           ;main.c: 84: tick = 0;
   921  0008B6  0E00               	movlw	0
   922  0008B8  6E39               	movwf	_tick,c
   923                           
   924                           ;main.c: 85: running = 0;
   925  0008BA  0E00               	movlw	0
   926  0008BC  6E37               	movwf	_running,c
   927                           
   928                           ;main.c: 87: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   929  0008BE  0E05               	movlw	5
   930  0008C0  0100               	movlb	0	; () banked
   931  0008C2  6F9E               	movwf	(??_main+1)& (0+255),b
   932  0008C4  0E0F               	movlw	15
   933  0008C6  6F9D               	movwf	??_main& (0+255),b
   934  0008C8  0EF1               	movlw	241
   935  0008CA                     u2917:
   936  0008CA  2EE8               	decfsz	wreg,f,c
   937  0008CC  D7FE               	bra	u2917
   938  0008CE  2F9D               	decfsz	??_main& (0+255),f,b
   939  0008D0  D7FC               	bra	u2917
   940  0008D2  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   941  0008D4  D7FA               	bra	u2917
   942                           
   943                           ;main.c: 91: PORTB = 0xFF;
   944                           
   945                           ;main.c: 90: } else {
   946                           
   947                           ;main.c: 89: PORTB = 0x00;
   948                           
   949                           ;main.c: 88: if (0) {
   950  0008D6  6881               	setf	3969,c	;volatile
   951  0008D8                     
   952                           ;main.c: 96: if (lock) {
   953                           
   954                           ;main.c: 92: }
   955                           ;main.c: 94: while(1) {
   956  0008D8  5038               	movf	_lock,w,c
   957  0008DA  B4D8               	btfsc	status,2,c
   958  0008DC  D009               	goto	l328
   959                           
   960                           ;main.c: 97: D_TMR1_Enable(0);
   961  0008DE  0E00               	movlw	0
   962  0008E0  EC7A  F00E         	call	_D_TMR1_Enable
   963                           
   964                           ;main.c: 98: lockDelayCnt = 0;
   965  0008E4  0E00               	movlw	0
   966  0008E6  6E3B               	movwf	_lockDelayCnt,c
   967                           
   968                           ;main.c: 99: C_DOOR_LockAll();
   969  0008E8  EC42  F00B         	call	_C_DOOR_LockAll	;wreg free
   970                           
   971                           ;main.c: 100: lock = 0;
   972  0008EC  0E00               	movlw	0
   973  0008EE  6E38               	movwf	_lock,c
   974  0008F0                     l328:
   975                           
   976                           ;main.c: 101: }
   977                           ;main.c: 104: if (readReady) {
   978  0008F0  503C               	movf	_readReady,w,c
   979  0008F2  B4D8               	btfsc	status,2,c
   980  0008F4  D0C3               	goto	l342
   981                           
   982                           ;main.c: 105: readReady = 0;
   983  0008F6  0E00               	movlw	0
   984  0008F8  6E3C               	movwf	_readReady,c
   985                           
   986                           ;main.c: 106: read = D_UART_Read();
   987  0008FA  ECC4  F00D         	call	_D_UART_Read	;wreg free
   988  0008FE  EE20  F02E         	lfsr	2,_read
   989  000902  0E05               	movlw	5
   990  000904                     u2721:
   991  000904  CFEB FFDB          	movff	plusw0,plusw2
   992  000908  06E8               	decf	wreg,f,c
   993  00090A  E2FC               	bc	u2721
   994                           
   995                           ;main.c: 107: PORTBbits.RB5 = !PORTBbits.RB5;
   996  00090C  BA81               	btfsc	3969,5,c	;volatile
   997  00090E  D004               	goto	u2730
   998  000910  0100               	movlb	0	; () banked
   999  000912  6B9D               	clrf	??_main& (0+255),b
  1000  000914  2B9D               	incf	??_main& (0+255),f,b
  1001  000916  D002               	goto	u2748
  1002  000918                     u2730:
  1003  000918  0100               	movlb	0	; () banked
  1004  00091A  6B9D               	clrf	??_main& (0+255),b
  1005  00091C                     u2748:
  1006  00091C  3B9D               	swapf	??_main& (0+255),f,b
  1007  00091E  479D               	rlncf	??_main& (0+255),f,b
  1008  000920  5081               	movf	3969,w,c	;volatile
  1009  000922  199D               	xorwf	??_main& (0+255),w,b
  1010  000924  0BDF               	andlw	-33
  1011  000926  199D               	xorwf	??_main& (0+255),w,b
  1012  000928  6E81               	movwf	3969,c	;volatile
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;main.c: 110: communicationCnt = 0;
  1016  00092A  0E00               	movlw	0
  1017  00092C  6E3A               	movwf	_communicationCnt,c
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 111: if (oldAlarm == 3) {
  1021  00092E  0E03               	movlw	3
  1022  000930  1834               	xorwf	_oldAlarm,w,c
  1023  000932  A4D8               	btfss	status,2,c
  1024  000934  D002               	goto	l330
  1025                           
  1026                           ; BSR set to: 0
  1027                           ;main.c: 112: newAlarm = 0;
  1028  000936  0E00               	movlw	0
  1029  000938  6E35               	movwf	_newAlarm,c
  1030  00093A                     l330:
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 113: }
  1034                           ;main.c: 116: if (strcmp(read.command, "L") == 0) {
  1035                           
  1036                           ; BSR set to: 0
  1037  00093A  C030  F075         	movff	_read+2,strcmp@s1
  1038  00093E  C031  F076         	movff	_read+3,strcmp@s1+1
  1039  000942  0E38               	movlw	low STR_12
  1040  000944  6F77               	movwf	strcmp@s2& (0+255),b
  1041  000946  0E08               	movlw	high STR_12
  1042  000948  6F78               	movwf	(strcmp@s2+1)& (0+255),b
  1043  00094A  EC5A  F00D         	call	_strcmp	;wreg free
  1044  00094E  0100               	movlb	0	; () banked
  1045  000950  5175               	movf	?_strcmp& (0+255),w,b
  1046  000952  1176               	iorwf	(?_strcmp+1)& (0+255),w,b
  1047  000954  A4D8               	btfss	status,2,c
  1048  000956  D006               	goto	l331
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;main.c: 117: lockDelayCnt = 0;
  1052  000958  0E00               	movlw	0
  1053  00095A  6E3B               	movwf	_lockDelayCnt,c
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 118: D_TMR1_Enable(1);
  1057  00095C  0E01               	movlw	1
  1058  00095E  EC7A  F00E         	call	_D_TMR1_Enable
  1059                           
  1060                           ;main.c: 121: } else if (strcmp(read.command, "U") == 0) {
  1061  000962  D08C               	goto	l342
  1062  000964                     l331:
  1063  000964  C030  F075         	movff	_read+2,strcmp@s1
  1064  000968  C031  F076         	movff	_read+3,strcmp@s1+1
  1065  00096C  0E40               	movlw	low STR_13
  1066  00096E  0100               	movlb	0	; () banked
  1067  000970  6F77               	movwf	strcmp@s2& (0+255),b
  1068  000972  0E08               	movlw	high STR_13
  1069  000974  6F78               	movwf	(strcmp@s2+1)& (0+255),b
  1070  000976  EC5A  F00D         	call	_strcmp	;wreg free
  1071  00097A  0100               	movlb	0	; () banked
  1072  00097C  5175               	movf	?_strcmp& (0+255),w,b
  1073  00097E  1176               	iorwf	(?_strcmp+1)& (0+255),w,b
  1074  000980  A4D8               	btfss	status,2,c
  1075  000982  D008               	goto	l333
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;main.c: 122: lockDelayCnt = 0;
  1079  000984  0E00               	movlw	0
  1080  000986  6E3B               	movwf	_lockDelayCnt,c
  1081                           
  1082                           ; BSR set to: 0
  1083                           ;main.c: 123: D_TMR1_Enable(0);
  1084  000988  0E00               	movlw	0
  1085  00098A  EC7A  F00E         	call	_D_TMR1_Enable
  1086                           
  1087                           ;main.c: 124: C_DOOR_UnlockAll();
  1088  00098E  ECE8  F00A         	call	_C_DOOR_UnlockAll	;wreg free
  1089                           
  1090                           ;main.c: 127: } else if (strcmp(read.command, "I") == 0) {
  1091  000992  D074               	goto	l342
  1092  000994                     l333:
  1093  000994  C030  F075         	movff	_read+2,strcmp@s1
  1094  000998  C031  F076         	movff	_read+3,strcmp@s1+1
  1095  00099C  0E36               	movlw	low STR_14
  1096  00099E  0100               	movlb	0	; () banked
  1097  0009A0  6F77               	movwf	strcmp@s2& (0+255),b
  1098  0009A2  0E08               	movlw	high STR_14
  1099  0009A4  6F78               	movwf	(strcmp@s2+1)& (0+255),b
  1100  0009A6  EC5A  F00D         	call	_strcmp	;wreg free
  1101  0009AA  0100               	movlb	0	; () banked
  1102  0009AC  5175               	movf	?_strcmp& (0+255),w,b
  1103  0009AE  1176               	iorwf	(?_strcmp+1)& (0+255),w,b
  1104  0009B0  A4D8               	btfss	status,2,c
  1105  0009B2  D00B               	goto	l335
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;main.c: 128: initDoors((uint8_t)(*read.message - 0x30));
  1109  0009B4  C032  FFD9         	movff	_read+4,fsr2l
  1110  0009B8  C033  FFDA         	movff	_read+5,fsr2h
  1111  0009BC  50DF               	movf	indf2,w,c
  1112  0009BE  0FD0               	addlw	208
  1113  0009C0  EC2A  F00E         	call	_initDoors
  1114                           
  1115                           ;main.c: 129: running = 1;
  1116  0009C4  0E01               	movlw	1
  1117  0009C6  6E37               	movwf	_running,c
  1118                           
  1119                           ;main.c: 132: } else if (strcmp(read.command, "R") == 0) {
  1120  0009C8  D059               	goto	l342
  1121  0009CA                     l335:
  1122  0009CA  C030  F075         	movff	_read+2,strcmp@s1
  1123  0009CE  C031  F076         	movff	_read+3,strcmp@s1+1
  1124  0009D2  0E3C               	movlw	low STR_15
  1125  0009D4  0100               	movlb	0	; () banked
  1126  0009D6  6F77               	movwf	strcmp@s2& (0+255),b
  1127  0009D8  0E08               	movlw	high STR_15
  1128  0009DA  6F78               	movwf	(strcmp@s2+1)& (0+255),b
  1129  0009DC  EC5A  F00D         	call	_strcmp	;wreg free
  1130  0009E0  0100               	movlb	0	; () banked
  1131  0009E2  5175               	movf	?_strcmp& (0+255),w,b
  1132  0009E4  1176               	iorwf	(?_strcmp+1)& (0+255),w,b
  1133  0009E6  A4D8               	btfss	status,2,c
  1134  0009E8  D00B               	goto	l337
  1135                           
  1136                           ; BSR set to: 0
  1137                           ;main.c: 133: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1138  0009EA  0E68               	movlw	104
  1139  0009EC  0100               	movlb	0	; () banked
  1140  0009EE  6F9D               	movwf	??_main& (0+255),b
  1141  0009F0  0EE4               	movlw	228
  1142  0009F2                     u2927:
  1143  0009F2  2EE8               	decfsz	wreg,f,c
  1144  0009F4  D7FE               	bra	u2927
  1145  0009F6  2F9D               	decfsz	??_main& (0+255),f,b
  1146  0009F8  D7FC               	bra	u2927
  1147  0009FA  F000               	nop	
  1148  0009FC  00FF               	reset		;# 
  1149                           
  1150                           ;main.c: 137: } else if (strcmp(read.command, "P") == 0) {
  1151  0009FE  D03E               	goto	l342
  1152  000A00                     l337:
  1153  000A00  C030  F075         	movff	_read+2,strcmp@s1
  1154  000A04  C031  F076         	movff	_read+3,strcmp@s1+1
  1155  000A08  0E3A               	movlw	low STR_11
  1156  000A0A  0100               	movlb	0	; () banked
  1157  000A0C  6F77               	movwf	strcmp@s2& (0+255),b
  1158  000A0E  0E08               	movlw	high STR_11
  1159  000A10  6F78               	movwf	(strcmp@s2+1)& (0+255),b
  1160  000A12  EC5A  F00D         	call	_strcmp	;wreg free
  1161  000A16  0100               	movlb	0	; () banked
  1162  000A18  5175               	movf	?_strcmp& (0+255),w,b
  1163  000A1A  1176               	iorwf	(?_strcmp+1)& (0+255),w,b
  1164  000A1C  A4D8               	btfss	status,2,c
  1165  000A1E  D00A               	goto	l339
  1166                           
  1167                           ; BSR set to: 0
  1168                           ;main.c: 138: D_UART_WriteInt("S", running);
  1169  000A20  0E3E               	movlw	low STR_17
  1170  000A22  6F8F               	movwf	D_UART_WriteInt@command& (0+255),b
  1171  000A24  0E08               	movlw	high STR_17
  1172  000A26  6F90               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  1173  000A28  C037  F091         	movff	_running,D_UART_WriteInt@d
  1174  000A2C  6B92               	clrf	(D_UART_WriteInt@d+1)& (0+255),b
  1175  000A2E  EC23  F00A         	call	_D_UART_WriteInt	;wreg free
  1176                           
  1177                           ;main.c: 141: } else if (strcmp(read.command, "A") == 0) {
  1178  000A32  D024               	goto	l342
  1179  000A34                     l339:
  1180  000A34  C030  F075         	movff	_read+2,strcmp@s1
  1181  000A38  C031  F076         	movff	_read+3,strcmp@s1+1
  1182  000A3C  0E32               	movlw	low STR_18
  1183  000A3E  0100               	movlb	0	; () banked
  1184  000A40  6F77               	movwf	strcmp@s2& (0+255),b
  1185  000A42  0E08               	movlw	high STR_18
  1186  000A44  6F78               	movwf	(strcmp@s2+1)& (0+255),b
  1187  000A46  EC5A  F00D         	call	_strcmp	;wreg free
  1188  000A4A  0100               	movlb	0	; () banked
  1189  000A4C  5175               	movf	?_strcmp& (0+255),w,b
  1190  000A4E  1176               	iorwf	(?_strcmp+1)& (0+255),w,b
  1191  000A50  A4D8               	btfss	status,2,c
  1192  000A52  D009               	goto	l341
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;main.c: 142: setAlarm((uint8_t)(*read.message - 0x30));
  1196  000A54  C032  FFD9         	movff	_read+4,fsr2l
  1197  000A58  C033  FFDA         	movff	_read+5,fsr2h
  1198  000A5C  50DF               	movf	indf2,w,c
  1199  000A5E  0FD0               	addlw	208
  1200  000A60  EC8E  F00E         	call	_setAlarm
  1201                           
  1202                           ;main.c: 144: } else {
  1203  000A64  D00B               	goto	l342
  1204  000A66                     l341:
  1205                           
  1206                           ;main.c: 145: D_UART_Write("E", "U");
  1207  000A66  0E34               	movlw	low STR_19
  1208  000A68  0100               	movlb	0	; () banked
  1209  000A6A  6F8F               	movwf	D_UART_Write@command& (0+255),b
  1210  000A6C  0E08               	movlw	high STR_19
  1211  000A6E  6F90               	movwf	(D_UART_Write@command+1)& (0+255),b
  1212  000A70  0E40               	movlw	low STR_13
  1213  000A72  6F91               	movwf	D_UART_Write@data& (0+255),b
  1214  000A74  0E08               	movlw	high STR_13
  1215  000A76  6F92               	movwf	(D_UART_Write@data+1)& (0+255),b
  1216  000A78  ECB3  F009         	call	_D_UART_Write	;wreg free
  1217  000A7C                     l342:
  1218                           
  1219                           ;main.c: 147: }
  1220                           ;main.c: 148: }
  1221                           ;main.c: 151: if (tick) {
  1222  000A7C  5039               	movf	_tick,w,c
  1223  000A7E  B4D8               	btfsc	status,2,c
  1224  000A80  D72B               	goto	l326
  1225                           
  1226                           ;main.c: 152: tick = 0;
  1227  000A82  0E00               	movlw	0
  1228  000A84  6E39               	movwf	_tick,c
  1229                           
  1230                           ;main.c: 155: C_DOOR_ReadSensors();
  1231  000A86  EC9B  F00B         	call	_C_DOOR_ReadSensors	;wreg free
  1232                           
  1233                           ;main.c: 158: C_DOOR_SendStates();
  1234  000A8A  EC3C  F009         	call	_C_DOOR_SendStates	;wreg free
  1235                           
  1236                           ;main.c: 161: if (communicationCnt < 60) {
  1237  000A8E  0E3C               	movlw	60
  1238  000A90  603A               	cpfslt	_communicationCnt,c
  1239  000A92  D002               	goto	l344
  1240                           
  1241                           ;main.c: 162: communicationCnt++;
  1242  000A94  2A3A               	incf	_communicationCnt,f,c
  1243                           
  1244                           ;main.c: 163: } else {
  1245  000A96  D005               	goto	l346
  1246  000A98                     l344:
  1247                           
  1248                           ;main.c: 164: if (oldAlarm == 0) {
  1249  000A98  5034               	movf	_oldAlarm,w,c
  1250  000A9A  A4D8               	btfss	status,2,c
  1251  000A9C  D002               	goto	l346
  1252                           
  1253                           ;main.c: 165: newAlarm = 3;
  1254  000A9E  0E03               	movlw	3
  1255  000AA0  6E35               	movwf	_newAlarm,c
  1256  000AA2                     l346:
  1257                           
  1258                           ;main.c: 166: }
  1259                           ;main.c: 167: }
  1260                           ;main.c: 170: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1261  000AA2  5034               	movf	_oldAlarm,w,c
  1262  000AA4  1835               	xorwf	_newAlarm,w,c
  1263  000AA6  A4D8               	btfss	status,2,c
  1264  000AA8  D017               	goto	l350
  1265  000AAA  0435               	decf	_newAlarm,w,c
  1266  000AAC  B4D8               	btfsc	status,2,c
  1267  000AAE  D014               	goto	l350
  1268  000AB0  0E03               	movlw	3
  1269  000AB2  1835               	xorwf	_newAlarm,w,c
  1270  000AB4  B4D8               	btfsc	status,2,c
  1271  000AB6  D010               	goto	l350
  1272  000AB8  D70F               	goto	l326
  1273  000ABA                     
  1274                           ;main.c: 174: pwm = 0x00;
  1275                           
  1276                           ;main.c: 173: case 0:
  1277  000ABA  0E00               	movlw	0
  1278  000ABC  D00B               	goto	L1
  1279  000ABE                     
  1280                           ;main.c: 178: case 1:
  1281                           ;main.c: 179: if (pwm == 0) {
  1282  000ABE  5036               	movf	_pwm,w,c
  1283  000AC0  A4D8               	btfss	status,2,c
  1284  000AC2  D002               	goto	l356
  1285                           
  1286                           ;main.c: 180: pwm = 1;
  1287  000AC4  0E01               	movlw	1
  1288  000AC6  6E36               	movwf	_pwm,c
  1289  000AC8                     l356:
  1290                           
  1291                           ;main.c: 181: }
  1292                           ;main.c: 182: pwm = (uint8_t)(pwm * 0x02);
  1293  000AC8  5036               	movf	_pwm,w,c
  1294  000ACA  0D02               	mullw	2
  1295  000ACC  CFF3 F036          	movff	prodl,_pwm
  1296                           
  1297                           ;main.c: 183: break;
  1298  000AD0  D011               	goto	l353
  1299  000AD2                     
  1300                           ;main.c: 186: pwm = 0x7F;
  1301  000AD2  0E7F               	movlw	127
  1302  000AD4                     L1:
  1303  000AD4  6E36               	movwf	_pwm,c
  1304                           
  1305                           ;main.c: 188: }
  1306                           
  1307                           ;main.c: 187: break;
  1308  000AD6  D00E               	goto	l353
  1309  000AD8                     l350:
  1310  000AD8  5035               	movf	_newAlarm,w,c
  1311                           
  1312                           ; Switch size 1, requested type "space"
  1313                           ; Number of cases is 4, Range of values is 0 to 3
  1314                           ; switch strategies available:
  1315                           ; Name         Instructions Cycles
  1316                           ; simple_byte           13     7 (average)
  1317                           ;	Chosen strategy is simple_byte
  1318  000ADA  0A00               	xorlw	0	; case 0
  1319  000ADC  B4D8               	btfsc	status,2,c
  1320  000ADE  D7ED               	goto	l351
  1321  000AE0  0A01               	xorlw	1	; case 1
  1322  000AE2  B4D8               	btfsc	status,2,c
  1323  000AE4  D7EC               	goto	l354
  1324  000AE6  0A03               	xorlw	3	; case 2
  1325  000AE8  B4D8               	btfsc	status,2,c
  1326  000AEA  D7F3               	goto	l357
  1327  000AEC  0A01               	xorlw	1	; case 3
  1328  000AEE  B4D8               	btfsc	status,2,c
  1329  000AF0  D7E6               	goto	l354
  1330  000AF2  D7E3               	goto	l351
  1331  000AF4                     l353:
  1332                           
  1333                           ;main.c: 189: D_PWM_SetPwm(pwm);
  1334  000AF4  5036               	movf	_pwm,w,c
  1335  000AF6  ECDB  F00D         	call	_D_PWM_SetPwm
  1336                           
  1337                           ;main.c: 190: oldAlarm = newAlarm;
  1338  000AFA  C035  F034         	movff	_newAlarm,_oldAlarm
  1339  000AFE  D6EC               	goto	l326
  1340  000B00                     __end_of_main:
  1341                           	opt stack 0
  1342                           tblptru	equ	0xFF8
  1343                           tblptrh	equ	0xFF7
  1344                           tblptrl	equ	0xFF6
  1345                           tablat	equ	0xFF5
  1346                           prodl	equ	0xFF3
  1347                           postinc0	equ	0xFEE
  1348                           plusw0	equ	0xFEB
  1349                           wreg	equ	0xFE8
  1350                           postdec1	equ	0xFE5
  1351                           fsr1l	equ	0xFE1
  1352                           indf2	equ	0xFDF
  1353                           plusw2	equ	0xFDB
  1354                           fsr2h	equ	0xFDA
  1355                           fsr2l	equ	0xFD9
  1356                           status	equ	0xFD8
  1357                           
  1358 ;; *************** function _strcmp *****************
  1359 ;; Defined at:
  1360 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  s1              2   21[BANK0 ] PTR const unsigned char 
  1363 ;;		 -> readBuffer(166), 
  1364 ;;  s2              2   23[BANK0 ] PTR const unsigned char 
  1365 ;;		 -> STR_18(2), STR_16(2), STR_15(2), STR_14(2), 
  1366 ;;		 -> STR_13(2), STR_12(2), 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  r               1   26[BANK0 ] char 
  1369 ;; Return value:  Size  Location     Type
  1370 ;;                  2   21[BANK0 ] int 
  1371 ;; Registers used:
  1372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1373 ;; Tracked objects:
  1374 ;;		On entry : 0/0
  1375 ;;		On exit  : 0/0
  1376 ;;		Unchanged: 0/0
  1377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1378 ;;      Params:         0       4       0       0       0       0       0       0       0
  1379 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1380 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1381 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1382 ;;Total ram usage:        6 bytes
  1383 ;; Hardware stack levels used:    1
  1384 ;; Hardware stack levels required when called:    6
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		_main
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text1
  1393  001AB4                     __ptext1:
  1394                           	opt stack 0
  1395  001AB4                     _strcmp:
  1396                           	opt stack 24
  1397                           
  1398                           ;incstack = 0
  1399  001AB4  D005               	goto	l963
  1400  001AB6  0100               	movlb	0	; () banked
  1401  001AB8  4B75               	infsnz	strcmp@s1& (0+255),f,b
  1402  001ABA  2B76               	incf	(strcmp@s1+1)& (0+255),f,b
  1403  001ABC  4B77               	infsnz	strcmp@s2& (0+255),f,b
  1404  001ABE  2B78               	incf	(strcmp@s2+1)& (0+255),f,b
  1405  001AC0                     l963:
  1406                           
  1407                           ; BSR set to: 0
  1408  001AC0  C075  FFD9         	movff	strcmp@s1,fsr2l
  1409  001AC4  C076  FFDA         	movff	strcmp@s1+1,fsr2h
  1410  001AC8  50DF               	movf	indf2,w,c
  1411  001ACA  0100               	movlb	0	; () banked
  1412  001ACC  6F79               	movwf	??_strcmp& (0+255),b
  1413  001ACE  C077  FFF6         	movff	strcmp@s2,tblptrl
  1414  001AD2  C078  FFF7         	movff	strcmp@s2+1,tblptrh
  1415  001AD6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1416  001AD6  6AF8               	clrf	tblptru,c
  1417  001AD8                     	endif
  1418  001AD8                     	if	0	;tblptru may be non-zero
  1419  001AD8                     	endif
  1420  001AD8  0008               	tblrd		*
  1421  001ADA  50F5               	movf	tablat,w,c
  1422  001ADC  0800               	sublw	0
  1423  001ADE  2579               	addwf	??_strcmp& (0+255),w,b
  1424  001AE0  6F7A               	movwf	strcmp@r& (0+255),b
  1425  001AE2  517A               	movf	strcmp@r& (0+255),w,b
  1426  001AE4  A4D8               	btfss	status,2,c
  1427  001AE6  D007               	goto	u2690
  1428                           
  1429                           ; BSR set to: 0
  1430  001AE8  C075  FFD9         	movff	strcmp@s1,fsr2l
  1431  001AEC  C076  FFDA         	movff	strcmp@s1+1,fsr2h
  1432  001AF0  50DF               	movf	indf2,w,c
  1433  001AF2  A4D8               	btfss	status,2,c
  1434  001AF4  D7E0               	goto	l964
  1435  001AF6                     u2690:
  1436                           
  1437                           ; BSR set to: 0
  1438                           
  1439                           ; BSR set to: 0
  1440                           
  1441                           ; BSR set to: 0
  1442  001AF6  517A               	movf	strcmp@r& (0+255),w,b
  1443  001AF8  6F75               	movwf	?_strcmp& (0+255),b
  1444  001AFA  6B76               	clrf	(?_strcmp+1)& (0+255),b
  1445  001AFC  BF75               	btfsc	?_strcmp& (0+255),7,b
  1446  001AFE  0776               	decf	(?_strcmp+1)& (0+255),f,b
  1447  001B00  0012               	return	
  1448  001B02                     __end_of_strcmp:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           tblptrh	equ	0xFF7
  1452                           tblptrl	equ	0xFF6
  1453                           tablat	equ	0xFF5
  1454                           prodl	equ	0xFF3
  1455                           postinc0	equ	0xFEE
  1456                           plusw0	equ	0xFEB
  1457                           wreg	equ	0xFE8
  1458                           postdec1	equ	0xFE5
  1459                           fsr1l	equ	0xFE1
  1460                           indf2	equ	0xFDF
  1461                           plusw2	equ	0xFDB
  1462                           fsr2h	equ	0xFDA
  1463                           fsr2l	equ	0xFD9
  1464                           status	equ	0xFD8
  1465                           
  1466 ;; *************** function _setAlarm *****************
  1467 ;; Defined at:
  1468 ;;		line 58 in file "main.c"
  1469 ;; Parameters:    Size  Location     Type
  1470 ;;  alarm           1    wreg     unsigned char 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  alarm           1   21[BANK0 ] unsigned char 
  1473 ;; Return value:  Size  Location     Type
  1474 ;;                  1    wreg      void 
  1475 ;; Registers used:
  1476 ;;		wreg
  1477 ;; Tracked objects:
  1478 ;;		On entry : 0/0
  1479 ;;		On exit  : 0/0
  1480 ;;		Unchanged: 0/0
  1481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1482 ;;      Params:         0       0       0       0       0       0       0       0       0
  1483 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1484 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1485 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1486 ;;Total ram usage:        1 bytes
  1487 ;; Hardware stack levels used:    1
  1488 ;; Hardware stack levels required when called:    6
  1489 ;; This function calls:
  1490 ;;		Nothing
  1491 ;; This function is called by:
  1492 ;;		_main
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           	psect	text2
  1497  001D1C                     __ptext2:
  1498                           	opt stack 0
  1499  001D1C                     _setAlarm:
  1500                           	opt stack 24
  1501                           
  1502                           ; BSR set to: 0
  1503                           ;incstack = 0
  1504                           ;setAlarm@alarm stored from wreg
  1505  001D1C  0100               	movlb	0	; () banked
  1506  001D1E  6F75               	movwf	setAlarm@alarm& (0+255),b
  1507                           
  1508                           ;main.c: 59: newAlarm = alarm;
  1509  001D20  C075  F035         	movff	setAlarm@alarm,_newAlarm
  1510  001D24  0012               	return		;funcret
  1511  001D26                     __end_of_setAlarm:
  1512                           	opt stack 0
  1513                           tblptru	equ	0xFF8
  1514                           tblptrh	equ	0xFF7
  1515                           tblptrl	equ	0xFF6
  1516                           tablat	equ	0xFF5
  1517                           prodl	equ	0xFF3
  1518                           postinc0	equ	0xFEE
  1519                           plusw0	equ	0xFEB
  1520                           wreg	equ	0xFE8
  1521                           postdec1	equ	0xFE5
  1522                           fsr1l	equ	0xFE1
  1523                           indf2	equ	0xFDF
  1524                           plusw2	equ	0xFDB
  1525                           fsr2h	equ	0xFDA
  1526                           fsr2l	equ	0xFD9
  1527                           status	equ	0xFD8
  1528                           
  1529 ;; *************** function _initDoors *****************
  1530 ;; Defined at:
  1531 ;;		line 46 in file "main.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  door_cnt        1    wreg     unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  door_cnt        1   30[BANK0 ] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        1 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    7
  1552 ;; This function calls:
  1553 ;;		_C_DOOR_Init
  1554 ;;		_C_DOOR_LockAll
  1555 ;;		_D_TMR0_Enable
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text3
  1562  001C54                     __ptext3:
  1563                           	opt stack 0
  1564  001C54                     _initDoors:
  1565                           	opt stack 23
  1566                           
  1567                           ;incstack = 0
  1568                           ;initDoors@door_cnt stored from wreg
  1569  001C54  0100               	movlb	0	; () banked
  1570  001C56  6F7E               	movwf	initDoors@door_cnt& (0+255),b
  1571                           
  1572                           ;main.c: 47: if (door_cnt < 1) {
  1573  001C58  0100               	movlb	0	; () banked
  1574  001C5A  517E               	movf	initDoors@door_cnt& (0+255),w,b
  1575  001C5C  A4D8               	btfss	status,2,c
  1576  001C5E  D002               	goto	l316
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;main.c: 48: door_cnt = 1;
  1580  001C60  0E01               	movlw	1
  1581  001C62  6F7E               	movwf	initDoors@door_cnt& (0+255),b
  1582  001C64                     l316:
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;main.c: 49: }
  1586                           ;main.c: 51: C_DOOR_Init(door_cnt);
  1587                           
  1588                           ; BSR set to: 0
  1589  001C64  517E               	movf	initDoors@door_cnt& (0+255),w,b
  1590  001C66  EC93  F008         	call	_C_DOOR_Init
  1591                           
  1592                           ;main.c: 52: C_DOOR_LockAll();
  1593  001C6A  EC42  F00B         	call	_C_DOOR_LockAll	;wreg free
  1594                           
  1595                           ;main.c: 55: D_TMR0_Enable(1);
  1596  001C6E  0E01               	movlw	1
  1597  001C70  EC84  F00E         	call	_D_TMR0_Enable
  1598  001C74  0012               	return		;funcret
  1599  001C76                     __end_of_initDoors:
  1600                           	opt stack 0
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           prodl	equ	0xFF3
  1606                           postinc0	equ	0xFEE
  1607                           plusw0	equ	0xFEB
  1608                           wreg	equ	0xFE8
  1609                           postdec1	equ	0xFE5
  1610                           fsr1l	equ	0xFE1
  1611                           indf2	equ	0xFDF
  1612                           plusw2	equ	0xFDB
  1613                           fsr2h	equ	0xFDA
  1614                           fsr2l	equ	0xFD9
  1615                           status	equ	0xFD8
  1616                           
  1617 ;; *************** function _C_DOOR_LockAll *****************
  1618 ;; Defined at:
  1619 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;		None
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  d               1   29[BANK0 ] unsigned char 
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  1    wreg      void 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1633 ;;      Params:         0       0       0       0       0       0       0       0       0
  1634 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1635 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1636 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1637 ;;Total ram usage:        9 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; Hardware stack levels required when called:    6
  1640 ;; This function calls:
  1641 ;;		Nothing
  1642 ;; This function is called by:
  1643 ;;		_initDoors
  1644 ;;		_main
  1645 ;; This function uses a non-reentrant model
  1646 ;;
  1647                           
  1648                           	psect	text4
  1649  001684                     __ptext4:
  1650                           	opt stack 0
  1651  001684                     _C_DOOR_LockAll:
  1652                           	opt stack 23
  1653                           
  1654                           ;DOOR_Controller.c: 80: uint8_t d;
  1655                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1656                           
  1657                           ;incstack = 0
  1658  001684  0E00               	movlw	0
  1659  001686  0100               	movlb	0	; () banked
  1660  001688  6F7D               	movwf	C_DOOR_LockAll@d& (0+255),b
  1661  00168A  D047               	goto	l30
  1662  00168C                     
  1663                           ; BSR set to: 0
  1664                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1665                           
  1666                           ; BSR set to: 0
  1667  00168C  517D               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1668  00168E  0D0A               	mullw	10
  1669  001690  0E02               	movlw	2
  1670  001692  26F3               	addwf	prodl,f,c
  1671  001694  0E00               	movlw	0
  1672  001696  22F4               	addwfc	prodh,f,c
  1673  001698  0E00               	movlw	low _doors
  1674  00169A  24F3               	addwf	prodl,w,c
  1675  00169C  6ED9               	movwf	fsr2l,c
  1676  00169E  0E02               	movlw	high _doors
  1677  0016A0  20F4               	addwfc	prodh,w,c
  1678  0016A2  6EDA               	movwf	fsr2h,c
  1679  0016A4  CFDE F075          	movff	postinc2,??_C_DOOR_LockAll
  1680  0016A8  CFDD F076          	movff	postdec2,??_C_DOOR_LockAll+1
  1681  0016AC  C075  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1682  0016B0  C076  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1683  0016B4  50DF               	movf	indf2,w,c
  1684  0016B6  6F77               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1685  0016B8  517D               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1686  0016BA  0D0A               	mullw	10
  1687  0016BC  0E04               	movlw	4
  1688  0016BE  26F3               	addwf	prodl,f,c
  1689  0016C0  0E00               	movlw	0
  1690  0016C2  22F4               	addwfc	prodh,f,c
  1691  0016C4  0E00               	movlw	low _doors
  1692  0016C6  24F3               	addwf	prodl,w,c
  1693  0016C8  6ED9               	movwf	fsr2l,c
  1694  0016CA  0E02               	movlw	high _doors
  1695  0016CC  20F4               	addwfc	prodh,w,c
  1696  0016CE  6EDA               	movwf	fsr2h,c
  1697  0016D0  50DF               	movf	indf2,w,c
  1698  0016D2  6F78               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1699  0016D4  0E01               	movlw	1
  1700  0016D6  6F79               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1701  0016D8  2B78               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1702  0016DA  D002               	goto	u2434
  1703  0016DC                     u2435:
  1704  0016DC  90D8               	bcf	status,0,c
  1705  0016DE  3779               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1706  0016E0                     u2434:
  1707  0016E0  2F78               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1708  0016E2  D7FC               	goto	u2435
  1709  0016E4  0100               	movlb	0	; () banked
  1710  0016E6  5179               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1711  0016E8  1577               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1712  0016EA  6F7A               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1713  0016EC  517D               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1714  0016EE  0D0A               	mullw	10
  1715  0016F0  0E02               	movlw	2
  1716  0016F2  26F3               	addwf	prodl,f,c
  1717  0016F4  0E00               	movlw	0
  1718  0016F6  22F4               	addwfc	prodh,f,c
  1719  0016F8  0E00               	movlw	low _doors
  1720  0016FA  24F3               	addwf	prodl,w,c
  1721  0016FC  6ED9               	movwf	fsr2l,c
  1722  0016FE  0E02               	movlw	high _doors
  1723  001700  20F4               	addwfc	prodh,w,c
  1724  001702  6EDA               	movwf	fsr2h,c
  1725  001704  CFDE F07B          	movff	postinc2,??_C_DOOR_LockAll+6
  1726  001708  CFDD F07C          	movff	postdec2,??_C_DOOR_LockAll+7
  1727  00170C  C07B  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1728  001710  C07C  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1729  001714  517A               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1730  001716  1ADF               	xorwf	indf2,f,c
  1731                           
  1732                           ; BSR set to: 0
  1733  001718  2B7D               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1734  00171A                     l30:
  1735                           
  1736                           ; BSR set to: 0
  1737                           
  1738                           ; BSR set to: 0
  1739  00171A  517D               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1740  00171C  6F75               	movwf	??_C_DOOR_LockAll& (0+255),b
  1741  00171E  6B76               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1742  001720  51A8               	movf	_door_cnt& (0+255),w,b
  1743  001722  5D75               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1744  001724  5176               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1745  001726  0A80               	xorlw	128
  1746  001728  6F77               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1747  00172A  51A9               	movf	(_door_cnt+1)& (0+255),w,b
  1748  00172C  0A80               	xorlw	128
  1749  00172E  5977               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1750  001730  B0D8               	btfsc	status,0,c
  1751  001732  0012               	return	
  1752  001734  D7AB               	goto	l31
  1753  001736                     __end_of_C_DOOR_LockAll:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           prodh	equ	0xFF4
  1760                           prodl	equ	0xFF3
  1761                           postinc0	equ	0xFEE
  1762                           plusw0	equ	0xFEB
  1763                           wreg	equ	0xFE8
  1764                           postdec1	equ	0xFE5
  1765                           fsr1l	equ	0xFE1
  1766                           indf2	equ	0xFDF
  1767                           postinc2	equ	0xFDE
  1768                           postdec2	equ	0xFDD
  1769                           plusw2	equ	0xFDB
  1770                           fsr2h	equ	0xFDA
  1771                           fsr2l	equ	0xFD9
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _C_DOOR_Init *****************
  1775 ;; Defined at:
  1776 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  cnt             1    wreg     unsigned char 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;  cnt             1   24[BANK0 ] unsigned char 
  1781 ;;  d               1   25[BANK0 ] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0
  1792 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1793 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1794 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1795 ;;Total ram usage:        5 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    6
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_initDoors
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text5
  1806  001126                     __ptext5:
  1807                           	opt stack 0
  1808  001126                     _C_DOOR_Init:
  1809                           	opt stack 23
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;incstack = 0
  1813                           ;C_DOOR_Init@cnt stored from wreg
  1814  001126  0100               	movlb	0	; () banked
  1815  001128  6F78               	movwf	C_DOOR_Init@cnt& (0+255),b
  1816                           
  1817                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1818  00112A  C078  F0A8         	movff	C_DOOR_Init@cnt,_door_cnt
  1819  00112E  0100               	movlb	0	; () banked
  1820  001130  6BA9               	clrf	(_door_cnt+1)& (0+255),b
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;DOOR_Controller.c: 52: uint8_t d;
  1824                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1825  001132  0E00               	movlw	0
  1826  001134  6F79               	movwf	C_DOOR_Init@d& (0+255),b
  1827  001136  D092               	goto	l24
  1828  001138                     
  1829                           ; BSR set to: 0
  1830                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1831                           
  1832                           ; BSR set to: 0
  1833  001138  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1834  00113A  0D0A               	mullw	10
  1835  00113C  0E00               	movlw	low _doors
  1836  00113E  24F3               	addwf	prodl,w,c
  1837  001140  6ED9               	movwf	fsr2l,c
  1838  001142  0E02               	movlw	high _doors
  1839  001144  20F4               	addwfc	prodh,w,c
  1840  001146  6EDA               	movwf	fsr2h,c
  1841  001148  C079  FFDF         	movff	C_DOOR_Init@d,indf2
  1842                           
  1843                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1844  00114C  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1845  00114E  0D0A               	mullw	10
  1846  001150  0E01               	movlw	1
  1847  001152  26F3               	addwf	prodl,f,c
  1848  001154  0E00               	movlw	0
  1849  001156  22F4               	addwfc	prodh,f,c
  1850  001158  0E00               	movlw	low _doors
  1851  00115A  24F3               	addwf	prodl,w,c
  1852  00115C  6ED9               	movwf	fsr2l,c
  1853  00115E  0E02               	movlw	high _doors
  1854  001160  20F4               	addwfc	prodh,w,c
  1855  001162  6EDA               	movwf	fsr2h,c
  1856  001164  0E01               	movlw	1
  1857  001166  6EDF               	movwf	indf2,c
  1858                           
  1859                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1860  001168  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1861  00116A  0D0A               	mullw	10
  1862  00116C  0E02               	movlw	2
  1863  00116E  26F3               	addwf	prodl,f,c
  1864  001170  0E00               	movlw	0
  1865  001172  22F4               	addwfc	prodh,f,c
  1866  001174  0E00               	movlw	low _doors
  1867  001176  24F3               	addwf	prodl,w,c
  1868  001178  6ED9               	movwf	fsr2l,c
  1869  00117A  0E02               	movlw	high _doors
  1870  00117C  20F4               	addwfc	prodh,w,c
  1871  00117E  6EDA               	movwf	fsr2h,c
  1872  001180  0E81               	movlw	129
  1873  001182  6EDE               	movwf	postinc2,c
  1874  001184  0E0F               	movlw	15
  1875  001186  6EDD               	movwf	postdec2,c
  1876                           
  1877                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1878  001188  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1879  00118A  0D0A               	mullw	10
  1880  00118C  0E04               	movlw	4
  1881  00118E  26F3               	addwf	prodl,f,c
  1882  001190  0E00               	movlw	0
  1883  001192  22F4               	addwfc	prodh,f,c
  1884  001194  0E00               	movlw	low _doors
  1885  001196  24F3               	addwf	prodl,w,c
  1886  001198  6ED9               	movwf	fsr2l,c
  1887  00119A  0E02               	movlw	high _doors
  1888  00119C  20F4               	addwfc	prodh,w,c
  1889  00119E  6EDA               	movwf	fsr2h,c
  1890  0011A0  C079  FFDF         	movff	C_DOOR_Init@d,indf2
  1891                           
  1892                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1893  0011A4  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1894  0011A6  0D0A               	mullw	10
  1895  0011A8  0E06               	movlw	6
  1896  0011AA  26F3               	addwf	prodl,f,c
  1897  0011AC  0E00               	movlw	0
  1898  0011AE  22F4               	addwfc	prodh,f,c
  1899  0011B0  0E00               	movlw	low _doors
  1900  0011B2  24F3               	addwf	prodl,w,c
  1901  0011B4  6ED9               	movwf	fsr2l,c
  1902  0011B6  0E02               	movlw	high _doors
  1903  0011B8  20F4               	addwfc	prodh,w,c
  1904  0011BA  6EDA               	movwf	fsr2h,c
  1905  0011BC  0E00               	movlw	0
  1906  0011BE  6EDF               	movwf	indf2,c
  1907                           
  1908                           ;DOOR_Controller.c: 61: doors[d].was_open = !0;
  1909  0011C0  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1910  0011C2  0D0A               	mullw	10
  1911  0011C4  0E05               	movlw	5
  1912  0011C6  26F3               	addwf	prodl,f,c
  1913  0011C8  0E00               	movlw	0
  1914  0011CA  22F4               	addwfc	prodh,f,c
  1915  0011CC  0E00               	movlw	low _doors
  1916  0011CE  24F3               	addwf	prodl,w,c
  1917  0011D0  6ED9               	movwf	fsr2l,c
  1918  0011D2  0E02               	movlw	high _doors
  1919  0011D4  20F4               	addwfc	prodh,w,c
  1920  0011D6  6EDA               	movwf	fsr2h,c
  1921  0011D8  0E01               	movlw	1
  1922  0011DA  6EDF               	movwf	indf2,c
  1923                           
  1924                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1925  0011DC  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1926  0011DE  0D0A               	mullw	10
  1927  0011E0  0E07               	movlw	7
  1928  0011E2  26F3               	addwf	prodl,f,c
  1929  0011E4  0E00               	movlw	0
  1930  0011E6  22F4               	addwfc	prodh,f,c
  1931  0011E8  0E00               	movlw	low _doors
  1932  0011EA  24F3               	addwf	prodl,w,c
  1933  0011EC  6ED9               	movwf	fsr2l,c
  1934  0011EE  0E02               	movlw	high _doors
  1935  0011F0  20F4               	addwfc	prodh,w,c
  1936  0011F2  6EDA               	movwf	fsr2h,c
  1937  0011F4  0E80               	movlw	128
  1938  0011F6  6EDE               	movwf	postinc2,c
  1939  0011F8  0E0F               	movlw	15
  1940  0011FA  6EDD               	movwf	postdec2,c
  1941                           
  1942                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1943  0011FC  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  1944  0011FE  0D0A               	mullw	10
  1945  001200  0E09               	movlw	9
  1946  001202  26F3               	addwf	prodl,f,c
  1947  001204  0E00               	movlw	0
  1948  001206  22F4               	addwfc	prodh,f,c
  1949  001208  0E00               	movlw	low _doors
  1950  00120A  24F3               	addwf	prodl,w,c
  1951  00120C  6ED9               	movwf	fsr2l,c
  1952  00120E  0E02               	movlw	high _doors
  1953  001210  20F4               	addwfc	prodh,w,c
  1954  001212  6EDA               	movwf	fsr2h,c
  1955  001214  2979               	incf	C_DOOR_Init@d& (0+255),w,b
  1956  001216  6EDF               	movwf	indf2,c
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1960  001218  C079  F075         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1961  00121C  0E01               	movlw	1
  1962  00121E  6F76               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1963  001220  2B75               	incf	??_C_DOOR_Init& (0+255),f,b
  1964  001222  D002               	goto	u2404
  1965  001224                     u2405:
  1966  001224  90D8               	bcf	status,0,c
  1967  001226  3776               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1968  001228                     u2404:
  1969  001228  2F75               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1970  00122A  D7FC               	goto	u2405
  1971  00122C  0100               	movlb	0	; () banked
  1972  00122E  5176               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1973  001230  1493               	andwf	3987,w,c	;volatile
  1974  001232  1A93               	xorwf	3987,f,c	;volatile
  1975                           
  1976                           ; BSR set to: 0
  1977                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1978  001234  5092               	movf	3986,w,c	;volatile
  1979  001236  0AFF               	xorlw	255
  1980  001238  6F75               	movwf	??_C_DOOR_Init& (0+255),b
  1981  00123A  C079  F076         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1982  00123E  0E01               	movlw	1
  1983  001240  2776               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1984  001242  0E01               	movlw	1
  1985  001244  6F77               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1986  001246  2B76               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1987  001248  D002               	goto	u2414
  1988  00124A                     u2415:
  1989  00124A  90D8               	bcf	status,0,c
  1990  00124C  3777               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1991  00124E                     u2414:
  1992  00124E  2F76               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1993  001250  D7FC               	goto	u2415
  1994  001252  0100               	movlb	0	; () banked
  1995  001254  5177               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1996  001256  1575               	andwf	??_C_DOOR_Init& (0+255),w,b
  1997  001258  1A92               	xorwf	3986,f,c	;volatile
  1998                           
  1999                           ; BSR set to: 0
  2000  00125A  2B79               	incf	C_DOOR_Init@d& (0+255),f,b
  2001  00125C                     l24:
  2002                           
  2003                           ; BSR set to: 0
  2004                           
  2005                           ; BSR set to: 0
  2006  00125C  5179               	movf	C_DOOR_Init@d& (0+255),w,b
  2007  00125E  6F75               	movwf	??_C_DOOR_Init& (0+255),b
  2008  001260  6B76               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  2009  001262  51A8               	movf	_door_cnt& (0+255),w,b
  2010  001264  5D75               	subwf	??_C_DOOR_Init& (0+255),w,b
  2011  001266  5176               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  2012  001268  0A80               	xorlw	128
  2013  00126A  6F77               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  2014  00126C  51A9               	movf	(_door_cnt+1)& (0+255),w,b
  2015  00126E  0A80               	xorlw	128
  2016  001270  5977               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  2017  001272  B0D8               	btfsc	status,0,c
  2018  001274  0012               	return	
  2019  001276  D760               	goto	l25
  2020  001278                     __end_of_C_DOOR_Init:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           tblptrh	equ	0xFF7
  2024                           tblptrl	equ	0xFF6
  2025                           tablat	equ	0xFF5
  2026                           prodh	equ	0xFF4
  2027                           prodl	equ	0xFF3
  2028                           postinc0	equ	0xFEE
  2029                           plusw0	equ	0xFEB
  2030                           wreg	equ	0xFE8
  2031                           postdec1	equ	0xFE5
  2032                           fsr1l	equ	0xFE1
  2033                           indf2	equ	0xFDF
  2034                           postinc2	equ	0xFDE
  2035                           postdec2	equ	0xFDD
  2036                           plusw2	equ	0xFDB
  2037                           fsr2h	equ	0xFDA
  2038                           fsr2l	equ	0xFD9
  2039                           status	equ	0xFD8
  2040                           
  2041 ;; *************** function _D_UART_WriteInt *****************
  2042 ;; Defined at:
  2043 ;;		line 221 in file "Drivers/UART_Driver.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;  command         2   47[BANK0 ] PTR const unsigned char 
  2046 ;;		 -> STR_17(2), 
  2047 ;;  d               2   49[BANK0 ] int 
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;		None
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2059 ;;      Params:         0       4       0       0       0       0       0       0       0
  2060 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2061 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2062 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2063 ;;Total ram usage:        5 bytes
  2064 ;; Hardware stack levels used:    1
  2065 ;; Hardware stack levels required when called:    8
  2066 ;; This function calls:
  2067 ;;		_printf
  2068 ;; This function is called by:
  2069 ;;		_main
  2070 ;; This function uses a non-reentrant model
  2071 ;;
  2072                           
  2073                           	psect	text6
  2074  001446                     __ptext6:
  2075                           	opt stack 0
  2076  001446                     _D_UART_WriteInt:
  2077                           	opt stack 22
  2078                           
  2079                           ;UART_Driver.c: 222: printf(startCharacter);
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;incstack = 0
  2083  001446  C042  F081         	movff	_startCharacter,printf@f
  2084  00144A  C043  F082         	movff	_startCharacter+1,printf@f+1
  2085  00144E  0100               	movlb	0	; () banked
  2086  001450  5181               	movf	printf@f& (0+255),w,b
  2087  001452  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2088  001454  A4D8               	btfss	status,2,c
  2089  001456  0E00               	movlw	low (__mediumconst shr (0+16))
  2090  001458  6F83               	movwf	(printf@f+2)& (0+255),b
  2091  00145A  EC80  F005         	call	_printf	;wreg free
  2092                           
  2093                           ;UART_Driver.c: 224: printf(messageCharacter);
  2094  00145E  C0AA  F081         	movff	_messageCharacter,printf@f
  2095  001462  C0AB  F082         	movff	_messageCharacter+1,printf@f+1
  2096  001466  0100               	movlb	0	; () banked
  2097  001468  5181               	movf	printf@f& (0+255),w,b
  2098  00146A  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2099  00146C  A4D8               	btfss	status,2,c
  2100  00146E  0E00               	movlw	low (__mediumconst shr (0+16))
  2101  001470  6F83               	movwf	(printf@f+2)& (0+255),b
  2102  001472  EC80  F005         	call	_printf	;wreg free
  2103                           
  2104                           ;UART_Driver.c: 225: printf(deviceName);
  2105  001476  C0A5  F081         	movff	_deviceName,printf@f
  2106  00147A  C0A6  F082         	movff	_deviceName+1,printf@f+1
  2107  00147E  C0A7  F083         	movff	_deviceName+2,printf@f+2
  2108  001482  EC80  F005         	call	_printf	;wreg free
  2109                           
  2110                           ;UART_Driver.c: 227: printf(":");printf(command);
  2111  001486  0E46               	movlw	low STR_6
  2112  001488  0100               	movlb	0	; () banked
  2113  00148A  6F81               	movwf	printf@f& (0+255),b
  2114  00148C  0E08               	movlw	high STR_6
  2115  00148E  6F82               	movwf	(printf@f+1)& (0+255),b
  2116  001490  5181               	movf	printf@f& (0+255),w,b
  2117  001492  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2118  001494  A4D8               	btfss	status,2,c
  2119  001496  0E00               	movlw	low (__mediumconst shr (0+16))
  2120  001498  6F83               	movwf	(printf@f+2)& (0+255),b
  2121  00149A  EC80  F005         	call	_printf	;wreg free
  2122  00149E  C08F  F081         	movff	D_UART_WriteInt@command,printf@f
  2123  0014A2  C090  F082         	movff	D_UART_WriteInt@command+1,printf@f+1
  2124  0014A6  0100               	movlb	0	; () banked
  2125  0014A8  5181               	movf	printf@f& (0+255),w,b
  2126  0014AA  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2127  0014AC  A4D8               	btfss	status,2,c
  2128  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
  2129  0014B0  6F83               	movwf	(printf@f+2)& (0+255),b
  2130  0014B2  EC80  F005         	call	_printf	;wreg free
  2131                           
  2132                           ;UART_Driver.c: 229: printf(":");printf("%d", d);
  2133  0014B6  0E46               	movlw	low STR_6
  2134  0014B8  0100               	movlb	0	; () banked
  2135  0014BA  6F81               	movwf	printf@f& (0+255),b
  2136  0014BC  0E08               	movlw	high STR_6
  2137  0014BE  6F82               	movwf	(printf@f+1)& (0+255),b
  2138  0014C0  5181               	movf	printf@f& (0+255),w,b
  2139  0014C2  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2140  0014C4  A4D8               	btfss	status,2,c
  2141  0014C6  0E00               	movlw	low (__mediumconst shr (0+16))
  2142  0014C8  6F83               	movwf	(printf@f+2)& (0+255),b
  2143  0014CA  EC80  F005         	call	_printf	;wreg free
  2144  0014CE  0E2C               	movlw	low STR_10
  2145  0014D0  0100               	movlb	0	; () banked
  2146  0014D2  6F81               	movwf	printf@f& (0+255),b
  2147  0014D4  0E08               	movlw	high STR_10
  2148  0014D6  6F82               	movwf	(printf@f+1)& (0+255),b
  2149  0014D8  5181               	movf	printf@f& (0+255),w,b
  2150  0014DA  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2151  0014DC  A4D8               	btfss	status,2,c
  2152  0014DE  0E00               	movlw	low (__mediumconst shr (0+16))
  2153  0014E0  6F83               	movwf	(printf@f+2)& (0+255),b
  2154  0014E2  C091  F084         	movff	D_UART_WriteInt@d,?_printf+3
  2155  0014E6  C092  F085         	movff	D_UART_WriteInt@d+1,?_printf+4
  2156  0014EA  EC80  F005         	call	_printf	;wreg free
  2157                           
  2158                           ;UART_Driver.c: 231: printf(stopCharacter);
  2159  0014EE  C040  F081         	movff	_stopCharacter,printf@f
  2160  0014F2  C041  F082         	movff	_stopCharacter+1,printf@f+1
  2161  0014F6  0100               	movlb	0	; () banked
  2162  0014F8  5181               	movf	printf@f& (0+255),w,b
  2163  0014FA  1182               	iorwf	(printf@f+1)& (0+255),w,b
  2164  0014FC  A4D8               	btfss	status,2,c
  2165  0014FE  0E00               	movlw	low (__mediumconst shr (0+16))
  2166  001500  6F83               	movwf	(printf@f+2)& (0+255),b
  2167  001502  EC80  F005         	call	_printf	;wreg free
  2168                           
  2169                           ;UART_Driver.c: 232: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  2170  001506  0E06               	movlw	6
  2171  001508  0100               	movlb	0	; () banked
  2172  00150A  6F93               	movwf	??_D_UART_WriteInt& (0+255),b
  2173  00150C  0E30               	movlw	48
  2174  00150E                     u2937:
  2175  00150E  2EE8               	decfsz	wreg,f,c
  2176  001510  D7FE               	bra	u2937
  2177  001512  2F93               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  2178  001514  D7FC               	bra	u2937
  2179  001516  F000               	nop	
  2180  001518  0012               	return		;funcret
  2181  00151A                     __end_of_D_UART_WriteInt:
  2182                           	opt stack 0
  2183                           tblptru	equ	0xFF8
  2184                           tblptrh	equ	0xFF7
  2185                           tblptrl	equ	0xFF6
  2186                           tablat	equ	0xFF5
  2187                           prodh	equ	0xFF4
  2188                           prodl	equ	0xFF3
  2189                           postinc0	equ	0xFEE
  2190                           plusw0	equ	0xFEB
  2191                           wreg	equ	0xFE8
  2192                           postdec1	equ	0xFE5
  2193                           fsr1l	equ	0xFE1
  2194                           indf2	equ	0xFDF
  2195                           postinc2	equ	0xFDE
  2196                           postdec2	equ	0xFDD
  2197                           plusw2	equ	0xFDB
  2198                           fsr2h	equ	0xFDA
  2199                           fsr2l	equ	0xFD9
  2200                           status	equ	0xFD8
  2201                           
  2202 ;; *************** function _D_UART_Read *****************
  2203 ;; Defined at:
  2204 ;;		line 235 in file "Drivers/UART_Driver.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  6   21[BANK0 ] struct .
  2211 ;; Registers used:
  2212 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2218 ;;      Params:         0       6       0       0       0       0       0       0       0
  2219 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2221 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2222 ;;Total ram usage:        6 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    6
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_main
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text7
  2233  001B88                     __ptext7:
  2234                           	opt stack 0
  2235  001B88                     _D_UART_Read:
  2236                           	opt stack 24
  2237                           
  2238                           ;UART_Driver.c: 236: readData.sender = readBuffer.sender;
  2239                           
  2240                           ;incstack = 0
  2241  001B88  0E0B               	movlw	low (_readBuffer+11)
  2242  001B8A  0100               	movlb	0	; () banked
  2243  001B8C  6F9F               	movwf	_readData& (0+255),b
  2244  001B8E  0E01               	movlw	high (_readBuffer+11)
  2245  001B90  6FA0               	movwf	(_readData+1)& (0+255),b
  2246                           
  2247                           ;UART_Driver.c: 237: readData.command = readBuffer.command;
  2248  001B92  0E3E               	movlw	low (_readBuffer+62)
  2249  001B94  6FA1               	movwf	(_readData+2)& (0+255),b
  2250  001B96  0E01               	movlw	high (_readBuffer+62)
  2251  001B98  6FA2               	movwf	(_readData+3)& (0+255),b
  2252                           
  2253                           ;UART_Driver.c: 238: readData.message = readBuffer.message;
  2254  001B9A  0E71               	movlw	low (_readBuffer+113)
  2255  001B9C  6FA3               	movwf	(_readData+4)& (0+255),b
  2256  001B9E  0E01               	movlw	high (_readBuffer+113)
  2257  001BA0  6FA4               	movwf	(_readData+5)& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;UART_Driver.c: 239: return readData;
  2261  001BA2  EE20  F09F         	lfsr	2,_readData
  2262  001BA6  EE00  F075         	lfsr	0,?_D_UART_Read
  2263  001BAA  0E05               	movlw	5
  2264  001BAC                     u2641:
  2265  001BAC  CFDB FFEB          	movff	plusw2,plusw0
  2266  001BB0  06E8               	decf	wreg,f,c
  2267  001BB2  E2FC               	bc	u2641
  2268  001BB4  0012               	return	
  2269  001BB6                     __end_of_D_UART_Read:
  2270                           	opt stack 0
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           prodh	equ	0xFF4
  2276                           prodl	equ	0xFF3
  2277                           postinc0	equ	0xFEE
  2278                           plusw0	equ	0xFEB
  2279                           wreg	equ	0xFE8
  2280                           postdec1	equ	0xFE5
  2281                           fsr1l	equ	0xFE1
  2282                           indf2	equ	0xFDF
  2283                           postinc2	equ	0xFDE
  2284                           postdec2	equ	0xFDD
  2285                           plusw2	equ	0xFDB
  2286                           fsr2h	equ	0xFDA
  2287                           fsr2l	equ	0xFD9
  2288                           status	equ	0xFD8
  2289                           
  2290 ;; *************** function _D_UART_Init *****************
  2291 ;; Defined at:
  2292 ;;		line 167 in file "Drivers/UART_Driver.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  name            2   34[BANK0 ] PTR const unsigned char 
  2295 ;;		 -> STR_11(2), 
  2296 ;;  baud            2   36[BANK0 ] unsigned int 
  2297 ;;  interrupts      1   38[BANK0 ] unsigned char 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;		None
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2309 ;;      Params:         0       5       0       0       0       0       0       0       0
  2310 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2312 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2313 ;;Total ram usage:        5 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    7
  2316 ;; This function calls:
  2317 ;;		_D_UART_Enable
  2318 ;;		___lldiv
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           	psect	text8
  2325  00185A                     __ptext8:
  2326                           	opt stack 0
  2327  00185A                     _D_UART_Init:
  2328                           	opt stack 23
  2329                           
  2330                           ;UART_Driver.c: 169: deviceName = name;
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;incstack = 0
  2334  00185A  C082  F0A5         	movff	D_UART_Init@name,_deviceName
  2335  00185E  C083  F0A6         	movff	D_UART_Init@name+1,_deviceName+1
  2336  001862  0100               	movlb	0	; () banked
  2337  001864  51A5               	movf	_deviceName& (0+255),w,b
  2338  001866  11A6               	iorwf	(_deviceName+1)& (0+255),w,b
  2339  001868  A4D8               	btfss	status,2,c
  2340  00186A  0E00               	movlw	low (__mediumconst shr (0+16))
  2341  00186C  6FA7               	movwf	(_deviceName+2)& (0+255),b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;UART_Driver.c: 170: readReady = 0;
  2345  00186E  0E00               	movlw	0
  2346  001870  6E3C               	movwf	_readReady,c
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;UART_Driver.c: 173: D_UART_Enable(0);
  2350  001872  0E00               	movlw	0
  2351  001874  EC06  F00E         	call	_D_UART_Enable
  2352                           
  2353                           ;UART_Driver.c: 176: RCSTAbits.FERR = 0;
  2354  001878  94AB               	bcf	4011,2,c	;volatile
  2355                           
  2356                           ;UART_Driver.c: 177: RCSTAbits.OERR = 0;
  2357  00187A  92AB               	bcf	4011,1,c	;volatile
  2358                           
  2359                           ;UART_Driver.c: 178: RCREG = 0x00;
  2360  00187C  0E00               	movlw	0
  2361  00187E  6EAE               	movwf	4014,c	;volatile
  2362                           
  2363                           ;UART_Driver.c: 181: TXSTAbits.TX9 = 0;
  2364  001880  9CAC               	bcf	4012,6,c	;volatile
  2365                           
  2366                           ;UART_Driver.c: 182: TXSTAbits.SYNC = 0;
  2367  001882  98AC               	bcf	4012,4,c	;volatile
  2368                           
  2369                           ;UART_Driver.c: 183: TXSTAbits.BRGH = 0;
  2370  001884  94AC               	bcf	4012,2,c	;volatile
  2371                           
  2372                           ;UART_Driver.c: 186: RCSTAbits.RX9 = 0;
  2373  001886  9CAB               	bcf	4011,6,c	;volatile
  2374                           
  2375                           ;UART_Driver.c: 189: BAUDCONbits.RXDTP = 0;
  2376  001888  9AB8               	bcf	4024,5,c	;volatile
  2377                           
  2378                           ;UART_Driver.c: 190: BAUDCONbits.TXCKP = 0;
  2379  00188A  98B8               	bcf	4024,4,c	;volatile
  2380                           
  2381                           ;UART_Driver.c: 191: BAUDCONbits.BRG16 = 0;
  2382  00188C  96B8               	bcf	4024,3,c	;volatile
  2383                           
  2384                           ;UART_Driver.c: 194: SPBRG = ((16000000UL/baud)/64)-1;
  2385  00188E  0E00               	movlw	0
  2386  001890  0100               	movlb	0	; () banked
  2387  001892  6F75               	movwf	___lldiv@dividend& (0+255),b
  2388  001894  0E24               	movlw	36
  2389  001896  6F76               	movwf	(___lldiv@dividend+1)& (0+255),b
  2390  001898  0EF4               	movlw	244
  2391  00189A  6F77               	movwf	(___lldiv@dividend+2)& (0+255),b
  2392  00189C  0E00               	movlw	0
  2393  00189E  6F78               	movwf	(___lldiv@dividend+3)& (0+255),b
  2394  0018A0  C084  F079         	movff	D_UART_Init@baud,___lldiv@divisor
  2395  0018A4  C085  F07A         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  2396  0018A8  6B7B               	clrf	(___lldiv@divisor+2)& (0+255),b
  2397  0018AA  6B7C               	clrf	(___lldiv@divisor+3)& (0+255),b
  2398  0018AC  ECEB  F00B         	call	___lldiv	;wreg free
  2399  0018B0  0E07               	movlw	7
  2400  0018B2  D006               	goto	u2620
  2401  0018B4                     u2625:
  2402  0018B4  0100               	movlb	0	; () banked
  2403  0018B6  90D8               	bcf	status,0,c
  2404  0018B8  3378               	rrcf	(?___lldiv+3)& (0+255),f,b
  2405  0018BA  3377               	rrcf	(?___lldiv+2)& (0+255),f,b
  2406  0018BC  3376               	rrcf	(?___lldiv+1)& (0+255),f,b
  2407  0018BE  3375               	rrcf	?___lldiv& (0+255),f,b
  2408  0018C0                     u2620:
  2409  0018C0  2EE8               	decfsz	wreg,f,c
  2410  0018C2  D7F8               	goto	u2625
  2411  0018C4  0575               	decf	?___lldiv& (0+255),w,b
  2412  0018C6  6EAF               	movwf	4015,c	;volatile
  2413                           
  2414                           ;UART_Driver.c: 197: if (interrupts) {
  2415  0018C8  5186               	movf	D_UART_Init@interrupts& (0+255),w,b
  2416  0018CA  B4D8               	btfsc	status,2,c
  2417  0018CC  0012               	return	
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;UART_Driver.c: 198: RCONbits.IPEN = 1;
  2421  0018CE  8ED0               	bsf	4048,7,c	;volatile
  2422                           
  2423                           ;UART_Driver.c: 199: INTCONbits.GIEH = 1;
  2424  0018D0  8EF2               	bsf	intcon,7,c	;volatile
  2425                           
  2426                           ;UART_Driver.c: 200: INTCONbits.GIEL = 1;
  2427  0018D2  8CF2               	bsf	intcon,6,c	;volatile
  2428                           
  2429                           ;UART_Driver.c: 201: PIR1bits.RCIF = 0;
  2430  0018D4  9A9E               	bcf	3998,5,c	;volatile
  2431                           
  2432                           ;UART_Driver.c: 202: IPR1bits.RCIP = 1;
  2433  0018D6  8A9F               	bsf	3999,5,c	;volatile
  2434                           
  2435                           ;UART_Driver.c: 203: PIE1bits.RCIE = 1;
  2436  0018D8  8A9D               	bsf	3997,5,c	;volatile
  2437  0018DA  0012               	return	
  2438  0018DC                     __end_of_D_UART_Init:
  2439                           	opt stack 0
  2440                           tblptru	equ	0xFF8
  2441                           tblptrh	equ	0xFF7
  2442                           tblptrl	equ	0xFF6
  2443                           tablat	equ	0xFF5
  2444                           prodh	equ	0xFF4
  2445                           prodl	equ	0xFF3
  2446                           intcon	equ	0xFF2
  2447                           postinc0	equ	0xFEE
  2448                           plusw0	equ	0xFEB
  2449                           wreg	equ	0xFE8
  2450                           postdec1	equ	0xFE5
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           plusw2	equ	0xFDB
  2456                           fsr2h	equ	0xFDA
  2457                           fsr2l	equ	0xFD9
  2458                           status	equ	0xFD8
  2459                           
  2460 ;; *************** function ___lldiv *****************
  2461 ;; Defined at:
  2462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  dividend        4   21[BANK0 ] unsigned long 
  2465 ;;  divisor         4   25[BANK0 ] unsigned long 
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;  quotient        4   29[BANK0 ] unsigned long 
  2468 ;;  counter         1   33[BANK0 ] unsigned char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  4   21[BANK0 ] unsigned long 
  2471 ;; Registers used:
  2472 ;;		wreg, status,2, status,0
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2478 ;;      Params:         0       8       0       0       0       0       0       0       0
  2479 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2480 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2481 ;;      Totals:         0      13       0       0       0       0       0       0       0
  2482 ;;Total ram usage:       13 bytes
  2483 ;; Hardware stack levels used:    1
  2484 ;; Hardware stack levels required when called:    6
  2485 ;; This function calls:
  2486 ;;		Nothing
  2487 ;; This function is called by:
  2488 ;;		_D_UART_Init
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	text9
  2493  0017D6                     __ptext9:
  2494                           	opt stack 0
  2495  0017D6                     ___lldiv:
  2496                           	opt stack 23
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;incstack = 0
  2500  0017D6  0E00               	movlw	0
  2501  0017D8  0100               	movlb	0	; () banked
  2502  0017DA  6F7D               	movwf	___lldiv@quotient& (0+255),b
  2503  0017DC  0E00               	movlw	0
  2504  0017DE  6F7E               	movwf	(___lldiv@quotient+1)& (0+255),b
  2505  0017E0  0E00               	movlw	0
  2506  0017E2  6F7F               	movwf	(___lldiv@quotient+2)& (0+255),b
  2507  0017E4  0E00               	movlw	0
  2508  0017E6  6F80               	movwf	(___lldiv@quotient+3)& (0+255),b
  2509                           
  2510                           ; BSR set to: 0
  2511  0017E8  5179               	movf	___lldiv@divisor& (0+255),w,b
  2512  0017EA  117A               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2513  0017EC  117B               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2514  0017EE  117C               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2515  0017F0  B4D8               	btfsc	status,2,c
  2516  0017F2  D02A               	goto	l771
  2517                           
  2518                           ; BSR set to: 0
  2519  0017F4  0E01               	movlw	1
  2520  0017F6  6F81               	movwf	___lldiv@counter& (0+255),b
  2521  0017F8  D006               	goto	l766
  2522  0017FA                     
  2523                           ; BSR set to: 0
  2524                           
  2525                           ; BSR set to: 0
  2526  0017FA  90D8               	bcf	status,0,c
  2527  0017FC  3779               	rlcf	___lldiv@divisor& (0+255),f,b
  2528  0017FE  377A               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2529  001800  377B               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2530  001802  377C               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2531  001804  2B81               	incf	___lldiv@counter& (0+255),f,b
  2532  001806                     l766:
  2533                           
  2534                           ; BSR set to: 0
  2535                           
  2536                           ; BSR set to: 0
  2537  001806  AF7C               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2538  001808  D7F8               	goto	l767
  2539  00180A                     u2510:
  2540                           
  2541                           ; BSR set to: 0
  2542                           
  2543                           ; BSR set to: 0
  2544                           
  2545                           ; BSR set to: 0
  2546  00180A  90D8               	bcf	status,0,c
  2547  00180C  377D               	rlcf	___lldiv@quotient& (0+255),f,b
  2548  00180E  377E               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2549  001810  377F               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2550  001812  3780               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2551                           
  2552                           ; BSR set to: 0
  2553  001814  5179               	movf	___lldiv@divisor& (0+255),w,b
  2554  001816  5D75               	subwf	___lldiv@dividend& (0+255),w,b
  2555  001818  517A               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2556  00181A  5976               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2557  00181C  517B               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2558  00181E  5977               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2559  001820  517C               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2560  001822  5978               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2561  001824  A0D8               	btfss	status,0,c
  2562  001826  D009               	goto	l770
  2563                           
  2564                           ; BSR set to: 0
  2565  001828  5179               	movf	___lldiv@divisor& (0+255),w,b
  2566  00182A  5F75               	subwf	___lldiv@dividend& (0+255),f,b
  2567  00182C  517A               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2568  00182E  5B76               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2569  001830  517B               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2570  001832  5B77               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2571  001834  517C               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2572  001836  5B78               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2573                           
  2574                           ; BSR set to: 0
  2575  001838  817D               	bsf	___lldiv@quotient& (0+255),0,b
  2576  00183A                     l770:
  2577                           
  2578                           ; BSR set to: 0
  2579                           
  2580                           ; BSR set to: 0
  2581  00183A  90D8               	bcf	status,0,c
  2582  00183C  337C               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2583  00183E  337B               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2584  001840  337A               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2585  001842  3379               	rrcf	___lldiv@divisor& (0+255),f,b
  2586                           
  2587                           ; BSR set to: 0
  2588  001844  2F81               	decfsz	___lldiv@counter& (0+255),f,b
  2589  001846  D7E1               	goto	u2510
  2590  001848                     l771:
  2591                           
  2592                           ; BSR set to: 0
  2593                           
  2594                           ; BSR set to: 0
  2595  001848  C07D  F075         	movff	___lldiv@quotient,?___lldiv
  2596  00184C  C07E  F076         	movff	___lldiv@quotient+1,?___lldiv+1
  2597  001850  C07F  F077         	movff	___lldiv@quotient+2,?___lldiv+2
  2598  001854  C080  F078         	movff	___lldiv@quotient+3,?___lldiv+3
  2599                           
  2600                           ; BSR set to: 0
  2601  001858  0012               	return		;funcret
  2602  00185A                     __end_of___lldiv:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           prodh	equ	0xFF4
  2609                           prodl	equ	0xFF3
  2610                           intcon	equ	0xFF2
  2611                           postinc0	equ	0xFEE
  2612                           plusw0	equ	0xFEB
  2613                           wreg	equ	0xFE8
  2614                           postdec1	equ	0xFE5
  2615                           fsr1l	equ	0xFE1
  2616                           indf2	equ	0xFDF
  2617                           postinc2	equ	0xFDE
  2618                           postdec2	equ	0xFDD
  2619                           plusw2	equ	0xFDB
  2620                           fsr2h	equ	0xFDA
  2621                           fsr2l	equ	0xFD9
  2622                           status	equ	0xFD8
  2623                           
  2624 ;; *************** function _D_UART_Enable *****************
  2625 ;; Defined at:
  2626 ;;		line 242 in file "Drivers/UART_Driver.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  enable          1    wreg     unsigned char 
  2629 ;; Auto vars:     Size  Location     Type
  2630 ;;  enable          1   21[BANK0 ] unsigned char 
  2631 ;; Return value:  Size  Location     Type
  2632 ;;                  1    wreg      void 
  2633 ;; Registers used:
  2634 ;;		wreg, status,2
  2635 ;; Tracked objects:
  2636 ;;		On entry : 0/0
  2637 ;;		On exit  : 0/0
  2638 ;;		Unchanged: 0/0
  2639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2640 ;;      Params:         0       0       0       0       0       0       0       0       0
  2641 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2643 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2644 ;;Total ram usage:        1 bytes
  2645 ;; Hardware stack levels used:    1
  2646 ;; Hardware stack levels required when called:    6
  2647 ;; This function calls:
  2648 ;;		Nothing
  2649 ;; This function is called by:
  2650 ;;		_D_UART_Init
  2651 ;;		_main
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654                           
  2655                           	psect	text10
  2656  001C0C                     __ptext10:
  2657                           	opt stack 0
  2658  001C0C                     _D_UART_Enable:
  2659                           	opt stack 23
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;incstack = 0
  2663                           ;D_UART_Enable@enable stored from wreg
  2664  001C0C  0100               	movlb	0	; () banked
  2665  001C0E  6F75               	movwf	D_UART_Enable@enable& (0+255),b
  2666                           
  2667                           ;UART_Driver.c: 243: if(enable) {
  2668  001C10  0100               	movlb	0	; () banked
  2669  001C12  5175               	movf	D_UART_Enable@enable& (0+255),w,b
  2670  001C14  B4D8               	btfsc	status,2,c
  2671  001C16  D006               	goto	l166
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;UART_Driver.c: 244: TRISCbits.TRISC7 = 0;
  2675  001C18  9E94               	bcf	3988,7,c	;volatile
  2676                           
  2677                           ;UART_Driver.c: 245: TRISCbits.TRISC6 = 1;
  2678  001C1A  8C94               	bsf	3988,6,c	;volatile
  2679                           
  2680                           ;UART_Driver.c: 246: TXSTAbits.TXEN = 1;
  2681  001C1C  8AAC               	bsf	4012,5,c	;volatile
  2682                           
  2683                           ;UART_Driver.c: 247: RCSTAbits.CREN = 1;
  2684  001C1E  88AB               	bsf	4011,4,c	;volatile
  2685                           
  2686                           ;UART_Driver.c: 248: RCSTAbits.SPEN = 1;
  2687  001C20  8EAB               	bsf	4011,7,c	;volatile
  2688                           
  2689                           ;UART_Driver.c: 249: } else {
  2690  001C22  0012               	return	
  2691  001C24                     l166:
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;UART_Driver.c: 250: TRISCbits.TRISC7 = 0;
  2695  001C24  9E94               	bcf	3988,7,c	;volatile
  2696                           
  2697                           ;UART_Driver.c: 251: TRISCbits.TRISC6 = 0;
  2698  001C26  9C94               	bcf	3988,6,c	;volatile
  2699                           
  2700                           ;UART_Driver.c: 252: TXSTAbits.TXEN = 0;
  2701  001C28  9AAC               	bcf	4012,5,c	;volatile
  2702                           
  2703                           ;UART_Driver.c: 253: RCSTAbits.CREN = 0;
  2704  001C2A  98AB               	bcf	4011,4,c	;volatile
  2705                           
  2706                           ;UART_Driver.c: 254: RCSTAbits.SPEN = 0;
  2707  001C2C  9EAB               	bcf	4011,7,c	;volatile
  2708  001C2E  0012               	return	
  2709  001C30                     __end_of_D_UART_Enable:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           prodh	equ	0xFF4
  2716                           prodl	equ	0xFF3
  2717                           intcon	equ	0xFF2
  2718                           postinc0	equ	0xFEE
  2719                           plusw0	equ	0xFEB
  2720                           wreg	equ	0xFE8
  2721                           postdec1	equ	0xFE5
  2722                           fsr1l	equ	0xFE1
  2723                           indf2	equ	0xFDF
  2724                           postinc2	equ	0xFDE
  2725                           postdec2	equ	0xFDD
  2726                           plusw2	equ	0xFDB
  2727                           fsr2h	equ	0xFDA
  2728                           fsr2l	equ	0xFD9
  2729                           status	equ	0xFD8
  2730                           
  2731 ;; *************** function _D_TMR1_Init *****************
  2732 ;; Defined at:
  2733 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  2734 ;; Parameters:    Size  Location     Type
  2735 ;;		None
  2736 ;; Auto vars:     Size  Location     Type
  2737 ;;		None
  2738 ;; Return value:  Size  Location     Type
  2739 ;;                  1    wreg      void 
  2740 ;; Registers used:
  2741 ;;		wreg, status,2, cstack
  2742 ;; Tracked objects:
  2743 ;;		On entry : 0/0
  2744 ;;		On exit  : 0/0
  2745 ;;		Unchanged: 0/0
  2746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2747 ;;      Params:         0       0       0       0       0       0       0       0       0
  2748 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2749 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2750 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2751 ;;Total ram usage:        0 bytes
  2752 ;; Hardware stack levels used:    1
  2753 ;; Hardware stack levels required when called:    7
  2754 ;; This function calls:
  2755 ;;		_D_TMR1_Enable
  2756 ;; This function is called by:
  2757 ;;		_main
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text11
  2762  001C98                     __ptext11:
  2763                           	opt stack 0
  2764  001C98                     _D_TMR1_Init:
  2765                           	opt stack 23
  2766                           
  2767                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;incstack = 0
  2771  001C98  0E00               	movlw	0
  2772  001C9A  EC7A  F00E         	call	_D_TMR1_Enable
  2773                           
  2774                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  2775  001C9E  8ECD               	bsf	4045,7,c	;volatile
  2776                           
  2777                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  2778  001CA0  9CCD               	bcf	4045,6,c	;volatile
  2779                           
  2780                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  2781  001CA2  0ECF               	movlw	-49
  2782  001CA4  16CD               	andwf	4045,f,c	;volatile
  2783                           
  2784                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  2785  001CA6  96CD               	bcf	4045,3,c	;volatile
  2786                           
  2787                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  2788  001CA8  92CD               	bcf	4045,1,c	;volatile
  2789                           
  2790                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  2791  001CAA  8ED0               	bsf	4048,7,c	;volatile
  2792                           
  2793                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  2794  001CAC  8EF2               	bsf	intcon,7,c	;volatile
  2795                           
  2796                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  2797  001CAE  8CF2               	bsf	intcon,6,c	;volatile
  2798                           
  2799                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  2800  001CB0  909E               	bcf	3998,0,c	;volatile
  2801                           
  2802                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  2803  001CB2  909F               	bcf	3999,0,c	;volatile
  2804                           
  2805                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  2806  001CB4  809D               	bsf	3997,0,c	;volatile
  2807  001CB6  0012               	return		;funcret
  2808  001CB8                     __end_of_D_TMR1_Init:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           prodh	equ	0xFF4
  2815                           prodl	equ	0xFF3
  2816                           intcon	equ	0xFF2
  2817                           postinc0	equ	0xFEE
  2818                           plusw0	equ	0xFEB
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1l	equ	0xFE1
  2822                           indf2	equ	0xFDF
  2823                           postinc2	equ	0xFDE
  2824                           postdec2	equ	0xFDD
  2825                           plusw2	equ	0xFDB
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _D_TMR1_Enable *****************
  2831 ;; Defined at:
  2832 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  enable          1    wreg     unsigned char 
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;  enable          1   21[BANK0 ] unsigned char 
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg, status,2
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2846 ;;      Params:         0       0       0       0       0       0       0       0       0
  2847 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2849 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2850 ;;Total ram usage:        1 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    6
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_D_TMR1_Init
  2857 ;;		_main
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text12
  2862  001CF4                     __ptext12:
  2863                           	opt stack 0
  2864  001CF4                     _D_TMR1_Enable:
  2865                           	opt stack 23
  2866                           
  2867                           ;incstack = 0
  2868                           ;D_TMR1_Enable@enable stored from wreg
  2869  001CF4  0100               	movlb	0	; () banked
  2870  001CF6  6F75               	movwf	D_TMR1_Enable@enable& (0+255),b
  2871                           
  2872                           ;TMR1_Driver.c: 53: if (enable) {
  2873  001CF8  0100               	movlb	0	; () banked
  2874  001CFA  5175               	movf	D_TMR1_Enable@enable& (0+255),w,b
  2875  001CFC  B4D8               	btfsc	status,2,c
  2876  001CFE  D002               	goto	l241
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  2880  001D00  80CD               	bsf	4045,0,c	;volatile
  2881                           
  2882                           ;TMR1_Driver.c: 55: } else {
  2883  001D02  0012               	return	
  2884  001D04                     l241:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  2888  001D04  90CD               	bcf	4045,0,c	;volatile
  2889  001D06  0012               	return	
  2890  001D08                     __end_of_D_TMR1_Enable:
  2891                           	opt stack 0
  2892                           tblptru	equ	0xFF8
  2893                           tblptrh	equ	0xFF7
  2894                           tblptrl	equ	0xFF6
  2895                           tablat	equ	0xFF5
  2896                           prodh	equ	0xFF4
  2897                           prodl	equ	0xFF3
  2898                           intcon	equ	0xFF2
  2899                           postinc0	equ	0xFEE
  2900                           plusw0	equ	0xFEB
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           plusw2	equ	0xFDB
  2908                           fsr2h	equ	0xFDA
  2909                           fsr2l	equ	0xFD9
  2910                           status	equ	0xFD8
  2911                           
  2912 ;; *************** function _D_TMR0_Init *****************
  2913 ;; Defined at:
  2914 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;		None
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;		None
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, cstack
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2928 ;;      Params:         0       0       0       0       0       0       0       0       0
  2929 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2931 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2932 ;;Total ram usage:        0 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    7
  2935 ;; This function calls:
  2936 ;;		_D_TMR0_Enable
  2937 ;; This function is called by:
  2938 ;;		_main
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           	psect	text13
  2943  001C30                     __ptext13:
  2944                           	opt stack 0
  2945  001C30                     _D_TMR0_Init:
  2946                           	opt stack 23
  2947                           
  2948                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;incstack = 0
  2952  001C30  0E00               	movlw	0
  2953  001C32  EC84  F00E         	call	_D_TMR0_Enable
  2954                           
  2955                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2956  001C36  9CD5               	bcf	4053,6,c	;volatile
  2957                           
  2958                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2959  001C38  9AD5               	bcf	4053,5,c	;volatile
  2960                           
  2961                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2962  001C3A  98D5               	bcf	4053,4,c	;volatile
  2963                           
  2964                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2965  001C3C  96D5               	bcf	4053,3,c	;volatile
  2966                           
  2967                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2968  001C3E  50D5               	movf	4053,w,c	;volatile
  2969  001C40  0BF8               	andlw	-8
  2970  001C42  0902               	iorlw	2
  2971  001C44  6ED5               	movwf	4053,c	;volatile
  2972                           
  2973                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2974  001C46  8ED0               	bsf	4048,7,c	;volatile
  2975                           
  2976                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2977  001C48  8EF2               	bsf	intcon,7,c	;volatile
  2978                           
  2979                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2980  001C4A  8CF2               	bsf	intcon,6,c	;volatile
  2981                           
  2982                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2983  001C4C  94F2               	bcf	intcon,2,c	;volatile
  2984                           
  2985                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  2986  001C4E  94F1               	bcf	intcon2,2,c	;volatile
  2987                           
  2988                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2989  001C50  8AF2               	bsf	intcon,5,c	;volatile
  2990  001C52  0012               	return		;funcret
  2991  001C54                     __end_of_D_TMR0_Init:
  2992                           	opt stack 0
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           prodh	equ	0xFF4
  2998                           prodl	equ	0xFF3
  2999                           intcon	equ	0xFF2
  3000                           intcon2	equ	0xFF1
  3001                           postinc0	equ	0xFEE
  3002                           plusw0	equ	0xFEB
  3003                           wreg	equ	0xFE8
  3004                           postdec1	equ	0xFE5
  3005                           fsr1l	equ	0xFE1
  3006                           indf2	equ	0xFDF
  3007                           postinc2	equ	0xFDE
  3008                           postdec2	equ	0xFDD
  3009                           plusw2	equ	0xFDB
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function _D_TMR0_Enable *****************
  3015 ;; Defined at:
  3016 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  enable          1    wreg     unsigned char 
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;  enable          1   21[BANK0 ] unsigned char 
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, status,2
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3030 ;;      Params:         0       0       0       0       0       0       0       0       0
  3031 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3033 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3034 ;;Total ram usage:        1 bytes
  3035 ;; Hardware stack levels used:    1
  3036 ;; Hardware stack levels required when called:    6
  3037 ;; This function calls:
  3038 ;;		Nothing
  3039 ;; This function is called by:
  3040 ;;		_D_TMR0_Init
  3041 ;;		_initDoors
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text14
  3046  001D08                     __ptext14:
  3047                           	opt stack 0
  3048  001D08                     _D_TMR0_Enable:
  3049                           	opt stack 23
  3050                           
  3051                           ;incstack = 0
  3052                           ;D_TMR0_Enable@enable stored from wreg
  3053  001D08  0100               	movlb	0	; () banked
  3054  001D0A  6F75               	movwf	D_TMR0_Enable@enable& (0+255),b
  3055                           
  3056                           ;TMR0_Driver.c: 54: if (enable) {
  3057  001D0C  0100               	movlb	0	; () banked
  3058  001D0E  5175               	movf	D_TMR0_Enable@enable& (0+255),w,b
  3059  001D10  B4D8               	btfsc	status,2,c
  3060  001D12  D002               	goto	l200
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  3064  001D14  8ED5               	bsf	4053,7,c	;volatile
  3065                           
  3066                           ;TMR0_Driver.c: 56: } else {
  3067  001D16  0012               	return	
  3068  001D18                     l200:
  3069                           
  3070                           ; BSR set to: 0
  3071                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  3072  001D18  9ED5               	bcf	4053,7,c	;volatile
  3073  001D1A  0012               	return	
  3074  001D1C                     __end_of_D_TMR0_Enable:
  3075                           	opt stack 0
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           intcon2	equ	0xFF1
  3084                           postinc0	equ	0xFEE
  3085                           plusw0	equ	0xFEB
  3086                           wreg	equ	0xFE8
  3087                           postdec1	equ	0xFE5
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           plusw2	equ	0xFDB
  3093                           fsr2h	equ	0xFDA
  3094                           fsr2l	equ	0xFD9
  3095                           status	equ	0xFD8
  3096                           
  3097 ;; *************** function _D_PWM_SetPwm *****************
  3098 ;; Defined at:
  3099 ;;		line 44 in file "Drivers/PWM_Driver.c"
  3100 ;; Parameters:    Size  Location     Type
  3101 ;;  pwm             1    wreg     unsigned char 
  3102 ;; Auto vars:     Size  Location     Type
  3103 ;;  pwm             1   21[BANK0 ] unsigned char 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;                  1    wreg      void 
  3106 ;; Registers used:
  3107 ;;		wreg, status,2
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3113 ;;      Params:         0       0       0       0       0       0       0       0       0
  3114 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3115 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3116 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3117 ;;Total ram usage:        1 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:    6
  3120 ;; This function calls:
  3121 ;;		Nothing
  3122 ;; This function is called by:
  3123 ;;		_main
  3124 ;; This function uses a non-reentrant model
  3125 ;;
  3126                           
  3127                           	psect	text15
  3128  001BB6                     __ptext15:
  3129                           	opt stack 0
  3130  001BB6                     _D_PWM_SetPwm:
  3131                           	opt stack 24
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;incstack = 0
  3135                           ;D_PWM_SetPwm@pwm stored from wreg
  3136  001BB6  0100               	movlb	0	; () banked
  3137  001BB8  6F75               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  3138                           
  3139                           ;PWM_Driver.c: 45: if (pwm > 0) {
  3140  001BBA  0100               	movlb	0	; () banked
  3141  001BBC  5175               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  3142  001BBE  B4D8               	btfsc	status,2,c
  3143  001BC0  D00A               	goto	l218
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  3147  001BC2  B4CA               	btfsc	4042,2,c	;volatile
  3148  001BC4  D005               	goto	l219
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  3152  001BC6  50BD               	movf	4029,w,c	;volatile
  3153  001BC8  0BF0               	andlw	-16
  3154  001BCA  090C               	iorlw	12
  3155  001BCC  6EBD               	movwf	4029,c	;volatile
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  3159  001BCE  84CA               	bsf	4042,2,c	;volatile
  3160  001BD0                     l219:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;PWM_Driver.c: 49: }
  3164                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  3165                           
  3166                           ; BSR set to: 0
  3167  001BD0  C075  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  3168                           
  3169                           ;PWM_Driver.c: 51: } else {
  3170  001BD4  0012               	return	
  3171  001BD6                     l218:
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  3175  001BD6  90BD               	bcf	4029,0,c	;volatile
  3176  001BD8  92BD               	bcf	4029,1,c	;volatile
  3177  001BDA  94BD               	bcf	4029,2,c	;volatile
  3178  001BDC  96BD               	bcf	4029,3,c	;volatile
  3179                           
  3180                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  3181  001BDE  94CA               	bcf	4042,2,c	;volatile
  3182                           
  3183                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  3184  001BE0  9482               	bcf	3970,2,c	;volatile
  3185  001BE2  0012               	return	
  3186  001BE4                     __end_of_D_PWM_SetPwm:
  3187                           	opt stack 0
  3188                           tblptru	equ	0xFF8
  3189                           tblptrh	equ	0xFF7
  3190                           tblptrl	equ	0xFF6
  3191                           tablat	equ	0xFF5
  3192                           prodh	equ	0xFF4
  3193                           prodl	equ	0xFF3
  3194                           intcon	equ	0xFF2
  3195                           intcon2	equ	0xFF1
  3196                           postinc0	equ	0xFEE
  3197                           plusw0	equ	0xFEB
  3198                           wreg	equ	0xFE8
  3199                           postdec1	equ	0xFE5
  3200                           fsr1l	equ	0xFE1
  3201                           indf2	equ	0xFDF
  3202                           postinc2	equ	0xFDE
  3203                           postdec2	equ	0xFDD
  3204                           plusw2	equ	0xFDB
  3205                           fsr2h	equ	0xFDA
  3206                           fsr2l	equ	0xFD9
  3207                           status	equ	0xFD8
  3208                           
  3209 ;; *************** function _D_PWM_Init *****************
  3210 ;; Defined at:
  3211 ;;		line 31 in file "Drivers/PWM_Driver.c"
  3212 ;; Parameters:    Size  Location     Type
  3213 ;;		None
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;		None
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      void 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3225 ;;      Params:         0       0       0       0       0       0       0       0       0
  3226 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3228 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3229 ;;Total ram usage:        0 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    6
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text16
  3240  001CB8                     __ptext16:
  3241                           	opt stack 0
  3242  001CB8                     _D_PWM_Init:
  3243                           	opt stack 24
  3244                           
  3245                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;incstack = 0
  3249  001CB8  68CB               	setf	4043,c	;volatile
  3250                           
  3251                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  3252  001CBA  94CA               	bcf	4042,2,c	;volatile
  3253                           
  3254                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  3255  001CBC  50CA               	movf	4042,w,c	;volatile
  3256  001CBE  0BFC               	andlw	-4
  3257  001CC0  0901               	iorlw	1
  3258  001CC2  6ECA               	movwf	4042,c	;volatile
  3259                           
  3260                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  3261  001CC4  96CA               	bcf	4042,3,c	;volatile
  3262  001CC6  98CA               	bcf	4042,4,c	;volatile
  3263  001CC8  9ACA               	bcf	4042,5,c	;volatile
  3264  001CCA  9CCA               	bcf	4042,6,c	;volatile
  3265                           
  3266                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  3267  001CCC  0E1F               	movlw	31
  3268  001CCE  6EBE               	movwf	4030,c	;volatile
  3269                           
  3270                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  3271  001CD0  0ECF               	movlw	-49
  3272  001CD2  16BD               	andwf	4029,f,c	;volatile
  3273  001CD4  0012               	return		;funcret
  3274  001CD6                     __end_of_D_PWM_Init:
  3275                           	opt stack 0
  3276                           tblptru	equ	0xFF8
  3277                           tblptrh	equ	0xFF7
  3278                           tblptrl	equ	0xFF6
  3279                           tablat	equ	0xFF5
  3280                           prodh	equ	0xFF4
  3281                           prodl	equ	0xFF3
  3282                           intcon	equ	0xFF2
  3283                           intcon2	equ	0xFF1
  3284                           postinc0	equ	0xFEE
  3285                           plusw0	equ	0xFEB
  3286                           wreg	equ	0xFE8
  3287                           postdec1	equ	0xFE5
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           plusw2	equ	0xFDB
  3293                           fsr2h	equ	0xFDA
  3294                           fsr2l	equ	0xFD9
  3295                           status	equ	0xFD8
  3296                           
  3297 ;; *************** function _D_PORT_Init *****************
  3298 ;; Defined at:
  3299 ;;		line 32 in file "Drivers/PORT_Driver.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  1    wreg      void 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3313 ;;      Params:         0       0       0       0       0       0       0       0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3315 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3316 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3317 ;;Total ram usage:        0 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    6
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_main
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text17
  3328  001CD6                     __ptext17:
  3329                           	opt stack 0
  3330  001CD6                     _D_PORT_Init:
  3331                           	opt stack 24
  3332                           
  3333                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  3334                           
  3335                           ;incstack = 0
  3336  001CD6  0E00               	movlw	0
  3337  001CD8  6E92               	movwf	3986,c	;volatile
  3338  001CDA  0E00               	movlw	0
  3339  001CDC  6E80               	movwf	3968,c	;volatile
  3340                           
  3341                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  3342  001CDE  0E00               	movlw	0
  3343  001CE0  6E93               	movwf	3987,c	;volatile
  3344  001CE2  0E00               	movlw	0
  3345  001CE4  6E81               	movwf	3969,c	;volatile
  3346                           
  3347                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  3348  001CE6  0E00               	movlw	0
  3349  001CE8  6E94               	movwf	3988,c	;volatile
  3350  001CEA  0E00               	movlw	0
  3351  001CEC  6E82               	movwf	3970,c	;volatile
  3352                           
  3353                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  3354  001CEE  0E0F               	movlw	15
  3355  001CF0  6EC1               	movwf	4033,c	;volatile
  3356  001CF2  0012               	return		;funcret
  3357  001CF4                     __end_of_D_PORT_Init:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           intcon2	equ	0xFF1
  3367                           postinc0	equ	0xFEE
  3368                           plusw0	equ	0xFEB
  3369                           wreg	equ	0xFE8
  3370                           postdec1	equ	0xFE5
  3371                           fsr1l	equ	0xFE1
  3372                           indf2	equ	0xFDF
  3373                           postinc2	equ	0xFDE
  3374                           postdec2	equ	0xFDD
  3375                           plusw2	equ	0xFDB
  3376                           fsr2h	equ	0xFDA
  3377                           fsr2l	equ	0xFD9
  3378                           status	equ	0xFD8
  3379                           
  3380 ;; *************** function _C_DOOR_UnlockAll *****************
  3381 ;; Defined at:
  3382 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3383 ;; Parameters:    Size  Location     Type
  3384 ;;		None
  3385 ;; Auto vars:     Size  Location     Type
  3386 ;;  d               1   29[BANK0 ] unsigned char 
  3387 ;; Return value:  Size  Location     Type
  3388 ;;                  1    wreg      void 
  3389 ;; Registers used:
  3390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3391 ;; Tracked objects:
  3392 ;;		On entry : 0/0
  3393 ;;		On exit  : 0/0
  3394 ;;		Unchanged: 0/0
  3395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3396 ;;      Params:         0       0       0       0       0       0       0       0       0
  3397 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3398 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3399 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3400 ;;Total ram usage:        9 bytes
  3401 ;; Hardware stack levels used:    1
  3402 ;; Hardware stack levels required when called:    6
  3403 ;; This function calls:
  3404 ;;		Nothing
  3405 ;; This function is called by:
  3406 ;;		_main
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text18
  3411  0015D0                     __ptext18:
  3412                           	opt stack 0
  3413  0015D0                     _C_DOOR_UnlockAll:
  3414                           	opt stack 24
  3415                           
  3416                           ;DOOR_Controller.c: 96: uint8_t d;
  3417                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  3418                           
  3419                           ;incstack = 0
  3420  0015D0  0E00               	movlw	0
  3421  0015D2  0100               	movlb	0	; () banked
  3422  0015D4  6F7D               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  3423  0015D6  D048               	goto	l36
  3424  0015D8                     
  3425                           ; BSR set to: 0
  3426                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  3427                           
  3428                           ; BSR set to: 0
  3429  0015D8  517D               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3430  0015DA  0D0A               	mullw	10
  3431  0015DC  0E02               	movlw	2
  3432  0015DE  26F3               	addwf	prodl,f,c
  3433  0015E0  0E00               	movlw	0
  3434  0015E2  22F4               	addwfc	prodh,f,c
  3435  0015E4  0E00               	movlw	low _doors
  3436  0015E6  24F3               	addwf	prodl,w,c
  3437  0015E8  6ED9               	movwf	fsr2l,c
  3438  0015EA  0E02               	movlw	high _doors
  3439  0015EC  20F4               	addwfc	prodh,w,c
  3440  0015EE  6EDA               	movwf	fsr2h,c
  3441  0015F0  CFDE F075          	movff	postinc2,??_C_DOOR_UnlockAll
  3442  0015F4  CFDD F076          	movff	postdec2,??_C_DOOR_UnlockAll+1
  3443  0015F8  C075  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  3444  0015FC  C076  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  3445  001600  50DF               	movf	indf2,w,c
  3446  001602  0AFF               	xorlw	255
  3447  001604  6F77               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3448  001606  517D               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3449  001608  0D0A               	mullw	10
  3450  00160A  0E04               	movlw	4
  3451  00160C  26F3               	addwf	prodl,f,c
  3452  00160E  0E00               	movlw	0
  3453  001610  22F4               	addwfc	prodh,f,c
  3454  001612  0E00               	movlw	low _doors
  3455  001614  24F3               	addwf	prodl,w,c
  3456  001616  6ED9               	movwf	fsr2l,c
  3457  001618  0E02               	movlw	high _doors
  3458  00161A  20F4               	addwfc	prodh,w,c
  3459  00161C  6EDA               	movwf	fsr2h,c
  3460  00161E  50DF               	movf	indf2,w,c
  3461  001620  6F78               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  3462  001622  0E01               	movlw	1
  3463  001624  6F79               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  3464  001626  2B78               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3465  001628  D002               	goto	u2534
  3466  00162A                     u2535:
  3467  00162A  90D8               	bcf	status,0,c
  3468  00162C  3779               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  3469  00162E                     u2534:
  3470  00162E  2F78               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3471  001630  D7FC               	goto	u2535
  3472  001632  0100               	movlb	0	; () banked
  3473  001634  5179               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  3474  001636  1577               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3475  001638  6F7A               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  3476  00163A  517D               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3477  00163C  0D0A               	mullw	10
  3478  00163E  0E02               	movlw	2
  3479  001640  26F3               	addwf	prodl,f,c
  3480  001642  0E00               	movlw	0
  3481  001644  22F4               	addwfc	prodh,f,c
  3482  001646  0E00               	movlw	low _doors
  3483  001648  24F3               	addwf	prodl,w,c
  3484  00164A  6ED9               	movwf	fsr2l,c
  3485  00164C  0E02               	movlw	high _doors
  3486  00164E  20F4               	addwfc	prodh,w,c
  3487  001650  6EDA               	movwf	fsr2h,c
  3488  001652  CFDE F07B          	movff	postinc2,??_C_DOOR_UnlockAll+6
  3489  001656  CFDD F07C          	movff	postdec2,??_C_DOOR_UnlockAll+7
  3490  00165A  C07B  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  3491  00165E  C07C  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  3492  001662  517A               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  3493  001664  1ADF               	xorwf	indf2,f,c
  3494                           
  3495                           ; BSR set to: 0
  3496  001666  2B7D               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  3497  001668                     l36:
  3498                           
  3499                           ; BSR set to: 0
  3500                           
  3501                           ; BSR set to: 0
  3502  001668  517D               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3503  00166A  6F75               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  3504  00166C  6B76               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  3505  00166E  51A8               	movf	_door_cnt& (0+255),w,b
  3506  001670  5D75               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  3507  001672  5176               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  3508  001674  0A80               	xorlw	128
  3509  001676  6F77               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3510  001678  51A9               	movf	(_door_cnt+1)& (0+255),w,b
  3511  00167A  0A80               	xorlw	128
  3512  00167C  5977               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3513  00167E  B0D8               	btfsc	status,0,c
  3514  001680  0012               	return	
  3515  001682  D7AA               	goto	l37
  3516  001684                     __end_of_C_DOOR_UnlockAll:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           tblptrh	equ	0xFF7
  3520                           tblptrl	equ	0xFF6
  3521                           tablat	equ	0xFF5
  3522                           prodh	equ	0xFF4
  3523                           prodl	equ	0xFF3
  3524                           intcon	equ	0xFF2
  3525                           intcon2	equ	0xFF1
  3526                           postinc0	equ	0xFEE
  3527                           plusw0	equ	0xFEB
  3528                           wreg	equ	0xFE8
  3529                           postdec1	equ	0xFE5
  3530                           fsr1l	equ	0xFE1
  3531                           indf2	equ	0xFDF
  3532                           postinc2	equ	0xFDE
  3533                           postdec2	equ	0xFDD
  3534                           plusw2	equ	0xFDB
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _C_DOOR_SendStates *****************
  3540 ;; Defined at:
  3541 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;  com             3   55[BANK0 ] unsigned char [3]
  3546 ;;  mes             2   58[BANK0 ] unsigned char [2]
  3547 ;;  d               1   60[BANK0 ] unsigned char 
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3557 ;;      Params:         0       0       0       0       0       0       0       0       0
  3558 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3559 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3560 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3561 ;;Total ram usage:        9 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    9
  3564 ;; This function calls:
  3565 ;;		_D_UART_Write
  3566 ;;		_commandAndMessage
  3567 ;; This function is called by:
  3568 ;;		_main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text19
  3573  001278                     __ptext19:
  3574                           	opt stack 0
  3575  001278                     _C_DOOR_SendStates:
  3576                           	opt stack 21
  3577                           
  3578                           ;DOOR_Controller.c: 110: uint8_t d;
  3579                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  3580                           
  3581                           ; BSR set to: 0
  3582                           ;incstack = 0
  3583  001278  0E00               	movlw	0
  3584  00127A  0100               	movlb	0	; () banked
  3585  00127C  6F9C               	movwf	C_DOOR_SendStates@d& (0+255),b
  3586  00127E  D065               	goto	l48
  3587  001280                     
  3588                           ; BSR set to: 0
  3589                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  3590                           
  3591                           ; BSR set to: 0
  3592  001280  519C               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3593  001282  0D0A               	mullw	10
  3594  001284  0E06               	movlw	6
  3595  001286  26F3               	addwf	prodl,f,c
  3596  001288  0E00               	movlw	0
  3597  00128A  22F4               	addwfc	prodh,f,c
  3598  00128C  0E00               	movlw	low _doors
  3599  00128E  24F3               	addwf	prodl,w,c
  3600  001290  6ED9               	movwf	fsr2l,c
  3601  001292  0E02               	movlw	high _doors
  3602  001294  20F4               	addwfc	prodh,w,c
  3603  001296  6EDA               	movwf	fsr2h,c
  3604  001298  519C               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3605  00129A  0D0A               	mullw	10
  3606  00129C  0E05               	movlw	5
  3607  00129E  26F3               	addwf	prodl,f,c
  3608  0012A0  0E00               	movlw	0
  3609  0012A2  22F4               	addwfc	prodh,f,c
  3610  0012A4  0E00               	movlw	low _doors
  3611  0012A6  24F3               	addwf	prodl,w,c
  3612  0012A8  6EE1               	movwf	fsr1l,c
  3613  0012AA  0E02               	movlw	high _doors
  3614  0012AC  20F4               	addwfc	prodh,w,c
  3615  0012AE  6EE2               	movwf	fsr1h,c
  3616  0012B0  50DE               	movf	postinc2,w,c
  3617  0012B2  18E6               	xorwf	postinc1,w,c
  3618  0012B4  B4D8               	btfsc	status,2,c
  3619  0012B6  D048               	goto	l50
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;DOOR_Controller.c: 114: char com[3];
  3623                           ;DOOR_Controller.c: 115: char mes[2];
  3624                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  3625  0012B8  519C               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3626  0012BA  0D0A               	mullw	10
  3627  0012BC  0E00               	movlw	low _doors
  3628  0012BE  24F3               	addwf	prodl,w,c
  3629  0012C0  6ED9               	movwf	fsr2l,c
  3630  0012C2  0E02               	movlw	high _doors
  3631  0012C4  20F4               	addwfc	prodh,w,c
  3632  0012C6  6EDA               	movwf	fsr2h,c
  3633  0012C8  EE00  F075         	lfsr	0,commandAndMessage@door
  3634  0012CC  0E09               	movlw	9
  3635  0012CE                     u2601:
  3636  0012CE  CFDB FFEB          	movff	plusw2,plusw0
  3637  0012D2  06E8               	decf	wreg,f,c
  3638  0012D4  E2FC               	bc	u2601
  3639  0012D6  0E97               	movlw	low C_DOOR_SendStates@com
  3640  0012D8  6F7F               	movwf	commandAndMessage@com& (0+255),b
  3641  0012DA  0E00               	movlw	high C_DOOR_SendStates@com
  3642  0012DC  6F80               	movwf	(commandAndMessage@com+1)& (0+255),b
  3643  0012DE  0E9A               	movlw	low C_DOOR_SendStates@mes
  3644  0012E0  6F81               	movwf	commandAndMessage@mes& (0+255),b
  3645  0012E2  0E00               	movlw	high C_DOOR_SendStates@mes
  3646  0012E4  6F82               	movwf	(commandAndMessage@mes+1)& (0+255),b
  3647  0012E6  ECA7  F00C         	call	_commandAndMessage	;wreg free
  3648                           
  3649                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  3650  0012EA  0E97               	movlw	low C_DOOR_SendStates@com
  3651  0012EC  0100               	movlb	0	; () banked
  3652  0012EE  6F8F               	movwf	D_UART_Write@command& (0+255),b
  3653  0012F0  0E00               	movlw	high C_DOOR_SendStates@com
  3654  0012F2  6F90               	movwf	(D_UART_Write@command+1)& (0+255),b
  3655  0012F4  0E9A               	movlw	low C_DOOR_SendStates@mes
  3656  0012F6  6F91               	movwf	D_UART_Write@data& (0+255),b
  3657  0012F8  0E00               	movlw	high C_DOOR_SendStates@mes
  3658  0012FA  6F92               	movwf	(D_UART_Write@data+1)& (0+255),b
  3659  0012FC  ECB3  F009         	call	_D_UART_Write	;wreg free
  3660                           
  3661                           ;DOOR_Controller.c: 120: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3662  001300  0E06               	movlw	6
  3663  001302  0100               	movlb	0	; () banked
  3664  001304  6F94               	movwf	??_C_DOOR_SendStates& (0+255),b
  3665  001306  0E30               	movlw	48
  3666  001308                     u2947:
  3667  001308  2EE8               	decfsz	wreg,f,c
  3668  00130A  D7FE               	bra	u2947
  3669  00130C  2F94               	decfsz	??_C_DOOR_SendStates& (0+255),f,b
  3670  00130E  D7FC               	bra	u2947
  3671  001310  F000               	nop	
  3672                           
  3673                           ;DOOR_Controller.c: 122: doors[d].was_open = doors[d].is_open;
  3674  001312  0100               	movlb	0	; () banked
  3675  001314  519C               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3676  001316  0D0A               	mullw	10
  3677  001318  0E06               	movlw	6
  3678  00131A  26F3               	addwf	prodl,f,c
  3679  00131C  0E00               	movlw	0
  3680  00131E  22F4               	addwfc	prodh,f,c
  3681  001320  0E00               	movlw	low _doors
  3682  001322  24F3               	addwf	prodl,w,c
  3683  001324  6ED9               	movwf	fsr2l,c
  3684  001326  0E02               	movlw	high _doors
  3685  001328  20F4               	addwfc	prodh,w,c
  3686  00132A  6EDA               	movwf	fsr2h,c
  3687  00132C  519C               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3688  00132E  0D0A               	mullw	10
  3689  001330  0E05               	movlw	5
  3690  001332  26F3               	addwf	prodl,f,c
  3691  001334  0E00               	movlw	0
  3692  001336  22F4               	addwfc	prodh,f,c
  3693  001338  0E00               	movlw	low _doors
  3694  00133A  24F3               	addwf	prodl,w,c
  3695  00133C  6EE1               	movwf	fsr1l,c
  3696  00133E  0E02               	movlw	high _doors
  3697  001340  20F4               	addwfc	prodh,w,c
  3698  001342  6EE2               	movwf	fsr1h,c
  3699  001344  CFDF FFE7          	movff	indf2,indf1
  3700  001348                     l50:
  3701                           
  3702                           ; BSR set to: 0
  3703                           
  3704                           ; BSR set to: 0
  3705  001348  2B9C               	incf	C_DOOR_SendStates@d& (0+255),f,b
  3706  00134A                     l48:
  3707                           
  3708                           ; BSR set to: 0
  3709                           
  3710                           ; BSR set to: 0
  3711  00134A  519C               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3712  00134C  6F94               	movwf	??_C_DOOR_SendStates& (0+255),b
  3713  00134E  6B95               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  3714  001350  51A8               	movf	_door_cnt& (0+255),w,b
  3715  001352  5D94               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  3716  001354  5195               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  3717  001356  0A80               	xorlw	128
  3718  001358  6F96               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  3719  00135A  51A9               	movf	(_door_cnt+1)& (0+255),w,b
  3720  00135C  0A80               	xorlw	128
  3721  00135E  5996               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  3722  001360  B0D8               	btfsc	status,0,c
  3723  001362  0012               	return	
  3724  001364  D78D               	goto	l49
  3725  001366                     __end_of_C_DOOR_SendStates:
  3726                           	opt stack 0
  3727                           tblptru	equ	0xFF8
  3728                           tblptrh	equ	0xFF7
  3729                           tblptrl	equ	0xFF6
  3730                           tablat	equ	0xFF5
  3731                           prodh	equ	0xFF4
  3732                           prodl	equ	0xFF3
  3733                           intcon	equ	0xFF2
  3734                           intcon2	equ	0xFF1
  3735                           postinc0	equ	0xFEE
  3736                           plusw0	equ	0xFEB
  3737                           wreg	equ	0xFE8
  3738                           indf1	equ	0xFE7
  3739                           postinc1	equ	0xFE6
  3740                           postdec1	equ	0xFE5
  3741                           fsr1h	equ	0xFE2
  3742                           fsr1l	equ	0xFE1
  3743                           indf2	equ	0xFDF
  3744                           postinc2	equ	0xFDE
  3745                           postdec2	equ	0xFDD
  3746                           plusw2	equ	0xFDB
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751 ;; *************** function _commandAndMessage *****************
  3752 ;; Defined at:
  3753 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  door           10   21[BANK0 ] struct .
  3756 ;;  com             2   31[BANK0 ] PTR unsigned char 
  3757 ;;		 -> C_DOOR_SendStates@com(3), 
  3758 ;;  mes             2   33[BANK0 ] PTR unsigned char 
  3759 ;;		 -> C_DOOR_SendStates@mes(2), 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;		None
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3766 ;; Tracked objects:
  3767 ;;		On entry : 0/0
  3768 ;;		On exit  : 0/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3771 ;;      Params:         0      14       0       0       0       0       0       0       0
  3772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3774 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3775 ;;Total ram usage:       14 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    6
  3778 ;; This function calls:
  3779 ;;		Nothing
  3780 ;; This function is called by:
  3781 ;;		_C_DOOR_SendStates
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           	psect	text20
  3786  00194E                     __ptext20:
  3787                           	opt stack 0
  3788  00194E                     _commandAndMessage:
  3789                           	opt stack 23
  3790                           
  3791                           ;DOOR_Controller.c: 33: com[0] = 'D';
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;incstack = 0
  3795  00194E  C07F  FFD9         	movff	commandAndMessage@com,fsr2l
  3796  001952  C080  FFDA         	movff	commandAndMessage@com+1,fsr2h
  3797  001956  0E44               	movlw	68
  3798  001958  6EDF               	movwf	indf2,c
  3799                           
  3800                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  3801  00195A  0100               	movlb	0	; () banked
  3802  00195C  EE20 F001          	lfsr	2,1
  3803  001960  517F               	movf	commandAndMessage@com& (0+255),w,b
  3804  001962  26D9               	addwf	fsr2l,f,c
  3805  001964  5180               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3806  001966  22DA               	addwfc	fsr2h,f,c
  3807  001968  5175               	movf	commandAndMessage@door& (0+255),w,b
  3808  00196A  0F30               	addlw	48
  3809  00196C  6EDF               	movwf	indf2,c
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;DOOR_Controller.c: 35: com[2] = '\0';
  3813  00196E  EE20 F002          	lfsr	2,2
  3814  001972  517F               	movf	commandAndMessage@com& (0+255),w,b
  3815  001974  26D9               	addwf	fsr2l,f,c
  3816  001976  5180               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3817  001978  22DA               	addwfc	fsr2h,f,c
  3818  00197A  0E00               	movlw	0
  3819  00197C  6EDF               	movwf	indf2,c
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;DOOR_Controller.c: 38: if (door.is_open) {
  3823  00197E  517B               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3824  001980  B4D8               	btfsc	status,2,c
  3825  001982  D006               	goto	l19
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  3829  001984  C081  FFD9         	movff	commandAndMessage@mes,fsr2l
  3830  001988  C082  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3831  00198C  0E43               	movlw	67
  3832  00198E  D005               	goto	L2
  3833  001990                     l19:
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  3837                           
  3838                           ; BSR set to: 0
  3839  001990  C081  FFD9         	movff	commandAndMessage@mes,fsr2l
  3840  001994  C082  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3841  001998  0E4F               	movlw	79
  3842  00199A                     L2:
  3843  00199A  6EDF               	movwf	indf2,c
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;DOOR_Controller.c: 42: }
  3847                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  3848                           
  3849                           ; BSR set to: 0
  3850  00199C  EE20 F001          	lfsr	2,1
  3851  0019A0  5181               	movf	commandAndMessage@mes& (0+255),w,b
  3852  0019A2  26D9               	addwf	fsr2l,f,c
  3853  0019A4  5182               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3854  0019A6  22DA               	addwfc	fsr2h,f,c
  3855  0019A8  0E00               	movlw	0
  3856  0019AA  6EDF               	movwf	indf2,c
  3857                           
  3858                           ; BSR set to: 0
  3859  0019AC  0012               	return		;funcret
  3860  0019AE                     __end_of_commandAndMessage:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           intcon	equ	0xFF2
  3869                           intcon2	equ	0xFF1
  3870                           postinc0	equ	0xFEE
  3871                           plusw0	equ	0xFEB
  3872                           wreg	equ	0xFE8
  3873                           indf1	equ	0xFE7
  3874                           postinc1	equ	0xFE6
  3875                           postdec1	equ	0xFE5
  3876                           fsr1h	equ	0xFE2
  3877                           fsr1l	equ	0xFE1
  3878                           indf2	equ	0xFDF
  3879                           postinc2	equ	0xFDE
  3880                           postdec2	equ	0xFDD
  3881                           plusw2	equ	0xFDB
  3882                           fsr2h	equ	0xFDA
  3883                           fsr2l	equ	0xFD9
  3884                           status	equ	0xFD8
  3885                           
  3886 ;; *************** function _D_UART_Write *****************
  3887 ;; Defined at:
  3888 ;;		line 207 in file "Drivers/UART_Driver.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;  command         2   47[BANK0 ] PTR const unsigned char 
  3891 ;;		 -> STR_19(2), C_DOOR_SendStates@com(3), 
  3892 ;;  data            2   49[BANK0 ] PTR const unsigned char 
  3893 ;;		 -> STR_20(2), C_DOOR_SendStates@mes(2), 
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;                  1    wreg      void 
  3898 ;; Registers used:
  3899 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3905 ;;      Params:         0       4       0       0       0       0       0       0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3907 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3908 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3909 ;;Total ram usage:        5 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    8
  3912 ;; This function calls:
  3913 ;;		_printf
  3914 ;; This function is called by:
  3915 ;;		_C_DOOR_SendStates
  3916 ;;		_main
  3917 ;; This function uses a non-reentrant model
  3918 ;;
  3919                           
  3920                           	psect	text21
  3921  001366                     __ptext21:
  3922                           	opt stack 0
  3923  001366                     _D_UART_Write:
  3924                           	opt stack 22
  3925                           
  3926                           ;UART_Driver.c: 208: printf(startCharacter);
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;incstack = 0
  3930  001366  C042  F081         	movff	_startCharacter,printf@f
  3931  00136A  C043  F082         	movff	_startCharacter+1,printf@f+1
  3932  00136E  0100               	movlb	0	; () banked
  3933  001370  5181               	movf	printf@f& (0+255),w,b
  3934  001372  1182               	iorwf	(printf@f+1)& (0+255),w,b
  3935  001374  A4D8               	btfss	status,2,c
  3936  001376  0E00               	movlw	low (__mediumconst shr (0+16))
  3937  001378  6F83               	movwf	(printf@f+2)& (0+255),b
  3938  00137A  EC80  F005         	call	_printf	;wreg free
  3939                           
  3940                           ;UART_Driver.c: 210: printf(messageCharacter);
  3941  00137E  C0AA  F081         	movff	_messageCharacter,printf@f
  3942  001382  C0AB  F082         	movff	_messageCharacter+1,printf@f+1
  3943  001386  0100               	movlb	0	; () banked
  3944  001388  5181               	movf	printf@f& (0+255),w,b
  3945  00138A  1182               	iorwf	(printf@f+1)& (0+255),w,b
  3946  00138C  A4D8               	btfss	status,2,c
  3947  00138E  0E00               	movlw	low (__mediumconst shr (0+16))
  3948  001390  6F83               	movwf	(printf@f+2)& (0+255),b
  3949  001392  EC80  F005         	call	_printf	;wreg free
  3950                           
  3951                           ;UART_Driver.c: 211: printf(deviceName);
  3952  001396  C0A5  F081         	movff	_deviceName,printf@f
  3953  00139A  C0A6  F082         	movff	_deviceName+1,printf@f+1
  3954  00139E  C0A7  F083         	movff	_deviceName+2,printf@f+2
  3955  0013A2  EC80  F005         	call	_printf	;wreg free
  3956                           
  3957                           ;UART_Driver.c: 213: printf(":");printf(command);
  3958  0013A6  0E46               	movlw	low STR_6
  3959  0013A8  0100               	movlb	0	; () banked
  3960  0013AA  6F81               	movwf	printf@f& (0+255),b
  3961  0013AC  0E08               	movlw	high STR_6
  3962  0013AE  6F82               	movwf	(printf@f+1)& (0+255),b
  3963  0013B0  5181               	movf	printf@f& (0+255),w,b
  3964  0013B2  1182               	iorwf	(printf@f+1)& (0+255),w,b
  3965  0013B4  A4D8               	btfss	status,2,c
  3966  0013B6  0E00               	movlw	low (__mediumconst shr (0+16))
  3967  0013B8  6F83               	movwf	(printf@f+2)& (0+255),b
  3968  0013BA  EC80  F005         	call	_printf	;wreg free
  3969  0013BE  C08F  F081         	movff	D_UART_Write@command,printf@f
  3970  0013C2  C090  F082         	movff	D_UART_Write@command+1,printf@f+1
  3971  0013C6  0100               	movlb	0	; () banked
  3972  0013C8  6B83               	clrf	(printf@f+2)& (0+255),b
  3973  0013CA  5181               	movf	printf@f& (0+255),w,b
  3974  0013CC  1182               	iorwf	(printf@f+1)& (0+255),w,b
  3975  0013CE  B4D8               	btfsc	status,2,c
  3976  0013D0  D005               	goto	u2451
  3977  0013D2  0E07               	movlw	(high __ramtop+-1)
  3978  0013D4  6590               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3979  0013D6  D001               	goto	u24511
  3980  0013D8  D001               	goto	u2451
  3981  0013DA                     u24511:
  3982  0013DA  8B83               	bsf	(printf@f+2)& (0+255),5,b
  3983  0013DC                     u2451:
  3984  0013DC  EC80  F005         	call	_printf	;wreg free
  3985                           
  3986                           ;UART_Driver.c: 215: printf(":");printf(data);
  3987  0013E0  0E46               	movlw	low STR_6
  3988  0013E2  0100               	movlb	0	; () banked
  3989  0013E4  6F81               	movwf	printf@f& (0+255),b
  3990  0013E6  0E08               	movlw	high STR_6
  3991  0013E8  6F82               	movwf	(printf@f+1)& (0+255),b
  3992  0013EA  5181               	movf	printf@f& (0+255),w,b
  3993  0013EC  1182               	iorwf	(printf@f+1)& (0+255),w,b
  3994  0013EE  A4D8               	btfss	status,2,c
  3995  0013F0  0E00               	movlw	low (__mediumconst shr (0+16))
  3996  0013F2  6F83               	movwf	(printf@f+2)& (0+255),b
  3997  0013F4  EC80  F005         	call	_printf	;wreg free
  3998  0013F8  C091  F081         	movff	D_UART_Write@data,printf@f
  3999  0013FC  C092  F082         	movff	D_UART_Write@data+1,printf@f+1
  4000  001400  0100               	movlb	0	; () banked
  4001  001402  6B83               	clrf	(printf@f+2)& (0+255),b
  4002  001404  5181               	movf	printf@f& (0+255),w,b
  4003  001406  1182               	iorwf	(printf@f+1)& (0+255),w,b
  4004  001408  B4D8               	btfsc	status,2,c
  4005  00140A  D005               	goto	u2461
  4006  00140C  0E07               	movlw	(high __ramtop+-1)
  4007  00140E  6592               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  4008  001410  D001               	goto	u24611
  4009  001412  D001               	goto	u2461
  4010  001414                     u24611:
  4011  001414  8B83               	bsf	(printf@f+2)& (0+255),5,b
  4012  001416                     u2461:
  4013  001416  EC80  F005         	call	_printf	;wreg free
  4014                           
  4015                           ;UART_Driver.c: 217: printf(stopCharacter);
  4016  00141A  C040  F081         	movff	_stopCharacter,printf@f
  4017  00141E  C041  F082         	movff	_stopCharacter+1,printf@f+1
  4018  001422  0100               	movlb	0	; () banked
  4019  001424  5181               	movf	printf@f& (0+255),w,b
  4020  001426  1182               	iorwf	(printf@f+1)& (0+255),w,b
  4021  001428  A4D8               	btfss	status,2,c
  4022  00142A  0E00               	movlw	low (__mediumconst shr (0+16))
  4023  00142C  6F83               	movwf	(printf@f+2)& (0+255),b
  4024  00142E  EC80  F005         	call	_printf	;wreg free
  4025                           
  4026                           ;UART_Driver.c: 218: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  4027  001432  0E06               	movlw	6
  4028  001434  0100               	movlb	0	; () banked
  4029  001436  6F93               	movwf	??_D_UART_Write& (0+255),b
  4030  001438  0E30               	movlw	48
  4031  00143A                     u2957:
  4032  00143A  2EE8               	decfsz	wreg,f,c
  4033  00143C  D7FE               	bra	u2957
  4034  00143E  2F93               	decfsz	??_D_UART_Write& (0+255),f,b
  4035  001440  D7FC               	bra	u2957
  4036  001442  F000               	nop	
  4037  001444  0012               	return		;funcret
  4038  001446                     __end_of_D_UART_Write:
  4039                           	opt stack 0
  4040                           tblptru	equ	0xFF8
  4041                           tblptrh	equ	0xFF7
  4042                           tblptrl	equ	0xFF6
  4043                           tablat	equ	0xFF5
  4044                           prodh	equ	0xFF4
  4045                           prodl	equ	0xFF3
  4046                           intcon	equ	0xFF2
  4047                           intcon2	equ	0xFF1
  4048                           postinc0	equ	0xFEE
  4049                           plusw0	equ	0xFEB
  4050                           wreg	equ	0xFE8
  4051                           indf1	equ	0xFE7
  4052                           postinc1	equ	0xFE6
  4053                           postdec1	equ	0xFE5
  4054                           fsr1h	equ	0xFE2
  4055                           fsr1l	equ	0xFE1
  4056                           indf2	equ	0xFDF
  4057                           postinc2	equ	0xFDE
  4058                           postdec2	equ	0xFDD
  4059                           plusw2	equ	0xFDB
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _printf *****************
  4065 ;; Defined at:
  4066 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  f               3   33[BANK0 ] PTR const unsigned char 
  4069 ;;		 -> STR_20(2), STR_19(2), STR_17(2), STR_11(2), 
  4070 ;;		 -> STR_10(3), STR_9(2), STR_8(2), STR_7(2), 
  4071 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  4072 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  4073 ;;		 -> C_DOOR_SendStates@com(3), 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;  idx             1   39[BANK0 ] unsigned char 
  4076 ;;  tmpval          4    0        struct .
  4077 ;;  cp              3    0        PTR const unsigned char 
  4078 ;;  val             2   44[BANK0 ] unsigned int 
  4079 ;;  ap              2   40[BANK0 ] PTR void [1]
  4080 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4081 ;;  len             2    0        unsigned int 
  4082 ;;  c               1   46[BANK0 ] char 
  4083 ;;  flag            1   43[BANK0 ] unsigned char 
  4084 ;;  prec            1   42[BANK0 ] char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2   33[BANK0 ] int 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4094 ;;      Params:         0       5       0       0       0       0       0       0       0
  4095 ;;      Locals:         0       8       0       0       0       0       0       0       0
  4096 ;;      Temps:          0       1       0       0       0       0       0       0       0
  4097 ;;      Totals:         0      14       0       0       0       0       0       0       0
  4098 ;;Total ram usage:       14 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:    7
  4101 ;; This function calls:
  4102 ;;		___lwdiv
  4103 ;;		___lwmod
  4104 ;;		_putch
  4105 ;; This function is called by:
  4106 ;;		_D_UART_Write
  4107 ;;		_D_UART_WriteInt
  4108 ;; This function uses a non-reentrant model
  4109 ;;
  4110                           
  4111                           	psect	text22
  4112  000B00                     __ptext22:
  4113                           	opt stack 0
  4114  000B00                     _printf:
  4115                           	opt stack 22
  4116                           
  4117                           ;doprnt.c: 466: va_list ap;
  4118                           ;doprnt.c: 499: signed char c;
  4119                           ;doprnt.c: 506: signed char prec;
  4120                           ;doprnt.c: 508: unsigned char flag;
  4121                           ;doprnt.c: 523: union {
  4122                           ;doprnt.c: 524: unsigned long vd;
  4123                           ;doprnt.c: 525: double integ;
  4124                           ;doprnt.c: 526: } tmpval;
  4125                           ;doprnt.c: 528: unsigned int val;
  4126                           ;doprnt.c: 529: unsigned len;
  4127                           ;doprnt.c: 530: const char * cp;
  4128                           ;doprnt.c: 533: *ap = __va_start();
  4129                           
  4130                           ;incstack = 0
  4131  000B00  0E84               	movlw	low (?_printf+3)
  4132  000B02  0100               	movlb	0	; () banked
  4133  000B04  6F88               	movwf	printf@ap& (0+255),b
  4134  000B06  0E00               	movlw	high (?_printf+3)
  4135  000B08  6F89               	movwf	(printf@ap+1)& (0+255),b
  4136                           
  4137                           ;doprnt.c: 536: while(c = *f++) {
  4138  000B0A  D10A               	goto	u2360
  4139  000B0C                     
  4140                           ; BSR set to: 0
  4141                           ;doprnt.c: 538: if(c != '%')
  4142                           
  4143                           ; BSR set to: 0
  4144  000B0C  0E25               	movlw	37
  4145  000B0E  198E               	xorwf	printf@c& (0+255),w,b
  4146  000B10  B4D8               	btfsc	status,2,c
  4147  000B12  D004               	goto	l384
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;doprnt.c: 540: {
  4151                           ;doprnt.c: 541: (putch(c) );
  4152  000B14  518E               	movf	printf@c& (0+255),w,b
  4153  000B16  ECF2  F00D         	call	_putch
  4154                           
  4155                           ;doprnt.c: 542: continue;
  4156  000B1A  D102               	goto	u2360
  4157  000B1C                     l384:
  4158                           
  4159                           ;doprnt.c: 543: }
  4160                           ;doprnt.c: 548: flag = 0;
  4161  000B1C  0E00               	movlw	0
  4162  000B1E  0100               	movlb	0	; () banked
  4163  000B20  6F8B               	movwf	printf@flag& (0+255),b
  4164                           
  4165                           ;doprnt.c: 635: switch(c = *f++) {
  4166  000B22  D006               	goto	l385
  4167  000B24                     
  4168                           ; BSR set to: 0
  4169                           ;doprnt.c: 721: flag |= 0x80;
  4170                           
  4171                           ; BSR set to: 0
  4172  000B24  8F8B               	bsf	printf@flag& (0+255),7,b
  4173                           
  4174                           ;doprnt.c: 723: break;
  4175  000B26  D02A               	goto	l390
  4176  000B28                     
  4177                           ; BSR set to: 0
  4178                           ;doprnt.c: 809: (putch(c) );
  4179                           
  4180                           ; BSR set to: 0
  4181  000B28  518E               	movf	printf@c& (0+255),w,b
  4182  000B2A  ECF2  F00D         	call	_putch
  4183                           
  4184                           ;doprnt.c: 810: continue;
  4185  000B2E  D0F8               	goto	u2360
  4186  000B30                     l385:
  4187  000B30  C081  FFF6         	movff	printf@f,tblptrl
  4188  000B34  C082  FFF7         	movff	printf@f+1,tblptrh
  4189  000B38  C083  FFF8         	movff	printf@f+2,tblptru
  4190  000B3C  0E01               	movlw	1
  4191  000B3E  0100               	movlb	0	; () banked
  4192  000B40  2781               	addwf	printf@f& (0+255),f,b
  4193  000B42  0E00               	movlw	0
  4194  000B44  2382               	addwfc	(printf@f+1)& (0+255),f,b
  4195  000B46  2383               	addwfc	(printf@f+2)& (0+255),f,b
  4196  000B48  BAF8               	btfsc	tblptru,5,c
  4197  000B4A  D003               	bra	u2267
  4198  000B4C  0008               	tblrd		*
  4199  000B4E  50F5               	movf	tablat,w,c
  4200  000B50  D005               	bra	u2260
  4201  000B52                     u2267:
  4202  000B52  CFF6 FFE9          	movff	tblptrl,fsr0l
  4203  000B56  CFF7 FFEA          	movff	tblptrh,fsr0h
  4204  000B5A  50EF               	movf	indf0,w,c
  4205  000B5C                     u2260:
  4206  000B5C  0100               	movlb	0	; () banked
  4207  000B5E  6F8E               	movwf	printf@c& (0+255),b
  4208  000B60  518E               	movf	printf@c& (0+255),w,b
  4209                           
  4210                           ; Switch size 1, requested type "space"
  4211                           ; Number of cases is 4, Range of values is 0 to 120
  4212                           ; switch strategies available:
  4213                           ; Name         Instructions Cycles
  4214                           ; simple_byte           13     7 (average)
  4215                           ;	Chosen strategy is simple_byte
  4216  000B62  0A00               	xorlw	0	; case 0
  4217  000B64  B4D8               	btfsc	status,2,c
  4218  000B66  0012               	return	
  4219  000B68  0A64               	xorlw	100	; case 100
  4220  000B6A  B4D8               	btfsc	status,2,c
  4221  000B6C  D007               	goto	l390
  4222  000B6E  0A0D               	xorlw	13	; case 105
  4223  000B70  B4D8               	btfsc	status,2,c
  4224  000B72  D004               	goto	l390
  4225  000B74  0A11               	xorlw	17	; case 120
  4226  000B76  B4D8               	btfsc	status,2,c
  4227  000B78  D7D5               	goto	l391
  4228  000B7A  D7D6               	goto	l392
  4229  000B7C                     l390:
  4230                           
  4231                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4232  000B7C  0100               	movlb	0	; () banked
  4233  000B7E  BF8B               	btfsc	printf@flag& (0+255),7,b
  4234  000B80  D015               	goto	l393
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;doprnt.c: 1253: {
  4238                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4239  000B82  C088  FFD9         	movff	printf@ap,fsr2l
  4240  000B86  C089  FFDA         	movff	printf@ap+1,fsr2h
  4241  000B8A  CFDE F08C          	movff	postinc2,printf@val
  4242  000B8E  CFDD F08D          	movff	postdec2,printf@val+1
  4243                           
  4244                           ; BSR set to: 0
  4245  000B92  0E02               	movlw	2
  4246  000B94  2788               	addwf	printf@ap& (0+255),f,b
  4247  000B96  0E00               	movlw	0
  4248  000B98  2389               	addwfc	(printf@ap+1)& (0+255),f,b
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;doprnt.c: 1261: if((int)val < 0) {
  4252  000B9A  AF8D               	btfss	(printf@val+1)& (0+255),7,b
  4253  000B9C  D04A               	goto	l396
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 1262: flag |= 0x03;
  4257  000B9E  0E03               	movlw	3
  4258  000BA0  138B               	iorwf	printf@flag& (0+255),f,b
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;doprnt.c: 1263: val = -val;
  4262  000BA2  6D8C               	negf	printf@val& (0+255),b
  4263  000BA4  1F8D               	comf	(printf@val+1)& (0+255),f,b
  4264  000BA6  B0D8               	btfsc	status,0,c
  4265  000BA8  2B8D               	incf	(printf@val+1)& (0+255),f,b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;doprnt.c: 1264: }
  4269                           ;doprnt.c: 1266: }
  4270  000BAA  D043               	goto	l396
  4271  000BAC                     l393:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;doprnt.c: 1268: else
  4275                           ;doprnt.c: 1273: {
  4276                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4277                           
  4278                           ; BSR set to: 0
  4279  000BAC  C088  FFD9         	movff	printf@ap,fsr2l
  4280  000BB0  C089  FFDA         	movff	printf@ap+1,fsr2h
  4281  000BB4  CFDE F08C          	movff	postinc2,printf@val
  4282  000BB8  CFDD F08D          	movff	postdec2,printf@val+1
  4283                           
  4284                           ; BSR set to: 0
  4285  000BBC  0E02               	movlw	2
  4286  000BBE  2788               	addwf	printf@ap& (0+255),f,b
  4287  000BC0  0E00               	movlw	0
  4288  000BC2  2389               	addwfc	(printf@ap+1)& (0+255),f,b
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;doprnt.c: 1287: }
  4292                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4293  000BC4  D036               	goto	l396
  4294  000BC6                     
  4295                           ; BSR set to: 0
  4296                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4297                           
  4298                           ; BSR set to: 0
  4299  000BC6  0E01               	movlw	1
  4300  000BC8  6F8E               	movwf	printf@c& (0+255),b
  4301  000BCA                     l2533:
  4302                           
  4303                           ; BSR set to: 0
  4304  000BCA  0E05               	movlw	5
  4305  000BCC  198E               	xorwf	printf@c& (0+255),w,b
  4306  000BCE  B4D8               	btfsc	status,2,c
  4307  000BD0  D038               	goto	l401
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;doprnt.c: 1306: if(val < dpowers[c])
  4311                           
  4312                           ; BSR set to: 0
  4313                           
  4314                           ; BSR set to: 0
  4315  000BD2  518E               	movf	printf@c& (0+255),w,b
  4316  000BD4  0D02               	mullw	2
  4317  000BD6  0E01               	movlw	low _dpowers
  4318  000BD8  24F3               	addwf	prodl,w,c
  4319  000BDA  6EF6               	movwf	tblptrl,c
  4320  000BDC  0E08               	movlw	high _dpowers
  4321  000BDE  20F4               	addwfc	prodh,w,c
  4322  000BE0  6EF7               	movwf	tblptrh,c
  4323  000BE2                     	if	1	;There are 3 active tblptr bytes
  4324  000BE2  6AF8               	clrf	tblptru,c
  4325  000BE4  0E00               	movlw	low (__mediumconst shr (0+16))
  4326  000BE6  22F8               	addwfc	tblptru,f,c
  4327  000BE8                     	endif
  4328  000BE8  0009               	tblrd		*+
  4329  000BEA  50F5               	movf	tablat,w,c
  4330  000BEC  5D8C               	subwf	printf@val& (0+255),w,b
  4331  000BEE  0009               	tblrd		*+
  4332  000BF0  50F5               	movf	tablat,w,c
  4333  000BF2  598D               	subwfb	(printf@val+1)& (0+255),w,b
  4334  000BF4  A0D8               	btfss	status,0,c
  4335  000BF6  D025               	goto	l401
  4336                           
  4337                           ; BSR set to: 0
  4338                           
  4339                           ; BSR set to: 0
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;doprnt.c: 1307: break;
  4343  000BF8  2B8E               	incf	printf@c& (0+255),f,b
  4344  000BFA  D7E7               	goto	l2533
  4345  000BFC                     
  4346                           ; BSR set to: 0
  4347                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4348                           
  4349                           ; BSR set to: 0
  4350  000BFC  0E01               	movlw	1
  4351  000BFE  6F8E               	movwf	printf@c& (0+255),b
  4352  000C00                     l2547:
  4353                           
  4354                           ; BSR set to: 0
  4355  000C00  0E04               	movlw	4
  4356  000C02  198E               	xorwf	printf@c& (0+255),w,b
  4357  000C04  B4D8               	btfsc	status,2,c
  4358  000C06  D01D               	goto	l401
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4362                           
  4363                           ; BSR set to: 0
  4364                           
  4365                           ; BSR set to: 0
  4366  000C08  518E               	movf	printf@c& (0+255),w,b
  4367  000C0A  0D02               	mullw	2
  4368  000C0C  0E0B               	movlw	low _hexpowers
  4369  000C0E  24F3               	addwf	prodl,w,c
  4370  000C10  6EF6               	movwf	tblptrl,c
  4371  000C12  0E08               	movlw	high _hexpowers
  4372  000C14  20F4               	addwfc	prodh,w,c
  4373  000C16  6EF7               	movwf	tblptrh,c
  4374  000C18                     	if	1	;There are 3 active tblptr bytes
  4375  000C18  6AF8               	clrf	tblptru,c
  4376  000C1A  0E00               	movlw	low (__mediumconst shr (0+16))
  4377  000C1C  22F8               	addwfc	tblptru,f,c
  4378  000C1E                     	endif
  4379  000C1E  0009               	tblrd		*+
  4380  000C20  50F5               	movf	tablat,w,c
  4381  000C22  5D8C               	subwf	printf@val& (0+255),w,b
  4382  000C24  0009               	tblrd		*+
  4383  000C26  50F5               	movf	tablat,w,c
  4384  000C28  598D               	subwfb	(printf@val+1)& (0+255),w,b
  4385  000C2A  A0D8               	btfss	status,0,c
  4386  000C2C  D00A               	goto	l401
  4387                           
  4388                           ; BSR set to: 0
  4389                           
  4390                           ; BSR set to: 0
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;doprnt.c: 1318: break;
  4394  000C2E  2B8E               	incf	printf@c& (0+255),f,b
  4395  000C30  D7E7               	goto	l2547
  4396  000C32                     l396:
  4397                           
  4398                           ; BSR set to: 0
  4399                           
  4400                           ; BSR set to: 0
  4401  000C32  518B               	movf	printf@flag& (0+255),w,b
  4402  000C34  0B80               	andlw	128
  4403                           
  4404                           ; Switch size 1, requested type "space"
  4405                           ; Number of cases is 2, Range of values is 0 to 128
  4406                           ; switch strategies available:
  4407                           ; Name         Instructions Cycles
  4408                           ; simple_byte            7     4 (average)
  4409                           ;	Chosen strategy is simple_byte
  4410  000C36  0A00               	xorlw	0	; case 0
  4411  000C38  B4D8               	btfsc	status,2,c
  4412  000C3A  D7C5               	goto	l397
  4413  000C3C  0A80               	xorlw	128	; case 128
  4414  000C3E  B4D8               	btfsc	status,2,c
  4415  000C40  D7DD               	goto	l402
  4416  000C42                     l401:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;doprnt.c: 1422: {
  4420                           ;doprnt.c: 1438: if(flag & 0x03)
  4421                           
  4422                           ; BSR set to: 0
  4423  000C42  C08B  F086         	movff	printf@flag,??_printf
  4424  000C46  0E03               	movlw	3
  4425  000C48  1786               	andwf	??_printf& (0+255),f,b
  4426  000C4A  B4D8               	btfsc	status,2,c
  4427  000C4C  D003               	goto	l406
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;doprnt.c: 1439: (putch('-') );
  4431  000C4E  0E2D               	movlw	45
  4432  000C50  ECF2  F00D         	call	_putch
  4433  000C54                     l406:
  4434                           
  4435                           ;doprnt.c: 1469: }
  4436                           ;doprnt.c: 1472: prec = c;
  4437  000C54  C08E  F08A         	movff	printf@c,printf@prec
  4438                           
  4439                           ;doprnt.c: 1474: while(prec--) {
  4440  000C58  D05E               	goto	l407
  4441  000C5A                     
  4442                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4443  000C5A  0100               	movlb	0	; () banked
  4444  000C5C  518A               	movf	printf@prec& (0+255),w,b
  4445  000C5E  0D02               	mullw	2
  4446  000C60  0E01               	movlw	low _dpowers
  4447  000C62  24F3               	addwf	prodl,w,c
  4448  000C64  6EF6               	movwf	tblptrl,c
  4449  000C66  0E08               	movlw	high _dpowers
  4450  000C68  20F4               	addwfc	prodh,w,c
  4451  000C6A  6EF7               	movwf	tblptrh,c
  4452  000C6C                     	if	1	;There are 3 active tblptr bytes
  4453  000C6C  6AF8               	clrf	tblptru,c
  4454  000C6E  0E00               	movlw	low (__mediumconst shr (0+16))
  4455  000C70  22F8               	addwfc	tblptru,f,c
  4456  000C72                     	endif
  4457  000C72  0009               	tblrd		*+
  4458  000C74  CFF5 F077          	movff	tablat,___lwdiv@divisor
  4459  000C78  000A               	tblrd		*-
  4460  000C7A  CFF5 F078          	movff	tablat,___lwdiv@divisor+1
  4461  000C7E  C08C  F075         	movff	printf@val,___lwdiv@dividend
  4462  000C82  C08D  F076         	movff	printf@val+1,___lwdiv@dividend+1
  4463  000C86  EC07  F00D         	call	___lwdiv	;wreg free
  4464  000C8A  C075  F07C         	movff	?___lwdiv,___lwmod@dividend
  4465  000C8E  C076  F07D         	movff	?___lwdiv+1,___lwmod@dividend+1
  4466  000C92  0E00               	movlw	0
  4467  000C94  0100               	movlb	0	; () banked
  4468  000C96  6F7F               	movwf	(___lwmod@divisor+1)& (0+255),b
  4469  000C98  0E0A               	movlw	10
  4470  000C9A  6F7E               	movwf	___lwmod@divisor& (0+255),b
  4471  000C9C  EC81  F00D         	call	___lwmod	;wreg free
  4472  000CA0  0100               	movlb	0	; () banked
  4473  000CA2  517C               	movf	?___lwmod& (0+255),w,b
  4474  000CA4  0F30               	addlw	48
  4475  000CA6  6F8E               	movwf	printf@c& (0+255),b
  4476                           
  4477                           ;doprnt.c: 1491: break;
  4478  000CA8  D033               	goto	l411
  4479  000CAA                     
  4480                           ; BSR set to: 0
  4481                           ;doprnt.c: 1499: {
  4482                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4483                           
  4484                           ; BSR set to: 0
  4485  000CAA  C08C  F075         	movff	printf@val,___lwdiv@dividend
  4486  000CAE  C08D  F076         	movff	printf@val+1,___lwdiv@dividend+1
  4487  000CB2  518A               	movf	printf@prec& (0+255),w,b
  4488  000CB4  0D02               	mullw	2
  4489  000CB6  0E0B               	movlw	low _hexpowers
  4490  000CB8  24F3               	addwf	prodl,w,c
  4491  000CBA  6EF6               	movwf	tblptrl,c
  4492  000CBC  0E08               	movlw	high _hexpowers
  4493  000CBE  20F4               	addwfc	prodh,w,c
  4494  000CC0  6EF7               	movwf	tblptrh,c
  4495  000CC2                     	if	1	;There are 3 active tblptr bytes
  4496  000CC2  6AF8               	clrf	tblptru,c
  4497  000CC4  0E00               	movlw	low (__mediumconst shr (0+16))
  4498  000CC6  22F8               	addwfc	tblptru,f,c
  4499  000CC8                     	endif
  4500  000CC8  0009               	tblrd		*+
  4501  000CCA  CFF5 F077          	movff	tablat,___lwdiv@divisor
  4502  000CCE  000A               	tblrd		*-
  4503  000CD0  CFF5 F078          	movff	tablat,___lwdiv@divisor+1
  4504  000CD4  EC07  F00D         	call	___lwdiv	;wreg free
  4505  000CD8  0100               	movlb	0	; () banked
  4506  000CDA  5175               	movf	?___lwdiv& (0+255),w,b
  4507  000CDC  0B0F               	andlw	15
  4508  000CDE  6F87               	movwf	printf@idx& (0+255),b
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4512  000CE0  5187               	movf	printf@idx& (0+255),w,b
  4513  000CE2  0D01               	mullw	1
  4514  000CE4  0E13               	movlw	low STR_21
  4515  000CE6  24F3               	addwf	prodl,w,c
  4516  000CE8  6EF6               	movwf	tblptrl,c
  4517  000CEA  0E08               	movlw	high STR_21
  4518  000CEC  20F4               	addwfc	prodh,w,c
  4519  000CEE  6EF7               	movwf	tblptrh,c
  4520  000CF0                     	if	1	;There are 3 active tblptr bytes
  4521  000CF0  6AF8               	clrf	tblptru,c
  4522  000CF2  0E00               	movlw	low (__mediumconst shr (0+16))
  4523  000CF4  22F8               	addwfc	tblptru,f,c
  4524  000CF6                     	endif
  4525  000CF6  0008               	tblrd		*
  4526  000CF8  CFF5 F08E          	movff	tablat,printf@c
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;doprnt.c: 1523: }
  4530                           
  4531                           ;doprnt.c: 1508: }
  4532                           ;doprnt.c: 1510: break;
  4533  000CFC  D009               	goto	l411
  4534  000CFE                     
  4535                           ; BSR set to: 0
  4536  000CFE  0100               	movlb	0	; () banked
  4537  000D00  518B               	movf	printf@flag& (0+255),w,b
  4538  000D02  0B80               	andlw	128
  4539                           
  4540                           ; Switch size 1, requested type "space"
  4541                           ; Number of cases is 2, Range of values is 0 to 128
  4542                           ; switch strategies available:
  4543                           ; Name         Instructions Cycles
  4544                           ; simple_byte            7     4 (average)
  4545                           ;	Chosen strategy is simple_byte
  4546  000D04  0A00               	xorlw	0	; case 0
  4547  000D06  B4D8               	btfsc	status,2,c
  4548  000D08  D7A8               	goto	l410
  4549  000D0A  0A80               	xorlw	128	; case 128
  4550  000D0C  B4D8               	btfsc	status,2,c
  4551  000D0E  D7CD               	goto	l412
  4552  000D10                     l411:
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;doprnt.c: 1524: (putch(c) );
  4556                           
  4557                           ; BSR set to: 0
  4558  000D10  518E               	movf	printf@c& (0+255),w,b
  4559  000D12  ECF2  F00D         	call	_putch
  4560  000D16                     l407:
  4561  000D16  0100               	movlb	0	; () banked
  4562  000D18  078A               	decf	printf@prec& (0+255),f,b
  4563  000D1A  298A               	incf	printf@prec& (0+255),w,b
  4564  000D1C  A4D8               	btfss	status,2,c
  4565  000D1E  D7EF               	goto	l409
  4566  000D20                     u2360:
  4567                           
  4568                           ; BSR set to: 0
  4569                           
  4570                           ; BSR set to: 0
  4571  000D20  C081  FFF6         	movff	printf@f,tblptrl
  4572  000D24  C082  FFF7         	movff	printf@f+1,tblptrh
  4573  000D28  C083  FFF8         	movff	printf@f+2,tblptru
  4574  000D2C  0E01               	movlw	1
  4575  000D2E  0100               	movlb	0	; () banked
  4576  000D30  2781               	addwf	printf@f& (0+255),f,b
  4577  000D32  0E00               	movlw	0
  4578  000D34  2382               	addwfc	(printf@f+1)& (0+255),f,b
  4579  000D36  2383               	addwfc	(printf@f+2)& (0+255),f,b
  4580  000D38  BAF8               	btfsc	tblptru,5,c
  4581  000D3A  D003               	bra	u2377
  4582  000D3C  0008               	tblrd		*
  4583  000D3E  50F5               	movf	tablat,w,c
  4584  000D40  D005               	bra	u2370
  4585  000D42                     u2377:
  4586  000D42  CFF6 FFE9          	movff	tblptrl,fsr0l
  4587  000D46  CFF7 FFEA          	movff	tblptrh,fsr0h
  4588  000D4A  50EF               	movf	indf0,w,c
  4589  000D4C                     u2370:
  4590  000D4C  0100               	movlb	0	; () banked
  4591  000D4E  6F8E               	movwf	printf@c& (0+255),b
  4592  000D50  518E               	movf	printf@c& (0+255),w,b
  4593  000D52  B4D8               	btfsc	status,2,c
  4594  000D54  0012               	return	
  4595  000D56  D6DA               	goto	l383
  4596  000D58                     __end_of_printf:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           intcon2	equ	0xFF1
  4606                           indf0	equ	0xFEF
  4607                           postinc0	equ	0xFEE
  4608                           plusw0	equ	0xFEB
  4609                           fsr0h	equ	0xFEA
  4610                           fsr0l	equ	0xFE9
  4611                           wreg	equ	0xFE8
  4612                           indf1	equ	0xFE7
  4613                           postinc1	equ	0xFE6
  4614                           postdec1	equ	0xFE5
  4615                           fsr1h	equ	0xFE2
  4616                           fsr1l	equ	0xFE1
  4617                           indf2	equ	0xFDF
  4618                           postinc2	equ	0xFDE
  4619                           postdec2	equ	0xFDD
  4620                           plusw2	equ	0xFDB
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _putch *****************
  4626 ;; Defined at:
  4627 ;;		line 258 in file "Drivers/UART_Driver.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  data            1    wreg     unsigned char 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  data            1   21[BANK0 ] unsigned char 
  4632 ;;  max             1   22[BANK0 ] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0
  4643 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4645 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4646 ;;Total ram usage:        2 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    6
  4649 ;; This function calls:
  4650 ;;		Nothing
  4651 ;; This function is called by:
  4652 ;;		_printf
  4653 ;; This function uses a non-reentrant model
  4654 ;;
  4655                           
  4656                           	psect	text23
  4657  001BE4                     __ptext23:
  4658                           	opt stack 0
  4659  001BE4                     _putch:
  4660                           	opt stack 22
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;incstack = 0
  4664                           ;putch@data stored from wreg
  4665  001BE4  0100               	movlb	0	; () banked
  4666  001BE6  6F75               	movwf	putch@data& (0+255),b
  4667                           
  4668                           ;UART_Driver.c: 259: uint8_t max = 0;
  4669  001BE8  0E00               	movlw	0
  4670  001BEA  0100               	movlb	0	; () banked
  4671  001BEC  6F76               	movwf	putch@max& (0+255),b
  4672                           
  4673                           ;UART_Driver.c: 261: while(TXSTAbits.TRMT == 0 && max < 200) {
  4674  001BEE  D005               	goto	l171
  4675  001BF0                     
  4676                           ; BSR set to: 0
  4677                           ;UART_Driver.c: 262: max++;
  4678                           
  4679                           ; BSR set to: 0
  4680  001BF0  2B76               	incf	putch@max& (0+255),f,b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;UART_Driver.c: 263: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  4684  001BF2  0E06               	movlw	6
  4685  001BF4                     u2967:
  4686  001BF4  2EE8               	decfsz	wreg,f,c
  4687  001BF6  D7FE               	bra	u2967
  4688  001BF8  D000               	nop2	
  4689  001BFA                     l171:
  4690  001BFA  B2AC               	btfsc	4012,1,c	;volatile
  4691  001BFC  D004               	goto	u2180
  4692  001BFE  0EC7               	movlw	199
  4693  001C00  0100               	movlb	0	; () banked
  4694  001C02  6576               	cpfsgt	putch@max& (0+255),b
  4695  001C04  D7F5               	goto	l172
  4696  001C06                     u2180:
  4697                           
  4698                           ;UART_Driver.c: 264: }
  4699                           ;UART_Driver.c: 265: TXREG = data;
  4700                           
  4701                           ; BSR set to: 0
  4702  001C06  C075  FFAD         	movff	putch@data,4013	;volatile
  4703  001C0A  0012               	return		;funcret
  4704  001C0C                     __end_of_putch:
  4705                           	opt stack 0
  4706                           tblptru	equ	0xFF8
  4707                           tblptrh	equ	0xFF7
  4708                           tblptrl	equ	0xFF6
  4709                           tablat	equ	0xFF5
  4710                           prodh	equ	0xFF4
  4711                           prodl	equ	0xFF3
  4712                           intcon	equ	0xFF2
  4713                           intcon2	equ	0xFF1
  4714                           indf0	equ	0xFEF
  4715                           postinc0	equ	0xFEE
  4716                           plusw0	equ	0xFEB
  4717                           fsr0h	equ	0xFEA
  4718                           fsr0l	equ	0xFE9
  4719                           wreg	equ	0xFE8
  4720                           indf1	equ	0xFE7
  4721                           postinc1	equ	0xFE6
  4722                           postdec1	equ	0xFE5
  4723                           fsr1h	equ	0xFE2
  4724                           fsr1l	equ	0xFE1
  4725                           indf2	equ	0xFDF
  4726                           postinc2	equ	0xFDE
  4727                           postdec2	equ	0xFDD
  4728                           plusw2	equ	0xFDB
  4729                           fsr2h	equ	0xFDA
  4730                           fsr2l	equ	0xFD9
  4731                           status	equ	0xFD8
  4732                           
  4733 ;; *************** function ___lwmod *****************
  4734 ;; Defined at:
  4735 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  dividend        2   28[BANK0 ] unsigned int 
  4738 ;;  divisor         2   30[BANK0 ] unsigned int 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  counter         1   32[BANK0 ] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  2   28[BANK0 ] unsigned int 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2, status,0
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4750 ;;      Params:         0       4       0       0       0       0       0       0       0
  4751 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4753 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4754 ;;Total ram usage:        5 bytes
  4755 ;; Hardware stack levels used:    1
  4756 ;; Hardware stack levels required when called:    6
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_printf
  4761 ;; This function uses a non-reentrant model
  4762 ;;
  4763                           
  4764                           	psect	text24
  4765  001B02                     __ptext24:
  4766                           	opt stack 0
  4767  001B02                     ___lwmod:
  4768                           	opt stack 22
  4769                           
  4770                           ;incstack = 0
  4771  001B02  0100               	movlb	0	; () banked
  4772  001B04  517E               	movf	___lwmod@divisor& (0+255),w,b
  4773  001B06  117F               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4774  001B08  B4D8               	btfsc	status,2,c
  4775  001B0A  D018               	goto	l834
  4776                           
  4777                           ; BSR set to: 0
  4778  001B0C  0E01               	movlw	1
  4779  001B0E  6F80               	movwf	___lwmod@counter& (0+255),b
  4780  001B10  D004               	goto	l829
  4781  001B12                     
  4782                           ; BSR set to: 0
  4783                           
  4784                           ; BSR set to: 0
  4785  001B12  90D8               	bcf	status,0,c
  4786  001B14  377E               	rlcf	___lwmod@divisor& (0+255),f,b
  4787  001B16  377F               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4788  001B18  2B80               	incf	___lwmod@counter& (0+255),f,b
  4789  001B1A                     l829:
  4790                           
  4791                           ; BSR set to: 0
  4792                           
  4793                           ; BSR set to: 0
  4794  001B1A  AF7F               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4795  001B1C  D7FA               	goto	l830
  4796  001B1E                     u2230:
  4797                           
  4798                           ; BSR set to: 0
  4799                           
  4800                           ; BSR set to: 0
  4801                           
  4802                           ; BSR set to: 0
  4803  001B1E  517E               	movf	___lwmod@divisor& (0+255),w,b
  4804  001B20  5D7C               	subwf	___lwmod@dividend& (0+255),w,b
  4805  001B22  517F               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4806  001B24  597D               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4807  001B26  A0D8               	btfss	status,0,c
  4808  001B28  D004               	goto	l833
  4809                           
  4810                           ; BSR set to: 0
  4811  001B2A  517E               	movf	___lwmod@divisor& (0+255),w,b
  4812  001B2C  5F7C               	subwf	___lwmod@dividend& (0+255),f,b
  4813  001B2E  517F               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4814  001B30  5B7D               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4815  001B32                     l833:
  4816                           
  4817                           ; BSR set to: 0
  4818                           
  4819                           ; BSR set to: 0
  4820  001B32  90D8               	bcf	status,0,c
  4821  001B34  337F               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4822  001B36  337E               	rrcf	___lwmod@divisor& (0+255),f,b
  4823                           
  4824                           ; BSR set to: 0
  4825  001B38  2F80               	decfsz	___lwmod@counter& (0+255),f,b
  4826  001B3A  D7F1               	goto	u2230
  4827  001B3C                     l834:
  4828                           
  4829                           ; BSR set to: 0
  4830                           
  4831                           ; BSR set to: 0
  4832  001B3C  C07C  F07C         	movff	___lwmod@dividend,?___lwmod
  4833  001B40  C07D  F07D         	movff	___lwmod@dividend+1,?___lwmod+1
  4834                           
  4835                           ; BSR set to: 0
  4836  001B44  0012               	return		;funcret
  4837  001B46                     __end_of___lwmod:
  4838                           	opt stack 0
  4839                           tblptru	equ	0xFF8
  4840                           tblptrh	equ	0xFF7
  4841                           tblptrl	equ	0xFF6
  4842                           tablat	equ	0xFF5
  4843                           prodh	equ	0xFF4
  4844                           prodl	equ	0xFF3
  4845                           intcon	equ	0xFF2
  4846                           intcon2	equ	0xFF1
  4847                           indf0	equ	0xFEF
  4848                           postinc0	equ	0xFEE
  4849                           plusw0	equ	0xFEB
  4850                           fsr0h	equ	0xFEA
  4851                           fsr0l	equ	0xFE9
  4852                           wreg	equ	0xFE8
  4853                           indf1	equ	0xFE7
  4854                           postinc1	equ	0xFE6
  4855                           postdec1	equ	0xFE5
  4856                           fsr1h	equ	0xFE2
  4857                           fsr1l	equ	0xFE1
  4858                           indf2	equ	0xFDF
  4859                           postinc2	equ	0xFDE
  4860                           postdec2	equ	0xFDD
  4861                           plusw2	equ	0xFDB
  4862                           fsr2h	equ	0xFDA
  4863                           fsr2l	equ	0xFD9
  4864                           status	equ	0xFD8
  4865                           
  4866 ;; *************** function ___lwdiv *****************
  4867 ;; Defined at:
  4868 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  dividend        2   21[BANK0 ] unsigned int 
  4871 ;;  divisor         2   23[BANK0 ] unsigned int 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  quotient        2   26[BANK0 ] unsigned int 
  4874 ;;  counter         1   25[BANK0 ] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  2   21[BANK0 ] unsigned int 
  4877 ;; Registers used:
  4878 ;;		wreg, status,2, status,0
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4884 ;;      Params:         0       4       0       0       0       0       0       0       0
  4885 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4886 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4887 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4888 ;;Total ram usage:        7 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    6
  4891 ;; This function calls:
  4892 ;;		Nothing
  4893 ;; This function is called by:
  4894 ;;		_printf
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898                           	psect	text25
  4899  001A0E                     __ptext25:
  4900                           	opt stack 0
  4901  001A0E                     ___lwdiv:
  4902                           	opt stack 22
  4903                           
  4904                           ; BSR set to: 0
  4905                           ;incstack = 0
  4906  001A0E  0E00               	movlw	0
  4907  001A10  0100               	movlb	0	; () banked
  4908  001A12  6F7B               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4909  001A14  0E00               	movlw	0
  4910  001A16  6F7A               	movwf	___lwdiv@quotient& (0+255),b
  4911                           
  4912                           ; BSR set to: 0
  4913  001A18  5177               	movf	___lwdiv@divisor& (0+255),w,b
  4914  001A1A  1178               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4915  001A1C  B4D8               	btfsc	status,2,c
  4916  001A1E  D01C               	goto	l824
  4917                           
  4918                           ; BSR set to: 0
  4919  001A20  0E01               	movlw	1
  4920  001A22  6F79               	movwf	___lwdiv@counter& (0+255),b
  4921  001A24  D004               	goto	l819
  4922  001A26                     
  4923                           ; BSR set to: 0
  4924                           
  4925                           ; BSR set to: 0
  4926  001A26  90D8               	bcf	status,0,c
  4927  001A28  3777               	rlcf	___lwdiv@divisor& (0+255),f,b
  4928  001A2A  3778               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4929  001A2C  2B79               	incf	___lwdiv@counter& (0+255),f,b
  4930  001A2E                     l819:
  4931                           
  4932                           ; BSR set to: 0
  4933                           
  4934                           ; BSR set to: 0
  4935  001A2E  AF78               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4936  001A30  D7FA               	goto	l820
  4937  001A32                     u2200:
  4938                           
  4939                           ; BSR set to: 0
  4940                           
  4941                           ; BSR set to: 0
  4942                           
  4943                           ; BSR set to: 0
  4944  001A32  90D8               	bcf	status,0,c
  4945  001A34  377A               	rlcf	___lwdiv@quotient& (0+255),f,b
  4946  001A36  377B               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4947                           
  4948                           ; BSR set to: 0
  4949  001A38  5177               	movf	___lwdiv@divisor& (0+255),w,b
  4950  001A3A  5D75               	subwf	___lwdiv@dividend& (0+255),w,b
  4951  001A3C  5178               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4952  001A3E  5976               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4953  001A40  A0D8               	btfss	status,0,c
  4954  001A42  D005               	goto	l823
  4955                           
  4956                           ; BSR set to: 0
  4957  001A44  5177               	movf	___lwdiv@divisor& (0+255),w,b
  4958  001A46  5F75               	subwf	___lwdiv@dividend& (0+255),f,b
  4959  001A48  5178               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4960  001A4A  5B76               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4961                           
  4962                           ; BSR set to: 0
  4963  001A4C  817A               	bsf	___lwdiv@quotient& (0+255),0,b
  4964  001A4E                     l823:
  4965                           
  4966                           ; BSR set to: 0
  4967                           
  4968                           ; BSR set to: 0
  4969  001A4E  90D8               	bcf	status,0,c
  4970  001A50  3378               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4971  001A52  3377               	rrcf	___lwdiv@divisor& (0+255),f,b
  4972                           
  4973                           ; BSR set to: 0
  4974  001A54  2F79               	decfsz	___lwdiv@counter& (0+255),f,b
  4975  001A56  D7ED               	goto	u2200
  4976  001A58                     l824:
  4977                           
  4978                           ; BSR set to: 0
  4979                           
  4980                           ; BSR set to: 0
  4981  001A58  C07A  F075         	movff	___lwdiv@quotient,?___lwdiv
  4982  001A5C  C07B  F076         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4983                           
  4984                           ; BSR set to: 0
  4985  001A60  0012               	return		;funcret
  4986  001A62                     __end_of___lwdiv:
  4987                           	opt stack 0
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           intcon2	equ	0xFF1
  4996                           indf0	equ	0xFEF
  4997                           postinc0	equ	0xFEE
  4998                           plusw0	equ	0xFEB
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           indf1	equ	0xFE7
  5003                           postinc1	equ	0xFE6
  5004                           postdec1	equ	0xFE5
  5005                           fsr1h	equ	0xFE2
  5006                           fsr1l	equ	0xFE1
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           plusw2	equ	0xFDB
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015 ;; *************** function _C_DOOR_ReadSensors *****************
  5016 ;; Defined at:
  5017 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  d               1   25[BANK0 ] unsigned char 
  5022 ;; Return value:  Size  Location     Type
  5023 ;;                  1    wreg      void 
  5024 ;; Registers used:
  5025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5026 ;; Tracked objects:
  5027 ;;		On entry : 0/0
  5028 ;;		On exit  : 0/0
  5029 ;;		Unchanged: 0/0
  5030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5031 ;;      Params:         0       0       0       0       0       0       0       0       0
  5032 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5033 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5034 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5035 ;;Total ram usage:        5 bytes
  5036 ;; Hardware stack levels used:    1
  5037 ;; Hardware stack levels required when called:    6
  5038 ;; This function calls:
  5039 ;;		Nothing
  5040 ;; This function is called by:
  5041 ;;		_main
  5042 ;; This function uses a non-reentrant model
  5043 ;;
  5044                           
  5045                           	psect	text26
  5046  001736                     __ptext26:
  5047                           	opt stack 0
  5048  001736                     _C_DOOR_ReadSensors:
  5049                           	opt stack 24
  5050                           
  5051                           ;DOOR_Controller.c: 103: uint8_t d;
  5052                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;incstack = 0
  5056  001736  0E00               	movlw	0
  5057  001738  0100               	movlb	0	; () banked
  5058  00173A  6F79               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  5059  00173C  D03E               	goto	l42
  5060  00173E                     
  5061                           ; BSR set to: 0
  5062                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 0x01) == 0);
  5063                           
  5064                           ; BSR set to: 0
  5065  00173E  5179               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5066  001740  0D0A               	mullw	10
  5067  001742  0E06               	movlw	6
  5068  001744  26F3               	addwf	prodl,f,c
  5069  001746  0E00               	movlw	0
  5070  001748  22F4               	addwfc	prodh,f,c
  5071  00174A  0E00               	movlw	low _doors
  5072  00174C  24F3               	addwf	prodl,w,c
  5073  00174E  6ED9               	movwf	fsr2l,c
  5074  001750  0E02               	movlw	high _doors
  5075  001752  20F4               	addwfc	prodh,w,c
  5076  001754  6EDA               	movwf	fsr2h,c
  5077  001756  5179               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5078  001758  0D0A               	mullw	10
  5079  00175A  0E09               	movlw	9
  5080  00175C  26F3               	addwf	prodl,f,c
  5081  00175E  0E00               	movlw	0
  5082  001760  22F4               	addwfc	prodh,f,c
  5083  001762  0E00               	movlw	low _doors
  5084  001764  24F3               	addwf	prodl,w,c
  5085  001766  6EE1               	movwf	fsr1l,c
  5086  001768  0E02               	movlw	high _doors
  5087  00176A  20F4               	addwfc	prodh,w,c
  5088  00176C  6EE2               	movwf	fsr1h,c
  5089  00176E  50E7               	movf	indf1,w,c
  5090  001770  6F75               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  5091  001772  5179               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5092  001774  0D0A               	mullw	10
  5093  001776  0E07               	movlw	7
  5094  001778  26F3               	addwf	prodl,f,c
  5095  00177A  0E00               	movlw	0
  5096  00177C  22F4               	addwfc	prodh,f,c
  5097  00177E  0E00               	movlw	low _doors
  5098  001780  24F3               	addwf	prodl,w,c
  5099  001782  6EE1               	movwf	fsr1l,c
  5100  001784  0E02               	movlw	high _doors
  5101  001786  20F4               	addwfc	prodh,w,c
  5102  001788  6EE2               	movwf	fsr1h,c
  5103  00178A  CFE6 F076          	movff	postinc1,??_C_DOOR_ReadSensors+1
  5104  00178E  CFE5 F077          	movff	postdec1,??_C_DOOR_ReadSensors+2
  5105  001792  C076  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  5106  001796  C077  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  5107  00179A  50E7               	movf	indf1,w,c
  5108  00179C  6F78               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  5109  00179E  2B75               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  5110  0017A0  D002               	goto	u2554
  5111  0017A2                     u2555:
  5112  0017A2  90D8               	bcf	status,0,c
  5113  0017A4  3378               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  5114  0017A6                     u2554:
  5115  0017A6  2F75               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  5116  0017A8  D7FC               	goto	u2555
  5117  0017AA  0100               	movlb	0	; () banked
  5118  0017AC  B178               	btfsc	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  5119  0017AE  D002               	goto	u2560
  5120  0017B0  0E01               	movlw	1
  5121  0017B2  D001               	goto	u2570
  5122  0017B4                     u2560:
  5123  0017B4  0E00               	movlw	0
  5124  0017B6                     u2570:
  5125  0017B6  6EDF               	movwf	indf2,c
  5126                           
  5127                           ; BSR set to: 0
  5128  0017B8  2B79               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  5129  0017BA                     l42:
  5130                           
  5131                           ; BSR set to: 0
  5132                           
  5133                           ; BSR set to: 0
  5134  0017BA  5179               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  5135  0017BC  6F75               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  5136  0017BE  6B76               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  5137  0017C0  51A8               	movf	_door_cnt& (0+255),w,b
  5138  0017C2  5D75               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  5139  0017C4  5176               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  5140  0017C6  0A80               	xorlw	128
  5141  0017C8  6F77               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  5142  0017CA  51A9               	movf	(_door_cnt+1)& (0+255),w,b
  5143  0017CC  0A80               	xorlw	128
  5144  0017CE  5977               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  5145  0017D0  B0D8               	btfsc	status,0,c
  5146  0017D2  0012               	return	
  5147  0017D4  D7B4               	goto	l43
  5148  0017D6                     __end_of_C_DOOR_ReadSensors:
  5149                           	opt stack 0
  5150                           tblptru	equ	0xFF8
  5151                           tblptrh	equ	0xFF7
  5152                           tblptrl	equ	0xFF6
  5153                           tablat	equ	0xFF5
  5154                           prodh	equ	0xFF4
  5155                           prodl	equ	0xFF3
  5156                           intcon	equ	0xFF2
  5157                           intcon2	equ	0xFF1
  5158                           indf0	equ	0xFEF
  5159                           postinc0	equ	0xFEE
  5160                           plusw0	equ	0xFEB
  5161                           fsr0h	equ	0xFEA
  5162                           fsr0l	equ	0xFE9
  5163                           wreg	equ	0xFE8
  5164                           indf1	equ	0xFE7
  5165                           postinc1	equ	0xFE6
  5166                           postdec1	equ	0xFE5
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           indf2	equ	0xFDF
  5170                           postinc2	equ	0xFDE
  5171                           postdec2	equ	0xFDD
  5172                           plusw2	equ	0xFDB
  5173                           fsr2h	equ	0xFDA
  5174                           fsr2l	equ	0xFD9
  5175                           status	equ	0xFD8
  5176                           
  5177 ;; *************** function _LowISR *****************
  5178 ;; Defined at:
  5179 ;;		line 196 in file "main.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5195 ;;      Temps:          0      21       0       0       0       0       0       0       0
  5196 ;;      Totals:         0      21       0       0       0       0       0       0       0
  5197 ;;Total ram usage:       21 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    5
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		Interrupt level 1
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	intcodelo
  5208  000018                     __pintcodelo:
  5209                           	opt stack 0
  5210  000018                     _LowISR:
  5211                           	opt stack 21
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;incstack = 0
  5215  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5216  00001A  CFD8 F060          	movff	status,??_LowISR
  5217  00001E  CFE8 F061          	movff	wreg,??_LowISR+1
  5218  000022  CFE0 F062          	movff	bsr,??_LowISR+2
  5219  000026  CFFA F063          	movff	pclath,??_LowISR+3
  5220  00002A  CFFB F064          	movff	pclatu,??_LowISR+4
  5221  00002E  CFE9 F065          	movff	fsr0l,??_LowISR+5
  5222  000032  CFEA F066          	movff	fsr0h,??_LowISR+6
  5223  000036  CFE1 F067          	movff	fsr1l,??_LowISR+7
  5224  00003A  CFE2 F068          	movff	fsr1h,??_LowISR+8
  5225  00003E  CFD9 F069          	movff	fsr2l,??_LowISR+9
  5226  000042  CFDA F06A          	movff	fsr2h,??_LowISR+10
  5227  000046  CFF3 F06B          	movff	prodl,??_LowISR+11
  5228  00004A  CFF4 F06C          	movff	prodh,??_LowISR+12
  5229  00004E  CFF6 F06D          	movff	tblptrl,??_LowISR+13
  5230  000052  CFF7 F06E          	movff	tblptrh,??_LowISR+14
  5231  000056  CFF8 F06F          	movff	tblptru,??_LowISR+15
  5232  00005A  CFF5 F070          	movff	tablat,??_LowISR+16
  5233  00005E  C044  F071         	movff	btemp,??_LowISR+17
  5234  000062  C045  F072         	movff	btemp+1,??_LowISR+18
  5235  000066  C046  F073         	movff	btemp+2,??_LowISR+19
  5236  00006A  C047  F074         	movff	btemp+3,??_LowISR+20
  5237                           
  5238                           ;main.c: 198: if (INTCONbits.TMR0IF) {
  5239  00006E  A4F2               	btfss	intcon,2,c	;volatile
  5240  000070  D003               	goto	i1l365
  5241                           
  5242                           ;main.c: 199: INTCONbits.TMR0IF = 0;
  5243  000072  94F2               	bcf	intcon,2,c	;volatile
  5244                           
  5245                           ;main.c: 200: tick = 1;
  5246  000074  0E01               	movlw	1
  5247  000076  6E39               	movwf	_tick,c
  5248  000078                     i1l365:
  5249                           
  5250                           ;main.c: 201: }
  5251                           ;main.c: 204: if (PIR1bits.TMR1IF) {
  5252  000078  A09E               	btfss	3998,0,c	;volatile
  5253  00007A  D00C               	goto	i1l366
  5254                           
  5255                           ;main.c: 205: TMR1H = 0x5E;
  5256  00007C  0E5E               	movlw	94
  5257  00007E  6ECF               	movwf	4047,c	;volatile
  5258                           
  5259                           ;main.c: 206: TMR1L = 0x00;
  5260  000080  0E00               	movlw	0
  5261  000082  6ECE               	movwf	4046,c	;volatile
  5262                           
  5263                           ;main.c: 208: if (lockDelayCnt < 100-1) {
  5264  000084  0E63               	movlw	99
  5265  000086  603B               	cpfslt	_lockDelayCnt,c
  5266  000088  D002               	goto	i1l367
  5267                           
  5268                           ;main.c: 209: lockDelayCnt++;
  5269  00008A  2A3B               	incf	_lockDelayCnt,f,c
  5270                           
  5271                           ;main.c: 210: } else {
  5272  00008C  D002               	goto	i1l368
  5273  00008E                     i1l367:
  5274                           
  5275                           ;main.c: 211: lock = 1;
  5276  00008E  0E01               	movlw	1
  5277  000090  6E38               	movwf	_lock,c
  5278  000092                     i1l368:
  5279                           
  5280                           ;main.c: 212: }
  5281                           ;main.c: 214: PIR1bits.TMR1IF = 0;
  5282  000092  909E               	bcf	3998,0,c	;volatile
  5283  000094                     i1l366:
  5284  000094  C074  F047         	movff	??_LowISR+20,btemp+3
  5285  000098  C073  F046         	movff	??_LowISR+19,btemp+2
  5286  00009C  C072  F045         	movff	??_LowISR+18,btemp+1
  5287  0000A0  C071  F044         	movff	??_LowISR+17,btemp
  5288  0000A4  C070  FFF5         	movff	??_LowISR+16,tablat
  5289  0000A8  C06F  FFF8         	movff	??_LowISR+15,tblptru
  5290  0000AC  C06E  FFF7         	movff	??_LowISR+14,tblptrh
  5291  0000B0  C06D  FFF6         	movff	??_LowISR+13,tblptrl
  5292  0000B4  C06C  FFF4         	movff	??_LowISR+12,prodh
  5293  0000B8  C06B  FFF3         	movff	??_LowISR+11,prodl
  5294  0000BC  C06A  FFDA         	movff	??_LowISR+10,fsr2h
  5295  0000C0  C069  FFD9         	movff	??_LowISR+9,fsr2l
  5296  0000C4  C068  FFE2         	movff	??_LowISR+8,fsr1h
  5297  0000C8  C067  FFE1         	movff	??_LowISR+7,fsr1l
  5298  0000CC  C066  FFEA         	movff	??_LowISR+6,fsr0h
  5299  0000D0  C065  FFE9         	movff	??_LowISR+5,fsr0l
  5300  0000D4  C064  FFFB         	movff	??_LowISR+4,pclatu
  5301  0000D8  C063  FFFA         	movff	??_LowISR+3,pclath
  5302  0000DC  C062  FFE0         	movff	??_LowISR+2,bsr
  5303  0000E0  C061  FFE8         	movff	??_LowISR+1,wreg
  5304  0000E4  C060  FFD8         	movff	??_LowISR,status
  5305  0000E8  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5306  0000EA  0010               	retfie	
  5307  0000EC                     __end_of_LowISR:
  5308                           	opt stack 0
  5309                           pclatu	equ	0xFFB
  5310                           pclath	equ	0xFFA
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           intcon2	equ	0xFF1
  5319                           indf0	equ	0xFEF
  5320                           postinc0	equ	0xFEE
  5321                           plusw0	equ	0xFEB
  5322                           fsr0h	equ	0xFEA
  5323                           fsr0l	equ	0xFE9
  5324                           wreg	equ	0xFE8
  5325                           indf1	equ	0xFE7
  5326                           postinc1	equ	0xFE6
  5327                           postdec1	equ	0xFE5
  5328                           fsr1h	equ	0xFE2
  5329                           fsr1l	equ	0xFE1
  5330                           bsr	equ	0xFE0
  5331                           indf2	equ	0xFDF
  5332                           postinc2	equ	0xFDE
  5333                           postdec2	equ	0xFDD
  5334                           plusw2	equ	0xFDB
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function _HighISR *****************
  5340 ;; Defined at:
  5341 ;;		line 270 in file "Drivers/UART_Driver.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;		None
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;		None
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      void 
  5348 ;; Registers used:
  5349 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5355 ;;      Params:         0       0       0       0       0       0       0       0       0
  5356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5357 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5358 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5359 ;;Total ram usage:       18 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    4
  5362 ;; This function calls:
  5363 ;;		_fillDataBuffer
  5364 ;; This function is called by:
  5365 ;;		Interrupt level 2
  5366 ;; This function uses a non-reentrant model
  5367 ;;
  5368                           
  5369                           	psect	intcode
  5370  000008                     __pintcode:
  5371                           	opt stack 0
  5372  000008                     _HighISR:
  5373                           	opt stack 21
  5374                           
  5375                           ;incstack = 0
  5376  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5377  00000A  ED8D  F00A         	call	int_func,f	;refresh shadow registers
  5378                           pclatu	equ	0xFFB
  5379                           pclath	equ	0xFFA
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodh	equ	0xFF4
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           intcon2	equ	0xFF1
  5388                           indf0	equ	0xFEF
  5389                           postinc0	equ	0xFEE
  5390                           plusw0	equ	0xFEB
  5391                           fsr0h	equ	0xFEA
  5392                           fsr0l	equ	0xFE9
  5393                           wreg	equ	0xFE8
  5394                           indf1	equ	0xFE7
  5395                           postinc1	equ	0xFE6
  5396                           postdec1	equ	0xFE5
  5397                           fsr1h	equ	0xFE2
  5398                           fsr1l	equ	0xFE1
  5399                           bsr	equ	0xFE0
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           postdec2	equ	0xFDD
  5403                           plusw2	equ	0xFDB
  5404                           fsr2h	equ	0xFDA
  5405                           fsr2l	equ	0xFD9
  5406                           status	equ	0xFD8
  5407                           
  5408                           	psect	intcode_body
  5409  00151A                     __pintcode_body:
  5410                           	opt stack 21
  5411  00151A                     int_func:
  5412                           	opt stack 21
  5413  00151A  0006               	pop		; remove dummy address from shadow register refresh
  5414  00151C  CFFA F01C          	movff	pclath,??_HighISR
  5415  001520  CFFB F01D          	movff	pclatu,??_HighISR+1
  5416  001524  CFE9 F01E          	movff	fsr0l,??_HighISR+2
  5417  001528  CFEA F01F          	movff	fsr0h,??_HighISR+3
  5418  00152C  CFE1 F020          	movff	fsr1l,??_HighISR+4
  5419  001530  CFE2 F021          	movff	fsr1h,??_HighISR+5
  5420  001534  CFD9 F022          	movff	fsr2l,??_HighISR+6
  5421  001538  CFDA F023          	movff	fsr2h,??_HighISR+7
  5422  00153C  CFF3 F024          	movff	prodl,??_HighISR+8
  5423  001540  CFF4 F025          	movff	prodh,??_HighISR+9
  5424  001544  CFF6 F026          	movff	tblptrl,??_HighISR+10
  5425  001548  CFF7 F027          	movff	tblptrh,??_HighISR+11
  5426  00154C  CFF8 F028          	movff	tblptru,??_HighISR+12
  5427  001550  CFF5 F029          	movff	tablat,??_HighISR+13
  5428  001554  C044  F02A         	movff	btemp,??_HighISR+14
  5429  001558  C045  F02B         	movff	btemp+1,??_HighISR+15
  5430  00155C  C046  F02C         	movff	btemp+2,??_HighISR+16
  5431  001560  C047  F02D         	movff	btemp+3,??_HighISR+17
  5432                           
  5433                           ;UART_Driver.c: 271: if (PIR1bits.RC1IF) {
  5434  001564  AA9E               	btfss	3998,5,c	;volatile
  5435  001566  D00E               	goto	i2l181
  5436                           
  5437                           ;UART_Driver.c: 272: PIR1bits.RC1IF = 0;
  5438  001568  9A9E               	bcf	3998,5,c	;volatile
  5439                           
  5440                           ;UART_Driver.c: 275: if(RCSTAbits.FERR == 1) {
  5441  00156A  A4AB               	btfss	4011,2,c	;volatile
  5442  00156C  D003               	goto	i2l182
  5443                           
  5444                           ;UART_Driver.c: 276: RCREG = 0x00;
  5445  00156E  0E00               	movlw	0
  5446  001570  6EAE               	movwf	4014,c	;volatile
  5447                           
  5448                           ;UART_Driver.c: 277: return;
  5449  001572  D008               	goto	i2l181
  5450  001574                     i2l182:
  5451                           
  5452                           ;UART_Driver.c: 278: }
  5453                           ;UART_Driver.c: 280: if(RCSTAbits.OERR == 1) {
  5454  001574  A2AB               	btfss	4011,1,c	;volatile
  5455  001576  D003               	goto	i2l184
  5456                           
  5457                           ;UART_Driver.c: 281: RCSTAbits.CREN = 0;
  5458  001578  98AB               	bcf	4011,4,c	;volatile
  5459                           
  5460                           ;UART_Driver.c: 282: RCSTAbits.CREN = 1;
  5461  00157A  88AB               	bsf	4011,4,c	;volatile
  5462                           
  5463                           ;UART_Driver.c: 283: return;
  5464  00157C  D003               	goto	i2l181
  5465  00157E                     i2l184:
  5466                           
  5467                           ;UART_Driver.c: 284: }
  5468                           ;UART_Driver.c: 285: fillDataBuffer(RCREG);
  5469  00157E  50AE               	movf	4014,w,c	;volatile
  5470  001580  ECCB  F007         	call	_fillDataBuffer
  5471  001584                     i2l181:
  5472  001584  C02D  F047         	movff	??_HighISR+17,btemp+3
  5473  001588  C02C  F046         	movff	??_HighISR+16,btemp+2
  5474  00158C  C02B  F045         	movff	??_HighISR+15,btemp+1
  5475  001590  C02A  F044         	movff	??_HighISR+14,btemp
  5476  001594  C029  FFF5         	movff	??_HighISR+13,tablat
  5477  001598  C028  FFF8         	movff	??_HighISR+12,tblptru
  5478  00159C  C027  FFF7         	movff	??_HighISR+11,tblptrh
  5479  0015A0  C026  FFF6         	movff	??_HighISR+10,tblptrl
  5480  0015A4  C025  FFF4         	movff	??_HighISR+9,prodh
  5481  0015A8  C024  FFF3         	movff	??_HighISR+8,prodl
  5482  0015AC  C023  FFDA         	movff	??_HighISR+7,fsr2h
  5483  0015B0  C022  FFD9         	movff	??_HighISR+6,fsr2l
  5484  0015B4  C021  FFE2         	movff	??_HighISR+5,fsr1h
  5485  0015B8  C020  FFE1         	movff	??_HighISR+4,fsr1l
  5486  0015BC  C01F  FFEA         	movff	??_HighISR+3,fsr0h
  5487  0015C0  C01E  FFE9         	movff	??_HighISR+2,fsr0l
  5488  0015C4  C01D  FFFB         	movff	??_HighISR+1,pclatu
  5489  0015C8  C01C  FFFA         	movff	??_HighISR,pclath
  5490  0015CC  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5491  0015CE  0011               	retfie		f
  5492  0015D0                     __end_of_HighISR:
  5493                           	opt stack 0
  5494                           pclatu	equ	0xFFB
  5495                           pclath	equ	0xFFA
  5496                           tblptru	equ	0xFF8
  5497                           tblptrh	equ	0xFF7
  5498                           tblptrl	equ	0xFF6
  5499                           tablat	equ	0xFF5
  5500                           prodh	equ	0xFF4
  5501                           prodl	equ	0xFF3
  5502                           intcon	equ	0xFF2
  5503                           intcon2	equ	0xFF1
  5504                           indf0	equ	0xFEF
  5505                           postinc0	equ	0xFEE
  5506                           plusw0	equ	0xFEB
  5507                           fsr0h	equ	0xFEA
  5508                           fsr0l	equ	0xFE9
  5509                           wreg	equ	0xFE8
  5510                           indf1	equ	0xFE7
  5511                           postinc1	equ	0xFE6
  5512                           postdec1	equ	0xFE5
  5513                           fsr1h	equ	0xFE2
  5514                           fsr1l	equ	0xFE1
  5515                           bsr	equ	0xFE0
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           plusw2	equ	0xFDB
  5520                           fsr2h	equ	0xFDA
  5521                           fsr2l	equ	0xFD9
  5522                           status	equ	0xFD8
  5523                           
  5524 ;; *************** function _fillDataBuffer *****************
  5525 ;; Defined at:
  5526 ;;		line 69 in file "Drivers/UART_Driver.c"
  5527 ;; Parameters:    Size  Location     Type
  5528 ;;  data            1    wreg     unsigned char 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  data            1   26[COMRAM] unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  1    wreg      void 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5540 ;;      Params:         0       0       0       0       0       0       0       0       0
  5541 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5543 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5544 ;;Total ram usage:        1 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:    3
  5547 ;; This function calls:
  5548 ;;		_acknowledge
  5549 ;; This function is called by:
  5550 ;;		_HighISR
  5551 ;; This function uses a non-reentrant model
  5552 ;;
  5553                           
  5554                           	psect	text29
  5555  000F96                     __ptext29:
  5556                           	opt stack 0
  5557  000F96                     _fillDataBuffer:
  5558                           	opt stack 21
  5559                           
  5560                           ;incstack = 0
  5561                           ;fillDataBuffer@data stored from wreg
  5562  000F96  6E1B               	movwf	fillDataBuffer@data,c
  5563                           
  5564                           ;UART_Driver.c: 70: switch(readBuffer.state) {
  5565  000F98  D0B1               	goto	i2l122
  5566  000F9A                     
  5567                           ;UART_Driver.c: 72: if(data == 0x26) {
  5568  000F9A  0E26               	movlw	38
  5569  000F9C  181B               	xorwf	fillDataBuffer@data,w,c
  5570  000F9E  A4D8               	btfss	status,2,c
  5571  000FA0  D00E               	goto	i2l124
  5572                           
  5573                           ;UART_Driver.c: 73: readBuffer.typeCnt = 0;
  5574  000FA2  0E00               	movlw	0
  5575  000FA4  0101               	movlb	1	; () banked
  5576  000FA6  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5577                           
  5578                           ;UART_Driver.c: 74: readBuffer.senderCnt = 0;
  5579  000FA8  0E00               	movlw	0
  5580  000FAA  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5581                           
  5582                           ;UART_Driver.c: 75: readBuffer.commandCnt = 0;
  5583  000FAC  0E00               	movlw	0
  5584  000FAE  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5585                           
  5586                           ;UART_Driver.c: 76: readBuffer.messageCnt = 0;
  5587  000FB0  0E00               	movlw	0
  5588  000FB2  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5589                           
  5590                           ;UART_Driver.c: 77: readReady = 0;
  5591  000FB4  0E00               	movlw	0
  5592  000FB6  6E3C               	movwf	_readReady,c
  5593                           
  5594                           ;UART_Driver.c: 78: readBuffer.state = 0x01;
  5595  000FB8  0E01               	movlw	1
  5596  000FBA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5597                           
  5598                           ;UART_Driver.c: 79: } else {
  5599  000FBC  0012               	return	
  5600  000FBE                     i2l124:
  5601                           
  5602                           ;UART_Driver.c: 80: readBuffer.state = 0x00;
  5603                           
  5604                           ; BSR set to: 1
  5605  000FBE  0E00               	movlw	0
  5606  000FC0  0101               	movlb	1	; () banked
  5607  000FC2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5608                           
  5609                           ; BSR set to: 1
  5610                           ;UART_Driver.c: 82: }
  5611                           ;UART_Driver.c: 83: break;
  5612                           
  5613                           ; BSR set to: 1
  5614                           ;UART_Driver.c: 81: return;
  5615  000FC4  0012               	return	
  5616  000FC6                     
  5617                           ; BSR set to: 1
  5618                           ;UART_Driver.c: 86: if (data == 0x3A) {
  5619                           
  5620                           ; BSR set to: 1
  5621  000FC6  0E3A               	movlw	58
  5622  000FC8  181B               	xorwf	fillDataBuffer@data,w,c
  5623  000FCA  A4D8               	btfss	status,2,c
  5624  000FCC  D00D               	goto	i2l129
  5625                           
  5626                           ; BSR set to: 1
  5627                           ;UART_Driver.c: 87: readBuffer.state = 0x02;
  5628  000FCE  0E02               	movlw	2
  5629  000FD0  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5630                           
  5631                           ; BSR set to: 1
  5632                           ;UART_Driver.c: 88: readBuffer.type[readBuffer.typeCnt] = '\0';
  5633  000FD2  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5634  000FD4  0D01               	mullw	1
  5635  000FD6  0E00               	movlw	low _readBuffer
  5636  000FD8  24F3               	addwf	prodl,w,c
  5637  000FDA  6ED9               	movwf	fsr2l,c
  5638  000FDC  0E01               	movlw	high _readBuffer
  5639  000FDE  20F4               	addwfc	prodh,w,c
  5640  000FE0  6EDA               	movwf	fsr2h,c
  5641  000FE2  0E00               	movlw	0
  5642  000FE4  6EDF               	movwf	indf2,c
  5643                           
  5644                           ;UART_Driver.c: 89: } else {
  5645  000FE6  0012               	return	
  5646  000FE8                     i2l129:
  5647                           
  5648                           ; BSR set to: 1
  5649                           ;UART_Driver.c: 90: readBuffer.type[readBuffer.typeCnt] = data;
  5650                           
  5651                           ; BSR set to: 1
  5652  000FE8  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5653  000FEA  0D01               	mullw	1
  5654  000FEC  0E00               	movlw	low _readBuffer
  5655  000FEE  24F3               	addwf	prodl,w,c
  5656  000FF0  6ED9               	movwf	fsr2l,c
  5657  000FF2  0E01               	movlw	high _readBuffer
  5658  000FF4  20F4               	addwfc	prodh,w,c
  5659  000FF6  6EDA               	movwf	fsr2h,c
  5660  000FF8  C01B  FFDF         	movff	fillDataBuffer@data,indf2
  5661                           
  5662                           ; BSR set to: 1
  5663                           ;UART_Driver.c: 91: readBuffer.typeCnt++;
  5664  000FFC  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5665                           
  5666                           ; BSR set to: 1
  5667                           ;UART_Driver.c: 92: if(readBuffer.typeCnt > 10) {
  5668  000FFE  0E0A               	movlw	10
  5669  001000  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5670  001002  0012               	return	
  5671                           
  5672                           ; BSR set to: 1
  5673                           ;UART_Driver.c: 93: readBuffer.typeCnt = 0;
  5674  001004  0E00               	movlw	0
  5675  001006  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5676                           
  5677                           ; BSR set to: 1
  5678                           ;UART_Driver.c: 94: }
  5679                           ;UART_Driver.c: 95: }
  5680                           ;UART_Driver.c: 96: break;
  5681                           
  5682                           ; BSR set to: 1
  5683  001008  0012               	return	
  5684  00100A                     
  5685                           ; BSR set to: 1
  5686                           ;UART_Driver.c: 99: if (data == 0x3A) {
  5687                           
  5688                           ; BSR set to: 1
  5689  00100A  0E3A               	movlw	58
  5690  00100C  181B               	xorwf	fillDataBuffer@data,w,c
  5691  00100E  A4D8               	btfss	status,2,c
  5692  001010  D00D               	goto	i2l133
  5693                           
  5694                           ; BSR set to: 1
  5695                           ;UART_Driver.c: 100: readBuffer.state = 0x03;
  5696  001012  0E03               	movlw	3
  5697  001014  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5698                           
  5699                           ; BSR set to: 1
  5700                           ;UART_Driver.c: 101: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5701  001016  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5702  001018  0D01               	mullw	1
  5703  00101A  0E0B               	movlw	low (_readBuffer+11)
  5704  00101C  24F3               	addwf	prodl,w,c
  5705  00101E  6ED9               	movwf	fsr2l,c
  5706  001020  0E01               	movlw	high (_readBuffer+11)
  5707  001022  20F4               	addwfc	prodh,w,c
  5708  001024  6EDA               	movwf	fsr2h,c
  5709  001026  0E00               	movlw	0
  5710  001028  6EDF               	movwf	indf2,c
  5711                           
  5712                           ;UART_Driver.c: 102: } else {
  5713  00102A  0012               	return	
  5714  00102C                     i2l133:
  5715                           
  5716                           ; BSR set to: 1
  5717                           ;UART_Driver.c: 103: readBuffer.sender[readBuffer.senderCnt] = data;
  5718                           
  5719                           ; BSR set to: 1
  5720  00102C  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5721  00102E  0D01               	mullw	1
  5722  001030  0E0B               	movlw	low (_readBuffer+11)
  5723  001032  24F3               	addwf	prodl,w,c
  5724  001034  6ED9               	movwf	fsr2l,c
  5725  001036  0E01               	movlw	high (_readBuffer+11)
  5726  001038  20F4               	addwfc	prodh,w,c
  5727  00103A  6EDA               	movwf	fsr2h,c
  5728  00103C  C01B  FFDF         	movff	fillDataBuffer@data,indf2
  5729                           
  5730                           ; BSR set to: 1
  5731                           ;UART_Driver.c: 104: readBuffer.senderCnt++;
  5732  001040  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5733                           
  5734                           ; BSR set to: 1
  5735                           ;UART_Driver.c: 105: if(readBuffer.senderCnt > 50) {
  5736  001042  0E32               	movlw	50
  5737  001044  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5738  001046  0012               	return	
  5739                           
  5740                           ; BSR set to: 1
  5741                           ;UART_Driver.c: 106: readBuffer.senderCnt = 0;
  5742  001048  0E00               	movlw	0
  5743  00104A  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5744                           
  5745                           ; BSR set to: 1
  5746                           ;UART_Driver.c: 107: }
  5747                           ;UART_Driver.c: 108: }
  5748                           ;UART_Driver.c: 109: break;
  5749                           
  5750                           ; BSR set to: 1
  5751  00104C  0012               	return	
  5752  00104E                     
  5753                           ; BSR set to: 1
  5754                           ;UART_Driver.c: 112: if (data == 0x3A) {
  5755                           
  5756                           ; BSR set to: 1
  5757  00104E  0E3A               	movlw	58
  5758  001050  181B               	xorwf	fillDataBuffer@data,w,c
  5759  001052  A4D8               	btfss	status,2,c
  5760  001054  D00D               	goto	i2l137
  5761                           
  5762                           ; BSR set to: 1
  5763                           ;UART_Driver.c: 113: readBuffer.state = 0x04;
  5764  001056  0E04               	movlw	4
  5765  001058  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5766                           
  5767                           ; BSR set to: 1
  5768                           ;UART_Driver.c: 114: readBuffer.command[readBuffer.commandCnt] = '\0';
  5769  00105A  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5770  00105C  0D01               	mullw	1
  5771  00105E  0E3E               	movlw	low (_readBuffer+62)
  5772  001060  24F3               	addwf	prodl,w,c
  5773  001062  6ED9               	movwf	fsr2l,c
  5774  001064  0E01               	movlw	high (_readBuffer+62)
  5775  001066  20F4               	addwfc	prodh,w,c
  5776  001068  6EDA               	movwf	fsr2h,c
  5777  00106A  0E00               	movlw	0
  5778  00106C  6EDF               	movwf	indf2,c
  5779                           
  5780                           ;UART_Driver.c: 115: } else {
  5781  00106E  0012               	return	
  5782  001070                     i2l137:
  5783                           
  5784                           ; BSR set to: 1
  5785                           ;UART_Driver.c: 116: readBuffer.command[readBuffer.commandCnt] = data;
  5786                           
  5787                           ; BSR set to: 1
  5788  001070  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5789  001072  0D01               	mullw	1
  5790  001074  0E3E               	movlw	low (_readBuffer+62)
  5791  001076  24F3               	addwf	prodl,w,c
  5792  001078  6ED9               	movwf	fsr2l,c
  5793  00107A  0E01               	movlw	high (_readBuffer+62)
  5794  00107C  20F4               	addwfc	prodh,w,c
  5795  00107E  6EDA               	movwf	fsr2h,c
  5796  001080  C01B  FFDF         	movff	fillDataBuffer@data,indf2
  5797                           
  5798                           ; BSR set to: 1
  5799                           ;UART_Driver.c: 117: readBuffer.commandCnt++;
  5800  001084  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5801                           
  5802                           ; BSR set to: 1
  5803                           ;UART_Driver.c: 118: if(readBuffer.commandCnt > 50) {
  5804  001086  0E32               	movlw	50
  5805  001088  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5806  00108A  0012               	return	
  5807                           
  5808                           ; BSR set to: 1
  5809                           ;UART_Driver.c: 119: readBuffer.commandCnt = 0;
  5810  00108C  0E00               	movlw	0
  5811  00108E  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5812                           
  5813                           ; BSR set to: 1
  5814                           ;UART_Driver.c: 120: }
  5815                           ;UART_Driver.c: 121: }
  5816                           ;UART_Driver.c: 122: break;
  5817                           
  5818                           ; BSR set to: 1
  5819  001090  0012               	return	
  5820  001092                     
  5821                           ; BSR set to: 1
  5822                           ;UART_Driver.c: 125: if (data == 0x3A) {
  5823                           
  5824                           ; BSR set to: 1
  5825  001092  0E3A               	movlw	58
  5826  001094  181B               	xorwf	fillDataBuffer@data,w,c
  5827  001096  A4D8               	btfss	status,2,c
  5828  001098  D00D               	goto	i2l141
  5829                           
  5830                           ; BSR set to: 1
  5831                           ;UART_Driver.c: 126: readBuffer.state = 0x05;
  5832  00109A  0E05               	movlw	5
  5833  00109C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5834                           
  5835                           ; BSR set to: 1
  5836                           ;UART_Driver.c: 127: readBuffer.message[readBuffer.messageCnt] = '\0';
  5837  00109E  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5838  0010A0  0D01               	mullw	1
  5839  0010A2  0E71               	movlw	low (_readBuffer+113)
  5840  0010A4  24F3               	addwf	prodl,w,c
  5841  0010A6  6ED9               	movwf	fsr2l,c
  5842  0010A8  0E01               	movlw	high (_readBuffer+113)
  5843  0010AA  20F4               	addwfc	prodh,w,c
  5844  0010AC  6EDA               	movwf	fsr2h,c
  5845  0010AE  0E00               	movlw	0
  5846  0010B0  6EDF               	movwf	indf2,c
  5847                           
  5848                           ;UART_Driver.c: 128: } else {
  5849  0010B2  0012               	return	
  5850  0010B4                     i2l141:
  5851                           
  5852                           ; BSR set to: 1
  5853                           ;UART_Driver.c: 129: readBuffer.message[readBuffer.messageCnt] = data;
  5854                           
  5855                           ; BSR set to: 1
  5856  0010B4  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5857  0010B6  0D01               	mullw	1
  5858  0010B8  0E71               	movlw	low (_readBuffer+113)
  5859  0010BA  24F3               	addwf	prodl,w,c
  5860  0010BC  6ED9               	movwf	fsr2l,c
  5861  0010BE  0E01               	movlw	high (_readBuffer+113)
  5862  0010C0  20F4               	addwfc	prodh,w,c
  5863  0010C2  6EDA               	movwf	fsr2h,c
  5864  0010C4  C01B  FFDF         	movff	fillDataBuffer@data,indf2
  5865                           
  5866                           ; BSR set to: 1
  5867                           ;UART_Driver.c: 130: readBuffer.messageCnt++;
  5868  0010C8  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 1
  5871                           ;UART_Driver.c: 131: if(readBuffer.messageCnt > 50) {
  5872  0010CA  0E32               	movlw	50
  5873  0010CC  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5874  0010CE  0012               	return	
  5875                           
  5876                           ; BSR set to: 1
  5877                           ;UART_Driver.c: 132: readBuffer.messageCnt = 0;
  5878  0010D0  0E00               	movlw	0
  5879  0010D2  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5880                           
  5881                           ; BSR set to: 1
  5882                           ;UART_Driver.c: 133: }
  5883                           ;UART_Driver.c: 134: }
  5884                           ;UART_Driver.c: 135: break;
  5885                           
  5886                           ; BSR set to: 1
  5887  0010D4  0012               	return	
  5888  0010D6                     
  5889                           ; BSR set to: 1
  5890                           ;UART_Driver.c: 138: if (data == 0x24) {
  5891                           
  5892                           ; BSR set to: 1
  5893  0010D6  0E24               	movlw	36
  5894  0010D8  181B               	xorwf	fillDataBuffer@data,w,c
  5895  0010DA  A4D8               	btfss	status,2,c
  5896  0010DC  D008               	goto	i2l145
  5897                           
  5898                           ; BSR set to: 1
  5899                           ;UART_Driver.c: 139: acknowledge();
  5900  0010DE  ECD7  F00C         	call	_acknowledge	;wreg free
  5901                           
  5902                           ;UART_Driver.c: 140: readBuffer.state = 0x00;
  5903  0010E2  0E00               	movlw	0
  5904  0010E4  0101               	movlb	1	; () banked
  5905  0010E6  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5906                           
  5907                           ; BSR set to: 1
  5908                           ;UART_Driver.c: 141: readReady = 1;
  5909  0010E8  0E01               	movlw	1
  5910  0010EA  6E3C               	movwf	_readReady,c
  5911                           
  5912                           ;UART_Driver.c: 142: } else {
  5913  0010EC  0012               	return	
  5914  0010EE                     i2l145:
  5915                           
  5916                           ; BSR set to: 1
  5917                           ;UART_Driver.c: 144: readBuffer.readId = (uint8_t)(data - 0x30);
  5918                           
  5919                           ; BSR set to: 1
  5920  0010EE  501B               	movf	fillDataBuffer@data,w,c
  5921  0010F0  0FD0               	addlw	208
  5922  0010F2  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  5923                           
  5924                           ; BSR set to: 1
  5925                           ;UART_Driver.c: 145: }
  5926                           ;UART_Driver.c: 146: break;
  5927  0010F4  0012               	return	
  5928  0010F6                     
  5929                           ; BSR set to: 1
  5930                           ;UART_Driver.c: 149: readBuffer.state = 0x00;
  5931                           
  5932                           ; BSR set to: 1
  5933  0010F6  0E00               	movlw	0
  5934  0010F8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5935                           
  5936                           ; BSR set to: 1
  5937                           ;UART_Driver.c: 151: }
  5938                           
  5939                           ;UART_Driver.c: 150: break;
  5940  0010FA  0012               	return	
  5941  0010FC                     i2l122:
  5942                           
  5943                           ; BSR set to: 1
  5944  0010FC  0101               	movlb	1	; () banked
  5945  0010FE  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  5946                           
  5947                           ; Switch size 1, requested type "space"
  5948                           ; Number of cases is 6, Range of values is 0 to 5
  5949                           ; switch strategies available:
  5950                           ; Name         Instructions Cycles
  5951                           ; simple_byte           19    10 (average)
  5952                           ;	Chosen strategy is simple_byte
  5953  001100  0A00               	xorlw	0	; case 0
  5954  001102  B4D8               	btfsc	status,2,c
  5955  001104  D74A               	goto	i2l123
  5956  001106  0A01               	xorlw	1	; case 1
  5957  001108  B4D8               	btfsc	status,2,c
  5958  00110A  D75D               	goto	i2l128
  5959  00110C  0A03               	xorlw	3	; case 2
  5960  00110E  B4D8               	btfsc	status,2,c
  5961  001110  D77C               	goto	i2l132
  5962  001112  0A01               	xorlw	1	; case 3
  5963  001114  B4D8               	btfsc	status,2,c
  5964  001116  D79B               	goto	i2l136
  5965  001118  0A07               	xorlw	7	; case 4
  5966  00111A  B4D8               	btfsc	status,2,c
  5967  00111C  D7BA               	goto	i2l140
  5968  00111E  0A01               	xorlw	1	; case 5
  5969  001120  B4D8               	btfsc	status,2,c
  5970  001122  D7D9               	goto	i2l144
  5971  001124  D7E8               	goto	i2l147
  5972  001126                     __end_of_fillDataBuffer:
  5973                           	opt stack 0
  5974                           pclatu	equ	0xFFB
  5975                           pclath	equ	0xFFA
  5976                           tblptru	equ	0xFF8
  5977                           tblptrh	equ	0xFF7
  5978                           tblptrl	equ	0xFF6
  5979                           tablat	equ	0xFF5
  5980                           prodh	equ	0xFF4
  5981                           prodl	equ	0xFF3
  5982                           intcon	equ	0xFF2
  5983                           intcon2	equ	0xFF1
  5984                           indf0	equ	0xFEF
  5985                           postinc0	equ	0xFEE
  5986                           plusw0	equ	0xFEB
  5987                           fsr0h	equ	0xFEA
  5988                           fsr0l	equ	0xFE9
  5989                           wreg	equ	0xFE8
  5990                           indf1	equ	0xFE7
  5991                           postinc1	equ	0xFE6
  5992                           postdec1	equ	0xFE5
  5993                           fsr1h	equ	0xFE2
  5994                           fsr1l	equ	0xFE1
  5995                           bsr	equ	0xFE0
  5996                           indf2	equ	0xFDF
  5997                           postinc2	equ	0xFDE
  5998                           postdec2	equ	0xFDD
  5999                           plusw2	equ	0xFDB
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function _acknowledge *****************
  6005 ;; Defined at:
  6006 ;;		line 154 in file "Drivers/UART_Driver.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;		None
  6009 ;; Auto vars:     Size  Location     Type
  6010 ;;		None
  6011 ;; Return value:  Size  Location     Type
  6012 ;;                  1    wreg      void 
  6013 ;; Registers used:
  6014 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6015 ;; Tracked objects:
  6016 ;;		On entry : 0/0
  6017 ;;		On exit  : 0/0
  6018 ;;		Unchanged: 0/0
  6019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6020 ;;      Params:         0       0       0       0       0       0       0       0       0
  6021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6023 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6024 ;;Total ram usage:        0 bytes
  6025 ;; Hardware stack levels used:    1
  6026 ;; Hardware stack levels required when called:    2
  6027 ;; This function calls:
  6028 ;;		i2_printf
  6029 ;; This function is called by:
  6030 ;;		_fillDataBuffer
  6031 ;; This function uses a non-reentrant model
  6032 ;;
  6033                           
  6034                           	psect	text30
  6035  0019AE                     __ptext30:
  6036                           	opt stack 0
  6037  0019AE                     _acknowledge:
  6038                           	opt stack 21
  6039                           
  6040                           ;UART_Driver.c: 155: printf(startCharacter);
  6041                           
  6042                           ; BSR set to: 1
  6043                           ;incstack = 0
  6044  0019AE  C042  F00D         	movff	_startCharacter,i2printf@f
  6045  0019B2  C043  F00E         	movff	_startCharacter+1,i2printf@f+1
  6046  0019B6  500D               	movf	i2printf@f,w,c
  6047  0019B8  100E               	iorwf	i2printf@f+1,w,c
  6048  0019BA  A4D8               	btfss	status,2,c
  6049  0019BC  0E00               	movlw	low (__mediumconst shr (0+16))
  6050  0019BE  6E0F               	movwf	i2printf@f+2,c
  6051  0019C0  ECAC  F006         	call	i2_printf	;wreg free
  6052                           
  6053                           ;UART_Driver.c: 157: printf(ackCharacter);
  6054  0019C4  C03E  F00D         	movff	_ackCharacter,i2printf@f
  6055  0019C8  C03F  F00E         	movff	_ackCharacter+1,i2printf@f+1
  6056  0019CC  500D               	movf	i2printf@f,w,c
  6057  0019CE  100E               	iorwf	i2printf@f+1,w,c
  6058  0019D0  A4D8               	btfss	status,2,c
  6059  0019D2  0E00               	movlw	low (__mediumconst shr (0+16))
  6060  0019D4  6E0F               	movwf	i2printf@f+2,c
  6061  0019D6  ECAC  F006         	call	i2_printf	;wreg free
  6062                           
  6063                           ;UART_Driver.c: 159: printf("%x",readBuffer.readId);
  6064  0019DA  0E2F               	movlw	low STR_5
  6065  0019DC  6E0D               	movwf	i2printf@f,c
  6066  0019DE  0E08               	movlw	high STR_5
  6067  0019E0  6E0E               	movwf	i2printf@f+1,c
  6068  0019E2  500D               	movf	i2printf@f,w,c
  6069  0019E4  100E               	iorwf	i2printf@f+1,w,c
  6070  0019E6  A4D8               	btfss	status,2,c
  6071  0019E8  0E00               	movlw	low (__mediumconst shr (0+16))
  6072  0019EA  6E0F               	movwf	i2printf@f+2,c
  6073  0019EC  C1A4  F010         	movff	_readBuffer+164,?i2_printf+3
  6074  0019F0  6A11               	clrf	?i2_printf+4,c
  6075  0019F2  ECAC  F006         	call	i2_printf	;wreg free
  6076                           
  6077                           ;UART_Driver.c: 161: printf(stopCharacter);
  6078  0019F6  C040  F00D         	movff	_stopCharacter,i2printf@f
  6079  0019FA  C041  F00E         	movff	_stopCharacter+1,i2printf@f+1
  6080  0019FE  500D               	movf	i2printf@f,w,c
  6081  001A00  100E               	iorwf	i2printf@f+1,w,c
  6082  001A02  A4D8               	btfss	status,2,c
  6083  001A04  0E00               	movlw	low (__mediumconst shr (0+16))
  6084  001A06  6E0F               	movwf	i2printf@f+2,c
  6085  001A08  ECAC  F006         	call	i2_printf	;wreg free
  6086  001A0C  0012               	return		;funcret
  6087  001A0E                     __end_of_acknowledge:
  6088                           	opt stack 0
  6089                           pclatu	equ	0xFFB
  6090                           pclath	equ	0xFFA
  6091                           tblptru	equ	0xFF8
  6092                           tblptrh	equ	0xFF7
  6093                           tblptrl	equ	0xFF6
  6094                           tablat	equ	0xFF5
  6095                           prodh	equ	0xFF4
  6096                           prodl	equ	0xFF3
  6097                           intcon	equ	0xFF2
  6098                           intcon2	equ	0xFF1
  6099                           indf0	equ	0xFEF
  6100                           postinc0	equ	0xFEE
  6101                           plusw0	equ	0xFEB
  6102                           fsr0h	equ	0xFEA
  6103                           fsr0l	equ	0xFE9
  6104                           wreg	equ	0xFE8
  6105                           indf1	equ	0xFE7
  6106                           postinc1	equ	0xFE6
  6107                           postdec1	equ	0xFE5
  6108                           fsr1h	equ	0xFE2
  6109                           fsr1l	equ	0xFE1
  6110                           bsr	equ	0xFE0
  6111                           indf2	equ	0xFDF
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           plusw2	equ	0xFDB
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function i2_printf *****************
  6120 ;; Defined at:
  6121 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  f               3   12[COMRAM] PTR const unsigned char 
  6124 ;;		 -> STR_20(2), STR_19(2), STR_17(2), STR_11(2), 
  6125 ;;		 -> STR_10(3), STR_9(2), STR_8(2), STR_7(2), 
  6126 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  6127 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  6128 ;;		 -> C_DOOR_SendStates@com(3), 
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  printf          4    0        struct .
  6131 ;;  printf          3    0        PTR const unsigned char 
  6132 ;;  printf          2   23[COMRAM] unsigned int 
  6133 ;;  printf          2   19[COMRAM] PTR void [1]
  6134 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6135 ;;  printf          2    0        unsigned int 
  6136 ;;  printf          1   25[COMRAM] char 
  6137 ;;  printf          1   22[COMRAM] unsigned char 
  6138 ;;  printf          1   21[COMRAM] char 
  6139 ;;  printf          1   18[COMRAM] unsigned char 
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  2   12[COMRAM] int 
  6142 ;; Registers used:
  6143 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6149 ;;      Params:         5       0       0       0       0       0       0       0       0
  6150 ;;      Locals:         8       0       0       0       0       0       0       0       0
  6151 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6152 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6153 ;;Total ram usage:       14 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    1
  6156 ;; This function calls:
  6157 ;;		i2___lwdiv
  6158 ;;		i2___lwmod
  6159 ;;		i2_putch
  6160 ;; This function is called by:
  6161 ;;		_acknowledge
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           	psect	text31
  6166  000D58                     __ptext31:
  6167                           	opt stack 0
  6168  000D58                     i2_printf:
  6169                           	opt stack 21
  6170                           
  6171                           ;doprnt.c: 466: va_list ap;
  6172                           ;doprnt.c: 499: signed char c;
  6173                           ;doprnt.c: 506: signed char prec;
  6174                           ;doprnt.c: 508: unsigned char flag;
  6175                           ;doprnt.c: 523: union {
  6176                           ;doprnt.c: 524: unsigned long vd;
  6177                           ;doprnt.c: 525: double integ;
  6178                           ;doprnt.c: 526: } tmpval;
  6179                           ;doprnt.c: 528: unsigned int val;
  6180                           ;doprnt.c: 529: unsigned len;
  6181                           ;doprnt.c: 530: const char * cp;
  6182                           ;doprnt.c: 533: *ap = __va_start();
  6183                           
  6184                           ;incstack = 0
  6185  000D58  0E10               	movlw	low (?i2_printf+3)
  6186  000D5A  6E14               	movwf	i2printf@ap,c
  6187  000D5C  0E00               	movlw	high (?i2_printf+3)
  6188  000D5E  6E15               	movwf	i2printf@ap+1,c
  6189                           
  6190                           ;doprnt.c: 536: while(c = *f++) {
  6191  000D60  D100               	goto	i2u152_40
  6192  000D62                     
  6193                           ;doprnt.c: 538: if(c != '%')
  6194  000D62  0E25               	movlw	37
  6195  000D64  181A               	xorwf	i2printf@c,w,c
  6196  000D66  B4D8               	btfsc	status,2,c
  6197  000D68  D004               	goto	i2l384
  6198                           
  6199                           ;doprnt.c: 540: {
  6200                           ;doprnt.c: 541: (putch(c) );
  6201  000D6A  501A               	movf	i2printf@c,w,c
  6202  000D6C  EC3B  F00E         	call	i2_putch
  6203                           
  6204                           ;doprnt.c: 542: continue;
  6205  000D70  D0F8               	goto	i2u152_40
  6206  000D72                     i2l384:
  6207                           
  6208                           ;doprnt.c: 543: }
  6209                           ;doprnt.c: 548: flag = 0;
  6210  000D72  0E00               	movlw	0
  6211  000D74  6E17               	movwf	i2printf@flag,c
  6212                           
  6213                           ;doprnt.c: 635: switch(c = *f++) {
  6214  000D76  D006               	goto	i2l385
  6215  000D78                     
  6216                           ;doprnt.c: 721: flag |= 0x80;
  6217  000D78  8E17               	bsf	i2printf@flag,7,c
  6218                           
  6219                           ;doprnt.c: 723: break;
  6220  000D7A  D028               	goto	i2l390
  6221  000D7C                     
  6222                           ;doprnt.c: 809: (putch(c) );
  6223  000D7C  501A               	movf	i2printf@c,w,c
  6224  000D7E  EC3B  F00E         	call	i2_putch
  6225                           
  6226                           ;doprnt.c: 810: continue;
  6227  000D82  D0EF               	goto	i2u152_40
  6228  000D84                     i2l385:
  6229  000D84  C00D  FFF6         	movff	i2printf@f,tblptrl
  6230  000D88  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6231  000D8C  C00F  FFF8         	movff	i2printf@f+2,tblptru
  6232  000D90  0E01               	movlw	1
  6233  000D92  260D               	addwf	i2printf@f,f,c
  6234  000D94  0E00               	movlw	0
  6235  000D96  220E               	addwfc	i2printf@f+1,f,c
  6236  000D98  220F               	addwfc	i2printf@f+2,f,c
  6237  000D9A  BAF8               	btfsc	tblptru,5,c
  6238  000D9C  D003               	bra	i2u142_47
  6239  000D9E  0008               	tblrd		*
  6240  000DA0  50F5               	movf	tablat,w,c
  6241  000DA2  D005               	bra	i2u142_40
  6242  000DA4                     i2u142_47:
  6243  000DA4  CFF6 FFE9          	movff	tblptrl,fsr0l
  6244  000DA8  CFF7 FFEA          	movff	tblptrh,fsr0h
  6245  000DAC  50EF               	movf	indf0,w,c
  6246  000DAE                     i2u142_40:
  6247  000DAE  6E1A               	movwf	i2printf@c,c
  6248  000DB0  501A               	movf	i2printf@c,w,c
  6249                           
  6250                           ; Switch size 1, requested type "space"
  6251                           ; Number of cases is 4, Range of values is 0 to 120
  6252                           ; switch strategies available:
  6253                           ; Name         Instructions Cycles
  6254                           ; simple_byte           13     7 (average)
  6255                           ;	Chosen strategy is simple_byte
  6256  000DB2  0A00               	xorlw	0	; case 0
  6257  000DB4  B4D8               	btfsc	status,2,c
  6258  000DB6  0012               	return	
  6259  000DB8  0A64               	xorlw	100	; case 100
  6260  000DBA  B4D8               	btfsc	status,2,c
  6261  000DBC  D007               	goto	i2l390
  6262  000DBE  0A0D               	xorlw	13	; case 105
  6263  000DC0  B4D8               	btfsc	status,2,c
  6264  000DC2  D004               	goto	i2l390
  6265  000DC4  0A11               	xorlw	17	; case 120
  6266  000DC6  B4D8               	btfsc	status,2,c
  6267  000DC8  D7D7               	goto	i2l391
  6268  000DCA  D7D8               	goto	i2l392
  6269  000DCC                     i2l390:
  6270                           
  6271                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6272  000DCC  BE17               	btfsc	i2printf@flag,7,c
  6273  000DCE  D015               	goto	i2l393
  6274                           
  6275                           ;doprnt.c: 1253: {
  6276                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6277  000DD0  C014  FFD9         	movff	i2printf@ap,fsr2l
  6278  000DD4  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  6279  000DD8  CFDE F018          	movff	postinc2,i2printf@val
  6280  000DDC  CFDD F019          	movff	postdec2,i2printf@val+1
  6281  000DE0  0E02               	movlw	2
  6282  000DE2  2614               	addwf	i2printf@ap,f,c
  6283  000DE4  0E00               	movlw	0
  6284  000DE6  2215               	addwfc	i2printf@ap+1,f,c
  6285                           
  6286                           ;doprnt.c: 1261: if((int)val < 0) {
  6287  000DE8  AE19               	btfss	i2printf@val+1,7,c
  6288  000DEA  D04A               	goto	i2l396
  6289                           
  6290                           ;doprnt.c: 1262: flag |= 0x03;
  6291  000DEC  0E03               	movlw	3
  6292  000DEE  1217               	iorwf	i2printf@flag,f,c
  6293                           
  6294                           ;doprnt.c: 1263: val = -val;
  6295  000DF0  6C18               	negf	i2printf@val,c
  6296  000DF2  1E19               	comf	i2printf@val+1,f,c
  6297  000DF4  B0D8               	btfsc	status,0,c
  6298  000DF6  2A19               	incf	i2printf@val+1,f,c
  6299                           
  6300                           ;doprnt.c: 1264: }
  6301                           ;doprnt.c: 1266: }
  6302  000DF8  D043               	goto	i2l396
  6303  000DFA                     i2l393:
  6304                           
  6305                           ;doprnt.c: 1268: else
  6306                           ;doprnt.c: 1273: {
  6307                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6308  000DFA  C014  FFD9         	movff	i2printf@ap,fsr2l
  6309  000DFE  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  6310  000E02  CFDE F018          	movff	postinc2,i2printf@val
  6311  000E06  CFDD F019          	movff	postdec2,i2printf@val+1
  6312  000E0A  0E02               	movlw	2
  6313  000E0C  2614               	addwf	i2printf@ap,f,c
  6314  000E0E  0E00               	movlw	0
  6315  000E10  2215               	addwfc	i2printf@ap+1,f,c
  6316                           
  6317                           ;doprnt.c: 1287: }
  6318                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6319  000E12  D036               	goto	i2l396
  6320  000E14                     
  6321                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6322  000E14  0E01               	movlw	1
  6323  000E16  6E1A               	movwf	i2printf@c,c
  6324  000E18                     i2l1999:
  6325  000E18  0E05               	movlw	5
  6326  000E1A  181A               	xorwf	i2printf@c,w,c
  6327  000E1C  B4D8               	btfsc	status,2,c
  6328  000E1E  D038               	goto	i2l401
  6329                           
  6330                           ;doprnt.c: 1306: if(val < dpowers[c])
  6331  000E20  501A               	movf	i2printf@c,w,c
  6332  000E22  0D02               	mullw	2
  6333  000E24  0E01               	movlw	low _dpowers
  6334  000E26  24F3               	addwf	prodl,w,c
  6335  000E28  6EF6               	movwf	tblptrl,c
  6336  000E2A  0E08               	movlw	high _dpowers
  6337  000E2C  20F4               	addwfc	prodh,w,c
  6338  000E2E  6EF7               	movwf	tblptrh,c
  6339  000E30                     	if	1	;There are 3 active tblptr bytes
  6340  000E30  6AF8               	clrf	tblptru,c
  6341  000E32  0E00               	movlw	low (__mediumconst shr (0+16))
  6342  000E34  22F8               	addwfc	tblptru,f,c
  6343  000E36                     	endif
  6344  000E36  0009               	tblrd		*+
  6345  000E38  50F5               	movf	tablat,w,c
  6346  000E3A  5C18               	subwf	i2printf@val,w,c
  6347  000E3C  0009               	tblrd		*+
  6348  000E3E  50F5               	movf	tablat,w,c
  6349  000E40  5819               	subwfb	i2printf@val+1,w,c
  6350  000E42  A0D8               	btfss	status,0,c
  6351  000E44  D025               	goto	i2l401
  6352                           
  6353                           ;doprnt.c: 1307: break;
  6354  000E46  2A1A               	incf	i2printf@c,f,c
  6355  000E48  D7E7               	goto	i2l1999
  6356  000E4A                     
  6357                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6358  000E4A  0E01               	movlw	1
  6359  000E4C  6E1A               	movwf	i2printf@c,c
  6360  000E4E                     i2l2013:
  6361  000E4E  0E04               	movlw	4
  6362  000E50  181A               	xorwf	i2printf@c,w,c
  6363  000E52  B4D8               	btfsc	status,2,c
  6364  000E54  D01D               	goto	i2l401
  6365                           
  6366                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6367  000E56  501A               	movf	i2printf@c,w,c
  6368  000E58  0D02               	mullw	2
  6369  000E5A  0E0B               	movlw	low _hexpowers
  6370  000E5C  24F3               	addwf	prodl,w,c
  6371  000E5E  6EF6               	movwf	tblptrl,c
  6372  000E60  0E08               	movlw	high _hexpowers
  6373  000E62  20F4               	addwfc	prodh,w,c
  6374  000E64  6EF7               	movwf	tblptrh,c
  6375  000E66                     	if	1	;There are 3 active tblptr bytes
  6376  000E66  6AF8               	clrf	tblptru,c
  6377  000E68  0E00               	movlw	low (__mediumconst shr (0+16))
  6378  000E6A  22F8               	addwfc	tblptru,f,c
  6379  000E6C                     	endif
  6380  000E6C  0009               	tblrd		*+
  6381  000E6E  50F5               	movf	tablat,w,c
  6382  000E70  5C18               	subwf	i2printf@val,w,c
  6383  000E72  0009               	tblrd		*+
  6384  000E74  50F5               	movf	tablat,w,c
  6385  000E76  5819               	subwfb	i2printf@val+1,w,c
  6386  000E78  A0D8               	btfss	status,0,c
  6387  000E7A  D00A               	goto	i2l401
  6388                           
  6389                           ;doprnt.c: 1318: break;
  6390  000E7C  2A1A               	incf	i2printf@c,f,c
  6391  000E7E  D7E7               	goto	i2l2013
  6392  000E80                     i2l396:
  6393  000E80  5017               	movf	i2printf@flag,w,c
  6394  000E82  0B80               	andlw	128
  6395                           
  6396                           ; Switch size 1, requested type "space"
  6397                           ; Number of cases is 2, Range of values is 0 to 128
  6398                           ; switch strategies available:
  6399                           ; Name         Instructions Cycles
  6400                           ; simple_byte            7     4 (average)
  6401                           ;	Chosen strategy is simple_byte
  6402  000E84  0A00               	xorlw	0	; case 0
  6403  000E86  B4D8               	btfsc	status,2,c
  6404  000E88  D7C5               	goto	i2l397
  6405  000E8A  0A80               	xorlw	128	; case 128
  6406  000E8C  B4D8               	btfsc	status,2,c
  6407  000E8E  D7DD               	goto	i2l402
  6408  000E90                     i2l401:
  6409                           
  6410                           ;doprnt.c: 1422: {
  6411                           ;doprnt.c: 1438: if(flag & 0x03)
  6412  000E90  C017  F012         	movff	i2printf@flag,??i2_printf
  6413  000E94  0E03               	movlw	3
  6414  000E96  1612               	andwf	??i2_printf,f,c
  6415  000E98  B4D8               	btfsc	status,2,c
  6416  000E9A  D003               	goto	i2l406
  6417                           
  6418                           ;doprnt.c: 1439: (putch('-') );
  6419  000E9C  0E2D               	movlw	45
  6420  000E9E  EC3B  F00E         	call	i2_putch
  6421  000EA2                     i2l406:
  6422                           
  6423                           ;doprnt.c: 1469: }
  6424                           ;doprnt.c: 1472: prec = c;
  6425  000EA2  C01A  F016         	movff	i2printf@c,i2printf@prec
  6426                           
  6427                           ;doprnt.c: 1474: while(prec--) {
  6428  000EA6  D059               	goto	i2l407
  6429  000EA8                     
  6430                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6431  000EA8  5016               	movf	i2printf@prec,w,c
  6432  000EAA  0D02               	mullw	2
  6433  000EAC  0E01               	movlw	low _dpowers
  6434  000EAE  24F3               	addwf	prodl,w,c
  6435  000EB0  6EF6               	movwf	tblptrl,c
  6436  000EB2  0E08               	movlw	high _dpowers
  6437  000EB4  20F4               	addwfc	prodh,w,c
  6438  000EB6  6EF7               	movwf	tblptrh,c
  6439  000EB8                     	if	1	;There are 3 active tblptr bytes
  6440  000EB8  6AF8               	clrf	tblptru,c
  6441  000EBA  0E00               	movlw	low (__mediumconst shr (0+16))
  6442  000EBC  22F8               	addwfc	tblptru,f,c
  6443  000EBE                     	endif
  6444  000EBE  0009               	tblrd		*+
  6445  000EC0  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6446  000EC4  000A               	tblrd		*-
  6447  000EC6  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6448  000ECA  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6449  000ECE  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6450  000ED2  EC31  F00D         	call	i2___lwdiv	;wreg free
  6451  000ED6  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6452  000EDA  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6453  000EDE  0E00               	movlw	0
  6454  000EE0  6E0B               	movwf	i2___lwmod@divisor+1,c
  6455  000EE2  0E0A               	movlw	10
  6456  000EE4  6E0A               	movwf	i2___lwmod@divisor,c
  6457  000EE6  ECA3  F00D         	call	i2___lwmod	;wreg free
  6458  000EEA  5008               	movf	?i2___lwmod,w,c
  6459  000EEC  0F30               	addlw	48
  6460  000EEE  6E1A               	movwf	i2printf@c,c
  6461                           
  6462                           ;doprnt.c: 1491: break;
  6463  000EF0  D031               	goto	i2l411
  6464  000EF2                     
  6465                           ;doprnt.c: 1499: {
  6466                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6467  000EF2  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6468  000EF6  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6469  000EFA  5016               	movf	i2printf@prec,w,c
  6470  000EFC  0D02               	mullw	2
  6471  000EFE  0E0B               	movlw	low _hexpowers
  6472  000F00  24F3               	addwf	prodl,w,c
  6473  000F02  6EF6               	movwf	tblptrl,c
  6474  000F04  0E08               	movlw	high _hexpowers
  6475  000F06  20F4               	addwfc	prodh,w,c
  6476  000F08  6EF7               	movwf	tblptrh,c
  6477  000F0A                     	if	1	;There are 3 active tblptr bytes
  6478  000F0A  6AF8               	clrf	tblptru,c
  6479  000F0C  0E00               	movlw	low (__mediumconst shr (0+16))
  6480  000F0E  22F8               	addwfc	tblptru,f,c
  6481  000F10                     	endif
  6482  000F10  0009               	tblrd		*+
  6483  000F12  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6484  000F16  000A               	tblrd		*-
  6485  000F18  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6486  000F1C  EC31  F00D         	call	i2___lwdiv	;wreg free
  6487  000F20  5001               	movf	?i2___lwdiv,w,c
  6488  000F22  0B0F               	andlw	15
  6489  000F24  6E13               	movwf	i2printf@idx,c
  6490                           
  6491                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6492  000F26  5013               	movf	i2printf@idx,w,c
  6493  000F28  0D01               	mullw	1
  6494  000F2A  0E13               	movlw	low STR_21
  6495  000F2C  24F3               	addwf	prodl,w,c
  6496  000F2E  6EF6               	movwf	tblptrl,c
  6497  000F30  0E08               	movlw	high STR_21
  6498  000F32  20F4               	addwfc	prodh,w,c
  6499  000F34  6EF7               	movwf	tblptrh,c
  6500  000F36                     	if	1	;There are 3 active tblptr bytes
  6501  000F36  6AF8               	clrf	tblptru,c
  6502  000F38  0E00               	movlw	low (__mediumconst shr (0+16))
  6503  000F3A  22F8               	addwfc	tblptru,f,c
  6504  000F3C                     	endif
  6505  000F3C  0008               	tblrd		*
  6506  000F3E  CFF5 F01A          	movff	tablat,i2printf@c
  6507                           
  6508                           ;doprnt.c: 1523: }
  6509                           
  6510                           ;doprnt.c: 1508: }
  6511                           ;doprnt.c: 1510: break;
  6512  000F42  D008               	goto	i2l411
  6513  000F44  5017               	movf	i2printf@flag,w,c
  6514  000F46  0B80               	andlw	128
  6515                           
  6516                           ; Switch size 1, requested type "space"
  6517                           ; Number of cases is 2, Range of values is 0 to 128
  6518                           ; switch strategies available:
  6519                           ; Name         Instructions Cycles
  6520                           ; simple_byte            7     4 (average)
  6521                           ;	Chosen strategy is simple_byte
  6522  000F48  0A00               	xorlw	0	; case 0
  6523  000F4A  B4D8               	btfsc	status,2,c
  6524  000F4C  D7AD               	goto	i2l410
  6525  000F4E  0A80               	xorlw	128	; case 128
  6526  000F50  B4D8               	btfsc	status,2,c
  6527  000F52  D7CF               	goto	i2l412
  6528  000F54                     i2l411:
  6529                           
  6530                           ;doprnt.c: 1524: (putch(c) );
  6531  000F54  501A               	movf	i2printf@c,w,c
  6532  000F56  EC3B  F00E         	call	i2_putch
  6533  000F5A                     i2l407:
  6534  000F5A  0616               	decf	i2printf@prec,f,c
  6535  000F5C  2816               	incf	i2printf@prec,w,c
  6536  000F5E  A4D8               	btfss	status,2,c
  6537  000F60  D7F1               	goto	i2l409
  6538  000F62                     i2u152_40:
  6539  000F62  C00D  FFF6         	movff	i2printf@f,tblptrl
  6540  000F66  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6541  000F6A  C00F  FFF8         	movff	i2printf@f+2,tblptru
  6542  000F6E  0E01               	movlw	1
  6543  000F70  260D               	addwf	i2printf@f,f,c
  6544  000F72  0E00               	movlw	0
  6545  000F74  220E               	addwfc	i2printf@f+1,f,c
  6546  000F76  220F               	addwfc	i2printf@f+2,f,c
  6547  000F78  BAF8               	btfsc	tblptru,5,c
  6548  000F7A  D003               	bra	i2u153_47
  6549  000F7C  0008               	tblrd		*
  6550  000F7E  50F5               	movf	tablat,w,c
  6551  000F80  D005               	bra	i2u153_40
  6552  000F82                     i2u153_47:
  6553  000F82  CFF6 FFE9          	movff	tblptrl,fsr0l
  6554  000F86  CFF7 FFEA          	movff	tblptrh,fsr0h
  6555  000F8A  50EF               	movf	indf0,w,c
  6556  000F8C                     i2u153_40:
  6557  000F8C  6E1A               	movwf	i2printf@c,c
  6558  000F8E  501A               	movf	i2printf@c,w,c
  6559  000F90  B4D8               	btfsc	status,2,c
  6560  000F92  0012               	return	
  6561  000F94  D6E6               	goto	i2l383
  6562  000F96                     __end_ofi2_printf:
  6563                           	opt stack 0
  6564                           pclatu	equ	0xFFB
  6565                           pclath	equ	0xFFA
  6566                           tblptru	equ	0xFF8
  6567                           tblptrh	equ	0xFF7
  6568                           tblptrl	equ	0xFF6
  6569                           tablat	equ	0xFF5
  6570                           prodh	equ	0xFF4
  6571                           prodl	equ	0xFF3
  6572                           intcon	equ	0xFF2
  6573                           intcon2	equ	0xFF1
  6574                           indf0	equ	0xFEF
  6575                           postinc0	equ	0xFEE
  6576                           plusw0	equ	0xFEB
  6577                           fsr0h	equ	0xFEA
  6578                           fsr0l	equ	0xFE9
  6579                           wreg	equ	0xFE8
  6580                           indf1	equ	0xFE7
  6581                           postinc1	equ	0xFE6
  6582                           postdec1	equ	0xFE5
  6583                           fsr1h	equ	0xFE2
  6584                           fsr1l	equ	0xFE1
  6585                           bsr	equ	0xFE0
  6586                           indf2	equ	0xFDF
  6587                           postinc2	equ	0xFDE
  6588                           postdec2	equ	0xFDD
  6589                           plusw2	equ	0xFDB
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function i2_putch *****************
  6595 ;; Defined at:
  6596 ;;		line 258 in file "Drivers/UART_Driver.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  data            1    wreg     unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  data            1    0[COMRAM] unsigned char 
  6601 ;;  putch           1    1[COMRAM] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      void 
  6604 ;; Registers used:
  6605 ;;		wreg, status,2, status,0, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0
  6612 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6613 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6614 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6615 ;;Total ram usage:        2 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; This function calls:
  6618 ;;		Nothing
  6619 ;; This function is called by:
  6620 ;;		i2_printf
  6621 ;; This function uses a non-reentrant model
  6622 ;;
  6623                           
  6624                           	psect	text32
  6625  001C76                     __ptext32:
  6626                           	opt stack 0
  6627  001C76                     i2_putch:
  6628                           	opt stack 21
  6629                           
  6630                           ;incstack = 0
  6631                           ;i2putch@data stored from wreg
  6632  001C76  6E01               	movwf	i2putch@data,c
  6633                           
  6634                           ;UART_Driver.c: 259: uint8_t max = 0;
  6635  001C78  0E00               	movlw	0
  6636  001C7A  6E02               	movwf	i2putch@max,c
  6637                           
  6638                           ;UART_Driver.c: 261: while(TXSTAbits.TRMT == 0 && max < 200) {
  6639  001C7C  D005               	goto	i2l171
  6640  001C7E                     
  6641                           ;UART_Driver.c: 262: max++;
  6642  001C7E  2A02               	incf	i2putch@max,f,c
  6643                           
  6644                           ;UART_Driver.c: 263: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  6645  001C80  0E06               	movlw	6
  6646  001C82                     i2u297_47:
  6647  001C82  2EE8               	decfsz	wreg,f,c
  6648  001C84  D7FE               	bra	i2u297_47
  6649  001C86  D000               	nop2	
  6650  001C88                     i2l171:
  6651  001C88  B2AC               	btfsc	4012,1,c	;volatile
  6652  001C8A  D003               	goto	i2u120_40
  6653  001C8C  0EC7               	movlw	199
  6654  001C8E  6402               	cpfsgt	i2putch@max,c
  6655  001C90  D7F6               	goto	i2l172
  6656  001C92                     i2u120_40:
  6657                           
  6658                           ;UART_Driver.c: 264: }
  6659                           ;UART_Driver.c: 265: TXREG = data;
  6660  001C92  C001  FFAD         	movff	i2putch@data,4013	;volatile
  6661  001C96  0012               	return		;funcret
  6662  001C98                     __end_ofi2_putch:
  6663                           	opt stack 0
  6664                           pclatu	equ	0xFFB
  6665                           pclath	equ	0xFFA
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           intcon2	equ	0xFF1
  6674                           indf0	equ	0xFEF
  6675                           postinc0	equ	0xFEE
  6676                           plusw0	equ	0xFEB
  6677                           fsr0h	equ	0xFEA
  6678                           fsr0l	equ	0xFE9
  6679                           wreg	equ	0xFE8
  6680                           indf1	equ	0xFE7
  6681                           postinc1	equ	0xFE6
  6682                           postdec1	equ	0xFE5
  6683                           fsr1h	equ	0xFE2
  6684                           fsr1l	equ	0xFE1
  6685                           bsr	equ	0xFE0
  6686                           indf2	equ	0xFDF
  6687                           postinc2	equ	0xFDE
  6688                           postdec2	equ	0xFDD
  6689                           plusw2	equ	0xFDB
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function i2___lwmod *****************
  6695 ;; Defined at:
  6696 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  dividend        2    7[COMRAM] unsigned int 
  6699 ;;  divisor         2    9[COMRAM] unsigned int 
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;  __lwmod         1   11[COMRAM] unsigned char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  2    7[COMRAM] unsigned int 
  6704 ;; Registers used:
  6705 ;;		wreg, status,2, status,0
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6711 ;;      Params:         4       0       0       0       0       0       0       0       0
  6712 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6713 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6714 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6715 ;;Total ram usage:        5 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		i2_printf
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text33
  6725  001B46                     __ptext33:
  6726                           	opt stack 0
  6727  001B46                     i2___lwmod:
  6728                           	opt stack 21
  6729                           
  6730                           ;incstack = 0
  6731  001B46  500A               	movf	i2___lwmod@divisor,w,c
  6732  001B48  100B               	iorwf	i2___lwmod@divisor+1,w,c
  6733  001B4A  B4D8               	btfsc	status,2,c
  6734  001B4C  D018               	goto	i2l834
  6735  001B4E  0E01               	movlw	1
  6736  001B50  6E0C               	movwf	i2___lwmod@counter,c
  6737  001B52  D004               	goto	i2l829
  6738  001B54  90D8               	bcf	status,0,c
  6739  001B56  360A               	rlcf	i2___lwmod@divisor,f,c
  6740  001B58  360B               	rlcf	i2___lwmod@divisor+1,f,c
  6741  001B5A  2A0C               	incf	i2___lwmod@counter,f,c
  6742  001B5C                     i2l829:
  6743  001B5C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  6744  001B5E  D7FA               	goto	i2l830
  6745  001B60                     i2u125_40:
  6746  001B60  500A               	movf	i2___lwmod@divisor,w,c
  6747  001B62  5C08               	subwf	i2___lwmod@dividend,w,c
  6748  001B64  500B               	movf	i2___lwmod@divisor+1,w,c
  6749  001B66  5809               	subwfb	i2___lwmod@dividend+1,w,c
  6750  001B68  A0D8               	btfss	status,0,c
  6751  001B6A  D004               	goto	i2l833
  6752  001B6C  500A               	movf	i2___lwmod@divisor,w,c
  6753  001B6E  5E08               	subwf	i2___lwmod@dividend,f,c
  6754  001B70  500B               	movf	i2___lwmod@divisor+1,w,c
  6755  001B72  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  6756  001B74                     i2l833:
  6757  001B74  90D8               	bcf	status,0,c
  6758  001B76  320B               	rrcf	i2___lwmod@divisor+1,f,c
  6759  001B78  320A               	rrcf	i2___lwmod@divisor,f,c
  6760  001B7A  2E0C               	decfsz	i2___lwmod@counter,f,c
  6761  001B7C  D7F1               	goto	i2u125_40
  6762  001B7E                     i2l834:
  6763  001B7E  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  6764  001B82  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  6765  001B86  0012               	return		;funcret
  6766  001B88                     __end_ofi2___lwmod:
  6767                           	opt stack 0
  6768                           pclatu	equ	0xFFB
  6769                           pclath	equ	0xFFA
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           intcon2	equ	0xFF1
  6778                           indf0	equ	0xFEF
  6779                           postinc0	equ	0xFEE
  6780                           plusw0	equ	0xFEB
  6781                           fsr0h	equ	0xFEA
  6782                           fsr0l	equ	0xFE9
  6783                           wreg	equ	0xFE8
  6784                           indf1	equ	0xFE7
  6785                           postinc1	equ	0xFE6
  6786                           postdec1	equ	0xFE5
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           bsr	equ	0xFE0
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           plusw2	equ	0xFDB
  6794                           fsr2h	equ	0xFDA
  6795                           fsr2l	equ	0xFD9
  6796                           status	equ	0xFD8
  6797                           
  6798 ;; *************** function i2___lwdiv *****************
  6799 ;; Defined at:
  6800 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  dividend        2    0[COMRAM] unsigned int 
  6803 ;;  divisor         2    2[COMRAM] unsigned int 
  6804 ;; Auto vars:     Size  Location     Type
  6805 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  6806 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  2    0[COMRAM] unsigned int 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6816 ;;      Params:         4       0       0       0       0       0       0       0       0
  6817 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6819 ;;      Totals:         7       0       0       0       0       0       0       0       0
  6820 ;;Total ram usage:        7 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; This function calls:
  6823 ;;		Nothing
  6824 ;; This function is called by:
  6825 ;;		i2_printf
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text34
  6830  001A62                     __ptext34:
  6831                           	opt stack 0
  6832  001A62                     i2___lwdiv:
  6833                           	opt stack 21
  6834                           
  6835                           ;incstack = 0
  6836  001A62  0E00               	movlw	0
  6837  001A64  6E06               	movwf	i2___lwdiv@quotient+1,c
  6838  001A66  0E00               	movlw	0
  6839  001A68  6E05               	movwf	i2___lwdiv@quotient,c
  6840  001A6A  5003               	movf	i2___lwdiv@divisor,w,c
  6841  001A6C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  6842  001A6E  B4D8               	btfsc	status,2,c
  6843  001A70  D01C               	goto	i2l824
  6844  001A72  0E01               	movlw	1
  6845  001A74  6E07               	movwf	i2___lwdiv@counter,c
  6846  001A76  D004               	goto	i2l819
  6847  001A78  90D8               	bcf	status,0,c
  6848  001A7A  3603               	rlcf	i2___lwdiv@divisor,f,c
  6849  001A7C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  6850  001A7E  2A07               	incf	i2___lwdiv@counter,f,c
  6851  001A80                     i2l819:
  6852  001A80  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  6853  001A82  D7FA               	goto	i2l820
  6854  001A84                     i2u122_40:
  6855  001A84  90D8               	bcf	status,0,c
  6856  001A86  3605               	rlcf	i2___lwdiv@quotient,f,c
  6857  001A88  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  6858  001A8A  5003               	movf	i2___lwdiv@divisor,w,c
  6859  001A8C  5C01               	subwf	i2___lwdiv@dividend,w,c
  6860  001A8E  5004               	movf	i2___lwdiv@divisor+1,w,c
  6861  001A90  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  6862  001A92  A0D8               	btfss	status,0,c
  6863  001A94  D005               	goto	i2l823
  6864  001A96  5003               	movf	i2___lwdiv@divisor,w,c
  6865  001A98  5E01               	subwf	i2___lwdiv@dividend,f,c
  6866  001A9A  5004               	movf	i2___lwdiv@divisor+1,w,c
  6867  001A9C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  6868  001A9E  8005               	bsf	i2___lwdiv@quotient,0,c
  6869  001AA0                     i2l823:
  6870  001AA0  90D8               	bcf	status,0,c
  6871  001AA2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  6872  001AA4  3203               	rrcf	i2___lwdiv@divisor,f,c
  6873  001AA6  2E07               	decfsz	i2___lwdiv@counter,f,c
  6874  001AA8  D7ED               	goto	i2u122_40
  6875  001AAA                     i2l824:
  6876  001AAA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  6877  001AAE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  6878  001AB2  0012               	return		;funcret
  6879  001AB4                     __end_ofi2___lwdiv:
  6880                           	opt stack 0
  6881                           pclatu	equ	0xFFB
  6882                           pclath	equ	0xFFA
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           intcon2	equ	0xFF1
  6891                           indf0	equ	0xFEF
  6892                           postinc0	equ	0xFEE
  6893                           plusw0	equ	0xFEB
  6894                           fsr0h	equ	0xFEA
  6895                           fsr0l	equ	0xFE9
  6896                           wreg	equ	0xFE8
  6897                           indf1	equ	0xFE7
  6898                           postinc1	equ	0xFE6
  6899                           postdec1	equ	0xFE5
  6900                           fsr1h	equ	0xFE2
  6901                           fsr1l	equ	0xFE1
  6902                           bsr	equ	0xFE0
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           plusw2	equ	0xFDB
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           pclatu	equ	0xFFB
  6911                           pclath	equ	0xFFA
  6912                           tblptru	equ	0xFF8
  6913                           tblptrh	equ	0xFF7
  6914                           tblptrl	equ	0xFF6
  6915                           tablat	equ	0xFF5
  6916                           prodh	equ	0xFF4
  6917                           prodl	equ	0xFF3
  6918                           intcon	equ	0xFF2
  6919                           intcon2	equ	0xFF1
  6920                           indf0	equ	0xFEF
  6921                           postinc0	equ	0xFEE
  6922                           plusw0	equ	0xFEB
  6923                           fsr0h	equ	0xFEA
  6924                           fsr0l	equ	0xFE9
  6925                           wreg	equ	0xFE8
  6926                           indf1	equ	0xFE7
  6927                           postinc1	equ	0xFE6
  6928                           postdec1	equ	0xFE5
  6929                           fsr1h	equ	0xFE2
  6930                           fsr1l	equ	0xFE1
  6931                           bsr	equ	0xFE0
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           plusw2	equ	0xFDB
  6936                           fsr2h	equ	0xFDA
  6937                           fsr2l	equ	0xFD9
  6938                           status	equ	0xFD8
  6939                           
  6940                           	psect	rparam
  6941  0000                     pclatu	equ	0xFFB
  6942                           pclath	equ	0xFFA
  6943                           tblptru	equ	0xFF8
  6944                           tblptrh	equ	0xFF7
  6945                           tblptrl	equ	0xFF6
  6946                           tablat	equ	0xFF5
  6947                           prodh	equ	0xFF4
  6948                           prodl	equ	0xFF3
  6949                           intcon	equ	0xFF2
  6950                           intcon2	equ	0xFF1
  6951                           indf0	equ	0xFEF
  6952                           postinc0	equ	0xFEE
  6953                           plusw0	equ	0xFEB
  6954                           fsr0h	equ	0xFEA
  6955                           fsr0l	equ	0xFE9
  6956                           wreg	equ	0xFE8
  6957                           indf1	equ	0xFE7
  6958                           postinc1	equ	0xFE6
  6959                           postdec1	equ	0xFE5
  6960                           fsr1h	equ	0xFE2
  6961                           fsr1l	equ	0xFE1
  6962                           bsr	equ	0xFE0
  6963                           indf2	equ	0xFDF
  6964                           postinc2	equ	0xFDE
  6965                           postdec2	equ	0xFDD
  6966                           plusw2	equ	0xFDB
  6967                           fsr2h	equ	0xFDA
  6968                           fsr2l	equ	0xFD9
  6969                           status	equ	0xFD8
  6970                           
  6971                           	psect	temp
  6972  000044                     btemp:
  6973                           	opt stack 0
  6974  000044                     	ds	1
  6975  0000                     int$flags	set	btemp
  6976  0000                     wtemp6	set	btemp+1
  6977                           pclatu	equ	0xFFB
  6978                           pclath	equ	0xFFA
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           intcon	equ	0xFF2
  6986                           intcon2	equ	0xFF1
  6987                           indf0	equ	0xFEF
  6988                           postinc0	equ	0xFEE
  6989                           plusw0	equ	0xFEB
  6990                           fsr0h	equ	0xFEA
  6991                           fsr0l	equ	0xFE9
  6992                           wreg	equ	0xFE8
  6993                           indf1	equ	0xFE7
  6994                           postinc1	equ	0xFE6
  6995                           postdec1	equ	0xFE5
  6996                           fsr1h	equ	0xFE2
  6997                           fsr1l	equ	0xFE1
  6998                           bsr	equ	0xFE0
  6999                           indf2	equ	0xFDF
  7000                           postinc2	equ	0xFDE
  7001                           postdec2	equ	0xFDD
  7002                           plusw2	equ	0xFDB
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    18
    Data        8
    BSS         293
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      67
    BANK0           160     63      76
    BANK1           256      0     166
    BANK2           256      0     100
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_17(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_20(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_19(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_11(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_11(CODE[2]), ROM(CODE[32767]), 

    S101$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S101$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S101$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer
    _acknowledge->i2_printf
    i2_printf->i2___lwmod
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _initDoors->_C_DOOR_LockAll
    _D_UART_WriteInt->_printf
    _D_UART_Init->___lldiv
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   16343
                                             61 BANK0      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_TMR1_Enable
                        _D_TMR1_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                    _D_UART_WriteInt
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1213
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     688
                                             30 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       9     9      0     130
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     471
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_WriteInt                                      5     1      4    3939
                                             47 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                             21 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     815
                                             34 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     9     9      0     130
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    5016
                                             52 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     521
                                             21 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    4119
                                             47 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    18      5    3697
                                             33 BANK0     14     9      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0      68
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             28 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     601
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     130
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                             18    18      0    1526
                                             27 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0    1526
                                             26 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0    1284
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            23    18      5    1284
                                             12 COMRAM    14     9      5
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             2     2      0      46
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _D_UART_WriteInt
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      64       9       39.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      4C       5       47.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     199      20        0.0%
DATA                 0      0     199       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Apr 14 22:19:38 2018

                         l30 171A                           l31 168C                           l24 125C  
                         l25 1138                           l42 17BA                           l50 1348  
                         l43 173E                           l19 1990                           l36 1668  
                         l37 15D8                           l48 134A                           l49 1280  
                __CFG_BOR$ON 000000                           bsr 000FE0           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 _ackCharacter 003E                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l200 1D18                          l401 0C42                          l241 1D04  
                        l410 0C5A                          l402 0BFC                          l218 1BD6  
                        l330 093A                          l171 1BFA                          l411 0D10  
                        l219 1BD0                          l331 0964                          l172 1BF0  
                        l412 0CAA                          l316 1C64                          l341 0A66  
                        l333 0994                          l406 0C54                          l166 1C24  
                        l350 0AD8                          l342 0A7C                          l326 08D8  
                        l407 0D16                          l351 0ABA                          l335 09CA  
                        l344 0A98                          l328 08F0                          l409 0CFE  
                        l353 0AF4                          l337 0A00                          l354 0ABE  
                        l346 0AA2                          l339 0A34                          l356 0AC8  
                        l357 0AD2                          l390 0B7C                          l391 0B24  
                        l383 0B0C                          l392 0B28                          l384 0B1C  
                        l393 0BAC                          l385 0B30                          l820 1A26  
                        l396 0C32                          l397 0BC6                          l830 1B12  
                        l823 1A4E                          l824 1A58                          l833 1B32  
                        l834 1B3C                          l770 183A                          l819 1A2E  
                        l771 1848                          l829 1B1A                          l766 1806  
                        l767 17FA                          l963 1AC0                          l964 1AB6  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _pwm 0036                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2533 0BCA                         l2547 0C00                         STR_1 0844  
                       STR_2 0842                         STR_3 0828                         STR_4 0824  
                       STR_5 082F                         STR_6 0846                         STR_7 0846  
                       STR_8 0846                         STR_9 0846                         u2200 1A32  
                       u2230 1B1E                         u2180 1C06                         u2260 0B5C  
                       u2404 1228                         u2405 1224                         u2510 180A  
                       u2414 124E                         u2415 124A                         u2360 0D20  
                       u2601 12CE                         u2370 0D4C                         u2434 16E0  
                       u2267 0B52                         u2451 13DC                         u2435 16DC  
                       u2620 18C0                         u2461 1416                         u2534 162E  
                       u2535 162A                         u2560 17B4                         u2377 0D42  
                       u2625 18B4                         u2641 1BAC                         u2721 0904  
                       u2570 17B6                         u2554 17A6                         u2730 0918  
                       u2555 17A2                         u2690 1AF6                         u2907 089E  
                       u2748 091C                         u2917 08CA                         u2927 09F2  
                       u2937 150E                         u2947 1308                         u2957 143A  
                       u2967 1BF4                         u2897 0856                 ?_C_DOOR_Init 0001  
                       _baud 003D                         _main 084A                         _read 002E  
                       _lock 0038                         _tick 0039                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0044            C_DOOR_UnlockAll@d 007D                         prodh 000FF4  
                       prodl 000FF3                         start 00EC                __CFG_IESO$OFF 000000  
            __end_of_HighISR 15D0              __end_ofi2_putch 1C98                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  ?_D_PWM_Init 0001            initDoors@door_cnt 007E  
             _startCharacter 0042              D_PWM_SetPwm@pwm 0075                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 007F      __size_of_C_DOOR_LockAll 00B2         commandAndMessage@mes 0081  
                      ?_main 0001                        STR_10 082C                        STR_11 083A  
                      STR_20 0840                        STR_12 0838                        STR_13 0840  
                      STR_21 0813                        STR_14 0836                        STR_15 083C  
                      STR_16 083A                        STR_17 083E                        STR_18 0832  
                      STR_19 0834              __end_of___lldiv 185A                        u24511 13DA  
                      u24611 1414              __end_of___lwdiv 1A62              __end_of___lwmod 1B46  
                      i2l122 10FC                        i2l123 0F9A                        i2l140 1092  
                      i2l132 100A                        i2l124 0FBE                        i2l141 10B4  
                      i2l133 102C                        i1l365 0078                        i1l366 0094  
                      i1l367 008E                        i2l144 10D6                        i2l136 104E  
                      i2l128 0FC6                        i1l368 0092                        i2l401 0E90  
                      i2l145 10EE                        i2l137 1070                        i2l129 0FE8  
                      i2l410 0EA8                        i2l402 0E4A                        i2l171 1C88  
                      i2l411 0F54                        i2l147 10F6                        i2l172 1C7E  
                      i2l412 0EF2                        i2l181 1584                        i2l406 0EA2  
                      i2l182 1574                        i2l407 0F5A                        i2l184 157E  
                      i2l409 0F44                        i2l390 0DCC                        i2l391 0D78  
                      i2l383 0D62                        i2l392 0D7C                        i2l384 0D72  
                      i2l393 0DFA                        i2l385 0D84                        i2l820 1A78  
                      i2l396 0E80                        i2l397 0E14                        i2l830 1B54  
                      i2l823 1AA0                        i2l824 1AAA                        i2l833 1B74  
                      i2l834 1B7E                        i2l819 1A80                        i2l829 1B5C  
                      _RCREG 000FAE                        _TMR1H 000FCF                        _TMR1L 000FCE  
       __size_of_acknowledge 0060                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             C_DOOR_Init@cnt 0078               __CFG_EBTRB$OFF 000000              __end_of_dpowers 080B  
                      _doors 0200                        _putch 1BE4                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 0082                 ?_D_UART_Read 0075  
               ?_D_TMR0_Init 0001                        plusw0 000FEB                 ?_D_TMR1_Init 0001  
                      plusw2 000FDB                        status 000FD8                        wtemp6 0045  
               ?_D_PORT_Init 0001                _stopCharacter 0040             __end_ofi2_printf 0F96  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042              __initialization 18DC  
               __end_of_main 0B00                   i2printf@ap 0014                   i2putch@max 0002  
                     ??_main 009D                __activetblptr 000003              __CFG_CCP2MX$OFF 000000  
      commandAndMessage@door 0075                       _ADCON1 000FC1                       _CCPR1L 000FBE  
        __size_of_D_PWM_Init 001E                       ?_putch 0001                       i2l2013 0E4E  
                     i2l1999 0E18             _C_DOOR_UnlockAll 15D0                    ??_HighISR 001C  
                  ??i2_putch 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___lldiv 007D                setAlarm@alarm 0075              C_DOOR_LockAll@d 007D  
                  ??___lwdiv 0079                    ??___lwmod 0080                       clear_0 191A  
                     clear_1 1926                       clear_2 1932                       clear_3 193E  
                     _printf 0B00             __end_of_setAlarm 1D26     __size_of_D_UART_WriteInt 00D4  
                     _strcmp 1AB4                 __pdataCOMRAM 003E        D_UART_Init@interrupts 0086  
          __end_ofi2___lwdiv 1AB4                 __mediumconst 0000            __end_ofi2___lwmod 1B88  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
              ?_D_UART_Write 008F              D_UART_Init@baud 0084              D_UART_Init@name 0082  
 __end_of_C_DOOR_ReadSensors 17D6                   __accesstop 0060      __end_of__initialization 1944  
            __CFG_PBADEN$OFF 000000                ___rparam_used 000001         __size_of_C_DOOR_Init 0152  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 1D2C  
               C_DOOR_Init@d 0079                __end_of_putch 1C0C             _messageCharacter 00AA  
                i2printf@idx 0013                  i2printf@val 0018                ?_D_PWM_SetPwm 0001  
             _C_DOOR_LockAll 1684       __size_of_D_UART_Enable 0024                  i2putch@data 0001  
             ??_D_UART_Write 0093       __size_of_D_TMR0_Enable 0014                    ?i2_printf 000D  
     __size_of_D_TMR1_Enable 0014            _C_DOOR_SendStates 1278                      ??_putch 0075  
         ?_C_DOOR_SendStates 0001                   __pbssBANK0 009F                   __pbssBANK1 0100  
                 __pbssBANK2 0200           __size_of_initDoors 0022             _communicationCnt 003A  
       __size_of_D_UART_Init 0082         __size_of_D_UART_Read 002E         __size_of_D_TMR0_Init 0024  
       __size_of_D_TMR1_Init 0020          ??_C_DOOR_SendStates 0094                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E                 ??_D_PWM_Init 0075       __end_of_C_DOOR_LockAll 1736  
             ??_D_PWM_SetPwm 0075                   _deviceName 00A5                      ?_printf 0081  
                    ?_strcmp 0075    __end_of_C_DOOR_SendStates 1366      __size_of_fillDataBuffer 0190  
                 ??i2_printf 0012          D_UART_Enable@enable 0075            ??_D_UART_WriteInt 0093  
         __end_of_D_PWM_Init 1CD6              __CFG_VREGEN$OFF 000000                      _HighISR 0008  
                    i2_putch 1C76                _D_UART_Enable 1C0C                    ?_setAlarm 0001  
                    __Hparam 0000                      __Lparam 0000              __size_of_LowISR 00D4  
              _D_TMR0_Enable 1D08                _D_TMR1_Enable 1CF4                   _readBuffer 0100  
                    ___lldiv 17D6              ?_C_DOOR_LockAll 0001                      ___lwdiv 1A0E  
                    ___lwmod 1B02                 __psmallconst 0800          C_DOOR_ReadSensors@d 0079  
            __CFG_STVREN$OFF 000000                ??_acknowledge 001B                      __pcinit 18DC  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 1684                      __ptext0 084A  
                    __ptext1 1AB4                      __ptext2 1D1C                      __ptext3 1C54  
                    __ptext4 1684                      __ptext5 1126                      __ptext6 1446  
                    __ptext7 1B88                      __ptext8 185A                      __ptext9 17D6  
            __size_of_printf 0258            __end_of_initDoors 1C76                    _T0CONbits 000FD5  
            __size_of_strcmp 004E            __end_of_hexpowers 0813                    _T1CONbits 000FCD  
                    _dpowers 0801                    _T2CONbits 000FCA         C_DOOR_SendStates@com 0097  
       C_DOOR_SendStates@mes 009A                      _running 0037               __pintcode_body 151A  
       end_of_initialization 1944          D_TMR0_Enable@enable 0075                      int_func 151A  
             ?_D_UART_Enable 0001                   ??_setAlarm 0075              ___lldiv@divisor 0079  
             ?_D_TMR0_Enable 0001              ___lldiv@counter 0081               ?_D_TMR1_Enable 0001  
       __end_of_D_UART_Write 1446                    _RCSTAbits 000FAB                      printf@c 008E  
                    printf@f 0081                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 007A                    _PORTBbits 000F81                    _PORTCbits 000F82  
 __size_of_C_DOOR_SendStates 00EE                    _TRISCbits 000F94          __end_of_acknowledge 1A0E  
          i2___lwdiv@divisor 0003                    i2___lwdiv 1A62                    i2___lwmod 1B46  
          i2___lwdiv@counter 0007         __end_of_D_PWM_SetPwm 1BE4                  _CCP1CONbits 000FBD  
                  _TXSTAbits 000FAC           _C_DOOR_ReadSensors 1736               __end_of_LowISR 00EC  
                _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 1D26  
             __end_of_printf 0D58               __end_of_strcmp 1B02                 i2printf@flag 0017  
               i2printf@prec 0016          start_initialization 18DC               _fillDataBuffer 0F96  
                  i2printf@c 001A                    i2printf@f 000D                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 023E         ??_C_DOOR_ReadSensors 0075  
            ??_D_UART_Enable 0075                ??_C_DOOR_Init 0075              ??_D_TMR0_Enable 0075  
            ??_D_TMR1_Enable 0075                     ??_LowISR 0060                  __pdataBANK0 00AA  
           __CFG_LPT1OSC$OFF 000000              _D_UART_WriteInt 1446                  _acknowledge 19AE  
           D_UART_Write@data 0091                     ??_printf 0086                 _lockDelayCnt 003B  
                   ??_strcmp 0079             D_UART_WriteInt@d 0091       __end_of_fillDataBuffer 1126  
                __pbssCOMRAM 002E                __pcstackBANK0 0060            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                ??_D_UART_Init 0087                ??_D_UART_Read 007B  
              ??_D_TMR0_Init 0076                ??_D_TMR1_Init 0076                     ?_HighISR 0001  
                   ?i2_putch 0001        __size_of_D_UART_Write 00E0                ??_D_PORT_Init 0075  
           ??_C_DOOR_LockAll 0075             ___lwdiv@dividend 0075          __end_of_C_DOOR_Init 1278  
          __size_of_setAlarm 000A                    __pintcode 0008                     ?___lldiv 0075  
                   ?___lwdiv 0075                     ?___lwmod 007C                  __pintcodelo 0018  
         fillDataBuffer@data 001B            ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001  
                __smallconst 0800           ??_C_DOOR_UnlockAll 0075        __size_of_D_PWM_SetPwm 002E  
                  _initDoors 1C54                 _D_UART_Write 1366                    _hexpowers 080B  
                  _readReady 003C             ___lwdiv@quotient 007A                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0028          D_TMR1_Enable@enable 0075  
                   _IPR1bits 000F9F                     _PIE1bits 000F9D                     i2u120_40 1C92  
                   i2u122_40 1A84                     i2u125_40 1B60                     i2u142_40 0DAE  
                   i2u142_47 0DA4                     i2u152_40 0F62                     i2u153_40 0F8C  
                   i2u153_47 0F82          __end_of_D_UART_Init 18DC          __end_of_D_UART_Read 1BB6  
                   _PIR1bits 000F9E      __end_of_D_UART_WriteInt 151A                     i2u297_47 1C82  
        __end_of_D_TMR0_Init 1C54          __end_of_D_TMR1_Init 1CB8                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000       D_UART_WriteInt@command 008F          __end_of_D_PORT_Init 1CF4  
               _D_PWM_SetPwm 1BB6                   printf@flag 008B                   printf@prec 008A  
                 ?_initDoors 0001                     i2_printf 0D58                  _INTCON2bits 000FF1  
                  copy_data0 1908                  _C_DOOR_Init 1126             __size_of_HighISR 15C8  
           __size_ofi2_putch 0022                     __Hrparam 0000                     __Lrparam 0000  
           __size_of___lldiv 0084             __size_of___lwdiv 0054             __size_of___lwmod 0044  
            ___lwdiv@divisor 0077              ___lwdiv@counter 0079                     __ptext10 1C0C  
                   __ptext11 1C98                     __ptext20 194E                     __ptext12 1CF4  
                   __ptext21 1366                     __ptext13 1C30                     __ptext30 19AE  
                   __ptext22 0B00                     __ptext14 1D08                     __ptext31 0D58  
                   __ptext23 1BE4                     __ptext15 1BB6                     __ptext32 1C76  
                   __ptext24 1B02                     __ptext16 1CB8                     __ptext33 1B46  
                   __ptext25 1A0E                     __ptext17 1CD6                     __ptext34 1A62  
                   __ptext26 1736                     __ptext18 15D0                     __ptext19 1278  
                   __ptext29 0F96                     _door_cnt 00A8                  _D_UART_Init 185A  
                _D_UART_Read 1B88                     _oldAlarm 0034                     _newAlarm 0035  
                   _readData 009F                  _D_TMR0_Init 1C30                  _D_TMR1_Init 1C98  
              __size_of_main 02B6           C_DOOR_SendStates@d 009C                  _D_PORT_Init 1CD6  
                   _setAlarm 1D1C             ?_D_UART_WriteInt 008F                     int$flags 0044  
                  printf@idx 0087                    printf@val 008C                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000                    putch@data 0075                   _INTCONbits 000FF2  
                ??_initDoors 007E            _commandAndMessage 194E                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 00A0           ?_commandAndMessage 0075  
           ___lwmod@dividend 007C             ___lldiv@dividend 0075        __end_of_D_UART_Enable 1C30  
      __end_of_D_TMR0_Enable 1D1C          ??_commandAndMessage 0083        __end_of_D_TMR1_Enable 1D08  
                 _D_PWM_Init 1CB8                     printf@ap 0088             ??_fillDataBuffer 001B  
        D_UART_Write@command 008F                     putch@max 0076                     strcmp@s1 0075  
                   strcmp@s2 0077             ___lldiv@quotient 007D              ___lwmod@divisor 007E  
            ___lwmod@counter 0080    __end_of_commandAndMessage 19AE    __size_of_C_DOOR_UnlockAll 00B4  
