

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Apr 14 14:50:10 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.44
    53                           ; Generated 14/09/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F2550 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  00198E                     __pidataCOMRAM:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _ackCharacter
    92  00198E  1A                 	db	low STR_4
    93  00198F  08                 	db	high STR_4
    94                           
    95                           ;initializer for _messageCharacter
    96  001990  1E                 	db	low STR_3
    97  001991  08                 	db	high STR_3
    98                           
    99                           ;initializer for _stopCharacter
   100  001992  33                 	db	low STR_2
   101  001993  08                 	db	high STR_2
   102                           
   103                           ;initializer for _startCharacter
   104  001994  35                 	db	low STR_1
   105  001995  08                 	db	high STR_1
   106                           
   107                           	psect	smallconst
   108  000800                     __psmallconst:
   109                           	opt stack 0
   110  000800  00                 	db	0
   111  000801                     _hexpowers:
   112                           	opt stack 0
   113  000801  0001               	dw	1
   114  000803  0010               	dw	16
   115  000805  0100               	dw	256
   116  000807  1000               	dw	4096
   117  000809                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _TMR1L	set	4046
   120  0000                     _TMR1H	set	4047
   121  0000                     _PORTBbits	set	3969
   122  0000                     _T1CONbits	set	4045
   123  0000                     _PORTCbits	set	3970
   124  0000                     _CCP1CONbits	set	4029
   125  0000                     _CCPR1L	set	4030
   126  0000                     _T2CONbits	set	4042
   127  0000                     _PR2	set	4043
   128  0000                     _INTCON2bits	set	4081
   129  0000                     _T0CONbits	set	4053
   130  0000                     _TXREG	set	4013
   131  0000                     _TRISCbits	set	3988
   132  0000                     _PIE1bits	set	3997
   133  0000                     _IPR1bits	set	3999
   134  0000                     _PIR1bits	set	3998
   135  0000                     _INTCONbits	set	4082
   136  0000                     _RCONbits	set	4048
   137  0000                     _SPBRG	set	4015
   138  0000                     _BAUDCONbits	set	4024
   139  0000                     _TXSTAbits	set	4012
   140  0000                     _RCREG	set	4014
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _ADCON1	set	4033
   143  0000                     _PORTC	set	3970
   144  0000                     _TRISC	set	3988
   145  0000                     _TRISA	set	3986
   146  0000                     _TRISB	set	3987
   147  0000                     _PORTA	set	3968
   148  0000                     _PORTB	set	3969
   149  000809                     STR_17:
   150  000809  30                 	db	48	;'0'
   151  00080A  31                 	db	49	;'1'
   152  00080B  32                 	db	50	;'2'
   153  00080C  33                 	db	51	;'3'
   154  00080D  34                 	db	52	;'4'
   155  00080E  35                 	db	53	;'5'
   156  00080F  36                 	db	54	;'6'
   157  000810  37                 	db	55	;'7'
   158  000811  38                 	db	56	;'8'
   159  000812  39                 	db	57	;'9'
   160  000813  61                 	db	97	;'a'
   161  000814  62                 	db	98	;'b'
   162  000815  63                 	db	99	;'c'
   163  000816  64                 	db	100	;'d'
   164  000817  65                 	db	101	;'e'
   165  000818  66                 	db	102	;'f'
   166  000819  00                 	db	0
   167  00081A                     STR_4:
   168  00081A  5B                 	db	91	;'['
   169  00081B  41                 	db	65	;'A'
   170  00081C  5D                 	db	93	;']'
   171  00081D  00                 	db	0
   172  00081E                     STR_3:
   173  00081E  5B                 	db	91	;'['
   174  00081F  4D                 	db	77	;'M'
   175  000820  5D                 	db	93	;']'
   176  000821  00                 	db	0
   177  000822                     STR_5:
   178  000822  25                 	db	37
   179  000823  78                 	db	120	;'x'
   180  000824  00                 	db	0
   181  000825                     STR_14:
   182  000825  41                 	db	65	;'A'
   183  000826  00                 	db	0
   184  000827                     STR_15:
   185  000827  45                 	db	69	;'E'
   186  000828  00                 	db	0
   187  000829                     STR_11:
   188  000829  49                 	db	73	;'I'
   189  00082A  00                 	db	0
   190  00082B                     STR_9:
   191  00082B  4C                 	db	76	;'L'
   192  00082C  00                 	db	0
   193  00082D                     STR_8:
   194  00082D  50                 	db	80	;'P'
   195  00082E  00                 	db	0
   196  00082F                     STR_12:
   197  00082F  52                 	db	82	;'R'
   198  000830  00                 	db	0
   199  000831                     STR_10:
   200  000831  55                 	db	85	;'U'
   201  000832  00                 	db	0
   202  000833                     STR_2:
   203  000833  24                 	db	36
   204  000834  00                 	db	0
   205  000835                     STR_1:
   206  000835  26                 	db	38
   207  000836  00                 	db	0
   208  000837                     STR_6:
   209  000837  3A                 	db	58	;':'
   210  000838  00                 	db	0
   211  0000                     
   212                           ; #config settings
   213  000839  00                 	db	0	; dummy byte at the end
   214  0000                     
   215                           	psect	cinit
   216  001756                     __pcinit:
   217                           	opt stack 0
   218  001756                     start_initialization:
   219                           	opt stack 0
   220  001756                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to COMRAM (8 bytes)
   224                           ; load TBLPTR registers with __pidataCOMRAM
   225  001756  0E8E               	movlw	low __pidataCOMRAM
   226  001758  6EF6               	movwf	tblptrl,c
   227  00175A  0E19               	movlw	high __pidataCOMRAM
   228  00175C  6EF7               	movwf	tblptrh,c
   229  00175E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   230  001760  6EF8               	movwf	tblptru,c
   231  001762  EE00  F042         	lfsr	0,__pdataCOMRAM
   232  001766  EE10 F008          	lfsr	1,8
   233  00176A                     copy_data0:
   234  00176A  0009               	tblrd		*+
   235  00176C  CFF5 FFEE          	movff	tablat,postinc0
   236  001770  50E5               	movf	postdec1,w,c
   237  001772  50E1               	movf	fsr1l,w,c
   238  001774  E1FA               	bnz	copy_data0
   239                           
   240                           ; Clear objects allocated to BANK1 (166 bytes)
   241  001776  EE01  F000         	lfsr	0,__pbssBANK1
   242  00177A  0EA6               	movlw	166
   243  00177C                     clear_0:
   244  00177C  6AEE               	clrf	postinc0,c
   245  00177E  06E8               	decf	wreg,f,c
   246  001780  E1FD               	bnz	clear_0
   247                           
   248                           ; Clear objects allocated to BANK0 (100 bytes)
   249  001782  EE00  F060         	lfsr	0,__pbssBANK0
   250  001786  0E64               	movlw	100
   251  001788                     clear_1:
   252  001788  6AEE               	clrf	postinc0,c
   253  00178A  06E8               	decf	wreg,f,c
   254  00178C  E1FD               	bnz	clear_1
   255                           
   256                           ; Clear objects allocated to COMRAM (26 bytes)
   257  00178E  EE00  F028         	lfsr	0,__pbssCOMRAM
   258  001792  0E1A               	movlw	26
   259  001794                     clear_2:
   260  001794  6AEE               	clrf	postinc0,c
   261  001796  06E8               	decf	wreg,f,c
   262  001798  E1FD               	bnz	clear_2
   263  00179A                     end_of_initialization:
   264                           	opt stack 0
   265  00179A                     __end_of__initialization:
   266                           	opt stack 0
   267  00179A  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   268  00179C  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   269  00179E  0100               	movlb	0
   270  0017A0  EF1D  F004         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssCOMRAM
   281  000028                     __pbssCOMRAM:
   282                           	opt stack 0
   283  000028                     _read:
   284                           	opt stack 0
   285  000028                     	ds	6
   286  00002E                     _readData:
   287                           	opt stack 0
   288  00002E                     	ds	6
   289  000034                     _deviceName:
   290                           	opt stack 0
   291  000034                     	ds	3
   292  000037                     _door_cnt:
   293                           	opt stack 0
   294  000037                     	ds	2
   295  000039                     _oldAlarm:
   296                           	opt stack 0
   297  000039                     	ds	1
   298  00003A                     _newAlarm:
   299                           	opt stack 0
   300  00003A                     	ds	1
   301  00003B                     _pwm:
   302                           	opt stack 0
   303  00003B                     	ds	1
   304  00003C                     _lock:
   305                           	opt stack 0
   306  00003C                     	ds	1
   307  00003D                     _tick:
   308                           	opt stack 0
   309  00003D                     	ds	1
   310  00003E                     _communicationCnt:
   311                           	opt stack 0
   312  00003E                     	ds	1
   313  00003F                     _lockDelayCnt:
   314                           	opt stack 0
   315  00003F                     	ds	1
   316  000040                     _readReady:
   317                           	opt stack 0
   318  000040                     	ds	1
   319  000041                     _baud:
   320                           	opt stack 0
   321  000041                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           postdec1	equ	0xFE5
   329                           fsr1l	equ	0xFE1
   330                           
   331                           	psect	dataCOMRAM
   332  000042                     __pdataCOMRAM:
   333                           	opt stack 0
   334  000042                     _ackCharacter:
   335                           	opt stack 0
   336  000042                     	ds	2
   337  000044                     _messageCharacter:
   338                           	opt stack 0
   339  000044                     	ds	2
   340  000046                     _stopCharacter:
   341                           	opt stack 0
   342  000046                     	ds	2
   343  000048                     _startCharacter:
   344                           	opt stack 0
   345  000048                     	ds	2
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	bssBANK0
   356  000060                     __pbssBANK0:
   357                           	opt stack 0
   358  000060                     _doors:
   359                           	opt stack 0
   360  000060                     	ds	100
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssBANK1
   371  000100                     __pbssBANK1:
   372                           	opt stack 0
   373  000100                     _readBuffer:
   374                           	opt stack 0
   375  000100                     	ds	166
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	cstackBANK1
   386  0001A6                     __pcstackBANK1:
   387                           	opt stack 0
   388  0001A6                     D_UART_Write@command:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x0
   392  0001A6                     	ds	2
   393  0001A8                     D_UART_Write@data:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  0001A8                     	ds	2
   398  0001AA                     ??_D_UART_Write:
   399                           
   400                           ; 1 bytes @ 0x4
   401  0001AA                     	ds	1
   402  0001AB                     ??_C_DOOR_SendStates:
   403                           
   404                           ; 1 bytes @ 0x5
   405  0001AB                     	ds	3
   406  0001AE                     C_DOOR_SendStates@com:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0x8
   410  0001AE                     	ds	3
   411  0001B1                     C_DOOR_SendStates@mes:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xB
   415  0001B1                     	ds	2
   416  0001B3                     C_DOOR_SendStates@d:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xD
   420  0001B3                     	ds	1
   421  0001B4                     ??_main:
   422                           
   423                           ; 1 bytes @ 0xE
   424  0001B4                     	ds	2
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	cstackBANK0
   435  0000C4                     __pcstackBANK0:
   436                           	opt stack 0
   437  0000C4                     ??_LowISR:
   438                           
   439                           ; 1 bytes @ 0x0
   440  0000C4                     	ds	21
   441  0000D9                     ??_C_DOOR_Init:
   442  0000D9                     ??_C_DOOR_LockAll:
   443  0000D9                     ??_C_DOOR_UnlockAll:
   444  0000D9                     ??_C_DOOR_ReadSensors:
   445  0000D9                     ?_strcmp:
   446                           	opt stack 0
   447  0000D9                     ?___lwdiv:
   448                           	opt stack 0
   449  0000D9                     ?___lldiv:
   450                           	opt stack 0
   451  0000D9                     ?_D_UART_Read:
   452                           	opt stack 0
   453  0000D9                     D_UART_Enable@enable:
   454                           	opt stack 0
   455  0000D9                     putch@data:
   456                           	opt stack 0
   457  0000D9                     D_TMR0_Enable@enable:
   458                           	opt stack 0
   459  0000D9                     D_PWM_SetPwm@pwm:
   460                           	opt stack 0
   461  0000D9                     D_TMR1_Enable@enable:
   462                           	opt stack 0
   463  0000D9                     setAlarm@alarm:
   464                           	opt stack 0
   465  0000D9                     ___lwdiv@dividend:
   466                           	opt stack 0
   467  0000D9                     strcmp@s1:
   468                           	opt stack 0
   469  0000D9                     ___lldiv@dividend:
   470                           	opt stack 0
   471  0000D9                     commandAndMessage@door:
   472                           	opt stack 0
   473                           
   474                           ; 10 bytes @ 0x15
   475  0000D9                     	ds	1
   476  0000DA                     putch@max:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x16
   480  0000DA                     	ds	1
   481  0000DB                     ___lwdiv@divisor:
   482                           	opt stack 0
   483  0000DB                     strcmp@s2:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x17
   487  0000DB                     	ds	1
   488  0000DC                     C_DOOR_Init@cnt:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x18
   492  0000DC                     	ds	1
   493  0000DD                     ??_strcmp:
   494  0000DD                     C_DOOR_Init@d:
   495                           	opt stack 0
   496  0000DD                     C_DOOR_ReadSensors@d:
   497                           	opt stack 0
   498  0000DD                     ___lwdiv@counter:
   499                           	opt stack 0
   500  0000DD                     ___lldiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x19
   504  0000DD                     	ds	1
   505  0000DE                     strcmp@r:
   506                           	opt stack 0
   507  0000DE                     ___lwdiv@quotient:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x1A
   511  0000DE                     	ds	1
   512  0000DF                     
   513                           ; 1 bytes @ 0x1B
   514  0000DF                     	ds	1
   515  0000E0                     ?_printf:
   516                           	opt stack 0
   517  0000E0                     printf@f:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x1C
   521  0000E0                     	ds	1
   522  0000E1                     C_DOOR_LockAll@d:
   523                           	opt stack 0
   524  0000E1                     C_DOOR_UnlockAll@d:
   525                           	opt stack 0
   526  0000E1                     ___lldiv@quotient:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x1D
   530  0000E1                     	ds	1
   531  0000E2                     initDoors@door_cnt:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1E
   535  0000E2                     	ds	1
   536  0000E3                     printf@flag:
   537                           	opt stack 0
   538  0000E3                     commandAndMessage@com:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x1F
   542  0000E3                     	ds	1
   543  0000E4                     printf@idx:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x20
   547  0000E4                     	ds	1
   548  0000E5                     ___lldiv@counter:
   549                           	opt stack 0
   550  0000E5                     commandAndMessage@mes:
   551                           	opt stack 0
   552  0000E5                     printf@ap:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x21
   556  0000E5                     	ds	1
   557  0000E6                     D_UART_Init@name:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x22
   561  0000E6                     	ds	1
   562  0000E7                     printf@val:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x23
   566  0000E7                     	ds	1
   567  0000E8                     D_UART_Init@baud:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x24
   571  0000E8                     	ds	1
   572  0000E9                     printf@prec:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x25
   576  0000E9                     	ds	1
   577  0000EA                     D_UART_Init@interrupts:
   578                           	opt stack 0
   579  0000EA                     printf@c:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x26
   583  0000EA                     	ds	1
   584  0000EB                     tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           ; 1 bytes @ 0x27
   594                           
   595                           	psect	cstackCOMRAM
   596  000001                     __pcstackCOMRAM:
   597                           	opt stack 0
   598  000001                     ?i2___lwdiv:
   599                           	opt stack 0
   600  000001                     i2putch@data:
   601                           	opt stack 0
   602  000001                     i2___lwdiv@dividend:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x0
   606  000001                     	ds	1
   607  000002                     i2putch@max:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1
   611  000002                     	ds	1
   612  000003                     i2___lwdiv@divisor:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x2
   616  000003                     	ds	2
   617  000005                     i2___lwdiv@counter:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x4
   621  000005                     	ds	1
   622  000006                     i2___lwdiv@quotient:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x5
   626  000006                     	ds	2
   627  000008                     ?i2_printf:
   628                           	opt stack 0
   629  000008                     i2printf@f:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x7
   633  000008                     	ds	5
   634  00000D                     i2printf@flag:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0xC
   638  00000D                     	ds	1
   639  00000E                     i2printf@idx:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0xD
   643  00000E                     	ds	1
   644  00000F                     i2printf@ap:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0xE
   648  00000F                     	ds	2
   649  000011                     i2printf@val:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x10
   653  000011                     	ds	2
   654  000013                     i2printf@prec:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x12
   658  000013                     	ds	1
   659  000014                     i2printf@c:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x13
   663  000014                     	ds	1
   664  000015                     fillDataBuffer@data:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x14
   668  000015                     	ds	1
   669  000016                     ??_HighISR:
   670                           
   671                           ; 1 bytes @ 0x15
   672  000016                     	ds	18
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           postdec1	equ	0xFE5
   680                           fsr1l	equ	0xFE1
   681                           
   682 ;;
   683 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   684 ;;
   685 ;; *************** function _main *****************
   686 ;; Defined at:
   687 ;;		line 60 in file "main.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         0       0       0       0       0       0       0       0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0
   703 ;;      Temps:          0       0       2       0       0       0       0       0       0
   704 ;;      Totals:         0       0       2       0       0       0       0       0       0
   705 ;;Total ram usage:        2 bytes
   706 ;; Hardware stack levels required when called:   10
   707 ;; This function calls:
   708 ;;		_C_DOOR_LockAll
   709 ;;		_C_DOOR_ReadSensors
   710 ;;		_C_DOOR_SendStates
   711 ;;		_C_DOOR_UnlockAll
   712 ;;		_D_PORT_Init
   713 ;;		_D_PWM_Init
   714 ;;		_D_PWM_SetPwm
   715 ;;		_D_TMR0_Init
   716 ;;		_D_TMR1_Enable
   717 ;;		_D_TMR1_Init
   718 ;;		_D_UART_Enable
   719 ;;		_D_UART_Init
   720 ;;		_D_UART_Read
   721 ;;		_D_UART_Write
   722 ;;		_initDoors
   723 ;;		_setAlarm
   724 ;;		_strcmp
   725 ;; This function is called by:
   726 ;;		Startup code after reset
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text0
   731  00083A                     __ptext0:
   732                           	opt stack 0
   733  00083A                     _main:
   734                           	opt stack 21
   735                           
   736                           ;main.c: 61: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   737                           
   738                           ;incstack = 0
   739  00083A  0E05               	movlw	5
   740  00083C  0101               	movlb	1	; () banked
   741  00083E  6FB5               	movwf	(??_main+1)& (0+255),b
   742  000840  0E0F               	movlw	15
   743  000842  6FB4               	movwf	??_main& (0+255),b
   744  000844  0EF1               	movlw	241
   745  000846                     u2577:
   746  000846  2EE8               	decfsz	wreg,f,c
   747  000848  D7FE               	bra	u2577
   748  00084A  2FB4               	decfsz	??_main& (0+255),f,b
   749  00084C  D7FC               	bra	u2577
   750  00084E  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   751  000850  D7FA               	bra	u2577
   752                           
   753                           ;main.c: 63: D_PORT_Init();
   754  000852  EC9F  F00C         	call	_D_PORT_Init	;wreg free
   755                           
   756                           ;main.c: 67: D_UART_Init("P", 9600, 1);
   757  000856  0E2D               	movlw	low STR_8
   758  000858  0100               	movlb	0	; () banked
   759  00085A  6FE6               	movwf	D_UART_Init@name& (0+255),b
   760  00085C  0E08               	movlw	high STR_8
   761  00085E  6FE7               	movwf	(D_UART_Init@name+1)& (0+255),b
   762  000860  0E25               	movlw	37
   763  000862  6FE9               	movwf	(D_UART_Init@baud+1)& (0+255),b
   764  000864  0E80               	movlw	128
   765  000866  6FE8               	movwf	D_UART_Init@baud& (0+255),b
   766  000868  0E01               	movlw	1
   767  00086A  6FEA               	movwf	D_UART_Init@interrupts& (0+255),b
   768  00086C  ECB8  F00A         	call	_D_UART_Init	;wreg free
   769                           
   770                           ;main.c: 68: D_UART_Enable(1);
   771  000870  0E01               	movlw	1
   772  000872  EC3A  F00C         	call	_D_UART_Enable
   773                           
   774                           ;main.c: 71: D_TMR0_Init();
   775  000876  EC4C  F00C         	call	_D_TMR0_Init	;wreg free
   776                           
   777                           ;main.c: 72: D_TMR1_Init();
   778  00087A  EC80  F00C         	call	_D_TMR1_Init	;wreg free
   779                           
   780                           ;main.c: 75: D_PWM_Init();
   781  00087E  EC90  F00C         	call	_D_PWM_Init	;wreg free
   782                           
   783                           ;main.c: 77: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   784  000882  0E05               	movlw	5
   785  000884  0101               	movlb	1	; () banked
   786  000886  6FB5               	movwf	(??_main+1)& (0+255),b
   787  000888  0E0F               	movlw	15
   788  00088A  6FB4               	movwf	??_main& (0+255),b
   789  00088C  0EF1               	movlw	241
   790  00088E                     u2587:
   791  00088E  2EE8               	decfsz	wreg,f,c
   792  000890  D7FE               	bra	u2587
   793  000892  2FB4               	decfsz	??_main& (0+255),f,b
   794  000894  D7FC               	bra	u2587
   795  000896  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   796  000898  D7FA               	bra	u2587
   797                           
   798                           ;main.c: 79: newAlarm = 0;
   799  00089A  0E00               	movlw	0
   800  00089C  6E3A               	movwf	_newAlarm,c
   801                           
   802                           ;main.c: 80: oldAlarm = 0;
   803  00089E  0E00               	movlw	0
   804  0008A0  6E39               	movwf	_oldAlarm,c
   805                           
   806                           ;main.c: 81: lock = 0;
   807  0008A2  0E00               	movlw	0
   808  0008A4  6E3C               	movwf	_lock,c
   809                           
   810                           ;main.c: 82: tick = 0;
   811  0008A6  0E00               	movlw	0
   812  0008A8  6E3D               	movwf	_tick,c
   813                           
   814                           ;main.c: 84: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   815  0008AA  0E05               	movlw	5
   816  0008AC  0101               	movlb	1	; () banked
   817  0008AE  6FB5               	movwf	(??_main+1)& (0+255),b
   818  0008B0  0E0F               	movlw	15
   819  0008B2  6FB4               	movwf	??_main& (0+255),b
   820  0008B4  0EF1               	movlw	241
   821  0008B6                     u2597:
   822  0008B6  2EE8               	decfsz	wreg,f,c
   823  0008B8  D7FE               	bra	u2597
   824  0008BA  2FB4               	decfsz	??_main& (0+255),f,b
   825  0008BC  D7FC               	bra	u2597
   826  0008BE  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   827  0008C0  D7FA               	bra	u2597
   828                           
   829                           ;main.c: 88: PORTB = 0xFF;
   830                           
   831                           ;main.c: 87: } else {
   832                           
   833                           ;main.c: 86: PORTB = 0x00;
   834                           
   835                           ;main.c: 85: if (0) {
   836  0008C2  6881               	setf	3969,c	;volatile
   837  0008C4                     
   838                           ;main.c: 93: if (lock) {
   839                           
   840                           ;main.c: 89: }
   841                           ;main.c: 91: while(1) {
   842  0008C4  503C               	movf	_lock,w,c
   843  0008C6  B4D8               	btfsc	status,2,c
   844  0008C8  D009               	goto	l321
   845                           
   846                           ;main.c: 94: D_TMR1_Enable(0);
   847  0008CA  0E00               	movlw	0
   848  0008CC  ECAE  F00C         	call	_D_TMR1_Enable
   849                           
   850                           ;main.c: 95: lockDelayCnt = 0;
   851  0008D0  0E00               	movlw	0
   852  0008D2  6E3F               	movwf	_lockDelayCnt,c
   853                           
   854                           ;main.c: 96: C_DOOR_LockAll();
   855  0008D4  ECCD  F009         	call	_C_DOOR_LockAll	;wreg free
   856                           
   857                           ;main.c: 97: lock = 0;
   858  0008D8  0E00               	movlw	0
   859  0008DA  6E3C               	movwf	_lock,c
   860  0008DC                     l321:
   861                           
   862                           ;main.c: 98: }
   863                           ;main.c: 101: if (readReady) {
   864  0008DC  5040               	movf	_readReady,w,c
   865  0008DE  B4D8               	btfsc	status,2,c
   866  0008E0  D0B7               	goto	l335
   867                           
   868                           ;main.c: 102: readReady = 0;
   869  0008E2  0E00               	movlw	0
   870  0008E4  6E40               	movwf	_readReady,c
   871                           
   872                           ;main.c: 103: read = D_UART_Read();
   873  0008E6  EC10  F00C         	call	_D_UART_Read	;wreg free
   874  0008EA  EE20  F028         	lfsr	2,_read
   875  0008EE  0E05               	movlw	5
   876  0008F0                     u2401:
   877  0008F0  CFEB FFDB          	movff	plusw0,plusw2
   878  0008F4  06E8               	decf	wreg,f,c
   879  0008F6  E2FC               	bc	u2401
   880                           
   881                           ;main.c: 104: PORTBbits.RB5 = !PORTBbits.RB5;
   882  0008F8  BA81               	btfsc	3969,5,c	;volatile
   883  0008FA  D004               	goto	u2410
   884  0008FC  0101               	movlb	1	; () banked
   885  0008FE  6BB4               	clrf	??_main& (0+255),b
   886  000900  2BB4               	incf	??_main& (0+255),f,b
   887  000902  D002               	goto	u2428
   888  000904                     u2410:
   889  000904  0101               	movlb	1	; () banked
   890  000906  6BB4               	clrf	??_main& (0+255),b
   891  000908                     u2428:
   892  000908  3BB4               	swapf	??_main& (0+255),f,b
   893  00090A  47B4               	rlncf	??_main& (0+255),f,b
   894  00090C  5081               	movf	3969,w,c	;volatile
   895  00090E  19B4               	xorwf	??_main& (0+255),w,b
   896  000910  0BDF               	andlw	-33
   897  000912  19B4               	xorwf	??_main& (0+255),w,b
   898  000914  6E81               	movwf	3969,c	;volatile
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 107: communicationCnt = 0;
   902  000916  0E00               	movlw	0
   903  000918  6E3E               	movwf	_communicationCnt,c
   904                           
   905                           ; BSR set to: 1
   906                           ;main.c: 108: if (oldAlarm == 3) {
   907  00091A  0E03               	movlw	3
   908  00091C  1839               	xorwf	_oldAlarm,w,c
   909  00091E  A4D8               	btfss	status,2,c
   910  000920  D002               	goto	l323
   911                           
   912                           ; BSR set to: 1
   913                           ;main.c: 109: newAlarm = 0;
   914  000922  0E00               	movlw	0
   915  000924  6E3A               	movwf	_newAlarm,c
   916  000926                     l323:
   917                           
   918                           ; BSR set to: 1
   919                           ;main.c: 110: }
   920                           ;main.c: 113: if (strcmp(read.command, "L") == 0) {
   921                           
   922                           ; BSR set to: 1
   923  000926  C02A  F0D9         	movff	_read+2,strcmp@s1
   924  00092A  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   925  00092E  0E2B               	movlw	low STR_9
   926  000930  0100               	movlb	0	; () banked
   927  000932  6FDB               	movwf	strcmp@s2& (0+255),b
   928  000934  0E08               	movlw	high STR_9
   929  000936  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   930  000938  ECD2  F00B         	call	_strcmp	;wreg free
   931  00093C  0100               	movlb	0	; () banked
   932  00093E  51D9               	movf	?_strcmp& (0+255),w,b
   933  000940  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   934  000942  A4D8               	btfss	status,2,c
   935  000944  D006               	goto	l324
   936                           
   937                           ; BSR set to: 0
   938                           ;main.c: 114: lockDelayCnt = 0;
   939  000946  0E00               	movlw	0
   940  000948  6E3F               	movwf	_lockDelayCnt,c
   941                           
   942                           ; BSR set to: 0
   943                           ;main.c: 115: D_TMR1_Enable(1);
   944  00094A  0E01               	movlw	1
   945  00094C  ECAE  F00C         	call	_D_TMR1_Enable
   946                           
   947                           ;main.c: 118: } else if (strcmp(read.command, "U") == 0) {
   948  000950  D07F               	goto	l335
   949  000952                     l324:
   950  000952  C02A  F0D9         	movff	_read+2,strcmp@s1
   951  000956  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   952  00095A  0E31               	movlw	low STR_10
   953  00095C  0100               	movlb	0	; () banked
   954  00095E  6FDB               	movwf	strcmp@s2& (0+255),b
   955  000960  0E08               	movlw	high STR_10
   956  000962  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   957  000964  ECD2  F00B         	call	_strcmp	;wreg free
   958  000968  0100               	movlb	0	; () banked
   959  00096A  51D9               	movf	?_strcmp& (0+255),w,b
   960  00096C  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   961  00096E  A4D8               	btfss	status,2,c
   962  000970  D008               	goto	l326
   963                           
   964                           ; BSR set to: 0
   965                           ;main.c: 119: lockDelayCnt = 0;
   966  000972  0E00               	movlw	0
   967  000974  6E3F               	movwf	_lockDelayCnt,c
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 120: D_TMR1_Enable(0);
   971  000976  0E00               	movlw	0
   972  000978  ECAE  F00C         	call	_D_TMR1_Enable
   973                           
   974                           ;main.c: 121: C_DOOR_UnlockAll();
   975  00097C  EC73  F009         	call	_C_DOOR_UnlockAll	;wreg free
   976                           
   977                           ;main.c: 124: } else if (strcmp(read.command, "I") == 0) {
   978  000980  D067               	goto	l335
   979  000982                     l326:
   980  000982  C02A  F0D9         	movff	_read+2,strcmp@s1
   981  000986  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   982  00098A  0E29               	movlw	low STR_11
   983  00098C  0100               	movlb	0	; () banked
   984  00098E  6FDB               	movwf	strcmp@s2& (0+255),b
   985  000990  0E08               	movlw	high STR_11
   986  000992  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   987  000994  ECD2  F00B         	call	_strcmp	;wreg free
   988  000998  0100               	movlb	0	; () banked
   989  00099A  51D9               	movf	?_strcmp& (0+255),w,b
   990  00099C  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   991  00099E  A4D8               	btfss	status,2,c
   992  0009A0  D009               	goto	l328
   993                           
   994                           ; BSR set to: 0
   995                           ;main.c: 125: initDoors((uint8_t)(*read.message - 0x30));
   996  0009A2  C02C  FFD9         	movff	_read+4,fsr2l
   997  0009A6  C02D  FFDA         	movff	_read+5,fsr2h
   998  0009AA  50DF               	movf	indf2,w,c
   999  0009AC  0FD0               	addlw	208
  1000  0009AE  EC5E  F00C         	call	_initDoors
  1001                           
  1002                           ;main.c: 128: } else if (strcmp(read.command, "R") == 0) {
  1003  0009B2  D04E               	goto	l335
  1004  0009B4                     l328:
  1005  0009B4  C02A  F0D9         	movff	_read+2,strcmp@s1
  1006  0009B8  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1007  0009BC  0E2F               	movlw	low STR_12
  1008  0009BE  0100               	movlb	0	; () banked
  1009  0009C0  6FDB               	movwf	strcmp@s2& (0+255),b
  1010  0009C2  0E08               	movlw	high STR_12
  1011  0009C4  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1012  0009C6  ECD2  F00B         	call	_strcmp	;wreg free
  1013  0009CA  0100               	movlb	0	; () banked
  1014  0009CC  51D9               	movf	?_strcmp& (0+255),w,b
  1015  0009CE  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1016  0009D0  A4D8               	btfss	status,2,c
  1017  0009D2  D00B               	goto	l330
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 129: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1021  0009D4  0E68               	movlw	104
  1022  0009D6  0101               	movlb	1	; () banked
  1023  0009D8  6FB4               	movwf	??_main& (0+255),b
  1024  0009DA  0EE4               	movlw	228
  1025  0009DC                     u2607:
  1026  0009DC  2EE8               	decfsz	wreg,f,c
  1027  0009DE  D7FE               	bra	u2607
  1028  0009E0  2FB4               	decfsz	??_main& (0+255),f,b
  1029  0009E2  D7FC               	bra	u2607
  1030  0009E4  F000               	nop	
  1031  0009E6  00FF               	reset		;# 
  1032                           
  1033                           ;main.c: 133: } else if (strcmp(read.command, "P") == 0) {
  1034  0009E8  D033               	goto	l335
  1035  0009EA                     l330:
  1036  0009EA  C02A  F0D9         	movff	_read+2,strcmp@s1
  1037  0009EE  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1038  0009F2  0E2D               	movlw	low STR_8
  1039  0009F4  0100               	movlb	0	; () banked
  1040  0009F6  6FDB               	movwf	strcmp@s2& (0+255),b
  1041  0009F8  0E08               	movlw	high STR_8
  1042  0009FA  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1043  0009FC  ECD2  F00B         	call	_strcmp	;wreg free
  1044  000A00  0100               	movlb	0	; () banked
  1045  000A02  51D9               	movf	?_strcmp& (0+255),w,b
  1046  000A04  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1047  000A06  B4D8               	btfsc	status,2,c
  1048  000A08  D023               	goto	l335
  1049                           
  1050                           ; BSR set to: 0
  1051                           
  1052                           ; BSR set to: 0
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;main.c: 137: } else if (strcmp(read.command, "A") == 0) {
  1056  000A0A  C02A  F0D9         	movff	_read+2,strcmp@s1
  1057  000A0E  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1058  000A12  0E25               	movlw	low STR_14
  1059  000A14  6FDB               	movwf	strcmp@s2& (0+255),b
  1060  000A16  0E08               	movlw	high STR_14
  1061  000A18  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1062  000A1A  ECD2  F00B         	call	_strcmp	;wreg free
  1063  000A1E  0100               	movlb	0	; () banked
  1064  000A20  51D9               	movf	?_strcmp& (0+255),w,b
  1065  000A22  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1066  000A24  A4D8               	btfss	status,2,c
  1067  000A26  D009               	goto	l334
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;main.c: 138: setAlarm((uint8_t)(*read.message - 0x30));
  1071  000A28  C02C  FFD9         	movff	_read+4,fsr2l
  1072  000A2C  C02D  FFDA         	movff	_read+5,fsr2h
  1073  000A30  50DF               	movf	indf2,w,c
  1074  000A32  0FD0               	addlw	208
  1075  000A34  ECC2  F00C         	call	_setAlarm
  1076                           
  1077                           ;main.c: 140: } else {
  1078  000A38  D00B               	goto	l335
  1079  000A3A                     l334:
  1080                           
  1081                           ;main.c: 141: D_UART_Write("E", "U");
  1082  000A3A  0E27               	movlw	low STR_15
  1083  000A3C  0101               	movlb	1	; () banked
  1084  000A3E  6FA6               	movwf	D_UART_Write@command& (0+255),b
  1085  000A40  0E08               	movlw	high STR_15
  1086  000A42  6FA7               	movwf	(D_UART_Write@command+1)& (0+255),b
  1087  000A44  0E31               	movlw	low STR_10
  1088  000A46  6FA8               	movwf	D_UART_Write@data& (0+255),b
  1089  000A48  0E08               	movlw	high STR_10
  1090  000A4A  6FA9               	movwf	(D_UART_Write@data+1)& (0+255),b
  1091  000A4C  ECA4  F008         	call	_D_UART_Write	;wreg free
  1092  000A50                     l335:
  1093                           
  1094                           ;main.c: 143: }
  1095                           ;main.c: 144: }
  1096                           ;main.c: 147: if (tick) {
  1097  000A50  503D               	movf	_tick,w,c
  1098  000A52  B4D8               	btfsc	status,2,c
  1099  000A54  D737               	goto	l319
  1100                           
  1101                           ;main.c: 148: tick = 0;
  1102  000A56  0E00               	movlw	0
  1103  000A58  6E3D               	movwf	_tick,c
  1104                           
  1105                           ;main.c: 151: C_DOOR_ReadSensors();
  1106  000A5A  EC26  F00A         	call	_C_DOOR_ReadSensors	;wreg free
  1107                           
  1108                           ;main.c: 154: C_DOOR_SendStates();
  1109  000A5E  EC2C  F008         	call	_C_DOOR_SendStates	;wreg free
  1110                           
  1111                           ;main.c: 157: if (communicationCnt < 60) {
  1112  000A62  0E3C               	movlw	60
  1113  000A64  603E               	cpfslt	_communicationCnt,c
  1114  000A66  D002               	goto	l337
  1115                           
  1116                           ;main.c: 158: communicationCnt++;
  1117  000A68  2A3E               	incf	_communicationCnt,f,c
  1118                           
  1119                           ;main.c: 159: } else {
  1120  000A6A  D005               	goto	l339
  1121  000A6C                     l337:
  1122                           
  1123                           ;main.c: 160: if (oldAlarm == 0) {
  1124  000A6C  5039               	movf	_oldAlarm,w,c
  1125  000A6E  A4D8               	btfss	status,2,c
  1126  000A70  D002               	goto	l339
  1127                           
  1128                           ;main.c: 161: newAlarm = 3;
  1129  000A72  0E03               	movlw	3
  1130  000A74  6E3A               	movwf	_newAlarm,c
  1131  000A76                     l339:
  1132                           
  1133                           ;main.c: 162: }
  1134                           ;main.c: 163: }
  1135                           ;main.c: 166: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1136  000A76  5039               	movf	_oldAlarm,w,c
  1137  000A78  183A               	xorwf	_newAlarm,w,c
  1138  000A7A  A4D8               	btfss	status,2,c
  1139  000A7C  D017               	goto	l343
  1140  000A7E  043A               	decf	_newAlarm,w,c
  1141  000A80  B4D8               	btfsc	status,2,c
  1142  000A82  D014               	goto	l343
  1143  000A84  0E03               	movlw	3
  1144  000A86  183A               	xorwf	_newAlarm,w,c
  1145  000A88  B4D8               	btfsc	status,2,c
  1146  000A8A  D010               	goto	l343
  1147  000A8C  D71B               	goto	l319
  1148  000A8E                     
  1149                           ;main.c: 170: pwm = 0x00;
  1150                           
  1151                           ;main.c: 169: case 0:
  1152  000A8E  0E00               	movlw	0
  1153  000A90  D00B               	goto	L1
  1154  000A92                     
  1155                           ;main.c: 174: case 1:
  1156                           ;main.c: 175: if (pwm == 0) {
  1157  000A92  503B               	movf	_pwm,w,c
  1158  000A94  A4D8               	btfss	status,2,c
  1159  000A96  D002               	goto	l349
  1160                           
  1161                           ;main.c: 176: pwm = 1;
  1162  000A98  0E01               	movlw	1
  1163  000A9A  6E3B               	movwf	_pwm,c
  1164  000A9C                     l349:
  1165                           
  1166                           ;main.c: 177: }
  1167                           ;main.c: 178: pwm = (uint8_t)(pwm * 0x02);
  1168  000A9C  503B               	movf	_pwm,w,c
  1169  000A9E  0D02               	mullw	2
  1170  000AA0  CFF3 F03B          	movff	prodl,_pwm
  1171                           
  1172                           ;main.c: 179: break;
  1173  000AA4  D011               	goto	l346
  1174  000AA6                     
  1175                           ;main.c: 182: pwm = 0x7F;
  1176  000AA6  0E7F               	movlw	127
  1177  000AA8                     L1:
  1178  000AA8  6E3B               	movwf	_pwm,c
  1179                           
  1180                           ;main.c: 184: }
  1181                           
  1182                           ;main.c: 183: break;
  1183  000AAA  D00E               	goto	l346
  1184  000AAC                     l343:
  1185  000AAC  503A               	movf	_newAlarm,w,c
  1186                           
  1187                           ; Switch size 1, requested type "space"
  1188                           ; Number of cases is 4, Range of values is 0 to 3
  1189                           ; switch strategies available:
  1190                           ; Name         Instructions Cycles
  1191                           ; simple_byte           13     7 (average)
  1192                           ;	Chosen strategy is simple_byte
  1193  000AAE  0A00               	xorlw	0	; case 0
  1194  000AB0  B4D8               	btfsc	status,2,c
  1195  000AB2  D7ED               	goto	l344
  1196  000AB4  0A01               	xorlw	1	; case 1
  1197  000AB6  B4D8               	btfsc	status,2,c
  1198  000AB8  D7EC               	goto	l347
  1199  000ABA  0A03               	xorlw	3	; case 2
  1200  000ABC  B4D8               	btfsc	status,2,c
  1201  000ABE  D7F3               	goto	l350
  1202  000AC0  0A01               	xorlw	1	; case 3
  1203  000AC2  B4D8               	btfsc	status,2,c
  1204  000AC4  D7E6               	goto	l347
  1205  000AC6  D7E3               	goto	l344
  1206  000AC8                     l346:
  1207                           
  1208                           ;main.c: 185: D_PWM_SetPwm(pwm);
  1209  000AC8  503B               	movf	_pwm,w,c
  1210  000ACA  ECF9  F00B         	call	_D_PWM_SetPwm
  1211                           
  1212                           ;main.c: 186: oldAlarm = newAlarm;
  1213  000ACE  C03A  F039         	movff	_newAlarm,_oldAlarm
  1214  000AD2  D6F8               	goto	l319
  1215  000AD4                     __end_of_main:
  1216                           	opt stack 0
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           prodl	equ	0xFF3
  1222                           postinc0	equ	0xFEE
  1223                           plusw0	equ	0xFEB
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           indf2	equ	0xFDF
  1228                           plusw2	equ	0xFDB
  1229                           fsr2h	equ	0xFDA
  1230                           fsr2l	equ	0xFD9
  1231                           status	equ	0xFD8
  1232                           
  1233 ;; *************** function _strcmp *****************
  1234 ;; Defined at:
  1235 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  s1              2   21[BANK0 ] PTR const unsigned char 
  1238 ;;		 -> readBuffer(166), 
  1239 ;;  s2              2   23[BANK0 ] PTR const unsigned char 
  1240 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
  1241 ;;		 -> STR_10(2), STR_9(2), 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  r               1   26[BANK0 ] char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   21[BANK0 ] int 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1253 ;;      Params:         0       4       0       0       0       0       0       0       0
  1254 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1255 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1256 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1257 ;;Total ram usage:        6 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    6
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text1
  1268  0017A4                     __ptext1:
  1269                           	opt stack 0
  1270  0017A4                     _strcmp:
  1271                           	opt stack 24
  1272                           
  1273                           ;incstack = 0
  1274  0017A4  D005               	goto	l937
  1275  0017A6  0100               	movlb	0	; () banked
  1276  0017A8  4BD9               	infsnz	strcmp@s1& (0+255),f,b
  1277  0017AA  2BDA               	incf	(strcmp@s1+1)& (0+255),f,b
  1278  0017AC  4BDB               	infsnz	strcmp@s2& (0+255),f,b
  1279  0017AE  2BDC               	incf	(strcmp@s2+1)& (0+255),f,b
  1280  0017B0                     l937:
  1281                           
  1282                           ; BSR set to: 0
  1283  0017B0  C0D9  FFD9         	movff	strcmp@s1,fsr2l
  1284  0017B4  C0DA  FFDA         	movff	strcmp@s1+1,fsr2h
  1285  0017B8  50DF               	movf	indf2,w,c
  1286  0017BA  0100               	movlb	0	; () banked
  1287  0017BC  6FDD               	movwf	??_strcmp& (0+255),b
  1288  0017BE  C0DB  FFF6         	movff	strcmp@s2,tblptrl
  1289  0017C2  C0DC  FFF7         	movff	strcmp@s2+1,tblptrh
  1290  0017C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1291  0017C6  6AF8               	clrf	tblptru,c
  1292  0017C8                     	endif
  1293  0017C8                     	if	0	;tblptru may be non-zero
  1294  0017C8                     	endif
  1295  0017C8  0008               	tblrd		*
  1296  0017CA  50F5               	movf	tablat,w,c
  1297  0017CC  0800               	sublw	0
  1298  0017CE  25DD               	addwf	??_strcmp& (0+255),w,b
  1299  0017D0  6FDE               	movwf	strcmp@r& (0+255),b
  1300  0017D2  51DE               	movf	strcmp@r& (0+255),w,b
  1301  0017D4  A4D8               	btfss	status,2,c
  1302  0017D6  D007               	goto	u2340
  1303                           
  1304                           ; BSR set to: 0
  1305  0017D8  C0D9  FFD9         	movff	strcmp@s1,fsr2l
  1306  0017DC  C0DA  FFDA         	movff	strcmp@s1+1,fsr2h
  1307  0017E0  50DF               	movf	indf2,w,c
  1308  0017E2  A4D8               	btfss	status,2,c
  1309  0017E4  D7E0               	goto	l938
  1310  0017E6                     u2340:
  1311                           
  1312                           ; BSR set to: 0
  1313                           
  1314                           ; BSR set to: 0
  1315                           
  1316                           ; BSR set to: 0
  1317  0017E6  51DE               	movf	strcmp@r& (0+255),w,b
  1318  0017E8  6FD9               	movwf	?_strcmp& (0+255),b
  1319  0017EA  6BDA               	clrf	(?_strcmp+1)& (0+255),b
  1320  0017EC  BFD9               	btfsc	?_strcmp& (0+255),7,b
  1321  0017EE  07DA               	decf	(?_strcmp+1)& (0+255),f,b
  1322  0017F0  0012               	return	
  1323  0017F2                     __end_of_strcmp:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           prodl	equ	0xFF3
  1330                           postinc0	equ	0xFEE
  1331                           plusw0	equ	0xFEB
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1l	equ	0xFE1
  1335                           indf2	equ	0xFDF
  1336                           plusw2	equ	0xFDB
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _setAlarm *****************
  1342 ;; Defined at:
  1343 ;;		line 56 in file "main.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  alarm           1    wreg     unsigned char 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  alarm           1   21[BANK0 ] unsigned char 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1357 ;;      Params:         0       0       0       0       0       0       0       0       0
  1358 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1360 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1361 ;;Total ram usage:        1 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    6
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_main
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text2
  1372  001984                     __ptext2:
  1373                           	opt stack 0
  1374  001984                     _setAlarm:
  1375                           	opt stack 24
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;incstack = 0
  1379                           ;setAlarm@alarm stored from wreg
  1380  001984  0100               	movlb	0	; () banked
  1381  001986  6FD9               	movwf	setAlarm@alarm& (0+255),b
  1382                           
  1383                           ;main.c: 57: newAlarm = alarm;
  1384  001988  C0D9  F03A         	movff	setAlarm@alarm,_newAlarm
  1385  00198C  0012               	return		;funcret
  1386  00198E                     __end_of_setAlarm:
  1387                           	opt stack 0
  1388                           tblptru	equ	0xFF8
  1389                           tblptrh	equ	0xFF7
  1390                           tblptrl	equ	0xFF6
  1391                           tablat	equ	0xFF5
  1392                           prodl	equ	0xFF3
  1393                           postinc0	equ	0xFEE
  1394                           plusw0	equ	0xFEB
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           fsr1l	equ	0xFE1
  1398                           indf2	equ	0xFDF
  1399                           plusw2	equ	0xFDB
  1400                           fsr2h	equ	0xFDA
  1401                           fsr2l	equ	0xFD9
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _initDoors *****************
  1405 ;; Defined at:
  1406 ;;		line 44 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  door_cnt        1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  door_cnt        1   30[BANK0 ] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1420 ;;      Params:         0       0       0       0       0       0       0       0       0
  1421 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1423 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    7
  1427 ;; This function calls:
  1428 ;;		_C_DOOR_Init
  1429 ;;		_C_DOOR_LockAll
  1430 ;;		_D_TMR0_Enable
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text3
  1437  0018BC                     __ptext3:
  1438                           	opt stack 0
  1439  0018BC                     _initDoors:
  1440                           	opt stack 23
  1441                           
  1442                           ;incstack = 0
  1443                           ;initDoors@door_cnt stored from wreg
  1444  0018BC  0100               	movlb	0	; () banked
  1445  0018BE  6FE2               	movwf	initDoors@door_cnt& (0+255),b
  1446                           
  1447                           ;main.c: 45: if (door_cnt < 1) {
  1448  0018C0  0100               	movlb	0	; () banked
  1449  0018C2  51E2               	movf	initDoors@door_cnt& (0+255),w,b
  1450  0018C4  A4D8               	btfss	status,2,c
  1451  0018C6  D002               	goto	l309
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 46: door_cnt = 1;
  1455  0018C8  0E01               	movlw	1
  1456  0018CA  6FE2               	movwf	initDoors@door_cnt& (0+255),b
  1457  0018CC                     l309:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 47: }
  1461                           ;main.c: 49: C_DOOR_Init(door_cnt);
  1462                           
  1463                           ; BSR set to: 0
  1464  0018CC  51E2               	movf	initDoors@door_cnt& (0+255),w,b
  1465  0018CE  ECDF  F006         	call	_C_DOOR_Init
  1466                           
  1467                           ;main.c: 50: C_DOOR_LockAll();
  1468  0018D2  ECCD  F009         	call	_C_DOOR_LockAll	;wreg free
  1469                           
  1470                           ;main.c: 53: D_TMR0_Enable(1);
  1471  0018D6  0E01               	movlw	1
  1472  0018D8  ECB8  F00C         	call	_D_TMR0_Enable
  1473  0018DC  0012               	return		;funcret
  1474  0018DE                     __end_of_initDoors:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           prodl	equ	0xFF3
  1481                           postinc0	equ	0xFEE
  1482                           plusw0	equ	0xFEB
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           indf2	equ	0xFDF
  1487                           plusw2	equ	0xFDB
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _C_DOOR_LockAll *****************
  1493 ;; Defined at:
  1494 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  d               1   29[BANK0 ] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0
  1509 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1510 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1511 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1512 ;;Total ram usage:        9 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    6
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_initDoors
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text4
  1524  00139A                     __ptext4:
  1525                           	opt stack 0
  1526  00139A                     _C_DOOR_LockAll:
  1527                           	opt stack 23
  1528                           
  1529                           ;DOOR_Controller.c: 80: uint8_t d;
  1530                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1531                           
  1532                           ;incstack = 0
  1533  00139A  0E00               	movlw	0
  1534  00139C  0100               	movlb	0	; () banked
  1535  00139E  6FE1               	movwf	C_DOOR_LockAll@d& (0+255),b
  1536  0013A0  D047               	goto	l30
  1537  0013A2                     
  1538                           ; BSR set to: 0
  1539                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1540                           
  1541                           ; BSR set to: 0
  1542  0013A2  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1543  0013A4  0D0A               	mullw	10
  1544  0013A6  0E02               	movlw	2
  1545  0013A8  26F3               	addwf	prodl,f,c
  1546  0013AA  0E00               	movlw	0
  1547  0013AC  22F4               	addwfc	prodh,f,c
  1548  0013AE  0E60               	movlw	low _doors
  1549  0013B0  24F3               	addwf	prodl,w,c
  1550  0013B2  6ED9               	movwf	fsr2l,c
  1551  0013B4  0E00               	movlw	high _doors
  1552  0013B6  20F4               	addwfc	prodh,w,c
  1553  0013B8  6EDA               	movwf	fsr2h,c
  1554  0013BA  CFDE F0D9          	movff	postinc2,??_C_DOOR_LockAll
  1555  0013BE  CFDD F0DA          	movff	postdec2,??_C_DOOR_LockAll+1
  1556  0013C2  C0D9  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1557  0013C6  C0DA  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1558  0013CA  50DF               	movf	indf2,w,c
  1559  0013CC  6FDB               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1560  0013CE  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1561  0013D0  0D0A               	mullw	10
  1562  0013D2  0E04               	movlw	4
  1563  0013D4  26F3               	addwf	prodl,f,c
  1564  0013D6  0E00               	movlw	0
  1565  0013D8  22F4               	addwfc	prodh,f,c
  1566  0013DA  0E60               	movlw	low _doors
  1567  0013DC  24F3               	addwf	prodl,w,c
  1568  0013DE  6ED9               	movwf	fsr2l,c
  1569  0013E0  0E00               	movlw	high _doors
  1570  0013E2  20F4               	addwfc	prodh,w,c
  1571  0013E4  6EDA               	movwf	fsr2h,c
  1572  0013E6  50DF               	movf	indf2,w,c
  1573  0013E8  6FDC               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1574  0013EA  0E01               	movlw	1
  1575  0013EC  6FDD               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1576  0013EE  2BDC               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1577  0013F0  D002               	goto	u1984
  1578  0013F2                     u1985:
  1579  0013F2  90D8               	bcf	status,0,c
  1580  0013F4  37DD               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1581  0013F6                     u1984:
  1582  0013F6  2FDC               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1583  0013F8  D7FC               	goto	u1985
  1584  0013FA  0100               	movlb	0	; () banked
  1585  0013FC  51DD               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1586  0013FE  15DB               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1587  001400  6FDE               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1588  001402  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1589  001404  0D0A               	mullw	10
  1590  001406  0E02               	movlw	2
  1591  001408  26F3               	addwf	prodl,f,c
  1592  00140A  0E00               	movlw	0
  1593  00140C  22F4               	addwfc	prodh,f,c
  1594  00140E  0E60               	movlw	low _doors
  1595  001410  24F3               	addwf	prodl,w,c
  1596  001412  6ED9               	movwf	fsr2l,c
  1597  001414  0E00               	movlw	high _doors
  1598  001416  20F4               	addwfc	prodh,w,c
  1599  001418  6EDA               	movwf	fsr2h,c
  1600  00141A  CFDE F0DF          	movff	postinc2,??_C_DOOR_LockAll+6
  1601  00141E  CFDD F0E0          	movff	postdec2,??_C_DOOR_LockAll+7
  1602  001422  C0DF  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1603  001426  C0E0  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1604  00142A  51DE               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1605  00142C  1ADF               	xorwf	indf2,f,c
  1606                           
  1607                           ; BSR set to: 0
  1608  00142E  2BE1               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1609  001430                     l30:
  1610                           
  1611                           ; BSR set to: 0
  1612                           
  1613                           ; BSR set to: 0
  1614  001430  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1615  001432  6FD9               	movwf	??_C_DOOR_LockAll& (0+255),b
  1616  001434  6BDA               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1617  001436  5037               	movf	_door_cnt,w,c
  1618  001438  5DD9               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1619  00143A  51DA               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1620  00143C  0A80               	xorlw	128
  1621  00143E  6FDB               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1622  001440  5038               	movf	_door_cnt+1,w,c
  1623  001442  0A80               	xorlw	128
  1624  001444  59DB               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1625  001446  B0D8               	btfsc	status,0,c
  1626  001448  0012               	return	
  1627  00144A  D7AB               	goto	l31
  1628  00144C                     __end_of_C_DOOR_LockAll:
  1629                           	opt stack 0
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           prodh	equ	0xFF4
  1635                           prodl	equ	0xFF3
  1636                           postinc0	equ	0xFEE
  1637                           plusw0	equ	0xFEB
  1638                           wreg	equ	0xFE8
  1639                           postdec1	equ	0xFE5
  1640                           fsr1l	equ	0xFE1
  1641                           indf2	equ	0xFDF
  1642                           postinc2	equ	0xFDE
  1643                           postdec2	equ	0xFDD
  1644                           plusw2	equ	0xFDB
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _C_DOOR_Init *****************
  1650 ;; Defined at:
  1651 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  cnt             1    wreg     unsigned char 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  cnt             1   24[BANK0 ] unsigned char 
  1656 ;;  d               1   25[BANK0 ] unsigned char 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1666 ;;      Params:         0       0       0       0       0       0       0       0       0
  1667 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1668 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1669 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1670 ;;Total ram usage:        5 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    6
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_initDoors
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text5
  1681  000DBE                     __ptext5:
  1682                           	opt stack 0
  1683  000DBE                     _C_DOOR_Init:
  1684                           	opt stack 23
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;incstack = 0
  1688                           ;C_DOOR_Init@cnt stored from wreg
  1689  000DBE  0100               	movlb	0	; () banked
  1690  000DC0  6FDC               	movwf	C_DOOR_Init@cnt& (0+255),b
  1691                           
  1692                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1693  000DC2  C0DC  F037         	movff	C_DOOR_Init@cnt,_door_cnt
  1694  000DC6  6A38               	clrf	_door_cnt+1,c
  1695                           
  1696                           ;DOOR_Controller.c: 52: uint8_t d;
  1697                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1698  000DC8  0E00               	movlw	0
  1699  000DCA  0100               	movlb	0	; () banked
  1700  000DCC  6FDD               	movwf	C_DOOR_Init@d& (0+255),b
  1701  000DCE  D092               	goto	l24
  1702  000DD0                     
  1703                           ; BSR set to: 0
  1704                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1705                           
  1706                           ; BSR set to: 0
  1707  000DD0  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1708  000DD2  0D0A               	mullw	10
  1709  000DD4  0E60               	movlw	low _doors
  1710  000DD6  24F3               	addwf	prodl,w,c
  1711  000DD8  6ED9               	movwf	fsr2l,c
  1712  000DDA  0E00               	movlw	high _doors
  1713  000DDC  20F4               	addwfc	prodh,w,c
  1714  000DDE  6EDA               	movwf	fsr2h,c
  1715  000DE0  C0DD  FFDF         	movff	C_DOOR_Init@d,indf2
  1716                           
  1717                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1718  000DE4  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1719  000DE6  0D0A               	mullw	10
  1720  000DE8  0E01               	movlw	1
  1721  000DEA  26F3               	addwf	prodl,f,c
  1722  000DEC  0E00               	movlw	0
  1723  000DEE  22F4               	addwfc	prodh,f,c
  1724  000DF0  0E60               	movlw	low _doors
  1725  000DF2  24F3               	addwf	prodl,w,c
  1726  000DF4  6ED9               	movwf	fsr2l,c
  1727  000DF6  0E00               	movlw	high _doors
  1728  000DF8  20F4               	addwfc	prodh,w,c
  1729  000DFA  6EDA               	movwf	fsr2h,c
  1730  000DFC  0E01               	movlw	1
  1731  000DFE  6EDF               	movwf	indf2,c
  1732                           
  1733                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1734  000E00  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1735  000E02  0D0A               	mullw	10
  1736  000E04  0E02               	movlw	2
  1737  000E06  26F3               	addwf	prodl,f,c
  1738  000E08  0E00               	movlw	0
  1739  000E0A  22F4               	addwfc	prodh,f,c
  1740  000E0C  0E60               	movlw	low _doors
  1741  000E0E  24F3               	addwf	prodl,w,c
  1742  000E10  6ED9               	movwf	fsr2l,c
  1743  000E12  0E00               	movlw	high _doors
  1744  000E14  20F4               	addwfc	prodh,w,c
  1745  000E16  6EDA               	movwf	fsr2h,c
  1746  000E18  0E81               	movlw	129
  1747  000E1A  6EDE               	movwf	postinc2,c
  1748  000E1C  0E0F               	movlw	15
  1749  000E1E  6EDD               	movwf	postdec2,c
  1750                           
  1751                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1752  000E20  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1753  000E22  0D0A               	mullw	10
  1754  000E24  0E04               	movlw	4
  1755  000E26  26F3               	addwf	prodl,f,c
  1756  000E28  0E00               	movlw	0
  1757  000E2A  22F4               	addwfc	prodh,f,c
  1758  000E2C  0E60               	movlw	low _doors
  1759  000E2E  24F3               	addwf	prodl,w,c
  1760  000E30  6ED9               	movwf	fsr2l,c
  1761  000E32  0E00               	movlw	high _doors
  1762  000E34  20F4               	addwfc	prodh,w,c
  1763  000E36  6EDA               	movwf	fsr2h,c
  1764  000E38  C0DD  FFDF         	movff	C_DOOR_Init@d,indf2
  1765                           
  1766                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1767  000E3C  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1768  000E3E  0D0A               	mullw	10
  1769  000E40  0E06               	movlw	6
  1770  000E42  26F3               	addwf	prodl,f,c
  1771  000E44  0E00               	movlw	0
  1772  000E46  22F4               	addwfc	prodh,f,c
  1773  000E48  0E60               	movlw	low _doors
  1774  000E4A  24F3               	addwf	prodl,w,c
  1775  000E4C  6ED9               	movwf	fsr2l,c
  1776  000E4E  0E00               	movlw	high _doors
  1777  000E50  20F4               	addwfc	prodh,w,c
  1778  000E52  6EDA               	movwf	fsr2h,c
  1779  000E54  0E00               	movlw	0
  1780  000E56  6EDF               	movwf	indf2,c
  1781                           
  1782                           ;DOOR_Controller.c: 61: doors[d].was_open = !0;
  1783  000E58  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1784  000E5A  0D0A               	mullw	10
  1785  000E5C  0E05               	movlw	5
  1786  000E5E  26F3               	addwf	prodl,f,c
  1787  000E60  0E00               	movlw	0
  1788  000E62  22F4               	addwfc	prodh,f,c
  1789  000E64  0E60               	movlw	low _doors
  1790  000E66  24F3               	addwf	prodl,w,c
  1791  000E68  6ED9               	movwf	fsr2l,c
  1792  000E6A  0E00               	movlw	high _doors
  1793  000E6C  20F4               	addwfc	prodh,w,c
  1794  000E6E  6EDA               	movwf	fsr2h,c
  1795  000E70  0E01               	movlw	1
  1796  000E72  6EDF               	movwf	indf2,c
  1797                           
  1798                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1799  000E74  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1800  000E76  0D0A               	mullw	10
  1801  000E78  0E07               	movlw	7
  1802  000E7A  26F3               	addwf	prodl,f,c
  1803  000E7C  0E00               	movlw	0
  1804  000E7E  22F4               	addwfc	prodh,f,c
  1805  000E80  0E60               	movlw	low _doors
  1806  000E82  24F3               	addwf	prodl,w,c
  1807  000E84  6ED9               	movwf	fsr2l,c
  1808  000E86  0E00               	movlw	high _doors
  1809  000E88  20F4               	addwfc	prodh,w,c
  1810  000E8A  6EDA               	movwf	fsr2h,c
  1811  000E8C  0E80               	movlw	128
  1812  000E8E  6EDE               	movwf	postinc2,c
  1813  000E90  0E0F               	movlw	15
  1814  000E92  6EDD               	movwf	postdec2,c
  1815                           
  1816                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1817  000E94  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1818  000E96  0D0A               	mullw	10
  1819  000E98  0E09               	movlw	9
  1820  000E9A  26F3               	addwf	prodl,f,c
  1821  000E9C  0E00               	movlw	0
  1822  000E9E  22F4               	addwfc	prodh,f,c
  1823  000EA0  0E60               	movlw	low _doors
  1824  000EA2  24F3               	addwf	prodl,w,c
  1825  000EA4  6ED9               	movwf	fsr2l,c
  1826  000EA6  0E00               	movlw	high _doors
  1827  000EA8  20F4               	addwfc	prodh,w,c
  1828  000EAA  6EDA               	movwf	fsr2h,c
  1829  000EAC  29DD               	incf	C_DOOR_Init@d& (0+255),w,b
  1830  000EAE  6EDF               	movwf	indf2,c
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1834  000EB0  C0DD  F0D9         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1835  000EB4  0E01               	movlw	1
  1836  000EB6  6FDA               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1837  000EB8  2BD9               	incf	??_C_DOOR_Init& (0+255),f,b
  1838  000EBA  D002               	goto	u1954
  1839  000EBC                     u1955:
  1840  000EBC  90D8               	bcf	status,0,c
  1841  000EBE  37DA               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1842  000EC0                     u1954:
  1843  000EC0  2FD9               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1844  000EC2  D7FC               	goto	u1955
  1845  000EC4  0100               	movlb	0	; () banked
  1846  000EC6  51DA               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1847  000EC8  1493               	andwf	3987,w,c	;volatile
  1848  000ECA  1A93               	xorwf	3987,f,c	;volatile
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1852  000ECC  5092               	movf	3986,w,c	;volatile
  1853  000ECE  0AFF               	xorlw	255
  1854  000ED0  6FD9               	movwf	??_C_DOOR_Init& (0+255),b
  1855  000ED2  C0DD  F0DA         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1856  000ED6  0E01               	movlw	1
  1857  000ED8  27DA               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1858  000EDA  0E01               	movlw	1
  1859  000EDC  6FDB               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1860  000EDE  2BDA               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1861  000EE0  D002               	goto	u1964
  1862  000EE2                     u1965:
  1863  000EE2  90D8               	bcf	status,0,c
  1864  000EE4  37DB               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1865  000EE6                     u1964:
  1866  000EE6  2FDA               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1867  000EE8  D7FC               	goto	u1965
  1868  000EEA  0100               	movlb	0	; () banked
  1869  000EEC  51DB               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1870  000EEE  15D9               	andwf	??_C_DOOR_Init& (0+255),w,b
  1871  000EF0  1A92               	xorwf	3986,f,c	;volatile
  1872                           
  1873                           ; BSR set to: 0
  1874  000EF2  2BDD               	incf	C_DOOR_Init@d& (0+255),f,b
  1875  000EF4                     l24:
  1876                           
  1877                           ; BSR set to: 0
  1878                           
  1879                           ; BSR set to: 0
  1880  000EF4  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1881  000EF6  6FD9               	movwf	??_C_DOOR_Init& (0+255),b
  1882  000EF8  6BDA               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1883  000EFA  5037               	movf	_door_cnt,w,c
  1884  000EFC  5DD9               	subwf	??_C_DOOR_Init& (0+255),w,b
  1885  000EFE  51DA               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1886  000F00  0A80               	xorlw	128
  1887  000F02  6FDB               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1888  000F04  5038               	movf	_door_cnt+1,w,c
  1889  000F06  0A80               	xorlw	128
  1890  000F08  59DB               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1891  000F0A  B0D8               	btfsc	status,0,c
  1892  000F0C  0012               	return	
  1893  000F0E  D760               	goto	l25
  1894  000F10                     __end_of_C_DOOR_Init:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           postinc0	equ	0xFEE
  1903                           plusw0	equ	0xFEB
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1l	equ	0xFE1
  1907                           indf2	equ	0xFDF
  1908                           postinc2	equ	0xFDE
  1909                           postdec2	equ	0xFDD
  1910                           plusw2	equ	0xFDB
  1911                           fsr2h	equ	0xFDA
  1912                           fsr2l	equ	0xFD9
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _D_UART_Read *****************
  1916 ;; Defined at:
  1917 ;;		line 221 in file "Drivers/UART_Driver.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;		None
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  6   21[BANK0 ] struct .
  1924 ;; Registers used:
  1925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1931 ;;      Params:         0       6       0       0       0       0       0       0       0
  1932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1934 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1935 ;;Total ram usage:        6 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    6
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text6
  1946  001820                     __ptext6:
  1947                           	opt stack 0
  1948  001820                     _D_UART_Read:
  1949                           	opt stack 24
  1950                           
  1951                           ;UART_Driver.c: 222: readData.sender = readBuffer.sender;
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;incstack = 0
  1955  001820  0E0B               	movlw	low (_readBuffer+11)
  1956  001822  6E2E               	movwf	_readData,c
  1957  001824  0E01               	movlw	high (_readBuffer+11)
  1958  001826  6E2F               	movwf	_readData+1,c
  1959                           
  1960                           ;UART_Driver.c: 223: readData.command = readBuffer.command;
  1961  001828  0E3E               	movlw	low (_readBuffer+62)
  1962  00182A  6E30               	movwf	_readData+2,c
  1963  00182C  0E01               	movlw	high (_readBuffer+62)
  1964  00182E  6E31               	movwf	_readData+3,c
  1965                           
  1966                           ;UART_Driver.c: 224: readData.message = readBuffer.message;
  1967  001830  0E71               	movlw	low (_readBuffer+113)
  1968  001832  6E32               	movwf	_readData+4,c
  1969  001834  0E01               	movlw	high (_readBuffer+113)
  1970  001836  6E33               	movwf	_readData+5,c
  1971                           
  1972                           ;UART_Driver.c: 225: return readData;
  1973  001838  EE20  F02E         	lfsr	2,_readData
  1974  00183C  EE00  F0D9         	lfsr	0,?_D_UART_Read
  1975  001840  0E05               	movlw	5
  1976  001842                     u2291:
  1977  001842  CFDB FFEB          	movff	plusw2,plusw0
  1978  001846  06E8               	decf	wreg,f,c
  1979  001848  E2FC               	bc	u2291
  1980  00184A  0012               	return	
  1981  00184C                     __end_of_D_UART_Read:
  1982                           	opt stack 0
  1983                           tblptru	equ	0xFF8
  1984                           tblptrh	equ	0xFF7
  1985                           tblptrl	equ	0xFF6
  1986                           tablat	equ	0xFF5
  1987                           prodh	equ	0xFF4
  1988                           prodl	equ	0xFF3
  1989                           postinc0	equ	0xFEE
  1990                           plusw0	equ	0xFEB
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1l	equ	0xFE1
  1994                           indf2	equ	0xFDF
  1995                           postinc2	equ	0xFDE
  1996                           postdec2	equ	0xFDD
  1997                           plusw2	equ	0xFDB
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _D_UART_Init *****************
  2003 ;; Defined at:
  2004 ;;		line 167 in file "Drivers/UART_Driver.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  name            2   34[BANK0 ] PTR const unsigned char 
  2007 ;;		 -> STR_8(2), 
  2008 ;;  baud            2   36[BANK0 ] unsigned int 
  2009 ;;  interrupts      1   38[BANK0 ] unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2021 ;;      Params:         0       5       0       0       0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2024 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2025 ;;Total ram usage:        5 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    7
  2028 ;; This function calls:
  2029 ;;		_D_UART_Enable
  2030 ;;		___lldiv
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text7
  2037  001570                     __ptext7:
  2038                           	opt stack 0
  2039  001570                     _D_UART_Init:
  2040                           	opt stack 23
  2041                           
  2042                           ;UART_Driver.c: 169: deviceName = name;
  2043                           
  2044                           ;incstack = 0
  2045  001570  C0E6  F034         	movff	D_UART_Init@name,_deviceName
  2046  001574  C0E7  F035         	movff	D_UART_Init@name+1,_deviceName+1
  2047  001578  5034               	movf	_deviceName,w,c
  2048  00157A  1035               	iorwf	_deviceName+1,w,c
  2049  00157C  A4D8               	btfss	status,2,c
  2050  00157E  0E00               	movlw	low (__mediumconst shr (0+16))
  2051  001580  6E36               	movwf	_deviceName+2,c
  2052                           
  2053                           ;UART_Driver.c: 170: readReady = 0;
  2054  001582  0E00               	movlw	0
  2055  001584  6E40               	movwf	_readReady,c
  2056                           
  2057                           ;UART_Driver.c: 173: D_UART_Enable(0);
  2058  001586  0E00               	movlw	0
  2059  001588  EC3A  F00C         	call	_D_UART_Enable
  2060                           
  2061                           ;UART_Driver.c: 176: RCSTAbits.FERR = 0;
  2062  00158C  94AB               	bcf	4011,2,c	;volatile
  2063                           
  2064                           ;UART_Driver.c: 177: RCSTAbits.OERR = 0;
  2065  00158E  92AB               	bcf	4011,1,c	;volatile
  2066                           
  2067                           ;UART_Driver.c: 178: RCREG = 0x00;
  2068  001590  0E00               	movlw	0
  2069  001592  6EAE               	movwf	4014,c	;volatile
  2070                           
  2071                           ;UART_Driver.c: 181: TXSTAbits.TX9 = 0;
  2072  001594  9CAC               	bcf	4012,6,c	;volatile
  2073                           
  2074                           ;UART_Driver.c: 182: TXSTAbits.SYNC = 0;
  2075  001596  98AC               	bcf	4012,4,c	;volatile
  2076                           
  2077                           ;UART_Driver.c: 183: TXSTAbits.BRGH = 0;
  2078  001598  94AC               	bcf	4012,2,c	;volatile
  2079                           
  2080                           ;UART_Driver.c: 186: RCSTAbits.RX9 = 0;
  2081  00159A  9CAB               	bcf	4011,6,c	;volatile
  2082                           
  2083                           ;UART_Driver.c: 189: BAUDCONbits.RXDTP = 0;
  2084  00159C  9AB8               	bcf	4024,5,c	;volatile
  2085                           
  2086                           ;UART_Driver.c: 190: BAUDCONbits.TXCKP = 0;
  2087  00159E  98B8               	bcf	4024,4,c	;volatile
  2088                           
  2089                           ;UART_Driver.c: 191: BAUDCONbits.BRG16 = 0;
  2090  0015A0  96B8               	bcf	4024,3,c	;volatile
  2091                           
  2092                           ;UART_Driver.c: 194: SPBRG = ((16000000UL/baud)/64)-1;
  2093  0015A2  0E00               	movlw	0
  2094  0015A4  0100               	movlb	0	; () banked
  2095  0015A6  6FD9               	movwf	___lldiv@dividend& (0+255),b
  2096  0015A8  0E24               	movlw	36
  2097  0015AA  6FDA               	movwf	(___lldiv@dividend+1)& (0+255),b
  2098  0015AC  0EF4               	movlw	244
  2099  0015AE  6FDB               	movwf	(___lldiv@dividend+2)& (0+255),b
  2100  0015B0  0E00               	movlw	0
  2101  0015B2  6FDC               	movwf	(___lldiv@dividend+3)& (0+255),b
  2102  0015B4  C0E8  F0DD         	movff	D_UART_Init@baud,___lldiv@divisor
  2103  0015B8  C0E9  F0DE         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  2104  0015BC  6BDF               	clrf	(___lldiv@divisor+2)& (0+255),b
  2105  0015BE  6BE0               	clrf	(___lldiv@divisor+3)& (0+255),b
  2106  0015C0  EC76  F00A         	call	___lldiv	;wreg free
  2107  0015C4  0E07               	movlw	7
  2108  0015C6  D006               	goto	u2270
  2109  0015C8                     u2275:
  2110  0015C8  0100               	movlb	0	; () banked
  2111  0015CA  90D8               	bcf	status,0,c
  2112  0015CC  33DC               	rrcf	(?___lldiv+3)& (0+255),f,b
  2113  0015CE  33DB               	rrcf	(?___lldiv+2)& (0+255),f,b
  2114  0015D0  33DA               	rrcf	(?___lldiv+1)& (0+255),f,b
  2115  0015D2  33D9               	rrcf	?___lldiv& (0+255),f,b
  2116  0015D4                     u2270:
  2117  0015D4  2EE8               	decfsz	wreg,f,c
  2118  0015D6  D7F8               	goto	u2275
  2119  0015D8  05D9               	decf	?___lldiv& (0+255),w,b
  2120  0015DA  6EAF               	movwf	4015,c	;volatile
  2121                           
  2122                           ;UART_Driver.c: 197: if (interrupts) {
  2123  0015DC  51EA               	movf	D_UART_Init@interrupts& (0+255),w,b
  2124  0015DE  B4D8               	btfsc	status,2,c
  2125  0015E0  0012               	return	
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;UART_Driver.c: 198: RCONbits.IPEN = 1;
  2129  0015E2  8ED0               	bsf	4048,7,c	;volatile
  2130                           
  2131                           ;UART_Driver.c: 199: INTCONbits.GIEH = 1;
  2132  0015E4  8EF2               	bsf	intcon,7,c	;volatile
  2133                           
  2134                           ;UART_Driver.c: 200: INTCONbits.GIEL = 1;
  2135  0015E6  8CF2               	bsf	intcon,6,c	;volatile
  2136                           
  2137                           ;UART_Driver.c: 201: PIR1bits.RCIF = 0;
  2138  0015E8  9A9E               	bcf	3998,5,c	;volatile
  2139                           
  2140                           ;UART_Driver.c: 202: IPR1bits.RCIP = 1;
  2141  0015EA  8A9F               	bsf	3999,5,c	;volatile
  2142                           
  2143                           ;UART_Driver.c: 203: PIE1bits.RCIE = 1;
  2144  0015EC  8A9D               	bsf	3997,5,c	;volatile
  2145  0015EE  0012               	return	
  2146  0015F0                     __end_of_D_UART_Init:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           postinc0	equ	0xFEE
  2156                           plusw0	equ	0xFEB
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1l	equ	0xFE1
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           plusw2	equ	0xFDB
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function ___lldiv *****************
  2169 ;; Defined at:
  2170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  dividend        4   21[BANK0 ] unsigned long 
  2173 ;;  divisor         4   25[BANK0 ] unsigned long 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  quotient        4   29[BANK0 ] unsigned long 
  2176 ;;  counter         1   33[BANK0 ] unsigned char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  4   21[BANK0 ] unsigned long 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2186 ;;      Params:         0       8       0       0       0       0       0       0       0
  2187 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2189 ;;      Totals:         0      13       0       0       0       0       0       0       0
  2190 ;;Total ram usage:       13 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    6
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_D_UART_Init
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text8
  2201  0014EC                     __ptext8:
  2202                           	opt stack 0
  2203  0014EC                     ___lldiv:
  2204                           	opt stack 23
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;incstack = 0
  2208  0014EC  0E00               	movlw	0
  2209  0014EE  0100               	movlb	0	; () banked
  2210  0014F0  6FE1               	movwf	___lldiv@quotient& (0+255),b
  2211  0014F2  0E00               	movlw	0
  2212  0014F4  6FE2               	movwf	(___lldiv@quotient+1)& (0+255),b
  2213  0014F6  0E00               	movlw	0
  2214  0014F8  6FE3               	movwf	(___lldiv@quotient+2)& (0+255),b
  2215  0014FA  0E00               	movlw	0
  2216  0014FC  6FE4               	movwf	(___lldiv@quotient+3)& (0+255),b
  2217                           
  2218                           ; BSR set to: 0
  2219  0014FE  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2220  001500  11DE               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2221  001502  11DF               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2222  001504  11E0               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2223  001506  B4D8               	btfsc	status,2,c
  2224  001508  D02A               	goto	l745
  2225                           
  2226                           ; BSR set to: 0
  2227  00150A  0E01               	movlw	1
  2228  00150C  6FE5               	movwf	___lldiv@counter& (0+255),b
  2229  00150E  D006               	goto	l740
  2230  001510                     
  2231                           ; BSR set to: 0
  2232                           
  2233                           ; BSR set to: 0
  2234  001510  90D8               	bcf	status,0,c
  2235  001512  37DD               	rlcf	___lldiv@divisor& (0+255),f,b
  2236  001514  37DE               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2237  001516  37DF               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2238  001518  37E0               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2239  00151A  2BE5               	incf	___lldiv@counter& (0+255),f,b
  2240  00151C                     l740:
  2241                           
  2242                           ; BSR set to: 0
  2243                           
  2244                           ; BSR set to: 0
  2245  00151C  AFE0               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2246  00151E  D7F8               	goto	l741
  2247  001520                     u2060:
  2248                           
  2249                           ; BSR set to: 0
  2250                           
  2251                           ; BSR set to: 0
  2252                           
  2253                           ; BSR set to: 0
  2254  001520  90D8               	bcf	status,0,c
  2255  001522  37E1               	rlcf	___lldiv@quotient& (0+255),f,b
  2256  001524  37E2               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2257  001526  37E3               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2258  001528  37E4               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2259                           
  2260                           ; BSR set to: 0
  2261  00152A  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2262  00152C  5DD9               	subwf	___lldiv@dividend& (0+255),w,b
  2263  00152E  51DE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2264  001530  59DA               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2265  001532  51DF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2266  001534  59DB               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2267  001536  51E0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2268  001538  59DC               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2269  00153A  A0D8               	btfss	status,0,c
  2270  00153C  D009               	goto	l744
  2271                           
  2272                           ; BSR set to: 0
  2273  00153E  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2274  001540  5FD9               	subwf	___lldiv@dividend& (0+255),f,b
  2275  001542  51DE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2276  001544  5BDA               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2277  001546  51DF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2278  001548  5BDB               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2279  00154A  51E0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2280  00154C  5BDC               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2281                           
  2282                           ; BSR set to: 0
  2283  00154E  81E1               	bsf	___lldiv@quotient& (0+255),0,b
  2284  001550                     l744:
  2285                           
  2286                           ; BSR set to: 0
  2287                           
  2288                           ; BSR set to: 0
  2289  001550  90D8               	bcf	status,0,c
  2290  001552  33E0               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2291  001554  33DF               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2292  001556  33DE               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2293  001558  33DD               	rrcf	___lldiv@divisor& (0+255),f,b
  2294                           
  2295                           ; BSR set to: 0
  2296  00155A  2FE5               	decfsz	___lldiv@counter& (0+255),f,b
  2297  00155C  D7E1               	goto	u2060
  2298  00155E                     l745:
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ; BSR set to: 0
  2303  00155E  C0E1  F0D9         	movff	___lldiv@quotient,?___lldiv
  2304  001562  C0E2  F0DA         	movff	___lldiv@quotient+1,?___lldiv+1
  2305  001566  C0E3  F0DB         	movff	___lldiv@quotient+2,?___lldiv+2
  2306  00156A  C0E4  F0DC         	movff	___lldiv@quotient+3,?___lldiv+3
  2307                           
  2308                           ; BSR set to: 0
  2309  00156E  0012               	return		;funcret
  2310  001570                     __end_of___lldiv:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           intcon	equ	0xFF2
  2319                           postinc0	equ	0xFEE
  2320                           plusw0	equ	0xFEB
  2321                           wreg	equ	0xFE8
  2322                           postdec1	equ	0xFE5
  2323                           fsr1l	equ	0xFE1
  2324                           indf2	equ	0xFDF
  2325                           postinc2	equ	0xFDE
  2326                           postdec2	equ	0xFDD
  2327                           plusw2	equ	0xFDB
  2328                           fsr2h	equ	0xFDA
  2329                           fsr2l	equ	0xFD9
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function _D_UART_Enable *****************
  2333 ;; Defined at:
  2334 ;;		line 228 in file "Drivers/UART_Driver.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  enable          1    wreg     unsigned char 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  enable          1   21[BANK0 ] unsigned char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2348 ;;      Params:         0       0       0       0       0       0       0       0       0
  2349 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2351 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2352 ;;Total ram usage:        1 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    6
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_D_UART_Init
  2359 ;;		_main
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text9
  2364  001874                     __ptext9:
  2365                           	opt stack 0
  2366  001874                     _D_UART_Enable:
  2367                           	opt stack 23
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;incstack = 0
  2371                           ;D_UART_Enable@enable stored from wreg
  2372  001874  0100               	movlb	0	; () banked
  2373  001876  6FD9               	movwf	D_UART_Enable@enable& (0+255),b
  2374                           
  2375                           ;UART_Driver.c: 229: if(enable) {
  2376  001878  0100               	movlb	0	; () banked
  2377  00187A  51D9               	movf	D_UART_Enable@enable& (0+255),w,b
  2378  00187C  B4D8               	btfsc	status,2,c
  2379  00187E  D006               	goto	l163
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;UART_Driver.c: 230: TRISCbits.TRISC7 = 0;
  2383  001880  9E94               	bcf	3988,7,c	;volatile
  2384                           
  2385                           ;UART_Driver.c: 231: TRISCbits.TRISC6 = 1;
  2386  001882  8C94               	bsf	3988,6,c	;volatile
  2387                           
  2388                           ;UART_Driver.c: 232: TXSTAbits.TXEN = 1;
  2389  001884  8AAC               	bsf	4012,5,c	;volatile
  2390                           
  2391                           ;UART_Driver.c: 233: RCSTAbits.CREN = 1;
  2392  001886  88AB               	bsf	4011,4,c	;volatile
  2393                           
  2394                           ;UART_Driver.c: 234: RCSTAbits.SPEN = 1;
  2395  001888  8EAB               	bsf	4011,7,c	;volatile
  2396                           
  2397                           ;UART_Driver.c: 235: } else {
  2398  00188A  0012               	return	
  2399  00188C                     l163:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;UART_Driver.c: 236: TRISCbits.TRISC7 = 0;
  2403  00188C  9E94               	bcf	3988,7,c	;volatile
  2404                           
  2405                           ;UART_Driver.c: 237: TRISCbits.TRISC6 = 0;
  2406  00188E  9C94               	bcf	3988,6,c	;volatile
  2407                           
  2408                           ;UART_Driver.c: 238: TXSTAbits.TXEN = 0;
  2409  001890  9AAC               	bcf	4012,5,c	;volatile
  2410                           
  2411                           ;UART_Driver.c: 239: RCSTAbits.CREN = 0;
  2412  001892  98AB               	bcf	4011,4,c	;volatile
  2413                           
  2414                           ;UART_Driver.c: 240: RCSTAbits.SPEN = 0;
  2415  001894  9EAB               	bcf	4011,7,c	;volatile
  2416  001896  0012               	return	
  2417  001898                     __end_of_D_UART_Enable:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           intcon	equ	0xFF2
  2426                           postinc0	equ	0xFEE
  2427                           plusw0	equ	0xFEB
  2428                           wreg	equ	0xFE8
  2429                           postdec1	equ	0xFE5
  2430                           fsr1l	equ	0xFE1
  2431                           indf2	equ	0xFDF
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           plusw2	equ	0xFDB
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _D_TMR1_Init *****************
  2440 ;; Defined at:
  2441 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2458 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2459 ;;Total ram usage:        0 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    7
  2462 ;; This function calls:
  2463 ;;		_D_TMR1_Enable
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text10
  2470  001900                     __ptext10:
  2471                           	opt stack 0
  2472  001900                     _D_TMR1_Init:
  2473                           	opt stack 23
  2474                           
  2475                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;incstack = 0
  2479  001900  0E00               	movlw	0
  2480  001902  ECAE  F00C         	call	_D_TMR1_Enable
  2481                           
  2482                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  2483  001906  8ECD               	bsf	4045,7,c	;volatile
  2484                           
  2485                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  2486  001908  9CCD               	bcf	4045,6,c	;volatile
  2487                           
  2488                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  2489  00190A  0ECF               	movlw	-49
  2490  00190C  16CD               	andwf	4045,f,c	;volatile
  2491                           
  2492                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  2493  00190E  96CD               	bcf	4045,3,c	;volatile
  2494                           
  2495                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  2496  001910  92CD               	bcf	4045,1,c	;volatile
  2497                           
  2498                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  2499  001912  8ED0               	bsf	4048,7,c	;volatile
  2500                           
  2501                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  2502  001914  8EF2               	bsf	intcon,7,c	;volatile
  2503                           
  2504                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  2505  001916  8CF2               	bsf	intcon,6,c	;volatile
  2506                           
  2507                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  2508  001918  909E               	bcf	3998,0,c	;volatile
  2509                           
  2510                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  2511  00191A  909F               	bcf	3999,0,c	;volatile
  2512                           
  2513                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  2514  00191C  809D               	bsf	3997,0,c	;volatile
  2515  00191E  0012               	return		;funcret
  2516  001920                     __end_of_D_TMR1_Init:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           postinc0	equ	0xFEE
  2526                           plusw0	equ	0xFEB
  2527                           wreg	equ	0xFE8
  2528                           postdec1	equ	0xFE5
  2529                           fsr1l	equ	0xFE1
  2530                           indf2	equ	0xFDF
  2531                           postinc2	equ	0xFDE
  2532                           postdec2	equ	0xFDD
  2533                           plusw2	equ	0xFDB
  2534                           fsr2h	equ	0xFDA
  2535                           fsr2l	equ	0xFD9
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _D_TMR1_Enable *****************
  2539 ;; Defined at:
  2540 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  enable          1    wreg     unsigned char 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  enable          1   21[BANK0 ] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0
  2555 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2557 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2558 ;;Total ram usage:        1 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    6
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_D_TMR1_Init
  2565 ;;		_main
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text11
  2570  00195C                     __ptext11:
  2571                           	opt stack 0
  2572  00195C                     _D_TMR1_Enable:
  2573                           	opt stack 23
  2574                           
  2575                           ;incstack = 0
  2576                           ;D_TMR1_Enable@enable stored from wreg
  2577  00195C  0100               	movlb	0	; () banked
  2578  00195E  6FD9               	movwf	D_TMR1_Enable@enable& (0+255),b
  2579                           
  2580                           ;TMR1_Driver.c: 53: if (enable) {
  2581  001960  0100               	movlb	0	; () banked
  2582  001962  51D9               	movf	D_TMR1_Enable@enable& (0+255),w,b
  2583  001964  B4D8               	btfsc	status,2,c
  2584  001966  D002               	goto	l238
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  2588  001968  80CD               	bsf	4045,0,c	;volatile
  2589                           
  2590                           ;TMR1_Driver.c: 55: } else {
  2591  00196A  0012               	return	
  2592  00196C                     l238:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  2596  00196C  90CD               	bcf	4045,0,c	;volatile
  2597  00196E  0012               	return	
  2598  001970                     __end_of_D_TMR1_Enable:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           postinc0	equ	0xFEE
  2608                           plusw0	equ	0xFEB
  2609                           wreg	equ	0xFE8
  2610                           postdec1	equ	0xFE5
  2611                           fsr1l	equ	0xFE1
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           postdec2	equ	0xFDD
  2615                           plusw2	equ	0xFDB
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _D_TMR0_Init *****************
  2621 ;; Defined at:
  2622 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2636 ;;      Params:         0       0       0       0       0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2639 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2640 ;;Total ram usage:        0 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    7
  2643 ;; This function calls:
  2644 ;;		_D_TMR0_Enable
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text12
  2651  001898                     __ptext12:
  2652                           	opt stack 0
  2653  001898                     _D_TMR0_Init:
  2654                           	opt stack 23
  2655                           
  2656                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;incstack = 0
  2660  001898  0E00               	movlw	0
  2661  00189A  ECB8  F00C         	call	_D_TMR0_Enable
  2662                           
  2663                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2664  00189E  9CD5               	bcf	4053,6,c	;volatile
  2665                           
  2666                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2667  0018A0  9AD5               	bcf	4053,5,c	;volatile
  2668                           
  2669                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2670  0018A2  98D5               	bcf	4053,4,c	;volatile
  2671                           
  2672                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2673  0018A4  96D5               	bcf	4053,3,c	;volatile
  2674                           
  2675                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2676  0018A6  50D5               	movf	4053,w,c	;volatile
  2677  0018A8  0BF8               	andlw	-8
  2678  0018AA  0902               	iorlw	2
  2679  0018AC  6ED5               	movwf	4053,c	;volatile
  2680                           
  2681                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2682  0018AE  8ED0               	bsf	4048,7,c	;volatile
  2683                           
  2684                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2685  0018B0  8EF2               	bsf	intcon,7,c	;volatile
  2686                           
  2687                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2688  0018B2  8CF2               	bsf	intcon,6,c	;volatile
  2689                           
  2690                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2691  0018B4  94F2               	bcf	intcon,2,c	;volatile
  2692                           
  2693                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  2694  0018B6  94F1               	bcf	intcon2,2,c	;volatile
  2695                           
  2696                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2697  0018B8  8AF2               	bsf	intcon,5,c	;volatile
  2698  0018BA  0012               	return		;funcret
  2699  0018BC                     __end_of_D_TMR0_Init:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           intcon	equ	0xFF2
  2708                           intcon2	equ	0xFF1
  2709                           postinc0	equ	0xFEE
  2710                           plusw0	equ	0xFEB
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           plusw2	equ	0xFDB
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _D_TMR0_Enable *****************
  2723 ;; Defined at:
  2724 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  enable          1    wreg     unsigned char 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  enable          1   21[BANK0 ] unsigned char 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0
  2739 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2741 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2742 ;;Total ram usage:        1 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    6
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_D_TMR0_Init
  2749 ;;		_initDoors
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text13
  2754  001970                     __ptext13:
  2755                           	opt stack 0
  2756  001970                     _D_TMR0_Enable:
  2757                           	opt stack 23
  2758                           
  2759                           ;incstack = 0
  2760                           ;D_TMR0_Enable@enable stored from wreg
  2761  001970  0100               	movlb	0	; () banked
  2762  001972  6FD9               	movwf	D_TMR0_Enable@enable& (0+255),b
  2763                           
  2764                           ;TMR0_Driver.c: 54: if (enable) {
  2765  001974  0100               	movlb	0	; () banked
  2766  001976  51D9               	movf	D_TMR0_Enable@enable& (0+255),w,b
  2767  001978  B4D8               	btfsc	status,2,c
  2768  00197A  D002               	goto	l197
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  2772  00197C  8ED5               	bsf	4053,7,c	;volatile
  2773                           
  2774                           ;TMR0_Driver.c: 56: } else {
  2775  00197E  0012               	return	
  2776  001980                     l197:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  2780  001980  9ED5               	bcf	4053,7,c	;volatile
  2781  001982  0012               	return	
  2782  001984                     __end_of_D_TMR0_Enable:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           intcon	equ	0xFF2
  2791                           intcon2	equ	0xFF1
  2792                           postinc0	equ	0xFEE
  2793                           plusw0	equ	0xFEB
  2794                           wreg	equ	0xFE8
  2795                           postdec1	equ	0xFE5
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           plusw2	equ	0xFDB
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _D_PWM_SetPwm *****************
  2806 ;; Defined at:
  2807 ;;		line 44 in file "Drivers/PWM_Driver.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  pwm             1    wreg     unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  pwm             1   21[BANK0 ] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         0       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        1 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    6
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text14
  2836  0017F2                     __ptext14:
  2837                           	opt stack 0
  2838  0017F2                     _D_PWM_SetPwm:
  2839                           	opt stack 24
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;incstack = 0
  2843                           ;D_PWM_SetPwm@pwm stored from wreg
  2844  0017F2  0100               	movlb	0	; () banked
  2845  0017F4  6FD9               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2846                           
  2847                           ;PWM_Driver.c: 45: if (pwm > 0) {
  2848  0017F6  0100               	movlb	0	; () banked
  2849  0017F8  51D9               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2850  0017FA  B4D8               	btfsc	status,2,c
  2851  0017FC  D00A               	goto	l215
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  2855  0017FE  B4CA               	btfsc	4042,2,c	;volatile
  2856  001800  D005               	goto	l216
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  2860  001802  50BD               	movf	4029,w,c	;volatile
  2861  001804  0BF0               	andlw	-16
  2862  001806  090C               	iorlw	12
  2863  001808  6EBD               	movwf	4029,c	;volatile
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  2867  00180A  84CA               	bsf	4042,2,c	;volatile
  2868  00180C                     l216:
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;PWM_Driver.c: 49: }
  2872                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  2873                           
  2874                           ; BSR set to: 0
  2875  00180C  C0D9  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2876                           
  2877                           ;PWM_Driver.c: 51: } else {
  2878  001810  0012               	return	
  2879  001812                     l215:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  2883  001812  90BD               	bcf	4029,0,c	;volatile
  2884  001814  92BD               	bcf	4029,1,c	;volatile
  2885  001816  94BD               	bcf	4029,2,c	;volatile
  2886  001818  96BD               	bcf	4029,3,c	;volatile
  2887                           
  2888                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  2889  00181A  94CA               	bcf	4042,2,c	;volatile
  2890                           
  2891                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  2892  00181C  9482               	bcf	3970,2,c	;volatile
  2893  00181E  0012               	return	
  2894  001820                     __end_of_D_PWM_SetPwm:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           prodh	equ	0xFF4
  2901                           prodl	equ	0xFF3
  2902                           intcon	equ	0xFF2
  2903                           intcon2	equ	0xFF1
  2904                           postinc0	equ	0xFEE
  2905                           plusw0	equ	0xFEB
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           postdec2	equ	0xFDD
  2912                           plusw2	equ	0xFDB
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _D_PWM_Init *****************
  2918 ;; Defined at:
  2919 ;;		line 31 in file "Drivers/PWM_Driver.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2933 ;;      Params:         0       0       0       0       0       0       0       0       0
  2934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2936 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    6
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text15
  2948  001920                     __ptext15:
  2949                           	opt stack 0
  2950  001920                     _D_PWM_Init:
  2951                           	opt stack 24
  2952                           
  2953                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;incstack = 0
  2957  001920  68CB               	setf	4043,c	;volatile
  2958                           
  2959                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  2960  001922  94CA               	bcf	4042,2,c	;volatile
  2961                           
  2962                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  2963  001924  50CA               	movf	4042,w,c	;volatile
  2964  001926  0BFC               	andlw	-4
  2965  001928  0901               	iorlw	1
  2966  00192A  6ECA               	movwf	4042,c	;volatile
  2967                           
  2968                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  2969  00192C  96CA               	bcf	4042,3,c	;volatile
  2970  00192E  98CA               	bcf	4042,4,c	;volatile
  2971  001930  9ACA               	bcf	4042,5,c	;volatile
  2972  001932  9CCA               	bcf	4042,6,c	;volatile
  2973                           
  2974                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  2975  001934  0E1F               	movlw	31
  2976  001936  6EBE               	movwf	4030,c	;volatile
  2977                           
  2978                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  2979  001938  0ECF               	movlw	-49
  2980  00193A  16BD               	andwf	4029,f,c	;volatile
  2981  00193C  0012               	return		;funcret
  2982  00193E                     __end_of_D_PWM_Init:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           prodh	equ	0xFF4
  2989                           prodl	equ	0xFF3
  2990                           intcon	equ	0xFF2
  2991                           intcon2	equ	0xFF1
  2992                           postinc0	equ	0xFEE
  2993                           plusw0	equ	0xFEB
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           plusw2	equ	0xFDB
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function _D_PORT_Init *****************
  3006 ;; Defined at:
  3007 ;;		line 32 in file "Drivers/PORT_Driver.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;		None
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;		None
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      void 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3021 ;;      Params:         0       0       0       0       0       0       0       0       0
  3022 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3024 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3025 ;;Total ram usage:        0 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    6
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_main
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text16
  3036  00193E                     __ptext16:
  3037                           	opt stack 0
  3038  00193E                     _D_PORT_Init:
  3039                           	opt stack 24
  3040                           
  3041                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  3042                           
  3043                           ;incstack = 0
  3044  00193E  0E00               	movlw	0
  3045  001940  6E92               	movwf	3986,c	;volatile
  3046  001942  0E00               	movlw	0
  3047  001944  6E80               	movwf	3968,c	;volatile
  3048                           
  3049                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  3050  001946  0E00               	movlw	0
  3051  001948  6E93               	movwf	3987,c	;volatile
  3052  00194A  0E00               	movlw	0
  3053  00194C  6E81               	movwf	3969,c	;volatile
  3054                           
  3055                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  3056  00194E  0E00               	movlw	0
  3057  001950  6E94               	movwf	3988,c	;volatile
  3058  001952  0E00               	movlw	0
  3059  001954  6E82               	movwf	3970,c	;volatile
  3060                           
  3061                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  3062  001956  0E0F               	movlw	15
  3063  001958  6EC1               	movwf	4033,c	;volatile
  3064  00195A  0012               	return		;funcret
  3065  00195C                     __end_of_D_PORT_Init:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           intcon2	equ	0xFF1
  3075                           postinc0	equ	0xFEE
  3076                           plusw0	equ	0xFEB
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           plusw2	equ	0xFDB
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _C_DOOR_UnlockAll *****************
  3089 ;; Defined at:
  3090 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  d               1   29[BANK0 ] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3104 ;;      Params:         0       0       0       0       0       0       0       0       0
  3105 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3106 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3107 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3108 ;;Total ram usage:        9 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    6
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text17
  3119  0012E6                     __ptext17:
  3120                           	opt stack 0
  3121  0012E6                     _C_DOOR_UnlockAll:
  3122                           	opt stack 24
  3123                           
  3124                           ;DOOR_Controller.c: 96: uint8_t d;
  3125                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  3126                           
  3127                           ;incstack = 0
  3128  0012E6  0E00               	movlw	0
  3129  0012E8  0100               	movlb	0	; () banked
  3130  0012EA  6FE1               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  3131  0012EC  D048               	goto	l36
  3132  0012EE                     
  3133                           ; BSR set to: 0
  3134                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  3135                           
  3136                           ; BSR set to: 0
  3137  0012EE  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3138  0012F0  0D0A               	mullw	10
  3139  0012F2  0E02               	movlw	2
  3140  0012F4  26F3               	addwf	prodl,f,c
  3141  0012F6  0E00               	movlw	0
  3142  0012F8  22F4               	addwfc	prodh,f,c
  3143  0012FA  0E60               	movlw	low _doors
  3144  0012FC  24F3               	addwf	prodl,w,c
  3145  0012FE  6ED9               	movwf	fsr2l,c
  3146  001300  0E00               	movlw	high _doors
  3147  001302  20F4               	addwfc	prodh,w,c
  3148  001304  6EDA               	movwf	fsr2h,c
  3149  001306  CFDE F0D9          	movff	postinc2,??_C_DOOR_UnlockAll
  3150  00130A  CFDD F0DA          	movff	postdec2,??_C_DOOR_UnlockAll+1
  3151  00130E  C0D9  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  3152  001312  C0DA  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  3153  001316  50DF               	movf	indf2,w,c
  3154  001318  0AFF               	xorlw	255
  3155  00131A  6FDB               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3156  00131C  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3157  00131E  0D0A               	mullw	10
  3158  001320  0E04               	movlw	4
  3159  001322  26F3               	addwf	prodl,f,c
  3160  001324  0E00               	movlw	0
  3161  001326  22F4               	addwfc	prodh,f,c
  3162  001328  0E60               	movlw	low _doors
  3163  00132A  24F3               	addwf	prodl,w,c
  3164  00132C  6ED9               	movwf	fsr2l,c
  3165  00132E  0E00               	movlw	high _doors
  3166  001330  20F4               	addwfc	prodh,w,c
  3167  001332  6EDA               	movwf	fsr2h,c
  3168  001334  50DF               	movf	indf2,w,c
  3169  001336  6FDC               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  3170  001338  0E01               	movlw	1
  3171  00133A  6FDD               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  3172  00133C  2BDC               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3173  00133E  D002               	goto	u2084
  3174  001340                     u2085:
  3175  001340  90D8               	bcf	status,0,c
  3176  001342  37DD               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  3177  001344                     u2084:
  3178  001344  2FDC               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3179  001346  D7FC               	goto	u2085
  3180  001348  0100               	movlb	0	; () banked
  3181  00134A  51DD               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  3182  00134C  15DB               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3183  00134E  6FDE               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  3184  001350  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3185  001352  0D0A               	mullw	10
  3186  001354  0E02               	movlw	2
  3187  001356  26F3               	addwf	prodl,f,c
  3188  001358  0E00               	movlw	0
  3189  00135A  22F4               	addwfc	prodh,f,c
  3190  00135C  0E60               	movlw	low _doors
  3191  00135E  24F3               	addwf	prodl,w,c
  3192  001360  6ED9               	movwf	fsr2l,c
  3193  001362  0E00               	movlw	high _doors
  3194  001364  20F4               	addwfc	prodh,w,c
  3195  001366  6EDA               	movwf	fsr2h,c
  3196  001368  CFDE F0DF          	movff	postinc2,??_C_DOOR_UnlockAll+6
  3197  00136C  CFDD F0E0          	movff	postdec2,??_C_DOOR_UnlockAll+7
  3198  001370  C0DF  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  3199  001374  C0E0  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  3200  001378  51DE               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  3201  00137A  1ADF               	xorwf	indf2,f,c
  3202                           
  3203                           ; BSR set to: 0
  3204  00137C  2BE1               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  3205  00137E                     l36:
  3206                           
  3207                           ; BSR set to: 0
  3208                           
  3209                           ; BSR set to: 0
  3210  00137E  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3211  001380  6FD9               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  3212  001382  6BDA               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  3213  001384  5037               	movf	_door_cnt,w,c
  3214  001386  5DD9               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  3215  001388  51DA               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  3216  00138A  0A80               	xorlw	128
  3217  00138C  6FDB               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3218  00138E  5038               	movf	_door_cnt+1,w,c
  3219  001390  0A80               	xorlw	128
  3220  001392  59DB               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3221  001394  B0D8               	btfsc	status,0,c
  3222  001396  0012               	return	
  3223  001398  D7AA               	goto	l37
  3224  00139A                     __end_of_C_DOOR_UnlockAll:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon2	equ	0xFF1
  3234                           postinc0	equ	0xFEE
  3235                           plusw0	equ	0xFEB
  3236                           wreg	equ	0xFE8
  3237                           postdec1	equ	0xFE5
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _C_DOOR_SendStates *****************
  3248 ;; Defined at:
  3249 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  com             3    8[BANK1 ] unsigned char [3]
  3254 ;;  mes             2   11[BANK1 ] unsigned char [2]
  3255 ;;  d               1   13[BANK1 ] unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0
  3266 ;;      Locals:         0       0       6       0       0       0       0       0       0
  3267 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3268 ;;      Totals:         0       0       9       0       0       0       0       0       0
  3269 ;;Total ram usage:        9 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    9
  3272 ;; This function calls:
  3273 ;;		_D_UART_Write
  3274 ;;		_commandAndMessage
  3275 ;; This function is called by:
  3276 ;;		_main
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text18
  3281  001058                     __ptext18:
  3282                           	opt stack 0
  3283  001058                     _C_DOOR_SendStates:
  3284                           	opt stack 21
  3285                           
  3286                           ;DOOR_Controller.c: 110: uint8_t d;
  3287                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;incstack = 0
  3291  001058  0E00               	movlw	0
  3292  00105A  0101               	movlb	1	; () banked
  3293  00105C  6FB3               	movwf	C_DOOR_SendStates@d& (0+255),b
  3294  00105E  D066               	goto	l48
  3295  001060                     
  3296                           ; BSR set to: 1
  3297                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  3298                           
  3299                           ; BSR set to: 1
  3300  001060  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3301  001062  0D0A               	mullw	10
  3302  001064  0E06               	movlw	6
  3303  001066  26F3               	addwf	prodl,f,c
  3304  001068  0E00               	movlw	0
  3305  00106A  22F4               	addwfc	prodh,f,c
  3306  00106C  0E60               	movlw	low _doors
  3307  00106E  24F3               	addwf	prodl,w,c
  3308  001070  6ED9               	movwf	fsr2l,c
  3309  001072  0E00               	movlw	high _doors
  3310  001074  20F4               	addwfc	prodh,w,c
  3311  001076  6EDA               	movwf	fsr2h,c
  3312  001078  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3313  00107A  0D0A               	mullw	10
  3314  00107C  0E05               	movlw	5
  3315  00107E  26F3               	addwf	prodl,f,c
  3316  001080  0E00               	movlw	0
  3317  001082  22F4               	addwfc	prodh,f,c
  3318  001084  0E60               	movlw	low _doors
  3319  001086  24F3               	addwf	prodl,w,c
  3320  001088  6EE1               	movwf	fsr1l,c
  3321  00108A  0E00               	movlw	high _doors
  3322  00108C  20F4               	addwfc	prodh,w,c
  3323  00108E  6EE2               	movwf	fsr1h,c
  3324  001090  50DE               	movf	postinc2,w,c
  3325  001092  18E6               	xorwf	postinc1,w,c
  3326  001094  B4D8               	btfsc	status,2,c
  3327  001096  D049               	goto	l50
  3328                           
  3329                           ; BSR set to: 1
  3330                           ;DOOR_Controller.c: 114: char com[3];
  3331                           ;DOOR_Controller.c: 115: char mes[2];
  3332                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  3333  001098  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3334  00109A  0D0A               	mullw	10
  3335  00109C  0E60               	movlw	low _doors
  3336  00109E  24F3               	addwf	prodl,w,c
  3337  0010A0  6ED9               	movwf	fsr2l,c
  3338  0010A2  0E00               	movlw	high _doors
  3339  0010A4  20F4               	addwfc	prodh,w,c
  3340  0010A6  6EDA               	movwf	fsr2h,c
  3341  0010A8  EE00  F0D9         	lfsr	0,commandAndMessage@door
  3342  0010AC  0E09               	movlw	9
  3343  0010AE                     u2151:
  3344  0010AE  CFDB FFEB          	movff	plusw2,plusw0
  3345  0010B2  06E8               	decf	wreg,f,c
  3346  0010B4  E2FC               	bc	u2151
  3347  0010B6  0EAE               	movlw	low C_DOOR_SendStates@com
  3348  0010B8  0100               	movlb	0	; () banked
  3349  0010BA  6FE3               	movwf	commandAndMessage@com& (0+255),b
  3350  0010BC  0E01               	movlw	high C_DOOR_SendStates@com
  3351  0010BE  6FE4               	movwf	(commandAndMessage@com+1)& (0+255),b
  3352  0010C0  0EB1               	movlw	low C_DOOR_SendStates@mes
  3353  0010C2  6FE5               	movwf	commandAndMessage@mes& (0+255),b
  3354  0010C4  0E01               	movlw	high C_DOOR_SendStates@mes
  3355  0010C6  6FE6               	movwf	(commandAndMessage@mes+1)& (0+255),b
  3356  0010C8  ECF8  F00A         	call	_commandAndMessage	;wreg free
  3357                           
  3358                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  3359  0010CC  0EAE               	movlw	low C_DOOR_SendStates@com
  3360  0010CE  0101               	movlb	1	; () banked
  3361  0010D0  6FA6               	movwf	D_UART_Write@command& (0+255),b
  3362  0010D2  0E01               	movlw	high C_DOOR_SendStates@com
  3363  0010D4  6FA7               	movwf	(D_UART_Write@command+1)& (0+255),b
  3364  0010D6  0EB1               	movlw	low C_DOOR_SendStates@mes
  3365  0010D8  6FA8               	movwf	D_UART_Write@data& (0+255),b
  3366  0010DA  0E01               	movlw	high C_DOOR_SendStates@mes
  3367  0010DC  6FA9               	movwf	(D_UART_Write@data+1)& (0+255),b
  3368  0010DE  ECA4  F008         	call	_D_UART_Write	;wreg free
  3369                           
  3370                           ;DOOR_Controller.c: 120: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3371  0010E2  0E06               	movlw	6
  3372  0010E4  0101               	movlb	1	; () banked
  3373  0010E6  6FAB               	movwf	??_C_DOOR_SendStates& (0+255),b
  3374  0010E8  0E30               	movlw	48
  3375  0010EA                     u2617:
  3376  0010EA  2EE8               	decfsz	wreg,f,c
  3377  0010EC  D7FE               	bra	u2617
  3378  0010EE  2FAB               	decfsz	??_C_DOOR_SendStates& (0+255),f,b
  3379  0010F0  D7FC               	bra	u2617
  3380  0010F2  F000               	nop	
  3381                           
  3382                           ;DOOR_Controller.c: 122: doors[d].was_open = doors[d].is_open;
  3383  0010F4  0101               	movlb	1	; () banked
  3384  0010F6  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3385  0010F8  0D0A               	mullw	10
  3386  0010FA  0E06               	movlw	6
  3387  0010FC  26F3               	addwf	prodl,f,c
  3388  0010FE  0E00               	movlw	0
  3389  001100  22F4               	addwfc	prodh,f,c
  3390  001102  0E60               	movlw	low _doors
  3391  001104  24F3               	addwf	prodl,w,c
  3392  001106  6ED9               	movwf	fsr2l,c
  3393  001108  0E00               	movlw	high _doors
  3394  00110A  20F4               	addwfc	prodh,w,c
  3395  00110C  6EDA               	movwf	fsr2h,c
  3396  00110E  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3397  001110  0D0A               	mullw	10
  3398  001112  0E05               	movlw	5
  3399  001114  26F3               	addwf	prodl,f,c
  3400  001116  0E00               	movlw	0
  3401  001118  22F4               	addwfc	prodh,f,c
  3402  00111A  0E60               	movlw	low _doors
  3403  00111C  24F3               	addwf	prodl,w,c
  3404  00111E  6EE1               	movwf	fsr1l,c
  3405  001120  0E00               	movlw	high _doors
  3406  001122  20F4               	addwfc	prodh,w,c
  3407  001124  6EE2               	movwf	fsr1h,c
  3408  001126  CFDF FFE7          	movff	indf2,indf1
  3409  00112A                     l50:
  3410                           
  3411                           ; BSR set to: 1
  3412                           
  3413                           ; BSR set to: 1
  3414  00112A  2BB3               	incf	C_DOOR_SendStates@d& (0+255),f,b
  3415  00112C                     l48:
  3416                           
  3417                           ; BSR set to: 1
  3418                           
  3419                           ; BSR set to: 1
  3420  00112C  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3421  00112E  6FAB               	movwf	??_C_DOOR_SendStates& (0+255),b
  3422  001130  6BAC               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  3423  001132  5037               	movf	_door_cnt,w,c
  3424  001134  5DAB               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  3425  001136  51AC               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  3426  001138  0A80               	xorlw	128
  3427  00113A  6FAD               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  3428  00113C  5038               	movf	_door_cnt+1,w,c
  3429  00113E  0A80               	xorlw	128
  3430  001140  59AD               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  3431  001142  B0D8               	btfsc	status,0,c
  3432  001144  0012               	return	
  3433  001146  D78C               	goto	l49
  3434  001148                     __end_of_C_DOOR_SendStates:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           intcon	equ	0xFF2
  3443                           intcon2	equ	0xFF1
  3444                           postinc0	equ	0xFEE
  3445                           plusw0	equ	0xFEB
  3446                           wreg	equ	0xFE8
  3447                           indf1	equ	0xFE7
  3448                           postinc1	equ	0xFE6
  3449                           postdec1	equ	0xFE5
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           plusw2	equ	0xFDB
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _commandAndMessage *****************
  3461 ;; Defined at:
  3462 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  door           10   21[BANK0 ] struct .
  3465 ;;  com             2   31[BANK0 ] PTR unsigned char 
  3466 ;;		 -> C_DOOR_SendStates@com(3), 
  3467 ;;  mes             2   33[BANK0 ] PTR unsigned char 
  3468 ;;		 -> C_DOOR_SendStates@mes(2), 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3480 ;;      Params:         0      14       0       0       0       0       0       0       0
  3481 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3483 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3484 ;;Total ram usage:       14 bytes
  3485 ;; Hardware stack levels used:    1
  3486 ;; Hardware stack levels required when called:    6
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_C_DOOR_SendStates
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text19
  3495  0015F0                     __ptext19:
  3496                           	opt stack 0
  3497  0015F0                     _commandAndMessage:
  3498                           	opt stack 23
  3499                           
  3500                           ;DOOR_Controller.c: 33: com[0] = 'D';
  3501                           
  3502                           ; BSR set to: 1
  3503                           ;incstack = 0
  3504  0015F0  C0E3  FFD9         	movff	commandAndMessage@com,fsr2l
  3505  0015F4  C0E4  FFDA         	movff	commandAndMessage@com+1,fsr2h
  3506  0015F8  0E44               	movlw	68
  3507  0015FA  6EDF               	movwf	indf2,c
  3508                           
  3509                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  3510  0015FC  0100               	movlb	0	; () banked
  3511  0015FE  EE20 F001          	lfsr	2,1
  3512  001602  51E3               	movf	commandAndMessage@com& (0+255),w,b
  3513  001604  26D9               	addwf	fsr2l,f,c
  3514  001606  51E4               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3515  001608  22DA               	addwfc	fsr2h,f,c
  3516  00160A  51D9               	movf	commandAndMessage@door& (0+255),w,b
  3517  00160C  0F30               	addlw	48
  3518  00160E  6EDF               	movwf	indf2,c
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;DOOR_Controller.c: 35: com[2] = '\0';
  3522  001610  EE20 F002          	lfsr	2,2
  3523  001614  51E3               	movf	commandAndMessage@com& (0+255),w,b
  3524  001616  26D9               	addwf	fsr2l,f,c
  3525  001618  51E4               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3526  00161A  22DA               	addwfc	fsr2h,f,c
  3527  00161C  0E00               	movlw	0
  3528  00161E  6EDF               	movwf	indf2,c
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;DOOR_Controller.c: 38: if (door.is_open) {
  3532  001620  51DF               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3533  001622  B4D8               	btfsc	status,2,c
  3534  001624  D006               	goto	l19
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  3538  001626  C0E5  FFD9         	movff	commandAndMessage@mes,fsr2l
  3539  00162A  C0E6  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3540  00162E  0E43               	movlw	67
  3541  001630  D005               	goto	L2
  3542  001632                     l19:
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  3546                           
  3547                           ; BSR set to: 0
  3548  001632  C0E5  FFD9         	movff	commandAndMessage@mes,fsr2l
  3549  001636  C0E6  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3550  00163A  0E4F               	movlw	79
  3551  00163C                     L2:
  3552  00163C  6EDF               	movwf	indf2,c
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;DOOR_Controller.c: 42: }
  3556                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  3557                           
  3558                           ; BSR set to: 0
  3559  00163E  EE20 F001          	lfsr	2,1
  3560  001642  51E5               	movf	commandAndMessage@mes& (0+255),w,b
  3561  001644  26D9               	addwf	fsr2l,f,c
  3562  001646  51E6               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3563  001648  22DA               	addwfc	fsr2h,f,c
  3564  00164A  0E00               	movlw	0
  3565  00164C  6EDF               	movwf	indf2,c
  3566                           
  3567                           ; BSR set to: 0
  3568  00164E  0012               	return		;funcret
  3569  001650                     __end_of_commandAndMessage:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon2	equ	0xFF1
  3579                           postinc0	equ	0xFEE
  3580                           plusw0	equ	0xFEB
  3581                           wreg	equ	0xFE8
  3582                           indf1	equ	0xFE7
  3583                           postinc1	equ	0xFE6
  3584                           postdec1	equ	0xFE5
  3585                           fsr1h	equ	0xFE2
  3586                           fsr1l	equ	0xFE1
  3587                           indf2	equ	0xFDF
  3588                           postinc2	equ	0xFDE
  3589                           postdec2	equ	0xFDD
  3590                           plusw2	equ	0xFDB
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _D_UART_Write *****************
  3596 ;; Defined at:
  3597 ;;		line 207 in file "Drivers/UART_Driver.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  command         2    0[BANK1 ] PTR const unsigned char 
  3600 ;;		 -> STR_15(2), C_DOOR_SendStates@com(3), 
  3601 ;;  data            2    2[BANK1 ] PTR const unsigned char 
  3602 ;;		 -> STR_16(2), C_DOOR_SendStates@mes(2), 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3614 ;;      Params:         0       0       4       0       0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3616 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3617 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3618 ;;Total ram usage:        5 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    8
  3621 ;; This function calls:
  3622 ;;		_printf
  3623 ;; This function is called by:
  3624 ;;		_C_DOOR_SendStates
  3625 ;;		_main
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text20
  3630  001148                     __ptext20:
  3631                           	opt stack 0
  3632  001148                     _D_UART_Write:
  3633                           	opt stack 22
  3634                           
  3635                           ;UART_Driver.c: 208: printf(startCharacter);
  3636                           
  3637                           ; BSR set to: 0
  3638                           ;incstack = 0
  3639  001148  C048  F0E0         	movff	_startCharacter,printf@f
  3640  00114C  C049  F0E1         	movff	_startCharacter+1,printf@f+1
  3641  001150  0100               	movlb	0	; () banked
  3642  001152  51E0               	movf	printf@f& (0+255),w,b
  3643  001154  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3644  001156  A4D8               	btfss	status,2,c
  3645  001158  0E00               	movlw	low (__mediumconst shr (0+16))
  3646  00115A  6FE2               	movwf	(printf@f+2)& (0+255),b
  3647  00115C  EC32  F006         	call	_printf	;wreg free
  3648                           
  3649                           ;UART_Driver.c: 210: printf(messageCharacter);
  3650  001160  C044  F0E0         	movff	_messageCharacter,printf@f
  3651  001164  C045  F0E1         	movff	_messageCharacter+1,printf@f+1
  3652  001168  0100               	movlb	0	; () banked
  3653  00116A  51E0               	movf	printf@f& (0+255),w,b
  3654  00116C  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3655  00116E  A4D8               	btfss	status,2,c
  3656  001170  0E00               	movlw	low (__mediumconst shr (0+16))
  3657  001172  6FE2               	movwf	(printf@f+2)& (0+255),b
  3658  001174  EC32  F006         	call	_printf	;wreg free
  3659                           
  3660                           ;UART_Driver.c: 211: printf(deviceName);
  3661  001178  C034  F0E0         	movff	_deviceName,printf@f
  3662  00117C  C035  F0E1         	movff	_deviceName+1,printf@f+1
  3663  001180  C036  F0E2         	movff	_deviceName+2,printf@f+2
  3664  001184  EC32  F006         	call	_printf	;wreg free
  3665                           
  3666                           ;UART_Driver.c: 213: printf(":");printf(command);
  3667  001188  0E37               	movlw	low STR_6
  3668  00118A  0100               	movlb	0	; () banked
  3669  00118C  6FE0               	movwf	printf@f& (0+255),b
  3670  00118E  0E08               	movlw	high STR_6
  3671  001190  6FE1               	movwf	(printf@f+1)& (0+255),b
  3672  001192  51E0               	movf	printf@f& (0+255),w,b
  3673  001194  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3674  001196  A4D8               	btfss	status,2,c
  3675  001198  0E00               	movlw	low (__mediumconst shr (0+16))
  3676  00119A  6FE2               	movwf	(printf@f+2)& (0+255),b
  3677  00119C  EC32  F006         	call	_printf	;wreg free
  3678  0011A0  C1A6  F0E0         	movff	D_UART_Write@command,printf@f
  3679  0011A4  C1A7  F0E1         	movff	D_UART_Write@command+1,printf@f+1
  3680  0011A8  0100               	movlb	0	; () banked
  3681  0011AA  6BE2               	clrf	(printf@f+2)& (0+255),b
  3682  0011AC  51E0               	movf	printf@f& (0+255),w,b
  3683  0011AE  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3684  0011B0  B4D8               	btfsc	status,2,c
  3685  0011B2  D007               	goto	u2001
  3686  0011B4  0E07               	movlw	(high __ramtop+-1)
  3687  0011B6  0101               	movlb	1	; () banked
  3688  0011B8  65A7               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3689  0011BA  D001               	goto	u20011
  3690  0011BC  D002               	goto	u2001
  3691  0011BE                     u20011:
  3692  0011BE  0100               	movlb	0	; () banked
  3693  0011C0  8BE2               	bsf	(printf@f+2)& (0+255),5,b
  3694  0011C2                     u2001:
  3695  0011C2  EC32  F006         	call	_printf	;wreg free
  3696                           
  3697                           ;UART_Driver.c: 215: printf(":");printf(data);
  3698  0011C6  0E37               	movlw	low STR_6
  3699  0011C8  0100               	movlb	0	; () banked
  3700  0011CA  6FE0               	movwf	printf@f& (0+255),b
  3701  0011CC  0E08               	movlw	high STR_6
  3702  0011CE  6FE1               	movwf	(printf@f+1)& (0+255),b
  3703  0011D0  51E0               	movf	printf@f& (0+255),w,b
  3704  0011D2  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3705  0011D4  A4D8               	btfss	status,2,c
  3706  0011D6  0E00               	movlw	low (__mediumconst shr (0+16))
  3707  0011D8  6FE2               	movwf	(printf@f+2)& (0+255),b
  3708  0011DA  EC32  F006         	call	_printf	;wreg free
  3709  0011DE  C1A8  F0E0         	movff	D_UART_Write@data,printf@f
  3710  0011E2  C1A9  F0E1         	movff	D_UART_Write@data+1,printf@f+1
  3711  0011E6  0100               	movlb	0	; () banked
  3712  0011E8  6BE2               	clrf	(printf@f+2)& (0+255),b
  3713  0011EA  51E0               	movf	printf@f& (0+255),w,b
  3714  0011EC  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3715  0011EE  B4D8               	btfsc	status,2,c
  3716  0011F0  D007               	goto	u2011
  3717  0011F2  0E07               	movlw	(high __ramtop+-1)
  3718  0011F4  0101               	movlb	1	; () banked
  3719  0011F6  65A9               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3720  0011F8  D001               	goto	u20111
  3721  0011FA  D002               	goto	u2011
  3722  0011FC                     u20111:
  3723  0011FC  0100               	movlb	0	; () banked
  3724  0011FE  8BE2               	bsf	(printf@f+2)& (0+255),5,b
  3725  001200                     u2011:
  3726  001200  EC32  F006         	call	_printf	;wreg free
  3727                           
  3728                           ;UART_Driver.c: 217: printf(stopCharacter);
  3729  001204  C046  F0E0         	movff	_stopCharacter,printf@f
  3730  001208  C047  F0E1         	movff	_stopCharacter+1,printf@f+1
  3731  00120C  0100               	movlb	0	; () banked
  3732  00120E  51E0               	movf	printf@f& (0+255),w,b
  3733  001210  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3734  001212  A4D8               	btfss	status,2,c
  3735  001214  0E00               	movlw	low (__mediumconst shr (0+16))
  3736  001216  6FE2               	movwf	(printf@f+2)& (0+255),b
  3737  001218  EC32  F006         	call	_printf	;wreg free
  3738                           
  3739                           ;UART_Driver.c: 218: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3740  00121C  0E06               	movlw	6
  3741  00121E  0101               	movlb	1	; () banked
  3742  001220  6FAA               	movwf	??_D_UART_Write& (0+255),b
  3743  001222  0E30               	movlw	48
  3744  001224                     u2627:
  3745  001224  2EE8               	decfsz	wreg,f,c
  3746  001226  D7FE               	bra	u2627
  3747  001228  2FAA               	decfsz	??_D_UART_Write& (0+255),f,b
  3748  00122A  D7FC               	bra	u2627
  3749  00122C  F000               	nop	
  3750  00122E  0012               	return		;funcret
  3751  001230                     __end_of_D_UART_Write:
  3752                           	opt stack 0
  3753                           tblptru	equ	0xFF8
  3754                           tblptrh	equ	0xFF7
  3755                           tblptrl	equ	0xFF6
  3756                           tablat	equ	0xFF5
  3757                           prodh	equ	0xFF4
  3758                           prodl	equ	0xFF3
  3759                           intcon	equ	0xFF2
  3760                           intcon2	equ	0xFF1
  3761                           postinc0	equ	0xFEE
  3762                           plusw0	equ	0xFEB
  3763                           wreg	equ	0xFE8
  3764                           indf1	equ	0xFE7
  3765                           postinc1	equ	0xFE6
  3766                           postdec1	equ	0xFE5
  3767                           fsr1h	equ	0xFE2
  3768                           fsr1l	equ	0xFE1
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           postdec2	equ	0xFDD
  3772                           plusw2	equ	0xFDB
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _printf *****************
  3778 ;; Defined at:
  3779 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  f               3   28[BANK0 ] PTR const unsigned char 
  3782 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  3783 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3784 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3785 ;;		 -> C_DOOR_SendStates@com(3), 
  3786 ;; Auto vars:     Size  Location     Type
  3787 ;;  idx             1   32[BANK0 ] unsigned char 
  3788 ;;  tmpval          4    0        struct .
  3789 ;;  cp              3    0        PTR const unsigned char 
  3790 ;;  val             2   35[BANK0 ] unsigned int 
  3791 ;;  ap              2   33[BANK0 ] PTR void [1]
  3792 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3793 ;;  len             2    0        unsigned int 
  3794 ;;  c               1   38[BANK0 ] char 
  3795 ;;  prec            1   37[BANK0 ] char 
  3796 ;;  flag            1   31[BANK0 ] unsigned char 
  3797 ;; Return value:  Size  Location     Type
  3798 ;;                  2   28[BANK0 ] int 
  3799 ;; Registers used:
  3800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3801 ;; Tracked objects:
  3802 ;;		On entry : 0/0
  3803 ;;		On exit  : 0/0
  3804 ;;		Unchanged: 0/0
  3805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3806 ;;      Params:         0       3       0       0       0       0       0       0       0
  3807 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3808 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3809 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3810 ;;Total ram usage:       11 bytes
  3811 ;; Hardware stack levels used:    1
  3812 ;; Hardware stack levels required when called:    7
  3813 ;; This function calls:
  3814 ;;		___lwdiv
  3815 ;;		_putch
  3816 ;; This function is called by:
  3817 ;;		_D_UART_Write
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text21
  3822  000C64                     __ptext21:
  3823                           	opt stack 0
  3824  000C64                     _printf:
  3825                           	opt stack 22
  3826                           
  3827                           ;doprnt.c: 466: va_list ap;
  3828                           ;doprnt.c: 499: signed char c;
  3829                           ;doprnt.c: 506: signed char prec;
  3830                           ;doprnt.c: 508: unsigned char flag;
  3831                           ;doprnt.c: 523: union {
  3832                           ;doprnt.c: 524: unsigned long vd;
  3833                           ;doprnt.c: 525: double integ;
  3834                           ;doprnt.c: 526: } tmpval;
  3835                           ;doprnt.c: 528: unsigned int val;
  3836                           ;doprnt.c: 529: unsigned len;
  3837                           ;doprnt.c: 530: const char * cp;
  3838                           ;doprnt.c: 533: *ap = __va_start();
  3839                           
  3840                           ;incstack = 0
  3841  000C64  0EE3               	movlw	low (?_printf+3)
  3842  000C66  0100               	movlb	0	; () banked
  3843  000C68  6FE5               	movwf	printf@ap& (0+255),b
  3844  000C6A  0E00               	movlw	high (?_printf+3)
  3845  000C6C  6FE6               	movwf	(printf@ap+1)& (0+255),b
  3846                           
  3847                           ;doprnt.c: 536: while(c = *f++) {
  3848  000C6E  D08B               	goto	u1830
  3849  000C70                     
  3850                           ; BSR set to: 0
  3851                           ;doprnt.c: 538: if(c != '%')
  3852                           
  3853                           ; BSR set to: 0
  3854  000C70  0E25               	movlw	37
  3855  000C72  19EA               	xorwf	printf@c& (0+255),w,b
  3856  000C74  B4D8               	btfsc	status,2,c
  3857  000C76  D004               	goto	l375
  3858                           
  3859                           ; BSR set to: 0
  3860                           ;doprnt.c: 540: {
  3861                           ;doprnt.c: 541: (putch(c) );
  3862  000C78  51EA               	movf	printf@c& (0+255),w,b
  3863  000C7A  EC26  F00C         	call	_putch
  3864                           
  3865                           ;doprnt.c: 542: continue;
  3866  000C7E  D083               	goto	u1830
  3867  000C80                     l375:
  3868                           
  3869                           ;doprnt.c: 543: }
  3870                           ;doprnt.c: 548: flag = 0;
  3871  000C80  0E00               	movlw	0
  3872  000C82  0100               	movlb	0	; () banked
  3873  000C84  6FE3               	movwf	printf@flag& (0+255),b
  3874                           
  3875                           ;doprnt.c: 635: switch(c = *f++) {
  3876  000C86  D004               	goto	l376
  3877  000C88                     
  3878                           ; BSR set to: 0
  3879                           ;doprnt.c: 809: (putch(c) );
  3880                           
  3881                           ; BSR set to: 0
  3882  000C88  51EA               	movf	printf@c& (0+255),w,b
  3883  000C8A  EC26  F00C         	call	_putch
  3884                           
  3885                           ;doprnt.c: 810: continue;
  3886  000C8E  D07B               	goto	u1830
  3887  000C90                     l376:
  3888  000C90  C0E0  FFF6         	movff	printf@f,tblptrl
  3889  000C94  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3890  000C98  C0E2  FFF8         	movff	printf@f+2,tblptru
  3891  000C9C  0E01               	movlw	1
  3892  000C9E  0100               	movlb	0	; () banked
  3893  000CA0  27E0               	addwf	printf@f& (0+255),f,b
  3894  000CA2  0E00               	movlw	0
  3895  000CA4  23E1               	addwfc	(printf@f+1)& (0+255),f,b
  3896  000CA6  23E2               	addwfc	(printf@f+2)& (0+255),f,b
  3897  000CA8  BAF8               	btfsc	tblptru,5,c
  3898  000CAA  D003               	bra	u1797
  3899  000CAC  0008               	tblrd		*
  3900  000CAE  50F5               	movf	tablat,w,c
  3901  000CB0  D005               	bra	u1790
  3902  000CB2                     u1797:
  3903  000CB2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3904  000CB6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3905  000CBA  50EF               	movf	indf0,w,c
  3906  000CBC                     u1790:
  3907  000CBC  0100               	movlb	0	; () banked
  3908  000CBE  6FEA               	movwf	printf@c& (0+255),b
  3909  000CC0  51EA               	movf	printf@c& (0+255),w,b
  3910                           
  3911                           ; Switch size 1, requested type "space"
  3912                           ; Number of cases is 2, Range of values is 0 to 120
  3913                           ; switch strategies available:
  3914                           ; Name         Instructions Cycles
  3915                           ; simple_byte            7     4 (average)
  3916                           ;	Chosen strategy is simple_byte
  3917  000CC2  0A00               	xorlw	0	; case 0
  3918  000CC4  B4D8               	btfsc	status,2,c
  3919  000CC6  0012               	return	
  3920  000CC8  0A78               	xorlw	120	; case 120
  3921  000CCA  A4D8               	btfss	status,2,c
  3922  000CCC  D7DD               	goto	l381
  3923                           
  3924                           ;doprnt.c: 1273: {
  3925                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3926                           
  3927                           ; BSR set to: 0
  3928  000CCE  C0E5  FFD9         	movff	printf@ap,fsr2l
  3929  000CD2  C0E6  FFDA         	movff	printf@ap+1,fsr2h
  3930  000CD6  CFDE F0E7          	movff	postinc2,printf@val
  3931  000CDA  CFDD F0E8          	movff	postdec2,printf@val+1
  3932  000CDE  0E02               	movlw	2
  3933  000CE0  0100               	movlb	0	; () banked
  3934  000CE2  27E5               	addwf	printf@ap& (0+255),f,b
  3935  000CE4  0E00               	movlw	0
  3936  000CE6  23E6               	addwfc	(printf@ap+1)& (0+255),f,b
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;doprnt.c: 1287: }
  3940                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3941  000CE8  0E01               	movlw	1
  3942  000CEA  6FEA               	movwf	printf@c& (0+255),b
  3943  000CEC  D014               	goto	l2213
  3944  000CEE                     
  3945                           ; BSR set to: 0
  3946                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3947                           
  3948                           ; BSR set to: 0
  3949  000CEE  51EA               	movf	printf@c& (0+255),w,b
  3950  000CF0  0D02               	mullw	2
  3951  000CF2  0E01               	movlw	low _hexpowers
  3952  000CF4  24F3               	addwf	prodl,w,c
  3953  000CF6  6EF6               	movwf	tblptrl,c
  3954  000CF8  0E08               	movlw	high _hexpowers
  3955  000CFA  20F4               	addwfc	prodh,w,c
  3956  000CFC  6EF7               	movwf	tblptrh,c
  3957  000CFE                     	if	1	;There are 3 active tblptr bytes
  3958  000CFE  6AF8               	clrf	tblptru,c
  3959  000D00  0E00               	movlw	low (__mediumconst shr (0+16))
  3960  000D02  22F8               	addwfc	tblptru,f,c
  3961  000D04                     	endif
  3962  000D04  0009               	tblrd		*+
  3963  000D06  50F5               	movf	tablat,w,c
  3964  000D08  5DE7               	subwf	printf@val& (0+255),w,b
  3965  000D0A  0009               	tblrd		*+
  3966  000D0C  50F5               	movf	tablat,w,c
  3967  000D0E  59E8               	subwfb	(printf@val+1)& (0+255),w,b
  3968  000D10  A0D8               	btfss	status,0,c
  3969  000D12  D005               	goto	u1820
  3970                           
  3971                           ; BSR set to: 0
  3972                           
  3973                           ; BSR set to: 0
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 1318: break;
  3977  000D14  2BEA               	incf	printf@c& (0+255),f,b
  3978  000D16                     l2213:
  3979                           
  3980                           ; BSR set to: 0
  3981  000D16  0E04               	movlw	4
  3982  000D18  19EA               	xorwf	printf@c& (0+255),w,b
  3983  000D1A  A4D8               	btfss	status,2,c
  3984  000D1C  D7E8               	goto	l382
  3985  000D1E                     u1820:
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;doprnt.c: 1422: {
  3989                           ;doprnt.c: 1469: }
  3990                           ;doprnt.c: 1472: prec = c;
  3991  000D1E  C0EA  F0E9         	movff	printf@c,printf@prec
  3992                           
  3993                           ;doprnt.c: 1474: while(prec--) {
  3994  000D22  D02C               	goto	l385
  3995  000D24                     
  3996                           ; BSR set to: 0
  3997                           ;doprnt.c: 1478: {
  3998                           ;doprnt.c: 1499: {
  3999                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4000                           
  4001                           ; BSR set to: 0
  4002  000D24  C0E7  F0D9         	movff	printf@val,___lwdiv@dividend
  4003  000D28  C0E8  F0DA         	movff	printf@val+1,___lwdiv@dividend+1
  4004  000D2C  51E9               	movf	printf@prec& (0+255),w,b
  4005  000D2E  0D02               	mullw	2
  4006  000D30  0E01               	movlw	low _hexpowers
  4007  000D32  24F3               	addwf	prodl,w,c
  4008  000D34  6EF6               	movwf	tblptrl,c
  4009  000D36  0E08               	movlw	high _hexpowers
  4010  000D38  20F4               	addwfc	prodh,w,c
  4011  000D3A  6EF7               	movwf	tblptrh,c
  4012  000D3C                     	if	1	;There are 3 active tblptr bytes
  4013  000D3C  6AF8               	clrf	tblptru,c
  4014  000D3E  0E00               	movlw	low (__mediumconst shr (0+16))
  4015  000D40  22F8               	addwfc	tblptru,f,c
  4016  000D42                     	endif
  4017  000D42  0009               	tblrd		*+
  4018  000D44  CFF5 F0DB          	movff	tablat,___lwdiv@divisor
  4019  000D48  000A               	tblrd		*-
  4020  000D4A  CFF5 F0DC          	movff	tablat,___lwdiv@divisor+1
  4021  000D4E  EC58  F00B         	call	___lwdiv	;wreg free
  4022  000D52  0100               	movlb	0	; () banked
  4023  000D54  51D9               	movf	?___lwdiv& (0+255),w,b
  4024  000D56  0B0F               	andlw	15
  4025  000D58  6FE4               	movwf	printf@idx& (0+255),b
  4026                           
  4027                           ; BSR set to: 0
  4028                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4029  000D5A  51E4               	movf	printf@idx& (0+255),w,b
  4030  000D5C  0D01               	mullw	1
  4031  000D5E  0E09               	movlw	low STR_17
  4032  000D60  24F3               	addwf	prodl,w,c
  4033  000D62  6EF6               	movwf	tblptrl,c
  4034  000D64  0E08               	movlw	high STR_17
  4035  000D66  20F4               	addwfc	prodh,w,c
  4036  000D68  6EF7               	movwf	tblptrh,c
  4037  000D6A                     	if	1	;There are 3 active tblptr bytes
  4038  000D6A  6AF8               	clrf	tblptru,c
  4039  000D6C  0E00               	movlw	low (__mediumconst shr (0+16))
  4040  000D6E  22F8               	addwfc	tblptru,f,c
  4041  000D70                     	endif
  4042  000D70  0008               	tblrd		*
  4043  000D72  CFF5 F0EA          	movff	tablat,printf@c
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;doprnt.c: 1508: }
  4047                           ;doprnt.c: 1523: }
  4048                           ;doprnt.c: 1524: (putch(c) );
  4049  000D76  51EA               	movf	printf@c& (0+255),w,b
  4050  000D78  EC26  F00C         	call	_putch
  4051  000D7C                     l385:
  4052  000D7C  0100               	movlb	0	; () banked
  4053  000D7E  07E9               	decf	printf@prec& (0+255),f,b
  4054  000D80  29E9               	incf	printf@prec& (0+255),w,b
  4055  000D82  A4D8               	btfss	status,2,c
  4056  000D84  D7CF               	goto	l386
  4057  000D86                     u1830:
  4058                           
  4059                           ; BSR set to: 0
  4060                           
  4061                           ; BSR set to: 0
  4062  000D86  C0E0  FFF6         	movff	printf@f,tblptrl
  4063  000D8A  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4064  000D8E  C0E2  FFF8         	movff	printf@f+2,tblptru
  4065  000D92  0E01               	movlw	1
  4066  000D94  0100               	movlb	0	; () banked
  4067  000D96  27E0               	addwf	printf@f& (0+255),f,b
  4068  000D98  0E00               	movlw	0
  4069  000D9A  23E1               	addwfc	(printf@f+1)& (0+255),f,b
  4070  000D9C  23E2               	addwfc	(printf@f+2)& (0+255),f,b
  4071  000D9E  BAF8               	btfsc	tblptru,5,c
  4072  000DA0  D003               	bra	u1847
  4073  000DA2  0008               	tblrd		*
  4074  000DA4  50F5               	movf	tablat,w,c
  4075  000DA6  D005               	bra	u1840
  4076  000DA8                     u1847:
  4077  000DA8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4078  000DAC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4079  000DB0  50EF               	movf	indf0,w,c
  4080  000DB2                     u1840:
  4081  000DB2  0100               	movlb	0	; () banked
  4082  000DB4  6FEA               	movwf	printf@c& (0+255),b
  4083  000DB6  51EA               	movf	printf@c& (0+255),w,b
  4084  000DB8  B4D8               	btfsc	status,2,c
  4085  000DBA  0012               	return	
  4086  000DBC  D759               	goto	l374
  4087  000DBE                     __end_of_printf:
  4088                           	opt stack 0
  4089                           tblptru	equ	0xFF8
  4090                           tblptrh	equ	0xFF7
  4091                           tblptrl	equ	0xFF6
  4092                           tablat	equ	0xFF5
  4093                           prodh	equ	0xFF4
  4094                           prodl	equ	0xFF3
  4095                           intcon	equ	0xFF2
  4096                           intcon2	equ	0xFF1
  4097                           indf0	equ	0xFEF
  4098                           postinc0	equ	0xFEE
  4099                           plusw0	equ	0xFEB
  4100                           fsr0h	equ	0xFEA
  4101                           fsr0l	equ	0xFE9
  4102                           wreg	equ	0xFE8
  4103                           indf1	equ	0xFE7
  4104                           postinc1	equ	0xFE6
  4105                           postdec1	equ	0xFE5
  4106                           fsr1h	equ	0xFE2
  4107                           fsr1l	equ	0xFE1
  4108                           indf2	equ	0xFDF
  4109                           postinc2	equ	0xFDE
  4110                           postdec2	equ	0xFDD
  4111                           plusw2	equ	0xFDB
  4112                           fsr2h	equ	0xFDA
  4113                           fsr2l	equ	0xFD9
  4114                           status	equ	0xFD8
  4115                           
  4116 ;; *************** function _putch *****************
  4117 ;; Defined at:
  4118 ;;		line 244 in file "Drivers/UART_Driver.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  data            1    wreg     unsigned char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  data            1   21[BANK0 ] unsigned char 
  4123 ;;  max             1   22[BANK0 ] unsigned char 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      void 
  4126 ;; Registers used:
  4127 ;;		wreg, status,2, status,0, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4133 ;;      Params:         0       0       0       0       0       0       0       0       0
  4134 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4136 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4137 ;;Total ram usage:        2 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    6
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_printf
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147                           	psect	text22
  4148  00184C                     __ptext22:
  4149                           	opt stack 0
  4150  00184C                     _putch:
  4151                           	opt stack 22
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;incstack = 0
  4155                           ;putch@data stored from wreg
  4156  00184C  0100               	movlb	0	; () banked
  4157  00184E  6FD9               	movwf	putch@data& (0+255),b
  4158                           
  4159                           ;UART_Driver.c: 245: uint8_t max = 0;
  4160  001850  0E00               	movlw	0
  4161  001852  0100               	movlb	0	; () banked
  4162  001854  6FDA               	movwf	putch@max& (0+255),b
  4163                           
  4164                           ;UART_Driver.c: 247: while(TXSTAbits.TRMT == 0 && max < 200) {
  4165  001856  D005               	goto	l168
  4166  001858                     
  4167                           ; BSR set to: 0
  4168                           ;UART_Driver.c: 248: max++;
  4169                           
  4170                           ; BSR set to: 0
  4171  001858  2BDA               	incf	putch@max& (0+255),f,b
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;UART_Driver.c: 249: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  4175  00185A  0E06               	movlw	6
  4176  00185C                     u2637:
  4177  00185C  2EE8               	decfsz	wreg,f,c
  4178  00185E  D7FE               	bra	u2637
  4179  001860  D000               	nop2	
  4180  001862                     l168:
  4181  001862  B2AC               	btfsc	4012,1,c	;volatile
  4182  001864  D004               	goto	u1690
  4183  001866  0EC7               	movlw	199
  4184  001868  0100               	movlb	0	; () banked
  4185  00186A  65DA               	cpfsgt	putch@max& (0+255),b
  4186  00186C  D7F5               	goto	l169
  4187  00186E                     u1690:
  4188                           
  4189                           ;UART_Driver.c: 250: }
  4190                           ;UART_Driver.c: 251: TXREG = data;
  4191                           
  4192                           ; BSR set to: 0
  4193  00186E  C0D9  FFAD         	movff	putch@data,4013	;volatile
  4194  001872  0012               	return		;funcret
  4195  001874                     __end_of_putch:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon2	equ	0xFF1
  4205                           indf0	equ	0xFEF
  4206                           postinc0	equ	0xFEE
  4207                           plusw0	equ	0xFEB
  4208                           fsr0h	equ	0xFEA
  4209                           fsr0l	equ	0xFE9
  4210                           wreg	equ	0xFE8
  4211                           indf1	equ	0xFE7
  4212                           postinc1	equ	0xFE6
  4213                           postdec1	equ	0xFE5
  4214                           fsr1h	equ	0xFE2
  4215                           fsr1l	equ	0xFE1
  4216                           indf2	equ	0xFDF
  4217                           postinc2	equ	0xFDE
  4218                           postdec2	equ	0xFDD
  4219                           plusw2	equ	0xFDB
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function ___lwdiv *****************
  4225 ;; Defined at:
  4226 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  dividend        2   21[BANK0 ] unsigned int 
  4229 ;;  divisor         2   23[BANK0 ] unsigned int 
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  quotient        2   26[BANK0 ] unsigned int 
  4232 ;;  counter         1   25[BANK0 ] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  2   21[BANK0 ] unsigned int 
  4235 ;; Registers used:
  4236 ;;		wreg, status,2, status,0
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4242 ;;      Params:         0       4       0       0       0       0       0       0       0
  4243 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4245 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4246 ;;Total ram usage:        7 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    6
  4249 ;; This function calls:
  4250 ;;		Nothing
  4251 ;; This function is called by:
  4252 ;;		_printf
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text23
  4257  0016B0                     __ptext23:
  4258                           	opt stack 0
  4259  0016B0                     ___lwdiv:
  4260                           	opt stack 22
  4261                           
  4262                           ;incstack = 0
  4263  0016B0  0E00               	movlw	0
  4264  0016B2  0100               	movlb	0	; () banked
  4265  0016B4  6FDF               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4266  0016B6  0E00               	movlw	0
  4267  0016B8  6FDE               	movwf	___lwdiv@quotient& (0+255),b
  4268                           
  4269                           ; BSR set to: 0
  4270  0016BA  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4271  0016BC  11DC               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4272  0016BE  B4D8               	btfsc	status,2,c
  4273  0016C0  D01C               	goto	l798
  4274                           
  4275                           ; BSR set to: 0
  4276  0016C2  0E01               	movlw	1
  4277  0016C4  6FDD               	movwf	___lwdiv@counter& (0+255),b
  4278  0016C6  D004               	goto	l793
  4279  0016C8                     
  4280                           ; BSR set to: 0
  4281                           
  4282                           ; BSR set to: 0
  4283  0016C8  90D8               	bcf	status,0,c
  4284  0016CA  37DB               	rlcf	___lwdiv@divisor& (0+255),f,b
  4285  0016CC  37DC               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4286  0016CE  2BDD               	incf	___lwdiv@counter& (0+255),f,b
  4287  0016D0                     l793:
  4288                           
  4289                           ; BSR set to: 0
  4290                           
  4291                           ; BSR set to: 0
  4292  0016D0  AFDC               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4293  0016D2  D7FA               	goto	l794
  4294  0016D4                     u1710:
  4295                           
  4296                           ; BSR set to: 0
  4297                           
  4298                           ; BSR set to: 0
  4299                           
  4300                           ; BSR set to: 0
  4301  0016D4  90D8               	bcf	status,0,c
  4302  0016D6  37DE               	rlcf	___lwdiv@quotient& (0+255),f,b
  4303  0016D8  37DF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4304                           
  4305                           ; BSR set to: 0
  4306  0016DA  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4307  0016DC  5DD9               	subwf	___lwdiv@dividend& (0+255),w,b
  4308  0016DE  51DC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4309  0016E0  59DA               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4310  0016E2  A0D8               	btfss	status,0,c
  4311  0016E4  D005               	goto	l797
  4312                           
  4313                           ; BSR set to: 0
  4314  0016E6  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4315  0016E8  5FD9               	subwf	___lwdiv@dividend& (0+255),f,b
  4316  0016EA  51DC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4317  0016EC  5BDA               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4318                           
  4319                           ; BSR set to: 0
  4320  0016EE  81DE               	bsf	___lwdiv@quotient& (0+255),0,b
  4321  0016F0                     l797:
  4322                           
  4323                           ; BSR set to: 0
  4324                           
  4325                           ; BSR set to: 0
  4326  0016F0  90D8               	bcf	status,0,c
  4327  0016F2  33DC               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4328  0016F4  33DB               	rrcf	___lwdiv@divisor& (0+255),f,b
  4329                           
  4330                           ; BSR set to: 0
  4331  0016F6  2FDD               	decfsz	___lwdiv@counter& (0+255),f,b
  4332  0016F8  D7ED               	goto	u1710
  4333  0016FA                     l798:
  4334                           
  4335                           ; BSR set to: 0
  4336                           
  4337                           ; BSR set to: 0
  4338  0016FA  C0DE  F0D9         	movff	___lwdiv@quotient,?___lwdiv
  4339  0016FE  C0DF  F0DA         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4340                           
  4341                           ; BSR set to: 0
  4342  001702  0012               	return		;funcret
  4343  001704                     __end_of___lwdiv:
  4344                           	opt stack 0
  4345                           tblptru	equ	0xFF8
  4346                           tblptrh	equ	0xFF7
  4347                           tblptrl	equ	0xFF6
  4348                           tablat	equ	0xFF5
  4349                           prodh	equ	0xFF4
  4350                           prodl	equ	0xFF3
  4351                           intcon	equ	0xFF2
  4352                           intcon2	equ	0xFF1
  4353                           indf0	equ	0xFEF
  4354                           postinc0	equ	0xFEE
  4355                           plusw0	equ	0xFEB
  4356                           fsr0h	equ	0xFEA
  4357                           fsr0l	equ	0xFE9
  4358                           wreg	equ	0xFE8
  4359                           indf1	equ	0xFE7
  4360                           postinc1	equ	0xFE6
  4361                           postdec1	equ	0xFE5
  4362                           fsr1h	equ	0xFE2
  4363                           fsr1l	equ	0xFE1
  4364                           indf2	equ	0xFDF
  4365                           postinc2	equ	0xFDE
  4366                           postdec2	equ	0xFDD
  4367                           plusw2	equ	0xFDB
  4368                           fsr2h	equ	0xFDA
  4369                           fsr2l	equ	0xFD9
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function _C_DOOR_ReadSensors *****************
  4373 ;; Defined at:
  4374 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  d               1   25[BANK0 ] unsigned char 
  4379 ;; Return value:  Size  Location     Type
  4380 ;;                  1    wreg      void 
  4381 ;; Registers used:
  4382 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4383 ;; Tracked objects:
  4384 ;;		On entry : 0/0
  4385 ;;		On exit  : 0/0
  4386 ;;		Unchanged: 0/0
  4387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4388 ;;      Params:         0       0       0       0       0       0       0       0       0
  4389 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4390 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4391 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4392 ;;Total ram usage:        5 bytes
  4393 ;; Hardware stack levels used:    1
  4394 ;; Hardware stack levels required when called:    6
  4395 ;; This function calls:
  4396 ;;		Nothing
  4397 ;; This function is called by:
  4398 ;;		_main
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text24
  4403  00144C                     __ptext24:
  4404                           	opt stack 0
  4405  00144C                     _C_DOOR_ReadSensors:
  4406                           	opt stack 24
  4407                           
  4408                           ;DOOR_Controller.c: 103: uint8_t d;
  4409                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;incstack = 0
  4413  00144C  0E00               	movlw	0
  4414  00144E  0100               	movlb	0	; () banked
  4415  001450  6FDD               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  4416  001452  D03E               	goto	l42
  4417  001454                     
  4418                           ; BSR set to: 0
  4419                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 0x01) == 0);
  4420                           
  4421                           ; BSR set to: 0
  4422  001454  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4423  001456  0D0A               	mullw	10
  4424  001458  0E06               	movlw	6
  4425  00145A  26F3               	addwf	prodl,f,c
  4426  00145C  0E00               	movlw	0
  4427  00145E  22F4               	addwfc	prodh,f,c
  4428  001460  0E60               	movlw	low _doors
  4429  001462  24F3               	addwf	prodl,w,c
  4430  001464  6ED9               	movwf	fsr2l,c
  4431  001466  0E00               	movlw	high _doors
  4432  001468  20F4               	addwfc	prodh,w,c
  4433  00146A  6EDA               	movwf	fsr2h,c
  4434  00146C  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4435  00146E  0D0A               	mullw	10
  4436  001470  0E09               	movlw	9
  4437  001472  26F3               	addwf	prodl,f,c
  4438  001474  0E00               	movlw	0
  4439  001476  22F4               	addwfc	prodh,f,c
  4440  001478  0E60               	movlw	low _doors
  4441  00147A  24F3               	addwf	prodl,w,c
  4442  00147C  6EE1               	movwf	fsr1l,c
  4443  00147E  0E00               	movlw	high _doors
  4444  001480  20F4               	addwfc	prodh,w,c
  4445  001482  6EE2               	movwf	fsr1h,c
  4446  001484  50E7               	movf	indf1,w,c
  4447  001486  6FD9               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4448  001488  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4449  00148A  0D0A               	mullw	10
  4450  00148C  0E07               	movlw	7
  4451  00148E  26F3               	addwf	prodl,f,c
  4452  001490  0E00               	movlw	0
  4453  001492  22F4               	addwfc	prodh,f,c
  4454  001494  0E60               	movlw	low _doors
  4455  001496  24F3               	addwf	prodl,w,c
  4456  001498  6EE1               	movwf	fsr1l,c
  4457  00149A  0E00               	movlw	high _doors
  4458  00149C  20F4               	addwfc	prodh,w,c
  4459  00149E  6EE2               	movwf	fsr1h,c
  4460  0014A0  CFE6 F0DA          	movff	postinc1,??_C_DOOR_ReadSensors+1
  4461  0014A4  CFE5 F0DB          	movff	postdec1,??_C_DOOR_ReadSensors+2
  4462  0014A8  C0DA  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  4463  0014AC  C0DB  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  4464  0014B0  50E7               	movf	indf1,w,c
  4465  0014B2  6FDC               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  4466  0014B4  2BD9               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  4467  0014B6  D002               	goto	u2104
  4468  0014B8                     u2105:
  4469  0014B8  90D8               	bcf	status,0,c
  4470  0014BA  33DC               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  4471  0014BC                     u2104:
  4472  0014BC  2FD9               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  4473  0014BE  D7FC               	goto	u2105
  4474  0014C0  0100               	movlb	0	; () banked
  4475  0014C2  B1DC               	btfsc	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  4476  0014C4  D002               	goto	u2110
  4477  0014C6  0E01               	movlw	1
  4478  0014C8  D001               	goto	u2120
  4479  0014CA                     u2110:
  4480  0014CA  0E00               	movlw	0
  4481  0014CC                     u2120:
  4482  0014CC  6EDF               	movwf	indf2,c
  4483                           
  4484                           ; BSR set to: 0
  4485  0014CE  2BDD               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  4486  0014D0                     l42:
  4487                           
  4488                           ; BSR set to: 0
  4489                           
  4490                           ; BSR set to: 0
  4491  0014D0  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4492  0014D2  6FD9               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4493  0014D4  6BDA               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4494  0014D6  5037               	movf	_door_cnt,w,c
  4495  0014D8  5DD9               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4496  0014DA  51DA               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4497  0014DC  0A80               	xorlw	128
  4498  0014DE  6FDB               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4499  0014E0  5038               	movf	_door_cnt+1,w,c
  4500  0014E2  0A80               	xorlw	128
  4501  0014E4  59DB               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4502  0014E6  B0D8               	btfsc	status,0,c
  4503  0014E8  0012               	return	
  4504  0014EA  D7B4               	goto	l43
  4505  0014EC                     __end_of_C_DOOR_ReadSensors:
  4506                           	opt stack 0
  4507                           tblptru	equ	0xFF8
  4508                           tblptrh	equ	0xFF7
  4509                           tblptrl	equ	0xFF6
  4510                           tablat	equ	0xFF5
  4511                           prodh	equ	0xFF4
  4512                           prodl	equ	0xFF3
  4513                           intcon	equ	0xFF2
  4514                           intcon2	equ	0xFF1
  4515                           indf0	equ	0xFEF
  4516                           postinc0	equ	0xFEE
  4517                           plusw0	equ	0xFEB
  4518                           fsr0h	equ	0xFEA
  4519                           fsr0l	equ	0xFE9
  4520                           wreg	equ	0xFE8
  4521                           indf1	equ	0xFE7
  4522                           postinc1	equ	0xFE6
  4523                           postdec1	equ	0xFE5
  4524                           fsr1h	equ	0xFE2
  4525                           fsr1l	equ	0xFE1
  4526                           indf2	equ	0xFDF
  4527                           postinc2	equ	0xFDE
  4528                           postdec2	equ	0xFDD
  4529                           plusw2	equ	0xFDB
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function _LowISR *****************
  4535 ;; Defined at:
  4536 ;;		line 192 in file "main.c"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;		None
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;		None
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, status,2, status,0
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4550 ;;      Params:         0       0       0       0       0       0       0       0       0
  4551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4552 ;;      Temps:          0      21       0       0       0       0       0       0       0
  4553 ;;      Totals:         0      21       0       0       0       0       0       0       0
  4554 ;;Total ram usage:       21 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:    5
  4557 ;; This function calls:
  4558 ;;		Nothing
  4559 ;; This function is called by:
  4560 ;;		Interrupt level 1
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564                           	psect	intcodelo
  4565  000018                     __pintcodelo:
  4566                           	opt stack 0
  4567  000018                     _LowISR:
  4568                           	opt stack 21
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;incstack = 0
  4572  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4573  00001A  CFD8 F0C4          	movff	status,??_LowISR
  4574  00001E  CFE8 F0C5          	movff	wreg,??_LowISR+1
  4575  000022  CFE0 F0C6          	movff	bsr,??_LowISR+2
  4576  000026  CFFA F0C7          	movff	pclath,??_LowISR+3
  4577  00002A  CFFB F0C8          	movff	pclatu,??_LowISR+4
  4578  00002E  CFE9 F0C9          	movff	fsr0l,??_LowISR+5
  4579  000032  CFEA F0CA          	movff	fsr0h,??_LowISR+6
  4580  000036  CFE1 F0CB          	movff	fsr1l,??_LowISR+7
  4581  00003A  CFE2 F0CC          	movff	fsr1h,??_LowISR+8
  4582  00003E  CFD9 F0CD          	movff	fsr2l,??_LowISR+9
  4583  000042  CFDA F0CE          	movff	fsr2h,??_LowISR+10
  4584  000046  CFF3 F0CF          	movff	prodl,??_LowISR+11
  4585  00004A  CFF4 F0D0          	movff	prodh,??_LowISR+12
  4586  00004E  CFF6 F0D1          	movff	tblptrl,??_LowISR+13
  4587  000052  CFF7 F0D2          	movff	tblptrh,??_LowISR+14
  4588  000056  CFF8 F0D3          	movff	tblptru,??_LowISR+15
  4589  00005A  CFF5 F0D4          	movff	tablat,??_LowISR+16
  4590  00005E  C04A  F0D5         	movff	btemp,??_LowISR+17
  4591  000062  C04B  F0D6         	movff	btemp+1,??_LowISR+18
  4592  000066  C04C  F0D7         	movff	btemp+2,??_LowISR+19
  4593  00006A  C04D  F0D8         	movff	btemp+3,??_LowISR+20
  4594                           
  4595                           ;main.c: 194: if (INTCONbits.TMR0IF) {
  4596  00006E  A4F2               	btfss	intcon,2,c	;volatile
  4597  000070  D003               	goto	i1l358
  4598                           
  4599                           ;main.c: 195: INTCONbits.TMR0IF = 0;
  4600  000072  94F2               	bcf	intcon,2,c	;volatile
  4601                           
  4602                           ;main.c: 196: tick = 1;
  4603  000074  0E01               	movlw	1
  4604  000076  6E3D               	movwf	_tick,c
  4605  000078                     i1l358:
  4606                           
  4607                           ;main.c: 197: }
  4608                           ;main.c: 200: if (PIR1bits.TMR1IF) {
  4609  000078  A09E               	btfss	3998,0,c	;volatile
  4610  00007A  D00C               	goto	i1l359
  4611                           
  4612                           ;main.c: 201: TMR1H = 0x5E;
  4613  00007C  0E5E               	movlw	94
  4614  00007E  6ECF               	movwf	4047,c	;volatile
  4615                           
  4616                           ;main.c: 202: TMR1L = 0x00;
  4617  000080  0E00               	movlw	0
  4618  000082  6ECE               	movwf	4046,c	;volatile
  4619                           
  4620                           ;main.c: 204: if (lockDelayCnt < 100-1) {
  4621  000084  0E63               	movlw	99
  4622  000086  603F               	cpfslt	_lockDelayCnt,c
  4623  000088  D002               	goto	i1l360
  4624                           
  4625                           ;main.c: 205: lockDelayCnt++;
  4626  00008A  2A3F               	incf	_lockDelayCnt,f,c
  4627                           
  4628                           ;main.c: 206: } else {
  4629  00008C  D002               	goto	i1l361
  4630  00008E                     i1l360:
  4631                           
  4632                           ;main.c: 207: lock = 1;
  4633  00008E  0E01               	movlw	1
  4634  000090  6E3C               	movwf	_lock,c
  4635  000092                     i1l361:
  4636                           
  4637                           ;main.c: 208: }
  4638                           ;main.c: 210: PIR1bits.TMR1IF = 0;
  4639  000092  909E               	bcf	3998,0,c	;volatile
  4640  000094                     i1l359:
  4641  000094  C0D8  F04D         	movff	??_LowISR+20,btemp+3
  4642  000098  C0D7  F04C         	movff	??_LowISR+19,btemp+2
  4643  00009C  C0D6  F04B         	movff	??_LowISR+18,btemp+1
  4644  0000A0  C0D5  F04A         	movff	??_LowISR+17,btemp
  4645  0000A4  C0D4  FFF5         	movff	??_LowISR+16,tablat
  4646  0000A8  C0D3  FFF8         	movff	??_LowISR+15,tblptru
  4647  0000AC  C0D2  FFF7         	movff	??_LowISR+14,tblptrh
  4648  0000B0  C0D1  FFF6         	movff	??_LowISR+13,tblptrl
  4649  0000B4  C0D0  FFF4         	movff	??_LowISR+12,prodh
  4650  0000B8  C0CF  FFF3         	movff	??_LowISR+11,prodl
  4651  0000BC  C0CE  FFDA         	movff	??_LowISR+10,fsr2h
  4652  0000C0  C0CD  FFD9         	movff	??_LowISR+9,fsr2l
  4653  0000C4  C0CC  FFE2         	movff	??_LowISR+8,fsr1h
  4654  0000C8  C0CB  FFE1         	movff	??_LowISR+7,fsr1l
  4655  0000CC  C0CA  FFEA         	movff	??_LowISR+6,fsr0h
  4656  0000D0  C0C9  FFE9         	movff	??_LowISR+5,fsr0l
  4657  0000D4  C0C8  FFFB         	movff	??_LowISR+4,pclatu
  4658  0000D8  C0C7  FFFA         	movff	??_LowISR+3,pclath
  4659  0000DC  C0C6  FFE0         	movff	??_LowISR+2,bsr
  4660  0000E0  C0C5  FFE8         	movff	??_LowISR+1,wreg
  4661  0000E4  C0C4  FFD8         	movff	??_LowISR,status
  4662  0000E8  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4663  0000EA  0010               	retfie	
  4664  0000EC                     __end_of_LowISR:
  4665                           	opt stack 0
  4666                           pclatu	equ	0xFFB
  4667                           pclath	equ	0xFFA
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           intcon2	equ	0xFF1
  4676                           indf0	equ	0xFEF
  4677                           postinc0	equ	0xFEE
  4678                           plusw0	equ	0xFEB
  4679                           fsr0h	equ	0xFEA
  4680                           fsr0l	equ	0xFE9
  4681                           wreg	equ	0xFE8
  4682                           indf1	equ	0xFE7
  4683                           postinc1	equ	0xFE6
  4684                           postdec1	equ	0xFE5
  4685                           fsr1h	equ	0xFE2
  4686                           fsr1l	equ	0xFE1
  4687                           bsr	equ	0xFE0
  4688                           indf2	equ	0xFDF
  4689                           postinc2	equ	0xFDE
  4690                           postdec2	equ	0xFDD
  4691                           plusw2	equ	0xFDB
  4692                           fsr2h	equ	0xFDA
  4693                           fsr2l	equ	0xFD9
  4694                           status	equ	0xFD8
  4695                           
  4696 ;; *************** function _HighISR *****************
  4697 ;; Defined at:
  4698 ;;		line 256 in file "Drivers/UART_Driver.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      void 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4714 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4715 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4716 ;;Total ram usage:       18 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    4
  4719 ;; This function calls:
  4720 ;;		_fillDataBuffer
  4721 ;; This function is called by:
  4722 ;;		Interrupt level 2
  4723 ;; This function uses a non-reentrant model
  4724 ;;
  4725                           
  4726                           	psect	intcode
  4727  000008                     __pintcode:
  4728                           	opt stack 0
  4729  000008                     _HighISR:
  4730                           	opt stack 21
  4731                           
  4732                           ;incstack = 0
  4733  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4734  00000A  ED18  F009         	call	int_func,f	;refresh shadow registers
  4735                           pclatu	equ	0xFFB
  4736                           pclath	equ	0xFFA
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           prodh	equ	0xFF4
  4742                           prodl	equ	0xFF3
  4743                           intcon	equ	0xFF2
  4744                           intcon2	equ	0xFF1
  4745                           indf0	equ	0xFEF
  4746                           postinc0	equ	0xFEE
  4747                           plusw0	equ	0xFEB
  4748                           fsr0h	equ	0xFEA
  4749                           fsr0l	equ	0xFE9
  4750                           wreg	equ	0xFE8
  4751                           indf1	equ	0xFE7
  4752                           postinc1	equ	0xFE6
  4753                           postdec1	equ	0xFE5
  4754                           fsr1h	equ	0xFE2
  4755                           fsr1l	equ	0xFE1
  4756                           bsr	equ	0xFE0
  4757                           indf2	equ	0xFDF
  4758                           postinc2	equ	0xFDE
  4759                           postdec2	equ	0xFDD
  4760                           plusw2	equ	0xFDB
  4761                           fsr2h	equ	0xFDA
  4762                           fsr2l	equ	0xFD9
  4763                           status	equ	0xFD8
  4764                           
  4765                           	psect	intcode_body
  4766  001230                     __pintcode_body:
  4767                           	opt stack 21
  4768  001230                     int_func:
  4769                           	opt stack 21
  4770  001230  0006               	pop		; remove dummy address from shadow register refresh
  4771  001232  CFFA F016          	movff	pclath,??_HighISR
  4772  001236  CFFB F017          	movff	pclatu,??_HighISR+1
  4773  00123A  CFE9 F018          	movff	fsr0l,??_HighISR+2
  4774  00123E  CFEA F019          	movff	fsr0h,??_HighISR+3
  4775  001242  CFE1 F01A          	movff	fsr1l,??_HighISR+4
  4776  001246  CFE2 F01B          	movff	fsr1h,??_HighISR+5
  4777  00124A  CFD9 F01C          	movff	fsr2l,??_HighISR+6
  4778  00124E  CFDA F01D          	movff	fsr2h,??_HighISR+7
  4779  001252  CFF3 F01E          	movff	prodl,??_HighISR+8
  4780  001256  CFF4 F01F          	movff	prodh,??_HighISR+9
  4781  00125A  CFF6 F020          	movff	tblptrl,??_HighISR+10
  4782  00125E  CFF7 F021          	movff	tblptrh,??_HighISR+11
  4783  001262  CFF8 F022          	movff	tblptru,??_HighISR+12
  4784  001266  CFF5 F023          	movff	tablat,??_HighISR+13
  4785  00126A  C04A  F024         	movff	btemp,??_HighISR+14
  4786  00126E  C04B  F025         	movff	btemp+1,??_HighISR+15
  4787  001272  C04C  F026         	movff	btemp+2,??_HighISR+16
  4788  001276  C04D  F027         	movff	btemp+3,??_HighISR+17
  4789                           
  4790                           ;UART_Driver.c: 257: if (PIR1bits.RC1IF) {
  4791  00127A  AA9E               	btfss	3998,5,c	;volatile
  4792  00127C  D00E               	goto	i2l178
  4793                           
  4794                           ;UART_Driver.c: 258: PIR1bits.RC1IF = 0;
  4795  00127E  9A9E               	bcf	3998,5,c	;volatile
  4796                           
  4797                           ;UART_Driver.c: 261: if(RCSTAbits.FERR == 1) {
  4798  001280  A4AB               	btfss	4011,2,c	;volatile
  4799  001282  D003               	goto	i2l179
  4800                           
  4801                           ;UART_Driver.c: 262: RCREG = 0x00;
  4802  001284  0E00               	movlw	0
  4803  001286  6EAE               	movwf	4014,c	;volatile
  4804                           
  4805                           ;UART_Driver.c: 263: return;
  4806  001288  D008               	goto	i2l178
  4807  00128A                     i2l179:
  4808                           
  4809                           ;UART_Driver.c: 264: }
  4810                           ;UART_Driver.c: 266: if(RCSTAbits.OERR == 1) {
  4811  00128A  A2AB               	btfss	4011,1,c	;volatile
  4812  00128C  D003               	goto	i2l181
  4813                           
  4814                           ;UART_Driver.c: 267: RCSTAbits.CREN = 0;
  4815  00128E  98AB               	bcf	4011,4,c	;volatile
  4816                           
  4817                           ;UART_Driver.c: 268: RCSTAbits.CREN = 1;
  4818  001290  88AB               	bsf	4011,4,c	;volatile
  4819                           
  4820                           ;UART_Driver.c: 269: return;
  4821  001292  D003               	goto	i2l178
  4822  001294                     i2l181:
  4823                           
  4824                           ;UART_Driver.c: 270: }
  4825                           ;UART_Driver.c: 271: fillDataBuffer(RCREG);
  4826  001294  50AE               	movf	4014,w,c	;volatile
  4827  001296  EC6A  F005         	call	_fillDataBuffer
  4828  00129A                     i2l178:
  4829  00129A  C027  F04D         	movff	??_HighISR+17,btemp+3
  4830  00129E  C026  F04C         	movff	??_HighISR+16,btemp+2
  4831  0012A2  C025  F04B         	movff	??_HighISR+15,btemp+1
  4832  0012A6  C024  F04A         	movff	??_HighISR+14,btemp
  4833  0012AA  C023  FFF5         	movff	??_HighISR+13,tablat
  4834  0012AE  C022  FFF8         	movff	??_HighISR+12,tblptru
  4835  0012B2  C021  FFF7         	movff	??_HighISR+11,tblptrh
  4836  0012B6  C020  FFF6         	movff	??_HighISR+10,tblptrl
  4837  0012BA  C01F  FFF4         	movff	??_HighISR+9,prodh
  4838  0012BE  C01E  FFF3         	movff	??_HighISR+8,prodl
  4839  0012C2  C01D  FFDA         	movff	??_HighISR+7,fsr2h
  4840  0012C6  C01C  FFD9         	movff	??_HighISR+6,fsr2l
  4841  0012CA  C01B  FFE2         	movff	??_HighISR+5,fsr1h
  4842  0012CE  C01A  FFE1         	movff	??_HighISR+4,fsr1l
  4843  0012D2  C019  FFEA         	movff	??_HighISR+3,fsr0h
  4844  0012D6  C018  FFE9         	movff	??_HighISR+2,fsr0l
  4845  0012DA  C017  FFFB         	movff	??_HighISR+1,pclatu
  4846  0012DE  C016  FFFA         	movff	??_HighISR,pclath
  4847  0012E2  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4848  0012E4  0011               	retfie		f
  4849  0012E6                     __end_of_HighISR:
  4850                           	opt stack 0
  4851                           pclatu	equ	0xFFB
  4852                           pclath	equ	0xFFA
  4853                           tblptru	equ	0xFF8
  4854                           tblptrh	equ	0xFF7
  4855                           tblptrl	equ	0xFF6
  4856                           tablat	equ	0xFF5
  4857                           prodh	equ	0xFF4
  4858                           prodl	equ	0xFF3
  4859                           intcon	equ	0xFF2
  4860                           intcon2	equ	0xFF1
  4861                           indf0	equ	0xFEF
  4862                           postinc0	equ	0xFEE
  4863                           plusw0	equ	0xFEB
  4864                           fsr0h	equ	0xFEA
  4865                           fsr0l	equ	0xFE9
  4866                           wreg	equ	0xFE8
  4867                           indf1	equ	0xFE7
  4868                           postinc1	equ	0xFE6
  4869                           postdec1	equ	0xFE5
  4870                           fsr1h	equ	0xFE2
  4871                           fsr1l	equ	0xFE1
  4872                           bsr	equ	0xFE0
  4873                           indf2	equ	0xFDF
  4874                           postinc2	equ	0xFDE
  4875                           postdec2	equ	0xFDD
  4876                           plusw2	equ	0xFDB
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _fillDataBuffer *****************
  4882 ;; Defined at:
  4883 ;;		line 69 in file "Drivers/UART_Driver.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  data            1    wreg     unsigned char 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  data            1   20[COMRAM] unsigned char 
  4888 ;; Return value:  Size  Location     Type
  4889 ;;                  1    wreg      void 
  4890 ;; Registers used:
  4891 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4892 ;; Tracked objects:
  4893 ;;		On entry : 0/0
  4894 ;;		On exit  : 0/0
  4895 ;;		Unchanged: 0/0
  4896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4897 ;;      Params:         0       0       0       0       0       0       0       0       0
  4898 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4900 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4901 ;;Total ram usage:        1 bytes
  4902 ;; Hardware stack levels used:    1
  4903 ;; Hardware stack levels required when called:    3
  4904 ;; This function calls:
  4905 ;;		_acknowledge
  4906 ;; This function is called by:
  4907 ;;		_HighISR
  4908 ;; This function uses a non-reentrant model
  4909 ;;
  4910                           
  4911                           	psect	text27
  4912  000AD4                     __ptext27:
  4913                           	opt stack 0
  4914  000AD4                     _fillDataBuffer:
  4915                           	opt stack 21
  4916                           
  4917                           ;incstack = 0
  4918                           ;fillDataBuffer@data stored from wreg
  4919  000AD4  6E15               	movwf	fillDataBuffer@data,c
  4920                           
  4921                           ;UART_Driver.c: 70: switch(readBuffer.state) {
  4922  000AD6  D0B1               	goto	i2l122
  4923  000AD8                     
  4924                           ;UART_Driver.c: 72: if(data == 0x26) {
  4925  000AD8  0E26               	movlw	38
  4926  000ADA  1815               	xorwf	fillDataBuffer@data,w,c
  4927  000ADC  A4D8               	btfss	status,2,c
  4928  000ADE  D00E               	goto	i2l124
  4929                           
  4930                           ;UART_Driver.c: 73: readBuffer.typeCnt = 0;
  4931  000AE0  0E00               	movlw	0
  4932  000AE2  0101               	movlb	1	; () banked
  4933  000AE4  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4934                           
  4935                           ;UART_Driver.c: 74: readBuffer.senderCnt = 0;
  4936  000AE6  0E00               	movlw	0
  4937  000AE8  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4938                           
  4939                           ;UART_Driver.c: 75: readBuffer.commandCnt = 0;
  4940  000AEA  0E00               	movlw	0
  4941  000AEC  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4942                           
  4943                           ;UART_Driver.c: 76: readBuffer.messageCnt = 0;
  4944  000AEE  0E00               	movlw	0
  4945  000AF0  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4946                           
  4947                           ;UART_Driver.c: 77: readReady = 0;
  4948  000AF2  0E00               	movlw	0
  4949  000AF4  6E40               	movwf	_readReady,c
  4950                           
  4951                           ;UART_Driver.c: 78: readBuffer.state = 0x01;
  4952  000AF6  0E01               	movlw	1
  4953  000AF8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4954                           
  4955                           ;UART_Driver.c: 79: } else {
  4956  000AFA  0012               	return	
  4957  000AFC                     i2l124:
  4958                           
  4959                           ;UART_Driver.c: 80: readBuffer.state = 0x00;
  4960                           
  4961                           ; BSR set to: 1
  4962  000AFC  0E00               	movlw	0
  4963  000AFE  0101               	movlb	1	; () banked
  4964  000B00  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4965                           
  4966                           ; BSR set to: 1
  4967                           ;UART_Driver.c: 82: }
  4968                           ;UART_Driver.c: 83: break;
  4969                           
  4970                           ; BSR set to: 1
  4971                           ;UART_Driver.c: 81: return;
  4972  000B02  0012               	return	
  4973  000B04                     
  4974                           ; BSR set to: 1
  4975                           ;UART_Driver.c: 86: if (data == 0x3A) {
  4976                           
  4977                           ; BSR set to: 1
  4978  000B04  0E3A               	movlw	58
  4979  000B06  1815               	xorwf	fillDataBuffer@data,w,c
  4980  000B08  A4D8               	btfss	status,2,c
  4981  000B0A  D00D               	goto	i2l129
  4982                           
  4983                           ; BSR set to: 1
  4984                           ;UART_Driver.c: 87: readBuffer.state = 0x02;
  4985  000B0C  0E02               	movlw	2
  4986  000B0E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4987                           
  4988                           ; BSR set to: 1
  4989                           ;UART_Driver.c: 88: readBuffer.type[readBuffer.typeCnt] = '\0';
  4990  000B10  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4991  000B12  0D01               	mullw	1
  4992  000B14  0E00               	movlw	low _readBuffer
  4993  000B16  24F3               	addwf	prodl,w,c
  4994  000B18  6ED9               	movwf	fsr2l,c
  4995  000B1A  0E01               	movlw	high _readBuffer
  4996  000B1C  20F4               	addwfc	prodh,w,c
  4997  000B1E  6EDA               	movwf	fsr2h,c
  4998  000B20  0E00               	movlw	0
  4999  000B22  6EDF               	movwf	indf2,c
  5000                           
  5001                           ;UART_Driver.c: 89: } else {
  5002  000B24  0012               	return	
  5003  000B26                     i2l129:
  5004                           
  5005                           ; BSR set to: 1
  5006                           ;UART_Driver.c: 90: readBuffer.type[readBuffer.typeCnt] = data;
  5007                           
  5008                           ; BSR set to: 1
  5009  000B26  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5010  000B28  0D01               	mullw	1
  5011  000B2A  0E00               	movlw	low _readBuffer
  5012  000B2C  24F3               	addwf	prodl,w,c
  5013  000B2E  6ED9               	movwf	fsr2l,c
  5014  000B30  0E01               	movlw	high _readBuffer
  5015  000B32  20F4               	addwfc	prodh,w,c
  5016  000B34  6EDA               	movwf	fsr2h,c
  5017  000B36  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5018                           
  5019                           ; BSR set to: 1
  5020                           ;UART_Driver.c: 91: readBuffer.typeCnt++;
  5021  000B3A  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5022                           
  5023                           ; BSR set to: 1
  5024                           ;UART_Driver.c: 92: if(readBuffer.typeCnt > 10) {
  5025  000B3C  0E0A               	movlw	10
  5026  000B3E  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5027  000B40  0012               	return	
  5028                           
  5029                           ; BSR set to: 1
  5030                           ;UART_Driver.c: 93: readBuffer.typeCnt = 0;
  5031  000B42  0E00               	movlw	0
  5032  000B44  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5033                           
  5034                           ; BSR set to: 1
  5035                           ;UART_Driver.c: 94: }
  5036                           ;UART_Driver.c: 95: }
  5037                           ;UART_Driver.c: 96: break;
  5038                           
  5039                           ; BSR set to: 1
  5040  000B46  0012               	return	
  5041  000B48                     
  5042                           ; BSR set to: 1
  5043                           ;UART_Driver.c: 99: if (data == 0x3A) {
  5044                           
  5045                           ; BSR set to: 1
  5046  000B48  0E3A               	movlw	58
  5047  000B4A  1815               	xorwf	fillDataBuffer@data,w,c
  5048  000B4C  A4D8               	btfss	status,2,c
  5049  000B4E  D00D               	goto	i2l133
  5050                           
  5051                           ; BSR set to: 1
  5052                           ;UART_Driver.c: 100: readBuffer.state = 0x03;
  5053  000B50  0E03               	movlw	3
  5054  000B52  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5055                           
  5056                           ; BSR set to: 1
  5057                           ;UART_Driver.c: 101: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5058  000B54  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5059  000B56  0D01               	mullw	1
  5060  000B58  0E0B               	movlw	low (_readBuffer+11)
  5061  000B5A  24F3               	addwf	prodl,w,c
  5062  000B5C  6ED9               	movwf	fsr2l,c
  5063  000B5E  0E01               	movlw	high (_readBuffer+11)
  5064  000B60  20F4               	addwfc	prodh,w,c
  5065  000B62  6EDA               	movwf	fsr2h,c
  5066  000B64  0E00               	movlw	0
  5067  000B66  6EDF               	movwf	indf2,c
  5068                           
  5069                           ;UART_Driver.c: 102: } else {
  5070  000B68  0012               	return	
  5071  000B6A                     i2l133:
  5072                           
  5073                           ; BSR set to: 1
  5074                           ;UART_Driver.c: 103: readBuffer.sender[readBuffer.senderCnt] = data;
  5075                           
  5076                           ; BSR set to: 1
  5077  000B6A  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5078  000B6C  0D01               	mullw	1
  5079  000B6E  0E0B               	movlw	low (_readBuffer+11)
  5080  000B70  24F3               	addwf	prodl,w,c
  5081  000B72  6ED9               	movwf	fsr2l,c
  5082  000B74  0E01               	movlw	high (_readBuffer+11)
  5083  000B76  20F4               	addwfc	prodh,w,c
  5084  000B78  6EDA               	movwf	fsr2h,c
  5085  000B7A  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5086                           
  5087                           ; BSR set to: 1
  5088                           ;UART_Driver.c: 104: readBuffer.senderCnt++;
  5089  000B7E  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5090                           
  5091                           ; BSR set to: 1
  5092                           ;UART_Driver.c: 105: if(readBuffer.senderCnt > 50) {
  5093  000B80  0E32               	movlw	50
  5094  000B82  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5095  000B84  0012               	return	
  5096                           
  5097                           ; BSR set to: 1
  5098                           ;UART_Driver.c: 106: readBuffer.senderCnt = 0;
  5099  000B86  0E00               	movlw	0
  5100  000B88  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5101                           
  5102                           ; BSR set to: 1
  5103                           ;UART_Driver.c: 107: }
  5104                           ;UART_Driver.c: 108: }
  5105                           ;UART_Driver.c: 109: break;
  5106                           
  5107                           ; BSR set to: 1
  5108  000B8A  0012               	return	
  5109  000B8C                     
  5110                           ; BSR set to: 1
  5111                           ;UART_Driver.c: 112: if (data == 0x3A) {
  5112                           
  5113                           ; BSR set to: 1
  5114  000B8C  0E3A               	movlw	58
  5115  000B8E  1815               	xorwf	fillDataBuffer@data,w,c
  5116  000B90  A4D8               	btfss	status,2,c
  5117  000B92  D00D               	goto	i2l137
  5118                           
  5119                           ; BSR set to: 1
  5120                           ;UART_Driver.c: 113: readBuffer.state = 0x04;
  5121  000B94  0E04               	movlw	4
  5122  000B96  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5123                           
  5124                           ; BSR set to: 1
  5125                           ;UART_Driver.c: 114: readBuffer.command[readBuffer.commandCnt] = '\0';
  5126  000B98  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5127  000B9A  0D01               	mullw	1
  5128  000B9C  0E3E               	movlw	low (_readBuffer+62)
  5129  000B9E  24F3               	addwf	prodl,w,c
  5130  000BA0  6ED9               	movwf	fsr2l,c
  5131  000BA2  0E01               	movlw	high (_readBuffer+62)
  5132  000BA4  20F4               	addwfc	prodh,w,c
  5133  000BA6  6EDA               	movwf	fsr2h,c
  5134  000BA8  0E00               	movlw	0
  5135  000BAA  6EDF               	movwf	indf2,c
  5136                           
  5137                           ;UART_Driver.c: 115: } else {
  5138  000BAC  0012               	return	
  5139  000BAE                     i2l137:
  5140                           
  5141                           ; BSR set to: 1
  5142                           ;UART_Driver.c: 116: readBuffer.command[readBuffer.commandCnt] = data;
  5143                           
  5144                           ; BSR set to: 1
  5145  000BAE  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5146  000BB0  0D01               	mullw	1
  5147  000BB2  0E3E               	movlw	low (_readBuffer+62)
  5148  000BB4  24F3               	addwf	prodl,w,c
  5149  000BB6  6ED9               	movwf	fsr2l,c
  5150  000BB8  0E01               	movlw	high (_readBuffer+62)
  5151  000BBA  20F4               	addwfc	prodh,w,c
  5152  000BBC  6EDA               	movwf	fsr2h,c
  5153  000BBE  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5154                           
  5155                           ; BSR set to: 1
  5156                           ;UART_Driver.c: 117: readBuffer.commandCnt++;
  5157  000BC2  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5158                           
  5159                           ; BSR set to: 1
  5160                           ;UART_Driver.c: 118: if(readBuffer.commandCnt > 50) {
  5161  000BC4  0E32               	movlw	50
  5162  000BC6  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5163  000BC8  0012               	return	
  5164                           
  5165                           ; BSR set to: 1
  5166                           ;UART_Driver.c: 119: readBuffer.commandCnt = 0;
  5167  000BCA  0E00               	movlw	0
  5168  000BCC  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5169                           
  5170                           ; BSR set to: 1
  5171                           ;UART_Driver.c: 120: }
  5172                           ;UART_Driver.c: 121: }
  5173                           ;UART_Driver.c: 122: break;
  5174                           
  5175                           ; BSR set to: 1
  5176  000BCE  0012               	return	
  5177  000BD0                     
  5178                           ; BSR set to: 1
  5179                           ;UART_Driver.c: 125: if (data == 0x3A) {
  5180                           
  5181                           ; BSR set to: 1
  5182  000BD0  0E3A               	movlw	58
  5183  000BD2  1815               	xorwf	fillDataBuffer@data,w,c
  5184  000BD4  A4D8               	btfss	status,2,c
  5185  000BD6  D00D               	goto	i2l141
  5186                           
  5187                           ; BSR set to: 1
  5188                           ;UART_Driver.c: 126: readBuffer.state = 0x05;
  5189  000BD8  0E05               	movlw	5
  5190  000BDA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5191                           
  5192                           ; BSR set to: 1
  5193                           ;UART_Driver.c: 127: readBuffer.message[readBuffer.messageCnt] = '\0';
  5194  000BDC  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5195  000BDE  0D01               	mullw	1
  5196  000BE0  0E71               	movlw	low (_readBuffer+113)
  5197  000BE2  24F3               	addwf	prodl,w,c
  5198  000BE4  6ED9               	movwf	fsr2l,c
  5199  000BE6  0E01               	movlw	high (_readBuffer+113)
  5200  000BE8  20F4               	addwfc	prodh,w,c
  5201  000BEA  6EDA               	movwf	fsr2h,c
  5202  000BEC  0E00               	movlw	0
  5203  000BEE  6EDF               	movwf	indf2,c
  5204                           
  5205                           ;UART_Driver.c: 128: } else {
  5206  000BF0  0012               	return	
  5207  000BF2                     i2l141:
  5208                           
  5209                           ; BSR set to: 1
  5210                           ;UART_Driver.c: 129: readBuffer.message[readBuffer.messageCnt] = data;
  5211                           
  5212                           ; BSR set to: 1
  5213  000BF2  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5214  000BF4  0D01               	mullw	1
  5215  000BF6  0E71               	movlw	low (_readBuffer+113)
  5216  000BF8  24F3               	addwf	prodl,w,c
  5217  000BFA  6ED9               	movwf	fsr2l,c
  5218  000BFC  0E01               	movlw	high (_readBuffer+113)
  5219  000BFE  20F4               	addwfc	prodh,w,c
  5220  000C00  6EDA               	movwf	fsr2h,c
  5221  000C02  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5222                           
  5223                           ; BSR set to: 1
  5224                           ;UART_Driver.c: 130: readBuffer.messageCnt++;
  5225  000C06  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5226                           
  5227                           ; BSR set to: 1
  5228                           ;UART_Driver.c: 131: if(readBuffer.messageCnt > 50) {
  5229  000C08  0E32               	movlw	50
  5230  000C0A  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5231  000C0C  0012               	return	
  5232                           
  5233                           ; BSR set to: 1
  5234                           ;UART_Driver.c: 132: readBuffer.messageCnt = 0;
  5235  000C0E  0E00               	movlw	0
  5236  000C10  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5237                           
  5238                           ; BSR set to: 1
  5239                           ;UART_Driver.c: 133: }
  5240                           ;UART_Driver.c: 134: }
  5241                           ;UART_Driver.c: 135: break;
  5242                           
  5243                           ; BSR set to: 1
  5244  000C12  0012               	return	
  5245  000C14                     
  5246                           ; BSR set to: 1
  5247                           ;UART_Driver.c: 138: if (data == 0x24) {
  5248                           
  5249                           ; BSR set to: 1
  5250  000C14  0E24               	movlw	36
  5251  000C16  1815               	xorwf	fillDataBuffer@data,w,c
  5252  000C18  A4D8               	btfss	status,2,c
  5253  000C1A  D008               	goto	i2l145
  5254                           
  5255                           ; BSR set to: 1
  5256                           ;UART_Driver.c: 139: acknowledge();
  5257  000C1C  EC28  F00B         	call	_acknowledge	;wreg free
  5258                           
  5259                           ;UART_Driver.c: 140: readBuffer.state = 0x00;
  5260  000C20  0E00               	movlw	0
  5261  000C22  0101               	movlb	1	; () banked
  5262  000C24  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5263                           
  5264                           ; BSR set to: 1
  5265                           ;UART_Driver.c: 141: readReady = 1;
  5266  000C26  0E01               	movlw	1
  5267  000C28  6E40               	movwf	_readReady,c
  5268                           
  5269                           ;UART_Driver.c: 142: } else {
  5270  000C2A  0012               	return	
  5271  000C2C                     i2l145:
  5272                           
  5273                           ; BSR set to: 1
  5274                           ;UART_Driver.c: 144: readBuffer.readId = (uint8_t)(data - 0x30);
  5275                           
  5276                           ; BSR set to: 1
  5277  000C2C  5015               	movf	fillDataBuffer@data,w,c
  5278  000C2E  0FD0               	addlw	208
  5279  000C30  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  5280                           
  5281                           ; BSR set to: 1
  5282                           ;UART_Driver.c: 145: }
  5283                           ;UART_Driver.c: 146: break;
  5284  000C32  0012               	return	
  5285  000C34                     
  5286                           ; BSR set to: 1
  5287                           ;UART_Driver.c: 149: readBuffer.state = 0x00;
  5288                           
  5289                           ; BSR set to: 1
  5290  000C34  0E00               	movlw	0
  5291  000C36  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5292                           
  5293                           ; BSR set to: 1
  5294                           ;UART_Driver.c: 151: }
  5295                           
  5296                           ;UART_Driver.c: 150: break;
  5297  000C38  0012               	return	
  5298  000C3A                     i2l122:
  5299                           
  5300                           ; BSR set to: 1
  5301  000C3A  0101               	movlb	1	; () banked
  5302  000C3C  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  5303                           
  5304                           ; Switch size 1, requested type "space"
  5305                           ; Number of cases is 6, Range of values is 0 to 5
  5306                           ; switch strategies available:
  5307                           ; Name         Instructions Cycles
  5308                           ; simple_byte           19    10 (average)
  5309                           ;	Chosen strategy is simple_byte
  5310  000C3E  0A00               	xorlw	0	; case 0
  5311  000C40  B4D8               	btfsc	status,2,c
  5312  000C42  D74A               	goto	i2l123
  5313  000C44  0A01               	xorlw	1	; case 1
  5314  000C46  B4D8               	btfsc	status,2,c
  5315  000C48  D75D               	goto	i2l128
  5316  000C4A  0A03               	xorlw	3	; case 2
  5317  000C4C  B4D8               	btfsc	status,2,c
  5318  000C4E  D77C               	goto	i2l132
  5319  000C50  0A01               	xorlw	1	; case 3
  5320  000C52  B4D8               	btfsc	status,2,c
  5321  000C54  D79B               	goto	i2l136
  5322  000C56  0A07               	xorlw	7	; case 4
  5323  000C58  B4D8               	btfsc	status,2,c
  5324  000C5A  D7BA               	goto	i2l140
  5325  000C5C  0A01               	xorlw	1	; case 5
  5326  000C5E  B4D8               	btfsc	status,2,c
  5327  000C60  D7D9               	goto	i2l144
  5328  000C62  D7E8               	goto	i2l147
  5329  000C64                     __end_of_fillDataBuffer:
  5330                           	opt stack 0
  5331                           pclatu	equ	0xFFB
  5332                           pclath	equ	0xFFA
  5333                           tblptru	equ	0xFF8
  5334                           tblptrh	equ	0xFF7
  5335                           tblptrl	equ	0xFF6
  5336                           tablat	equ	0xFF5
  5337                           prodh	equ	0xFF4
  5338                           prodl	equ	0xFF3
  5339                           intcon	equ	0xFF2
  5340                           intcon2	equ	0xFF1
  5341                           indf0	equ	0xFEF
  5342                           postinc0	equ	0xFEE
  5343                           plusw0	equ	0xFEB
  5344                           fsr0h	equ	0xFEA
  5345                           fsr0l	equ	0xFE9
  5346                           wreg	equ	0xFE8
  5347                           indf1	equ	0xFE7
  5348                           postinc1	equ	0xFE6
  5349                           postdec1	equ	0xFE5
  5350                           fsr1h	equ	0xFE2
  5351                           fsr1l	equ	0xFE1
  5352                           bsr	equ	0xFE0
  5353                           indf2	equ	0xFDF
  5354                           postinc2	equ	0xFDE
  5355                           postdec2	equ	0xFDD
  5356                           plusw2	equ	0xFDB
  5357                           fsr2h	equ	0xFDA
  5358                           fsr2l	equ	0xFD9
  5359                           status	equ	0xFD8
  5360                           
  5361 ;; *************** function _acknowledge *****************
  5362 ;; Defined at:
  5363 ;;		line 154 in file "Drivers/UART_Driver.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;		None
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;		None
  5368 ;; Return value:  Size  Location     Type
  5369 ;;                  1    wreg      void 
  5370 ;; Registers used:
  5371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5372 ;; Tracked objects:
  5373 ;;		On entry : 0/0
  5374 ;;		On exit  : 0/0
  5375 ;;		Unchanged: 0/0
  5376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5377 ;;      Params:         0       0       0       0       0       0       0       0       0
  5378 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5380 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5381 ;;Total ram usage:        0 bytes
  5382 ;; Hardware stack levels used:    1
  5383 ;; Hardware stack levels required when called:    2
  5384 ;; This function calls:
  5385 ;;		i2_printf
  5386 ;; This function is called by:
  5387 ;;		_fillDataBuffer
  5388 ;; This function uses a non-reentrant model
  5389 ;;
  5390                           
  5391                           	psect	text28
  5392  001650                     __ptext28:
  5393                           	opt stack 0
  5394  001650                     _acknowledge:
  5395                           	opt stack 21
  5396                           
  5397                           ;UART_Driver.c: 155: printf(startCharacter);
  5398                           
  5399                           ; BSR set to: 1
  5400                           ;incstack = 0
  5401  001650  C048  F008         	movff	_startCharacter,i2printf@f
  5402  001654  C049  F009         	movff	_startCharacter+1,i2printf@f+1
  5403  001658  5008               	movf	i2printf@f,w,c
  5404  00165A  1009               	iorwf	i2printf@f+1,w,c
  5405  00165C  A4D8               	btfss	status,2,c
  5406  00165E  0E00               	movlw	low (__mediumconst shr (0+16))
  5407  001660  6E0A               	movwf	i2printf@f+2,c
  5408  001662  EC88  F007         	call	i2_printf	;wreg free
  5409                           
  5410                           ;UART_Driver.c: 157: printf(ackCharacter);
  5411  001666  C042  F008         	movff	_ackCharacter,i2printf@f
  5412  00166A  C043  F009         	movff	_ackCharacter+1,i2printf@f+1
  5413  00166E  5008               	movf	i2printf@f,w,c
  5414  001670  1009               	iorwf	i2printf@f+1,w,c
  5415  001672  A4D8               	btfss	status,2,c
  5416  001674  0E00               	movlw	low (__mediumconst shr (0+16))
  5417  001676  6E0A               	movwf	i2printf@f+2,c
  5418  001678  EC88  F007         	call	i2_printf	;wreg free
  5419                           
  5420                           ;UART_Driver.c: 159: printf("%x",readBuffer.readId);
  5421  00167C  0E22               	movlw	low STR_5
  5422  00167E  6E08               	movwf	i2printf@f,c
  5423  001680  0E08               	movlw	high STR_5
  5424  001682  6E09               	movwf	i2printf@f+1,c
  5425  001684  5008               	movf	i2printf@f,w,c
  5426  001686  1009               	iorwf	i2printf@f+1,w,c
  5427  001688  A4D8               	btfss	status,2,c
  5428  00168A  0E00               	movlw	low (__mediumconst shr (0+16))
  5429  00168C  6E0A               	movwf	i2printf@f+2,c
  5430  00168E  C1A4  F00B         	movff	_readBuffer+164,?i2_printf+3
  5431  001692  6A0C               	clrf	?i2_printf+4,c
  5432  001694  EC88  F007         	call	i2_printf	;wreg free
  5433                           
  5434                           ;UART_Driver.c: 161: printf(stopCharacter);
  5435  001698  C046  F008         	movff	_stopCharacter,i2printf@f
  5436  00169C  C047  F009         	movff	_stopCharacter+1,i2printf@f+1
  5437  0016A0  5008               	movf	i2printf@f,w,c
  5438  0016A2  1009               	iorwf	i2printf@f+1,w,c
  5439  0016A4  A4D8               	btfss	status,2,c
  5440  0016A6  0E00               	movlw	low (__mediumconst shr (0+16))
  5441  0016A8  6E0A               	movwf	i2printf@f+2,c
  5442  0016AA  EC88  F007         	call	i2_printf	;wreg free
  5443  0016AE  0012               	return		;funcret
  5444  0016B0                     __end_of_acknowledge:
  5445                           	opt stack 0
  5446                           pclatu	equ	0xFFB
  5447                           pclath	equ	0xFFA
  5448                           tblptru	equ	0xFF8
  5449                           tblptrh	equ	0xFF7
  5450                           tblptrl	equ	0xFF6
  5451                           tablat	equ	0xFF5
  5452                           prodh	equ	0xFF4
  5453                           prodl	equ	0xFF3
  5454                           intcon	equ	0xFF2
  5455                           intcon2	equ	0xFF1
  5456                           indf0	equ	0xFEF
  5457                           postinc0	equ	0xFEE
  5458                           plusw0	equ	0xFEB
  5459                           fsr0h	equ	0xFEA
  5460                           fsr0l	equ	0xFE9
  5461                           wreg	equ	0xFE8
  5462                           indf1	equ	0xFE7
  5463                           postinc1	equ	0xFE6
  5464                           postdec1	equ	0xFE5
  5465                           fsr1h	equ	0xFE2
  5466                           fsr1l	equ	0xFE1
  5467                           bsr	equ	0xFE0
  5468                           indf2	equ	0xFDF
  5469                           postinc2	equ	0xFDE
  5470                           postdec2	equ	0xFDD
  5471                           plusw2	equ	0xFDB
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function i2_printf *****************
  5477 ;; Defined at:
  5478 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  f               3    7[COMRAM] PTR const unsigned char 
  5481 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  5482 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  5483 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  5484 ;;		 -> C_DOOR_SendStates@com(3), 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  printf          4    0        struct .
  5487 ;;  printf          3    0        PTR const unsigned char 
  5488 ;;  printf          2   16[COMRAM] unsigned int 
  5489 ;;  printf          2   14[COMRAM] PTR void [1]
  5490 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5491 ;;  printf          2    0        unsigned int 
  5492 ;;  printf          1   19[COMRAM] char 
  5493 ;;  printf          1   18[COMRAM] char 
  5494 ;;  printf          1   13[COMRAM] unsigned char 
  5495 ;;  printf          1   12[COMRAM] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  2    7[COMRAM] int 
  5498 ;; Registers used:
  5499 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5505 ;;      Params:         5       0       0       0       0       0       0       0       0
  5506 ;;      Locals:         8       0       0       0       0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5508 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5509 ;;Total ram usage:       13 bytes
  5510 ;; Hardware stack levels used:    1
  5511 ;; Hardware stack levels required when called:    1
  5512 ;; This function calls:
  5513 ;;		i2___lwdiv
  5514 ;;		i2_putch
  5515 ;; This function is called by:
  5516 ;;		_acknowledge
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text29
  5521  000F10                     __ptext29:
  5522                           	opt stack 0
  5523  000F10                     i2_printf:
  5524                           	opt stack 21
  5525                           
  5526                           ;doprnt.c: 466: va_list ap;
  5527                           ;doprnt.c: 499: signed char c;
  5528                           ;doprnt.c: 506: signed char prec;
  5529                           ;doprnt.c: 508: unsigned char flag;
  5530                           ;doprnt.c: 523: union {
  5531                           ;doprnt.c: 524: unsigned long vd;
  5532                           ;doprnt.c: 525: double integ;
  5533                           ;doprnt.c: 526: } tmpval;
  5534                           ;doprnt.c: 528: unsigned int val;
  5535                           ;doprnt.c: 529: unsigned len;
  5536                           ;doprnt.c: 530: const char * cp;
  5537                           ;doprnt.c: 533: *ap = __va_start();
  5538                           
  5539                           ;incstack = 0
  5540  000F10  0E0B               	movlw	low (?i2_printf+3)
  5541  000F12  6E0F               	movwf	i2printf@ap,c
  5542  000F14  0E00               	movlw	high (?i2_printf+3)
  5543  000F16  6E10               	movwf	i2printf@ap+1,c
  5544                           
  5545                           ;doprnt.c: 536: while(c = *f++) {
  5546  000F18  D085               	goto	i2u191_40
  5547  000F1A                     
  5548                           ;doprnt.c: 538: if(c != '%')
  5549  000F1A  0E25               	movlw	37
  5550  000F1C  1814               	xorwf	i2printf@c,w,c
  5551  000F1E  B4D8               	btfsc	status,2,c
  5552  000F20  D004               	goto	i2l375
  5553                           
  5554                           ;doprnt.c: 540: {
  5555                           ;doprnt.c: 541: (putch(c) );
  5556  000F22  5014               	movf	i2printf@c,w,c
  5557  000F24  EC6F  F00C         	call	i2_putch
  5558                           
  5559                           ;doprnt.c: 542: continue;
  5560  000F28  D07D               	goto	i2u191_40
  5561  000F2A                     i2l375:
  5562                           
  5563                           ;doprnt.c: 543: }
  5564                           ;doprnt.c: 548: flag = 0;
  5565  000F2A  0E00               	movlw	0
  5566  000F2C  6E0D               	movwf	i2printf@flag,c
  5567                           
  5568                           ;doprnt.c: 635: switch(c = *f++) {
  5569  000F2E  D004               	goto	i2l376
  5570  000F30                     
  5571                           ;doprnt.c: 809: (putch(c) );
  5572  000F30  5014               	movf	i2printf@c,w,c
  5573  000F32  EC6F  F00C         	call	i2_putch
  5574                           
  5575                           ;doprnt.c: 810: continue;
  5576  000F36  D076               	goto	i2u191_40
  5577  000F38                     i2l376:
  5578  000F38  C008  FFF6         	movff	i2printf@f,tblptrl
  5579  000F3C  C009  FFF7         	movff	i2printf@f+1,tblptrh
  5580  000F40  C00A  FFF8         	movff	i2printf@f+2,tblptru
  5581  000F44  0E01               	movlw	1
  5582  000F46  2608               	addwf	i2printf@f,f,c
  5583  000F48  0E00               	movlw	0
  5584  000F4A  2209               	addwfc	i2printf@f+1,f,c
  5585  000F4C  220A               	addwfc	i2printf@f+2,f,c
  5586  000F4E  BAF8               	btfsc	tblptru,5,c
  5587  000F50  D003               	bra	i2u187_47
  5588  000F52  0008               	tblrd		*
  5589  000F54  50F5               	movf	tablat,w,c
  5590  000F56  D005               	bra	i2u187_40
  5591  000F58                     i2u187_47:
  5592  000F58  CFF6 FFE9          	movff	tblptrl,fsr0l
  5593  000F5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5594  000F60  50EF               	movf	indf0,w,c
  5595  000F62                     i2u187_40:
  5596  000F62  6E14               	movwf	i2printf@c,c
  5597  000F64  5014               	movf	i2printf@c,w,c
  5598                           
  5599                           ; Switch size 1, requested type "space"
  5600                           ; Number of cases is 2, Range of values is 0 to 120
  5601                           ; switch strategies available:
  5602                           ; Name         Instructions Cycles
  5603                           ; simple_byte            7     4 (average)
  5604                           ;	Chosen strategy is simple_byte
  5605  000F66  0A00               	xorlw	0	; case 0
  5606  000F68  B4D8               	btfsc	status,2,c
  5607  000F6A  0012               	return	
  5608  000F6C  0A78               	xorlw	120	; case 120
  5609  000F6E  A4D8               	btfss	status,2,c
  5610  000F70  D7DF               	goto	i2l381
  5611                           
  5612                           ;doprnt.c: 1273: {
  5613                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5614  000F72  C00F  FFD9         	movff	i2printf@ap,fsr2l
  5615  000F76  C010  FFDA         	movff	i2printf@ap+1,fsr2h
  5616  000F7A  CFDE F011          	movff	postinc2,i2printf@val
  5617  000F7E  CFDD F012          	movff	postdec2,i2printf@val+1
  5618  000F82  0E02               	movlw	2
  5619  000F84  260F               	addwf	i2printf@ap,f,c
  5620  000F86  0E00               	movlw	0
  5621  000F88  2210               	addwfc	i2printf@ap+1,f,c
  5622                           
  5623                           ;doprnt.c: 1287: }
  5624                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5625  000F8A  0E01               	movlw	1
  5626  000F8C  6E14               	movwf	i2printf@c,c
  5627  000F8E  D014               	goto	i2l2253
  5628  000F90                     
  5629                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5630  000F90  5014               	movf	i2printf@c,w,c
  5631  000F92  0D02               	mullw	2
  5632  000F94  0E01               	movlw	low _hexpowers
  5633  000F96  24F3               	addwf	prodl,w,c
  5634  000F98  6EF6               	movwf	tblptrl,c
  5635  000F9A  0E08               	movlw	high _hexpowers
  5636  000F9C  20F4               	addwfc	prodh,w,c
  5637  000F9E  6EF7               	movwf	tblptrh,c
  5638  000FA0                     	if	1	;There are 3 active tblptr bytes
  5639  000FA0  6AF8               	clrf	tblptru,c
  5640  000FA2  0E00               	movlw	low (__mediumconst shr (0+16))
  5641  000FA4  22F8               	addwfc	tblptru,f,c
  5642  000FA6                     	endif
  5643  000FA6  0009               	tblrd		*+
  5644  000FA8  50F5               	movf	tablat,w,c
  5645  000FAA  5C11               	subwf	i2printf@val,w,c
  5646  000FAC  0009               	tblrd		*+
  5647  000FAE  50F5               	movf	tablat,w,c
  5648  000FB0  5812               	subwfb	i2printf@val+1,w,c
  5649  000FB2  A0D8               	btfss	status,0,c
  5650  000FB4  D005               	goto	i2u190_40
  5651                           
  5652                           ;doprnt.c: 1318: break;
  5653  000FB6  2A14               	incf	i2printf@c,f,c
  5654  000FB8                     i2l2253:
  5655  000FB8  0E04               	movlw	4
  5656  000FBA  1814               	xorwf	i2printf@c,w,c
  5657  000FBC  A4D8               	btfss	status,2,c
  5658  000FBE  D7E8               	goto	i2l382
  5659  000FC0                     i2u190_40:
  5660                           
  5661                           ;doprnt.c: 1422: {
  5662                           ;doprnt.c: 1469: }
  5663                           ;doprnt.c: 1472: prec = c;
  5664  000FC0  C014  F013         	movff	i2printf@c,i2printf@prec
  5665                           
  5666                           ;doprnt.c: 1474: while(prec--) {
  5667  000FC4  D02B               	goto	i2l385
  5668  000FC6                     
  5669                           ;doprnt.c: 1478: {
  5670                           ;doprnt.c: 1499: {
  5671                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5672  000FC6  C011  F001         	movff	i2printf@val,i2___lwdiv@dividend
  5673  000FCA  C012  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  5674  000FCE  5013               	movf	i2printf@prec,w,c
  5675  000FD0  0D02               	mullw	2
  5676  000FD2  0E01               	movlw	low _hexpowers
  5677  000FD4  24F3               	addwf	prodl,w,c
  5678  000FD6  6EF6               	movwf	tblptrl,c
  5679  000FD8  0E08               	movlw	high _hexpowers
  5680  000FDA  20F4               	addwfc	prodh,w,c
  5681  000FDC  6EF7               	movwf	tblptrh,c
  5682  000FDE                     	if	1	;There are 3 active tblptr bytes
  5683  000FDE  6AF8               	clrf	tblptru,c
  5684  000FE0  0E00               	movlw	low (__mediumconst shr (0+16))
  5685  000FE2  22F8               	addwfc	tblptru,f,c
  5686  000FE4                     	endif
  5687  000FE4  0009               	tblrd		*+
  5688  000FE6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  5689  000FEA  000A               	tblrd		*-
  5690  000FEC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  5691  000FF0  EC82  F00B         	call	i2___lwdiv	;wreg free
  5692  000FF4  5001               	movf	?i2___lwdiv,w,c
  5693  000FF6  0B0F               	andlw	15
  5694  000FF8  6E0E               	movwf	i2printf@idx,c
  5695                           
  5696                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5697  000FFA  500E               	movf	i2printf@idx,w,c
  5698  000FFC  0D01               	mullw	1
  5699  000FFE  0E09               	movlw	low STR_17
  5700  001000  24F3               	addwf	prodl,w,c
  5701  001002  6EF6               	movwf	tblptrl,c
  5702  001004  0E08               	movlw	high STR_17
  5703  001006  20F4               	addwfc	prodh,w,c
  5704  001008  6EF7               	movwf	tblptrh,c
  5705  00100A                     	if	1	;There are 3 active tblptr bytes
  5706  00100A  6AF8               	clrf	tblptru,c
  5707  00100C  0E00               	movlw	low (__mediumconst shr (0+16))
  5708  00100E  22F8               	addwfc	tblptru,f,c
  5709  001010                     	endif
  5710  001010  0008               	tblrd		*
  5711  001012  CFF5 F014          	movff	tablat,i2printf@c
  5712                           
  5713                           ;doprnt.c: 1508: }
  5714                           ;doprnt.c: 1523: }
  5715                           ;doprnt.c: 1524: (putch(c) );
  5716  001016  5014               	movf	i2printf@c,w,c
  5717  001018  EC6F  F00C         	call	i2_putch
  5718  00101C                     i2l385:
  5719  00101C  0613               	decf	i2printf@prec,f,c
  5720  00101E  2813               	incf	i2printf@prec,w,c
  5721  001020  A4D8               	btfss	status,2,c
  5722  001022  D7D1               	goto	i2l386
  5723  001024                     i2u191_40:
  5724  001024  C008  FFF6         	movff	i2printf@f,tblptrl
  5725  001028  C009  FFF7         	movff	i2printf@f+1,tblptrh
  5726  00102C  C00A  FFF8         	movff	i2printf@f+2,tblptru
  5727  001030  0E01               	movlw	1
  5728  001032  2608               	addwf	i2printf@f,f,c
  5729  001034  0E00               	movlw	0
  5730  001036  2209               	addwfc	i2printf@f+1,f,c
  5731  001038  220A               	addwfc	i2printf@f+2,f,c
  5732  00103A  BAF8               	btfsc	tblptru,5,c
  5733  00103C  D003               	bra	i2u192_47
  5734  00103E  0008               	tblrd		*
  5735  001040  50F5               	movf	tablat,w,c
  5736  001042  D005               	bra	i2u192_40
  5737  001044                     i2u192_47:
  5738  001044  CFF6 FFE9          	movff	tblptrl,fsr0l
  5739  001048  CFF7 FFEA          	movff	tblptrh,fsr0h
  5740  00104C  50EF               	movf	indf0,w,c
  5741  00104E                     i2u192_40:
  5742  00104E  6E14               	movwf	i2printf@c,c
  5743  001050  5014               	movf	i2printf@c,w,c
  5744  001052  B4D8               	btfsc	status,2,c
  5745  001054  0012               	return	
  5746  001056  D761               	goto	i2l374
  5747  001058                     __end_ofi2_printf:
  5748                           	opt stack 0
  5749                           pclatu	equ	0xFFB
  5750                           pclath	equ	0xFFA
  5751                           tblptru	equ	0xFF8
  5752                           tblptrh	equ	0xFF7
  5753                           tblptrl	equ	0xFF6
  5754                           tablat	equ	0xFF5
  5755                           prodh	equ	0xFF4
  5756                           prodl	equ	0xFF3
  5757                           intcon	equ	0xFF2
  5758                           intcon2	equ	0xFF1
  5759                           indf0	equ	0xFEF
  5760                           postinc0	equ	0xFEE
  5761                           plusw0	equ	0xFEB
  5762                           fsr0h	equ	0xFEA
  5763                           fsr0l	equ	0xFE9
  5764                           wreg	equ	0xFE8
  5765                           indf1	equ	0xFE7
  5766                           postinc1	equ	0xFE6
  5767                           postdec1	equ	0xFE5
  5768                           fsr1h	equ	0xFE2
  5769                           fsr1l	equ	0xFE1
  5770                           bsr	equ	0xFE0
  5771                           indf2	equ	0xFDF
  5772                           postinc2	equ	0xFDE
  5773                           postdec2	equ	0xFDD
  5774                           plusw2	equ	0xFDB
  5775                           fsr2h	equ	0xFDA
  5776                           fsr2l	equ	0xFD9
  5777                           status	equ	0xFD8
  5778                           
  5779 ;; *************** function i2_putch *****************
  5780 ;; Defined at:
  5781 ;;		line 244 in file "Drivers/UART_Driver.c"
  5782 ;; Parameters:    Size  Location     Type
  5783 ;;  data            1    wreg     unsigned char 
  5784 ;; Auto vars:     Size  Location     Type
  5785 ;;  data            1    0[COMRAM] unsigned char 
  5786 ;;  putch           1    1[COMRAM] unsigned char 
  5787 ;; Return value:  Size  Location     Type
  5788 ;;                  1    wreg      void 
  5789 ;; Registers used:
  5790 ;;		wreg, status,2, status,0, cstack
  5791 ;; Tracked objects:
  5792 ;;		On entry : 0/0
  5793 ;;		On exit  : 0/0
  5794 ;;		Unchanged: 0/0
  5795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5796 ;;      Params:         0       0       0       0       0       0       0       0       0
  5797 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5798 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5799 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5800 ;;Total ram usage:        2 bytes
  5801 ;; Hardware stack levels used:    1
  5802 ;; This function calls:
  5803 ;;		Nothing
  5804 ;; This function is called by:
  5805 ;;		i2_printf
  5806 ;; This function uses a non-reentrant model
  5807 ;;
  5808                           
  5809                           	psect	text30
  5810  0018DE                     __ptext30:
  5811                           	opt stack 0
  5812  0018DE                     i2_putch:
  5813                           	opt stack 21
  5814                           
  5815                           ;incstack = 0
  5816                           ;i2putch@data stored from wreg
  5817  0018DE  6E01               	movwf	i2putch@data,c
  5818                           
  5819                           ;UART_Driver.c: 245: uint8_t max = 0;
  5820  0018E0  0E00               	movlw	0
  5821  0018E2  6E02               	movwf	i2putch@max,c
  5822                           
  5823                           ;UART_Driver.c: 247: while(TXSTAbits.TRMT == 0 && max < 200) {
  5824  0018E4  D005               	goto	i2l168
  5825  0018E6                     
  5826                           ;UART_Driver.c: 248: max++;
  5827  0018E6  2A02               	incf	i2putch@max,f,c
  5828                           
  5829                           ;UART_Driver.c: 249: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  5830  0018E8  0E06               	movlw	6
  5831  0018EA                     i2u264_47:
  5832  0018EA  2EE8               	decfsz	wreg,f,c
  5833  0018EC  D7FE               	bra	i2u264_47
  5834  0018EE  D000               	nop2	
  5835  0018F0                     i2l168:
  5836  0018F0  B2AC               	btfsc	4012,1,c	;volatile
  5837  0018F2  D003               	goto	i2u174_40
  5838  0018F4  0EC7               	movlw	199
  5839  0018F6  6402               	cpfsgt	i2putch@max,c
  5840  0018F8  D7F6               	goto	i2l169
  5841  0018FA                     i2u174_40:
  5842                           
  5843                           ;UART_Driver.c: 250: }
  5844                           ;UART_Driver.c: 251: TXREG = data;
  5845  0018FA  C001  FFAD         	movff	i2putch@data,4013	;volatile
  5846  0018FE  0012               	return		;funcret
  5847  001900                     __end_ofi2_putch:
  5848                           	opt stack 0
  5849                           pclatu	equ	0xFFB
  5850                           pclath	equ	0xFFA
  5851                           tblptru	equ	0xFF8
  5852                           tblptrh	equ	0xFF7
  5853                           tblptrl	equ	0xFF6
  5854                           tablat	equ	0xFF5
  5855                           prodh	equ	0xFF4
  5856                           prodl	equ	0xFF3
  5857                           intcon	equ	0xFF2
  5858                           intcon2	equ	0xFF1
  5859                           indf0	equ	0xFEF
  5860                           postinc0	equ	0xFEE
  5861                           plusw0	equ	0xFEB
  5862                           fsr0h	equ	0xFEA
  5863                           fsr0l	equ	0xFE9
  5864                           wreg	equ	0xFE8
  5865                           indf1	equ	0xFE7
  5866                           postinc1	equ	0xFE6
  5867                           postdec1	equ	0xFE5
  5868                           fsr1h	equ	0xFE2
  5869                           fsr1l	equ	0xFE1
  5870                           bsr	equ	0xFE0
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           plusw2	equ	0xFDB
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function i2___lwdiv *****************
  5880 ;; Defined at:
  5881 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  dividend        2    0[COMRAM] unsigned int 
  5884 ;;  divisor         2    2[COMRAM] unsigned int 
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  __lwdiv         2    5[COMRAM] unsigned int 
  5887 ;;  __lwdiv         1    4[COMRAM] unsigned char 
  5888 ;; Return value:  Size  Location     Type
  5889 ;;                  2    0[COMRAM] unsigned int 
  5890 ;; Registers used:
  5891 ;;		wreg, status,2, status,0
  5892 ;; Tracked objects:
  5893 ;;		On entry : 0/0
  5894 ;;		On exit  : 0/0
  5895 ;;		Unchanged: 0/0
  5896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5897 ;;      Params:         4       0       0       0       0       0       0       0       0
  5898 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5899 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5900 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5901 ;;Total ram usage:        7 bytes
  5902 ;; Hardware stack levels used:    1
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		i2_printf
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text31
  5911  001704                     __ptext31:
  5912                           	opt stack 0
  5913  001704                     i2___lwdiv:
  5914                           	opt stack 21
  5915                           
  5916                           ;incstack = 0
  5917  001704  0E00               	movlw	0
  5918  001706  6E07               	movwf	i2___lwdiv@quotient+1,c
  5919  001708  0E00               	movlw	0
  5920  00170A  6E06               	movwf	i2___lwdiv@quotient,c
  5921  00170C  5003               	movf	i2___lwdiv@divisor,w,c
  5922  00170E  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5923  001710  B4D8               	btfsc	status,2,c
  5924  001712  D01C               	goto	i2l798
  5925  001714  0E01               	movlw	1
  5926  001716  6E05               	movwf	i2___lwdiv@counter,c
  5927  001718  D004               	goto	i2l793
  5928  00171A  90D8               	bcf	status,0,c
  5929  00171C  3603               	rlcf	i2___lwdiv@divisor,f,c
  5930  00171E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5931  001720  2A05               	incf	i2___lwdiv@counter,f,c
  5932  001722                     i2l793:
  5933  001722  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5934  001724  D7FA               	goto	i2l794
  5935  001726                     i2u176_40:
  5936  001726  90D8               	bcf	status,0,c
  5937  001728  3606               	rlcf	i2___lwdiv@quotient,f,c
  5938  00172A  3607               	rlcf	i2___lwdiv@quotient+1,f,c
  5939  00172C  5003               	movf	i2___lwdiv@divisor,w,c
  5940  00172E  5C01               	subwf	i2___lwdiv@dividend,w,c
  5941  001730  5004               	movf	i2___lwdiv@divisor+1,w,c
  5942  001732  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5943  001734  A0D8               	btfss	status,0,c
  5944  001736  D005               	goto	i2l797
  5945  001738  5003               	movf	i2___lwdiv@divisor,w,c
  5946  00173A  5E01               	subwf	i2___lwdiv@dividend,f,c
  5947  00173C  5004               	movf	i2___lwdiv@divisor+1,w,c
  5948  00173E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5949  001740  8006               	bsf	i2___lwdiv@quotient,0,c
  5950  001742                     i2l797:
  5951  001742  90D8               	bcf	status,0,c
  5952  001744  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5953  001746  3203               	rrcf	i2___lwdiv@divisor,f,c
  5954  001748  2E05               	decfsz	i2___lwdiv@counter,f,c
  5955  00174A  D7ED               	goto	i2u176_40
  5956  00174C                     i2l798:
  5957  00174C  C006  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5958  001750  C007  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5959  001754  0012               	return		;funcret
  5960  001756                     __end_ofi2___lwdiv:
  5961                           	opt stack 0
  5962                           pclatu	equ	0xFFB
  5963                           pclath	equ	0xFFA
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           intcon2	equ	0xFF1
  5972                           indf0	equ	0xFEF
  5973                           postinc0	equ	0xFEE
  5974                           plusw0	equ	0xFEB
  5975                           fsr0h	equ	0xFEA
  5976                           fsr0l	equ	0xFE9
  5977                           wreg	equ	0xFE8
  5978                           indf1	equ	0xFE7
  5979                           postinc1	equ	0xFE6
  5980                           postdec1	equ	0xFE5
  5981                           fsr1h	equ	0xFE2
  5982                           fsr1l	equ	0xFE1
  5983                           bsr	equ	0xFE0
  5984                           indf2	equ	0xFDF
  5985                           postinc2	equ	0xFDE
  5986                           postdec2	equ	0xFDD
  5987                           plusw2	equ	0xFDB
  5988                           fsr2h	equ	0xFDA
  5989                           fsr2l	equ	0xFD9
  5990                           status	equ	0xFD8
  5991                           pclatu	equ	0xFFB
  5992                           pclath	equ	0xFFA
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           intcon2	equ	0xFF1
  6001                           indf0	equ	0xFEF
  6002                           postinc0	equ	0xFEE
  6003                           plusw0	equ	0xFEB
  6004                           fsr0h	equ	0xFEA
  6005                           fsr0l	equ	0xFE9
  6006                           wreg	equ	0xFE8
  6007                           indf1	equ	0xFE7
  6008                           postinc1	equ	0xFE6
  6009                           postdec1	equ	0xFE5
  6010                           fsr1h	equ	0xFE2
  6011                           fsr1l	equ	0xFE1
  6012                           bsr	equ	0xFE0
  6013                           indf2	equ	0xFDF
  6014                           postinc2	equ	0xFDE
  6015                           postdec2	equ	0xFDD
  6016                           plusw2	equ	0xFDB
  6017                           fsr2h	equ	0xFDA
  6018                           fsr2l	equ	0xFD9
  6019                           status	equ	0xFD8
  6020                           
  6021                           	psect	rparam
  6022  0000                     pclatu	equ	0xFFB
  6023                           pclath	equ	0xFFA
  6024                           tblptru	equ	0xFF8
  6025                           tblptrh	equ	0xFF7
  6026                           tblptrl	equ	0xFF6
  6027                           tablat	equ	0xFF5
  6028                           prodh	equ	0xFF4
  6029                           prodl	equ	0xFF3
  6030                           intcon	equ	0xFF2
  6031                           intcon2	equ	0xFF1
  6032                           indf0	equ	0xFEF
  6033                           postinc0	equ	0xFEE
  6034                           plusw0	equ	0xFEB
  6035                           fsr0h	equ	0xFEA
  6036                           fsr0l	equ	0xFE9
  6037                           wreg	equ	0xFE8
  6038                           indf1	equ	0xFE7
  6039                           postinc1	equ	0xFE6
  6040                           postdec1	equ	0xFE5
  6041                           fsr1h	equ	0xFE2
  6042                           fsr1l	equ	0xFE1
  6043                           bsr	equ	0xFE0
  6044                           indf2	equ	0xFDF
  6045                           postinc2	equ	0xFDE
  6046                           postdec2	equ	0xFDD
  6047                           plusw2	equ	0xFDB
  6048                           fsr2h	equ	0xFDA
  6049                           fsr2l	equ	0xFD9
  6050                           status	equ	0xFD8
  6051                           
  6052                           	psect	temp
  6053  00004A                     btemp:
  6054                           	opt stack 0
  6055  00004A                     	ds	1
  6056  0000                     int$flags	set	btemp
  6057  0000                     wtemp6	set	btemp+1
  6058                           pclatu	equ	0xFFB
  6059                           pclath	equ	0xFFA
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           intcon2	equ	0xFF1
  6068                           indf0	equ	0xFEF
  6069                           postinc0	equ	0xFEE
  6070                           plusw0	equ	0xFEB
  6071                           fsr0h	equ	0xFEA
  6072                           fsr0l	equ	0xFE9
  6073                           wreg	equ	0xFE8
  6074                           indf1	equ	0xFE7
  6075                           postinc1	equ	0xFE6
  6076                           postdec1	equ	0xFE5
  6077                           fsr1h	equ	0xFE2
  6078                           fsr1l	equ	0xFE1
  6079                           bsr	equ	0xFE0
  6080                           indf2	equ	0xFDF
  6081                           postinc2	equ	0xFDE
  6082                           postdec2	equ	0xFDD
  6083                           plusw2	equ	0xFDB
  6084                           fsr2h	equ	0xFDA
  6085                           fsr2l	equ	0xFD9
  6086                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    8
    Data        8
    BSS         292
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      73
    BANK0           160     39     139
    BANK1           256     16     182
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK1[2]), 
		 -> C_DOOR_SendStates@com(BANK1[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), C_DOOR_SendStates@mes(BANK1[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), C_DOOR_SendStates@com(BANK1[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S101$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S101$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S101$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK1[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK1[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer
    _acknowledge->i2_printf
    i2_printf->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_D_UART_Init
    _initDoors->_C_DOOR_LockAll
    _D_UART_Init->___lldiv
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable
    _D_UART_Write->_printf
    _printf->___lwdiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_C_DOOR_SendStates
    _C_DOOR_SendStates->_D_UART_Write

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8589
                                             14 BANK1      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_TMR1_Enable
                        _D_TMR1_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1213
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     489
                                             30 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       9     9      0      90
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     332
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                             21 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     806
                                             34 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     9     9      0      90
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    3277
                                              5 BANK1      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     521
                                             21 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2380
                                              0 BANK1      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1958
                                             28 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0      68
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                             18    18      0    1389
                                             21 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0    1389
                                             20 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0    1048
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            22    17      5    1048
                                              7 COMRAM    13     8      5
                          i2___lwdiv
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     311
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i2_printf
         i2___lwdiv
         i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      B6       7       71.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      20        0.0%
DATA                 0      0     18A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Apr 14 14:50:10 2018

                         l30 1430                           l31 13A2                           l24 0EF4  
                         l25 0DD0                           l42 14D0                           l50 112A  
                         l43 1454                           l19 1632                           l36 137E  
                         l37 12EE                           l48 112C                           l49 1060  
                __CFG_BOR$ON 000000                           bsr 000FE0           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 _ackCharacter 0042                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l215 1812                          l216 180C                          l321 08DC  
                        l330 09EA                          l163 188C                          l323 0926  
                        l324 0952                          l309 18CC                          l238 196C  
                        l350 0AA6                          l334 0A3A                          l326 0982  
                        l343 0AAC                          l335 0A50                          l319 08C4  
                        l168 1862                          l344 0A8E                          l328 09B4  
                        l169 1858                          l337 0A6C                          l346 0AC8  
                        l347 0A92                          l339 0A76                          l381 0C88  
                        l197 1980                          l349 0A9C                          l382 0CEE  
                        l374 0C70                          l375 0C80                          l376 0C90  
                        l385 0D7C                          l386 0D24                          l740 151C  
                        l741 1510                          l744 1550                          l745 155E  
                        l793 16D0                          l937 17B0                          l794 16C8  
                        l938 17A6                          l797 16F0                          l798 16FA  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _pwm 003B                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2213 0D16                         STR_1 0835                         STR_2 0833  
                       STR_3 081E                         STR_4 081A                         STR_5 0822  
                       STR_6 0837                         STR_7 0837                         STR_8 082D  
                       STR_9 082B                         u2001 11C2                         u2011 1200  
                       u2110 14CA                         u2120 14CC                         u2104 14BC  
                       u2105 14B8                         u2060 1520                         u2151 10AE  
                       u2401 08F0                         u2410 0904                         u2084 1344  
                       u2340 17E6                         u2085 1340                         u1710 16D4  
                       u2270 15D4                         u2275 15C8                         u2291 1842  
                       u1820 0D1E                         u2428 0908                         u1830 0D86  
                       u2607 09DC                         u1840 0DB2                         u2617 10EA  
                       u1690 186E                         u2627 1224                         u2637 185C  
                       u1790 0CBC                         u1847 0DA8                         u2577 0846  
                       u1954 0EC0                         u1955 0EBC                         u2587 088E  
                       u1964 0EE6                         u1797 0CB2                         u1965 0EE2  
                       u2597 08B6                         u1984 13F6                         u1985 13F2  
               ?_C_DOOR_Init 0001                         _baud 0041                         _main 083A  
                       _read 0028                         _lock 003C                         _tick 003D  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0006  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 004A            C_DOOR_UnlockAll@d 00E1  
                       prodh 000FF4                         prodl 000FF3                         start 00EC  
              __CFG_IESO$OFF 000000              __end_of_HighISR 12E6              __end_ofi2_putch 1900  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  ?_D_PWM_Init 0001  
          initDoors@door_cnt 00E2               _startCharacter 0048              D_PWM_SetPwm@pwm 00D9  
              __CFG_PLLDIV$5 000000         commandAndMessage@com 00E3      __size_of_C_DOOR_LockAll 00B2  
       commandAndMessage@mes 00E5                        ?_main 0001                        STR_10 0831  
                      STR_11 0829                        STR_12 082F                        STR_13 082D  
                      STR_14 0825                        STR_15 0827                        STR_16 0831  
                      STR_17 0809              __end_of___lldiv 1570                        u20011 11BE  
                      u20111 11FC              __end_of___lwdiv 1704                        i1l360 008E  
                      i1l361 0092                        i2l122 0C3A                        i2l123 0AD8  
                      i2l140 0BD0                        i2l132 0B48                        i2l124 0AFC  
                      i2l141 0BF2                        i2l133 0B6A                        i1l358 0078  
                      i1l359 0094                        i2l144 0C14                        i2l136 0B8C  
                      i2l128 0B04                        i2l145 0C2C                        i2l137 0BAE  
                      i2l129 0B26                        i2l147 0C34                        i2l181 1294  
                      i2l168 18F0                        i2l169 18E6                        i2l178 129A  
                      i2l179 128A                        i2l381 0F30                        i2l382 0F90  
                      i2l374 0F1A                        i2l375 0F2A                        i2l376 0F38  
                      i2l385 101C                        i2l386 0FC6                        i2l793 1722  
                      i2l794 171A                        i2l797 1742                        i2l798 174C  
                      _RCREG 000FAE                        _TMR1H 000FCF                        _TMR1L 000FCE  
       __size_of_acknowledge 0060                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             C_DOOR_Init@cnt 00DC               __CFG_EBTRB$OFF 000000                        _doors 0060  
                      _putch 184C                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00E6                 ?_D_UART_Read 00D9                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                 ?_D_TMR1_Init 0001                        plusw2 000FDB  
                      status 000FD8                        wtemp6 004B                 ?_D_PORT_Init 0001  
              _stopCharacter 0046             __end_ofi2_printf 1058           __size_ofi2___lwdiv 0052  
            __initialization 1756                 __end_of_main 0AD4                   i2printf@ap 000F  
                 i2putch@max 0002                       ??_main 01B4                __activetblptr 000003  
            __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00D9                       _ADCON1 000FC1  
                     _CCPR1L 000FBE          __size_of_D_PWM_Init 001E                       ?_putch 0001  
                     i2l2253 0FB8             _C_DOOR_UnlockAll 12E6                    ??_HighISR 0016  
                  ??i2_putch 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___lldiv 00E1                setAlarm@alarm 00D9              C_DOOR_LockAll@d 00E1  
                  ??___lwdiv 00DD                       clear_0 177C                       clear_1 1788  
                     clear_2 1794                       _printf 0C64             __end_of_setAlarm 198E  
                     _strcmp 17A4                 __pdataCOMRAM 0042        D_UART_Init@interrupts 00EA  
          __end_ofi2___lwdiv 1756                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 01A6  
            D_UART_Init@baud 00E8              D_UART_Init@name 00E6   __end_of_C_DOOR_ReadSensors 14EC  
                 __accesstop 0060      __end_of__initialization 179A              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 0152               __pcstackCOMRAM 0001  
               C_DOOR_Init@d 00DD                __end_of_putch 1874             _messageCharacter 0044  
                i2printf@idx 000E                  i2printf@val 0011                ?_D_PWM_SetPwm 0001  
             _C_DOOR_LockAll 139A       __size_of_D_UART_Enable 0024                  i2putch@data 0001  
             ??_D_UART_Write 01AA       __size_of_D_TMR0_Enable 0014                    ?i2_printf 0008  
     __size_of_D_TMR1_Enable 0014            _C_DOOR_SendStates 1058                      ??_putch 00D9  
         ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060                   __pbssBANK1 0100  
         __size_of_initDoors 0022             _communicationCnt 003E         __size_of_D_UART_Init 0080  
       __size_of_D_UART_Read 002C         __size_of_D_TMR0_Init 0024         __size_of_D_TMR1_Init 0020  
        ??_C_DOOR_SendStates 01AB                      ?_LowISR 0001         __size_of_D_PORT_Init 001E  
               ??_D_PWM_Init 00D9       __end_of_C_DOOR_LockAll 144C               ??_D_PWM_SetPwm 00D9  
                 _deviceName 0034                      ?_printf 00E0                      ?_strcmp 00D9  
  __end_of_C_DOOR_SendStates 1148      __size_of_fillDataBuffer 0190                   ??i2_printf 000D  
        D_UART_Enable@enable 00D9           __end_of_D_PWM_Init 193E              __CFG_VREGEN$OFF 000000  
                    _HighISR 0008                      i2_putch 18DE                _D_UART_Enable 1874  
                  ?_setAlarm 0001                      __Hparam 0000                      __Lparam 0000  
            __size_of_LowISR 00D4                _D_TMR0_Enable 1970                _D_TMR1_Enable 195C  
                 _readBuffer 0100                      ___lldiv 14EC              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 16B0                 __psmallconst 0800          C_DOOR_ReadSensors@d 00DD  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0015                      __pcinit 1756  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 139A                      __ptext0 083A  
                    __ptext1 17A4                      __ptext2 1984                      __ptext3 18BC  
                    __ptext4 139A                      __ptext5 0DBE                      __ptext6 1820  
                    __ptext7 1570                      __ptext8 14EC                      __ptext9 1874  
            __size_of_printf 015A            __end_of_initDoors 18DE                    _T0CONbits 000FD5  
            __size_of_strcmp 004E            __end_of_hexpowers 0809                    _T1CONbits 000FCD  
                  _T2CONbits 000FCA         C_DOOR_SendStates@com 01AE         C_DOOR_SendStates@mes 01B1  
             __pintcode_body 1230         end_of_initialization 179A          D_TMR0_Enable@enable 00D9  
                    int_func 1230               ?_D_UART_Enable 0001                   ??_setAlarm 00D9  
            ___lldiv@divisor 00DD               ?_D_TMR0_Enable 0001              ___lldiv@counter 00E5  
             ?_D_TMR1_Enable 0001         __end_of_D_UART_Write 1230                    _RCSTAbits 000FAB  
                    printf@c 00EA                      printf@f 00E0                      postdec1 000FE5  
                    postdec2 000FDD                      postinc0 000FEE                      postinc1 000FE6  
                    postinc2 000FDE                      strcmp@r 00DE                    _PORTBbits 000F81  
                  _PORTCbits 000F82   __size_of_C_DOOR_SendStates 00F0                    _TRISCbits 000F94  
        __end_of_acknowledge 16B0            i2___lwdiv@divisor 0003                    i2___lwdiv 1704  
          i2___lwdiv@counter 0005         __end_of_D_PWM_SetPwm 1820                  _CCP1CONbits 000FBD  
                  _TXSTAbits 000FAC           _C_DOOR_ReadSensors 144C               __end_of_LowISR 00EC  
                _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 198E  
             __end_of_printf 0DBE               __end_of_strcmp 17F2                 i2printf@flag 000D  
               i2printf@prec 0013          start_initialization 1756               _fillDataBuffer 0AD4  
                  i2printf@c 0014                    i2printf@f 0008                   ?i2___lwdiv 0001  
          __size_ofi2_printf 0148         ??_C_DOOR_ReadSensors 00D9              ??_D_UART_Enable 00D9  
              ??_C_DOOR_Init 00D9              ??_D_TMR0_Enable 00D9              ??_D_TMR1_Enable 00D9  
                   ??_LowISR 00C4             __CFG_LPT1OSC$OFF 000000                  _acknowledge 1650  
           D_UART_Write@data 01A8                     ??_printf 00E3                 _lockDelayCnt 003F  
                   ??_strcmp 00DD       __end_of_fillDataBuffer 0C64                  __pbssCOMRAM 0028  
              __pcstackBANK0 00C4                __pcstackBANK1 01A6                ??_D_UART_Init 00EB  
              ??_D_UART_Read 00DF                ??_D_TMR0_Init 00DA                ??_D_TMR1_Init 00DA  
                   ?_HighISR 0001                     ?i2_putch 0001        __size_of_D_UART_Write 00E8  
              ??_D_PORT_Init 00D9             ??_C_DOOR_LockAll 00D9             ___lwdiv@dividend 00D9  
        __end_of_C_DOOR_Init 0F10            __size_of_setAlarm 000A                    __pintcode 0008  
                   ?___lldiv 00D9                     ?___lwdiv 00D9                  __pintcodelo 0018  
         fillDataBuffer@data 0015            ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001  
                __smallconst 0800           ??_C_DOOR_UnlockAll 00D9        __size_of_D_PWM_SetPwm 002E  
                  _initDoors 18BC                 _D_UART_Write 1148                    _hexpowers 0801  
                  _readReady 0040             ___lwdiv@quotient 00DE                  ??i2___lwdiv 0005  
             __size_of_putch 0028          D_TMR1_Enable@enable 00D9                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 15F0          __end_of_D_UART_Read 184C  
                   i2u174_40 18FA                     i2u190_40 0FC0                     i2u191_40 1024  
                   i2u176_40 1726                     i2u192_40 104E                     i2u264_47 18EA  
                   i2u192_47 1044                     _PIR1bits 000F9E                     i2u187_40 0F62  
                   i2u187_47 0F58          __end_of_D_TMR0_Init 18BC          __end_of_D_TMR1_Init 1920  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 195C  
               _D_PWM_SetPwm 17F2                   printf@flag 00E3                   printf@prec 00E9  
                 ?_initDoors 0001                     i2_printf 0F10                  _INTCON2bits 000FF1  
                  copy_data0 176A                  _C_DOOR_Init 0DBE             __size_of_HighISR 12DE  
           __size_ofi2_putch 0022                     __Hrparam 0000                     __Lrparam 0000  
           __size_of___lldiv 0084             __size_of___lwdiv 0054              ___lwdiv@divisor 00DB  
            ___lwdiv@counter 00DD                     __ptext10 1900                     __ptext11 195C  
                   __ptext20 1148                     __ptext12 1898                     __ptext21 0C64  
                   __ptext13 1970                     __ptext30 18DE                     __ptext22 184C  
                   __ptext14 17F2                     __ptext31 1704                     __ptext23 16B0  
                   __ptext15 1920                     __ptext24 144C                     __ptext16 193E  
                   __ptext17 12E6                     __ptext18 1058                     __ptext27 0AD4  
                   __ptext19 15F0                     __ptext28 1650                     __ptext29 0F10  
                   _door_cnt 0037                  _D_UART_Init 1570                  _D_UART_Read 1820  
                   _oldAlarm 0039                     _newAlarm 003A                     _readData 002E  
                _D_TMR0_Init 1898                  _D_TMR1_Init 1900                __size_of_main 029A  
         C_DOOR_SendStates@d 01B3                  _D_PORT_Init 193E                     _setAlarm 1984  
                   int$flags 004A                    printf@idx 00E4                    printf@val 00E7  
               ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000                    putch@data 00D9  
                 _INTCONbits 000FF2                  ??_initDoors 00E2            _commandAndMessage 15F0  
                   intlevel1 0000                     intlevel2 0000  __size_of_C_DOOR_ReadSensors 00A0  
         ?_commandAndMessage 00D9             ___lldiv@dividend 00D9        __end_of_D_UART_Enable 1898  
      __end_of_D_TMR0_Enable 1984          ??_commandAndMessage 00E7        __end_of_D_TMR1_Enable 1970  
                 _D_PWM_Init 1920                     printf@ap 00E5             ??_fillDataBuffer 0015  
        D_UART_Write@command 01A6                     putch@max 00DA                     strcmp@s1 00D9  
                   strcmp@s2 00DB             ___lldiv@quotient 00E1    __end_of_commandAndMessage 1650  
  __size_of_C_DOOR_UnlockAll 00B4  
