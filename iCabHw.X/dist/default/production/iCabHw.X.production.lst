

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 26 17:46:28 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  001612                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  001612  1A                 	db	low STR_4
    92  001613  08                 	db	high STR_4
    93                           
    94                           ;initializer for _stopCharacter
    95  001614  31                 	db	low STR_2
    96  001615  08                 	db	high STR_2
    97                           
    98                           ;initializer for _startCharacter
    99  001616  33                 	db	low STR_1
   100  001617  08                 	db	high STR_1
   101                           
   102                           	psect	idataBANK0
   103  001618                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _messageCharacter
   107  001618  1E                 	db	low STR_3
   108  001619  08                 	db	high STR_3
   109                           
   110                           	psect	smallconst
   111  000800                     __psmallconst:
   112                           	opt stack 0
   113  000800  00                 	db	0
   114  000801                     _hexpowers:
   115                           	opt stack 0
   116  000801  0001               	dw	1
   117  000803  0010               	dw	16
   118  000805  0100               	dw	256
   119  000807  1000               	dw	4096
   120  000809                     __end_of_hexpowers:
   121                           	opt stack 0
   122  000809                     STR_17:
   123  000809  30                 	db	48	;'0'
   124  00080A  31                 	db	49	;'1'
   125  00080B  32                 	db	50	;'2'
   126  00080C  33                 	db	51	;'3'
   127  00080D  34                 	db	52	;'4'
   128  00080E  35                 	db	53	;'5'
   129  00080F  36                 	db	54	;'6'
   130  000810  37                 	db	55	;'7'
   131  000811  38                 	db	56	;'8'
   132  000812  39                 	db	57	;'9'
   133  000813  61                 	db	97	;'a'
   134  000814  62                 	db	98	;'b'
   135  000815  63                 	db	99	;'c'
   136  000816  64                 	db	100	;'d'
   137  000817  65                 	db	101	;'e'
   138  000818  66                 	db	102	;'f'
   139  000819  00                 	db	0
   140  00081A                     STR_4:
   141  00081A  5B                 	db	91	;'['
   142  00081B  41                 	db	65	;'A'
   143  00081C  5D                 	db	93	;']'
   144  00081D  00                 	db	0
   145  00081E                     STR_3:
   146  00081E  5B                 	db	91	;'['
   147  00081F  4D                 	db	77	;'M'
   148  000820  5D                 	db	93	;']'
   149  000821  00                 	db	0
   150  000822                     STR_5:
   151  000822  25                 	db	37
   152  000823  78                 	db	120	;'x'
   153  000824  00                 	db	0
   154  000825                     STR_15:
   155  000825  45                 	db	69	;'E'
   156  000826  00                 	db	0
   157  000827                     STR_9:
   158  000827  49                 	db	73	;'I'
   159  000828  00                 	db	0
   160  000829                     STR_11:
   161  000829  4C                 	db	76	;'L'
   162  00082A  00                 	db	0
   163  00082B                     STR_8:
   164  00082B  50                 	db	80	;'P'
   165  00082C  00                 	db	0
   166  00082D                     STR_14:
   167  00082D  52                 	db	82	;'R'
   168  00082E  00                 	db	0
   169  00082F                     STR_12:
   170  00082F  55                 	db	85	;'U'
   171  000830  00                 	db	0
   172  000831                     STR_2:
   173  000831  24                 	db	36
   174  000832  00                 	db	0
   175  000833                     STR_1:
   176  000833  26                 	db	38
   177  000834  00                 	db	0
   178  000835                     STR_6:
   179  000835  3A                 	db	58	;':'
   180  000836  00                 	db	0
   181  0000                     
   182                           ; #config settings
   183  000837  00                 	db	0	; dummy byte at the end
   184  0000                     
   185                           	psect	nvBANK0
   186  0000C2                     __pnvBANK0:
   187                           	opt stack 0
   188  0000C2                     _deviceName:
   189                           	opt stack 0
   190  0000C2                     	ds	3
   191  0000                     _INTCON2bits	set	4081
   192  0000                     _T0CONbits	set	4053
   193  0000                     _PIE1bits	set	3997
   194  0000                     _IPR1bits	set	3999
   195  0000                     _PIR1bits	set	3998
   196  0000                     _INTCONbits	set	4082
   197  0000                     _RCONbits	set	4048
   198  0000                     _SPBRG	set	4015
   199  0000                     _BAUDCONbits	set	4024
   200  0000                     _TRISCbits	set	3988
   201  0000                     _RCREG	set	4014
   202  0000                     _RCSTAbits	set	4011
   203  0000                     _TXREG	set	4013
   204  0000                     _TXSTAbits	set	4012
   205  0000                     _ADCON1	set	4033
   206  0000                     _PORTC	set	3970
   207  0000                     _TRISC	set	3988
   208  0000                     _PORTA	set	3968
   209  0000                     _TRISA	set	3986
   210  0000                     _TRISB	set	3987
   211  0000                     _PORTB	set	3969
   212                           
   213                           	psect	cinit
   214  0013C4                     __pcinit:
   215                           	opt stack 0
   216  0013C4                     start_initialization:
   217                           	opt stack 0
   218  0013C4                     __initialization:
   219                           	opt stack 0
   220                           
   221                           ; Initialize objects allocated to BANK0 (2 bytes)
   222                           ; load TBLPTR registers with __pidataBANK0
   223  0013C4  0E18               	movlw	low __pidataBANK0
   224  0013C6  6EF6               	movwf	tblptrl,c
   225  0013C8  0E16               	movlw	high __pidataBANK0
   226  0013CA  6EF7               	movwf	tblptrh,c
   227  0013CC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   228  0013CE  6EF8               	movwf	tblptru,c
   229  0013D0  0009               	tblrd		*+	;fetch initializer
   230  0013D2  CFF5 F0C5          	movff	tablat,__pdataBANK0
   231  0013D6  0009               	tblrd		*+	;fetch initializer
   232  0013D8  CFF5 F0C6          	movff	tablat,__pdataBANK0+1
   233                           
   234                           ; Initialize objects allocated to COMRAM (6 bytes)
   235                           ; load TBLPTR registers with __pidataCOMRAM
   236  0013DC  0E12               	movlw	low __pidataCOMRAM
   237  0013DE  6EF6               	movwf	tblptrl,c
   238  0013E0  0E16               	movlw	high __pidataCOMRAM
   239  0013E2  6EF7               	movwf	tblptrh,c
   240  0013E4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   241  0013E6  6EF8               	movwf	tblptru,c
   242  0013E8  EE00  F03D         	lfsr	0,__pdataCOMRAM
   243  0013EC  EE10 F006          	lfsr	1,6
   244  0013F0                     copy_data0:
   245  0013F0  0009               	tblrd		*+
   246  0013F2  CFF5 FFEE          	movff	tablat,postinc0
   247  0013F6  50E5               	movf	postdec1,w,c
   248  0013F8  50E1               	movf	fsr1l,w,c
   249  0013FA  E1FA               	bnz	copy_data0
   250                           
   251                           ; Clear objects allocated to BANK1 (166 bytes)
   252  0013FC  EE01  F000         	lfsr	0,__pbssBANK1
   253  001400  0EA6               	movlw	166
   254  001402                     clear_0:
   255  001402  6AEE               	clrf	postinc0,c
   256  001404  06E8               	decf	wreg,f,c
   257  001406  E1FD               	bnz	clear_0
   258                           
   259                           ; Clear objects allocated to BANK0 (65 bytes)
   260  001408  EE00  F060         	lfsr	0,__pbssBANK0
   261  00140C  0E41               	movlw	65
   262  00140E                     clear_1:
   263  00140E  6AEE               	clrf	postinc0,c
   264  001410  06E8               	decf	wreg,f,c
   265  001412  E1FD               	bnz	clear_1
   266                           
   267                           ; Clear objects allocated to COMRAM (1 bytes)
   268  001414  6A43               	clrf	__pbssCOMRAM& (0+255),c
   269  001416                     end_of_initialization:
   270                           	opt stack 0
   271  001416                     __end_of__initialization:
   272                           	opt stack 0
   273  001416  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   274  001418  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   275  00141A  0100               	movlb	0
   276  00141C  EF95  F005         	goto	_main	;jump to C main() function
   277                           tblptru	equ	0xFF8
   278                           tblptrh	equ	0xFF7
   279                           tblptrl	equ	0xFF6
   280                           tablat	equ	0xFF5
   281                           postinc0	equ	0xFEE
   282                           wreg	equ	0xFE8
   283                           postdec1	equ	0xFE5
   284                           fsr1l	equ	0xFE1
   285                           
   286                           	psect	bssCOMRAM
   287  000043                     __pbssCOMRAM:
   288                           	opt stack 0
   289  000043                     _baud:
   290                           	opt stack 0
   291  000043                     	ds	1
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           postdec1	equ	0xFE5
   299                           fsr1l	equ	0xFE1
   300                           
   301                           	psect	dataCOMRAM
   302  00003D                     __pdataCOMRAM:
   303                           	opt stack 0
   304  00003D                     _ackCharacter:
   305                           	opt stack 0
   306  00003D                     	ds	2
   307  00003F                     _stopCharacter:
   308                           	opt stack 0
   309  00003F                     	ds	2
   310  000041                     _startCharacter:
   311                           	opt stack 0
   312  000041                     	ds	2
   313                           tblptru	equ	0xFF8
   314                           tblptrh	equ	0xFF7
   315                           tblptrl	equ	0xFF6
   316                           tablat	equ	0xFF5
   317                           postinc0	equ	0xFEE
   318                           wreg	equ	0xFE8
   319                           postdec1	equ	0xFE5
   320                           fsr1l	equ	0xFE1
   321                           
   322                           	psect	bssBANK0
   323  000060                     __pbssBANK0:
   324                           	opt stack 0
   325  000060                     _doors:
   326                           	opt stack 0
   327  000060                     	ds	50
   328  000092                     _read:
   329                           	opt stack 0
   330  000092                     	ds	6
   331  000098                     _readData:
   332                           	opt stack 0
   333  000098                     	ds	6
   334  00009E                     _do_reset:
   335                           	opt stack 0
   336  00009E                     	ds	1
   337  00009F                     _tick:
   338                           	opt stack 0
   339  00009F                     	ds	1
   340  0000A0                     _readReady:
   341                           	opt stack 0
   342  0000A0                     	ds	1
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	dataBANK0
   353  0000C5                     __pdataBANK0:
   354                           	opt stack 0
   355  0000C5                     _messageCharacter:
   356                           	opt stack 0
   357  0000C5                     	ds	2
   358                           tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           tblptrl	equ	0xFF6
   361                           tablat	equ	0xFF5
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           postdec1	equ	0xFE5
   365                           fsr1l	equ	0xFE1
   366                           
   367                           	psect	bssBANK1
   368  000100                     __pbssBANK1:
   369                           	opt stack 0
   370  000100                     _readBuffer:
   371                           	opt stack 0
   372  000100                     	ds	166
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	cstackBANK0
   383  0000A1                     __pcstackBANK0:
   384                           	opt stack 0
   385  0000A1                     ??_C_DOOR_ReadSensors:
   386  0000A1                     ?_strcmp:
   387                           	opt stack 0
   388  0000A1                     ?___lwdiv:
   389                           	opt stack 0
   390  0000A1                     ?___aldiv:
   391                           	opt stack 0
   392  0000A1                     ?_D_UART_Read:
   393                           	opt stack 0
   394  0000A1                     C_DOOR_Init@d:
   395                           	opt stack 0
   396  0000A1                     writeByte@data:
   397                           	opt stack 0
   398  0000A1                     D_UART_Enable@enable:
   399                           	opt stack 0
   400  0000A1                     D_TMR0_Enable@enable:
   401                           	opt stack 0
   402  0000A1                     ___lwdiv@dividend:
   403                           	opt stack 0
   404  0000A1                     strcmp@s1:
   405                           	opt stack 0
   406  0000A1                     ___aldiv@dividend:
   407                           	opt stack 0
   408  0000A1                     commandAndMessage@door:
   409                           	opt stack 0
   410                           
   411                           ; 10 bytes @ 0x0
   412  0000A1                     	ds	1
   413  0000A2                     putch@data:
   414                           	opt stack 0
   415                           
   416                           ; 1 bytes @ 0x1
   417  0000A2                     	ds	1
   418  0000A3                     ___lwdiv@divisor:
   419                           	opt stack 0
   420  0000A3                     strcmp@s2:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x2
   424  0000A3                     	ds	2
   425  0000A5                     ??_strcmp:
   426  0000A5                     C_DOOR_ReadSensors@d:
   427                           	opt stack 0
   428  0000A5                     ___lwdiv@quotient:
   429                           	opt stack 0
   430  0000A5                     ___aldiv@divisor:
   431                           	opt stack 0
   432                           
   433                           ; 4 bytes @ 0x4
   434  0000A5                     	ds	1
   435  0000A6                     strcmp@r:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x5
   439  0000A6                     	ds	1
   440  0000A7                     ___lwdiv@counter:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0x6
   444  0000A7                     	ds	1
   445  0000A8                     ?_printf:
   446                           	opt stack 0
   447  0000A8                     printf@f:
   448                           	opt stack 0
   449                           
   450                           ; 3 bytes @ 0x7
   451  0000A8                     	ds	1
   452  0000A9                     ___aldiv@counter:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x8
   456  0000A9                     	ds	1
   457  0000AA                     ___aldiv@sign:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x9
   461  0000AA                     	ds	1
   462  0000AB                     printf@flag:
   463                           	opt stack 0
   464  0000AB                     commandAndMessage@com:
   465                           	opt stack 0
   466  0000AB                     ___aldiv@quotient:
   467                           	opt stack 0
   468                           
   469                           ; 4 bytes @ 0xA
   470  0000AB                     	ds	1
   471  0000AC                     printf@ap:
   472                           	opt stack 0
   473                           
   474                           ; 2 bytes @ 0xB
   475  0000AC                     	ds	1
   476  0000AD                     commandAndMessage@mes:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0xC
   480  0000AD                     	ds	1
   481  0000AE                     printf@idx:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0xD
   485  0000AE                     	ds	1
   486  0000AF                     D_UART_Init@name:
   487                           	opt stack 0
   488  0000AF                     printf@val:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0xE
   492  0000AF                     	ds	2
   493  0000B1                     printf@prec:
   494                           	opt stack 0
   495  0000B1                     D_UART_Init@baud:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x10
   499  0000B1                     	ds	1
   500  0000B2                     printf@c:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x11
   504  0000B2                     	ds	1
   505  0000B3                     D_UART_Init@interrupts:
   506                           	opt stack 0
   507  0000B3                     D_UART_Write@command:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x12
   511  0000B3                     	ds	1
   512  0000B4                     _D_UART_Init$1499:
   513                           	opt stack 0
   514                           
   515                           ; 4 bytes @ 0x13
   516  0000B4                     	ds	1
   517  0000B5                     D_UART_Write@data:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x14
   521  0000B5                     	ds	2
   522  0000B7                     ??_D_UART_Write:
   523                           
   524                           ; 1 bytes @ 0x16
   525  0000B7                     	ds	1
   526  0000B8                     
   527                           ; 1 bytes @ 0x17
   528  0000B8                     	ds	2
   529  0000BA                     C_DOOR_SendStates@com:
   530                           	opt stack 0
   531                           
   532                           ; 3 bytes @ 0x19
   533  0000BA                     	ds	3
   534  0000BD                     C_DOOR_SendStates@mes:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x1C
   538  0000BD                     	ds	2
   539  0000BF                     C_DOOR_SendStates@d:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x1E
   543  0000BF                     	ds	1
   544  0000C0                     ??_main:
   545                           
   546                           ; 1 bytes @ 0x1F
   547  0000C0                     	ds	2
   548                           tblptru	equ	0xFF8
   549                           tblptrh	equ	0xFF7
   550                           tblptrl	equ	0xFF6
   551                           tablat	equ	0xFF5
   552                           postinc0	equ	0xFEE
   553                           wreg	equ	0xFE8
   554                           postdec1	equ	0xFE5
   555                           fsr1l	equ	0xFE1
   556                           
   557                           	psect	cstackCOMRAM
   558  000001                     __pcstackCOMRAM:
   559                           	opt stack 0
   560  000001                     ??_HighISR:
   561  000001                     
   562                           ; 1 bytes @ 0x0
   563  000001                     	ds	18
   564  000013                     ?i1___lwdiv:
   565                           	opt stack 0
   566  000013                     i1writeByte@data:
   567                           	opt stack 0
   568  000013                     i1___lwdiv@dividend:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0x12
   572  000013                     	ds	1
   573  000014                     i1putch@data:
   574                           	opt stack 0
   575                           
   576                           ; 1 bytes @ 0x13
   577  000014                     	ds	1
   578  000015                     i1___lwdiv@divisor:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0x14
   582  000015                     	ds	2
   583  000017                     i1___lwdiv@quotient:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x16
   587  000017                     	ds	2
   588  000019                     i1___lwdiv@counter:
   589                           	opt stack 0
   590                           
   591                           ; 1 bytes @ 0x18
   592  000019                     	ds	1
   593  00001A                     ?i1_printf:
   594                           	opt stack 0
   595  00001A                     i1printf@f:
   596                           	opt stack 0
   597                           
   598                           ; 3 bytes @ 0x19
   599  00001A                     	ds	5
   600  00001F                     i1printf@flag:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x1E
   604  00001F                     	ds	1
   605  000020                     i1printf@ap:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x1F
   609  000020                     	ds	2
   610  000022                     i1printf@idx:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x21
   614  000022                     	ds	1
   615  000023                     i1printf@val:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x22
   619  000023                     	ds	2
   620  000025                     i1printf@prec:
   621                           	opt stack 0
   622                           
   623                           ; 1 bytes @ 0x24
   624  000025                     	ds	1
   625  000026                     i1printf@c:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x25
   629  000026                     	ds	1
   630  000027                     fillDataBuffer@data:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x26
   634  000027                     	ds	1
   635  000028                     ??_LowISR:
   636                           
   637                           ; 1 bytes @ 0x27
   638  000028                     	ds	21
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1l	equ	0xFE1
   647                           
   648 ;;
   649 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   650 ;;
   651 ;; *************** function _main *****************
   652 ;; Defined at:
   653 ;;		line 25 in file "main.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;		None
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   667 ;;      Params:         0       0       0       0       0       0       0       0       0
   668 ;;      Locals:         0       0       0       0       0       0       0       0       0
   669 ;;      Temps:          0       2       0       0       0       0       0       0       0
   670 ;;      Totals:         0       2       0       0       0       0       0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels required when called:   12
   673 ;; This function calls:
   674 ;;		_C_DOOR_Init
   675 ;;		_C_DOOR_LockAll
   676 ;;		_C_DOOR_ReadSensors
   677 ;;		_C_DOOR_SendStates
   678 ;;		_C_DOOR_UnlockAll
   679 ;;		_D_PORT_Init
   680 ;;		_D_TMR0_Enable
   681 ;;		_D_TMR0_Init
   682 ;;		_D_UART_Enable
   683 ;;		_D_UART_Init
   684 ;;		_D_UART_Read
   685 ;;		_D_UART_Write
   686 ;;		_strcmp
   687 ;; This function is called by:
   688 ;;		Startup code after reset
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text0
   693  000B2A                     __ptext0:
   694                           	opt stack 0
   695  000B2A                     _main:
   696                           	opt stack 19
   697                           
   698                           ;main.c: 27: D_PORT_Init();
   699                           
   700                           ;incstack = 0
   701  000B2A  ECC5  F00A         	call	_D_PORT_Init	;wreg free
   702                           
   703                           ;main.c: 31: D_UART_Init("P", 9600, 1);
   704  000B2E  0E2B               	movlw	low STR_8
   705  000B30  0100               	movlb	0	; () banked
   706  000B32  6FAF               	movwf	D_UART_Init@name& (0+255),b
   707  000B34  0E08               	movlw	high STR_8
   708  000B36  6FB0               	movwf	(D_UART_Init@name+1)& (0+255),b
   709  000B38  0E25               	movlw	37
   710  000B3A  6FB2               	movwf	(D_UART_Init@baud+1)& (0+255),b
   711  000B3C  0E80               	movlw	128
   712  000B3E  6FB1               	movwf	D_UART_Init@baud& (0+255),b
   713  000B40  0E01               	movlw	1
   714  000B42  6FB3               	movwf	D_UART_Init@interrupts& (0+255),b
   715  000B44  EC99  F008         	call	_D_UART_Init	;wreg free
   716                           
   717                           ;main.c: 32: D_UART_Enable(1);
   718  000B48  0E01               	movlw	1
   719  000B4A  ECA1  F00A         	call	_D_UART_Enable
   720                           
   721                           ;main.c: 35: D_TMR0_Init();
   722  000B4E  ECB3  F00A         	call	_D_TMR0_Init	;wreg free
   723                           
   724                           ;main.c: 38: C_DOOR_Init();
   725  000B52  ECE1  F006         	call	_C_DOOR_Init	;wreg free
   726                           
   727                           ;main.c: 39: C_DOOR_UnlockAll();
   728  000B56  ECDE  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   729                           
   730                           ;main.c: 41: _delay((unsigned long)((200)*(16000000/4000.0)));
   731  000B5A  0E05               	movlw	5
   732  000B5C  0100               	movlb	0	; () banked
   733  000B5E  6FC1               	movwf	(??_main+1)& (0+255),b
   734  000B60  0E0F               	movlw	15
   735  000B62  6FC0               	movwf	??_main& (0+255),b
   736  000B64  0EF1               	movlw	241
   737  000B66                     u1537:
   738  000B66  2EE8               	decfsz	wreg,f,c
   739  000B68  D7FE               	bra	u1537
   740  000B6A  2FC0               	decfsz	??_main& (0+255),f,b
   741  000B6C  D7FC               	bra	u1537
   742  000B6E  2FC1               	decfsz	(??_main+1)& (0+255),f,b
   743  000B70  D7FA               	bra	u1537
   744                           
   745                           ;main.c: 42: D_UART_Write("I", "I");
   746  000B72  0E27               	movlw	low STR_9
   747  000B74  0100               	movlb	0	; () banked
   748  000B76  6FB3               	movwf	D_UART_Write@command& (0+255),b
   749  000B78  0E08               	movlw	high STR_9
   750  000B7A  6FB4               	movwf	(D_UART_Write@command+1)& (0+255),b
   751  000B7C  0E27               	movlw	low STR_9
   752  000B7E  6FB5               	movwf	D_UART_Write@data& (0+255),b
   753  000B80  0E08               	movlw	high STR_9
   754  000B82  6FB6               	movwf	(D_UART_Write@data+1)& (0+255),b
   755  000B84  EC5E  F007         	call	_D_UART_Write	;wreg free
   756                           
   757                           ;main.c: 45: D_TMR0_Enable(1);
   758  000B88  0E01               	movlw	1
   759  000B8A  ECD4  F00A         	call	_D_TMR0_Enable
   760                           
   761                           ;main.c: 46: do_reset = 0;
   762  000B8E  0E00               	movlw	0
   763  000B90  0100               	movlb	0	; () banked
   764  000B92  6F9E               	movwf	_do_reset& (0+255),b
   765  000B94                     
   766                           ;main.c: 50: if (do_reset) {
   767                           
   768                           ; BSR set to: 0
   769  000B94  0100               	movlb	0	; () banked
   770  000B96  519E               	movf	_do_reset& (0+255),w,b
   771  000B98  B4D8               	btfsc	status,2,c
   772  000B9A  D003               	goto	l242
   773                           
   774                           ; BSR set to: 0
   775  000B9C  00FF               	reset		;# 
   776                           
   777                           ;main.c: 52: return;
   778  000B9E  EF6A  F000         	goto	start
   779  000BA2                     l242:
   780                           
   781                           ;main.c: 53: }
   782                           ;main.c: 56: if (readReady) {
   783  000BA2  0100               	movlb	0	; () banked
   784  000BA4  51A0               	movf	_readReady& (0+255),w,b
   785  000BA6  B4D8               	btfsc	status,2,c
   786  000BA8  D05D               	goto	l252
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 57: readReady = 0;
   790  000BAA  0E00               	movlw	0
   791  000BAC  6FA0               	movwf	_readReady& (0+255),b
   792                           
   793                           ; BSR set to: 0
   794                           ;main.c: 58: read = D_UART_Read();
   795  000BAE  EC8A  F00A         	call	_D_UART_Read	;wreg free
   796  000BB2  EE20  F092         	lfsr	2,_read
   797  000BB6  0E05               	movlw	5
   798  000BB8                     u1461:
   799  000BB8  CFEB FFDB          	movff	plusw0,plusw2
   800  000BBC  06E8               	decf	wreg,f,c
   801  000BBE  E2FC               	bc	u1461
   802                           
   803                           ;main.c: 59: if (strcmp(read.command, "L") == 0) {
   804  000BC0  C094  F0A1         	movff	_read+2,strcmp@s1
   805  000BC4  C095  F0A2         	movff	_read+3,strcmp@s1+1
   806  000BC8  0E29               	movlw	low STR_11
   807  000BCA  0100               	movlb	0	; () banked
   808  000BCC  6FA3               	movwf	strcmp@s2& (0+255),b
   809  000BCE  0E08               	movlw	high STR_11
   810  000BD0  6FA4               	movwf	(strcmp@s2+1)& (0+255),b
   811  000BD2  EC63  F00A         	call	_strcmp	;wreg free
   812  000BD6  0100               	movlb	0	; () banked
   813  000BD8  51A1               	movf	?_strcmp& (0+255),w,b
   814  000BDA  11A2               	iorwf	(?_strcmp+1)& (0+255),w,b
   815  000BDC  A4D8               	btfss	status,2,c
   816  000BDE  D003               	goto	l245
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 60: C_DOOR_LockAll();
   820  000BE0  ECF3  F00A         	call	_C_DOOR_LockAll	;wreg free
   821                           
   822                           ;main.c: 61: } else if (strcmp(read.command, "U") == 0) {
   823  000BE4  D03F               	goto	l252
   824  000BE6                     l245:
   825  000BE6  C094  F0A1         	movff	_read+2,strcmp@s1
   826  000BEA  C095  F0A2         	movff	_read+3,strcmp@s1+1
   827  000BEE  0E2F               	movlw	low STR_12
   828  000BF0  0100               	movlb	0	; () banked
   829  000BF2  6FA3               	movwf	strcmp@s2& (0+255),b
   830  000BF4  0E08               	movlw	high STR_12
   831  000BF6  6FA4               	movwf	(strcmp@s2+1)& (0+255),b
   832  000BF8  EC63  F00A         	call	_strcmp	;wreg free
   833  000BFC  0100               	movlb	0	; () banked
   834  000BFE  51A1               	movf	?_strcmp& (0+255),w,b
   835  000C00  11A2               	iorwf	(?_strcmp+1)& (0+255),w,b
   836  000C02  A4D8               	btfss	status,2,c
   837  000C04  D003               	goto	l247
   838                           
   839                           ; BSR set to: 0
   840                           ;main.c: 62: C_DOOR_UnlockAll();
   841  000C06  ECDE  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   842                           
   843                           ;main.c: 63: } else if (strcmp(read.command, "I") == 0) {
   844  000C0A  D02C               	goto	l252
   845  000C0C                     l247:
   846  000C0C  C094  F0A1         	movff	_read+2,strcmp@s1
   847  000C10  C095  F0A2         	movff	_read+3,strcmp@s1+1
   848  000C14  0E27               	movlw	low STR_9
   849  000C16  0100               	movlb	0	; () banked
   850  000C18  6FA3               	movwf	strcmp@s2& (0+255),b
   851  000C1A  0E08               	movlw	high STR_9
   852  000C1C  6FA4               	movwf	(strcmp@s2+1)& (0+255),b
   853  000C1E  EC63  F00A         	call	_strcmp	;wreg free
   854  000C22  0100               	movlb	0	; () banked
   855  000C24  51A1               	movf	?_strcmp& (0+255),w,b
   856  000C26  11A2               	iorwf	(?_strcmp+1)& (0+255),w,b
   857  000C28  B4D8               	btfsc	status,2,c
   858  000C2A  D01C               	goto	l252
   859                           
   860                           ; BSR set to: 0
   861                           
   862                           ; BSR set to: 0
   863                           
   864                           ; BSR set to: 0
   865                           ;main.c: 65: } else if (strcmp(read.command, "R") == 0) {
   866  000C2C  C094  F0A1         	movff	_read+2,strcmp@s1
   867  000C30  C095  F0A2         	movff	_read+3,strcmp@s1+1
   868  000C34  0E2D               	movlw	low STR_14
   869  000C36  6FA3               	movwf	strcmp@s2& (0+255),b
   870  000C38  0E08               	movlw	high STR_14
   871  000C3A  6FA4               	movwf	(strcmp@s2+1)& (0+255),b
   872  000C3C  EC63  F00A         	call	_strcmp	;wreg free
   873  000C40  0100               	movlb	0	; () banked
   874  000C42  51A1               	movf	?_strcmp& (0+255),w,b
   875  000C44  11A2               	iorwf	(?_strcmp+1)& (0+255),w,b
   876  000C46  A4D8               	btfss	status,2,c
   877  000C48  D003               	goto	l251
   878                           
   879                           ; BSR set to: 0
   880                           ;main.c: 66: do_reset = 1;
   881  000C4A  0E01               	movlw	1
   882  000C4C  6F9E               	movwf	_do_reset& (0+255),b
   883                           
   884                           ;main.c: 67: } else {
   885  000C4E  D00A               	goto	l252
   886  000C50                     l251:
   887                           
   888                           ; BSR set to: 0
   889                           ;main.c: 68: D_UART_Write("E", "U");
   890                           
   891                           ; BSR set to: 0
   892  000C50  0E25               	movlw	low STR_15
   893  000C52  6FB3               	movwf	D_UART_Write@command& (0+255),b
   894  000C54  0E08               	movlw	high STR_15
   895  000C56  6FB4               	movwf	(D_UART_Write@command+1)& (0+255),b
   896  000C58  0E2F               	movlw	low STR_12
   897  000C5A  6FB5               	movwf	D_UART_Write@data& (0+255),b
   898  000C5C  0E08               	movlw	high STR_12
   899  000C5E  6FB6               	movwf	(D_UART_Write@data+1)& (0+255),b
   900  000C60  EC5E  F007         	call	_D_UART_Write	;wreg free
   901  000C64                     l252:
   902                           
   903                           ;main.c: 69: }
   904                           ;main.c: 70: }
   905                           ;main.c: 73: if (tick) {
   906  000C64  0100               	movlb	0	; () banked
   907  000C66  519F               	movf	_tick& (0+255),w,b
   908  000C68  B4D8               	btfsc	status,2,c
   909  000C6A  D794               	goto	l241
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 74: tick = 0;
   913  000C6C  0E00               	movlw	0
   914  000C6E  6F9F               	movwf	_tick& (0+255),b
   915                           
   916                           ; BSR set to: 0
   917                           ;main.c: 77: C_DOOR_ReadSensors();
   918  000C70  EC3F  F009         	call	_C_DOOR_ReadSensors	;wreg free
   919                           
   920                           ;main.c: 80: C_DOOR_SendStates();
   921  000C74  EC35  F008         	call	_C_DOOR_SendStates	;wreg free
   922  000C78  D78D               	goto	l241
   923  000C7A                     __end_of_main:
   924                           	opt stack 0
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           postinc0	equ	0xFEE
   930                           plusw0	equ	0xFEB
   931                           wreg	equ	0xFE8
   932                           postdec1	equ	0xFE5
   933                           fsr1l	equ	0xFE1
   934                           plusw2	equ	0xFDB
   935                           status	equ	0xFD8
   936                           
   937 ;; *************** function _strcmp *****************
   938 ;; Defined at:
   939 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   942 ;;		 -> readBuffer(166), 
   943 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   944 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;  r               1    5[BANK0 ] char 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  2    0[BANK0 ] int 
   949 ;; Registers used:
   950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   956 ;;      Params:         0       4       0       0       0       0       0       0       0
   957 ;;      Locals:         0       1       0       0       0       0       0       0       0
   958 ;;      Temps:          0       1       0       0       0       0       0       0       0
   959 ;;      Totals:         0       6       0       0       0       0       0       0       0
   960 ;;Total ram usage:        6 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    7
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_main
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text1
   971  0014C6                     __ptext1:
   972                           	opt stack 0
   973  0014C6                     _strcmp:
   974                           	opt stack 23
   975                           
   976                           ;incstack = 0
   977  0014C6  D005               	goto	l836
   978  0014C8  0100               	movlb	0	; () banked
   979  0014CA  4BA1               	infsnz	strcmp@s1& (0+255),f,b
   980  0014CC  2BA2               	incf	(strcmp@s1+1)& (0+255),f,b
   981  0014CE  4BA3               	infsnz	strcmp@s2& (0+255),f,b
   982  0014D0  2BA4               	incf	(strcmp@s2+1)& (0+255),f,b
   983  0014D2                     l836:
   984                           
   985                           ; BSR set to: 0
   986  0014D2  C0A1  FFD9         	movff	strcmp@s1,fsr2l
   987  0014D6  C0A2  FFDA         	movff	strcmp@s1+1,fsr2h
   988  0014DA  50DF               	movf	indf2,w,c
   989  0014DC  0100               	movlb	0	; () banked
   990  0014DE  6FA5               	movwf	??_strcmp& (0+255),b
   991  0014E0  C0A3  FFF6         	movff	strcmp@s2,tblptrl
   992  0014E4  C0A4  FFF7         	movff	strcmp@s2+1,tblptrh
   993  0014E8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   994  0014E8  6AF8               	clrf	tblptru,c
   995  0014EA                     	endif
   996  0014EA                     	if	0	;tblptru may be non-zero
   997  0014EA                     	endif
   998  0014EA  0008               	tblrd		*
   999  0014EC  50F5               	movf	tablat,w,c
  1000  0014EE  0800               	sublw	0
  1001  0014F0  25A5               	addwf	??_strcmp& (0+255),w,b
  1002  0014F2  6FA6               	movwf	strcmp@r& (0+255),b
  1003  0014F4  51A6               	movf	strcmp@r& (0+255),w,b
  1004  0014F6  A4D8               	btfss	status,2,c
  1005  0014F8  D007               	goto	u1340
  1006                           
  1007                           ; BSR set to: 0
  1008  0014FA  C0A1  FFD9         	movff	strcmp@s1,fsr2l
  1009  0014FE  C0A2  FFDA         	movff	strcmp@s1+1,fsr2h
  1010  001502  50DF               	movf	indf2,w,c
  1011  001504  A4D8               	btfss	status,2,c
  1012  001506  D7E0               	goto	l837
  1013  001508                     u1340:
  1014                           
  1015                           ; BSR set to: 0
  1016                           
  1017                           ; BSR set to: 0
  1018                           
  1019                           ; BSR set to: 0
  1020  001508  51A6               	movf	strcmp@r& (0+255),w,b
  1021  00150A  6FA1               	movwf	?_strcmp& (0+255),b
  1022  00150C  6BA2               	clrf	(?_strcmp+1)& (0+255),b
  1023  00150E  BFA1               	btfsc	?_strcmp& (0+255),7,b
  1024  001510  07A2               	decf	(?_strcmp+1)& (0+255),f,b
  1025  001512  0012               	return	
  1026  001514                     __end_of_strcmp:
  1027                           	opt stack 0
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           postinc0	equ	0xFEE
  1033                           plusw0	equ	0xFEB
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           indf2	equ	0xFDF
  1038                           plusw2	equ	0xFDB
  1039                           fsr2h	equ	0xFDA
  1040                           fsr2l	equ	0xFD9
  1041                           status	equ	0xFD8
  1042                           
  1043 ;; *************** function _D_UART_Read *****************
  1044 ;; Defined at:
  1045 ;;		line 240 in file "Drivers/UART_Driver.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;		None
  1048 ;; Auto vars:     Size  Location     Type
  1049 ;;		None
  1050 ;; Return value:  Size  Location     Type
  1051 ;;                  6    0[BANK0 ] struct .
  1052 ;; Registers used:
  1053 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1054 ;; Tracked objects:
  1055 ;;		On entry : 0/0
  1056 ;;		On exit  : 0/0
  1057 ;;		Unchanged: 0/0
  1058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1059 ;;      Params:         0       6       0       0       0       0       0       0       0
  1060 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1061 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1062 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1063 ;;Total ram usage:        6 bytes
  1064 ;; Hardware stack levels used:    1
  1065 ;; Hardware stack levels required when called:    7
  1066 ;; This function calls:
  1067 ;;		Nothing
  1068 ;; This function is called by:
  1069 ;;		_main
  1070 ;; This function uses a non-reentrant model
  1071 ;;
  1072                           
  1073                           	psect	text2
  1074  001514                     __ptext2:
  1075                           	opt stack 0
  1076  001514                     _D_UART_Read:
  1077                           	opt stack 23
  1078                           
  1079                           ;UART_Driver.c: 241: readData.sender = readBuffer.sender;
  1080                           
  1081                           ; BSR set to: 0
  1082                           ;incstack = 0
  1083  001514  0E0B               	movlw	low (_readBuffer+11)
  1084  001516  0100               	movlb	0	; () banked
  1085  001518  6F98               	movwf	_readData& (0+255),b
  1086  00151A  0E01               	movlw	high (_readBuffer+11)
  1087  00151C  6F99               	movwf	(_readData+1)& (0+255),b
  1088                           
  1089                           ;UART_Driver.c: 242: readData.command = readBuffer.command;
  1090  00151E  0E3E               	movlw	low (_readBuffer+62)
  1091  001520  6F9A               	movwf	(_readData+2)& (0+255),b
  1092  001522  0E01               	movlw	high (_readBuffer+62)
  1093  001524  6F9B               	movwf	(_readData+3)& (0+255),b
  1094                           
  1095                           ;UART_Driver.c: 243: readData.message = readBuffer.message;
  1096  001526  0E71               	movlw	low (_readBuffer+113)
  1097  001528  6F9C               	movwf	(_readData+4)& (0+255),b
  1098  00152A  0E01               	movlw	high (_readBuffer+113)
  1099  00152C  6F9D               	movwf	(_readData+5)& (0+255),b
  1100                           
  1101                           ; BSR set to: 0
  1102                           ;UART_Driver.c: 244: return readData;
  1103  00152E  EE20  F098         	lfsr	2,_readData
  1104  001532  EE00  F0A1         	lfsr	0,?_D_UART_Read
  1105  001536  0E05               	movlw	5
  1106  001538                     u1321:
  1107  001538  CFDB FFEB          	movff	plusw2,plusw0
  1108  00153C  06E8               	decf	wreg,f,c
  1109  00153E  E2FC               	bc	u1321
  1110  001540  0012               	return	
  1111  001542                     __end_of_D_UART_Read:
  1112                           	opt stack 0
  1113                           tblptru	equ	0xFF8
  1114                           tblptrh	equ	0xFF7
  1115                           tblptrl	equ	0xFF6
  1116                           tablat	equ	0xFF5
  1117                           postinc0	equ	0xFEE
  1118                           plusw0	equ	0xFEB
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1l	equ	0xFE1
  1122                           indf2	equ	0xFDF
  1123                           plusw2	equ	0xFDB
  1124                           fsr2h	equ	0xFDA
  1125                           fsr2l	equ	0xFD9
  1126                           status	equ	0xFD8
  1127                           
  1128 ;; *************** function _D_UART_Init *****************
  1129 ;; Defined at:
  1130 ;;		line 182 in file "Drivers/UART_Driver.c"
  1131 ;; Parameters:    Size  Location     Type
  1132 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1133 ;;		 -> STR_8(2), 
  1134 ;;  baud            2   16[BANK0 ] unsigned int 
  1135 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;                  1    wreg      void 
  1140 ;; Registers used:
  1141 ;;		wreg, status,2, status,0, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: 0/0
  1146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1147 ;;      Params:         0       5       0       0       0       0       0       0       0
  1148 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1150 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1151 ;;Total ram usage:        9 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    8
  1154 ;; This function calls:
  1155 ;;		_D_UART_Enable
  1156 ;;		___aldiv
  1157 ;; This function is called by:
  1158 ;;		_main
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           	psect	text3
  1163  001132                     __ptext3:
  1164                           	opt stack 0
  1165  001132                     _D_UART_Init:
  1166                           	opt stack 22
  1167                           
  1168                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1169                           
  1170                           ; BSR set to: 0
  1171                           ;incstack = 0
  1172  001132  9E94               	bcf	3988,7,c	;volatile
  1173                           
  1174                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1175  001134  8C94               	bsf	3988,6,c	;volatile
  1176                           
  1177                           ;UART_Driver.c: 188: deviceName = name;
  1178  001136  C0AF  F0C2         	movff	D_UART_Init@name,_deviceName
  1179  00113A  C0B0  F0C3         	movff	D_UART_Init@name+1,_deviceName+1
  1180  00113E  0100               	movlb	0	; () banked
  1181  001140  51C2               	movf	_deviceName& (0+255),w,b
  1182  001142  11C3               	iorwf	(_deviceName+1)& (0+255),w,b
  1183  001144  A4D8               	btfss	status,2,c
  1184  001146  0E00               	movlw	low (__mediumconst shr (0+16))
  1185  001148  6FC4               	movwf	(_deviceName+2)& (0+255),b
  1186                           
  1187                           ; BSR set to: 0
  1188                           ;UART_Driver.c: 189: readReady = 0;
  1189  00114A  0E00               	movlw	0
  1190  00114C  6FA0               	movwf	_readReady& (0+255),b
  1191                           
  1192                           ; BSR set to: 0
  1193                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1194  00114E  0E00               	movlw	0
  1195  001150  ECA1  F00A         	call	_D_UART_Enable
  1196                           
  1197                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1198  001154  9CAC               	bcf	4012,6,c	;volatile
  1199                           
  1200                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1201  001156  98AC               	bcf	4012,4,c	;volatile
  1202                           
  1203                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1204  001158  94AC               	bcf	4012,2,c	;volatile
  1205                           
  1206                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1207  00115A  9CAB               	bcf	4011,6,c	;volatile
  1208                           
  1209                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1210  00115C  9AB8               	bcf	4024,5,c	;volatile
  1211                           
  1212                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1213  00115E  98B8               	bcf	4024,4,c	;volatile
  1214                           
  1215                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1216  001160  96B8               	bcf	4024,3,c	;volatile
  1217                           
  1218                           ;UART_Driver.c: 208: RCSTAbits.FERR = 0;
  1219  001162  94AB               	bcf	4011,2,c	;volatile
  1220                           
  1221                           ;UART_Driver.c: 209: RCSTAbits.OERR = 0;
  1222  001164  92AB               	bcf	4011,1,c	;volatile
  1223                           
  1224                           ;UART_Driver.c: 210: RCREG = 0x00;
  1225  001166  0E00               	movlw	0
  1226  001168  6EAE               	movwf	4014,c	;volatile
  1227                           
  1228                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1229  00116A  C0B1  F0A5         	movff	D_UART_Init@baud,___aldiv@divisor
  1230  00116E  C0B2  F0A6         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1231  001172  0100               	movlb	0	; () banked
  1232  001174  6BA7               	clrf	(___aldiv@divisor+2)& (0+255),b
  1233  001176  6BA8               	clrf	(___aldiv@divisor+3)& (0+255),b
  1234  001178  0E00               	movlw	0
  1235  00117A  6FA1               	movwf	___aldiv@dividend& (0+255),b
  1236  00117C  0E24               	movlw	36
  1237  00117E  6FA2               	movwf	(___aldiv@dividend+1)& (0+255),b
  1238  001180  0EF4               	movlw	244
  1239  001182  6FA3               	movwf	(___aldiv@dividend+2)& (0+255),b
  1240  001184  0E00               	movlw	0
  1241  001186  6FA4               	movwf	(___aldiv@dividend+3)& (0+255),b
  1242  001188  ECCE  F007         	call	___aldiv	;wreg free
  1243  00118C  C0A1  F0B4         	movff	?___aldiv,_D_UART_Init$1499
  1244  001190  C0A2  F0B5         	movff	?___aldiv+1,_D_UART_Init$1499+1
  1245  001194  C0A3  F0B6         	movff	?___aldiv+2,_D_UART_Init$1499+2
  1246  001198  C0A4  F0B7         	movff	?___aldiv+3,_D_UART_Init$1499+3
  1247                           
  1248                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1249  00119C  C0B4  F0A1         	movff	_D_UART_Init$1499,___aldiv@dividend
  1250  0011A0  C0B5  F0A2         	movff	_D_UART_Init$1499+1,___aldiv@dividend+1
  1251  0011A4  C0B6  F0A3         	movff	_D_UART_Init$1499+2,___aldiv@dividend+2
  1252  0011A8  C0B7  F0A4         	movff	_D_UART_Init$1499+3,___aldiv@dividend+3
  1253  0011AC  0E40               	movlw	64
  1254  0011AE  0100               	movlb	0	; () banked
  1255  0011B0  6FA5               	movwf	___aldiv@divisor& (0+255),b
  1256  0011B2  0E00               	movlw	0
  1257  0011B4  6FA6               	movwf	(___aldiv@divisor+1)& (0+255),b
  1258  0011B6  0E00               	movlw	0
  1259  0011B8  6FA7               	movwf	(___aldiv@divisor+2)& (0+255),b
  1260  0011BA  0E00               	movlw	0
  1261  0011BC  6FA8               	movwf	(___aldiv@divisor+3)& (0+255),b
  1262  0011BE  ECCE  F007         	call	___aldiv	;wreg free
  1263  0011C2  0100               	movlb	0	; () banked
  1264  0011C4  05A1               	decf	?___aldiv& (0+255),w,b
  1265  0011C6  6EAF               	movwf	4015,c	;volatile
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;UART_Driver.c: 216: if (interrupts) {
  1269  0011C8  51B3               	movf	D_UART_Init@interrupts& (0+255),w,b
  1270  0011CA  B4D8               	btfsc	status,2,c
  1271  0011CC  0012               	return	
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;UART_Driver.c: 217: RCONbits.IPEN = 1;
  1275  0011CE  8ED0               	bsf	4048,7,c	;volatile
  1276                           
  1277                           ;UART_Driver.c: 218: INTCONbits.GIEH = 1;
  1278  0011D0  8EF2               	bsf	intcon,7,c	;volatile
  1279                           
  1280                           ;UART_Driver.c: 219: INTCONbits.GIEL = 1;
  1281  0011D2  8CF2               	bsf	intcon,6,c	;volatile
  1282                           
  1283                           ;UART_Driver.c: 220: PIR1bits.RCIF = 0;
  1284  0011D4  9A9E               	bcf	3998,5,c	;volatile
  1285                           
  1286                           ;UART_Driver.c: 221: IPR1bits.RCIP = 0;
  1287  0011D6  9A9F               	bcf	3999,5,c	;volatile
  1288                           
  1289                           ;UART_Driver.c: 222: PIE1bits.RCIE = 1;
  1290  0011D8  8A9D               	bsf	3997,5,c	;volatile
  1291  0011DA  0012               	return	
  1292  0011DC                     __end_of_D_UART_Init:
  1293                           	opt stack 0
  1294                           tblptru	equ	0xFF8
  1295                           tblptrh	equ	0xFF7
  1296                           tblptrl	equ	0xFF6
  1297                           tablat	equ	0xFF5
  1298                           intcon	equ	0xFF2
  1299                           postinc0	equ	0xFEE
  1300                           plusw0	equ	0xFEB
  1301                           wreg	equ	0xFE8
  1302                           postdec1	equ	0xFE5
  1303                           fsr1l	equ	0xFE1
  1304                           indf2	equ	0xFDF
  1305                           plusw2	equ	0xFDB
  1306                           fsr2h	equ	0xFDA
  1307                           fsr2l	equ	0xFD9
  1308                           status	equ	0xFD8
  1309                           
  1310 ;; *************** function ___aldiv *****************
  1311 ;; Defined at:
  1312 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1313 ;; Parameters:    Size  Location     Type
  1314 ;;  dividend        4    0[BANK0 ] long 
  1315 ;;  divisor         4    4[BANK0 ] long 
  1316 ;; Auto vars:     Size  Location     Type
  1317 ;;  quotient        4   10[BANK0 ] long 
  1318 ;;  sign            1    9[BANK0 ] unsigned char 
  1319 ;;  counter         1    8[BANK0 ] unsigned char 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  4    0[BANK0 ] long 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1329 ;;      Params:         0       8       0       0       0       0       0       0       0
  1330 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1331 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1332 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1333 ;;Total ram usage:       14 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    7
  1336 ;; This function calls:
  1337 ;;		Nothing
  1338 ;; This function is called by:
  1339 ;;		_D_UART_Init
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text4
  1344  000F9C                     __ptext4:
  1345                           	opt stack 0
  1346  000F9C                     ___aldiv:
  1347                           	opt stack 22
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;incstack = 0
  1351  000F9C  0E00               	movlw	0
  1352  000F9E  0100               	movlb	0	; () banked
  1353  000FA0  6FAA               	movwf	___aldiv@sign& (0+255),b
  1354                           
  1355                           ; BSR set to: 0
  1356  000FA2  AFA8               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1357  000FA4  D00A               	goto	l344
  1358                           
  1359                           ; BSR set to: 0
  1360  000FA6  1FA8               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1361  000FA8  1FA7               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1362  000FAA  1FA6               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1363  000FAC  6DA5               	negf	___aldiv@divisor& (0+255),b
  1364  000FAE  0E00               	movlw	0
  1365  000FB0  23A6               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1366  000FB2  23A7               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1367  000FB4  23A8               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1368                           
  1369                           ; BSR set to: 0
  1370  000FB6  0E01               	movlw	1
  1371  000FB8  6FAA               	movwf	___aldiv@sign& (0+255),b
  1372  000FBA                     l344:
  1373                           
  1374                           ; BSR set to: 0
  1375                           
  1376                           ; BSR set to: 0
  1377  000FBA  AFA4               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1378  000FBC  D00A               	goto	l345
  1379                           
  1380                           ; BSR set to: 0
  1381  000FBE  1FA4               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1382  000FC0  1FA3               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1383  000FC2  1FA2               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1384  000FC4  6DA1               	negf	___aldiv@dividend& (0+255),b
  1385  000FC6  0E00               	movlw	0
  1386  000FC8  23A2               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1387  000FCA  23A3               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1388  000FCC  23A4               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1389                           
  1390                           ; BSR set to: 0
  1391  000FCE  0E01               	movlw	1
  1392  000FD0  1BAA               	xorwf	___aldiv@sign& (0+255),f,b
  1393  000FD2                     l345:
  1394                           
  1395                           ; BSR set to: 0
  1396                           
  1397                           ; BSR set to: 0
  1398  000FD2  0E00               	movlw	0
  1399  000FD4  6FAB               	movwf	___aldiv@quotient& (0+255),b
  1400  000FD6  0E00               	movlw	0
  1401  000FD8  6FAC               	movwf	(___aldiv@quotient+1)& (0+255),b
  1402  000FDA  0E00               	movlw	0
  1403  000FDC  6FAD               	movwf	(___aldiv@quotient+2)& (0+255),b
  1404  000FDE  0E00               	movlw	0
  1405  000FE0  6FAE               	movwf	(___aldiv@quotient+3)& (0+255),b
  1406                           
  1407                           ; BSR set to: 0
  1408  000FE2  51A5               	movf	___aldiv@divisor& (0+255),w,b
  1409  000FE4  11A6               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1410  000FE6  11A7               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1411  000FE8  11A8               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1412  000FEA  B4D8               	btfsc	status,2,c
  1413  000FEC  D02A               	goto	l352
  1414                           
  1415                           ; BSR set to: 0
  1416  000FEE  0E01               	movlw	1
  1417  000FF0  6FA9               	movwf	___aldiv@counter& (0+255),b
  1418  000FF2  D006               	goto	l347
  1419  000FF4                     
  1420                           ; BSR set to: 0
  1421                           
  1422                           ; BSR set to: 0
  1423  000FF4  90D8               	bcf	status,0,c
  1424  000FF6  37A5               	rlcf	___aldiv@divisor& (0+255),f,b
  1425  000FF8  37A6               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1426  000FFA  37A7               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1427  000FFC  37A8               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1428  000FFE  2BA9               	incf	___aldiv@counter& (0+255),f,b
  1429  001000                     l347:
  1430                           
  1431                           ; BSR set to: 0
  1432                           
  1433                           ; BSR set to: 0
  1434  001000  AFA8               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1435  001002  D7F8               	goto	l348
  1436  001004                     u1090:
  1437                           
  1438                           ; BSR set to: 0
  1439                           
  1440                           ; BSR set to: 0
  1441                           
  1442                           ; BSR set to: 0
  1443  001004  90D8               	bcf	status,0,c
  1444  001006  37AB               	rlcf	___aldiv@quotient& (0+255),f,b
  1445  001008  37AC               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1446  00100A  37AD               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1447  00100C  37AE               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1448                           
  1449                           ; BSR set to: 0
  1450  00100E  51A5               	movf	___aldiv@divisor& (0+255),w,b
  1451  001010  5DA1               	subwf	___aldiv@dividend& (0+255),w,b
  1452  001012  51A6               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1453  001014  59A2               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1454  001016  51A7               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1455  001018  59A3               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1456  00101A  51A8               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1457  00101C  59A4               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1458  00101E  A0D8               	btfss	status,0,c
  1459  001020  D009               	goto	l351
  1460                           
  1461                           ; BSR set to: 0
  1462  001022  51A5               	movf	___aldiv@divisor& (0+255),w,b
  1463  001024  5FA1               	subwf	___aldiv@dividend& (0+255),f,b
  1464  001026  51A6               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1465  001028  5BA2               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1466  00102A  51A7               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1467  00102C  5BA3               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1468  00102E  51A8               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1469  001030  5BA4               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1470                           
  1471                           ; BSR set to: 0
  1472  001032  81AB               	bsf	___aldiv@quotient& (0+255),0,b
  1473  001034                     l351:
  1474                           
  1475                           ; BSR set to: 0
  1476                           
  1477                           ; BSR set to: 0
  1478  001034  90D8               	bcf	status,0,c
  1479  001036  33A8               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1480  001038  33A7               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1481  00103A  33A6               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1482  00103C  33A5               	rrcf	___aldiv@divisor& (0+255),f,b
  1483                           
  1484                           ; BSR set to: 0
  1485  00103E  2FA9               	decfsz	___aldiv@counter& (0+255),f,b
  1486  001040  D7E1               	goto	u1090
  1487  001042                     l352:
  1488                           
  1489                           ; BSR set to: 0
  1490                           
  1491                           ; BSR set to: 0
  1492                           
  1493                           ; BSR set to: 0
  1494  001042  51AA               	movf	___aldiv@sign& (0+255),w,b
  1495  001044  B4D8               	btfsc	status,2,c
  1496  001046  D008               	goto	l353
  1497                           
  1498                           ; BSR set to: 0
  1499  001048  1FAE               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1500  00104A  1FAD               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1501  00104C  1FAC               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1502  00104E  6DAB               	negf	___aldiv@quotient& (0+255),b
  1503  001050  0E00               	movlw	0
  1504  001052  23AC               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1505  001054  23AD               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1506  001056  23AE               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1507  001058                     l353:
  1508                           
  1509                           ; BSR set to: 0
  1510                           
  1511                           ; BSR set to: 0
  1512  001058  C0AB  F0A1         	movff	___aldiv@quotient,?___aldiv
  1513  00105C  C0AC  F0A2         	movff	___aldiv@quotient+1,?___aldiv+1
  1514  001060  C0AD  F0A3         	movff	___aldiv@quotient+2,?___aldiv+2
  1515  001064  C0AE  F0A4         	movff	___aldiv@quotient+3,?___aldiv+3
  1516  001068  0012               	return	
  1517  00106A                     __end_of___aldiv:
  1518                           	opt stack 0
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           intcon	equ	0xFF2
  1524                           postinc0	equ	0xFEE
  1525                           plusw0	equ	0xFEB
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1l	equ	0xFE1
  1529                           indf2	equ	0xFDF
  1530                           plusw2	equ	0xFDB
  1531                           fsr2h	equ	0xFDA
  1532                           fsr2l	equ	0xFD9
  1533                           status	equ	0xFD8
  1534                           
  1535 ;; *************** function _D_UART_Enable *****************
  1536 ;; Defined at:
  1537 ;;		line 247 in file "Drivers/UART_Driver.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  enable          1    wreg     unsigned char 
  1540 ;; Auto vars:     Size  Location     Type
  1541 ;;  enable          1    0[BANK0 ] unsigned char 
  1542 ;; Return value:  Size  Location     Type
  1543 ;;                  1    wreg      void 
  1544 ;; Registers used:
  1545 ;;		wreg, status,2
  1546 ;; Tracked objects:
  1547 ;;		On entry : 0/0
  1548 ;;		On exit  : 0/0
  1549 ;;		Unchanged: 0/0
  1550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1551 ;;      Params:         0       0       0       0       0       0       0       0       0
  1552 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1554 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1555 ;;Total ram usage:        1 bytes
  1556 ;; Hardware stack levels used:    1
  1557 ;; Hardware stack levels required when called:    7
  1558 ;; This function calls:
  1559 ;;		Nothing
  1560 ;; This function is called by:
  1561 ;;		_D_UART_Init
  1562 ;;		_main
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text5
  1567  001542                     __ptext5:
  1568                           	opt stack 0
  1569  001542                     _D_UART_Enable:
  1570                           	opt stack 22
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;incstack = 0
  1574                           ;D_UART_Enable@enable stored from wreg
  1575  001542  0100               	movlb	0	; () banked
  1576  001544  6FA1               	movwf	D_UART_Enable@enable& (0+255),b
  1577                           
  1578                           ;UART_Driver.c: 248: if(enable) {
  1579  001546  0100               	movlb	0	; () banked
  1580  001548  51A1               	movf	D_UART_Enable@enable& (0+255),w,b
  1581  00154A  B4D8               	btfsc	status,2,c
  1582  00154C  D006               	goto	l169
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;UART_Driver.c: 249: TRISCbits.TRISC7 = 0;
  1586  00154E  9E94               	bcf	3988,7,c	;volatile
  1587                           
  1588                           ;UART_Driver.c: 250: TRISCbits.TRISC6 = 1;
  1589  001550  8C94               	bsf	3988,6,c	;volatile
  1590                           
  1591                           ;UART_Driver.c: 251: TXSTAbits.TXEN = 1;
  1592  001552  8AAC               	bsf	4012,5,c	;volatile
  1593                           
  1594                           ;UART_Driver.c: 252: RCSTAbits.CREN = 1;
  1595  001554  88AB               	bsf	4011,4,c	;volatile
  1596                           
  1597                           ;UART_Driver.c: 253: RCSTAbits.SPEN = 1;
  1598  001556  8EAB               	bsf	4011,7,c	;volatile
  1599                           
  1600                           ;UART_Driver.c: 254: } else {
  1601  001558  0012               	return	
  1602  00155A                     l169:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;UART_Driver.c: 255: TRISCbits.TRISC7 = 0;
  1606  00155A  9E94               	bcf	3988,7,c	;volatile
  1607                           
  1608                           ;UART_Driver.c: 256: TRISCbits.TRISC6 = 0;
  1609  00155C  9C94               	bcf	3988,6,c	;volatile
  1610                           
  1611                           ;UART_Driver.c: 257: TXSTAbits.TXEN = 0;
  1612  00155E  9AAC               	bcf	4012,5,c	;volatile
  1613                           
  1614                           ;UART_Driver.c: 258: RCSTAbits.CREN = 0;
  1615  001560  98AB               	bcf	4011,4,c	;volatile
  1616                           
  1617                           ;UART_Driver.c: 259: RCSTAbits.SPEN = 0;
  1618  001562  9EAB               	bcf	4011,7,c	;volatile
  1619  001564  0012               	return	
  1620  001566                     __end_of_D_UART_Enable:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           intcon	equ	0xFF2
  1627                           postinc0	equ	0xFEE
  1628                           plusw0	equ	0xFEB
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           indf2	equ	0xFDF
  1633                           plusw2	equ	0xFDB
  1634                           fsr2h	equ	0xFDA
  1635                           fsr2l	equ	0xFD9
  1636                           status	equ	0xFD8
  1637                           
  1638 ;; *************** function _D_TMR0_Init *****************
  1639 ;; Defined at:
  1640 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1641 ;; Parameters:    Size  Location     Type
  1642 ;;		None
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;                  1    wreg      void 
  1647 ;; Registers used:
  1648 ;;		wreg, status,2, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1654 ;;      Params:         0       0       0       0       0       0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1656 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1657 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1658 ;;Total ram usage:        0 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    8
  1661 ;; This function calls:
  1662 ;;		_D_TMR0_Enable
  1663 ;; This function is called by:
  1664 ;;		_main
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text6
  1669  001566                     __ptext6:
  1670                           	opt stack 0
  1671  001566                     _D_TMR0_Init:
  1672                           	opt stack 22
  1673                           
  1674                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1675                           
  1676                           ; BSR set to: 0
  1677                           ;incstack = 0
  1678  001566  0E00               	movlw	0
  1679  001568  ECD4  F00A         	call	_D_TMR0_Enable
  1680                           
  1681                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1682  00156C  9CD5               	bcf	4053,6,c	;volatile
  1683                           
  1684                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1685  00156E  9AD5               	bcf	4053,5,c	;volatile
  1686                           
  1687                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1688  001570  98D5               	bcf	4053,4,c	;volatile
  1689                           
  1690                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1691  001572  96D5               	bcf	4053,3,c	;volatile
  1692                           
  1693                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1694  001574  50D5               	movf	4053,w,c	;volatile
  1695  001576  0BF8               	andlw	-8
  1696  001578  0902               	iorlw	2
  1697  00157A  6ED5               	movwf	4053,c	;volatile
  1698                           
  1699                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1700  00157C  8ED0               	bsf	4048,7,c	;volatile
  1701                           
  1702                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1703  00157E  8EF2               	bsf	intcon,7,c	;volatile
  1704                           
  1705                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1706  001580  8CF2               	bsf	intcon,6,c	;volatile
  1707                           
  1708                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1709  001582  94F2               	bcf	intcon,2,c	;volatile
  1710                           
  1711                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1712  001584  84F1               	bsf	intcon2,2,c	;volatile
  1713                           
  1714                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1715  001586  8AF2               	bsf	intcon,5,c	;volatile
  1716  001588  0012               	return		;funcret
  1717  00158A                     __end_of_D_TMR0_Init:
  1718                           	opt stack 0
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           intcon	equ	0xFF2
  1724                           intcon2	equ	0xFF1
  1725                           postinc0	equ	0xFEE
  1726                           plusw0	equ	0xFEB
  1727                           wreg	equ	0xFE8
  1728                           postdec1	equ	0xFE5
  1729                           fsr1l	equ	0xFE1
  1730                           indf2	equ	0xFDF
  1731                           plusw2	equ	0xFDB
  1732                           fsr2h	equ	0xFDA
  1733                           fsr2l	equ	0xFD9
  1734                           status	equ	0xFD8
  1735                           
  1736 ;; *************** function _D_TMR0_Enable *****************
  1737 ;; Defined at:
  1738 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1739 ;; Parameters:    Size  Location     Type
  1740 ;;  enable          1    wreg     unsigned char 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  enable          1    0[BANK0 ] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  1    wreg      void 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1752 ;;      Params:         0       0       0       0       0       0       0       0       0
  1753 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1755 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1756 ;;Total ram usage:        1 bytes
  1757 ;; Hardware stack levels used:    1
  1758 ;; Hardware stack levels required when called:    7
  1759 ;; This function calls:
  1760 ;;		Nothing
  1761 ;; This function is called by:
  1762 ;;		_D_TMR0_Init
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766                           
  1767                           	psect	text7
  1768  0015A8                     __ptext7:
  1769                           	opt stack 0
  1770  0015A8                     _D_TMR0_Enable:
  1771                           	opt stack 22
  1772                           
  1773                           ;incstack = 0
  1774                           ;D_TMR0_Enable@enable stored from wreg
  1775  0015A8  0100               	movlb	0	; () banked
  1776  0015AA  6FA1               	movwf	D_TMR0_Enable@enable& (0+255),b
  1777                           
  1778                           ;TMR0_Driver.c: 54: if (enable) {
  1779  0015AC  0100               	movlb	0	; () banked
  1780  0015AE  51A1               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1781  0015B0  B4D8               	btfsc	status,2,c
  1782  0015B2  D002               	goto	l196
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1786  0015B4  8ED5               	bsf	4053,7,c	;volatile
  1787                           
  1788                           ;TMR0_Driver.c: 56: } else {
  1789  0015B6  0012               	return	
  1790  0015B8                     l196:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1794  0015B8  9ED5               	bcf	4053,7,c	;volatile
  1795  0015BA  0012               	return	
  1796  0015BC                     __end_of_D_TMR0_Enable:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           intcon	equ	0xFF2
  1803                           intcon2	equ	0xFF1
  1804                           postinc0	equ	0xFEE
  1805                           plusw0	equ	0xFEB
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           indf2	equ	0xFDF
  1810                           plusw2	equ	0xFDB
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _D_PORT_Init *****************
  1816 ;; Defined at:
  1817 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, status,2
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    7
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		_main
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	text8
  1846  00158A                     __ptext8:
  1847                           	opt stack 0
  1848  00158A                     _D_PORT_Init:
  1849                           	opt stack 23
  1850                           
  1851                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;incstack = 0
  1855  00158A  0E00               	movlw	0
  1856  00158C  6E92               	movwf	3986,c	;volatile
  1857  00158E  0E00               	movlw	0
  1858  001590  6E80               	movwf	3968,c	;volatile
  1859                           
  1860                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1861  001592  0E00               	movlw	0
  1862  001594  6E93               	movwf	3987,c	;volatile
  1863  001596  0E00               	movlw	0
  1864  001598  6E81               	movwf	3969,c	;volatile
  1865                           
  1866                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1867  00159A  0E00               	movlw	0
  1868  00159C  6E94               	movwf	3988,c	;volatile
  1869  00159E  0E00               	movlw	0
  1870  0015A0  6E82               	movwf	3970,c	;volatile
  1871                           
  1872                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1873  0015A2  0E0F               	movlw	15
  1874  0015A4  6EC1               	movwf	4033,c	;volatile
  1875  0015A6  0012               	return		;funcret
  1876  0015A8                     __end_of_D_PORT_Init:
  1877                           	opt stack 0
  1878                           tblptru	equ	0xFF8
  1879                           tblptrh	equ	0xFF7
  1880                           tblptrl	equ	0xFF6
  1881                           tablat	equ	0xFF5
  1882                           intcon	equ	0xFF2
  1883                           intcon2	equ	0xFF1
  1884                           postinc0	equ	0xFEE
  1885                           plusw0	equ	0xFEB
  1886                           wreg	equ	0xFE8
  1887                           postdec1	equ	0xFE5
  1888                           fsr1l	equ	0xFE1
  1889                           indf2	equ	0xFDF
  1890                           plusw2	equ	0xFDB
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _C_DOOR_UnlockAll *****************
  1896 ;; Defined at:
  1897 ;;		line 91 in file "Controllers/DOOR_Controller.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1911 ;;      Params:         0       0       0       0       0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    7
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text9
  1926  0015BC                     __ptext9:
  1927                           	opt stack 0
  1928  0015BC                     _C_DOOR_UnlockAll:
  1929                           	opt stack 23
  1930                           
  1931                           ;DOOR_Controller.c: 96: *doors[0].lock_port &= 0x3F;
  1932                           
  1933                           ;incstack = 0
  1934  0015BC  C062  FFD9         	movff	_doors+2,fsr2l
  1935  0015C0  C063  FFDA         	movff	_doors+3,fsr2h
  1936  0015C4  0E3F               	movlw	63
  1937  0015C6  16DF               	andwf	indf2,f,c
  1938  0015C8  0012               	return		;funcret
  1939  0015CA                     __end_of_C_DOOR_UnlockAll:
  1940                           	opt stack 0
  1941                           tblptru	equ	0xFF8
  1942                           tblptrh	equ	0xFF7
  1943                           tblptrl	equ	0xFF6
  1944                           tablat	equ	0xFF5
  1945                           intcon	equ	0xFF2
  1946                           intcon2	equ	0xFF1
  1947                           postinc0	equ	0xFEE
  1948                           plusw0	equ	0xFEB
  1949                           wreg	equ	0xFE8
  1950                           postdec1	equ	0xFE5
  1951                           fsr1l	equ	0xFE1
  1952                           indf2	equ	0xFDF
  1953                           plusw2	equ	0xFDB
  1954                           fsr2h	equ	0xFDA
  1955                           fsr2l	equ	0xFD9
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _C_DOOR_SendStates *****************
  1959 ;; Defined at:
  1960 ;;		line 106 in file "Controllers/DOOR_Controller.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;  com             3   25[BANK0 ] unsigned char [3]
  1965 ;;  mes             2   28[BANK0 ] unsigned char [2]
  1966 ;;  d               1   30[BANK0 ] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1976 ;;      Params:         0       0       0       0       0       0       0       0       0
  1977 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1978 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1979 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1980 ;;Total ram usage:        8 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:   11
  1983 ;; This function calls:
  1984 ;;		_D_UART_Write
  1985 ;;		_commandAndMessage
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text10
  1992  00106A                     __ptext10:
  1993                           	opt stack 0
  1994  00106A                     _C_DOOR_SendStates:
  1995                           	opt stack 19
  1996                           
  1997                           ;DOOR_Controller.c: 107: uint8_t d;
  1998                           ;DOOR_Controller.c: 108: for (d = 0; d < 5; d++) {
  1999                           
  2000                           ;incstack = 0
  2001  00106A  0E00               	movlw	0
  2002  00106C  0100               	movlb	0	; () banked
  2003  00106E  6FBF               	movwf	C_DOOR_SendStates@d& (0+255),b
  2004  001070                     l1686:
  2005                           
  2006                           ; BSR set to: 0
  2007  001070  0E04               	movlw	4
  2008  001072  65BF               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  2009  001074  D001               	goto	l44
  2010  001076  0012               	return	
  2011  001078                     l44:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;DOOR_Controller.c: 109: if (doors[d].was_open != doors[d].is_open) {
  2015                           
  2016                           ; BSR set to: 0
  2017  001078  51BF               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2018  00107A  0D0A               	mullw	10
  2019  00107C  0E06               	movlw	6
  2020  00107E  26F3               	addwf	prodl,f,c
  2021  001080  0E00               	movlw	0
  2022  001082  22F4               	addwfc	prodh,f,c
  2023  001084  0E60               	movlw	low _doors
  2024  001086  24F3               	addwf	prodl,w,c
  2025  001088  6ED9               	movwf	fsr2l,c
  2026  00108A  0E00               	movlw	high _doors
  2027  00108C  20F4               	addwfc	prodh,w,c
  2028  00108E  6EDA               	movwf	fsr2h,c
  2029  001090  51BF               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2030  001092  0D0A               	mullw	10
  2031  001094  0E05               	movlw	5
  2032  001096  26F3               	addwf	prodl,f,c
  2033  001098  0E00               	movlw	0
  2034  00109A  22F4               	addwfc	prodh,f,c
  2035  00109C  0E60               	movlw	low _doors
  2036  00109E  24F3               	addwf	prodl,w,c
  2037  0010A0  6EE1               	movwf	fsr1l,c
  2038  0010A2  0E00               	movlw	high _doors
  2039  0010A4  20F4               	addwfc	prodh,w,c
  2040  0010A6  6EE2               	movwf	fsr1h,c
  2041  0010A8  50DE               	movf	postinc2,w,c
  2042  0010AA  18E6               	xorwf	postinc1,w,c
  2043  0010AC  B4D8               	btfsc	status,2,c
  2044  0010AE  D03F               	goto	l46
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;DOOR_Controller.c: 111: char com[3];
  2048                           ;DOOR_Controller.c: 112: char mes[2];
  2049                           ;DOOR_Controller.c: 113: commandAndMessage(doors[d], com, mes);
  2050  0010B0  51BF               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2051  0010B2  0D0A               	mullw	10
  2052  0010B4  0E60               	movlw	low _doors
  2053  0010B6  24F3               	addwf	prodl,w,c
  2054  0010B8  6ED9               	movwf	fsr2l,c
  2055  0010BA  0E00               	movlw	high _doors
  2056  0010BC  20F4               	addwfc	prodh,w,c
  2057  0010BE  6EDA               	movwf	fsr2h,c
  2058  0010C0  EE00  F0A1         	lfsr	0,commandAndMessage@door
  2059  0010C4  0E09               	movlw	9
  2060  0010C6                     u1191:
  2061  0010C6  CFDB FFEB          	movff	plusw2,plusw0
  2062  0010CA  06E8               	decf	wreg,f,c
  2063  0010CC  E2FC               	bc	u1191
  2064  0010CE  0EBA               	movlw	low C_DOOR_SendStates@com
  2065  0010D0  6FAB               	movwf	commandAndMessage@com& (0+255),b
  2066  0010D2  0E00               	movlw	high C_DOOR_SendStates@com
  2067  0010D4  6FAC               	movwf	(commandAndMessage@com+1)& (0+255),b
  2068  0010D6  0EBD               	movlw	low C_DOOR_SendStates@mes
  2069  0010D8  6FAD               	movwf	commandAndMessage@mes& (0+255),b
  2070  0010DA  0E00               	movlw	high C_DOOR_SendStates@mes
  2071  0010DC  6FAE               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2072  0010DE  EC82  F009         	call	_commandAndMessage	;wreg free
  2073                           
  2074                           ;DOOR_Controller.c: 116: D_UART_Write(com, mes);
  2075  0010E2  0EBA               	movlw	low C_DOOR_SendStates@com
  2076  0010E4  0100               	movlb	0	; () banked
  2077  0010E6  6FB3               	movwf	D_UART_Write@command& (0+255),b
  2078  0010E8  0E00               	movlw	high C_DOOR_SendStates@com
  2079  0010EA  6FB4               	movwf	(D_UART_Write@command+1)& (0+255),b
  2080  0010EC  0EBD               	movlw	low C_DOOR_SendStates@mes
  2081  0010EE  6FB5               	movwf	D_UART_Write@data& (0+255),b
  2082  0010F0  0E00               	movlw	high C_DOOR_SendStates@mes
  2083  0010F2  6FB6               	movwf	(D_UART_Write@data+1)& (0+255),b
  2084  0010F4  EC5E  F007         	call	_D_UART_Write	;wreg free
  2085                           
  2086                           ;DOOR_Controller.c: 118: doors[d].was_open = doors[d].is_open;
  2087  0010F8  0100               	movlb	0	; () banked
  2088  0010FA  51BF               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2089  0010FC  0D0A               	mullw	10
  2090  0010FE  0E06               	movlw	6
  2091  001100  26F3               	addwf	prodl,f,c
  2092  001102  0E00               	movlw	0
  2093  001104  22F4               	addwfc	prodh,f,c
  2094  001106  0E60               	movlw	low _doors
  2095  001108  24F3               	addwf	prodl,w,c
  2096  00110A  6ED9               	movwf	fsr2l,c
  2097  00110C  0E00               	movlw	high _doors
  2098  00110E  20F4               	addwfc	prodh,w,c
  2099  001110  6EDA               	movwf	fsr2h,c
  2100  001112  51BF               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2101  001114  0D0A               	mullw	10
  2102  001116  0E05               	movlw	5
  2103  001118  26F3               	addwf	prodl,f,c
  2104  00111A  0E00               	movlw	0
  2105  00111C  22F4               	addwfc	prodh,f,c
  2106  00111E  0E60               	movlw	low _doors
  2107  001120  24F3               	addwf	prodl,w,c
  2108  001122  6EE1               	movwf	fsr1l,c
  2109  001124  0E00               	movlw	high _doors
  2110  001126  20F4               	addwfc	prodh,w,c
  2111  001128  6EE2               	movwf	fsr1h,c
  2112  00112A  CFDF FFE7          	movff	indf2,indf1
  2113  00112E                     l46:
  2114                           
  2115                           ; BSR set to: 0
  2116                           
  2117                           ; BSR set to: 0
  2118  00112E  2BBF               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2119  001130  D79F               	goto	l1686
  2120  001132                     __end_of_C_DOOR_SendStates:
  2121                           	opt stack 0
  2122                           tblptru	equ	0xFF8
  2123                           tblptrh	equ	0xFF7
  2124                           tblptrl	equ	0xFF6
  2125                           tablat	equ	0xFF5
  2126                           prodh	equ	0xFF4
  2127                           prodl	equ	0xFF3
  2128                           intcon	equ	0xFF2
  2129                           intcon2	equ	0xFF1
  2130                           postinc0	equ	0xFEE
  2131                           plusw0	equ	0xFEB
  2132                           wreg	equ	0xFE8
  2133                           indf1	equ	0xFE7
  2134                           postinc1	equ	0xFE6
  2135                           postdec1	equ	0xFE5
  2136                           fsr1h	equ	0xFE2
  2137                           fsr1l	equ	0xFE1
  2138                           indf2	equ	0xFDF
  2139                           postinc2	equ	0xFDE
  2140                           plusw2	equ	0xFDB
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           
  2145 ;; *************** function _commandAndMessage *****************
  2146 ;; Defined at:
  2147 ;;		line 26 in file "Controllers/DOOR_Controller.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;  door           10    0[BANK0 ] struct .
  2150 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2151 ;;		 -> C_DOOR_SendStates@com(3), 
  2152 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2153 ;;		 -> C_DOOR_SendStates@mes(2), 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2165 ;;      Params:         0      14       0       0       0       0       0       0       0
  2166 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2167 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2168 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2169 ;;Total ram usage:       14 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    7
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_C_DOOR_SendStates
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           	psect	text11
  2180  001304                     __ptext11:
  2181                           	opt stack 0
  2182  001304                     _commandAndMessage:
  2183                           	opt stack 22
  2184                           
  2185                           ;DOOR_Controller.c: 28: com[0] = 'P';
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;incstack = 0
  2189  001304  C0AB  FFD9         	movff	commandAndMessage@com,fsr2l
  2190  001308  C0AC  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2191  00130C  0E50               	movlw	80
  2192  00130E  6EDF               	movwf	indf2,c
  2193                           
  2194                           ;DOOR_Controller.c: 29: com[1] = door.id + 0x30;
  2195  001310  0100               	movlb	0	; () banked
  2196  001312  EE20 F001          	lfsr	2,1
  2197  001316  51AB               	movf	commandAndMessage@com& (0+255),w,b
  2198  001318  26D9               	addwf	fsr2l,f,c
  2199  00131A  51AC               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2200  00131C  22DA               	addwfc	fsr2h,f,c
  2201  00131E  51A1               	movf	commandAndMessage@door& (0+255),w,b
  2202  001320  0F30               	addlw	48
  2203  001322  6EDF               	movwf	indf2,c
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;DOOR_Controller.c: 30: com[2] = '\0';
  2207  001324  EE20 F002          	lfsr	2,2
  2208  001328  51AB               	movf	commandAndMessage@com& (0+255),w,b
  2209  00132A  26D9               	addwf	fsr2l,f,c
  2210  00132C  51AC               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2211  00132E  22DA               	addwfc	fsr2h,f,c
  2212  001330  0E00               	movlw	0
  2213  001332  6EDF               	movwf	indf2,c
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;DOOR_Controller.c: 33: if (door.is_open) {
  2217  001334  51A7               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2218  001336  B4D8               	btfsc	status,2,c
  2219  001338  D006               	goto	l11
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;DOOR_Controller.c: 34: mes[0] = 'O';
  2223  00133A  C0AD  FFD9         	movff	commandAndMessage@mes,fsr2l
  2224  00133E  C0AE  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2225  001342  0E4F               	movlw	79
  2226  001344  D005               	goto	L1
  2227  001346                     l11:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;DOOR_Controller.c: 36: mes[0] = 'C';
  2231                           
  2232                           ; BSR set to: 0
  2233  001346  C0AD  FFD9         	movff	commandAndMessage@mes,fsr2l
  2234  00134A  C0AE  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2235  00134E  0E43               	movlw	67
  2236  001350                     L1:
  2237  001350  6EDF               	movwf	indf2,c
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;DOOR_Controller.c: 37: }
  2241                           ;DOOR_Controller.c: 38: mes[1] = '\0';
  2242                           
  2243                           ; BSR set to: 0
  2244  001352  EE20 F001          	lfsr	2,1
  2245  001356  51AD               	movf	commandAndMessage@mes& (0+255),w,b
  2246  001358  26D9               	addwf	fsr2l,f,c
  2247  00135A  51AE               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2248  00135C  22DA               	addwfc	fsr2h,f,c
  2249  00135E  0E00               	movlw	0
  2250  001360  6EDF               	movwf	indf2,c
  2251                           
  2252                           ; BSR set to: 0
  2253  001362  0012               	return		;funcret
  2254  001364                     __end_of_commandAndMessage:
  2255                           	opt stack 0
  2256                           tblptru	equ	0xFF8
  2257                           tblptrh	equ	0xFF7
  2258                           tblptrl	equ	0xFF6
  2259                           tablat	equ	0xFF5
  2260                           prodh	equ	0xFF4
  2261                           prodl	equ	0xFF3
  2262                           intcon	equ	0xFF2
  2263                           intcon2	equ	0xFF1
  2264                           postinc0	equ	0xFEE
  2265                           plusw0	equ	0xFEB
  2266                           wreg	equ	0xFE8
  2267                           indf1	equ	0xFE7
  2268                           postinc1	equ	0xFE6
  2269                           postdec1	equ	0xFE5
  2270                           fsr1h	equ	0xFE2
  2271                           fsr1l	equ	0xFE1
  2272                           indf2	equ	0xFDF
  2273                           postinc2	equ	0xFDE
  2274                           plusw2	equ	0xFDB
  2275                           fsr2h	equ	0xFDA
  2276                           fsr2l	equ	0xFD9
  2277                           status	equ	0xFD8
  2278                           
  2279 ;; *************** function _D_UART_Write *****************
  2280 ;; Defined at:
  2281 ;;		line 226 in file "Drivers/UART_Driver.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2284 ;;		 -> STR_15(2), STR_9(2), C_DOOR_SendStates@com(3), 
  2285 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2286 ;;		 -> STR_16(2), STR_10(2), C_DOOR_SendStates@mes(2), 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;		None
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2298 ;;      Params:         0       4       0       0       0       0       0       0       0
  2299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2300 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2301 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2302 ;;Total ram usage:        5 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:   10
  2305 ;; This function calls:
  2306 ;;		_printf
  2307 ;; This function is called by:
  2308 ;;		_C_DOOR_SendStates
  2309 ;;		_main
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           	psect	text12
  2314  000EBC                     __ptext12:
  2315                           	opt stack 0
  2316  000EBC                     _D_UART_Write:
  2317                           	opt stack 20
  2318                           
  2319                           ;UART_Driver.c: 227: printf(startCharacter);
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;incstack = 0
  2323  000EBC  C041  F0A8         	movff	_startCharacter,printf@f
  2324  000EC0  C042  F0A9         	movff	_startCharacter+1,printf@f+1
  2325  000EC4  0100               	movlb	0	; () banked
  2326  000EC6  51A8               	movf	printf@f& (0+255),w,b
  2327  000EC8  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2328  000ECA  A4D8               	btfss	status,2,c
  2329  000ECC  0E00               	movlw	low (__mediumconst shr (0+16))
  2330  000ECE  6FAA               	movwf	(printf@f+2)& (0+255),b
  2331  000ED0  ECE8  F004         	call	_printf	;wreg free
  2332                           
  2333                           ;UART_Driver.c: 229: printf(messageCharacter);
  2334  000ED4  C0C5  F0A8         	movff	_messageCharacter,printf@f
  2335  000ED8  C0C6  F0A9         	movff	_messageCharacter+1,printf@f+1
  2336  000EDC  0100               	movlb	0	; () banked
  2337  000EDE  51A8               	movf	printf@f& (0+255),w,b
  2338  000EE0  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2339  000EE2  A4D8               	btfss	status,2,c
  2340  000EE4  0E00               	movlw	low (__mediumconst shr (0+16))
  2341  000EE6  6FAA               	movwf	(printf@f+2)& (0+255),b
  2342  000EE8  ECE8  F004         	call	_printf	;wreg free
  2343                           
  2344                           ;UART_Driver.c: 230: printf(deviceName);
  2345  000EEC  C0C2  F0A8         	movff	_deviceName,printf@f
  2346  000EF0  C0C3  F0A9         	movff	_deviceName+1,printf@f+1
  2347  000EF4  C0C4  F0AA         	movff	_deviceName+2,printf@f+2
  2348  000EF8  ECE8  F004         	call	_printf	;wreg free
  2349                           
  2350                           ;UART_Driver.c: 232: printf(":");printf(command);
  2351  000EFC  0E35               	movlw	low STR_6
  2352  000EFE  0100               	movlb	0	; () banked
  2353  000F00  6FA8               	movwf	printf@f& (0+255),b
  2354  000F02  0E08               	movlw	high STR_6
  2355  000F04  6FA9               	movwf	(printf@f+1)& (0+255),b
  2356  000F06  51A8               	movf	printf@f& (0+255),w,b
  2357  000F08  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2358  000F0A  A4D8               	btfss	status,2,c
  2359  000F0C  0E00               	movlw	low (__mediumconst shr (0+16))
  2360  000F0E  6FAA               	movwf	(printf@f+2)& (0+255),b
  2361  000F10  ECE8  F004         	call	_printf	;wreg free
  2362  000F14  C0B3  F0A8         	movff	D_UART_Write@command,printf@f
  2363  000F18  C0B4  F0A9         	movff	D_UART_Write@command+1,printf@f+1
  2364  000F1C  0100               	movlb	0	; () banked
  2365  000F1E  6BAA               	clrf	(printf@f+2)& (0+255),b
  2366  000F20  51A8               	movf	printf@f& (0+255),w,b
  2367  000F22  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2368  000F24  B4D8               	btfsc	status,2,c
  2369  000F26  D005               	goto	u1021
  2370  000F28  0E07               	movlw	(high __ramtop+-1)
  2371  000F2A  65B4               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2372  000F2C  D001               	goto	u10211
  2373  000F2E  D001               	goto	u1021
  2374  000F30                     u10211:
  2375  000F30  8BAA               	bsf	(printf@f+2)& (0+255),5,b
  2376  000F32                     u1021:
  2377  000F32  ECE8  F004         	call	_printf	;wreg free
  2378                           
  2379                           ;UART_Driver.c: 234: printf(":");printf(data);
  2380  000F36  0E35               	movlw	low STR_6
  2381  000F38  0100               	movlb	0	; () banked
  2382  000F3A  6FA8               	movwf	printf@f& (0+255),b
  2383  000F3C  0E08               	movlw	high STR_6
  2384  000F3E  6FA9               	movwf	(printf@f+1)& (0+255),b
  2385  000F40  51A8               	movf	printf@f& (0+255),w,b
  2386  000F42  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2387  000F44  A4D8               	btfss	status,2,c
  2388  000F46  0E00               	movlw	low (__mediumconst shr (0+16))
  2389  000F48  6FAA               	movwf	(printf@f+2)& (0+255),b
  2390  000F4A  ECE8  F004         	call	_printf	;wreg free
  2391  000F4E  C0B5  F0A8         	movff	D_UART_Write@data,printf@f
  2392  000F52  C0B6  F0A9         	movff	D_UART_Write@data+1,printf@f+1
  2393  000F56  0100               	movlb	0	; () banked
  2394  000F58  6BAA               	clrf	(printf@f+2)& (0+255),b
  2395  000F5A  51A8               	movf	printf@f& (0+255),w,b
  2396  000F5C  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2397  000F5E  B4D8               	btfsc	status,2,c
  2398  000F60  D005               	goto	u1031
  2399  000F62  0E07               	movlw	(high __ramtop+-1)
  2400  000F64  65B6               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2401  000F66  D001               	goto	u10311
  2402  000F68  D001               	goto	u1031
  2403  000F6A                     u10311:
  2404  000F6A  8BAA               	bsf	(printf@f+2)& (0+255),5,b
  2405  000F6C                     u1031:
  2406  000F6C  ECE8  F004         	call	_printf	;wreg free
  2407                           
  2408                           ;UART_Driver.c: 236: printf(stopCharacter);
  2409  000F70  C03F  F0A8         	movff	_stopCharacter,printf@f
  2410  000F74  C040  F0A9         	movff	_stopCharacter+1,printf@f+1
  2411  000F78  0100               	movlb	0	; () banked
  2412  000F7A  51A8               	movf	printf@f& (0+255),w,b
  2413  000F7C  11A9               	iorwf	(printf@f+1)& (0+255),w,b
  2414  000F7E  A4D8               	btfss	status,2,c
  2415  000F80  0E00               	movlw	low (__mediumconst shr (0+16))
  2416  000F82  6FAA               	movwf	(printf@f+2)& (0+255),b
  2417  000F84  ECE8  F004         	call	_printf	;wreg free
  2418                           
  2419                           ;UART_Driver.c: 237: _delay((unsigned long)((1)*(16000000/4000.0)));
  2420  000F88  0E06               	movlw	6
  2421  000F8A  0100               	movlb	0	; () banked
  2422  000F8C  6FB7               	movwf	??_D_UART_Write& (0+255),b
  2423  000F8E  0E30               	movlw	48
  2424  000F90                     u1547:
  2425  000F90  2EE8               	decfsz	wreg,f,c
  2426  000F92  D7FE               	bra	u1547
  2427  000F94  2FB7               	decfsz	??_D_UART_Write& (0+255),f,b
  2428  000F96  D7FC               	bra	u1547
  2429  000F98  F000               	nop	
  2430  000F9A  0012               	return		;funcret
  2431  000F9C                     __end_of_D_UART_Write:
  2432                           	opt stack 0
  2433                           tblptru	equ	0xFF8
  2434                           tblptrh	equ	0xFF7
  2435                           tblptrl	equ	0xFF6
  2436                           tablat	equ	0xFF5
  2437                           prodh	equ	0xFF4
  2438                           prodl	equ	0xFF3
  2439                           intcon	equ	0xFF2
  2440                           intcon2	equ	0xFF1
  2441                           postinc0	equ	0xFEE
  2442                           plusw0	equ	0xFEB
  2443                           wreg	equ	0xFE8
  2444                           indf1	equ	0xFE7
  2445                           postinc1	equ	0xFE6
  2446                           postdec1	equ	0xFE5
  2447                           fsr1h	equ	0xFE2
  2448                           fsr1l	equ	0xFE1
  2449                           indf2	equ	0xFDF
  2450                           postinc2	equ	0xFDE
  2451                           plusw2	equ	0xFDB
  2452                           fsr2h	equ	0xFDA
  2453                           fsr2l	equ	0xFD9
  2454                           status	equ	0xFD8
  2455                           
  2456 ;; *************** function _printf *****************
  2457 ;; Defined at:
  2458 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2461 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  2462 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  2463 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  2464 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  idx             1   13[BANK0 ] unsigned char 
  2467 ;;  tmpval          4    0        struct .
  2468 ;;  cp              3    0        PTR const unsigned char 
  2469 ;;  val             2   14[BANK0 ] unsigned int 
  2470 ;;  ap              2   11[BANK0 ] PTR void [1]
  2471 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2472 ;;  len             2    0        unsigned int 
  2473 ;;  c               1   17[BANK0 ] char 
  2474 ;;  prec            1   16[BANK0 ] char 
  2475 ;;  flag            1   10[BANK0 ] unsigned char 
  2476 ;; Return value:  Size  Location     Type
  2477 ;;                  2    7[BANK0 ] int 
  2478 ;; Registers used:
  2479 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2480 ;; Tracked objects:
  2481 ;;		On entry : 0/0
  2482 ;;		On exit  : 0/0
  2483 ;;		Unchanged: 0/0
  2484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2485 ;;      Params:         0       3       0       0       0       0       0       0       0
  2486 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2488 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2489 ;;Total ram usage:       11 bytes
  2490 ;; Hardware stack levels used:    1
  2491 ;; Hardware stack levels required when called:    9
  2492 ;; This function calls:
  2493 ;;		___lwdiv
  2494 ;;		_putch
  2495 ;; This function is called by:
  2496 ;;		_D_UART_Write
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           	psect	text13
  2501  0009D0                     __ptext13:
  2502                           	opt stack 0
  2503  0009D0                     _printf:
  2504                           	opt stack 20
  2505                           
  2506                           ;doprnt.c: 466: va_list ap;
  2507                           ;doprnt.c: 499: signed char c;
  2508                           ;doprnt.c: 506: signed char prec;
  2509                           ;doprnt.c: 508: unsigned char flag;
  2510                           ;doprnt.c: 523: union {
  2511                           ;doprnt.c: 524: unsigned long vd;
  2512                           ;doprnt.c: 525: double integ;
  2513                           ;doprnt.c: 526: } tmpval;
  2514                           ;doprnt.c: 528: unsigned int val;
  2515                           ;doprnt.c: 529: unsigned len;
  2516                           ;doprnt.c: 530: const char * cp;
  2517                           ;doprnt.c: 533: *ap = __va_start();
  2518                           
  2519                           ;incstack = 0
  2520  0009D0  0EAB               	movlw	low (?_printf+3)
  2521  0009D2  0100               	movlb	0	; () banked
  2522  0009D4  6FAC               	movwf	printf@ap& (0+255),b
  2523  0009D6  0E00               	movlw	high (?_printf+3)
  2524  0009D8  6FAD               	movwf	(printf@ap+1)& (0+255),b
  2525                           
  2526                           ;doprnt.c: 536: while(c = *f++) {
  2527  0009DA  D08B               	goto	u900
  2528  0009DC                     
  2529                           ; BSR set to: 0
  2530                           ;doprnt.c: 538: if(c != '%')
  2531                           
  2532                           ; BSR set to: 0
  2533  0009DC  0E25               	movlw	37
  2534  0009DE  19B2               	xorwf	printf@c& (0+255),w,b
  2535  0009E0  B4D8               	btfsc	status,2,c
  2536  0009E2  D004               	goto	l274
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 540: {
  2540                           ;doprnt.c: 541: (putch(c) );
  2541  0009E4  51B2               	movf	printf@c& (0+255),w,b
  2542  0009E6  ECE5  F00A         	call	_putch
  2543                           
  2544                           ;doprnt.c: 542: continue;
  2545  0009EA  D083               	goto	u900
  2546  0009EC                     l274:
  2547                           
  2548                           ;doprnt.c: 543: }
  2549                           ;doprnt.c: 548: flag = 0;
  2550  0009EC  0E00               	movlw	0
  2551  0009EE  0100               	movlb	0	; () banked
  2552  0009F0  6FAB               	movwf	printf@flag& (0+255),b
  2553                           
  2554                           ;doprnt.c: 635: switch(c = *f++) {
  2555  0009F2  D004               	goto	l275
  2556  0009F4                     
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 809: (putch(c) );
  2559                           
  2560                           ; BSR set to: 0
  2561  0009F4  51B2               	movf	printf@c& (0+255),w,b
  2562  0009F6  ECE5  F00A         	call	_putch
  2563                           
  2564                           ;doprnt.c: 810: continue;
  2565  0009FA  D07B               	goto	u900
  2566  0009FC                     l275:
  2567  0009FC  C0A8  FFF6         	movff	printf@f,tblptrl
  2568  000A00  C0A9  FFF7         	movff	printf@f+1,tblptrh
  2569  000A04  C0AA  FFF8         	movff	printf@f+2,tblptru
  2570  000A08  0E01               	movlw	1
  2571  000A0A  0100               	movlb	0	; () banked
  2572  000A0C  27A8               	addwf	printf@f& (0+255),f,b
  2573  000A0E  0E00               	movlw	0
  2574  000A10  23A9               	addwfc	(printf@f+1)& (0+255),f,b
  2575  000A12  23AA               	addwfc	(printf@f+2)& (0+255),f,b
  2576  000A14  BAF8               	btfsc	tblptru,5,c
  2577  000A16  D003               	bra	u867
  2578  000A18  0008               	tblrd		*
  2579  000A1A  50F5               	movf	tablat,w,c
  2580  000A1C  D005               	bra	u860
  2581  000A1E                     u867:
  2582  000A1E  CFF6 FFE9          	movff	tblptrl,fsr0l
  2583  000A22  CFF7 FFEA          	movff	tblptrh,fsr0h
  2584  000A26  50EF               	movf	indf0,w,c
  2585  000A28                     u860:
  2586  000A28  0100               	movlb	0	; () banked
  2587  000A2A  6FB2               	movwf	printf@c& (0+255),b
  2588  000A2C  51B2               	movf	printf@c& (0+255),w,b
  2589                           
  2590                           ; Switch size 1, requested type "space"
  2591                           ; Number of cases is 2, Range of values is 0 to 120
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte            7     4 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  000A2E  0A00               	xorlw	0	; case 0
  2597  000A30  B4D8               	btfsc	status,2,c
  2598  000A32  0012               	return	
  2599  000A34  0A78               	xorlw	120	; case 120
  2600  000A36  A4D8               	btfss	status,2,c
  2601  000A38  D7DD               	goto	l280
  2602                           
  2603                           ;doprnt.c: 1273: {
  2604                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2605                           
  2606                           ; BSR set to: 0
  2607  000A3A  C0AC  FFD9         	movff	printf@ap,fsr2l
  2608  000A3E  C0AD  FFDA         	movff	printf@ap+1,fsr2h
  2609  000A42  CFDE F0AF          	movff	postinc2,printf@val
  2610  000A46  CFDD F0B0          	movff	postdec2,printf@val+1
  2611  000A4A  0E02               	movlw	2
  2612  000A4C  0100               	movlb	0	; () banked
  2613  000A4E  27AC               	addwf	printf@ap& (0+255),f,b
  2614  000A50  0E00               	movlw	0
  2615  000A52  23AD               	addwfc	(printf@ap+1)& (0+255),f,b
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 1287: }
  2619                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2620  000A54  0E01               	movlw	1
  2621  000A56  6FB2               	movwf	printf@c& (0+255),b
  2622  000A58  D014               	goto	l1528
  2623  000A5A                     
  2624                           ; BSR set to: 0
  2625                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2626                           
  2627                           ; BSR set to: 0
  2628  000A5A  51B2               	movf	printf@c& (0+255),w,b
  2629  000A5C  0D02               	mullw	2
  2630  000A5E  0E01               	movlw	low _hexpowers
  2631  000A60  24F3               	addwf	prodl,w,c
  2632  000A62  6EF6               	movwf	tblptrl,c
  2633  000A64  0E08               	movlw	high _hexpowers
  2634  000A66  20F4               	addwfc	prodh,w,c
  2635  000A68  6EF7               	movwf	tblptrh,c
  2636  000A6A                     	if	1	;There are 3 active tblptr bytes
  2637  000A6A  6AF8               	clrf	tblptru,c
  2638  000A6C  0E00               	movlw	low (__mediumconst shr (0+16))
  2639  000A6E  22F8               	addwfc	tblptru,f,c
  2640  000A70                     	endif
  2641  000A70  0009               	tblrd		*+
  2642  000A72  50F5               	movf	tablat,w,c
  2643  000A74  5DAF               	subwf	printf@val& (0+255),w,b
  2644  000A76  0009               	tblrd		*+
  2645  000A78  50F5               	movf	tablat,w,c
  2646  000A7A  59B0               	subwfb	(printf@val+1)& (0+255),w,b
  2647  000A7C  A0D8               	btfss	status,0,c
  2648  000A7E  D005               	goto	u890
  2649                           
  2650                           ; BSR set to: 0
  2651                           
  2652                           ; BSR set to: 0
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 1318: break;
  2656  000A80  2BB2               	incf	printf@c& (0+255),f,b
  2657  000A82                     l1528:
  2658                           
  2659                           ; BSR set to: 0
  2660  000A82  0E04               	movlw	4
  2661  000A84  19B2               	xorwf	printf@c& (0+255),w,b
  2662  000A86  A4D8               	btfss	status,2,c
  2663  000A88  D7E8               	goto	l281
  2664  000A8A                     u890:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;doprnt.c: 1422: {
  2668                           ;doprnt.c: 1469: }
  2669                           ;doprnt.c: 1472: prec = c;
  2670  000A8A  C0B2  F0B1         	movff	printf@c,printf@prec
  2671                           
  2672                           ;doprnt.c: 1474: while(prec--) {
  2673  000A8E  D02C               	goto	l284
  2674  000A90                     
  2675                           ; BSR set to: 0
  2676                           ;doprnt.c: 1478: {
  2677                           ;doprnt.c: 1499: {
  2678                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2679                           
  2680                           ; BSR set to: 0
  2681  000A90  C0AF  F0A1         	movff	printf@val,___lwdiv@dividend
  2682  000A94  C0B0  F0A2         	movff	printf@val+1,___lwdiv@dividend+1
  2683  000A98  51B1               	movf	printf@prec& (0+255),w,b
  2684  000A9A  0D02               	mullw	2
  2685  000A9C  0E01               	movlw	low _hexpowers
  2686  000A9E  24F3               	addwf	prodl,w,c
  2687  000AA0  6EF6               	movwf	tblptrl,c
  2688  000AA2  0E08               	movlw	high _hexpowers
  2689  000AA4  20F4               	addwfc	prodh,w,c
  2690  000AA6  6EF7               	movwf	tblptrh,c
  2691  000AA8                     	if	1	;There are 3 active tblptr bytes
  2692  000AA8  6AF8               	clrf	tblptru,c
  2693  000AAA  0E00               	movlw	low (__mediumconst shr (0+16))
  2694  000AAC  22F8               	addwfc	tblptru,f,c
  2695  000AAE                     	endif
  2696  000AAE  0009               	tblrd		*+
  2697  000AB0  CFF5 F0A3          	movff	tablat,___lwdiv@divisor
  2698  000AB4  000A               	tblrd		*-
  2699  000AB6  CFF5 F0A4          	movff	tablat,___lwdiv@divisor+1
  2700  000ABA  EC10  F00A         	call	___lwdiv	;wreg free
  2701  000ABE  0100               	movlb	0	; () banked
  2702  000AC0  51A1               	movf	?___lwdiv& (0+255),w,b
  2703  000AC2  0B0F               	andlw	15
  2704  000AC4  6FAE               	movwf	printf@idx& (0+255),b
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2708  000AC6  51AE               	movf	printf@idx& (0+255),w,b
  2709  000AC8  0D01               	mullw	1
  2710  000ACA  0E09               	movlw	low STR_17
  2711  000ACC  24F3               	addwf	prodl,w,c
  2712  000ACE  6EF6               	movwf	tblptrl,c
  2713  000AD0  0E08               	movlw	high STR_17
  2714  000AD2  20F4               	addwfc	prodh,w,c
  2715  000AD4  6EF7               	movwf	tblptrh,c
  2716  000AD6                     	if	1	;There are 3 active tblptr bytes
  2717  000AD6  6AF8               	clrf	tblptru,c
  2718  000AD8  0E00               	movlw	low (__mediumconst shr (0+16))
  2719  000ADA  22F8               	addwfc	tblptru,f,c
  2720  000ADC                     	endif
  2721  000ADC  0008               	tblrd		*
  2722  000ADE  CFF5 F0B2          	movff	tablat,printf@c
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;doprnt.c: 1508: }
  2726                           ;doprnt.c: 1523: }
  2727                           ;doprnt.c: 1524: (putch(c) );
  2728  000AE2  51B2               	movf	printf@c& (0+255),w,b
  2729  000AE4  ECE5  F00A         	call	_putch
  2730  000AE8                     l284:
  2731  000AE8  0100               	movlb	0	; () banked
  2732  000AEA  07B1               	decf	printf@prec& (0+255),f,b
  2733  000AEC  29B1               	incf	printf@prec& (0+255),w,b
  2734  000AEE  A4D8               	btfss	status,2,c
  2735  000AF0  D7CF               	goto	l285
  2736  000AF2                     u900:
  2737                           
  2738                           ; BSR set to: 0
  2739                           
  2740                           ; BSR set to: 0
  2741  000AF2  C0A8  FFF6         	movff	printf@f,tblptrl
  2742  000AF6  C0A9  FFF7         	movff	printf@f+1,tblptrh
  2743  000AFA  C0AA  FFF8         	movff	printf@f+2,tblptru
  2744  000AFE  0E01               	movlw	1
  2745  000B00  0100               	movlb	0	; () banked
  2746  000B02  27A8               	addwf	printf@f& (0+255),f,b
  2747  000B04  0E00               	movlw	0
  2748  000B06  23A9               	addwfc	(printf@f+1)& (0+255),f,b
  2749  000B08  23AA               	addwfc	(printf@f+2)& (0+255),f,b
  2750  000B0A  BAF8               	btfsc	tblptru,5,c
  2751  000B0C  D003               	bra	u917
  2752  000B0E  0008               	tblrd		*
  2753  000B10  50F5               	movf	tablat,w,c
  2754  000B12  D005               	bra	u910
  2755  000B14                     u917:
  2756  000B14  CFF6 FFE9          	movff	tblptrl,fsr0l
  2757  000B18  CFF7 FFEA          	movff	tblptrh,fsr0h
  2758  000B1C  50EF               	movf	indf0,w,c
  2759  000B1E                     u910:
  2760  000B1E  0100               	movlb	0	; () banked
  2761  000B20  6FB2               	movwf	printf@c& (0+255),b
  2762  000B22  51B2               	movf	printf@c& (0+255),w,b
  2763  000B24  B4D8               	btfsc	status,2,c
  2764  000B26  0012               	return	
  2765  000B28  D759               	goto	l273
  2766  000B2A                     __end_of_printf:
  2767                           	opt stack 0
  2768                           tblptru	equ	0xFF8
  2769                           tblptrh	equ	0xFF7
  2770                           tblptrl	equ	0xFF6
  2771                           tablat	equ	0xFF5
  2772                           prodh	equ	0xFF4
  2773                           prodl	equ	0xFF3
  2774                           intcon	equ	0xFF2
  2775                           intcon2	equ	0xFF1
  2776                           indf0	equ	0xFEF
  2777                           postinc0	equ	0xFEE
  2778                           plusw0	equ	0xFEB
  2779                           fsr0h	equ	0xFEA
  2780                           fsr0l	equ	0xFE9
  2781                           wreg	equ	0xFE8
  2782                           indf1	equ	0xFE7
  2783                           postinc1	equ	0xFE6
  2784                           postdec1	equ	0xFE5
  2785                           fsr1h	equ	0xFE2
  2786                           fsr1l	equ	0xFE1
  2787                           indf2	equ	0xFDF
  2788                           postinc2	equ	0xFDE
  2789                           postdec2	equ	0xFDD
  2790                           plusw2	equ	0xFDB
  2791                           fsr2h	equ	0xFDA
  2792                           fsr2l	equ	0xFD9
  2793                           status	equ	0xFD8
  2794                           
  2795 ;; *************** function _putch *****************
  2796 ;; Defined at:
  2797 ;;		line 263 in file "Drivers/UART_Driver.c"
  2798 ;; Parameters:    Size  Location     Type
  2799 ;;  data            1    wreg     unsigned char 
  2800 ;; Auto vars:     Size  Location     Type
  2801 ;;  data            1    1[BANK0 ] unsigned char 
  2802 ;; Return value:  Size  Location     Type
  2803 ;;                  1    wreg      void 
  2804 ;; Registers used:
  2805 ;;		wreg, status,2, cstack
  2806 ;; Tracked objects:
  2807 ;;		On entry : 0/0
  2808 ;;		On exit  : 0/0
  2809 ;;		Unchanged: 0/0
  2810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2811 ;;      Params:         0       0       0       0       0       0       0       0       0
  2812 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2813 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2814 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2815 ;;Total ram usage:        1 bytes
  2816 ;; Hardware stack levels used:    1
  2817 ;; Hardware stack levels required when called:    8
  2818 ;; This function calls:
  2819 ;;		_writeByte
  2820 ;; This function is called by:
  2821 ;;		_printf
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text14
  2826  0015CA                     __ptext14:
  2827                           	opt stack 0
  2828  0015CA                     _putch:
  2829                           	opt stack 20
  2830                           
  2831                           ; BSR set to: 0
  2832                           ;incstack = 0
  2833                           ;putch@data stored from wreg
  2834  0015CA  0100               	movlb	0	; () banked
  2835  0015CC  6FA2               	movwf	putch@data& (0+255),b
  2836                           
  2837                           ;UART_Driver.c: 264: writeByte(data);
  2838  0015CE  0100               	movlb	0	; () banked
  2839  0015D0  51A2               	movf	putch@data& (0+255),w,b
  2840  0015D2  ECEC  F00A         	call	_writeByte
  2841  0015D6  0012               	return		;funcret
  2842  0015D8                     __end_of_putch:
  2843                           	opt stack 0
  2844                           tblptru	equ	0xFF8
  2845                           tblptrh	equ	0xFF7
  2846                           tblptrl	equ	0xFF6
  2847                           tablat	equ	0xFF5
  2848                           prodh	equ	0xFF4
  2849                           prodl	equ	0xFF3
  2850                           intcon	equ	0xFF2
  2851                           intcon2	equ	0xFF1
  2852                           indf0	equ	0xFEF
  2853                           postinc0	equ	0xFEE
  2854                           plusw0	equ	0xFEB
  2855                           fsr0h	equ	0xFEA
  2856                           fsr0l	equ	0xFE9
  2857                           wreg	equ	0xFE8
  2858                           indf1	equ	0xFE7
  2859                           postinc1	equ	0xFE6
  2860                           postdec1	equ	0xFE5
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           indf2	equ	0xFDF
  2864                           postinc2	equ	0xFDE
  2865                           postdec2	equ	0xFDD
  2866                           plusw2	equ	0xFDB
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _writeByte *****************
  2872 ;; Defined at:
  2873 ;;		line 69 in file "Drivers/UART_Driver.c"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;  data            1    wreg     unsigned char 
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;  data            1    0[BANK0 ] unsigned char 
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2887 ;;      Params:         0       0       0       0       0       0       0       0       0
  2888 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2890 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2891 ;;Total ram usage:        1 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; Hardware stack levels required when called:    7
  2894 ;; This function calls:
  2895 ;;		Nothing
  2896 ;; This function is called by:
  2897 ;;		_putch
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text15
  2902  0015D8                     __ptext15:
  2903                           	opt stack 0
  2904  0015D8                     _writeByte:
  2905                           	opt stack 20
  2906                           
  2907                           ;incstack = 0
  2908                           ;writeByte@data stored from wreg
  2909  0015D8  0100               	movlb	0	; () banked
  2910  0015DA  6FA1               	movwf	writeByte@data& (0+255),b
  2911  0015DC                     
  2912                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2913  0015DC  A2AC               	btfss	4012,1,c	;volatile
  2914  0015DE  D7FE               	goto	l1442
  2915                           
  2916                           ;UART_Driver.c: 71: TXREG = data;
  2917  0015E0  C0A1  FFAD         	movff	writeByte@data,4013	;volatile
  2918  0015E4  0012               	return		;funcret
  2919  0015E6                     __end_of_writeByte:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           prodh	equ	0xFF4
  2926                           prodl	equ	0xFF3
  2927                           intcon	equ	0xFF2
  2928                           intcon2	equ	0xFF1
  2929                           indf0	equ	0xFEF
  2930                           postinc0	equ	0xFEE
  2931                           plusw0	equ	0xFEB
  2932                           fsr0h	equ	0xFEA
  2933                           fsr0l	equ	0xFE9
  2934                           wreg	equ	0xFE8
  2935                           indf1	equ	0xFE7
  2936                           postinc1	equ	0xFE6
  2937                           postdec1	equ	0xFE5
  2938                           fsr1h	equ	0xFE2
  2939                           fsr1l	equ	0xFE1
  2940                           indf2	equ	0xFDF
  2941                           postinc2	equ	0xFDE
  2942                           postdec2	equ	0xFDD
  2943                           plusw2	equ	0xFDB
  2944                           fsr2h	equ	0xFDA
  2945                           fsr2l	equ	0xFD9
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function ___lwdiv *****************
  2949 ;; Defined at:
  2950 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  dividend        2    0[BANK0 ] unsigned int 
  2953 ;;  divisor         2    2[BANK0 ] unsigned int 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  quotient        2    4[BANK0 ] unsigned int 
  2956 ;;  counter         1    6[BANK0 ] unsigned char 
  2957 ;; Return value:  Size  Location     Type
  2958 ;;                  2    0[BANK0 ] unsigned int 
  2959 ;; Registers used:
  2960 ;;		wreg, status,2, status,0
  2961 ;; Tracked objects:
  2962 ;;		On entry : 0/0
  2963 ;;		On exit  : 0/0
  2964 ;;		Unchanged: 0/0
  2965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2966 ;;      Params:         0       4       0       0       0       0       0       0       0
  2967 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2968 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2969 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2970 ;;Total ram usage:        7 bytes
  2971 ;; Hardware stack levels used:    1
  2972 ;; Hardware stack levels required when called:    7
  2973 ;; This function calls:
  2974 ;;		Nothing
  2975 ;; This function is called by:
  2976 ;;		_printf
  2977 ;; This function uses a non-reentrant model
  2978 ;;
  2979                           
  2980                           	psect	text16
  2981  001420                     __ptext16:
  2982                           	opt stack 0
  2983  001420                     ___lwdiv:
  2984                           	opt stack 21
  2985                           
  2986                           ;incstack = 0
  2987  001420  0E00               	movlw	0
  2988  001422  0100               	movlb	0	; () banked
  2989  001424  6FA6               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2990  001426  0E00               	movlw	0
  2991  001428  6FA5               	movwf	___lwdiv@quotient& (0+255),b
  2992                           
  2993                           ; BSR set to: 0
  2994  00142A  51A3               	movf	___lwdiv@divisor& (0+255),w,b
  2995  00142C  11A4               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2996  00142E  B4D8               	btfsc	status,2,c
  2997  001430  D01C               	goto	l697
  2998                           
  2999                           ; BSR set to: 0
  3000  001432  0E01               	movlw	1
  3001  001434  6FA7               	movwf	___lwdiv@counter& (0+255),b
  3002  001436  D004               	goto	l692
  3003  001438                     
  3004                           ; BSR set to: 0
  3005                           
  3006                           ; BSR set to: 0
  3007  001438  90D8               	bcf	status,0,c
  3008  00143A  37A3               	rlcf	___lwdiv@divisor& (0+255),f,b
  3009  00143C  37A4               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3010  00143E  2BA7               	incf	___lwdiv@counter& (0+255),f,b
  3011  001440                     l692:
  3012                           
  3013                           ; BSR set to: 0
  3014                           
  3015                           ; BSR set to: 0
  3016  001440  AFA4               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3017  001442  D7FA               	goto	l693
  3018  001444                     u800:
  3019                           
  3020                           ; BSR set to: 0
  3021                           
  3022                           ; BSR set to: 0
  3023                           
  3024                           ; BSR set to: 0
  3025  001444  90D8               	bcf	status,0,c
  3026  001446  37A5               	rlcf	___lwdiv@quotient& (0+255),f,b
  3027  001448  37A6               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3028                           
  3029                           ; BSR set to: 0
  3030  00144A  51A3               	movf	___lwdiv@divisor& (0+255),w,b
  3031  00144C  5DA1               	subwf	___lwdiv@dividend& (0+255),w,b
  3032  00144E  51A4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3033  001450  59A2               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3034  001452  A0D8               	btfss	status,0,c
  3035  001454  D005               	goto	l696
  3036                           
  3037                           ; BSR set to: 0
  3038  001456  51A3               	movf	___lwdiv@divisor& (0+255),w,b
  3039  001458  5FA1               	subwf	___lwdiv@dividend& (0+255),f,b
  3040  00145A  51A4               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3041  00145C  5BA2               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3042                           
  3043                           ; BSR set to: 0
  3044  00145E  81A5               	bsf	___lwdiv@quotient& (0+255),0,b
  3045  001460                     l696:
  3046                           
  3047                           ; BSR set to: 0
  3048                           
  3049                           ; BSR set to: 0
  3050  001460  90D8               	bcf	status,0,c
  3051  001462  33A4               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3052  001464  33A3               	rrcf	___lwdiv@divisor& (0+255),f,b
  3053                           
  3054                           ; BSR set to: 0
  3055  001466  2FA7               	decfsz	___lwdiv@counter& (0+255),f,b
  3056  001468  D7ED               	goto	u800
  3057  00146A                     l697:
  3058                           
  3059                           ; BSR set to: 0
  3060                           
  3061                           ; BSR set to: 0
  3062  00146A  C0A5  F0A1         	movff	___lwdiv@quotient,?___lwdiv
  3063  00146E  C0A6  F0A2         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3064                           
  3065                           ; BSR set to: 0
  3066  001472  0012               	return		;funcret
  3067  001474                     __end_of___lwdiv:
  3068                           	opt stack 0
  3069                           tblptru	equ	0xFF8
  3070                           tblptrh	equ	0xFF7
  3071                           tblptrl	equ	0xFF6
  3072                           tablat	equ	0xFF5
  3073                           prodh	equ	0xFF4
  3074                           prodl	equ	0xFF3
  3075                           intcon	equ	0xFF2
  3076                           intcon2	equ	0xFF1
  3077                           indf0	equ	0xFEF
  3078                           postinc0	equ	0xFEE
  3079                           plusw0	equ	0xFEB
  3080                           fsr0h	equ	0xFEA
  3081                           fsr0l	equ	0xFE9
  3082                           wreg	equ	0xFE8
  3083                           indf1	equ	0xFE7
  3084                           postinc1	equ	0xFE6
  3085                           postdec1	equ	0xFE5
  3086                           fsr1h	equ	0xFE2
  3087                           fsr1l	equ	0xFE1
  3088                           indf2	equ	0xFDF
  3089                           postinc2	equ	0xFDE
  3090                           postdec2	equ	0xFDD
  3091                           plusw2	equ	0xFDB
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _C_DOOR_ReadSensors *****************
  3097 ;; Defined at:
  3098 ;;		line 99 in file "Controllers/DOOR_Controller.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  d               1    4[BANK0 ] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0
  3113 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3114 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3115 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3116 ;;Total ram usage:        5 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    7
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_main
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text17
  3127  00127E                     __ptext17:
  3128                           	opt stack 0
  3129  00127E                     _C_DOOR_ReadSensors:
  3130                           	opt stack 23
  3131                           
  3132                           ;DOOR_Controller.c: 100: uint8_t d;
  3133                           ;DOOR_Controller.c: 101: for (d = 0; d < 5; d++) {
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;incstack = 0
  3137  00127E  0E00               	movlw	0
  3138  001280  0100               	movlb	0	; () banked
  3139  001282  6FA5               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3140  001284                     l1674:
  3141                           
  3142                           ; BSR set to: 0
  3143  001284  0E04               	movlw	4
  3144  001286  65A5               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  3145  001288  D001               	goto	l39
  3146  00128A  0012               	return	
  3147  00128C                     l39:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;DOOR_Controller.c: 102: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pi
      +                          n) & 0x01;
  3151                           
  3152                           ; BSR set to: 0
  3153  00128C  51A5               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3154  00128E  0D0A               	mullw	10
  3155  001290  0E06               	movlw	6
  3156  001292  26F3               	addwf	prodl,f,c
  3157  001294  0E00               	movlw	0
  3158  001296  22F4               	addwfc	prodh,f,c
  3159  001298  0E60               	movlw	low _doors
  3160  00129A  24F3               	addwf	prodl,w,c
  3161  00129C  6ED9               	movwf	fsr2l,c
  3162  00129E  0E00               	movlw	high _doors
  3163  0012A0  20F4               	addwfc	prodh,w,c
  3164  0012A2  6EDA               	movwf	fsr2h,c
  3165  0012A4  51A5               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3166  0012A6  0D0A               	mullw	10
  3167  0012A8  0E09               	movlw	9
  3168  0012AA  26F3               	addwf	prodl,f,c
  3169  0012AC  0E00               	movlw	0
  3170  0012AE  22F4               	addwfc	prodh,f,c
  3171  0012B0  0E60               	movlw	low _doors
  3172  0012B2  24F3               	addwf	prodl,w,c
  3173  0012B4  6EE1               	movwf	fsr1l,c
  3174  0012B6  0E00               	movlw	high _doors
  3175  0012B8  20F4               	addwfc	prodh,w,c
  3176  0012BA  6EE2               	movwf	fsr1h,c
  3177  0012BC  50E7               	movf	indf1,w,c
  3178  0012BE  6FA1               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3179  0012C0  51A5               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3180  0012C2  0D0A               	mullw	10
  3181  0012C4  0E07               	movlw	7
  3182  0012C6  26F3               	addwf	prodl,f,c
  3183  0012C8  0E00               	movlw	0
  3184  0012CA  22F4               	addwfc	prodh,f,c
  3185  0012CC  0E60               	movlw	low _doors
  3186  0012CE  24F3               	addwf	prodl,w,c
  3187  0012D0  6EE1               	movwf	fsr1l,c
  3188  0012D2  0E00               	movlw	high _doors
  3189  0012D4  20F4               	addwfc	prodh,w,c
  3190  0012D6  6EE2               	movwf	fsr1h,c
  3191  0012D8  CFE6 F0A2          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3192  0012DC  CFE5 F0A3          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3193  0012E0  C0A2  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3194  0012E4  C0A3  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3195  0012E8  50E7               	movf	indf1,w,c
  3196  0012EA  6FA4               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3197  0012EC  2BA1               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3198  0012EE  D002               	goto	u1154
  3199  0012F0                     u1155:
  3200  0012F0  90D8               	bcf	status,0,c
  3201  0012F2  33A4               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3202  0012F4                     u1154:
  3203  0012F4  2FA1               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3204  0012F6  D7FC               	goto	u1155
  3205  0012F8  0100               	movlb	0	; () banked
  3206  0012FA  51A4               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3207  0012FC  0B01               	andlw	1
  3208  0012FE  6EDF               	movwf	indf2,c
  3209                           
  3210                           ; BSR set to: 0
  3211  001300  2BA5               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3212  001302  D7C0               	goto	l1674
  3213  001304                     __end_of_C_DOOR_ReadSensors:
  3214                           	opt stack 0
  3215                           tblptru	equ	0xFF8
  3216                           tblptrh	equ	0xFF7
  3217                           tblptrl	equ	0xFF6
  3218                           tablat	equ	0xFF5
  3219                           prodh	equ	0xFF4
  3220                           prodl	equ	0xFF3
  3221                           intcon	equ	0xFF2
  3222                           intcon2	equ	0xFF1
  3223                           indf0	equ	0xFEF
  3224                           postinc0	equ	0xFEE
  3225                           plusw0	equ	0xFEB
  3226                           fsr0h	equ	0xFEA
  3227                           fsr0l	equ	0xFE9
  3228                           wreg	equ	0xFE8
  3229                           indf1	equ	0xFE7
  3230                           postinc1	equ	0xFE6
  3231                           postdec1	equ	0xFE5
  3232                           fsr1h	equ	0xFE2
  3233                           fsr1l	equ	0xFE1
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           plusw2	equ	0xFDB
  3238                           fsr2h	equ	0xFDA
  3239                           fsr2l	equ	0xFD9
  3240                           status	equ	0xFD8
  3241                           
  3242 ;; *************** function _C_DOOR_LockAll *****************
  3243 ;; Defined at:
  3244 ;;		line 74 in file "Controllers/DOOR_Controller.c"
  3245 ;; Parameters:    Size  Location     Type
  3246 ;;		None
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;                  1    wreg      void 
  3251 ;; Registers used:
  3252 ;;		wreg, fsr2l, fsr2h
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3258 ;;      Params:         0       0       0       0       0       0       0       0       0
  3259 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3261 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3262 ;;Total ram usage:        0 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    7
  3265 ;; This function calls:
  3266 ;;		Nothing
  3267 ;; This function is called by:
  3268 ;;		_main
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text18
  3273  0015E6                     __ptext18:
  3274                           	opt stack 0
  3275  0015E6                     _C_DOOR_LockAll:
  3276                           	opt stack 23
  3277                           
  3278                           ;DOOR_Controller.c: 79: *doors[0].lock_port |= 0xC0;
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;incstack = 0
  3282  0015E6  C062  FFD9         	movff	_doors+2,fsr2l
  3283  0015EA  C063  FFDA         	movff	_doors+3,fsr2h
  3284  0015EE  0EC0               	movlw	192
  3285  0015F0  12DF               	iorwf	indf2,f,c
  3286  0015F2  0012               	return		;funcret
  3287  0015F4                     __end_of_C_DOOR_LockAll:
  3288                           	opt stack 0
  3289                           tblptru	equ	0xFF8
  3290                           tblptrh	equ	0xFF7
  3291                           tblptrl	equ	0xFF6
  3292                           tablat	equ	0xFF5
  3293                           prodh	equ	0xFF4
  3294                           prodl	equ	0xFF3
  3295                           intcon	equ	0xFF2
  3296                           intcon2	equ	0xFF1
  3297                           indf0	equ	0xFEF
  3298                           postinc0	equ	0xFEE
  3299                           plusw0	equ	0xFEB
  3300                           fsr0h	equ	0xFEA
  3301                           fsr0l	equ	0xFE9
  3302                           wreg	equ	0xFE8
  3303                           indf1	equ	0xFE7
  3304                           postinc1	equ	0xFE6
  3305                           postdec1	equ	0xFE5
  3306                           fsr1h	equ	0xFE2
  3307                           fsr1l	equ	0xFE1
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           plusw2	equ	0xFDB
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _C_DOOR_Init *****************
  3317 ;; Defined at:
  3318 ;;		line 44 in file "Controllers/DOOR_Controller.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  d               1    0[BANK0 ] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0
  3333 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3335 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3336 ;;Total ram usage:        1 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    7
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_main
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text19
  3347  000DC2                     __ptext19:
  3348                           	opt stack 0
  3349  000DC2                     _C_DOOR_Init:
  3350                           	opt stack 23
  3351                           
  3352                           ;DOOR_Controller.c: 46: TRISB &= 0x3F;
  3353                           
  3354                           ;incstack = 0
  3355  000DC2  0E3F               	movlw	63
  3356  000DC4  1693               	andwf	3987,f,c	;volatile
  3357                           
  3358                           ;DOOR_Controller.c: 47: TRISB |= 0x3F;
  3359  000DC6  0E3F               	movlw	63
  3360  000DC8  1293               	iorwf	3987,f,c	;volatile
  3361                           
  3362                           ;DOOR_Controller.c: 50: uint8_t d;
  3363                           ;DOOR_Controller.c: 51: for (d = 0; d < 5; d++) {
  3364  000DCA  0E00               	movlw	0
  3365  000DCC  0100               	movlb	0	; () banked
  3366  000DCE  6FA1               	movwf	C_DOOR_Init@d& (0+255),b
  3367  000DD0                     l1658:
  3368                           
  3369                           ; BSR set to: 0
  3370  000DD0  0E04               	movlw	4
  3371  000DD2  65A1               	cpfsgt	C_DOOR_Init@d& (0+255),b
  3372  000DD4  D001               	goto	l16
  3373  000DD6  0012               	return	
  3374  000DD8                     l16:
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;DOOR_Controller.c: 52: doors[d].id = d;
  3378                           
  3379                           ; BSR set to: 0
  3380  000DD8  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3381  000DDA  0D0A               	mullw	10
  3382  000DDC  0E60               	movlw	low _doors
  3383  000DDE  24F3               	addwf	prodl,w,c
  3384  000DE0  6ED9               	movwf	fsr2l,c
  3385  000DE2  0E00               	movlw	high _doors
  3386  000DE4  20F4               	addwfc	prodh,w,c
  3387  000DE6  6EDA               	movwf	fsr2h,c
  3388  000DE8  C0A1  FFDF         	movff	C_DOOR_Init@d,indf2
  3389                           
  3390                           ;DOOR_Controller.c: 54: doors[d].locked = 1;
  3391  000DEC  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3392  000DEE  0D0A               	mullw	10
  3393  000DF0  0E01               	movlw	1
  3394  000DF2  26F3               	addwf	prodl,f,c
  3395  000DF4  0E00               	movlw	0
  3396  000DF6  22F4               	addwfc	prodh,f,c
  3397  000DF8  0E60               	movlw	low _doors
  3398  000DFA  24F3               	addwf	prodl,w,c
  3399  000DFC  6ED9               	movwf	fsr2l,c
  3400  000DFE  0E00               	movlw	high _doors
  3401  000E00  20F4               	addwfc	prodh,w,c
  3402  000E02  6EDA               	movwf	fsr2h,c
  3403  000E04  0E01               	movlw	1
  3404  000E06  6EDF               	movwf	indf2,c
  3405                           
  3406                           ;DOOR_Controller.c: 55: doors[d].lock_port = &PORTB;
  3407  000E08  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3408  000E0A  0D0A               	mullw	10
  3409  000E0C  0E02               	movlw	2
  3410  000E0E  26F3               	addwf	prodl,f,c
  3411  000E10  0E00               	movlw	0
  3412  000E12  22F4               	addwfc	prodh,f,c
  3413  000E14  0E60               	movlw	low _doors
  3414  000E16  24F3               	addwf	prodl,w,c
  3415  000E18  6ED9               	movwf	fsr2l,c
  3416  000E1A  0E00               	movlw	high _doors
  3417  000E1C  20F4               	addwfc	prodh,w,c
  3418  000E1E  6EDA               	movwf	fsr2h,c
  3419  000E20  0E81               	movlw	129
  3420  000E22  6EDE               	movwf	postinc2,c
  3421  000E24  0E0F               	movlw	15
  3422  000E26  6EDD               	movwf	postdec2,c
  3423                           
  3424                           ;DOOR_Controller.c: 56: doors[d].lock_pin = 7;
  3425  000E28  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3426  000E2A  0D0A               	mullw	10
  3427  000E2C  0E04               	movlw	4
  3428  000E2E  26F3               	addwf	prodl,f,c
  3429  000E30  0E00               	movlw	0
  3430  000E32  22F4               	addwfc	prodh,f,c
  3431  000E34  0E60               	movlw	low _doors
  3432  000E36  24F3               	addwf	prodl,w,c
  3433  000E38  6ED9               	movwf	fsr2l,c
  3434  000E3A  0E00               	movlw	high _doors
  3435  000E3C  20F4               	addwfc	prodh,w,c
  3436  000E3E  6EDA               	movwf	fsr2h,c
  3437  000E40  0E07               	movlw	7
  3438  000E42  6EDF               	movwf	indf2,c
  3439                           
  3440                           ;DOOR_Controller.c: 58: doors[d].is_open = 0;
  3441  000E44  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3442  000E46  0D0A               	mullw	10
  3443  000E48  0E06               	movlw	6
  3444  000E4A  26F3               	addwf	prodl,f,c
  3445  000E4C  0E00               	movlw	0
  3446  000E4E  22F4               	addwfc	prodh,f,c
  3447  000E50  0E60               	movlw	low _doors
  3448  000E52  24F3               	addwf	prodl,w,c
  3449  000E54  6ED9               	movwf	fsr2l,c
  3450  000E56  0E00               	movlw	high _doors
  3451  000E58  20F4               	addwfc	prodh,w,c
  3452  000E5A  6EDA               	movwf	fsr2h,c
  3453  000E5C  0E00               	movlw	0
  3454  000E5E  6EDF               	movwf	indf2,c
  3455                           
  3456                           ;DOOR_Controller.c: 59: doors[d].was_open = 0;
  3457  000E60  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3458  000E62  0D0A               	mullw	10
  3459  000E64  0E05               	movlw	5
  3460  000E66  26F3               	addwf	prodl,f,c
  3461  000E68  0E00               	movlw	0
  3462  000E6A  22F4               	addwfc	prodh,f,c
  3463  000E6C  0E60               	movlw	low _doors
  3464  000E6E  24F3               	addwf	prodl,w,c
  3465  000E70  6ED9               	movwf	fsr2l,c
  3466  000E72  0E00               	movlw	high _doors
  3467  000E74  20F4               	addwfc	prodh,w,c
  3468  000E76  6EDA               	movwf	fsr2h,c
  3469  000E78  0E00               	movlw	0
  3470  000E7A  6EDF               	movwf	indf2,c
  3471                           
  3472                           ;DOOR_Controller.c: 60: doors[d].sensor_port = &PORTB;
  3473  000E7C  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3474  000E7E  0D0A               	mullw	10
  3475  000E80  0E07               	movlw	7
  3476  000E82  26F3               	addwf	prodl,f,c
  3477  000E84  0E00               	movlw	0
  3478  000E86  22F4               	addwfc	prodh,f,c
  3479  000E88  0E60               	movlw	low _doors
  3480  000E8A  24F3               	addwf	prodl,w,c
  3481  000E8C  6ED9               	movwf	fsr2l,c
  3482  000E8E  0E00               	movlw	high _doors
  3483  000E90  20F4               	addwfc	prodh,w,c
  3484  000E92  6EDA               	movwf	fsr2h,c
  3485  000E94  0E81               	movlw	129
  3486  000E96  6EDE               	movwf	postinc2,c
  3487  000E98  0E0F               	movlw	15
  3488  000E9A  6EDD               	movwf	postdec2,c
  3489                           
  3490                           ;DOOR_Controller.c: 61: doors[d].sensor_pin = d;
  3491  000E9C  51A1               	movf	C_DOOR_Init@d& (0+255),w,b
  3492  000E9E  0D0A               	mullw	10
  3493  000EA0  0E09               	movlw	9
  3494  000EA2  26F3               	addwf	prodl,f,c
  3495  000EA4  0E00               	movlw	0
  3496  000EA6  22F4               	addwfc	prodh,f,c
  3497  000EA8  0E60               	movlw	low _doors
  3498  000EAA  24F3               	addwf	prodl,w,c
  3499  000EAC  6ED9               	movwf	fsr2l,c
  3500  000EAE  0E00               	movlw	high _doors
  3501  000EB0  20F4               	addwfc	prodh,w,c
  3502  000EB2  6EDA               	movwf	fsr2h,c
  3503  000EB4  C0A1  FFDF         	movff	C_DOOR_Init@d,indf2
  3504                           
  3505                           ; BSR set to: 0
  3506  000EB8  2BA1               	incf	C_DOOR_Init@d& (0+255),f,b
  3507  000EBA  D78A               	goto	l1658
  3508  000EBC                     __end_of_C_DOOR_Init:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           intcon	equ	0xFF2
  3517                           intcon2	equ	0xFF1
  3518                           indf0	equ	0xFEF
  3519                           postinc0	equ	0xFEE
  3520                           plusw0	equ	0xFEB
  3521                           fsr0h	equ	0xFEA
  3522                           fsr0l	equ	0xFE9
  3523                           wreg	equ	0xFE8
  3524                           indf1	equ	0xFE7
  3525                           postinc1	equ	0xFE6
  3526                           postdec1	equ	0xFE5
  3527                           fsr1h	equ	0xFE2
  3528                           fsr1l	equ	0xFE1
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           plusw2	equ	0xFDB
  3533                           fsr2h	equ	0xFDA
  3534                           fsr2l	equ	0xFD9
  3535                           status	equ	0xFD8
  3536                           
  3537 ;; *************** function _LowISR *****************
  3538 ;; Defined at:
  3539 ;;		line 267 in file "Drivers/UART_Driver.c"
  3540 ;; Parameters:    Size  Location     Type
  3541 ;;		None
  3542 ;; Auto vars:     Size  Location     Type
  3543 ;;		None
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      void 
  3546 ;; Registers used:
  3547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3553 ;;      Params:         0       0       0       0       0       0       0       0       0
  3554 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3555 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3556 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3557 ;;Total ram usage:       21 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    6
  3560 ;; This function calls:
  3561 ;;		_fillDataBuffer
  3562 ;;		_readByte
  3563 ;; This function is called by:
  3564 ;;		Interrupt level 1
  3565 ;; This function uses a non-reentrant model
  3566 ;;
  3567                           
  3568                           	psect	intcodelo
  3569  000018                     __pintcodelo:
  3570                           	opt stack 0
  3571  000018                     _LowISR:
  3572                           	opt stack 19
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;incstack = 0
  3576  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3577  00001A  CFD8 F028          	movff	status,??_LowISR
  3578  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3579  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3580  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3581  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3582  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3583  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3584  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3585  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3586  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3587  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3588  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3589  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3590  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3591  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3592  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3593  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3594  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3595  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3596  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3597  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3598                           
  3599                           ;UART_Driver.c: 268: if (PIR1bits.RC1IF) {
  3600  00006E  AA9E               	btfss	3998,5,c	;volatile
  3601  000070  D005               	goto	i1l179
  3602                           
  3603                           ;UART_Driver.c: 269: fillDataBuffer(readByte());
  3604  000072  EC05  F00B         	call	_readByte	;wreg free
  3605  000076  EC1C  F004         	call	_fillDataBuffer
  3606                           
  3607                           ;UART_Driver.c: 270: PIR1bits.RC1IF = 0;
  3608  00007A  9A9E               	bcf	3998,5,c	;volatile
  3609  00007C                     i1l179:
  3610  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3611  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3612  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3613  000088  C039  F044         	movff	??_LowISR+17,btemp
  3614  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3615  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3616  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3617  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3618  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3619  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3620  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3621  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3622  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3623  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3624  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3625  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3626  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3627  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3628  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3629  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3630  0000CC  C028  FFD8         	movff	??_LowISR,status
  3631  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3632  0000D2  0010               	retfie	
  3633  0000D4                     __end_of_LowISR:
  3634                           	opt stack 0
  3635                           pclatu	equ	0xFFB
  3636                           pclath	equ	0xFFA
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           intcon2	equ	0xFF1
  3645                           indf0	equ	0xFEF
  3646                           postinc0	equ	0xFEE
  3647                           plusw0	equ	0xFEB
  3648                           fsr0h	equ	0xFEA
  3649                           fsr0l	equ	0xFE9
  3650                           wreg	equ	0xFE8
  3651                           indf1	equ	0xFE7
  3652                           postinc1	equ	0xFE6
  3653                           postdec1	equ	0xFE5
  3654                           fsr1h	equ	0xFE2
  3655                           fsr1l	equ	0xFE1
  3656                           bsr	equ	0xFE0
  3657                           indf2	equ	0xFDF
  3658                           postinc2	equ	0xFDE
  3659                           postdec2	equ	0xFDD
  3660                           plusw2	equ	0xFDB
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _readByte *****************
  3666 ;; Defined at:
  3667 ;;		line 74 in file "Drivers/UART_Driver.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      unsigned char 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3681 ;;      Params:         0       0       0       0       0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3684 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3685 ;;Total ram usage:        0 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    1
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_LowISR
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text21
  3696  00160A                     __ptext21:
  3697                           	opt stack 0
  3698  00160A                     _readByte:
  3699                           	opt stack 23
  3700                           
  3701                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3702                           
  3703                           ;incstack = 0
  3704  00160A  50AB               	movf	4011,w,c	;volatile
  3705                           
  3706                           ;UART_Driver.c: 77: }
  3707                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3708  00160C  50AB               	movf	4011,w,c	;volatile
  3709                           
  3710                           ;UART_Driver.c: 80: }
  3711                           ;UART_Driver.c: 81: return RCREG;
  3712  00160E  50AE               	movf	4014,w,c	;volatile
  3713  001610  0012               	return	
  3714  001612                     __end_of_readByte:
  3715                           	opt stack 0
  3716                           pclatu	equ	0xFFB
  3717                           pclath	equ	0xFFA
  3718                           tblptru	equ	0xFF8
  3719                           tblptrh	equ	0xFF7
  3720                           tblptrl	equ	0xFF6
  3721                           tablat	equ	0xFF5
  3722                           prodh	equ	0xFF4
  3723                           prodl	equ	0xFF3
  3724                           intcon	equ	0xFF2
  3725                           intcon2	equ	0xFF1
  3726                           indf0	equ	0xFEF
  3727                           postinc0	equ	0xFEE
  3728                           plusw0	equ	0xFEB
  3729                           fsr0h	equ	0xFEA
  3730                           fsr0l	equ	0xFE9
  3731                           wreg	equ	0xFE8
  3732                           indf1	equ	0xFE7
  3733                           postinc1	equ	0xFE6
  3734                           postdec1	equ	0xFE5
  3735                           fsr1h	equ	0xFE2
  3736                           fsr1l	equ	0xFE1
  3737                           bsr	equ	0xFE0
  3738                           indf2	equ	0xFDF
  3739                           postinc2	equ	0xFDE
  3740                           postdec2	equ	0xFDD
  3741                           plusw2	equ	0xFDB
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _fillDataBuffer *****************
  3747 ;; Defined at:
  3748 ;;		line 84 in file "Drivers/UART_Driver.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  data            1    wreg     unsigned char 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  data            1   38[COMRAM] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0
  3763 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3765 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3766 ;;Total ram usage:        1 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    5
  3769 ;; This function calls:
  3770 ;;		_acknowledge
  3771 ;; This function is called by:
  3772 ;;		_LowISR
  3773 ;; This function uses a non-reentrant model
  3774 ;;
  3775                           
  3776                           	psect	text22
  3777  000838                     __ptext22:
  3778                           	opt stack 0
  3779  000838                     _fillDataBuffer:
  3780                           	opt stack 19
  3781                           
  3782                           ;incstack = 0
  3783                           ;fillDataBuffer@data stored from wreg
  3784  000838  6E27               	movwf	fillDataBuffer@data,c
  3785                           
  3786                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3787  00083A  D0B5               	goto	i1l128
  3788  00083C                     
  3789                           ;UART_Driver.c: 87: if(data == 0x26) {
  3790  00083C  0E26               	movlw	38
  3791  00083E  1827               	xorwf	fillDataBuffer@data,w,c
  3792  000840  A4D8               	btfss	status,2,c
  3793  000842  D010               	goto	i1l130
  3794                           
  3795                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3796  000844  0E00               	movlw	0
  3797  000846  0101               	movlb	1	; () banked
  3798  000848  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3799                           
  3800                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3801  00084A  0E00               	movlw	0
  3802  00084C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3803                           
  3804                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3805  00084E  0E00               	movlw	0
  3806  000850  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3807                           
  3808                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3809  000852  0E00               	movlw	0
  3810  000854  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3811                           
  3812                           ;UART_Driver.c: 92: readReady = 0;
  3813  000856  0E00               	movlw	0
  3814  000858  0100               	movlb	0	; () banked
  3815  00085A  6FA0               	movwf	_readReady& (0+255),b
  3816                           
  3817                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3818  00085C  0E01               	movlw	1
  3819  00085E  0101               	movlb	1	; () banked
  3820  000860  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3821                           
  3822                           ;UART_Driver.c: 94: } else {
  3823  000862  0012               	return	
  3824  000864                     i1l130:
  3825                           
  3826                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3827                           
  3828                           ; BSR set to: 1
  3829  000864  0E00               	movlw	0
  3830  000866  0101               	movlb	1	; () banked
  3831  000868  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;UART_Driver.c: 97: }
  3835                           ;UART_Driver.c: 98: break;
  3836                           
  3837                           ; BSR set to: 1
  3838                           ;UART_Driver.c: 96: return;
  3839  00086A  0012               	return	
  3840  00086C                     
  3841                           ; BSR set to: 1
  3842                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3843                           
  3844                           ; BSR set to: 1
  3845  00086C  0E3A               	movlw	58
  3846  00086E  1827               	xorwf	fillDataBuffer@data,w,c
  3847  000870  A4D8               	btfss	status,2,c
  3848  000872  D00D               	goto	i1l135
  3849                           
  3850                           ; BSR set to: 1
  3851                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3852  000874  0E02               	movlw	2
  3853  000876  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3854                           
  3855                           ; BSR set to: 1
  3856                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3857  000878  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3858  00087A  0D01               	mullw	1
  3859  00087C  0E00               	movlw	low _readBuffer
  3860  00087E  24F3               	addwf	prodl,w,c
  3861  000880  6ED9               	movwf	fsr2l,c
  3862  000882  0E01               	movlw	high _readBuffer
  3863  000884  20F4               	addwfc	prodh,w,c
  3864  000886  6EDA               	movwf	fsr2h,c
  3865  000888  0E00               	movlw	0
  3866  00088A  6EDF               	movwf	indf2,c
  3867                           
  3868                           ;UART_Driver.c: 104: } else {
  3869  00088C  0012               	return	
  3870  00088E                     i1l135:
  3871                           
  3872                           ; BSR set to: 1
  3873                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3874                           
  3875                           ; BSR set to: 1
  3876  00088E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3877  000890  0D01               	mullw	1
  3878  000892  0E00               	movlw	low _readBuffer
  3879  000894  24F3               	addwf	prodl,w,c
  3880  000896  6ED9               	movwf	fsr2l,c
  3881  000898  0E01               	movlw	high _readBuffer
  3882  00089A  20F4               	addwfc	prodh,w,c
  3883  00089C  6EDA               	movwf	fsr2h,c
  3884  00089E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3885                           
  3886                           ; BSR set to: 1
  3887                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3888  0008A2  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3889                           
  3890                           ; BSR set to: 1
  3891                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3892  0008A4  0E0A               	movlw	10
  3893  0008A6  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3894  0008A8  0012               	return	
  3895                           
  3896                           ; BSR set to: 1
  3897                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3898  0008AA  0E00               	movlw	0
  3899  0008AC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3900                           
  3901                           ; BSR set to: 1
  3902                           ;UART_Driver.c: 109: }
  3903                           ;UART_Driver.c: 110: }
  3904                           ;UART_Driver.c: 111: break;
  3905                           
  3906                           ; BSR set to: 1
  3907  0008AE  0012               	return	
  3908  0008B0                     
  3909                           ; BSR set to: 1
  3910                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3911                           
  3912                           ; BSR set to: 1
  3913  0008B0  0E3A               	movlw	58
  3914  0008B2  1827               	xorwf	fillDataBuffer@data,w,c
  3915  0008B4  A4D8               	btfss	status,2,c
  3916  0008B6  D00D               	goto	i1l139
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3920  0008B8  0E03               	movlw	3
  3921  0008BA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3922                           
  3923                           ; BSR set to: 1
  3924                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3925  0008BC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3926  0008BE  0D01               	mullw	1
  3927  0008C0  0E0B               	movlw	low (_readBuffer+11)
  3928  0008C2  24F3               	addwf	prodl,w,c
  3929  0008C4  6ED9               	movwf	fsr2l,c
  3930  0008C6  0E01               	movlw	high (_readBuffer+11)
  3931  0008C8  20F4               	addwfc	prodh,w,c
  3932  0008CA  6EDA               	movwf	fsr2h,c
  3933  0008CC  0E00               	movlw	0
  3934  0008CE  6EDF               	movwf	indf2,c
  3935                           
  3936                           ;UART_Driver.c: 117: } else {
  3937  0008D0  0012               	return	
  3938  0008D2                     i1l139:
  3939                           
  3940                           ; BSR set to: 1
  3941                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3942                           
  3943                           ; BSR set to: 1
  3944  0008D2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3945  0008D4  0D01               	mullw	1
  3946  0008D6  0E0B               	movlw	low (_readBuffer+11)
  3947  0008D8  24F3               	addwf	prodl,w,c
  3948  0008DA  6ED9               	movwf	fsr2l,c
  3949  0008DC  0E01               	movlw	high (_readBuffer+11)
  3950  0008DE  20F4               	addwfc	prodh,w,c
  3951  0008E0  6EDA               	movwf	fsr2h,c
  3952  0008E2  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3956  0008E6  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3957                           
  3958                           ; BSR set to: 1
  3959                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3960  0008E8  0E32               	movlw	50
  3961  0008EA  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3962  0008EC  0012               	return	
  3963                           
  3964                           ; BSR set to: 1
  3965                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3966  0008EE  0E00               	movlw	0
  3967  0008F0  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3968                           
  3969                           ; BSR set to: 1
  3970                           ;UART_Driver.c: 122: }
  3971                           ;UART_Driver.c: 123: }
  3972                           ;UART_Driver.c: 124: break;
  3973                           
  3974                           ; BSR set to: 1
  3975  0008F2  0012               	return	
  3976  0008F4                     
  3977                           ; BSR set to: 1
  3978                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3979                           
  3980                           ; BSR set to: 1
  3981  0008F4  0E3A               	movlw	58
  3982  0008F6  1827               	xorwf	fillDataBuffer@data,w,c
  3983  0008F8  A4D8               	btfss	status,2,c
  3984  0008FA  D00D               	goto	i1l143
  3985                           
  3986                           ; BSR set to: 1
  3987                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3988  0008FC  0E04               	movlw	4
  3989  0008FE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3990                           
  3991                           ; BSR set to: 1
  3992                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3993  000900  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3994  000902  0D01               	mullw	1
  3995  000904  0E3E               	movlw	low (_readBuffer+62)
  3996  000906  24F3               	addwf	prodl,w,c
  3997  000908  6ED9               	movwf	fsr2l,c
  3998  00090A  0E01               	movlw	high (_readBuffer+62)
  3999  00090C  20F4               	addwfc	prodh,w,c
  4000  00090E  6EDA               	movwf	fsr2h,c
  4001  000910  0E00               	movlw	0
  4002  000912  6EDF               	movwf	indf2,c
  4003                           
  4004                           ;UART_Driver.c: 130: } else {
  4005  000914  0012               	return	
  4006  000916                     i1l143:
  4007                           
  4008                           ; BSR set to: 1
  4009                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  4010                           
  4011                           ; BSR set to: 1
  4012  000916  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4013  000918  0D01               	mullw	1
  4014  00091A  0E3E               	movlw	low (_readBuffer+62)
  4015  00091C  24F3               	addwf	prodl,w,c
  4016  00091E  6ED9               	movwf	fsr2l,c
  4017  000920  0E01               	movlw	high (_readBuffer+62)
  4018  000922  20F4               	addwfc	prodh,w,c
  4019  000924  6EDA               	movwf	fsr2h,c
  4020  000926  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4021                           
  4022                           ; BSR set to: 1
  4023                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  4024  00092A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  4025                           
  4026                           ; BSR set to: 1
  4027                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  4028  00092C  0E32               	movlw	50
  4029  00092E  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  4030  000930  0012               	return	
  4031                           
  4032                           ; BSR set to: 1
  4033                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  4034  000932  0E00               	movlw	0
  4035  000934  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4036                           
  4037                           ; BSR set to: 1
  4038                           ;UART_Driver.c: 135: }
  4039                           ;UART_Driver.c: 136: }
  4040                           ;UART_Driver.c: 137: break;
  4041                           
  4042                           ; BSR set to: 1
  4043  000936  0012               	return	
  4044  000938                     
  4045                           ; BSR set to: 1
  4046                           ;UART_Driver.c: 140: if (data == 0x3A) {
  4047                           
  4048                           ; BSR set to: 1
  4049  000938  0E3A               	movlw	58
  4050  00093A  1827               	xorwf	fillDataBuffer@data,w,c
  4051  00093C  A4D8               	btfss	status,2,c
  4052  00093E  D00D               	goto	i1l147
  4053                           
  4054                           ; BSR set to: 1
  4055                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  4056  000940  0E05               	movlw	5
  4057  000942  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4058                           
  4059                           ; BSR set to: 1
  4060                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4061  000944  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4062  000946  0D01               	mullw	1
  4063  000948  0E71               	movlw	low (_readBuffer+113)
  4064  00094A  24F3               	addwf	prodl,w,c
  4065  00094C  6ED9               	movwf	fsr2l,c
  4066  00094E  0E01               	movlw	high (_readBuffer+113)
  4067  000950  20F4               	addwfc	prodh,w,c
  4068  000952  6EDA               	movwf	fsr2h,c
  4069  000954  0E00               	movlw	0
  4070  000956  6EDF               	movwf	indf2,c
  4071                           
  4072                           ;UART_Driver.c: 143: } else {
  4073  000958  0012               	return	
  4074  00095A                     i1l147:
  4075                           
  4076                           ; BSR set to: 1
  4077                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4078                           
  4079                           ; BSR set to: 1
  4080  00095A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4081  00095C  0D01               	mullw	1
  4082  00095E  0E71               	movlw	low (_readBuffer+113)
  4083  000960  24F3               	addwf	prodl,w,c
  4084  000962  6ED9               	movwf	fsr2l,c
  4085  000964  0E01               	movlw	high (_readBuffer+113)
  4086  000966  20F4               	addwfc	prodh,w,c
  4087  000968  6EDA               	movwf	fsr2h,c
  4088  00096A  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4089                           
  4090                           ; BSR set to: 1
  4091                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4092  00096E  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4093                           
  4094                           ; BSR set to: 1
  4095                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4096  000970  0E32               	movlw	50
  4097  000972  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4098  000974  0012               	return	
  4099                           
  4100                           ; BSR set to: 1
  4101                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4102  000976  0E00               	movlw	0
  4103  000978  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4104                           
  4105                           ; BSR set to: 1
  4106                           ;UART_Driver.c: 148: }
  4107                           ;UART_Driver.c: 149: }
  4108                           ;UART_Driver.c: 150: break;
  4109                           
  4110                           ; BSR set to: 1
  4111  00097A  0012               	return	
  4112  00097C                     
  4113                           ; BSR set to: 1
  4114                           ;UART_Driver.c: 153: if (data == 0x24) {
  4115                           
  4116                           ; BSR set to: 1
  4117  00097C  0E24               	movlw	36
  4118  00097E  1827               	xorwf	fillDataBuffer@data,w,c
  4119  000980  A4D8               	btfss	status,2,c
  4120  000982  D009               	goto	i1l151
  4121                           
  4122                           ; BSR set to: 1
  4123                           ;UART_Driver.c: 154: acknowledge();
  4124  000984  ECB2  F009         	call	_acknowledge	;wreg free
  4125                           
  4126                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4127  000988  0E00               	movlw	0
  4128  00098A  0101               	movlb	1	; () banked
  4129  00098C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4130                           
  4131                           ; BSR set to: 1
  4132                           ;UART_Driver.c: 156: readReady = 1;
  4133  00098E  0E01               	movlw	1
  4134  000990  0100               	movlb	0	; () banked
  4135  000992  6FA0               	movwf	_readReady& (0+255),b
  4136                           
  4137                           ;UART_Driver.c: 157: } else {
  4138  000994  0012               	return	
  4139  000996                     i1l151:
  4140                           
  4141                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4142                           
  4143                           ; BSR set to: 0
  4144  000996  5027               	movf	fillDataBuffer@data,w,c
  4145  000998  0FD0               	addlw	208
  4146  00099A  0101               	movlb	1	; () banked
  4147  00099C  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4148                           
  4149                           ; BSR set to: 1
  4150                           ;UART_Driver.c: 160: }
  4151                           ;UART_Driver.c: 161: break;
  4152  00099E  0012               	return	
  4153  0009A0                     
  4154                           ; BSR set to: 1
  4155                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4156                           
  4157                           ; BSR set to: 1
  4158  0009A0  0E00               	movlw	0
  4159  0009A2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4160                           
  4161                           ; BSR set to: 1
  4162                           ;UART_Driver.c: 166: }
  4163                           
  4164                           ;UART_Driver.c: 165: break;
  4165  0009A4  0012               	return	
  4166  0009A6                     i1l128:
  4167                           
  4168                           ; BSR set to: 1
  4169  0009A6  0101               	movlb	1	; () banked
  4170  0009A8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4171                           
  4172                           ; Switch size 1, requested type "space"
  4173                           ; Number of cases is 6, Range of values is 0 to 5
  4174                           ; switch strategies available:
  4175                           ; Name         Instructions Cycles
  4176                           ; simple_byte           19    10 (average)
  4177                           ;	Chosen strategy is simple_byte
  4178  0009AA  0A00               	xorlw	0	; case 0
  4179  0009AC  B4D8               	btfsc	status,2,c
  4180  0009AE  D746               	goto	i1l129
  4181  0009B0  0A01               	xorlw	1	; case 1
  4182  0009B2  B4D8               	btfsc	status,2,c
  4183  0009B4  D75B               	goto	i1l134
  4184  0009B6  0A03               	xorlw	3	; case 2
  4185  0009B8  B4D8               	btfsc	status,2,c
  4186  0009BA  D77A               	goto	i1l138
  4187  0009BC  0A01               	xorlw	1	; case 3
  4188  0009BE  B4D8               	btfsc	status,2,c
  4189  0009C0  D799               	goto	i1l142
  4190  0009C2  0A07               	xorlw	7	; case 4
  4191  0009C4  B4D8               	btfsc	status,2,c
  4192  0009C6  D7B8               	goto	i1l146
  4193  0009C8  0A01               	xorlw	1	; case 5
  4194  0009CA  B4D8               	btfsc	status,2,c
  4195  0009CC  D7D7               	goto	i1l150
  4196  0009CE  D7E8               	goto	i1l153
  4197  0009D0                     __end_of_fillDataBuffer:
  4198                           	opt stack 0
  4199                           pclatu	equ	0xFFB
  4200                           pclath	equ	0xFFA
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           prodh	equ	0xFF4
  4206                           prodl	equ	0xFF3
  4207                           intcon	equ	0xFF2
  4208                           intcon2	equ	0xFF1
  4209                           indf0	equ	0xFEF
  4210                           postinc0	equ	0xFEE
  4211                           plusw0	equ	0xFEB
  4212                           fsr0h	equ	0xFEA
  4213                           fsr0l	equ	0xFE9
  4214                           wreg	equ	0xFE8
  4215                           indf1	equ	0xFE7
  4216                           postinc1	equ	0xFE6
  4217                           postdec1	equ	0xFE5
  4218                           fsr1h	equ	0xFE2
  4219                           fsr1l	equ	0xFE1
  4220                           bsr	equ	0xFE0
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           plusw2	equ	0xFDB
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function _acknowledge *****************
  4230 ;; Defined at:
  4231 ;;		line 169 in file "Drivers/UART_Driver.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4249 ;;Total ram usage:        0 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; Hardware stack levels required when called:    4
  4252 ;; This function calls:
  4253 ;;		i1_printf
  4254 ;; This function is called by:
  4255 ;;		_fillDataBuffer
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text23
  4260  001364                     __ptext23:
  4261                           	opt stack 0
  4262  001364                     _acknowledge:
  4263                           	opt stack 19
  4264                           
  4265                           ;UART_Driver.c: 170: printf(startCharacter);
  4266                           
  4267                           ;incstack = 0
  4268  001364  C041  F01A         	movff	_startCharacter,i1printf@f
  4269  001368  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4270  00136C  501A               	movf	i1printf@f,w,c
  4271  00136E  101B               	iorwf	i1printf@f+1,w,c
  4272  001370  A4D8               	btfss	status,2,c
  4273  001372  0E00               	movlw	low (__mediumconst shr (0+16))
  4274  001374  6E1C               	movwf	i1printf@f+2,c
  4275  001376  EC3D  F006         	call	i1_printf	;wreg free
  4276                           
  4277                           ;UART_Driver.c: 172: printf(ackCharacter);
  4278  00137A  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4279  00137E  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4280  001382  501A               	movf	i1printf@f,w,c
  4281  001384  101B               	iorwf	i1printf@f+1,w,c
  4282  001386  A4D8               	btfss	status,2,c
  4283  001388  0E00               	movlw	low (__mediumconst shr (0+16))
  4284  00138A  6E1C               	movwf	i1printf@f+2,c
  4285  00138C  EC3D  F006         	call	i1_printf	;wreg free
  4286                           
  4287                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4288  001390  0E22               	movlw	low STR_5
  4289  001392  6E1A               	movwf	i1printf@f,c
  4290  001394  0E08               	movlw	high STR_5
  4291  001396  6E1B               	movwf	i1printf@f+1,c
  4292  001398  501A               	movf	i1printf@f,w,c
  4293  00139A  101B               	iorwf	i1printf@f+1,w,c
  4294  00139C  A4D8               	btfss	status,2,c
  4295  00139E  0E00               	movlw	low (__mediumconst shr (0+16))
  4296  0013A0  6E1C               	movwf	i1printf@f+2,c
  4297  0013A2  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4298  0013A6  6A1E               	clrf	?i1_printf+4,c
  4299  0013A8  EC3D  F006         	call	i1_printf	;wreg free
  4300                           
  4301                           ;UART_Driver.c: 176: printf(stopCharacter);
  4302  0013AC  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4303  0013B0  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4304  0013B4  501A               	movf	i1printf@f,w,c
  4305  0013B6  101B               	iorwf	i1printf@f+1,w,c
  4306  0013B8  A4D8               	btfss	status,2,c
  4307  0013BA  0E00               	movlw	low (__mediumconst shr (0+16))
  4308  0013BC  6E1C               	movwf	i1printf@f+2,c
  4309  0013BE  EC3D  F006         	call	i1_printf	;wreg free
  4310  0013C2  0012               	return		;funcret
  4311  0013C4                     __end_of_acknowledge:
  4312                           	opt stack 0
  4313                           pclatu	equ	0xFFB
  4314                           pclath	equ	0xFFA
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           intcon	equ	0xFF2
  4322                           intcon2	equ	0xFF1
  4323                           indf0	equ	0xFEF
  4324                           postinc0	equ	0xFEE
  4325                           plusw0	equ	0xFEB
  4326                           fsr0h	equ	0xFEA
  4327                           fsr0l	equ	0xFE9
  4328                           wreg	equ	0xFE8
  4329                           indf1	equ	0xFE7
  4330                           postinc1	equ	0xFE6
  4331                           postdec1	equ	0xFE5
  4332                           fsr1h	equ	0xFE2
  4333                           fsr1l	equ	0xFE1
  4334                           bsr	equ	0xFE0
  4335                           indf2	equ	0xFDF
  4336                           postinc2	equ	0xFDE
  4337                           postdec2	equ	0xFDD
  4338                           plusw2	equ	0xFDB
  4339                           fsr2h	equ	0xFDA
  4340                           fsr2l	equ	0xFD9
  4341                           status	equ	0xFD8
  4342                           
  4343 ;; *************** function i1_printf *****************
  4344 ;; Defined at:
  4345 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4346 ;; Parameters:    Size  Location     Type
  4347 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4348 ;;		 -> STR_16(2), STR_15(2), STR_10(2), STR_9(2), 
  4349 ;;		 -> STR_8(2), STR_7(2), STR_6(2), STR_5(3), 
  4350 ;;		 -> STR_4(4), STR_3(4), ROM(32767), STR_2(2), 
  4351 ;;		 -> STR_1(2), C_DOOR_SendStates@mes(2), C_DOOR_SendStates@com(3), 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  printf          4    0        struct .
  4354 ;;  printf          3    0        PTR const unsigned char 
  4355 ;;  printf          2   34[COMRAM] unsigned int 
  4356 ;;  printf          2   31[COMRAM] PTR void [1]
  4357 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4358 ;;  printf          2    0        unsigned int 
  4359 ;;  printf          1   37[COMRAM] char 
  4360 ;;  printf          1   36[COMRAM] char 
  4361 ;;  printf          1   33[COMRAM] unsigned char 
  4362 ;;  printf          1   30[COMRAM] unsigned char 
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  2   25[COMRAM] int 
  4365 ;; Registers used:
  4366 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4372 ;;      Params:         5       0       0       0       0       0       0       0       0
  4373 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4375 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4376 ;;Total ram usage:       13 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    3
  4379 ;; This function calls:
  4380 ;;		i1___lwdiv
  4381 ;;		i1_putch
  4382 ;; This function is called by:
  4383 ;;		_acknowledge
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           	psect	text24
  4388  000C7A                     __ptext24:
  4389                           	opt stack 0
  4390  000C7A                     i1_printf:
  4391                           	opt stack 19
  4392                           
  4393                           ;doprnt.c: 466: va_list ap;
  4394                           ;doprnt.c: 499: signed char c;
  4395                           ;doprnt.c: 506: signed char prec;
  4396                           ;doprnt.c: 508: unsigned char flag;
  4397                           ;doprnt.c: 523: union {
  4398                           ;doprnt.c: 524: unsigned long vd;
  4399                           ;doprnt.c: 525: double integ;
  4400                           ;doprnt.c: 526: } tmpval;
  4401                           ;doprnt.c: 528: unsigned int val;
  4402                           ;doprnt.c: 529: unsigned len;
  4403                           ;doprnt.c: 530: const char * cp;
  4404                           ;doprnt.c: 533: *ap = __va_start();
  4405                           
  4406                           ;incstack = 0
  4407  000C7A  0E1D               	movlw	low (?i1_printf+3)
  4408  000C7C  6E20               	movwf	i1printf@ap,c
  4409  000C7E  0E00               	movlw	high (?i1_printf+3)
  4410  000C80  6E21               	movwf	i1printf@ap+1,c
  4411                           
  4412                           ;doprnt.c: 536: while(c = *f++) {
  4413  000C82  D085               	goto	i1u98_20
  4414  000C84                     
  4415                           ;doprnt.c: 538: if(c != '%')
  4416  000C84  0E25               	movlw	37
  4417  000C86  1826               	xorwf	i1printf@c,w,c
  4418  000C88  B4D8               	btfsc	status,2,c
  4419  000C8A  D004               	goto	i1l274
  4420                           
  4421                           ;doprnt.c: 540: {
  4422                           ;doprnt.c: 541: (putch(c) );
  4423  000C8C  5026               	movf	i1printf@c,w,c
  4424  000C8E  EC00  F00B         	call	i1_putch
  4425                           
  4426                           ;doprnt.c: 542: continue;
  4427  000C92  D07D               	goto	i1u98_20
  4428  000C94                     i1l274:
  4429                           
  4430                           ;doprnt.c: 543: }
  4431                           ;doprnt.c: 548: flag = 0;
  4432  000C94  0E00               	movlw	0
  4433  000C96  6E1F               	movwf	i1printf@flag,c
  4434                           
  4435                           ;doprnt.c: 635: switch(c = *f++) {
  4436  000C98  D004               	goto	i1l275
  4437  000C9A                     
  4438                           ;doprnt.c: 809: (putch(c) );
  4439  000C9A  5026               	movf	i1printf@c,w,c
  4440  000C9C  EC00  F00B         	call	i1_putch
  4441                           
  4442                           ;doprnt.c: 810: continue;
  4443  000CA0  D076               	goto	i1u98_20
  4444  000CA2                     i1l275:
  4445  000CA2  C01A  FFF6         	movff	i1printf@f,tblptrl
  4446  000CA6  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4447  000CAA  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4448  000CAE  0E01               	movlw	1
  4449  000CB0  261A               	addwf	i1printf@f,f,c
  4450  000CB2  0E00               	movlw	0
  4451  000CB4  221B               	addwfc	i1printf@f+1,f,c
  4452  000CB6  221C               	addwfc	i1printf@f+2,f,c
  4453  000CB8  BAF8               	btfsc	tblptru,5,c
  4454  000CBA  D003               	bra	i1u94_27
  4455  000CBC  0008               	tblrd		*
  4456  000CBE  50F5               	movf	tablat,w,c
  4457  000CC0  D005               	bra	i1u94_20
  4458  000CC2                     i1u94_27:
  4459  000CC2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4460  000CC6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4461  000CCA  50EF               	movf	indf0,w,c
  4462  000CCC                     i1u94_20:
  4463  000CCC  6E26               	movwf	i1printf@c,c
  4464  000CCE  5026               	movf	i1printf@c,w,c
  4465                           
  4466                           ; Switch size 1, requested type "space"
  4467                           ; Number of cases is 2, Range of values is 0 to 120
  4468                           ; switch strategies available:
  4469                           ; Name         Instructions Cycles
  4470                           ; simple_byte            7     4 (average)
  4471                           ;	Chosen strategy is simple_byte
  4472  000CD0  0A00               	xorlw	0	; case 0
  4473  000CD2  B4D8               	btfsc	status,2,c
  4474  000CD4  0012               	return	
  4475  000CD6  0A78               	xorlw	120	; case 120
  4476  000CD8  A4D8               	btfss	status,2,c
  4477  000CDA  D7DF               	goto	i1l280
  4478                           
  4479                           ;doprnt.c: 1273: {
  4480                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4481  000CDC  C020  FFD9         	movff	i1printf@ap,fsr2l
  4482  000CE0  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4483  000CE4  CFDE F023          	movff	postinc2,i1printf@val
  4484  000CE8  CFDD F024          	movff	postdec2,i1printf@val+1
  4485  000CEC  0E02               	movlw	2
  4486  000CEE  2620               	addwf	i1printf@ap,f,c
  4487  000CF0  0E00               	movlw	0
  4488  000CF2  2221               	addwfc	i1printf@ap+1,f,c
  4489                           
  4490                           ;doprnt.c: 1287: }
  4491                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4492  000CF4  0E01               	movlw	1
  4493  000CF6  6E26               	movwf	i1printf@c,c
  4494  000CF8  D014               	goto	i1l1570
  4495  000CFA                     
  4496                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4497  000CFA  5026               	movf	i1printf@c,w,c
  4498  000CFC  0D02               	mullw	2
  4499  000CFE  0E01               	movlw	low _hexpowers
  4500  000D00  24F3               	addwf	prodl,w,c
  4501  000D02  6EF6               	movwf	tblptrl,c
  4502  000D04  0E08               	movlw	high _hexpowers
  4503  000D06  20F4               	addwfc	prodh,w,c
  4504  000D08  6EF7               	movwf	tblptrh,c
  4505  000D0A                     	if	1	;There are 3 active tblptr bytes
  4506  000D0A  6AF8               	clrf	tblptru,c
  4507  000D0C  0E00               	movlw	low (__mediumconst shr (0+16))
  4508  000D0E  22F8               	addwfc	tblptru,f,c
  4509  000D10                     	endif
  4510  000D10  0009               	tblrd		*+
  4511  000D12  50F5               	movf	tablat,w,c
  4512  000D14  5C23               	subwf	i1printf@val,w,c
  4513  000D16  0009               	tblrd		*+
  4514  000D18  50F5               	movf	tablat,w,c
  4515  000D1A  5824               	subwfb	i1printf@val+1,w,c
  4516  000D1C  A0D8               	btfss	status,0,c
  4517  000D1E  D005               	goto	i1u97_20
  4518                           
  4519                           ;doprnt.c: 1318: break;
  4520  000D20  2A26               	incf	i1printf@c,f,c
  4521  000D22                     i1l1570:
  4522  000D22  0E04               	movlw	4
  4523  000D24  1826               	xorwf	i1printf@c,w,c
  4524  000D26  A4D8               	btfss	status,2,c
  4525  000D28  D7E8               	goto	i1l281
  4526  000D2A                     i1u97_20:
  4527                           
  4528                           ;doprnt.c: 1422: {
  4529                           ;doprnt.c: 1469: }
  4530                           ;doprnt.c: 1472: prec = c;
  4531  000D2A  C026  F025         	movff	i1printf@c,i1printf@prec
  4532                           
  4533                           ;doprnt.c: 1474: while(prec--) {
  4534  000D2E  D02B               	goto	i1l284
  4535  000D30                     
  4536                           ;doprnt.c: 1478: {
  4537                           ;doprnt.c: 1499: {
  4538                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4539  000D30  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4540  000D34  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4541  000D38  5025               	movf	i1printf@prec,w,c
  4542  000D3A  0D02               	mullw	2
  4543  000D3C  0E01               	movlw	low _hexpowers
  4544  000D3E  24F3               	addwf	prodl,w,c
  4545  000D40  6EF6               	movwf	tblptrl,c
  4546  000D42  0E08               	movlw	high _hexpowers
  4547  000D44  20F4               	addwfc	prodh,w,c
  4548  000D46  6EF7               	movwf	tblptrh,c
  4549  000D48                     	if	1	;There are 3 active tblptr bytes
  4550  000D48  6AF8               	clrf	tblptru,c
  4551  000D4A  0E00               	movlw	low (__mediumconst shr (0+16))
  4552  000D4C  22F8               	addwfc	tblptru,f,c
  4553  000D4E                     	endif
  4554  000D4E  0009               	tblrd		*+
  4555  000D50  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4556  000D54  000A               	tblrd		*-
  4557  000D56  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4558  000D5A  EC3A  F00A         	call	i1___lwdiv	;wreg free
  4559  000D5E  5013               	movf	?i1___lwdiv,w,c
  4560  000D60  0B0F               	andlw	15
  4561  000D62  6E22               	movwf	i1printf@idx,c
  4562                           
  4563                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4564  000D64  5022               	movf	i1printf@idx,w,c
  4565  000D66  0D01               	mullw	1
  4566  000D68  0E09               	movlw	low STR_17
  4567  000D6A  24F3               	addwf	prodl,w,c
  4568  000D6C  6EF6               	movwf	tblptrl,c
  4569  000D6E  0E08               	movlw	high STR_17
  4570  000D70  20F4               	addwfc	prodh,w,c
  4571  000D72  6EF7               	movwf	tblptrh,c
  4572  000D74                     	if	1	;There are 3 active tblptr bytes
  4573  000D74  6AF8               	clrf	tblptru,c
  4574  000D76  0E00               	movlw	low (__mediumconst shr (0+16))
  4575  000D78  22F8               	addwfc	tblptru,f,c
  4576  000D7A                     	endif
  4577  000D7A  0008               	tblrd		*
  4578  000D7C  CFF5 F026          	movff	tablat,i1printf@c
  4579                           
  4580                           ;doprnt.c: 1508: }
  4581                           ;doprnt.c: 1523: }
  4582                           ;doprnt.c: 1524: (putch(c) );
  4583  000D80  5026               	movf	i1printf@c,w,c
  4584  000D82  EC00  F00B         	call	i1_putch
  4585  000D86                     i1l284:
  4586  000D86  0625               	decf	i1printf@prec,f,c
  4587  000D88  2825               	incf	i1printf@prec,w,c
  4588  000D8A  A4D8               	btfss	status,2,c
  4589  000D8C  D7D1               	goto	i1l285
  4590  000D8E                     i1u98_20:
  4591  000D8E  C01A  FFF6         	movff	i1printf@f,tblptrl
  4592  000D92  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4593  000D96  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4594  000D9A  0E01               	movlw	1
  4595  000D9C  261A               	addwf	i1printf@f,f,c
  4596  000D9E  0E00               	movlw	0
  4597  000DA0  221B               	addwfc	i1printf@f+1,f,c
  4598  000DA2  221C               	addwfc	i1printf@f+2,f,c
  4599  000DA4  BAF8               	btfsc	tblptru,5,c
  4600  000DA6  D003               	bra	i1u99_27
  4601  000DA8  0008               	tblrd		*
  4602  000DAA  50F5               	movf	tablat,w,c
  4603  000DAC  D005               	bra	i1u99_20
  4604  000DAE                     i1u99_27:
  4605  000DAE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4606  000DB2  CFF7 FFEA          	movff	tblptrh,fsr0h
  4607  000DB6  50EF               	movf	indf0,w,c
  4608  000DB8                     i1u99_20:
  4609  000DB8  6E26               	movwf	i1printf@c,c
  4610  000DBA  5026               	movf	i1printf@c,w,c
  4611  000DBC  B4D8               	btfsc	status,2,c
  4612  000DBE  0012               	return	
  4613  000DC0  D761               	goto	i1l273
  4614  000DC2                     __end_ofi1_printf:
  4615                           	opt stack 0
  4616                           pclatu	equ	0xFFB
  4617                           pclath	equ	0xFFA
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodh	equ	0xFF4
  4623                           prodl	equ	0xFF3
  4624                           intcon	equ	0xFF2
  4625                           intcon2	equ	0xFF1
  4626                           indf0	equ	0xFEF
  4627                           postinc0	equ	0xFEE
  4628                           plusw0	equ	0xFEB
  4629                           fsr0h	equ	0xFEA
  4630                           fsr0l	equ	0xFE9
  4631                           wreg	equ	0xFE8
  4632                           indf1	equ	0xFE7
  4633                           postinc1	equ	0xFE6
  4634                           postdec1	equ	0xFE5
  4635                           fsr1h	equ	0xFE2
  4636                           fsr1l	equ	0xFE1
  4637                           bsr	equ	0xFE0
  4638                           indf2	equ	0xFDF
  4639                           postinc2	equ	0xFDE
  4640                           postdec2	equ	0xFDD
  4641                           plusw2	equ	0xFDB
  4642                           fsr2h	equ	0xFDA
  4643                           fsr2l	equ	0xFD9
  4644                           status	equ	0xFD8
  4645                           
  4646 ;; *************** function i1_putch *****************
  4647 ;; Defined at:
  4648 ;;		line 263 in file "Drivers/UART_Driver.c"
  4649 ;; Parameters:    Size  Location     Type
  4650 ;;  data            1    wreg     unsigned char 
  4651 ;; Auto vars:     Size  Location     Type
  4652 ;;  data            1   19[COMRAM] unsigned char 
  4653 ;; Return value:  Size  Location     Type
  4654 ;;                  1    wreg      void 
  4655 ;; Registers used:
  4656 ;;		wreg, status,2, cstack
  4657 ;; Tracked objects:
  4658 ;;		On entry : 0/0
  4659 ;;		On exit  : 0/0
  4660 ;;		Unchanged: 0/0
  4661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4662 ;;      Params:         0       0       0       0       0       0       0       0       0
  4663 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4665 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4666 ;;Total ram usage:        1 bytes
  4667 ;; Hardware stack levels used:    1
  4668 ;; Hardware stack levels required when called:    2
  4669 ;; This function calls:
  4670 ;;		i1_writeByte
  4671 ;; This function is called by:
  4672 ;;		i1_printf
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           	psect	text25
  4677  001600                     __ptext25:
  4678                           	opt stack 0
  4679  001600                     i1_putch:
  4680                           	opt stack 19
  4681                           
  4682                           ;incstack = 0
  4683                           ;i1putch@data stored from wreg
  4684  001600  6E14               	movwf	i1putch@data,c
  4685                           
  4686                           ;UART_Driver.c: 264: writeByte(data);
  4687  001602  5014               	movf	i1putch@data,w,c
  4688  001604  ECFA  F00A         	call	i1_writeByte
  4689  001608  0012               	return		;funcret
  4690  00160A                     __end_ofi1_putch:
  4691                           	opt stack 0
  4692                           pclatu	equ	0xFFB
  4693                           pclath	equ	0xFFA
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           intcon2	equ	0xFF1
  4702                           indf0	equ	0xFEF
  4703                           postinc0	equ	0xFEE
  4704                           plusw0	equ	0xFEB
  4705                           fsr0h	equ	0xFEA
  4706                           fsr0l	equ	0xFE9
  4707                           wreg	equ	0xFE8
  4708                           indf1	equ	0xFE7
  4709                           postinc1	equ	0xFE6
  4710                           postdec1	equ	0xFE5
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           bsr	equ	0xFE0
  4714                           indf2	equ	0xFDF
  4715                           postinc2	equ	0xFDE
  4716                           postdec2	equ	0xFDD
  4717                           plusw2	equ	0xFDB
  4718                           fsr2h	equ	0xFDA
  4719                           fsr2l	equ	0xFD9
  4720                           status	equ	0xFD8
  4721                           
  4722 ;; *************** function i1_writeByte *****************
  4723 ;; Defined at:
  4724 ;;		line 69 in file "Drivers/UART_Driver.c"
  4725 ;; Parameters:    Size  Location     Type
  4726 ;;  data            1    wreg     unsigned char 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  data            1   18[COMRAM] unsigned char 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  1    wreg      void 
  4731 ;; Registers used:
  4732 ;;		wreg
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4738 ;;      Params:         0       0       0       0       0       0       0       0       0
  4739 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4741 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4742 ;;Total ram usage:        1 bytes
  4743 ;; Hardware stack levels used:    1
  4744 ;; Hardware stack levels required when called:    1
  4745 ;; This function calls:
  4746 ;;		Nothing
  4747 ;; This function is called by:
  4748 ;;		i1_putch
  4749 ;; This function uses a non-reentrant model
  4750 ;;
  4751                           
  4752                           	psect	text26
  4753  0015F4                     __ptext26:
  4754                           	opt stack 0
  4755  0015F4                     i1_writeByte:
  4756                           	opt stack 19
  4757                           
  4758                           ;incstack = 0
  4759                           ;i1writeByte@data stored from wreg
  4760  0015F4  6E13               	movwf	i1writeByte@data,c
  4761  0015F6                     
  4762                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4763  0015F6  A2AC               	btfss	4012,1,c	;volatile
  4764  0015F8  D7FE               	goto	i1l1446
  4765                           
  4766                           ;UART_Driver.c: 71: TXREG = data;
  4767  0015FA  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4768  0015FE  0012               	return		;funcret
  4769  001600                     __end_ofi1_writeByte:
  4770                           	opt stack 0
  4771                           pclatu	equ	0xFFB
  4772                           pclath	equ	0xFFA
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           indf0	equ	0xFEF
  4782                           postinc0	equ	0xFEE
  4783                           plusw0	equ	0xFEB
  4784                           fsr0h	equ	0xFEA
  4785                           fsr0l	equ	0xFE9
  4786                           wreg	equ	0xFE8
  4787                           indf1	equ	0xFE7
  4788                           postinc1	equ	0xFE6
  4789                           postdec1	equ	0xFE5
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           bsr	equ	0xFE0
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           postdec2	equ	0xFDD
  4796                           plusw2	equ	0xFDB
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function i1___lwdiv *****************
  4802 ;; Defined at:
  4803 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;  dividend        2   18[COMRAM] unsigned int 
  4806 ;;  divisor         2   20[COMRAM] unsigned int 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4809 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4810 ;; Return value:  Size  Location     Type
  4811 ;;                  2   18[COMRAM] unsigned int 
  4812 ;; Registers used:
  4813 ;;		wreg, status,2, status,0
  4814 ;; Tracked objects:
  4815 ;;		On entry : 0/0
  4816 ;;		On exit  : 0/0
  4817 ;;		Unchanged: 0/0
  4818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4819 ;;      Params:         4       0       0       0       0       0       0       0       0
  4820 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4822 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4823 ;;Total ram usage:        7 bytes
  4824 ;; Hardware stack levels used:    1
  4825 ;; Hardware stack levels required when called:    1
  4826 ;; This function calls:
  4827 ;;		Nothing
  4828 ;; This function is called by:
  4829 ;;		i1_printf
  4830 ;; This function uses a non-reentrant model
  4831 ;;
  4832                           
  4833                           	psect	text27
  4834  001474                     __ptext27:
  4835                           	opt stack 0
  4836  001474                     i1___lwdiv:
  4837                           	opt stack 20
  4838                           
  4839                           ;incstack = 0
  4840  001474  0E00               	movlw	0
  4841  001476  6E18               	movwf	i1___lwdiv@quotient+1,c
  4842  001478  0E00               	movlw	0
  4843  00147A  6E17               	movwf	i1___lwdiv@quotient,c
  4844  00147C  5015               	movf	i1___lwdiv@divisor,w,c
  4845  00147E  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4846  001480  B4D8               	btfsc	status,2,c
  4847  001482  D01C               	goto	i1l697
  4848  001484  0E01               	movlw	1
  4849  001486  6E19               	movwf	i1___lwdiv@counter,c
  4850  001488  D004               	goto	i1l692
  4851  00148A  90D8               	bcf	status,0,c
  4852  00148C  3615               	rlcf	i1___lwdiv@divisor,f,c
  4853  00148E  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4854  001490  2A19               	incf	i1___lwdiv@counter,f,c
  4855  001492                     i1l692:
  4856  001492  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4857  001494  D7FA               	goto	i1l693
  4858  001496                     i1u83_20:
  4859  001496  90D8               	bcf	status,0,c
  4860  001498  3617               	rlcf	i1___lwdiv@quotient,f,c
  4861  00149A  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4862  00149C  5015               	movf	i1___lwdiv@divisor,w,c
  4863  00149E  5C13               	subwf	i1___lwdiv@dividend,w,c
  4864  0014A0  5016               	movf	i1___lwdiv@divisor+1,w,c
  4865  0014A2  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4866  0014A4  A0D8               	btfss	status,0,c
  4867  0014A6  D005               	goto	i1l696
  4868  0014A8  5015               	movf	i1___lwdiv@divisor,w,c
  4869  0014AA  5E13               	subwf	i1___lwdiv@dividend,f,c
  4870  0014AC  5016               	movf	i1___lwdiv@divisor+1,w,c
  4871  0014AE  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4872  0014B0  8017               	bsf	i1___lwdiv@quotient,0,c
  4873  0014B2                     i1l696:
  4874  0014B2  90D8               	bcf	status,0,c
  4875  0014B4  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4876  0014B6  3215               	rrcf	i1___lwdiv@divisor,f,c
  4877  0014B8  2E19               	decfsz	i1___lwdiv@counter,f,c
  4878  0014BA  D7ED               	goto	i1u83_20
  4879  0014BC                     i1l697:
  4880  0014BC  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4881  0014C0  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4882  0014C4  0012               	return		;funcret
  4883  0014C6                     __end_ofi1___lwdiv:
  4884                           	opt stack 0
  4885                           pclatu	equ	0xFFB
  4886                           pclath	equ	0xFFA
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           prodh	equ	0xFF4
  4892                           prodl	equ	0xFF3
  4893                           intcon	equ	0xFF2
  4894                           intcon2	equ	0xFF1
  4895                           indf0	equ	0xFEF
  4896                           postinc0	equ	0xFEE
  4897                           plusw0	equ	0xFEB
  4898                           fsr0h	equ	0xFEA
  4899                           fsr0l	equ	0xFE9
  4900                           wreg	equ	0xFE8
  4901                           indf1	equ	0xFE7
  4902                           postinc1	equ	0xFE6
  4903                           postdec1	equ	0xFE5
  4904                           fsr1h	equ	0xFE2
  4905                           fsr1l	equ	0xFE1
  4906                           bsr	equ	0xFE0
  4907                           indf2	equ	0xFDF
  4908                           postinc2	equ	0xFDE
  4909                           postdec2	equ	0xFDD
  4910                           plusw2	equ	0xFDB
  4911                           fsr2h	equ	0xFDA
  4912                           fsr2l	equ	0xFD9
  4913                           status	equ	0xFD8
  4914                           
  4915 ;; *************** function _HighISR *****************
  4916 ;; Defined at:
  4917 ;;		line 86 in file "main.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;                  1    wreg      void 
  4924 ;; Registers used:
  4925 ;;		wreg, status,2
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4933 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4934 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4935 ;;Total ram usage:       18 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		Interrupt level 2
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           	psect	intcode
  4945  000008                     __pintcode:
  4946                           	opt stack 0
  4947  000008                     _HighISR:
  4948                           	opt stack 19
  4949                           
  4950                           ;incstack = 0
  4951  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4952  00000A  EDEE  F008         	call	int_func,f	;refresh shadow registers
  4953                           pclatu	equ	0xFFB
  4954                           pclath	equ	0xFFA
  4955                           tblptru	equ	0xFF8
  4956                           tblptrh	equ	0xFF7
  4957                           tblptrl	equ	0xFF6
  4958                           tablat	equ	0xFF5
  4959                           prodh	equ	0xFF4
  4960                           prodl	equ	0xFF3
  4961                           intcon	equ	0xFF2
  4962                           intcon2	equ	0xFF1
  4963                           indf0	equ	0xFEF
  4964                           postinc0	equ	0xFEE
  4965                           plusw0	equ	0xFEB
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           indf1	equ	0xFE7
  4970                           postinc1	equ	0xFE6
  4971                           postdec1	equ	0xFE5
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           bsr	equ	0xFE0
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           plusw2	equ	0xFDB
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8
  4982                           
  4983                           	psect	intcode_body
  4984  0011DC                     __pintcode_body:
  4985                           	opt stack 19
  4986  0011DC                     int_func:
  4987                           	opt stack 19
  4988  0011DC  0006               	pop		; remove dummy address from shadow register refresh
  4989  0011DE  CFFA F001          	movff	pclath,??_HighISR
  4990  0011E2  CFFB F002          	movff	pclatu,??_HighISR+1
  4991  0011E6  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4992  0011EA  CFEA F004          	movff	fsr0h,??_HighISR+3
  4993  0011EE  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4994  0011F2  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4995  0011F6  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4996  0011FA  CFDA F008          	movff	fsr2h,??_HighISR+7
  4997  0011FE  CFF3 F009          	movff	prodl,??_HighISR+8
  4998  001202  CFF4 F00A          	movff	prodh,??_HighISR+9
  4999  001206  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  5000  00120A  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  5001  00120E  CFF8 F00D          	movff	tblptru,??_HighISR+12
  5002  001212  CFF5 F00E          	movff	tablat,??_HighISR+13
  5003  001216  C044  F00F         	movff	btemp,??_HighISR+14
  5004  00121A  C045  F010         	movff	btemp+1,??_HighISR+15
  5005  00121E  C046  F011         	movff	btemp+2,??_HighISR+16
  5006  001222  C047  F012         	movff	btemp+3,??_HighISR+17
  5007                           
  5008                           ;main.c: 87: if (INTCONbits.TMR0IF) {
  5009  001226  A4F2               	btfss	intcon,2,c	;volatile
  5010  001228  D004               	goto	i2l260
  5011                           
  5012                           ;main.c: 88: tick = 1;
  5013  00122A  0E01               	movlw	1
  5014  00122C  0100               	movlb	0	; () banked
  5015  00122E  6F9F               	movwf	_tick& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;main.c: 89: INTCONbits.TMR0IF = 0;
  5019  001230  94F2               	bcf	intcon,2,c	;volatile
  5020  001232                     i2l260:
  5021                           
  5022                           ; BSR set to: 0
  5023  001232  C012  F047         	movff	??_HighISR+17,btemp+3
  5024  001236  C011  F046         	movff	??_HighISR+16,btemp+2
  5025  00123A  C010  F045         	movff	??_HighISR+15,btemp+1
  5026  00123E  C00F  F044         	movff	??_HighISR+14,btemp
  5027  001242  C00E  FFF5         	movff	??_HighISR+13,tablat
  5028  001246  C00D  FFF8         	movff	??_HighISR+12,tblptru
  5029  00124A  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  5030  00124E  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  5031  001252  C00A  FFF4         	movff	??_HighISR+9,prodh
  5032  001256  C009  FFF3         	movff	??_HighISR+8,prodl
  5033  00125A  C008  FFDA         	movff	??_HighISR+7,fsr2h
  5034  00125E  C007  FFD9         	movff	??_HighISR+6,fsr2l
  5035  001262  C006  FFE2         	movff	??_HighISR+5,fsr1h
  5036  001266  C005  FFE1         	movff	??_HighISR+4,fsr1l
  5037  00126A  C004  FFEA         	movff	??_HighISR+3,fsr0h
  5038  00126E  C003  FFE9         	movff	??_HighISR+2,fsr0l
  5039  001272  C002  FFFB         	movff	??_HighISR+1,pclatu
  5040  001276  C001  FFFA         	movff	??_HighISR,pclath
  5041  00127A  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5042  00127C  0011               	retfie		f
  5043  00127E                     __end_of_HighISR:
  5044                           	opt stack 0
  5045                           pclatu	equ	0xFFB
  5046                           pclath	equ	0xFFA
  5047                           tblptru	equ	0xFF8
  5048                           tblptrh	equ	0xFF7
  5049                           tblptrl	equ	0xFF6
  5050                           tablat	equ	0xFF5
  5051                           prodh	equ	0xFF4
  5052                           prodl	equ	0xFF3
  5053                           intcon	equ	0xFF2
  5054                           intcon2	equ	0xFF1
  5055                           indf0	equ	0xFEF
  5056                           postinc0	equ	0xFEE
  5057                           plusw0	equ	0xFEB
  5058                           fsr0h	equ	0xFEA
  5059                           fsr0l	equ	0xFE9
  5060                           wreg	equ	0xFE8
  5061                           indf1	equ	0xFE7
  5062                           postinc1	equ	0xFE6
  5063                           postdec1	equ	0xFE5
  5064                           fsr1h	equ	0xFE2
  5065                           fsr1l	equ	0xFE1
  5066                           bsr	equ	0xFE0
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           plusw2	equ	0xFDB
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           pclatu	equ	0xFFB
  5075                           pclath	equ	0xFFA
  5076                           tblptru	equ	0xFF8
  5077                           tblptrh	equ	0xFF7
  5078                           tblptrl	equ	0xFF6
  5079                           tablat	equ	0xFF5
  5080                           prodh	equ	0xFF4
  5081                           prodl	equ	0xFF3
  5082                           intcon	equ	0xFF2
  5083                           intcon2	equ	0xFF1
  5084                           indf0	equ	0xFEF
  5085                           postinc0	equ	0xFEE
  5086                           plusw0	equ	0xFEB
  5087                           fsr0h	equ	0xFEA
  5088                           fsr0l	equ	0xFE9
  5089                           wreg	equ	0xFE8
  5090                           indf1	equ	0xFE7
  5091                           postinc1	equ	0xFE6
  5092                           postdec1	equ	0xFE5
  5093                           fsr1h	equ	0xFE2
  5094                           fsr1l	equ	0xFE1
  5095                           bsr	equ	0xFE0
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           postdec2	equ	0xFDD
  5099                           plusw2	equ	0xFDB
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104                           	psect	rparam
  5105  0000                     pclatu	equ	0xFFB
  5106                           pclath	equ	0xFFA
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           intcon2	equ	0xFF1
  5115                           indf0	equ	0xFEF
  5116                           postinc0	equ	0xFEE
  5117                           plusw0	equ	0xFEB
  5118                           fsr0h	equ	0xFEA
  5119                           fsr0l	equ	0xFE9
  5120                           wreg	equ	0xFE8
  5121                           indf1	equ	0xFE7
  5122                           postinc1	equ	0xFE6
  5123                           postdec1	equ	0xFE5
  5124                           fsr1h	equ	0xFE2
  5125                           fsr1l	equ	0xFE1
  5126                           bsr	equ	0xFE0
  5127                           indf2	equ	0xFDF
  5128                           postinc2	equ	0xFDE
  5129                           postdec2	equ	0xFDD
  5130                           plusw2	equ	0xFDB
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135                           	psect	temp
  5136  000044                     btemp:
  5137                           	opt stack 0
  5138  000044                     	ds	1
  5139  0000                     int$flags	set	btemp
  5140  0000                     wtemp6	set	btemp+1
  5141                           pclatu	equ	0xFFB
  5142                           pclath	equ	0xFFA
  5143                           tblptru	equ	0xFF8
  5144                           tblptrh	equ	0xFF7
  5145                           tblptrl	equ	0xFF6
  5146                           tablat	equ	0xFF5
  5147                           prodh	equ	0xFF4
  5148                           prodl	equ	0xFF3
  5149                           intcon	equ	0xFF2
  5150                           intcon2	equ	0xFF1
  5151                           indf0	equ	0xFEF
  5152                           postinc0	equ	0xFEE
  5153                           plusw0	equ	0xFEB
  5154                           fsr0h	equ	0xFEA
  5155                           fsr0l	equ	0xFE9
  5156                           wreg	equ	0xFE8
  5157                           indf1	equ	0xFE7
  5158                           postinc1	equ	0xFE6
  5159                           postdec1	equ	0xFE5
  5160                           fsr1h	equ	0xFE2
  5161                           fsr1l	equ	0xFE1
  5162                           bsr	equ	0xFE0
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           plusw2	equ	0xFDB
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    8
    Data        8
    BSS         232
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     33     103
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_10(CODE[2]), STR_9(CODE[2]), 
		 -> STR_8(CODE[2]), STR_7(CODE[2]), STR_6(CODE[2]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[4]), ROM(CODE[32767]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), STR_10(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), STR_9(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6813
                                             31 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     699
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    8     8      0    2698
                                             23 BANK0      8     8      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     405
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2029
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      67       5       64.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     150      20        0.0%
DATA                 0      0     150       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 26 17:46:28 2017

                         l11 1346                           l16 0DD8                           l44 1078  
                         l46 112E                           l39 128C                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l241 0B94                          l242 0BA2  
                        l251 0C50                          l252 0C64                          l245 0BE6  
                        l351 1034                          l247 0C0C                          l280 09F4  
                        l352 1042                          l344 0FBA                          l281 0A5A  
                        l273 09DC                          l169 155A                          l353 1058  
                        l345 0FD2                          l274 09EC                          l275 09FC  
                        l347 1000                          l284 0AE8                          l196 15B8  
                        l348 0FF4                          l285 0A90                          l692 1440  
                        l836 14D2                          l693 1438                          l837 14C8  
                        l696 1460                          l697 146A                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000                          u800 1444                          u900 0AF2  
                        u910 0B1E                          u860 0A28                          u917 0B14  
                        u890 0A8A                          u867 0A1E                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000          __end_ofi1_writeByte 1600  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1442 15DC  
                       l1528 0A82                         l1658 0DD0                         l1674 1284  
                       l1686 1070                         STR_1 0833                         STR_2 0831  
                       STR_3 081E                         STR_4 081A                         STR_5 0822  
                       STR_6 0835                         STR_7 0835                         STR_8 082B  
                       STR_9 0827                         u1021 0F32                         u1031 0F6C  
                       u1321 1538                         u1154 12F4                         u1090 1004  
                       u1155 12F0                         u1340 1508                         u1191 10C6  
                       u1461 0BB8                         u1537 0B66                         u1547 0F90  
               ?_C_DOOR_Init 0001                         _baud 0043                         _main 0B2A  
                       _read 0092                         _tick 009F                         fsr0h 000FEA  
                       fsr1h 000FE2                         indf0 000FEF                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0044  
                       prodh 000FF4                         prodl 000FF3                         start 00D4  
              __CFG_IESO$OFF 000000              __end_ofi1_putch 160A              __end_of_HighISR 127E  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000               _startCharacter 0041  
              __CFG_PLLDIV$5 000000         commandAndMessage@com 00AB      __size_of_C_DOOR_LockAll 000E  
       commandAndMessage@mes 00AD              __end_of___aldiv 106A                        ?_main 0001  
                      STR_10 0827                        STR_11 0829                        STR_12 082F  
                      STR_13 0827                        STR_14 082D                        STR_15 0825  
                      STR_16 082F                        STR_17 0809                        u10211 0F30  
                      u10311 0F6A              __end_of___lwdiv 1474                        i1l130 0864  
                      i1l150 097C                        i1l142 08F4                        i1l134 086C  
                      i1l151 0996                        i1l143 0916                        i1l135 088E  
                      i1l128 09A6                        i1l153 09A0                        i1l129 083C  
                      i1l146 0938                        i1l138 08B0                        i1l147 095A  
                      i1l139 08D2                        i1l280 0C9A                        i1l281 0CFA  
                      i1l273 0C84                        i1l274 0C94                        i1l275 0CA2  
                      i1l179 007C                        i1l284 0D86                        i1l285 0D30  
                      i2l260 1232                        i1l692 1492                        i1l693 148A  
                      i1l696 14B2                        i1l697 14BC                        _RCREG 000FAE  
       __size_of_acknowledge 0060                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 15CA  
            i1writeByte@data 0013                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00AF                 ?_D_UART_Read 00A1                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                        plusw2 000FDB                        status 000FD8  
                      wtemp6 0045                 ?_D_PORT_Init 0001           __size_ofi1___lwdiv 0052  
              _stopCharacter 003F             __end_ofi1_printf 0DC2                   i1printf@ap 0020  
            __initialization 13C4             _D_UART_Init$1499 00B4                 __end_of_main 0C7A  
                     ??_main 00C0                  i1_writeByte 15F4                __activetblptr 000003  
            __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00A1                       _ADCON1 000FC1  
                     ?_putch 0001                       i1l1446 15F6                       i1l1570 0D22  
                  ??i1_putch 0014             _C_DOOR_UnlockAll 15BC                    ??_HighISR 0001  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___aldiv 00A9  
                  ??___lwdiv 00A5             __end_of_readByte 1612                       clear_0 1402  
                     clear_1 140E                       _printf 09D0                       _strcmp 14C6  
          __end_ofi1___lwdiv 14C6                 __pdataCOMRAM 003D        D_UART_Init@interrupts 00B3  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 00B3              D_UART_Init@baud 00B1  
            D_UART_Init@name 00AF   __end_of_C_DOOR_ReadSensors 1304                   __accesstop 0060  
    __end_of__initialization 1416              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 00FA                  i1printf@idx 0022                  i1printf@val 0023  
             __pcstackCOMRAM 0001                 __pidataBANK0 1618                 C_DOOR_Init@d 00A1  
                i1putch@data 0014                __end_of_putch 15D8             _messageCharacter 00C5  
             _C_DOOR_LockAll 15E6       __size_of_D_UART_Enable 0024               ??_D_UART_Write 00B7  
                  ?i1_printf 001A       __size_of_D_TMR0_Enable 0014            _C_DOOR_SendStates 106A  
                    ??_putch 00A2           ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060  
                 __pbssBANK1 0100         __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 002E  
       __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00B8                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E       __end_of_C_DOOR_LockAll 15F4                   _deviceName 00C2  
                    ?_printf 00A8                      ?_strcmp 00A1    __end_of_C_DOOR_SendStates 1132  
                 ??i1_printf 001F      __size_of_fillDataBuffer 0198                      i1u83_20 1496  
                    i1u94_20 0CCC          D_UART_Enable@enable 00A1                      i1u94_27 0CC2  
                    i1u97_20 0D2A                      i1u98_20 0D8E                      i1u99_20 0DB8  
                    i1u99_27 0DAE              __CFG_VREGEN$OFF 000000                      i1_putch 1600  
                    _HighISR 0008                    ?_readByte 0001           __size_of_writeByte 000E  
              _D_UART_Enable 1542                      __Hparam 0000                      __Lparam 0000  
            __size_of_LowISR 00BC                _D_TMR0_Enable 15A8                   _readBuffer 0100  
                    ___aldiv 0F9C              ?_C_DOOR_LockAll 0001                      ___lwdiv 1420  
               __psmallconst 0800          C_DOOR_ReadSensors@d 00A5              __CFG_STVREN$OFF 000000  
              ??_acknowledge 0027                      __pcinit 13C4                      __ramtop 0800  
   __end_of_C_DOOR_UnlockAll 15CA                      __ptext0 0B2A                      __ptext1 14C6  
                    __ptext2 1514                      __ptext3 1132                      __ptext4 0F9C  
                    __ptext5 1542                      __ptext6 1566                      __ptext7 15A8  
                    __ptext8 158A                      __ptext9 15BC              __size_of_printf 015A  
                  _T0CONbits 000FD5                 ?i1_writeByte 0001              __size_of_strcmp 004E  
          __end_of_hexpowers 0809            i1___lwdiv@divisor 0015            i1___lwdiv@counter 0019  
       C_DOOR_SendStates@com 00BA         C_DOOR_SendStates@mes 00BD             ___aldiv@dividend 00A1  
             __pintcode_body 11DC         end_of_initialization 1416                   ??_readByte 0013  
        D_TMR0_Enable@enable 00A1                      int_func 11DC               ?_D_UART_Enable 0001  
             ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0F9C                    _RCSTAbits 000FAB  
                    printf@c 00B2                      printf@f 00A8             ___aldiv@quotient 00AB  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE                      strcmp@r 00A6  
          __end_of_writeByte 15E6   __size_of_C_DOOR_SendStates 00C8                    _TRISCbits 000F94  
        __end_of_acknowledge 13C4                    i1___lwdiv 1474                    _TXSTAbits 000FAC  
               i1printf@flag 001F                 i1printf@prec 0025           _C_DOOR_ReadSensors 127E  
             __end_of_LowISR 00D4                  _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001  
              __pidataCOMRAM 1612               __end_of_printf 0B2A               __end_of_strcmp 1514  
        start_initialization 13C4               _fillDataBuffer 0838                    i1printf@c 0026  
                  i1printf@f 001A                   ?i1___lwdiv 0013            __size_ofi1_printf 0148  
       ??_C_DOOR_ReadSensors 00A1              ??_D_UART_Enable 00A1                ??_C_DOOR_Init 00A1  
            ??_D_TMR0_Enable 00A1                     ??_LowISR 0028                  __pdataBANK0 00C5  
           __CFG_LPT1OSC$OFF 000000                  _acknowledge 1364             D_UART_Write@data 00B5  
                   ??_printf 00AB                     ??_strcmp 00A5       __end_of_fillDataBuffer 09D0  
                __pbssCOMRAM 0043         __size_ofi1_writeByte 000C                __pcstackBANK0 00A1  
              ??_D_UART_Init 00B4                ??_D_UART_Read 00A7                ??_D_TMR0_Init 00A2  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00E0  
              ??_D_PORT_Init 00A1                    __pnvBANK0 00C2             ??_C_DOOR_LockAll 00A1  
          __size_of_readByte 0008             ___lwdiv@dividend 00A1          __end_of_C_DOOR_Init 0EBC  
                  __pintcode 0008                     ?___aldiv 00A1                     ?___lwdiv 00A1  
                __pintcodelo 0018           fillDataBuffer@data 0027            ?_C_DOOR_UnlockAll 0001  
            ?_fillDataBuffer 0001                  __smallconst 0800           ??_C_DOOR_UnlockAll 00A1  
               _D_UART_Write 0EBC                    _hexpowers 0801                    _readReady 00A0  
           ___lwdiv@quotient 00A5                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00A5              ___aldiv@counter 00A9                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 11DC          __end_of_D_UART_Read 1542  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 158A                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 15A8                   printf@flag 00AB  
                 printf@prec 00B1                     i1_printf 0C7A                    _writeByte 15D8  
                _INTCON2bits 000FF1                    copy_data0 13F0                  _C_DOOR_Init 0DC2  
           __size_ofi1_putch 000A             __size_of_HighISR 1276                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___aldiv 00CE             __size_of___lwdiv 0054  
            ___lwdiv@divisor 00A3              ___lwdiv@counter 00A7                     __ptext10 106A  
                   __ptext11 1304                     __ptext12 0EBC                     __ptext21 160A  
                   __ptext13 09D0                     __ptext22 0838                     __ptext14 15CA  
                   __ptext23 1364                     __ptext15 15D8                     __ptext24 0C7A  
                   __ptext16 1420                     __ptext25 1600                     __ptext17 127E  
                   __ptext26 15F4                     __ptext18 15E6                     __ptext27 1474  
                   __ptext19 0DC2                   ?_writeByte 0001                     _do_reset 009E  
         i1___lwdiv@dividend 0013                  _D_UART_Init 1132                  _D_UART_Read 1514  
                   _readData 0098                  _D_TMR0_Init 1566                     _readByte 160A  
              __size_of_main 0150           C_DOOR_SendStates@d 00BF                  _D_PORT_Init 158A  
                   int$flags 0044                    printf@idx 00AE                    printf@val 00AF  
               ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017  
                  putch@data 00A2                   _INTCONbits 000FF2            _commandAndMessage 1304  
                   intlevel1 0000                     intlevel2 0000  __size_of_C_DOOR_ReadSensors 0086  
         ?_commandAndMessage 00A1        __end_of_D_UART_Enable 1566        __end_of_D_TMR0_Enable 15BC  
        ??_commandAndMessage 00AF                     printf@ap 00AC             ??_fillDataBuffer 0027  
        D_UART_Write@command 00B3                ??i1_writeByte 0013                     strcmp@s1 00A1  
                   strcmp@s2 00A3                writeByte@data 00A1    __end_of_commandAndMessage 1364  
               ___aldiv@sign 00AA                  ??_writeByte 00A1    __size_of_C_DOOR_UnlockAll 000E  
