

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Apr 01 16:29:18 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.44
    53                           ; Generated 14/09/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F2550 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  00197C                     __pidataCOMRAM:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _ackCharacter
    92  00197C  1A                 	db	low STR_4
    93  00197D  08                 	db	high STR_4
    94                           
    95                           ;initializer for _messageCharacter
    96  00197E  1E                 	db	low STR_3
    97  00197F  08                 	db	high STR_3
    98                           
    99                           ;initializer for _stopCharacter
   100  001980  33                 	db	low STR_2
   101  001981  08                 	db	high STR_2
   102                           
   103                           ;initializer for _startCharacter
   104  001982  35                 	db	low STR_1
   105  001983  08                 	db	high STR_1
   106                           
   107                           	psect	smallconst
   108  000800                     __psmallconst:
   109                           	opt stack 0
   110  000800  00                 	db	0
   111  000801                     _hexpowers:
   112                           	opt stack 0
   113  000801  0001               	dw	1
   114  000803  0010               	dw	16
   115  000805  0100               	dw	256
   116  000807  1000               	dw	4096
   117  000809                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _TMR1L	set	4046
   120  0000                     _TMR1H	set	4047
   121  0000                     _PORTBbits	set	3969
   122  0000                     _T1CONbits	set	4045
   123  0000                     _PORTCbits	set	3970
   124  0000                     _CCP1CONbits	set	4029
   125  0000                     _CCPR1L	set	4030
   126  0000                     _T2CONbits	set	4042
   127  0000                     _PR2	set	4043
   128  0000                     _INTCON2bits	set	4081
   129  0000                     _T0CONbits	set	4053
   130  0000                     _TXREG	set	4013
   131  0000                     _TRISCbits	set	3988
   132  0000                     _PIE1bits	set	3997
   133  0000                     _IPR1bits	set	3999
   134  0000                     _PIR1bits	set	3998
   135  0000                     _INTCONbits	set	4082
   136  0000                     _RCONbits	set	4048
   137  0000                     _SPBRG	set	4015
   138  0000                     _BAUDCONbits	set	4024
   139  0000                     _TXSTAbits	set	4012
   140  0000                     _RCREG	set	4014
   141  0000                     _RCSTAbits	set	4011
   142  0000                     _ADCON1	set	4033
   143  0000                     _PORTC	set	3970
   144  0000                     _TRISC	set	3988
   145  0000                     _TRISA	set	3986
   146  0000                     _TRISB	set	3987
   147  0000                     _PORTA	set	3968
   148  0000                     _PORTB	set	3969
   149  000809                     STR_17:
   150  000809  30                 	db	48	;'0'
   151  00080A  31                 	db	49	;'1'
   152  00080B  32                 	db	50	;'2'
   153  00080C  33                 	db	51	;'3'
   154  00080D  34                 	db	52	;'4'
   155  00080E  35                 	db	53	;'5'
   156  00080F  36                 	db	54	;'6'
   157  000810  37                 	db	55	;'7'
   158  000811  38                 	db	56	;'8'
   159  000812  39                 	db	57	;'9'
   160  000813  61                 	db	97	;'a'
   161  000814  62                 	db	98	;'b'
   162  000815  63                 	db	99	;'c'
   163  000816  64                 	db	100	;'d'
   164  000817  65                 	db	101	;'e'
   165  000818  66                 	db	102	;'f'
   166  000819  00                 	db	0
   167  00081A                     STR_4:
   168  00081A  5B                 	db	91	;'['
   169  00081B  41                 	db	65	;'A'
   170  00081C  5D                 	db	93	;']'
   171  00081D  00                 	db	0
   172  00081E                     STR_3:
   173  00081E  5B                 	db	91	;'['
   174  00081F  4D                 	db	77	;'M'
   175  000820  5D                 	db	93	;']'
   176  000821  00                 	db	0
   177  000822                     STR_5:
   178  000822  25                 	db	37
   179  000823  78                 	db	120	;'x'
   180  000824  00                 	db	0
   181  000825                     STR_14:
   182  000825  41                 	db	65	;'A'
   183  000826  00                 	db	0
   184  000827                     STR_15:
   185  000827  45                 	db	69	;'E'
   186  000828  00                 	db	0
   187  000829                     STR_11:
   188  000829  49                 	db	73	;'I'
   189  00082A  00                 	db	0
   190  00082B                     STR_9:
   191  00082B  4C                 	db	76	;'L'
   192  00082C  00                 	db	0
   193  00082D                     STR_8:
   194  00082D  50                 	db	80	;'P'
   195  00082E  00                 	db	0
   196  00082F                     STR_12:
   197  00082F  52                 	db	82	;'R'
   198  000830  00                 	db	0
   199  000831                     STR_10:
   200  000831  55                 	db	85	;'U'
   201  000832  00                 	db	0
   202  000833                     STR_2:
   203  000833  24                 	db	36
   204  000834  00                 	db	0
   205  000835                     STR_1:
   206  000835  26                 	db	38
   207  000836  00                 	db	0
   208  000837                     STR_6:
   209  000837  3A                 	db	58	;':'
   210  000838  00                 	db	0
   211  0000                     
   212                           ; #config settings
   213  000839  00                 	db	0	; dummy byte at the end
   214  0000                     
   215                           	psect	cinit
   216  001744                     __pcinit:
   217                           	opt stack 0
   218  001744                     start_initialization:
   219                           	opt stack 0
   220  001744                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to COMRAM (8 bytes)
   224                           ; load TBLPTR registers with __pidataCOMRAM
   225  001744  0E7C               	movlw	low __pidataCOMRAM
   226  001746  6EF6               	movwf	tblptrl,c
   227  001748  0E19               	movlw	high __pidataCOMRAM
   228  00174A  6EF7               	movwf	tblptrh,c
   229  00174C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   230  00174E  6EF8               	movwf	tblptru,c
   231  001750  EE00  F042         	lfsr	0,__pdataCOMRAM
   232  001754  EE10 F008          	lfsr	1,8
   233  001758                     copy_data0:
   234  001758  0009               	tblrd		*+
   235  00175A  CFF5 FFEE          	movff	tablat,postinc0
   236  00175E  50E5               	movf	postdec1,w,c
   237  001760  50E1               	movf	fsr1l,w,c
   238  001762  E1FA               	bnz	copy_data0
   239                           
   240                           ; Clear objects allocated to BANK1 (166 bytes)
   241  001764  EE01  F000         	lfsr	0,__pbssBANK1
   242  001768  0EA6               	movlw	166
   243  00176A                     clear_0:
   244  00176A  6AEE               	clrf	postinc0,c
   245  00176C  06E8               	decf	wreg,f,c
   246  00176E  E1FD               	bnz	clear_0
   247                           
   248                           ; Clear objects allocated to BANK0 (100 bytes)
   249  001770  EE00  F060         	lfsr	0,__pbssBANK0
   250  001774  0E64               	movlw	100
   251  001776                     clear_1:
   252  001776  6AEE               	clrf	postinc0,c
   253  001778  06E8               	decf	wreg,f,c
   254  00177A  E1FD               	bnz	clear_1
   255                           
   256                           ; Clear objects allocated to COMRAM (26 bytes)
   257  00177C  EE00  F028         	lfsr	0,__pbssCOMRAM
   258  001780  0E1A               	movlw	26
   259  001782                     clear_2:
   260  001782  6AEE               	clrf	postinc0,c
   261  001784  06E8               	decf	wreg,f,c
   262  001786  E1FD               	bnz	clear_2
   263  001788                     end_of_initialization:
   264                           	opt stack 0
   265  001788                     __end_of__initialization:
   266                           	opt stack 0
   267  001788  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   268  00178A  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   269  00178C  0100               	movlb	0
   270  00178E  EF1D  F004         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssCOMRAM
   281  000028                     __pbssCOMRAM:
   282                           	opt stack 0
   283  000028                     _read:
   284                           	opt stack 0
   285  000028                     	ds	6
   286  00002E                     _readData:
   287                           	opt stack 0
   288  00002E                     	ds	6
   289  000034                     _deviceName:
   290                           	opt stack 0
   291  000034                     	ds	3
   292  000037                     _door_cnt:
   293                           	opt stack 0
   294  000037                     	ds	2
   295  000039                     _oldAlarm:
   296                           	opt stack 0
   297  000039                     	ds	1
   298  00003A                     _newAlarm:
   299                           	opt stack 0
   300  00003A                     	ds	1
   301  00003B                     _pwm:
   302                           	opt stack 0
   303  00003B                     	ds	1
   304  00003C                     _lock:
   305                           	opt stack 0
   306  00003C                     	ds	1
   307  00003D                     _tick:
   308                           	opt stack 0
   309  00003D                     	ds	1
   310  00003E                     _communicationCnt:
   311                           	opt stack 0
   312  00003E                     	ds	1
   313  00003F                     _lockDelayCnt:
   314                           	opt stack 0
   315  00003F                     	ds	1
   316  000040                     _readReady:
   317                           	opt stack 0
   318  000040                     	ds	1
   319  000041                     _baud:
   320                           	opt stack 0
   321  000041                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           postdec1	equ	0xFE5
   329                           fsr1l	equ	0xFE1
   330                           
   331                           	psect	dataCOMRAM
   332  000042                     __pdataCOMRAM:
   333                           	opt stack 0
   334  000042                     _ackCharacter:
   335                           	opt stack 0
   336  000042                     	ds	2
   337  000044                     _messageCharacter:
   338                           	opt stack 0
   339  000044                     	ds	2
   340  000046                     _stopCharacter:
   341                           	opt stack 0
   342  000046                     	ds	2
   343  000048                     _startCharacter:
   344                           	opt stack 0
   345  000048                     	ds	2
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	bssBANK0
   356  000060                     __pbssBANK0:
   357                           	opt stack 0
   358  000060                     _doors:
   359                           	opt stack 0
   360  000060                     	ds	100
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssBANK1
   371  000100                     __pbssBANK1:
   372                           	opt stack 0
   373  000100                     _readBuffer:
   374                           	opt stack 0
   375  000100                     	ds	166
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	cstackBANK1
   386  0001A6                     __pcstackBANK1:
   387                           	opt stack 0
   388  0001A6                     D_UART_Write@command:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x0
   392  0001A6                     	ds	2
   393  0001A8                     D_UART_Write@data:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  0001A8                     	ds	2
   398  0001AA                     ??_D_UART_Write:
   399                           
   400                           ; 1 bytes @ 0x4
   401  0001AA                     	ds	1
   402  0001AB                     ??_C_DOOR_SendStates:
   403                           
   404                           ; 1 bytes @ 0x5
   405  0001AB                     	ds	3
   406  0001AE                     C_DOOR_SendStates@com:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0x8
   410  0001AE                     	ds	3
   411  0001B1                     C_DOOR_SendStates@mes:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xB
   415  0001B1                     	ds	2
   416  0001B3                     C_DOOR_SendStates@d:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xD
   420  0001B3                     	ds	1
   421  0001B4                     ??_main:
   422                           
   423                           ; 1 bytes @ 0xE
   424  0001B4                     	ds	2
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	cstackBANK0
   435  0000C4                     __pcstackBANK0:
   436                           	opt stack 0
   437  0000C4                     ??_LowISR:
   438                           
   439                           ; 1 bytes @ 0x0
   440  0000C4                     	ds	21
   441  0000D9                     ??_C_DOOR_Init:
   442  0000D9                     ??_C_DOOR_LockAll:
   443  0000D9                     ??_C_DOOR_UnlockAll:
   444  0000D9                     ??_C_DOOR_ReadSensors:
   445  0000D9                     ?_strcmp:
   446                           	opt stack 0
   447  0000D9                     ?___lwdiv:
   448                           	opt stack 0
   449  0000D9                     ?___lldiv:
   450                           	opt stack 0
   451  0000D9                     ?_D_UART_Read:
   452                           	opt stack 0
   453  0000D9                     D_UART_Enable@enable:
   454                           	opt stack 0
   455  0000D9                     putch@data:
   456                           	opt stack 0
   457  0000D9                     D_TMR0_Enable@enable:
   458                           	opt stack 0
   459  0000D9                     D_PWM_SetPwm@pwm:
   460                           	opt stack 0
   461  0000D9                     D_TMR1_Enable@enable:
   462                           	opt stack 0
   463  0000D9                     setAlarm@alarm:
   464                           	opt stack 0
   465  0000D9                     ___lwdiv@dividend:
   466                           	opt stack 0
   467  0000D9                     strcmp@s1:
   468                           	opt stack 0
   469  0000D9                     ___lldiv@dividend:
   470                           	opt stack 0
   471  0000D9                     commandAndMessage@door:
   472                           	opt stack 0
   473                           
   474                           ; 10 bytes @ 0x15
   475  0000D9                     	ds	1
   476  0000DA                     putch@max:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x16
   480  0000DA                     	ds	1
   481  0000DB                     ___lwdiv@divisor:
   482                           	opt stack 0
   483  0000DB                     strcmp@s2:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x17
   487  0000DB                     	ds	1
   488  0000DC                     C_DOOR_Init@cnt:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x18
   492  0000DC                     	ds	1
   493  0000DD                     ??_strcmp:
   494  0000DD                     C_DOOR_Init@d:
   495                           	opt stack 0
   496  0000DD                     C_DOOR_ReadSensors@d:
   497                           	opt stack 0
   498  0000DD                     ___lwdiv@counter:
   499                           	opt stack 0
   500  0000DD                     ___lldiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x19
   504  0000DD                     	ds	1
   505  0000DE                     strcmp@r:
   506                           	opt stack 0
   507  0000DE                     ___lwdiv@quotient:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x1A
   511  0000DE                     	ds	1
   512  0000DF                     
   513                           ; 1 bytes @ 0x1B
   514  0000DF                     	ds	1
   515  0000E0                     ?_printf:
   516                           	opt stack 0
   517  0000E0                     printf@f:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x1C
   521  0000E0                     	ds	1
   522  0000E1                     C_DOOR_LockAll@d:
   523                           	opt stack 0
   524  0000E1                     C_DOOR_UnlockAll@d:
   525                           	opt stack 0
   526  0000E1                     ___lldiv@quotient:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x1D
   530  0000E1                     	ds	1
   531  0000E2                     initDoors@door_cnt:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1E
   535  0000E2                     	ds	1
   536  0000E3                     printf@flag:
   537                           	opt stack 0
   538  0000E3                     commandAndMessage@com:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x1F
   542  0000E3                     	ds	1
   543  0000E4                     printf@idx:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x20
   547  0000E4                     	ds	1
   548  0000E5                     ___lldiv@counter:
   549                           	opt stack 0
   550  0000E5                     commandAndMessage@mes:
   551                           	opt stack 0
   552  0000E5                     printf@ap:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x21
   556  0000E5                     	ds	1
   557  0000E6                     D_UART_Init@name:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x22
   561  0000E6                     	ds	1
   562  0000E7                     printf@val:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x23
   566  0000E7                     	ds	1
   567  0000E8                     D_UART_Init@baud:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x24
   571  0000E8                     	ds	1
   572  0000E9                     printf@prec:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x25
   576  0000E9                     	ds	1
   577  0000EA                     D_UART_Init@interrupts:
   578                           	opt stack 0
   579  0000EA                     printf@c:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x26
   583  0000EA                     	ds	1
   584  0000EB                     tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           ; 1 bytes @ 0x27
   594                           
   595                           	psect	cstackCOMRAM
   596  000001                     __pcstackCOMRAM:
   597                           	opt stack 0
   598  000001                     ?i2___lwdiv:
   599                           	opt stack 0
   600  000001                     i2putch@data:
   601                           	opt stack 0
   602  000001                     i2___lwdiv@dividend:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x0
   606  000001                     	ds	1
   607  000002                     i2putch@max:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1
   611  000002                     	ds	1
   612  000003                     i2___lwdiv@divisor:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x2
   616  000003                     	ds	2
   617  000005                     i2___lwdiv@counter:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x4
   621  000005                     	ds	1
   622  000006                     i2___lwdiv@quotient:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x5
   626  000006                     	ds	2
   627  000008                     ?i2_printf:
   628                           	opt stack 0
   629  000008                     i2printf@f:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x7
   633  000008                     	ds	5
   634  00000D                     i2printf@flag:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0xC
   638  00000D                     	ds	1
   639  00000E                     i2printf@idx:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0xD
   643  00000E                     	ds	1
   644  00000F                     i2printf@ap:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0xE
   648  00000F                     	ds	2
   649  000011                     i2printf@val:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x10
   653  000011                     	ds	2
   654  000013                     i2printf@prec:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x12
   658  000013                     	ds	1
   659  000014                     i2printf@c:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x13
   663  000014                     	ds	1
   664  000015                     fillDataBuffer@data:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x14
   668  000015                     	ds	1
   669  000016                     ??_HighISR:
   670                           
   671                           ; 1 bytes @ 0x15
   672  000016                     	ds	18
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           postdec1	equ	0xFE5
   680                           fsr1l	equ	0xFE1
   681                           
   682 ;;
   683 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   684 ;;
   685 ;; *************** function _main *****************
   686 ;; Defined at:
   687 ;;		line 61 in file "main.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         0       0       0       0       0       0       0       0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0
   703 ;;      Temps:          0       0       2       0       0       0       0       0       0
   704 ;;      Totals:         0       0       2       0       0       0       0       0       0
   705 ;;Total ram usage:        2 bytes
   706 ;; Hardware stack levels required when called:   10
   707 ;; This function calls:
   708 ;;		_C_DOOR_LockAll
   709 ;;		_C_DOOR_ReadSensors
   710 ;;		_C_DOOR_SendStates
   711 ;;		_C_DOOR_UnlockAll
   712 ;;		_D_PORT_Init
   713 ;;		_D_PWM_Init
   714 ;;		_D_PWM_SetPwm
   715 ;;		_D_TMR0_Init
   716 ;;		_D_TMR1_Enable
   717 ;;		_D_TMR1_Init
   718 ;;		_D_UART_Enable
   719 ;;		_D_UART_Init
   720 ;;		_D_UART_Read
   721 ;;		_D_UART_Write
   722 ;;		_initDoors
   723 ;;		_setAlarm
   724 ;;		_strcmp
   725 ;; This function is called by:
   726 ;;		Startup code after reset
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text0
   731  00083A                     __ptext0:
   732                           	opt stack 0
   733  00083A                     _main:
   734                           	opt stack 21
   735                           
   736                           ;main.c: 62: _delay((unsigned long)((200)*(16000000/4000.0)));
   737                           
   738                           ;incstack = 0
   739  00083A  0E05               	movlw	5
   740  00083C  0101               	movlb	1	; () banked
   741  00083E  6FB5               	movwf	(??_main+1)& (0+255),b
   742  000840  0E0F               	movlw	15
   743  000842  6FB4               	movwf	??_main& (0+255),b
   744  000844  0EF1               	movlw	241
   745  000846                     u2577:
   746  000846  2EE8               	decfsz	wreg,f,c
   747  000848  D7FE               	bra	u2577
   748  00084A  2FB4               	decfsz	??_main& (0+255),f,b
   749  00084C  D7FC               	bra	u2577
   750  00084E  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   751  000850  D7FA               	bra	u2577
   752                           
   753                           ;main.c: 64: D_PORT_Init();
   754  000852  EC96  F00C         	call	_D_PORT_Init	;wreg free
   755                           
   756                           ;main.c: 68: D_UART_Init("P", 9600, 1);
   757  000856  0E2D               	movlw	low STR_8
   758  000858  0100               	movlb	0	; () banked
   759  00085A  6FE6               	movwf	D_UART_Init@name& (0+255),b
   760  00085C  0E08               	movlw	high STR_8
   761  00085E  6FE7               	movwf	(D_UART_Init@name+1)& (0+255),b
   762  000860  0E25               	movlw	37
   763  000862  6FE9               	movwf	(D_UART_Init@baud+1)& (0+255),b
   764  000864  0E80               	movlw	128
   765  000866  6FE8               	movwf	D_UART_Init@baud& (0+255),b
   766  000868  0E01               	movlw	1
   767  00086A  6FEA               	movwf	D_UART_Init@interrupts& (0+255),b
   768  00086C  ECAF  F00A         	call	_D_UART_Init	;wreg free
   769                           
   770                           ;main.c: 69: D_UART_Enable(1);
   771  000870  0E01               	movlw	1
   772  000872  EC31  F00C         	call	_D_UART_Enable
   773                           
   774                           ;main.c: 72: D_TMR0_Init();
   775  000876  EC43  F00C         	call	_D_TMR0_Init	;wreg free
   776                           
   777                           ;main.c: 73: D_TMR1_Init();
   778  00087A  EC77  F00C         	call	_D_TMR1_Init	;wreg free
   779                           
   780                           ;main.c: 76: D_PWM_Init();
   781  00087E  EC87  F00C         	call	_D_PWM_Init	;wreg free
   782                           
   783                           ;main.c: 78: _delay((unsigned long)((200)*(16000000/4000.0)));
   784  000882  0E05               	movlw	5
   785  000884  0101               	movlb	1	; () banked
   786  000886  6FB5               	movwf	(??_main+1)& (0+255),b
   787  000888  0E0F               	movlw	15
   788  00088A  6FB4               	movwf	??_main& (0+255),b
   789  00088C  0EF1               	movlw	241
   790  00088E                     u2587:
   791  00088E  2EE8               	decfsz	wreg,f,c
   792  000890  D7FE               	bra	u2587
   793  000892  2FB4               	decfsz	??_main& (0+255),f,b
   794  000894  D7FC               	bra	u2587
   795  000896  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   796  000898  D7FA               	bra	u2587
   797                           
   798                           ;main.c: 80: newAlarm = 0;
   799  00089A  0E00               	movlw	0
   800  00089C  6E3A               	movwf	_newAlarm,c
   801                           
   802                           ;main.c: 81: oldAlarm = 0;
   803  00089E  0E00               	movlw	0
   804  0008A0  6E39               	movwf	_oldAlarm,c
   805                           
   806                           ;main.c: 82: lock = 0;
   807  0008A2  0E00               	movlw	0
   808  0008A4  6E3C               	movwf	_lock,c
   809                           
   810                           ;main.c: 83: tick = 0;
   811  0008A6  0E00               	movlw	0
   812  0008A8  6E3D               	movwf	_tick,c
   813                           
   814                           ;main.c: 85: _delay((unsigned long)((200)*(16000000/4000.0)));
   815  0008AA  0E05               	movlw	5
   816  0008AC  0101               	movlb	1	; () banked
   817  0008AE  6FB5               	movwf	(??_main+1)& (0+255),b
   818  0008B0  0E0F               	movlw	15
   819  0008B2  6FB4               	movwf	??_main& (0+255),b
   820  0008B4  0EF1               	movlw	241
   821  0008B6                     u2597:
   822  0008B6  2EE8               	decfsz	wreg,f,c
   823  0008B8  D7FE               	bra	u2597
   824  0008BA  2FB4               	decfsz	??_main& (0+255),f,b
   825  0008BC  D7FC               	bra	u2597
   826  0008BE  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   827  0008C0  D7FA               	bra	u2597
   828                           
   829                           ;main.c: 89: PORTB = 0xFF;
   830                           
   831                           ;main.c: 88: } else {
   832                           
   833                           ;main.c: 87: PORTB = 0x00;
   834                           
   835                           ;main.c: 86: if (0) {
   836  0008C2  6881               	setf	3969,c	;volatile
   837  0008C4                     
   838                           ;main.c: 94: if (lock) {
   839                           
   840                           ;main.c: 90: }
   841                           ;main.c: 92: while(1) {
   842  0008C4  503C               	movf	_lock,w,c
   843  0008C6  B4D8               	btfsc	status,2,c
   844  0008C8  D009               	goto	l319
   845                           
   846                           ;main.c: 95: D_TMR1_Enable(0);
   847  0008CA  0E00               	movlw	0
   848  0008CC  ECA5  F00C         	call	_D_TMR1_Enable
   849                           
   850                           ;main.c: 96: lockDelayCnt = 0;
   851  0008D0  0E00               	movlw	0
   852  0008D2  6E3F               	movwf	_lockDelayCnt,c
   853                           
   854                           ;main.c: 97: C_DOOR_LockAll();
   855  0008D4  ECC4  F009         	call	_C_DOOR_LockAll	;wreg free
   856                           
   857                           ;main.c: 98: lock = 0;
   858  0008D8  0E00               	movlw	0
   859  0008DA  6E3C               	movwf	_lock,c
   860  0008DC                     l319:
   861                           
   862                           ;main.c: 99: }
   863                           ;main.c: 102: if (readReady) {
   864  0008DC  5040               	movf	_readReady,w,c
   865  0008DE  B4D8               	btfsc	status,2,c
   866  0008E0  D0B7               	goto	l333
   867                           
   868                           ;main.c: 103: readReady = 0;
   869  0008E2  0E00               	movlw	0
   870  0008E4  6E40               	movwf	_readReady,c
   871                           
   872                           ;main.c: 104: read = D_UART_Read();
   873  0008E6  EC07  F00C         	call	_D_UART_Read	;wreg free
   874  0008EA  EE20  F028         	lfsr	2,_read
   875  0008EE  0E05               	movlw	5
   876  0008F0                     u2401:
   877  0008F0  CFEB FFDB          	movff	plusw0,plusw2
   878  0008F4  06E8               	decf	wreg,f,c
   879  0008F6  E2FC               	bc	u2401
   880                           
   881                           ;main.c: 105: PORTBbits.RB5 = !PORTBbits.RB5;
   882  0008F8  BA81               	btfsc	3969,5,c	;volatile
   883  0008FA  D004               	goto	u2410
   884  0008FC  0101               	movlb	1	; () banked
   885  0008FE  6BB4               	clrf	??_main& (0+255),b
   886  000900  2BB4               	incf	??_main& (0+255),f,b
   887  000902  D002               	goto	u2428
   888  000904                     u2410:
   889  000904  0101               	movlb	1	; () banked
   890  000906  6BB4               	clrf	??_main& (0+255),b
   891  000908                     u2428:
   892  000908  3BB4               	swapf	??_main& (0+255),f,b
   893  00090A  47B4               	rlncf	??_main& (0+255),f,b
   894  00090C  5081               	movf	3969,w,c	;volatile
   895  00090E  19B4               	xorwf	??_main& (0+255),w,b
   896  000910  0BDF               	andlw	-33
   897  000912  19B4               	xorwf	??_main& (0+255),w,b
   898  000914  6E81               	movwf	3969,c	;volatile
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 108: communicationCnt = 0;
   902  000916  0E00               	movlw	0
   903  000918  6E3E               	movwf	_communicationCnt,c
   904                           
   905                           ; BSR set to: 1
   906                           ;main.c: 109: if (oldAlarm == 3) {
   907  00091A  0E03               	movlw	3
   908  00091C  1839               	xorwf	_oldAlarm,w,c
   909  00091E  A4D8               	btfss	status,2,c
   910  000920  D002               	goto	l321
   911                           
   912                           ; BSR set to: 1
   913                           ;main.c: 110: newAlarm = 0;
   914  000922  0E00               	movlw	0
   915  000924  6E3A               	movwf	_newAlarm,c
   916  000926                     l321:
   917                           
   918                           ; BSR set to: 1
   919                           ;main.c: 111: }
   920                           ;main.c: 114: if (strcmp(read.command, "L") == 0) {
   921                           
   922                           ; BSR set to: 1
   923  000926  C02A  F0D9         	movff	_read+2,strcmp@s1
   924  00092A  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   925  00092E  0E2B               	movlw	low STR_9
   926  000930  0100               	movlb	0	; () banked
   927  000932  6FDB               	movwf	strcmp@s2& (0+255),b
   928  000934  0E08               	movlw	high STR_9
   929  000936  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   930  000938  ECC9  F00B         	call	_strcmp	;wreg free
   931  00093C  0100               	movlb	0	; () banked
   932  00093E  51D9               	movf	?_strcmp& (0+255),w,b
   933  000940  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   934  000942  A4D8               	btfss	status,2,c
   935  000944  D006               	goto	l322
   936                           
   937                           ; BSR set to: 0
   938                           ;main.c: 115: lockDelayCnt = 0;
   939  000946  0E00               	movlw	0
   940  000948  6E3F               	movwf	_lockDelayCnt,c
   941                           
   942                           ; BSR set to: 0
   943                           ;main.c: 116: D_TMR1_Enable(1);
   944  00094A  0E01               	movlw	1
   945  00094C  ECA5  F00C         	call	_D_TMR1_Enable
   946                           
   947                           ;main.c: 119: } else if (strcmp(read.command, "U") == 0) {
   948  000950  D07F               	goto	l333
   949  000952                     l322:
   950  000952  C02A  F0D9         	movff	_read+2,strcmp@s1
   951  000956  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   952  00095A  0E31               	movlw	low STR_10
   953  00095C  0100               	movlb	0	; () banked
   954  00095E  6FDB               	movwf	strcmp@s2& (0+255),b
   955  000960  0E08               	movlw	high STR_10
   956  000962  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   957  000964  ECC9  F00B         	call	_strcmp	;wreg free
   958  000968  0100               	movlb	0	; () banked
   959  00096A  51D9               	movf	?_strcmp& (0+255),w,b
   960  00096C  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   961  00096E  A4D8               	btfss	status,2,c
   962  000970  D008               	goto	l324
   963                           
   964                           ; BSR set to: 0
   965                           ;main.c: 120: lockDelayCnt = 0;
   966  000972  0E00               	movlw	0
   967  000974  6E3F               	movwf	_lockDelayCnt,c
   968                           
   969                           ; BSR set to: 0
   970                           ;main.c: 121: D_TMR1_Enable(0);
   971  000976  0E00               	movlw	0
   972  000978  ECA5  F00C         	call	_D_TMR1_Enable
   973                           
   974                           ;main.c: 122: C_DOOR_UnlockAll();
   975  00097C  EC6A  F009         	call	_C_DOOR_UnlockAll	;wreg free
   976                           
   977                           ;main.c: 125: } else if (strcmp(read.command, "I") == 0) {
   978  000980  D067               	goto	l333
   979  000982                     l324:
   980  000982  C02A  F0D9         	movff	_read+2,strcmp@s1
   981  000986  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   982  00098A  0E29               	movlw	low STR_11
   983  00098C  0100               	movlb	0	; () banked
   984  00098E  6FDB               	movwf	strcmp@s2& (0+255),b
   985  000990  0E08               	movlw	high STR_11
   986  000992  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   987  000994  ECC9  F00B         	call	_strcmp	;wreg free
   988  000998  0100               	movlb	0	; () banked
   989  00099A  51D9               	movf	?_strcmp& (0+255),w,b
   990  00099C  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   991  00099E  A4D8               	btfss	status,2,c
   992  0009A0  D009               	goto	l326
   993                           
   994                           ; BSR set to: 0
   995                           ;main.c: 126: initDoors((uint8_t)(*read.message - 0x30));
   996  0009A2  C02C  FFD9         	movff	_read+4,fsr2l
   997  0009A6  C02D  FFDA         	movff	_read+5,fsr2h
   998  0009AA  50DF               	movf	indf2,w,c
   999  0009AC  0FD0               	addlw	208
  1000  0009AE  EC55  F00C         	call	_initDoors
  1001                           
  1002                           ;main.c: 129: } else if (strcmp(read.command, "R") == 0) {
  1003  0009B2  D04E               	goto	l333
  1004  0009B4                     l326:
  1005  0009B4  C02A  F0D9         	movff	_read+2,strcmp@s1
  1006  0009B8  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1007  0009BC  0E2F               	movlw	low STR_12
  1008  0009BE  0100               	movlb	0	; () banked
  1009  0009C0  6FDB               	movwf	strcmp@s2& (0+255),b
  1010  0009C2  0E08               	movlw	high STR_12
  1011  0009C4  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1012  0009C6  ECC9  F00B         	call	_strcmp	;wreg free
  1013  0009CA  0100               	movlb	0	; () banked
  1014  0009CC  51D9               	movf	?_strcmp& (0+255),w,b
  1015  0009CE  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1016  0009D0  A4D8               	btfss	status,2,c
  1017  0009D2  D00B               	goto	l328
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;main.c: 130: _delay((unsigned long)((20)*(16000000/4000.0)));
  1021  0009D4  0E68               	movlw	104
  1022  0009D6  0101               	movlb	1	; () banked
  1023  0009D8  6FB4               	movwf	??_main& (0+255),b
  1024  0009DA  0EE4               	movlw	228
  1025  0009DC                     u2607:
  1026  0009DC  2EE8               	decfsz	wreg,f,c
  1027  0009DE  D7FE               	bra	u2607
  1028  0009E0  2FB4               	decfsz	??_main& (0+255),f,b
  1029  0009E2  D7FC               	bra	u2607
  1030  0009E4  F000               	nop	
  1031  0009E6  00FF               	reset		;# 
  1032                           
  1033                           ;main.c: 134: } else if (strcmp(read.command, "P") == 0) {
  1034  0009E8  D033               	goto	l333
  1035  0009EA                     l328:
  1036  0009EA  C02A  F0D9         	movff	_read+2,strcmp@s1
  1037  0009EE  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1038  0009F2  0E2D               	movlw	low STR_8
  1039  0009F4  0100               	movlb	0	; () banked
  1040  0009F6  6FDB               	movwf	strcmp@s2& (0+255),b
  1041  0009F8  0E08               	movlw	high STR_8
  1042  0009FA  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1043  0009FC  ECC9  F00B         	call	_strcmp	;wreg free
  1044  000A00  0100               	movlb	0	; () banked
  1045  000A02  51D9               	movf	?_strcmp& (0+255),w,b
  1046  000A04  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1047  000A06  B4D8               	btfsc	status,2,c
  1048  000A08  D023               	goto	l333
  1049                           
  1050                           ; BSR set to: 0
  1051                           
  1052                           ; BSR set to: 0
  1053                           
  1054                           ; BSR set to: 0
  1055                           ;main.c: 138: } else if (strcmp(read.command, "A") == 0) {
  1056  000A0A  C02A  F0D9         	movff	_read+2,strcmp@s1
  1057  000A0E  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1058  000A12  0E25               	movlw	low STR_14
  1059  000A14  6FDB               	movwf	strcmp@s2& (0+255),b
  1060  000A16  0E08               	movlw	high STR_14
  1061  000A18  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1062  000A1A  ECC9  F00B         	call	_strcmp	;wreg free
  1063  000A1E  0100               	movlb	0	; () banked
  1064  000A20  51D9               	movf	?_strcmp& (0+255),w,b
  1065  000A22  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1066  000A24  A4D8               	btfss	status,2,c
  1067  000A26  D009               	goto	l332
  1068                           
  1069                           ; BSR set to: 0
  1070                           ;main.c: 139: setAlarm((uint8_t)(*read.message - 0x30));
  1071  000A28  C02C  FFD9         	movff	_read+4,fsr2l
  1072  000A2C  C02D  FFDA         	movff	_read+5,fsr2h
  1073  000A30  50DF               	movf	indf2,w,c
  1074  000A32  0FD0               	addlw	208
  1075  000A34  ECB9  F00C         	call	_setAlarm
  1076                           
  1077                           ;main.c: 141: } else {
  1078  000A38  D00B               	goto	l333
  1079  000A3A                     l332:
  1080                           
  1081                           ;main.c: 142: D_UART_Write("E", "U");
  1082  000A3A  0E27               	movlw	low STR_15
  1083  000A3C  0101               	movlb	1	; () banked
  1084  000A3E  6FA6               	movwf	D_UART_Write@command& (0+255),b
  1085  000A40  0E08               	movlw	high STR_15
  1086  000A42  6FA7               	movwf	(D_UART_Write@command+1)& (0+255),b
  1087  000A44  0E31               	movlw	low STR_10
  1088  000A46  6FA8               	movwf	D_UART_Write@data& (0+255),b
  1089  000A48  0E08               	movlw	high STR_10
  1090  000A4A  6FA9               	movwf	(D_UART_Write@data+1)& (0+255),b
  1091  000A4C  EC2C  F008         	call	_D_UART_Write	;wreg free
  1092  000A50                     l333:
  1093                           
  1094                           ;main.c: 144: }
  1095                           ;main.c: 145: }
  1096                           ;main.c: 148: if (tick) {
  1097  000A50  503D               	movf	_tick,w,c
  1098  000A52  B4D8               	btfsc	status,2,c
  1099  000A54  D737               	goto	l317
  1100                           
  1101                           ;main.c: 149: tick = 0;
  1102  000A56  0E00               	movlw	0
  1103  000A58  6E3D               	movwf	_tick,c
  1104                           
  1105                           ;main.c: 152: C_DOOR_ReadSensors();
  1106  000A5A  EC1D  F00A         	call	_C_DOOR_ReadSensors	;wreg free
  1107                           
  1108                           ;main.c: 155: C_DOOR_SendStates();
  1109  000A5E  ECA0  F008         	call	_C_DOOR_SendStates	;wreg free
  1110                           
  1111                           ;main.c: 158: if (communicationCnt < 60) {
  1112  000A62  0E3C               	movlw	60
  1113  000A64  603E               	cpfslt	_communicationCnt,c
  1114  000A66  D002               	goto	l335
  1115                           
  1116                           ;main.c: 159: communicationCnt++;
  1117  000A68  2A3E               	incf	_communicationCnt,f,c
  1118                           
  1119                           ;main.c: 160: } else {
  1120  000A6A  D005               	goto	l337
  1121  000A6C                     l335:
  1122                           
  1123                           ;main.c: 161: if (oldAlarm == 0) {
  1124  000A6C  5039               	movf	_oldAlarm,w,c
  1125  000A6E  A4D8               	btfss	status,2,c
  1126  000A70  D002               	goto	l337
  1127                           
  1128                           ;main.c: 162: newAlarm = 3;
  1129  000A72  0E03               	movlw	3
  1130  000A74  6E3A               	movwf	_newAlarm,c
  1131  000A76                     l337:
  1132                           
  1133                           ;main.c: 163: }
  1134                           ;main.c: 164: }
  1135                           ;main.c: 167: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1136  000A76  5039               	movf	_oldAlarm,w,c
  1137  000A78  183A               	xorwf	_newAlarm,w,c
  1138  000A7A  A4D8               	btfss	status,2,c
  1139  000A7C  D017               	goto	l341
  1140  000A7E  043A               	decf	_newAlarm,w,c
  1141  000A80  B4D8               	btfsc	status,2,c
  1142  000A82  D014               	goto	l341
  1143  000A84  0E03               	movlw	3
  1144  000A86  183A               	xorwf	_newAlarm,w,c
  1145  000A88  B4D8               	btfsc	status,2,c
  1146  000A8A  D010               	goto	l341
  1147  000A8C  D71B               	goto	l317
  1148  000A8E                     
  1149                           ;main.c: 171: pwm = 0x00;
  1150                           
  1151                           ;main.c: 170: case 0:
  1152  000A8E  0E00               	movlw	0
  1153  000A90  D00B               	goto	L1
  1154  000A92                     
  1155                           ;main.c: 175: case 1:
  1156                           ;main.c: 176: if (pwm == 0) {
  1157  000A92  503B               	movf	_pwm,w,c
  1158  000A94  A4D8               	btfss	status,2,c
  1159  000A96  D002               	goto	l347
  1160                           
  1161                           ;main.c: 177: pwm = 1;
  1162  000A98  0E01               	movlw	1
  1163  000A9A  6E3B               	movwf	_pwm,c
  1164  000A9C                     l347:
  1165                           
  1166                           ;main.c: 178: }
  1167                           ;main.c: 179: pwm = (uint8_t)(pwm * 0x02);
  1168  000A9C  503B               	movf	_pwm,w,c
  1169  000A9E  0D02               	mullw	2
  1170  000AA0  CFF3 F03B          	movff	prodl,_pwm
  1171                           
  1172                           ;main.c: 180: break;
  1173  000AA4  D011               	goto	l344
  1174  000AA6                     
  1175                           ;main.c: 183: pwm = 0x7F;
  1176  000AA6  0E7F               	movlw	127
  1177  000AA8                     L1:
  1178  000AA8  6E3B               	movwf	_pwm,c
  1179                           
  1180                           ;main.c: 185: }
  1181                           
  1182                           ;main.c: 184: break;
  1183  000AAA  D00E               	goto	l344
  1184  000AAC                     l341:
  1185  000AAC  503A               	movf	_newAlarm,w,c
  1186                           
  1187                           ; Switch size 1, requested type "space"
  1188                           ; Number of cases is 4, Range of values is 0 to 3
  1189                           ; switch strategies available:
  1190                           ; Name         Instructions Cycles
  1191                           ; simple_byte           13     7 (average)
  1192                           ;	Chosen strategy is simple_byte
  1193  000AAE  0A00               	xorlw	0	; case 0
  1194  000AB0  B4D8               	btfsc	status,2,c
  1195  000AB2  D7ED               	goto	l342
  1196  000AB4  0A01               	xorlw	1	; case 1
  1197  000AB6  B4D8               	btfsc	status,2,c
  1198  000AB8  D7EC               	goto	l345
  1199  000ABA  0A03               	xorlw	3	; case 2
  1200  000ABC  B4D8               	btfsc	status,2,c
  1201  000ABE  D7F3               	goto	l348
  1202  000AC0  0A01               	xorlw	1	; case 3
  1203  000AC2  B4D8               	btfsc	status,2,c
  1204  000AC4  D7E6               	goto	l345
  1205  000AC6  D7E3               	goto	l342
  1206  000AC8                     l344:
  1207                           
  1208                           ;main.c: 186: D_PWM_SetPwm(pwm);
  1209  000AC8  503B               	movf	_pwm,w,c
  1210  000ACA  ECF0  F00B         	call	_D_PWM_SetPwm
  1211                           
  1212                           ;main.c: 187: oldAlarm = newAlarm;
  1213  000ACE  C03A  F039         	movff	_newAlarm,_oldAlarm
  1214  000AD2  D6F8               	goto	l317
  1215  000AD4                     __end_of_main:
  1216                           	opt stack 0
  1217                           tblptru	equ	0xFF8
  1218                           tblptrh	equ	0xFF7
  1219                           tblptrl	equ	0xFF6
  1220                           tablat	equ	0xFF5
  1221                           prodl	equ	0xFF3
  1222                           postinc0	equ	0xFEE
  1223                           plusw0	equ	0xFEB
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1l	equ	0xFE1
  1227                           indf2	equ	0xFDF
  1228                           plusw2	equ	0xFDB
  1229                           fsr2h	equ	0xFDA
  1230                           fsr2l	equ	0xFD9
  1231                           status	equ	0xFD8
  1232                           
  1233 ;; *************** function _strcmp *****************
  1234 ;; Defined at:
  1235 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  s1              2   21[BANK0 ] PTR const unsigned char 
  1238 ;;		 -> readBuffer(166), 
  1239 ;;  s2              2   23[BANK0 ] PTR const unsigned char 
  1240 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
  1241 ;;		 -> STR_10(2), STR_9(2), 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  r               1   26[BANK0 ] char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2   21[BANK0 ] int 
  1246 ;; Registers used:
  1247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1253 ;;      Params:         0       4       0       0       0       0       0       0       0
  1254 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1255 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1256 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1257 ;;Total ram usage:        6 bytes
  1258 ;; Hardware stack levels used:    1
  1259 ;; Hardware stack levels required when called:    6
  1260 ;; This function calls:
  1261 ;;		Nothing
  1262 ;; This function is called by:
  1263 ;;		_main
  1264 ;; This function uses a non-reentrant model
  1265 ;;
  1266                           
  1267                           	psect	text1
  1268  001792                     __ptext1:
  1269                           	opt stack 0
  1270  001792                     _strcmp:
  1271                           	opt stack 24
  1272                           
  1273                           ;incstack = 0
  1274  001792  D005               	goto	l935
  1275  001794  0100               	movlb	0	; () banked
  1276  001796  4BD9               	infsnz	strcmp@s1& (0+255),f,b
  1277  001798  2BDA               	incf	(strcmp@s1+1)& (0+255),f,b
  1278  00179A  4BDB               	infsnz	strcmp@s2& (0+255),f,b
  1279  00179C  2BDC               	incf	(strcmp@s2+1)& (0+255),f,b
  1280  00179E                     l935:
  1281                           
  1282                           ; BSR set to: 0
  1283  00179E  C0D9  FFD9         	movff	strcmp@s1,fsr2l
  1284  0017A2  C0DA  FFDA         	movff	strcmp@s1+1,fsr2h
  1285  0017A6  50DF               	movf	indf2,w,c
  1286  0017A8  0100               	movlb	0	; () banked
  1287  0017AA  6FDD               	movwf	??_strcmp& (0+255),b
  1288  0017AC  C0DB  FFF6         	movff	strcmp@s2,tblptrl
  1289  0017B0  C0DC  FFF7         	movff	strcmp@s2+1,tblptrh
  1290  0017B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1291  0017B4  6AF8               	clrf	tblptru,c
  1292  0017B6                     	endif
  1293  0017B6                     	if	0	;tblptru may be non-zero
  1294  0017B6                     	endif
  1295  0017B6  0008               	tblrd		*
  1296  0017B8  50F5               	movf	tablat,w,c
  1297  0017BA  0800               	sublw	0
  1298  0017BC  25DD               	addwf	??_strcmp& (0+255),w,b
  1299  0017BE  6FDE               	movwf	strcmp@r& (0+255),b
  1300  0017C0  51DE               	movf	strcmp@r& (0+255),w,b
  1301  0017C2  A4D8               	btfss	status,2,c
  1302  0017C4  D007               	goto	u2340
  1303                           
  1304                           ; BSR set to: 0
  1305  0017C6  C0D9  FFD9         	movff	strcmp@s1,fsr2l
  1306  0017CA  C0DA  FFDA         	movff	strcmp@s1+1,fsr2h
  1307  0017CE  50DF               	movf	indf2,w,c
  1308  0017D0  A4D8               	btfss	status,2,c
  1309  0017D2  D7E0               	goto	l936
  1310  0017D4                     u2340:
  1311                           
  1312                           ; BSR set to: 0
  1313                           
  1314                           ; BSR set to: 0
  1315                           
  1316                           ; BSR set to: 0
  1317  0017D4  51DE               	movf	strcmp@r& (0+255),w,b
  1318  0017D6  6FD9               	movwf	?_strcmp& (0+255),b
  1319  0017D8  6BDA               	clrf	(?_strcmp+1)& (0+255),b
  1320  0017DA  BFD9               	btfsc	?_strcmp& (0+255),7,b
  1321  0017DC  07DA               	decf	(?_strcmp+1)& (0+255),f,b
  1322  0017DE  0012               	return	
  1323  0017E0                     __end_of_strcmp:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           prodl	equ	0xFF3
  1330                           postinc0	equ	0xFEE
  1331                           plusw0	equ	0xFEB
  1332                           wreg	equ	0xFE8
  1333                           postdec1	equ	0xFE5
  1334                           fsr1l	equ	0xFE1
  1335                           indf2	equ	0xFDF
  1336                           plusw2	equ	0xFDB
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _setAlarm *****************
  1342 ;; Defined at:
  1343 ;;		line 57 in file "main.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  alarm           1    wreg     unsigned char 
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  alarm           1   21[BANK0 ] unsigned char 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1357 ;;      Params:         0       0       0       0       0       0       0       0       0
  1358 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1359 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1360 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1361 ;;Total ram usage:        1 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    6
  1364 ;; This function calls:
  1365 ;;		Nothing
  1366 ;; This function is called by:
  1367 ;;		_main
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370                           
  1371                           	psect	text2
  1372  001972                     __ptext2:
  1373                           	opt stack 0
  1374  001972                     _setAlarm:
  1375                           	opt stack 24
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;incstack = 0
  1379                           ;setAlarm@alarm stored from wreg
  1380  001972  0100               	movlb	0	; () banked
  1381  001974  6FD9               	movwf	setAlarm@alarm& (0+255),b
  1382                           
  1383                           ;main.c: 58: newAlarm = alarm;
  1384  001976  C0D9  F03A         	movff	setAlarm@alarm,_newAlarm
  1385  00197A  0012               	return		;funcret
  1386  00197C                     __end_of_setAlarm:
  1387                           	opt stack 0
  1388                           tblptru	equ	0xFF8
  1389                           tblptrh	equ	0xFF7
  1390                           tblptrl	equ	0xFF6
  1391                           tablat	equ	0xFF5
  1392                           prodl	equ	0xFF3
  1393                           postinc0	equ	0xFEE
  1394                           plusw0	equ	0xFEB
  1395                           wreg	equ	0xFE8
  1396                           postdec1	equ	0xFE5
  1397                           fsr1l	equ	0xFE1
  1398                           indf2	equ	0xFDF
  1399                           plusw2	equ	0xFDB
  1400                           fsr2h	equ	0xFDA
  1401                           fsr2l	equ	0xFD9
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _initDoors *****************
  1405 ;; Defined at:
  1406 ;;		line 45 in file "main.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  door_cnt        1    wreg     unsigned char 
  1409 ;; Auto vars:     Size  Location     Type
  1410 ;;  door_cnt        1   30[BANK0 ] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1420 ;;      Params:         0       0       0       0       0       0       0       0       0
  1421 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1422 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1423 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1424 ;;Total ram usage:        1 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    7
  1427 ;; This function calls:
  1428 ;;		_C_DOOR_Init
  1429 ;;		_C_DOOR_LockAll
  1430 ;;		_D_TMR0_Enable
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text3
  1437  0018AA                     __ptext3:
  1438                           	opt stack 0
  1439  0018AA                     _initDoors:
  1440                           	opt stack 23
  1441                           
  1442                           ;incstack = 0
  1443                           ;initDoors@door_cnt stored from wreg
  1444  0018AA  0100               	movlb	0	; () banked
  1445  0018AC  6FE2               	movwf	initDoors@door_cnt& (0+255),b
  1446                           
  1447                           ;main.c: 46: if (door_cnt < 1) {
  1448  0018AE  0100               	movlb	0	; () banked
  1449  0018B0  51E2               	movf	initDoors@door_cnt& (0+255),w,b
  1450  0018B2  A4D8               	btfss	status,2,c
  1451  0018B4  D002               	goto	l307
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 47: door_cnt = 1;
  1455  0018B6  0E01               	movlw	1
  1456  0018B8  6FE2               	movwf	initDoors@door_cnt& (0+255),b
  1457  0018BA                     l307:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 48: }
  1461                           ;main.c: 50: C_DOOR_Init(door_cnt);
  1462                           
  1463                           ; BSR set to: 0
  1464  0018BA  51E2               	movf	initDoors@door_cnt& (0+255),w,b
  1465  0018BC  ECDF  F006         	call	_C_DOOR_Init
  1466                           
  1467                           ;main.c: 51: C_DOOR_LockAll();
  1468  0018C0  ECC4  F009         	call	_C_DOOR_LockAll	;wreg free
  1469                           
  1470                           ;main.c: 54: D_TMR0_Enable(1);
  1471  0018C4  0E01               	movlw	1
  1472  0018C6  ECAF  F00C         	call	_D_TMR0_Enable
  1473  0018CA  0012               	return		;funcret
  1474  0018CC                     __end_of_initDoors:
  1475                           	opt stack 0
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           prodl	equ	0xFF3
  1481                           postinc0	equ	0xFEE
  1482                           plusw0	equ	0xFEB
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1l	equ	0xFE1
  1486                           indf2	equ	0xFDF
  1487                           plusw2	equ	0xFDB
  1488                           fsr2h	equ	0xFDA
  1489                           fsr2l	equ	0xFD9
  1490                           status	equ	0xFD8
  1491                           
  1492 ;; *************** function _C_DOOR_LockAll *****************
  1493 ;; Defined at:
  1494 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;		None
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  d               1   29[BANK0 ] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1508 ;;      Params:         0       0       0       0       0       0       0       0       0
  1509 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1510 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1511 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1512 ;;Total ram usage:        9 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    6
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_initDoors
  1519 ;;		_main
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522                           
  1523                           	psect	text4
  1524  001388                     __ptext4:
  1525                           	opt stack 0
  1526  001388                     _C_DOOR_LockAll:
  1527                           	opt stack 23
  1528                           
  1529                           ;DOOR_Controller.c: 80: uint8_t d;
  1530                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1531                           
  1532                           ;incstack = 0
  1533  001388  0E00               	movlw	0
  1534  00138A  0100               	movlb	0	; () banked
  1535  00138C  6FE1               	movwf	C_DOOR_LockAll@d& (0+255),b
  1536  00138E  D047               	goto	l28
  1537  001390                     
  1538                           ; BSR set to: 0
  1539                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1540                           
  1541                           ; BSR set to: 0
  1542  001390  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1543  001392  0D0A               	mullw	10
  1544  001394  0E02               	movlw	2
  1545  001396  26F3               	addwf	prodl,f,c
  1546  001398  0E00               	movlw	0
  1547  00139A  22F4               	addwfc	prodh,f,c
  1548  00139C  0E60               	movlw	low _doors
  1549  00139E  24F3               	addwf	prodl,w,c
  1550  0013A0  6ED9               	movwf	fsr2l,c
  1551  0013A2  0E00               	movlw	high _doors
  1552  0013A4  20F4               	addwfc	prodh,w,c
  1553  0013A6  6EDA               	movwf	fsr2h,c
  1554  0013A8  CFDE F0D9          	movff	postinc2,??_C_DOOR_LockAll
  1555  0013AC  CFDD F0DA          	movff	postdec2,??_C_DOOR_LockAll+1
  1556  0013B0  C0D9  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1557  0013B4  C0DA  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1558  0013B8  50DF               	movf	indf2,w,c
  1559  0013BA  6FDB               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1560  0013BC  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1561  0013BE  0D0A               	mullw	10
  1562  0013C0  0E04               	movlw	4
  1563  0013C2  26F3               	addwf	prodl,f,c
  1564  0013C4  0E00               	movlw	0
  1565  0013C6  22F4               	addwfc	prodh,f,c
  1566  0013C8  0E60               	movlw	low _doors
  1567  0013CA  24F3               	addwf	prodl,w,c
  1568  0013CC  6ED9               	movwf	fsr2l,c
  1569  0013CE  0E00               	movlw	high _doors
  1570  0013D0  20F4               	addwfc	prodh,w,c
  1571  0013D2  6EDA               	movwf	fsr2h,c
  1572  0013D4  50DF               	movf	indf2,w,c
  1573  0013D6  6FDC               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1574  0013D8  0E01               	movlw	1
  1575  0013DA  6FDD               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1576  0013DC  2BDC               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1577  0013DE  D002               	goto	u1984
  1578  0013E0                     u1985:
  1579  0013E0  90D8               	bcf	status,0,c
  1580  0013E2  37DD               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1581  0013E4                     u1984:
  1582  0013E4  2FDC               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1583  0013E6  D7FC               	goto	u1985
  1584  0013E8  0100               	movlb	0	; () banked
  1585  0013EA  51DD               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1586  0013EC  15DB               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1587  0013EE  6FDE               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1588  0013F0  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1589  0013F2  0D0A               	mullw	10
  1590  0013F4  0E02               	movlw	2
  1591  0013F6  26F3               	addwf	prodl,f,c
  1592  0013F8  0E00               	movlw	0
  1593  0013FA  22F4               	addwfc	prodh,f,c
  1594  0013FC  0E60               	movlw	low _doors
  1595  0013FE  24F3               	addwf	prodl,w,c
  1596  001400  6ED9               	movwf	fsr2l,c
  1597  001402  0E00               	movlw	high _doors
  1598  001404  20F4               	addwfc	prodh,w,c
  1599  001406  6EDA               	movwf	fsr2h,c
  1600  001408  CFDE F0DF          	movff	postinc2,??_C_DOOR_LockAll+6
  1601  00140C  CFDD F0E0          	movff	postdec2,??_C_DOOR_LockAll+7
  1602  001410  C0DF  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1603  001414  C0E0  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1604  001418  51DE               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1605  00141A  1ADF               	xorwf	indf2,f,c
  1606                           
  1607                           ; BSR set to: 0
  1608  00141C  2BE1               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1609  00141E                     l28:
  1610                           
  1611                           ; BSR set to: 0
  1612                           
  1613                           ; BSR set to: 0
  1614  00141E  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1615  001420  6FD9               	movwf	??_C_DOOR_LockAll& (0+255),b
  1616  001422  6BDA               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1617  001424  5037               	movf	_door_cnt,w,c
  1618  001426  5DD9               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1619  001428  51DA               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1620  00142A  0A80               	xorlw	128
  1621  00142C  6FDB               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1622  00142E  5038               	movf	_door_cnt+1,w,c
  1623  001430  0A80               	xorlw	128
  1624  001432  59DB               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1625  001434  B0D8               	btfsc	status,0,c
  1626  001436  0012               	return	
  1627  001438  D7AB               	goto	l29
  1628  00143A                     __end_of_C_DOOR_LockAll:
  1629                           	opt stack 0
  1630                           tblptru	equ	0xFF8
  1631                           tblptrh	equ	0xFF7
  1632                           tblptrl	equ	0xFF6
  1633                           tablat	equ	0xFF5
  1634                           prodh	equ	0xFF4
  1635                           prodl	equ	0xFF3
  1636                           postinc0	equ	0xFEE
  1637                           plusw0	equ	0xFEB
  1638                           wreg	equ	0xFE8
  1639                           postdec1	equ	0xFE5
  1640                           fsr1l	equ	0xFE1
  1641                           indf2	equ	0xFDF
  1642                           postinc2	equ	0xFDE
  1643                           postdec2	equ	0xFDD
  1644                           plusw2	equ	0xFDB
  1645                           fsr2h	equ	0xFDA
  1646                           fsr2l	equ	0xFD9
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _C_DOOR_Init *****************
  1650 ;; Defined at:
  1651 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  cnt             1    wreg     unsigned char 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  cnt             1   24[BANK0 ] unsigned char 
  1656 ;;  d               1   25[BANK0 ] unsigned char 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1666 ;;      Params:         0       0       0       0       0       0       0       0       0
  1667 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1668 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1669 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1670 ;;Total ram usage:        5 bytes
  1671 ;; Hardware stack levels used:    1
  1672 ;; Hardware stack levels required when called:    6
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_initDoors
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text5
  1681  000DBE                     __ptext5:
  1682                           	opt stack 0
  1683  000DBE                     _C_DOOR_Init:
  1684                           	opt stack 23
  1685                           
  1686                           ; BSR set to: 0
  1687                           ;incstack = 0
  1688                           ;C_DOOR_Init@cnt stored from wreg
  1689  000DBE  0100               	movlb	0	; () banked
  1690  000DC0  6FDC               	movwf	C_DOOR_Init@cnt& (0+255),b
  1691                           
  1692                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1693  000DC2  C0DC  F037         	movff	C_DOOR_Init@cnt,_door_cnt
  1694  000DC6  6A38               	clrf	_door_cnt+1,c
  1695                           
  1696                           ;DOOR_Controller.c: 52: uint8_t d;
  1697                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1698  000DC8  0E00               	movlw	0
  1699  000DCA  0100               	movlb	0	; () banked
  1700  000DCC  6FDD               	movwf	C_DOOR_Init@d& (0+255),b
  1701  000DCE  D092               	goto	l22
  1702  000DD0                     
  1703                           ; BSR set to: 0
  1704                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1705                           
  1706                           ; BSR set to: 0
  1707  000DD0  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1708  000DD2  0D0A               	mullw	10
  1709  000DD4  0E60               	movlw	low _doors
  1710  000DD6  24F3               	addwf	prodl,w,c
  1711  000DD8  6ED9               	movwf	fsr2l,c
  1712  000DDA  0E00               	movlw	high _doors
  1713  000DDC  20F4               	addwfc	prodh,w,c
  1714  000DDE  6EDA               	movwf	fsr2h,c
  1715  000DE0  C0DD  FFDF         	movff	C_DOOR_Init@d,indf2
  1716                           
  1717                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1718  000DE4  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1719  000DE6  0D0A               	mullw	10
  1720  000DE8  0E01               	movlw	1
  1721  000DEA  26F3               	addwf	prodl,f,c
  1722  000DEC  0E00               	movlw	0
  1723  000DEE  22F4               	addwfc	prodh,f,c
  1724  000DF0  0E60               	movlw	low _doors
  1725  000DF2  24F3               	addwf	prodl,w,c
  1726  000DF4  6ED9               	movwf	fsr2l,c
  1727  000DF6  0E00               	movlw	high _doors
  1728  000DF8  20F4               	addwfc	prodh,w,c
  1729  000DFA  6EDA               	movwf	fsr2h,c
  1730  000DFC  0E01               	movlw	1
  1731  000DFE  6EDF               	movwf	indf2,c
  1732                           
  1733                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1734  000E00  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1735  000E02  0D0A               	mullw	10
  1736  000E04  0E02               	movlw	2
  1737  000E06  26F3               	addwf	prodl,f,c
  1738  000E08  0E00               	movlw	0
  1739  000E0A  22F4               	addwfc	prodh,f,c
  1740  000E0C  0E60               	movlw	low _doors
  1741  000E0E  24F3               	addwf	prodl,w,c
  1742  000E10  6ED9               	movwf	fsr2l,c
  1743  000E12  0E00               	movlw	high _doors
  1744  000E14  20F4               	addwfc	prodh,w,c
  1745  000E16  6EDA               	movwf	fsr2h,c
  1746  000E18  0E81               	movlw	129
  1747  000E1A  6EDE               	movwf	postinc2,c
  1748  000E1C  0E0F               	movlw	15
  1749  000E1E  6EDD               	movwf	postdec2,c
  1750                           
  1751                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1752  000E20  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1753  000E22  0D0A               	mullw	10
  1754  000E24  0E04               	movlw	4
  1755  000E26  26F3               	addwf	prodl,f,c
  1756  000E28  0E00               	movlw	0
  1757  000E2A  22F4               	addwfc	prodh,f,c
  1758  000E2C  0E60               	movlw	low _doors
  1759  000E2E  24F3               	addwf	prodl,w,c
  1760  000E30  6ED9               	movwf	fsr2l,c
  1761  000E32  0E00               	movlw	high _doors
  1762  000E34  20F4               	addwfc	prodh,w,c
  1763  000E36  6EDA               	movwf	fsr2h,c
  1764  000E38  C0DD  FFDF         	movff	C_DOOR_Init@d,indf2
  1765                           
  1766                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1767  000E3C  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1768  000E3E  0D0A               	mullw	10
  1769  000E40  0E06               	movlw	6
  1770  000E42  26F3               	addwf	prodl,f,c
  1771  000E44  0E00               	movlw	0
  1772  000E46  22F4               	addwfc	prodh,f,c
  1773  000E48  0E60               	movlw	low _doors
  1774  000E4A  24F3               	addwf	prodl,w,c
  1775  000E4C  6ED9               	movwf	fsr2l,c
  1776  000E4E  0E00               	movlw	high _doors
  1777  000E50  20F4               	addwfc	prodh,w,c
  1778  000E52  6EDA               	movwf	fsr2h,c
  1779  000E54  0E00               	movlw	0
  1780  000E56  6EDF               	movwf	indf2,c
  1781                           
  1782                           ;DOOR_Controller.c: 61: doors[d].was_open = 1;
  1783  000E58  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1784  000E5A  0D0A               	mullw	10
  1785  000E5C  0E05               	movlw	5
  1786  000E5E  26F3               	addwf	prodl,f,c
  1787  000E60  0E00               	movlw	0
  1788  000E62  22F4               	addwfc	prodh,f,c
  1789  000E64  0E60               	movlw	low _doors
  1790  000E66  24F3               	addwf	prodl,w,c
  1791  000E68  6ED9               	movwf	fsr2l,c
  1792  000E6A  0E00               	movlw	high _doors
  1793  000E6C  20F4               	addwfc	prodh,w,c
  1794  000E6E  6EDA               	movwf	fsr2h,c
  1795  000E70  0E01               	movlw	1
  1796  000E72  6EDF               	movwf	indf2,c
  1797                           
  1798                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1799  000E74  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1800  000E76  0D0A               	mullw	10
  1801  000E78  0E07               	movlw	7
  1802  000E7A  26F3               	addwf	prodl,f,c
  1803  000E7C  0E00               	movlw	0
  1804  000E7E  22F4               	addwfc	prodh,f,c
  1805  000E80  0E60               	movlw	low _doors
  1806  000E82  24F3               	addwf	prodl,w,c
  1807  000E84  6ED9               	movwf	fsr2l,c
  1808  000E86  0E00               	movlw	high _doors
  1809  000E88  20F4               	addwfc	prodh,w,c
  1810  000E8A  6EDA               	movwf	fsr2h,c
  1811  000E8C  0E80               	movlw	128
  1812  000E8E  6EDE               	movwf	postinc2,c
  1813  000E90  0E0F               	movlw	15
  1814  000E92  6EDD               	movwf	postdec2,c
  1815                           
  1816                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1817  000E94  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1818  000E96  0D0A               	mullw	10
  1819  000E98  0E09               	movlw	9
  1820  000E9A  26F3               	addwf	prodl,f,c
  1821  000E9C  0E00               	movlw	0
  1822  000E9E  22F4               	addwfc	prodh,f,c
  1823  000EA0  0E60               	movlw	low _doors
  1824  000EA2  24F3               	addwf	prodl,w,c
  1825  000EA4  6ED9               	movwf	fsr2l,c
  1826  000EA6  0E00               	movlw	high _doors
  1827  000EA8  20F4               	addwfc	prodh,w,c
  1828  000EAA  6EDA               	movwf	fsr2h,c
  1829  000EAC  29DD               	incf	C_DOOR_Init@d& (0+255),w,b
  1830  000EAE  6EDF               	movwf	indf2,c
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1834  000EB0  C0DD  F0D9         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1835  000EB4  0E01               	movlw	1
  1836  000EB6  6FDA               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1837  000EB8  2BD9               	incf	??_C_DOOR_Init& (0+255),f,b
  1838  000EBA  D002               	goto	u1954
  1839  000EBC                     u1955:
  1840  000EBC  90D8               	bcf	status,0,c
  1841  000EBE  37DA               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1842  000EC0                     u1954:
  1843  000EC0  2FD9               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1844  000EC2  D7FC               	goto	u1955
  1845  000EC4  0100               	movlb	0	; () banked
  1846  000EC6  51DA               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1847  000EC8  1493               	andwf	3987,w,c	;volatile
  1848  000ECA  1A93               	xorwf	3987,f,c	;volatile
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1852  000ECC  5092               	movf	3986,w,c	;volatile
  1853  000ECE  0AFF               	xorlw	255
  1854  000ED0  6FD9               	movwf	??_C_DOOR_Init& (0+255),b
  1855  000ED2  C0DD  F0DA         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1856  000ED6  0E01               	movlw	1
  1857  000ED8  27DA               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1858  000EDA  0E01               	movlw	1
  1859  000EDC  6FDB               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1860  000EDE  2BDA               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1861  000EE0  D002               	goto	u1964
  1862  000EE2                     u1965:
  1863  000EE2  90D8               	bcf	status,0,c
  1864  000EE4  37DB               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1865  000EE6                     u1964:
  1866  000EE6  2FDA               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1867  000EE8  D7FC               	goto	u1965
  1868  000EEA  0100               	movlb	0	; () banked
  1869  000EEC  51DB               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1870  000EEE  15D9               	andwf	??_C_DOOR_Init& (0+255),w,b
  1871  000EF0  1A92               	xorwf	3986,f,c	;volatile
  1872                           
  1873                           ; BSR set to: 0
  1874  000EF2  2BDD               	incf	C_DOOR_Init@d& (0+255),f,b
  1875  000EF4                     l22:
  1876                           
  1877                           ; BSR set to: 0
  1878                           
  1879                           ; BSR set to: 0
  1880  000EF4  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1881  000EF6  6FD9               	movwf	??_C_DOOR_Init& (0+255),b
  1882  000EF8  6BDA               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1883  000EFA  5037               	movf	_door_cnt,w,c
  1884  000EFC  5DD9               	subwf	??_C_DOOR_Init& (0+255),w,b
  1885  000EFE  51DA               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1886  000F00  0A80               	xorlw	128
  1887  000F02  6FDB               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1888  000F04  5038               	movf	_door_cnt+1,w,c
  1889  000F06  0A80               	xorlw	128
  1890  000F08  59DB               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1891  000F0A  B0D8               	btfsc	status,0,c
  1892  000F0C  0012               	return	
  1893  000F0E  D760               	goto	l23
  1894  000F10                     __end_of_C_DOOR_Init:
  1895                           	opt stack 0
  1896                           tblptru	equ	0xFF8
  1897                           tblptrh	equ	0xFF7
  1898                           tblptrl	equ	0xFF6
  1899                           tablat	equ	0xFF5
  1900                           prodh	equ	0xFF4
  1901                           prodl	equ	0xFF3
  1902                           postinc0	equ	0xFEE
  1903                           plusw0	equ	0xFEB
  1904                           wreg	equ	0xFE8
  1905                           postdec1	equ	0xFE5
  1906                           fsr1l	equ	0xFE1
  1907                           indf2	equ	0xFDF
  1908                           postinc2	equ	0xFDE
  1909                           postdec2	equ	0xFDD
  1910                           plusw2	equ	0xFDB
  1911                           fsr2h	equ	0xFDA
  1912                           fsr2l	equ	0xFD9
  1913                           status	equ	0xFD8
  1914                           
  1915 ;; *************** function _D_UART_Read *****************
  1916 ;; Defined at:
  1917 ;;		line 220 in file "Drivers/UART_Driver.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;		None
  1920 ;; Auto vars:     Size  Location     Type
  1921 ;;		None
  1922 ;; Return value:  Size  Location     Type
  1923 ;;                  6   21[BANK0 ] struct .
  1924 ;; Registers used:
  1925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1926 ;; Tracked objects:
  1927 ;;		On entry : 0/0
  1928 ;;		On exit  : 0/0
  1929 ;;		Unchanged: 0/0
  1930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1931 ;;      Params:         0       6       0       0       0       0       0       0       0
  1932 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1933 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1934 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1935 ;;Total ram usage:        6 bytes
  1936 ;; Hardware stack levels used:    1
  1937 ;; Hardware stack levels required when called:    6
  1938 ;; This function calls:
  1939 ;;		Nothing
  1940 ;; This function is called by:
  1941 ;;		_main
  1942 ;; This function uses a non-reentrant model
  1943 ;;
  1944                           
  1945                           	psect	text6
  1946  00180E                     __ptext6:
  1947                           	opt stack 0
  1948  00180E                     _D_UART_Read:
  1949                           	opt stack 24
  1950                           
  1951                           ;UART_Driver.c: 221: readData.sender = readBuffer.sender;
  1952                           
  1953                           ; BSR set to: 0
  1954                           ;incstack = 0
  1955  00180E  0E0B               	movlw	low (_readBuffer+11)
  1956  001810  6E2E               	movwf	_readData,c
  1957  001812  0E01               	movlw	high (_readBuffer+11)
  1958  001814  6E2F               	movwf	_readData+1,c
  1959                           
  1960                           ;UART_Driver.c: 222: readData.command = readBuffer.command;
  1961  001816  0E3E               	movlw	low (_readBuffer+62)
  1962  001818  6E30               	movwf	_readData+2,c
  1963  00181A  0E01               	movlw	high (_readBuffer+62)
  1964  00181C  6E31               	movwf	_readData+3,c
  1965                           
  1966                           ;UART_Driver.c: 223: readData.message = readBuffer.message;
  1967  00181E  0E71               	movlw	low (_readBuffer+113)
  1968  001820  6E32               	movwf	_readData+4,c
  1969  001822  0E01               	movlw	high (_readBuffer+113)
  1970  001824  6E33               	movwf	_readData+5,c
  1971                           
  1972                           ;UART_Driver.c: 224: return readData;
  1973  001826  EE20  F02E         	lfsr	2,_readData
  1974  00182A  EE00  F0D9         	lfsr	0,?_D_UART_Read
  1975  00182E  0E05               	movlw	5
  1976  001830                     u2291:
  1977  001830  CFDB FFEB          	movff	plusw2,plusw0
  1978  001834  06E8               	decf	wreg,f,c
  1979  001836  E2FC               	bc	u2291
  1980  001838  0012               	return	
  1981  00183A                     __end_of_D_UART_Read:
  1982                           	opt stack 0
  1983                           tblptru	equ	0xFF8
  1984                           tblptrh	equ	0xFF7
  1985                           tblptrl	equ	0xFF6
  1986                           tablat	equ	0xFF5
  1987                           prodh	equ	0xFF4
  1988                           prodl	equ	0xFF3
  1989                           postinc0	equ	0xFEE
  1990                           plusw0	equ	0xFEB
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1l	equ	0xFE1
  1994                           indf2	equ	0xFDF
  1995                           postinc2	equ	0xFDE
  1996                           postdec2	equ	0xFDD
  1997                           plusw2	equ	0xFDB
  1998                           fsr2h	equ	0xFDA
  1999                           fsr2l	equ	0xFD9
  2000                           status	equ	0xFD8
  2001                           
  2002 ;; *************** function _D_UART_Init *****************
  2003 ;; Defined at:
  2004 ;;		line 166 in file "Drivers/UART_Driver.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  name            2   34[BANK0 ] PTR const unsigned char 
  2007 ;;		 -> STR_8(2), 
  2008 ;;  baud            2   36[BANK0 ] unsigned int 
  2009 ;;  interrupts      1   38[BANK0 ] unsigned char 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      void 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2021 ;;      Params:         0       5       0       0       0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2024 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2025 ;;Total ram usage:        5 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    7
  2028 ;; This function calls:
  2029 ;;		_D_UART_Enable
  2030 ;;		___lldiv
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text7
  2037  00155E                     __ptext7:
  2038                           	opt stack 0
  2039  00155E                     _D_UART_Init:
  2040                           	opt stack 23
  2041                           
  2042                           ;UART_Driver.c: 168: deviceName = name;
  2043                           
  2044                           ;incstack = 0
  2045  00155E  C0E6  F034         	movff	D_UART_Init@name,_deviceName
  2046  001562  C0E7  F035         	movff	D_UART_Init@name+1,_deviceName+1
  2047  001566  5034               	movf	_deviceName,w,c
  2048  001568  1035               	iorwf	_deviceName+1,w,c
  2049  00156A  A4D8               	btfss	status,2,c
  2050  00156C  0E00               	movlw	low (__mediumconst shr (0+16))
  2051  00156E  6E36               	movwf	_deviceName+2,c
  2052                           
  2053                           ;UART_Driver.c: 169: readReady = 0;
  2054  001570  0E00               	movlw	0
  2055  001572  6E40               	movwf	_readReady,c
  2056                           
  2057                           ;UART_Driver.c: 172: D_UART_Enable(0);
  2058  001574  0E00               	movlw	0
  2059  001576  EC31  F00C         	call	_D_UART_Enable
  2060                           
  2061                           ;UART_Driver.c: 175: RCSTAbits.FERR = 0;
  2062  00157A  94AB               	bcf	4011,2,c	;volatile
  2063                           
  2064                           ;UART_Driver.c: 176: RCSTAbits.OERR = 0;
  2065  00157C  92AB               	bcf	4011,1,c	;volatile
  2066                           
  2067                           ;UART_Driver.c: 177: RCREG = 0x00;
  2068  00157E  0E00               	movlw	0
  2069  001580  6EAE               	movwf	4014,c	;volatile
  2070                           
  2071                           ;UART_Driver.c: 180: TXSTAbits.TX9 = 0;
  2072  001582  9CAC               	bcf	4012,6,c	;volatile
  2073                           
  2074                           ;UART_Driver.c: 181: TXSTAbits.SYNC = 0;
  2075  001584  98AC               	bcf	4012,4,c	;volatile
  2076                           
  2077                           ;UART_Driver.c: 182: TXSTAbits.BRGH = 0;
  2078  001586  94AC               	bcf	4012,2,c	;volatile
  2079                           
  2080                           ;UART_Driver.c: 185: RCSTAbits.RX9 = 0;
  2081  001588  9CAB               	bcf	4011,6,c	;volatile
  2082                           
  2083                           ;UART_Driver.c: 188: BAUDCONbits.RXDTP = 0;
  2084  00158A  9AB8               	bcf	4024,5,c	;volatile
  2085                           
  2086                           ;UART_Driver.c: 189: BAUDCONbits.TXCKP = 0;
  2087  00158C  98B8               	bcf	4024,4,c	;volatile
  2088                           
  2089                           ;UART_Driver.c: 190: BAUDCONbits.BRG16 = 0;
  2090  00158E  96B8               	bcf	4024,3,c	;volatile
  2091                           
  2092                           ;UART_Driver.c: 193: SPBRG = ((16000000UL/baud)/64)-1;
  2093  001590  0E00               	movlw	0
  2094  001592  0100               	movlb	0	; () banked
  2095  001594  6FD9               	movwf	___lldiv@dividend& (0+255),b
  2096  001596  0E24               	movlw	36
  2097  001598  6FDA               	movwf	(___lldiv@dividend+1)& (0+255),b
  2098  00159A  0EF4               	movlw	244
  2099  00159C  6FDB               	movwf	(___lldiv@dividend+2)& (0+255),b
  2100  00159E  0E00               	movlw	0
  2101  0015A0  6FDC               	movwf	(___lldiv@dividend+3)& (0+255),b
  2102  0015A2  C0E8  F0DD         	movff	D_UART_Init@baud,___lldiv@divisor
  2103  0015A6  C0E9  F0DE         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  2104  0015AA  6BDF               	clrf	(___lldiv@divisor+2)& (0+255),b
  2105  0015AC  6BE0               	clrf	(___lldiv@divisor+3)& (0+255),b
  2106  0015AE  EC6D  F00A         	call	___lldiv	;wreg free
  2107  0015B2  0E07               	movlw	7
  2108  0015B4  D006               	goto	u2270
  2109  0015B6                     u2275:
  2110  0015B6  0100               	movlb	0	; () banked
  2111  0015B8  90D8               	bcf	status,0,c
  2112  0015BA  33DC               	rrcf	(?___lldiv+3)& (0+255),f,b
  2113  0015BC  33DB               	rrcf	(?___lldiv+2)& (0+255),f,b
  2114  0015BE  33DA               	rrcf	(?___lldiv+1)& (0+255),f,b
  2115  0015C0  33D9               	rrcf	?___lldiv& (0+255),f,b
  2116  0015C2                     u2270:
  2117  0015C2  2EE8               	decfsz	wreg,f,c
  2118  0015C4  D7F8               	goto	u2275
  2119  0015C6  05D9               	decf	?___lldiv& (0+255),w,b
  2120  0015C8  6EAF               	movwf	4015,c	;volatile
  2121                           
  2122                           ;UART_Driver.c: 196: if (interrupts) {
  2123  0015CA  51EA               	movf	D_UART_Init@interrupts& (0+255),w,b
  2124  0015CC  B4D8               	btfsc	status,2,c
  2125  0015CE  0012               	return	
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;UART_Driver.c: 197: RCONbits.IPEN = 1;
  2129  0015D0  8ED0               	bsf	4048,7,c	;volatile
  2130                           
  2131                           ;UART_Driver.c: 198: INTCONbits.GIEH = 1;
  2132  0015D2  8EF2               	bsf	intcon,7,c	;volatile
  2133                           
  2134                           ;UART_Driver.c: 199: INTCONbits.GIEL = 1;
  2135  0015D4  8CF2               	bsf	intcon,6,c	;volatile
  2136                           
  2137                           ;UART_Driver.c: 200: PIR1bits.RCIF = 0;
  2138  0015D6  9A9E               	bcf	3998,5,c	;volatile
  2139                           
  2140                           ;UART_Driver.c: 201: IPR1bits.RCIP = 1;
  2141  0015D8  8A9F               	bsf	3999,5,c	;volatile
  2142                           
  2143                           ;UART_Driver.c: 202: PIE1bits.RCIE = 1;
  2144  0015DA  8A9D               	bsf	3997,5,c	;volatile
  2145  0015DC  0012               	return	
  2146  0015DE                     __end_of_D_UART_Init:
  2147                           	opt stack 0
  2148                           tblptru	equ	0xFF8
  2149                           tblptrh	equ	0xFF7
  2150                           tblptrl	equ	0xFF6
  2151                           tablat	equ	0xFF5
  2152                           prodh	equ	0xFF4
  2153                           prodl	equ	0xFF3
  2154                           intcon	equ	0xFF2
  2155                           postinc0	equ	0xFEE
  2156                           plusw0	equ	0xFEB
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1l	equ	0xFE1
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           plusw2	equ	0xFDB
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function ___lldiv *****************
  2169 ;; Defined at:
  2170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  dividend        4   21[BANK0 ] unsigned long 
  2173 ;;  divisor         4   25[BANK0 ] unsigned long 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  quotient        4   29[BANK0 ] unsigned long 
  2176 ;;  counter         1   33[BANK0 ] unsigned char 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  4   21[BANK0 ] unsigned long 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2186 ;;      Params:         0       8       0       0       0       0       0       0       0
  2187 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2188 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2189 ;;      Totals:         0      13       0       0       0       0       0       0       0
  2190 ;;Total ram usage:       13 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    6
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_D_UART_Init
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text8
  2201  0014DA                     __ptext8:
  2202                           	opt stack 0
  2203  0014DA                     ___lldiv:
  2204                           	opt stack 23
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;incstack = 0
  2208  0014DA  0E00               	movlw	0
  2209  0014DC  0100               	movlb	0	; () banked
  2210  0014DE  6FE1               	movwf	___lldiv@quotient& (0+255),b
  2211  0014E0  0E00               	movlw	0
  2212  0014E2  6FE2               	movwf	(___lldiv@quotient+1)& (0+255),b
  2213  0014E4  0E00               	movlw	0
  2214  0014E6  6FE3               	movwf	(___lldiv@quotient+2)& (0+255),b
  2215  0014E8  0E00               	movlw	0
  2216  0014EA  6FE4               	movwf	(___lldiv@quotient+3)& (0+255),b
  2217                           
  2218                           ; BSR set to: 0
  2219  0014EC  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2220  0014EE  11DE               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2221  0014F0  11DF               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2222  0014F2  11E0               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2223  0014F4  B4D8               	btfsc	status,2,c
  2224  0014F6  D02A               	goto	l743
  2225                           
  2226                           ; BSR set to: 0
  2227  0014F8  0E01               	movlw	1
  2228  0014FA  6FE5               	movwf	___lldiv@counter& (0+255),b
  2229  0014FC  D006               	goto	l738
  2230  0014FE                     
  2231                           ; BSR set to: 0
  2232                           
  2233                           ; BSR set to: 0
  2234  0014FE  90D8               	bcf	status,0,c
  2235  001500  37DD               	rlcf	___lldiv@divisor& (0+255),f,b
  2236  001502  37DE               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2237  001504  37DF               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2238  001506  37E0               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2239  001508  2BE5               	incf	___lldiv@counter& (0+255),f,b
  2240  00150A                     l738:
  2241                           
  2242                           ; BSR set to: 0
  2243                           
  2244                           ; BSR set to: 0
  2245  00150A  AFE0               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2246  00150C  D7F8               	goto	l739
  2247  00150E                     u2060:
  2248                           
  2249                           ; BSR set to: 0
  2250                           
  2251                           ; BSR set to: 0
  2252                           
  2253                           ; BSR set to: 0
  2254  00150E  90D8               	bcf	status,0,c
  2255  001510  37E1               	rlcf	___lldiv@quotient& (0+255),f,b
  2256  001512  37E2               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2257  001514  37E3               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2258  001516  37E4               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2259                           
  2260                           ; BSR set to: 0
  2261  001518  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2262  00151A  5DD9               	subwf	___lldiv@dividend& (0+255),w,b
  2263  00151C  51DE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2264  00151E  59DA               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2265  001520  51DF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2266  001522  59DB               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2267  001524  51E0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2268  001526  59DC               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2269  001528  A0D8               	btfss	status,0,c
  2270  00152A  D009               	goto	l742
  2271                           
  2272                           ; BSR set to: 0
  2273  00152C  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2274  00152E  5FD9               	subwf	___lldiv@dividend& (0+255),f,b
  2275  001530  51DE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2276  001532  5BDA               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2277  001534  51DF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2278  001536  5BDB               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2279  001538  51E0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2280  00153A  5BDC               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2281                           
  2282                           ; BSR set to: 0
  2283  00153C  81E1               	bsf	___lldiv@quotient& (0+255),0,b
  2284  00153E                     l742:
  2285                           
  2286                           ; BSR set to: 0
  2287                           
  2288                           ; BSR set to: 0
  2289  00153E  90D8               	bcf	status,0,c
  2290  001540  33E0               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2291  001542  33DF               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2292  001544  33DE               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2293  001546  33DD               	rrcf	___lldiv@divisor& (0+255),f,b
  2294                           
  2295                           ; BSR set to: 0
  2296  001548  2FE5               	decfsz	___lldiv@counter& (0+255),f,b
  2297  00154A  D7E1               	goto	u2060
  2298  00154C                     l743:
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ; BSR set to: 0
  2303  00154C  C0E1  F0D9         	movff	___lldiv@quotient,?___lldiv
  2304  001550  C0E2  F0DA         	movff	___lldiv@quotient+1,?___lldiv+1
  2305  001554  C0E3  F0DB         	movff	___lldiv@quotient+2,?___lldiv+2
  2306  001558  C0E4  F0DC         	movff	___lldiv@quotient+3,?___lldiv+3
  2307                           
  2308                           ; BSR set to: 0
  2309  00155C  0012               	return		;funcret
  2310  00155E                     __end_of___lldiv:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           prodh	equ	0xFF4
  2317                           prodl	equ	0xFF3
  2318                           intcon	equ	0xFF2
  2319                           postinc0	equ	0xFEE
  2320                           plusw0	equ	0xFEB
  2321                           wreg	equ	0xFE8
  2322                           postdec1	equ	0xFE5
  2323                           fsr1l	equ	0xFE1
  2324                           indf2	equ	0xFDF
  2325                           postinc2	equ	0xFDE
  2326                           postdec2	equ	0xFDD
  2327                           plusw2	equ	0xFDB
  2328                           fsr2h	equ	0xFDA
  2329                           fsr2l	equ	0xFD9
  2330                           status	equ	0xFD8
  2331                           
  2332 ;; *************** function _D_UART_Enable *****************
  2333 ;; Defined at:
  2334 ;;		line 227 in file "Drivers/UART_Driver.c"
  2335 ;; Parameters:    Size  Location     Type
  2336 ;;  enable          1    wreg     unsigned char 
  2337 ;; Auto vars:     Size  Location     Type
  2338 ;;  enable          1   21[BANK0 ] unsigned char 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, status,2
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2348 ;;      Params:         0       0       0       0       0       0       0       0       0
  2349 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2351 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2352 ;;Total ram usage:        1 bytes
  2353 ;; Hardware stack levels used:    1
  2354 ;; Hardware stack levels required when called:    6
  2355 ;; This function calls:
  2356 ;;		Nothing
  2357 ;; This function is called by:
  2358 ;;		_D_UART_Init
  2359 ;;		_main
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text9
  2364  001862                     __ptext9:
  2365                           	opt stack 0
  2366  001862                     _D_UART_Enable:
  2367                           	opt stack 23
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;incstack = 0
  2371                           ;D_UART_Enable@enable stored from wreg
  2372  001862  0100               	movlb	0	; () banked
  2373  001864  6FD9               	movwf	D_UART_Enable@enable& (0+255),b
  2374                           
  2375                           ;UART_Driver.c: 228: if(enable) {
  2376  001866  0100               	movlb	0	; () banked
  2377  001868  51D9               	movf	D_UART_Enable@enable& (0+255),w,b
  2378  00186A  B4D8               	btfsc	status,2,c
  2379  00186C  D006               	goto	l161
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;UART_Driver.c: 229: TRISCbits.TRISC7 = 0;
  2383  00186E  9E94               	bcf	3988,7,c	;volatile
  2384                           
  2385                           ;UART_Driver.c: 230: TRISCbits.TRISC6 = 1;
  2386  001870  8C94               	bsf	3988,6,c	;volatile
  2387                           
  2388                           ;UART_Driver.c: 231: TXSTAbits.TXEN = 1;
  2389  001872  8AAC               	bsf	4012,5,c	;volatile
  2390                           
  2391                           ;UART_Driver.c: 232: RCSTAbits.CREN = 1;
  2392  001874  88AB               	bsf	4011,4,c	;volatile
  2393                           
  2394                           ;UART_Driver.c: 233: RCSTAbits.SPEN = 1;
  2395  001876  8EAB               	bsf	4011,7,c	;volatile
  2396                           
  2397                           ;UART_Driver.c: 234: } else {
  2398  001878  0012               	return	
  2399  00187A                     l161:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;UART_Driver.c: 235: TRISCbits.TRISC7 = 0;
  2403  00187A  9E94               	bcf	3988,7,c	;volatile
  2404                           
  2405                           ;UART_Driver.c: 236: TRISCbits.TRISC6 = 0;
  2406  00187C  9C94               	bcf	3988,6,c	;volatile
  2407                           
  2408                           ;UART_Driver.c: 237: TXSTAbits.TXEN = 0;
  2409  00187E  9AAC               	bcf	4012,5,c	;volatile
  2410                           
  2411                           ;UART_Driver.c: 238: RCSTAbits.CREN = 0;
  2412  001880  98AB               	bcf	4011,4,c	;volatile
  2413                           
  2414                           ;UART_Driver.c: 239: RCSTAbits.SPEN = 0;
  2415  001882  9EAB               	bcf	4011,7,c	;volatile
  2416  001884  0012               	return	
  2417  001886                     __end_of_D_UART_Enable:
  2418                           	opt stack 0
  2419                           tblptru	equ	0xFF8
  2420                           tblptrh	equ	0xFF7
  2421                           tblptrl	equ	0xFF6
  2422                           tablat	equ	0xFF5
  2423                           prodh	equ	0xFF4
  2424                           prodl	equ	0xFF3
  2425                           intcon	equ	0xFF2
  2426                           postinc0	equ	0xFEE
  2427                           plusw0	equ	0xFEB
  2428                           wreg	equ	0xFE8
  2429                           postdec1	equ	0xFE5
  2430                           fsr1l	equ	0xFE1
  2431                           indf2	equ	0xFDF
  2432                           postinc2	equ	0xFDE
  2433                           postdec2	equ	0xFDD
  2434                           plusw2	equ	0xFDB
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _D_TMR1_Init *****************
  2440 ;; Defined at:
  2441 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;                  1    wreg      void 
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2455 ;;      Params:         0       0       0       0       0       0       0       0       0
  2456 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2458 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2459 ;;Total ram usage:        0 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    7
  2462 ;; This function calls:
  2463 ;;		_D_TMR1_Enable
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text10
  2470  0018EE                     __ptext10:
  2471                           	opt stack 0
  2472  0018EE                     _D_TMR1_Init:
  2473                           	opt stack 23
  2474                           
  2475                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  2476                           
  2477                           ; BSR set to: 0
  2478                           ;incstack = 0
  2479  0018EE  0E00               	movlw	0
  2480  0018F0  ECA5  F00C         	call	_D_TMR1_Enable
  2481                           
  2482                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  2483  0018F4  8ECD               	bsf	4045,7,c	;volatile
  2484                           
  2485                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  2486  0018F6  9CCD               	bcf	4045,6,c	;volatile
  2487                           
  2488                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  2489  0018F8  0ECF               	movlw	-49
  2490  0018FA  16CD               	andwf	4045,f,c	;volatile
  2491                           
  2492                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  2493  0018FC  96CD               	bcf	4045,3,c	;volatile
  2494                           
  2495                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  2496  0018FE  92CD               	bcf	4045,1,c	;volatile
  2497                           
  2498                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  2499  001900  8ED0               	bsf	4048,7,c	;volatile
  2500                           
  2501                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  2502  001902  8EF2               	bsf	intcon,7,c	;volatile
  2503                           
  2504                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  2505  001904  8CF2               	bsf	intcon,6,c	;volatile
  2506                           
  2507                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  2508  001906  909E               	bcf	3998,0,c	;volatile
  2509                           
  2510                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  2511  001908  909F               	bcf	3999,0,c	;volatile
  2512                           
  2513                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  2514  00190A  809D               	bsf	3997,0,c	;volatile
  2515  00190C  0012               	return		;funcret
  2516  00190E                     __end_of_D_TMR1_Init:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           prodh	equ	0xFF4
  2523                           prodl	equ	0xFF3
  2524                           intcon	equ	0xFF2
  2525                           postinc0	equ	0xFEE
  2526                           plusw0	equ	0xFEB
  2527                           wreg	equ	0xFE8
  2528                           postdec1	equ	0xFE5
  2529                           fsr1l	equ	0xFE1
  2530                           indf2	equ	0xFDF
  2531                           postinc2	equ	0xFDE
  2532                           postdec2	equ	0xFDD
  2533                           plusw2	equ	0xFDB
  2534                           fsr2h	equ	0xFDA
  2535                           fsr2l	equ	0xFD9
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _D_TMR1_Enable *****************
  2539 ;; Defined at:
  2540 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  enable          1    wreg     unsigned char 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  enable          1   21[BANK0 ] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, status,2
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2554 ;;      Params:         0       0       0       0       0       0       0       0       0
  2555 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2557 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2558 ;;Total ram usage:        1 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    6
  2561 ;; This function calls:
  2562 ;;		Nothing
  2563 ;; This function is called by:
  2564 ;;		_D_TMR1_Init
  2565 ;;		_main
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569                           	psect	text11
  2570  00194A                     __ptext11:
  2571                           	opt stack 0
  2572  00194A                     _D_TMR1_Enable:
  2573                           	opt stack 23
  2574                           
  2575                           ;incstack = 0
  2576                           ;D_TMR1_Enable@enable stored from wreg
  2577  00194A  0100               	movlb	0	; () banked
  2578  00194C  6FD9               	movwf	D_TMR1_Enable@enable& (0+255),b
  2579                           
  2580                           ;TMR1_Driver.c: 53: if (enable) {
  2581  00194E  0100               	movlb	0	; () banked
  2582  001950  51D9               	movf	D_TMR1_Enable@enable& (0+255),w,b
  2583  001952  B4D8               	btfsc	status,2,c
  2584  001954  D002               	goto	l236
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  2588  001956  80CD               	bsf	4045,0,c	;volatile
  2589                           
  2590                           ;TMR1_Driver.c: 55: } else {
  2591  001958  0012               	return	
  2592  00195A                     l236:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  2596  00195A  90CD               	bcf	4045,0,c	;volatile
  2597  00195C  0012               	return	
  2598  00195E                     __end_of_D_TMR1_Enable:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           tblptrh	equ	0xFF7
  2602                           tblptrl	equ	0xFF6
  2603                           tablat	equ	0xFF5
  2604                           prodh	equ	0xFF4
  2605                           prodl	equ	0xFF3
  2606                           intcon	equ	0xFF2
  2607                           postinc0	equ	0xFEE
  2608                           plusw0	equ	0xFEB
  2609                           wreg	equ	0xFE8
  2610                           postdec1	equ	0xFE5
  2611                           fsr1l	equ	0xFE1
  2612                           indf2	equ	0xFDF
  2613                           postinc2	equ	0xFDE
  2614                           postdec2	equ	0xFDD
  2615                           plusw2	equ	0xFDB
  2616                           fsr2h	equ	0xFDA
  2617                           fsr2l	equ	0xFD9
  2618                           status	equ	0xFD8
  2619                           
  2620 ;; *************** function _D_TMR0_Init *****************
  2621 ;; Defined at:
  2622 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2623 ;; Parameters:    Size  Location     Type
  2624 ;;		None
  2625 ;; Auto vars:     Size  Location     Type
  2626 ;;		None
  2627 ;; Return value:  Size  Location     Type
  2628 ;;                  1    wreg      void 
  2629 ;; Registers used:
  2630 ;;		wreg, status,2, cstack
  2631 ;; Tracked objects:
  2632 ;;		On entry : 0/0
  2633 ;;		On exit  : 0/0
  2634 ;;		Unchanged: 0/0
  2635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2636 ;;      Params:         0       0       0       0       0       0       0       0       0
  2637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2639 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2640 ;;Total ram usage:        0 bytes
  2641 ;; Hardware stack levels used:    1
  2642 ;; Hardware stack levels required when called:    7
  2643 ;; This function calls:
  2644 ;;		_D_TMR0_Enable
  2645 ;; This function is called by:
  2646 ;;		_main
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text12
  2651  001886                     __ptext12:
  2652                           	opt stack 0
  2653  001886                     _D_TMR0_Init:
  2654                           	opt stack 23
  2655                           
  2656                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;incstack = 0
  2660  001886  0E00               	movlw	0
  2661  001888  ECAF  F00C         	call	_D_TMR0_Enable
  2662                           
  2663                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2664  00188C  9CD5               	bcf	4053,6,c	;volatile
  2665                           
  2666                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2667  00188E  9AD5               	bcf	4053,5,c	;volatile
  2668                           
  2669                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2670  001890  98D5               	bcf	4053,4,c	;volatile
  2671                           
  2672                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2673  001892  96D5               	bcf	4053,3,c	;volatile
  2674                           
  2675                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2676  001894  50D5               	movf	4053,w,c	;volatile
  2677  001896  0BF8               	andlw	-8
  2678  001898  0902               	iorlw	2
  2679  00189A  6ED5               	movwf	4053,c	;volatile
  2680                           
  2681                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2682  00189C  8ED0               	bsf	4048,7,c	;volatile
  2683                           
  2684                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2685  00189E  8EF2               	bsf	intcon,7,c	;volatile
  2686                           
  2687                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2688  0018A0  8CF2               	bsf	intcon,6,c	;volatile
  2689                           
  2690                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2691  0018A2  94F2               	bcf	intcon,2,c	;volatile
  2692                           
  2693                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  2694  0018A4  94F1               	bcf	intcon2,2,c	;volatile
  2695                           
  2696                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2697  0018A6  8AF2               	bsf	intcon,5,c	;volatile
  2698  0018A8  0012               	return		;funcret
  2699  0018AA                     __end_of_D_TMR0_Init:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           intcon	equ	0xFF2
  2708                           intcon2	equ	0xFF1
  2709                           postinc0	equ	0xFEE
  2710                           plusw0	equ	0xFEB
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           indf2	equ	0xFDF
  2715                           postinc2	equ	0xFDE
  2716                           postdec2	equ	0xFDD
  2717                           plusw2	equ	0xFDB
  2718                           fsr2h	equ	0xFDA
  2719                           fsr2l	equ	0xFD9
  2720                           status	equ	0xFD8
  2721                           
  2722 ;; *************** function _D_TMR0_Enable *****************
  2723 ;; Defined at:
  2724 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  enable          1    wreg     unsigned char 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;  enable          1   21[BANK0 ] unsigned char 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0
  2739 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2741 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2742 ;;Total ram usage:        1 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    6
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_D_TMR0_Init
  2749 ;;		_initDoors
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           	psect	text13
  2754  00195E                     __ptext13:
  2755                           	opt stack 0
  2756  00195E                     _D_TMR0_Enable:
  2757                           	opt stack 23
  2758                           
  2759                           ;incstack = 0
  2760                           ;D_TMR0_Enable@enable stored from wreg
  2761  00195E  0100               	movlb	0	; () banked
  2762  001960  6FD9               	movwf	D_TMR0_Enable@enable& (0+255),b
  2763                           
  2764                           ;TMR0_Driver.c: 54: if (enable) {
  2765  001962  0100               	movlb	0	; () banked
  2766  001964  51D9               	movf	D_TMR0_Enable@enable& (0+255),w,b
  2767  001966  B4D8               	btfsc	status,2,c
  2768  001968  D002               	goto	l195
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  2772  00196A  8ED5               	bsf	4053,7,c	;volatile
  2773                           
  2774                           ;TMR0_Driver.c: 56: } else {
  2775  00196C  0012               	return	
  2776  00196E                     l195:
  2777                           
  2778                           ; BSR set to: 0
  2779                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  2780  00196E  9ED5               	bcf	4053,7,c	;volatile
  2781  001970  0012               	return	
  2782  001972                     __end_of_D_TMR0_Enable:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           intcon	equ	0xFF2
  2791                           intcon2	equ	0xFF1
  2792                           postinc0	equ	0xFEE
  2793                           plusw0	equ	0xFEB
  2794                           wreg	equ	0xFE8
  2795                           postdec1	equ	0xFE5
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           plusw2	equ	0xFDB
  2801                           fsr2h	equ	0xFDA
  2802                           fsr2l	equ	0xFD9
  2803                           status	equ	0xFD8
  2804                           
  2805 ;; *************** function _D_PWM_SetPwm *****************
  2806 ;; Defined at:
  2807 ;;		line 44 in file "Drivers/PWM_Driver.c"
  2808 ;; Parameters:    Size  Location     Type
  2809 ;;  pwm             1    wreg     unsigned char 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  pwm             1   21[BANK0 ] unsigned char 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         0       0       0       0       0       0       0       0       0
  2822 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2824 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2825 ;;Total ram usage:        1 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    6
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text14
  2836  0017E0                     __ptext14:
  2837                           	opt stack 0
  2838  0017E0                     _D_PWM_SetPwm:
  2839                           	opt stack 24
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;incstack = 0
  2843                           ;D_PWM_SetPwm@pwm stored from wreg
  2844  0017E0  0100               	movlb	0	; () banked
  2845  0017E2  6FD9               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2846                           
  2847                           ;PWM_Driver.c: 45: if (pwm > 0) {
  2848  0017E4  0100               	movlb	0	; () banked
  2849  0017E6  51D9               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2850  0017E8  B4D8               	btfsc	status,2,c
  2851  0017EA  D00A               	goto	l213
  2852                           
  2853                           ; BSR set to: 0
  2854                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  2855  0017EC  B4CA               	btfsc	4042,2,c	;volatile
  2856  0017EE  D005               	goto	l214
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  2860  0017F0  50BD               	movf	4029,w,c	;volatile
  2861  0017F2  0BF0               	andlw	-16
  2862  0017F4  090C               	iorlw	12
  2863  0017F6  6EBD               	movwf	4029,c	;volatile
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  2867  0017F8  84CA               	bsf	4042,2,c	;volatile
  2868  0017FA                     l214:
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;PWM_Driver.c: 49: }
  2872                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  2873                           
  2874                           ; BSR set to: 0
  2875  0017FA  C0D9  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2876                           
  2877                           ;PWM_Driver.c: 51: } else {
  2878  0017FE  0012               	return	
  2879  001800                     l213:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  2883  001800  90BD               	bcf	4029,0,c	;volatile
  2884  001802  92BD               	bcf	4029,1,c	;volatile
  2885  001804  94BD               	bcf	4029,2,c	;volatile
  2886  001806  96BD               	bcf	4029,3,c	;volatile
  2887                           
  2888                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  2889  001808  94CA               	bcf	4042,2,c	;volatile
  2890                           
  2891                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  2892  00180A  9482               	bcf	3970,2,c	;volatile
  2893  00180C  0012               	return	
  2894  00180E                     __end_of_D_PWM_SetPwm:
  2895                           	opt stack 0
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           prodh	equ	0xFF4
  2901                           prodl	equ	0xFF3
  2902                           intcon	equ	0xFF2
  2903                           intcon2	equ	0xFF1
  2904                           postinc0	equ	0xFEE
  2905                           plusw0	equ	0xFEB
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           indf2	equ	0xFDF
  2910                           postinc2	equ	0xFDE
  2911                           postdec2	equ	0xFDD
  2912                           plusw2	equ	0xFDB
  2913                           fsr2h	equ	0xFDA
  2914                           fsr2l	equ	0xFD9
  2915                           status	equ	0xFD8
  2916                           
  2917 ;; *************** function _D_PWM_Init *****************
  2918 ;; Defined at:
  2919 ;;		line 31 in file "Drivers/PWM_Driver.c"
  2920 ;; Parameters:    Size  Location     Type
  2921 ;;		None
  2922 ;; Auto vars:     Size  Location     Type
  2923 ;;		None
  2924 ;; Return value:  Size  Location     Type
  2925 ;;                  1    wreg      void 
  2926 ;; Registers used:
  2927 ;;		wreg, status,2
  2928 ;; Tracked objects:
  2929 ;;		On entry : 0/0
  2930 ;;		On exit  : 0/0
  2931 ;;		Unchanged: 0/0
  2932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2933 ;;      Params:         0       0       0       0       0       0       0       0       0
  2934 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2935 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2936 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2937 ;;Total ram usage:        0 bytes
  2938 ;; Hardware stack levels used:    1
  2939 ;; Hardware stack levels required when called:    6
  2940 ;; This function calls:
  2941 ;;		Nothing
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           	psect	text15
  2948  00190E                     __ptext15:
  2949                           	opt stack 0
  2950  00190E                     _D_PWM_Init:
  2951                           	opt stack 24
  2952                           
  2953                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  2954                           
  2955                           ; BSR set to: 0
  2956                           ;incstack = 0
  2957  00190E  68CB               	setf	4043,c	;volatile
  2958                           
  2959                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  2960  001910  94CA               	bcf	4042,2,c	;volatile
  2961                           
  2962                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  2963  001912  50CA               	movf	4042,w,c	;volatile
  2964  001914  0BFC               	andlw	-4
  2965  001916  0901               	iorlw	1
  2966  001918  6ECA               	movwf	4042,c	;volatile
  2967                           
  2968                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  2969  00191A  96CA               	bcf	4042,3,c	;volatile
  2970  00191C  98CA               	bcf	4042,4,c	;volatile
  2971  00191E  9ACA               	bcf	4042,5,c	;volatile
  2972  001920  9CCA               	bcf	4042,6,c	;volatile
  2973                           
  2974                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  2975  001922  0E1F               	movlw	31
  2976  001924  6EBE               	movwf	4030,c	;volatile
  2977                           
  2978                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  2979  001926  0ECF               	movlw	-49
  2980  001928  16BD               	andwf	4029,f,c	;volatile
  2981  00192A  0012               	return		;funcret
  2982  00192C                     __end_of_D_PWM_Init:
  2983                           	opt stack 0
  2984                           tblptru	equ	0xFF8
  2985                           tblptrh	equ	0xFF7
  2986                           tblptrl	equ	0xFF6
  2987                           tablat	equ	0xFF5
  2988                           prodh	equ	0xFF4
  2989                           prodl	equ	0xFF3
  2990                           intcon	equ	0xFF2
  2991                           intcon2	equ	0xFF1
  2992                           postinc0	equ	0xFEE
  2993                           plusw0	equ	0xFEB
  2994                           wreg	equ	0xFE8
  2995                           postdec1	equ	0xFE5
  2996                           fsr1l	equ	0xFE1
  2997                           indf2	equ	0xFDF
  2998                           postinc2	equ	0xFDE
  2999                           postdec2	equ	0xFDD
  3000                           plusw2	equ	0xFDB
  3001                           fsr2h	equ	0xFDA
  3002                           fsr2l	equ	0xFD9
  3003                           status	equ	0xFD8
  3004                           
  3005 ;; *************** function _D_PORT_Init *****************
  3006 ;; Defined at:
  3007 ;;		line 32 in file "Drivers/PORT_Driver.c"
  3008 ;; Parameters:    Size  Location     Type
  3009 ;;		None
  3010 ;; Auto vars:     Size  Location     Type
  3011 ;;		None
  3012 ;; Return value:  Size  Location     Type
  3013 ;;                  1    wreg      void 
  3014 ;; Registers used:
  3015 ;;		wreg, status,2
  3016 ;; Tracked objects:
  3017 ;;		On entry : 0/0
  3018 ;;		On exit  : 0/0
  3019 ;;		Unchanged: 0/0
  3020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3021 ;;      Params:         0       0       0       0       0       0       0       0       0
  3022 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3023 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3024 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3025 ;;Total ram usage:        0 bytes
  3026 ;; Hardware stack levels used:    1
  3027 ;; Hardware stack levels required when called:    6
  3028 ;; This function calls:
  3029 ;;		Nothing
  3030 ;; This function is called by:
  3031 ;;		_main
  3032 ;; This function uses a non-reentrant model
  3033 ;;
  3034                           
  3035                           	psect	text16
  3036  00192C                     __ptext16:
  3037                           	opt stack 0
  3038  00192C                     _D_PORT_Init:
  3039                           	opt stack 24
  3040                           
  3041                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  3042                           
  3043                           ;incstack = 0
  3044  00192C  0E00               	movlw	0
  3045  00192E  6E92               	movwf	3986,c	;volatile
  3046  001930  0E00               	movlw	0
  3047  001932  6E80               	movwf	3968,c	;volatile
  3048                           
  3049                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  3050  001934  0E00               	movlw	0
  3051  001936  6E93               	movwf	3987,c	;volatile
  3052  001938  0E00               	movlw	0
  3053  00193A  6E81               	movwf	3969,c	;volatile
  3054                           
  3055                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  3056  00193C  0E00               	movlw	0
  3057  00193E  6E94               	movwf	3988,c	;volatile
  3058  001940  0E00               	movlw	0
  3059  001942  6E82               	movwf	3970,c	;volatile
  3060                           
  3061                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  3062  001944  0E0F               	movlw	15
  3063  001946  6EC1               	movwf	4033,c	;volatile
  3064  001948  0012               	return		;funcret
  3065  00194A                     __end_of_D_PORT_Init:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           intcon2	equ	0xFF1
  3075                           postinc0	equ	0xFEE
  3076                           plusw0	equ	0xFEB
  3077                           wreg	equ	0xFE8
  3078                           postdec1	equ	0xFE5
  3079                           fsr1l	equ	0xFE1
  3080                           indf2	equ	0xFDF
  3081                           postinc2	equ	0xFDE
  3082                           postdec2	equ	0xFDD
  3083                           plusw2	equ	0xFDB
  3084                           fsr2h	equ	0xFDA
  3085                           fsr2l	equ	0xFD9
  3086                           status	equ	0xFD8
  3087                           
  3088 ;; *************** function _C_DOOR_UnlockAll *****************
  3089 ;; Defined at:
  3090 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  d               1   29[BANK0 ] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3104 ;;      Params:         0       0       0       0       0       0       0       0       0
  3105 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3106 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3107 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3108 ;;Total ram usage:        9 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    6
  3111 ;; This function calls:
  3112 ;;		Nothing
  3113 ;; This function is called by:
  3114 ;;		_main
  3115 ;; This function uses a non-reentrant model
  3116 ;;
  3117                           
  3118                           	psect	text17
  3119  0012D4                     __ptext17:
  3120                           	opt stack 0
  3121  0012D4                     _C_DOOR_UnlockAll:
  3122                           	opt stack 24
  3123                           
  3124                           ;DOOR_Controller.c: 96: uint8_t d;
  3125                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  3126                           
  3127                           ;incstack = 0
  3128  0012D4  0E00               	movlw	0
  3129  0012D6  0100               	movlb	0	; () banked
  3130  0012D8  6FE1               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  3131  0012DA  D048               	goto	l34
  3132  0012DC                     
  3133                           ; BSR set to: 0
  3134                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  3135                           
  3136                           ; BSR set to: 0
  3137  0012DC  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3138  0012DE  0D0A               	mullw	10
  3139  0012E0  0E02               	movlw	2
  3140  0012E2  26F3               	addwf	prodl,f,c
  3141  0012E4  0E00               	movlw	0
  3142  0012E6  22F4               	addwfc	prodh,f,c
  3143  0012E8  0E60               	movlw	low _doors
  3144  0012EA  24F3               	addwf	prodl,w,c
  3145  0012EC  6ED9               	movwf	fsr2l,c
  3146  0012EE  0E00               	movlw	high _doors
  3147  0012F0  20F4               	addwfc	prodh,w,c
  3148  0012F2  6EDA               	movwf	fsr2h,c
  3149  0012F4  CFDE F0D9          	movff	postinc2,??_C_DOOR_UnlockAll
  3150  0012F8  CFDD F0DA          	movff	postdec2,??_C_DOOR_UnlockAll+1
  3151  0012FC  C0D9  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  3152  001300  C0DA  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  3153  001304  50DF               	movf	indf2,w,c
  3154  001306  0AFF               	xorlw	255
  3155  001308  6FDB               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3156  00130A  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3157  00130C  0D0A               	mullw	10
  3158  00130E  0E04               	movlw	4
  3159  001310  26F3               	addwf	prodl,f,c
  3160  001312  0E00               	movlw	0
  3161  001314  22F4               	addwfc	prodh,f,c
  3162  001316  0E60               	movlw	low _doors
  3163  001318  24F3               	addwf	prodl,w,c
  3164  00131A  6ED9               	movwf	fsr2l,c
  3165  00131C  0E00               	movlw	high _doors
  3166  00131E  20F4               	addwfc	prodh,w,c
  3167  001320  6EDA               	movwf	fsr2h,c
  3168  001322  50DF               	movf	indf2,w,c
  3169  001324  6FDC               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  3170  001326  0E01               	movlw	1
  3171  001328  6FDD               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  3172  00132A  2BDC               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3173  00132C  D002               	goto	u2084
  3174  00132E                     u2085:
  3175  00132E  90D8               	bcf	status,0,c
  3176  001330  37DD               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  3177  001332                     u2084:
  3178  001332  2FDC               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3179  001334  D7FC               	goto	u2085
  3180  001336  0100               	movlb	0	; () banked
  3181  001338  51DD               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  3182  00133A  15DB               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3183  00133C  6FDE               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  3184  00133E  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3185  001340  0D0A               	mullw	10
  3186  001342  0E02               	movlw	2
  3187  001344  26F3               	addwf	prodl,f,c
  3188  001346  0E00               	movlw	0
  3189  001348  22F4               	addwfc	prodh,f,c
  3190  00134A  0E60               	movlw	low _doors
  3191  00134C  24F3               	addwf	prodl,w,c
  3192  00134E  6ED9               	movwf	fsr2l,c
  3193  001350  0E00               	movlw	high _doors
  3194  001352  20F4               	addwfc	prodh,w,c
  3195  001354  6EDA               	movwf	fsr2h,c
  3196  001356  CFDE F0DF          	movff	postinc2,??_C_DOOR_UnlockAll+6
  3197  00135A  CFDD F0E0          	movff	postdec2,??_C_DOOR_UnlockAll+7
  3198  00135E  C0DF  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  3199  001362  C0E0  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  3200  001366  51DE               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  3201  001368  1ADF               	xorwf	indf2,f,c
  3202                           
  3203                           ; BSR set to: 0
  3204  00136A  2BE1               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  3205  00136C                     l34:
  3206                           
  3207                           ; BSR set to: 0
  3208                           
  3209                           ; BSR set to: 0
  3210  00136C  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3211  00136E  6FD9               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  3212  001370  6BDA               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  3213  001372  5037               	movf	_door_cnt,w,c
  3214  001374  5DD9               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  3215  001376  51DA               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  3216  001378  0A80               	xorlw	128
  3217  00137A  6FDB               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3218  00137C  5038               	movf	_door_cnt+1,w,c
  3219  00137E  0A80               	xorlw	128
  3220  001380  59DB               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3221  001382  B0D8               	btfsc	status,0,c
  3222  001384  0012               	return	
  3223  001386  D7AA               	goto	l35
  3224  001388                     __end_of_C_DOOR_UnlockAll:
  3225                           	opt stack 0
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon2	equ	0xFF1
  3234                           postinc0	equ	0xFEE
  3235                           plusw0	equ	0xFEB
  3236                           wreg	equ	0xFE8
  3237                           postdec1	equ	0xFE5
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _C_DOOR_SendStates *****************
  3248 ;; Defined at:
  3249 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;		None
  3252 ;; Auto vars:     Size  Location     Type
  3253 ;;  com             3    8[BANK1 ] unsigned char [3]
  3254 ;;  mes             2   11[BANK1 ] unsigned char [2]
  3255 ;;  d               1   13[BANK1 ] unsigned char 
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0
  3266 ;;      Locals:         0       0       6       0       0       0       0       0       0
  3267 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3268 ;;      Totals:         0       0       9       0       0       0       0       0       0
  3269 ;;Total ram usage:        9 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    9
  3272 ;; This function calls:
  3273 ;;		_D_UART_Write
  3274 ;;		_commandAndMessage
  3275 ;; This function is called by:
  3276 ;;		_main
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text18
  3281  001140                     __ptext18:
  3282                           	opt stack 0
  3283  001140                     _C_DOOR_SendStates:
  3284                           	opt stack 21
  3285                           
  3286                           ;DOOR_Controller.c: 110: uint8_t d;
  3287                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;incstack = 0
  3291  001140  0E00               	movlw	0
  3292  001142  0101               	movlb	1	; () banked
  3293  001144  6FB3               	movwf	C_DOOR_SendStates@d& (0+255),b
  3294  001146  D05D               	goto	l46
  3295  001148                     
  3296                           ; BSR set to: 1
  3297                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  3298                           
  3299                           ; BSR set to: 1
  3300  001148  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3301  00114A  0D0A               	mullw	10
  3302  00114C  0E06               	movlw	6
  3303  00114E  26F3               	addwf	prodl,f,c
  3304  001150  0E00               	movlw	0
  3305  001152  22F4               	addwfc	prodh,f,c
  3306  001154  0E60               	movlw	low _doors
  3307  001156  24F3               	addwf	prodl,w,c
  3308  001158  6ED9               	movwf	fsr2l,c
  3309  00115A  0E00               	movlw	high _doors
  3310  00115C  20F4               	addwfc	prodh,w,c
  3311  00115E  6EDA               	movwf	fsr2h,c
  3312  001160  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3313  001162  0D0A               	mullw	10
  3314  001164  0E05               	movlw	5
  3315  001166  26F3               	addwf	prodl,f,c
  3316  001168  0E00               	movlw	0
  3317  00116A  22F4               	addwfc	prodh,f,c
  3318  00116C  0E60               	movlw	low _doors
  3319  00116E  24F3               	addwf	prodl,w,c
  3320  001170  6EE1               	movwf	fsr1l,c
  3321  001172  0E00               	movlw	high _doors
  3322  001174  20F4               	addwfc	prodh,w,c
  3323  001176  6EE2               	movwf	fsr1h,c
  3324  001178  50DE               	movf	postinc2,w,c
  3325  00117A  18E6               	xorwf	postinc1,w,c
  3326  00117C  B4D8               	btfsc	status,2,c
  3327  00117E  D040               	goto	l48
  3328                           
  3329                           ; BSR set to: 1
  3330                           ;DOOR_Controller.c: 114: char com[3];
  3331                           ;DOOR_Controller.c: 115: char mes[2];
  3332                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  3333  001180  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3334  001182  0D0A               	mullw	10
  3335  001184  0E60               	movlw	low _doors
  3336  001186  24F3               	addwf	prodl,w,c
  3337  001188  6ED9               	movwf	fsr2l,c
  3338  00118A  0E00               	movlw	high _doors
  3339  00118C  20F4               	addwfc	prodh,w,c
  3340  00118E  6EDA               	movwf	fsr2h,c
  3341  001190  EE00  F0D9         	lfsr	0,commandAndMessage@door
  3342  001194  0E09               	movlw	9
  3343  001196                     u2151:
  3344  001196  CFDB FFEB          	movff	plusw2,plusw0
  3345  00119A  06E8               	decf	wreg,f,c
  3346  00119C  E2FC               	bc	u2151
  3347  00119E  0EAE               	movlw	low C_DOOR_SendStates@com
  3348  0011A0  0100               	movlb	0	; () banked
  3349  0011A2  6FE3               	movwf	commandAndMessage@com& (0+255),b
  3350  0011A4  0E01               	movlw	high C_DOOR_SendStates@com
  3351  0011A6  6FE4               	movwf	(commandAndMessage@com+1)& (0+255),b
  3352  0011A8  0EB1               	movlw	low C_DOOR_SendStates@mes
  3353  0011AA  6FE5               	movwf	commandAndMessage@mes& (0+255),b
  3354  0011AC  0E01               	movlw	high C_DOOR_SendStates@mes
  3355  0011AE  6FE6               	movwf	(commandAndMessage@mes+1)& (0+255),b
  3356  0011B0  ECEF  F00A         	call	_commandAndMessage	;wreg free
  3357                           
  3358                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  3359  0011B4  0EAE               	movlw	low C_DOOR_SendStates@com
  3360  0011B6  0101               	movlb	1	; () banked
  3361  0011B8  6FA6               	movwf	D_UART_Write@command& (0+255),b
  3362  0011BA  0E01               	movlw	high C_DOOR_SendStates@com
  3363  0011BC  6FA7               	movwf	(D_UART_Write@command+1)& (0+255),b
  3364  0011BE  0EB1               	movlw	low C_DOOR_SendStates@mes
  3365  0011C0  6FA8               	movwf	D_UART_Write@data& (0+255),b
  3366  0011C2  0E01               	movlw	high C_DOOR_SendStates@mes
  3367  0011C4  6FA9               	movwf	(D_UART_Write@data+1)& (0+255),b
  3368  0011C6  EC2C  F008         	call	_D_UART_Write	;wreg free
  3369                           
  3370                           ;DOOR_Controller.c: 121: doors[d].was_open = doors[d].is_open;
  3371  0011CA  0101               	movlb	1	; () banked
  3372  0011CC  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3373  0011CE  0D0A               	mullw	10
  3374  0011D0  0E06               	movlw	6
  3375  0011D2  26F3               	addwf	prodl,f,c
  3376  0011D4  0E00               	movlw	0
  3377  0011D6  22F4               	addwfc	prodh,f,c
  3378  0011D8  0E60               	movlw	low _doors
  3379  0011DA  24F3               	addwf	prodl,w,c
  3380  0011DC  6ED9               	movwf	fsr2l,c
  3381  0011DE  0E00               	movlw	high _doors
  3382  0011E0  20F4               	addwfc	prodh,w,c
  3383  0011E2  6EDA               	movwf	fsr2h,c
  3384  0011E4  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3385  0011E6  0D0A               	mullw	10
  3386  0011E8  0E05               	movlw	5
  3387  0011EA  26F3               	addwf	prodl,f,c
  3388  0011EC  0E00               	movlw	0
  3389  0011EE  22F4               	addwfc	prodh,f,c
  3390  0011F0  0E60               	movlw	low _doors
  3391  0011F2  24F3               	addwf	prodl,w,c
  3392  0011F4  6EE1               	movwf	fsr1l,c
  3393  0011F6  0E00               	movlw	high _doors
  3394  0011F8  20F4               	addwfc	prodh,w,c
  3395  0011FA  6EE2               	movwf	fsr1h,c
  3396  0011FC  CFDF FFE7          	movff	indf2,indf1
  3397  001200                     l48:
  3398                           
  3399                           ; BSR set to: 1
  3400                           
  3401                           ; BSR set to: 1
  3402  001200  2BB3               	incf	C_DOOR_SendStates@d& (0+255),f,b
  3403  001202                     l46:
  3404                           
  3405                           ; BSR set to: 1
  3406                           
  3407                           ; BSR set to: 1
  3408  001202  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3409  001204  6FAB               	movwf	??_C_DOOR_SendStates& (0+255),b
  3410  001206  6BAC               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  3411  001208  5037               	movf	_door_cnt,w,c
  3412  00120A  5DAB               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  3413  00120C  51AC               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  3414  00120E  0A80               	xorlw	128
  3415  001210  6FAD               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  3416  001212  5038               	movf	_door_cnt+1,w,c
  3417  001214  0A80               	xorlw	128
  3418  001216  59AD               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  3419  001218  B0D8               	btfsc	status,0,c
  3420  00121A  0012               	return	
  3421  00121C  D795               	goto	l47
  3422  00121E                     __end_of_C_DOOR_SendStates:
  3423                           	opt stack 0
  3424                           tblptru	equ	0xFF8
  3425                           tblptrh	equ	0xFF7
  3426                           tblptrl	equ	0xFF6
  3427                           tablat	equ	0xFF5
  3428                           prodh	equ	0xFF4
  3429                           prodl	equ	0xFF3
  3430                           intcon	equ	0xFF2
  3431                           intcon2	equ	0xFF1
  3432                           postinc0	equ	0xFEE
  3433                           plusw0	equ	0xFEB
  3434                           wreg	equ	0xFE8
  3435                           indf1	equ	0xFE7
  3436                           postinc1	equ	0xFE6
  3437                           postdec1	equ	0xFE5
  3438                           fsr1h	equ	0xFE2
  3439                           fsr1l	equ	0xFE1
  3440                           indf2	equ	0xFDF
  3441                           postinc2	equ	0xFDE
  3442                           postdec2	equ	0xFDD
  3443                           plusw2	equ	0xFDB
  3444                           fsr2h	equ	0xFDA
  3445                           fsr2l	equ	0xFD9
  3446                           status	equ	0xFD8
  3447                           
  3448 ;; *************** function _commandAndMessage *****************
  3449 ;; Defined at:
  3450 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  door           10   21[BANK0 ] struct .
  3453 ;;  com             2   31[BANK0 ] PTR unsigned char 
  3454 ;;		 -> C_DOOR_SendStates@com(3), 
  3455 ;;  mes             2   33[BANK0 ] PTR unsigned char 
  3456 ;;		 -> C_DOOR_SendStates@mes(2), 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3468 ;;      Params:         0      14       0       0       0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3471 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3472 ;;Total ram usage:       14 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    6
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_C_DOOR_SendStates
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text19
  3483  0015DE                     __ptext19:
  3484                           	opt stack 0
  3485  0015DE                     _commandAndMessage:
  3486                           	opt stack 23
  3487                           
  3488                           ;DOOR_Controller.c: 33: com[0] = 'D';
  3489                           
  3490                           ; BSR set to: 1
  3491                           ;incstack = 0
  3492  0015DE  C0E3  FFD9         	movff	commandAndMessage@com,fsr2l
  3493  0015E2  C0E4  FFDA         	movff	commandAndMessage@com+1,fsr2h
  3494  0015E6  0E44               	movlw	68
  3495  0015E8  6EDF               	movwf	indf2,c
  3496                           
  3497                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  3498  0015EA  0100               	movlb	0	; () banked
  3499  0015EC  EE20 F001          	lfsr	2,1
  3500  0015F0  51E3               	movf	commandAndMessage@com& (0+255),w,b
  3501  0015F2  26D9               	addwf	fsr2l,f,c
  3502  0015F4  51E4               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3503  0015F6  22DA               	addwfc	fsr2h,f,c
  3504  0015F8  51D9               	movf	commandAndMessage@door& (0+255),w,b
  3505  0015FA  0F30               	addlw	48
  3506  0015FC  6EDF               	movwf	indf2,c
  3507                           
  3508                           ; BSR set to: 0
  3509                           ;DOOR_Controller.c: 35: com[2] = '\0';
  3510  0015FE  EE20 F002          	lfsr	2,2
  3511  001602  51E3               	movf	commandAndMessage@com& (0+255),w,b
  3512  001604  26D9               	addwf	fsr2l,f,c
  3513  001606  51E4               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3514  001608  22DA               	addwfc	fsr2h,f,c
  3515  00160A  0E00               	movlw	0
  3516  00160C  6EDF               	movwf	indf2,c
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;DOOR_Controller.c: 38: if (door.is_open) {
  3520  00160E  51DF               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3521  001610  B4D8               	btfsc	status,2,c
  3522  001612  D006               	goto	l17
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  3526  001614  C0E5  FFD9         	movff	commandAndMessage@mes,fsr2l
  3527  001618  C0E6  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3528  00161C  0E43               	movlw	67
  3529  00161E  D005               	goto	L2
  3530  001620                     l17:
  3531                           
  3532                           ; BSR set to: 0
  3533                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  3534                           
  3535                           ; BSR set to: 0
  3536  001620  C0E5  FFD9         	movff	commandAndMessage@mes,fsr2l
  3537  001624  C0E6  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3538  001628  0E4F               	movlw	79
  3539  00162A                     L2:
  3540  00162A  6EDF               	movwf	indf2,c
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;DOOR_Controller.c: 42: }
  3544                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  3545                           
  3546                           ; BSR set to: 0
  3547  00162C  EE20 F001          	lfsr	2,1
  3548  001630  51E5               	movf	commandAndMessage@mes& (0+255),w,b
  3549  001632  26D9               	addwf	fsr2l,f,c
  3550  001634  51E6               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3551  001636  22DA               	addwfc	fsr2h,f,c
  3552  001638  0E00               	movlw	0
  3553  00163A  6EDF               	movwf	indf2,c
  3554                           
  3555                           ; BSR set to: 0
  3556  00163C  0012               	return		;funcret
  3557  00163E                     __end_of_commandAndMessage:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           intcon2	equ	0xFF1
  3567                           postinc0	equ	0xFEE
  3568                           plusw0	equ	0xFEB
  3569                           wreg	equ	0xFE8
  3570                           indf1	equ	0xFE7
  3571                           postinc1	equ	0xFE6
  3572                           postdec1	equ	0xFE5
  3573                           fsr1h	equ	0xFE2
  3574                           fsr1l	equ	0xFE1
  3575                           indf2	equ	0xFDF
  3576                           postinc2	equ	0xFDE
  3577                           postdec2	equ	0xFDD
  3578                           plusw2	equ	0xFDB
  3579                           fsr2h	equ	0xFDA
  3580                           fsr2l	equ	0xFD9
  3581                           status	equ	0xFD8
  3582                           
  3583 ;; *************** function _D_UART_Write *****************
  3584 ;; Defined at:
  3585 ;;		line 206 in file "Drivers/UART_Driver.c"
  3586 ;; Parameters:    Size  Location     Type
  3587 ;;  command         2    0[BANK1 ] PTR const unsigned char 
  3588 ;;		 -> STR_15(2), C_DOOR_SendStates@com(3), 
  3589 ;;  data            2    2[BANK1 ] PTR const unsigned char 
  3590 ;;		 -> STR_16(2), C_DOOR_SendStates@mes(2), 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3602 ;;      Params:         0       0       4       0       0       0       0       0       0
  3603 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3604 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3605 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3606 ;;Total ram usage:        5 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    8
  3609 ;; This function calls:
  3610 ;;		_printf
  3611 ;; This function is called by:
  3612 ;;		_C_DOOR_SendStates
  3613 ;;		_main
  3614 ;; This function uses a non-reentrant model
  3615 ;;
  3616                           
  3617                           	psect	text20
  3618  001058                     __ptext20:
  3619                           	opt stack 0
  3620  001058                     _D_UART_Write:
  3621                           	opt stack 22
  3622                           
  3623                           ;UART_Driver.c: 207: printf(startCharacter);
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;incstack = 0
  3627  001058  C048  F0E0         	movff	_startCharacter,printf@f
  3628  00105C  C049  F0E1         	movff	_startCharacter+1,printf@f+1
  3629  001060  0100               	movlb	0	; () banked
  3630  001062  51E0               	movf	printf@f& (0+255),w,b
  3631  001064  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3632  001066  A4D8               	btfss	status,2,c
  3633  001068  0E00               	movlw	low (__mediumconst shr (0+16))
  3634  00106A  6FE2               	movwf	(printf@f+2)& (0+255),b
  3635  00106C  EC32  F006         	call	_printf	;wreg free
  3636                           
  3637                           ;UART_Driver.c: 209: printf(messageCharacter);
  3638  001070  C044  F0E0         	movff	_messageCharacter,printf@f
  3639  001074  C045  F0E1         	movff	_messageCharacter+1,printf@f+1
  3640  001078  0100               	movlb	0	; () banked
  3641  00107A  51E0               	movf	printf@f& (0+255),w,b
  3642  00107C  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3643  00107E  A4D8               	btfss	status,2,c
  3644  001080  0E00               	movlw	low (__mediumconst shr (0+16))
  3645  001082  6FE2               	movwf	(printf@f+2)& (0+255),b
  3646  001084  EC32  F006         	call	_printf	;wreg free
  3647                           
  3648                           ;UART_Driver.c: 210: printf(deviceName);
  3649  001088  C034  F0E0         	movff	_deviceName,printf@f
  3650  00108C  C035  F0E1         	movff	_deviceName+1,printf@f+1
  3651  001090  C036  F0E2         	movff	_deviceName+2,printf@f+2
  3652  001094  EC32  F006         	call	_printf	;wreg free
  3653                           
  3654                           ;UART_Driver.c: 212: printf(":");printf(command);
  3655  001098  0E37               	movlw	low STR_6
  3656  00109A  0100               	movlb	0	; () banked
  3657  00109C  6FE0               	movwf	printf@f& (0+255),b
  3658  00109E  0E08               	movlw	high STR_6
  3659  0010A0  6FE1               	movwf	(printf@f+1)& (0+255),b
  3660  0010A2  51E0               	movf	printf@f& (0+255),w,b
  3661  0010A4  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3662  0010A6  A4D8               	btfss	status,2,c
  3663  0010A8  0E00               	movlw	low (__mediumconst shr (0+16))
  3664  0010AA  6FE2               	movwf	(printf@f+2)& (0+255),b
  3665  0010AC  EC32  F006         	call	_printf	;wreg free
  3666  0010B0  C1A6  F0E0         	movff	D_UART_Write@command,printf@f
  3667  0010B4  C1A7  F0E1         	movff	D_UART_Write@command+1,printf@f+1
  3668  0010B8  0100               	movlb	0	; () banked
  3669  0010BA  6BE2               	clrf	(printf@f+2)& (0+255),b
  3670  0010BC  51E0               	movf	printf@f& (0+255),w,b
  3671  0010BE  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3672  0010C0  B4D8               	btfsc	status,2,c
  3673  0010C2  D007               	goto	u2001
  3674  0010C4  0E07               	movlw	(high __ramtop+-1)
  3675  0010C6  0101               	movlb	1	; () banked
  3676  0010C8  65A7               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3677  0010CA  D001               	goto	u20011
  3678  0010CC  D002               	goto	u2001
  3679  0010CE                     u20011:
  3680  0010CE  0100               	movlb	0	; () banked
  3681  0010D0  8BE2               	bsf	(printf@f+2)& (0+255),5,b
  3682  0010D2                     u2001:
  3683  0010D2  EC32  F006         	call	_printf	;wreg free
  3684                           
  3685                           ;UART_Driver.c: 214: printf(":");printf(data);
  3686  0010D6  0E37               	movlw	low STR_6
  3687  0010D8  0100               	movlb	0	; () banked
  3688  0010DA  6FE0               	movwf	printf@f& (0+255),b
  3689  0010DC  0E08               	movlw	high STR_6
  3690  0010DE  6FE1               	movwf	(printf@f+1)& (0+255),b
  3691  0010E0  51E0               	movf	printf@f& (0+255),w,b
  3692  0010E2  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3693  0010E4  A4D8               	btfss	status,2,c
  3694  0010E6  0E00               	movlw	low (__mediumconst shr (0+16))
  3695  0010E8  6FE2               	movwf	(printf@f+2)& (0+255),b
  3696  0010EA  EC32  F006         	call	_printf	;wreg free
  3697  0010EE  C1A8  F0E0         	movff	D_UART_Write@data,printf@f
  3698  0010F2  C1A9  F0E1         	movff	D_UART_Write@data+1,printf@f+1
  3699  0010F6  0100               	movlb	0	; () banked
  3700  0010F8  6BE2               	clrf	(printf@f+2)& (0+255),b
  3701  0010FA  51E0               	movf	printf@f& (0+255),w,b
  3702  0010FC  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3703  0010FE  B4D8               	btfsc	status,2,c
  3704  001100  D007               	goto	u2011
  3705  001102  0E07               	movlw	(high __ramtop+-1)
  3706  001104  0101               	movlb	1	; () banked
  3707  001106  65A9               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3708  001108  D001               	goto	u20111
  3709  00110A  D002               	goto	u2011
  3710  00110C                     u20111:
  3711  00110C  0100               	movlb	0	; () banked
  3712  00110E  8BE2               	bsf	(printf@f+2)& (0+255),5,b
  3713  001110                     u2011:
  3714  001110  EC32  F006         	call	_printf	;wreg free
  3715                           
  3716                           ;UART_Driver.c: 216: printf(stopCharacter);
  3717  001114  C046  F0E0         	movff	_stopCharacter,printf@f
  3718  001118  C047  F0E1         	movff	_stopCharacter+1,printf@f+1
  3719  00111C  0100               	movlb	0	; () banked
  3720  00111E  51E0               	movf	printf@f& (0+255),w,b
  3721  001120  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3722  001122  A4D8               	btfss	status,2,c
  3723  001124  0E00               	movlw	low (__mediumconst shr (0+16))
  3724  001126  6FE2               	movwf	(printf@f+2)& (0+255),b
  3725  001128  EC32  F006         	call	_printf	;wreg free
  3726                           
  3727                           ;UART_Driver.c: 217: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3728  00112C  0E06               	movlw	6
  3729  00112E  0101               	movlb	1	; () banked
  3730  001130  6FAA               	movwf	??_D_UART_Write& (0+255),b
  3731  001132  0E30               	movlw	48
  3732  001134                     u2617:
  3733  001134  2EE8               	decfsz	wreg,f,c
  3734  001136  D7FE               	bra	u2617
  3735  001138  2FAA               	decfsz	??_D_UART_Write& (0+255),f,b
  3736  00113A  D7FC               	bra	u2617
  3737  00113C  F000               	nop	
  3738  00113E  0012               	return		;funcret
  3739  001140                     __end_of_D_UART_Write:
  3740                           	opt stack 0
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           prodh	equ	0xFF4
  3746                           prodl	equ	0xFF3
  3747                           intcon	equ	0xFF2
  3748                           intcon2	equ	0xFF1
  3749                           postinc0	equ	0xFEE
  3750                           plusw0	equ	0xFEB
  3751                           wreg	equ	0xFE8
  3752                           indf1	equ	0xFE7
  3753                           postinc1	equ	0xFE6
  3754                           postdec1	equ	0xFE5
  3755                           fsr1h	equ	0xFE2
  3756                           fsr1l	equ	0xFE1
  3757                           indf2	equ	0xFDF
  3758                           postinc2	equ	0xFDE
  3759                           postdec2	equ	0xFDD
  3760                           plusw2	equ	0xFDB
  3761                           fsr2h	equ	0xFDA
  3762                           fsr2l	equ	0xFD9
  3763                           status	equ	0xFD8
  3764                           
  3765 ;; *************** function _printf *****************
  3766 ;; Defined at:
  3767 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3768 ;; Parameters:    Size  Location     Type
  3769 ;;  f               3   28[BANK0 ] PTR const unsigned char 
  3770 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  3771 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3772 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3773 ;;		 -> C_DOOR_SendStates@com(3), 
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  idx             1   32[BANK0 ] unsigned char 
  3776 ;;  tmpval          4    0        struct .
  3777 ;;  cp              3    0        PTR const unsigned char 
  3778 ;;  val             2   35[BANK0 ] unsigned int 
  3779 ;;  ap              2   33[BANK0 ] PTR void [1]
  3780 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3781 ;;  len             2    0        unsigned int 
  3782 ;;  c               1   38[BANK0 ] char 
  3783 ;;  prec            1   37[BANK0 ] char 
  3784 ;;  flag            1   31[BANK0 ] unsigned char 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  2   28[BANK0 ] int 
  3787 ;; Registers used:
  3788 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3794 ;;      Params:         0       3       0       0       0       0       0       0       0
  3795 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3797 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3798 ;;Total ram usage:       11 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    7
  3801 ;; This function calls:
  3802 ;;		___lwdiv
  3803 ;;		_putch
  3804 ;; This function is called by:
  3805 ;;		_D_UART_Write
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text21
  3810  000C64                     __ptext21:
  3811                           	opt stack 0
  3812  000C64                     _printf:
  3813                           	opt stack 22
  3814                           
  3815                           ;doprnt.c: 466: va_list ap;
  3816                           ;doprnt.c: 499: signed char c;
  3817                           ;doprnt.c: 506: signed char prec;
  3818                           ;doprnt.c: 508: unsigned char flag;
  3819                           ;doprnt.c: 523: union {
  3820                           ;doprnt.c: 524: unsigned long vd;
  3821                           ;doprnt.c: 525: double integ;
  3822                           ;doprnt.c: 526: } tmpval;
  3823                           ;doprnt.c: 528: unsigned int val;
  3824                           ;doprnt.c: 529: unsigned len;
  3825                           ;doprnt.c: 530: const char * cp;
  3826                           ;doprnt.c: 533: *ap = __va_start();
  3827                           
  3828                           ;incstack = 0
  3829  000C64  0EE3               	movlw	low (?_printf+3)
  3830  000C66  0100               	movlb	0	; () banked
  3831  000C68  6FE5               	movwf	printf@ap& (0+255),b
  3832  000C6A  0E00               	movlw	high (?_printf+3)
  3833  000C6C  6FE6               	movwf	(printf@ap+1)& (0+255),b
  3834                           
  3835                           ;doprnt.c: 536: while(c = *f++) {
  3836  000C6E  D08B               	goto	u1830
  3837  000C70                     
  3838                           ; BSR set to: 0
  3839                           ;doprnt.c: 538: if(c != '%')
  3840                           
  3841                           ; BSR set to: 0
  3842  000C70  0E25               	movlw	37
  3843  000C72  19EA               	xorwf	printf@c& (0+255),w,b
  3844  000C74  B4D8               	btfsc	status,2,c
  3845  000C76  D004               	goto	l373
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;doprnt.c: 540: {
  3849                           ;doprnt.c: 541: (putch(c) );
  3850  000C78  51EA               	movf	printf@c& (0+255),w,b
  3851  000C7A  EC1D  F00C         	call	_putch
  3852                           
  3853                           ;doprnt.c: 542: continue;
  3854  000C7E  D083               	goto	u1830
  3855  000C80                     l373:
  3856                           
  3857                           ;doprnt.c: 543: }
  3858                           ;doprnt.c: 548: flag = 0;
  3859  000C80  0E00               	movlw	0
  3860  000C82  0100               	movlb	0	; () banked
  3861  000C84  6FE3               	movwf	printf@flag& (0+255),b
  3862                           
  3863                           ;doprnt.c: 635: switch(c = *f++) {
  3864  000C86  D004               	goto	l374
  3865  000C88                     
  3866                           ; BSR set to: 0
  3867                           ;doprnt.c: 809: (putch(c) );
  3868                           
  3869                           ; BSR set to: 0
  3870  000C88  51EA               	movf	printf@c& (0+255),w,b
  3871  000C8A  EC1D  F00C         	call	_putch
  3872                           
  3873                           ;doprnt.c: 810: continue;
  3874  000C8E  D07B               	goto	u1830
  3875  000C90                     l374:
  3876  000C90  C0E0  FFF6         	movff	printf@f,tblptrl
  3877  000C94  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3878  000C98  C0E2  FFF8         	movff	printf@f+2,tblptru
  3879  000C9C  0E01               	movlw	1
  3880  000C9E  0100               	movlb	0	; () banked
  3881  000CA0  27E0               	addwf	printf@f& (0+255),f,b
  3882  000CA2  0E00               	movlw	0
  3883  000CA4  23E1               	addwfc	(printf@f+1)& (0+255),f,b
  3884  000CA6  23E2               	addwfc	(printf@f+2)& (0+255),f,b
  3885  000CA8  BAF8               	btfsc	tblptru,5,c
  3886  000CAA  D003               	bra	u1797
  3887  000CAC  0008               	tblrd		*
  3888  000CAE  50F5               	movf	tablat,w,c
  3889  000CB0  D005               	bra	u1790
  3890  000CB2                     u1797:
  3891  000CB2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3892  000CB6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3893  000CBA  50EF               	movf	indf0,w,c
  3894  000CBC                     u1790:
  3895  000CBC  0100               	movlb	0	; () banked
  3896  000CBE  6FEA               	movwf	printf@c& (0+255),b
  3897  000CC0  51EA               	movf	printf@c& (0+255),w,b
  3898                           
  3899                           ; Switch size 1, requested type "space"
  3900                           ; Number of cases is 2, Range of values is 0 to 120
  3901                           ; switch strategies available:
  3902                           ; Name         Instructions Cycles
  3903                           ; simple_byte            7     4 (average)
  3904                           ;	Chosen strategy is simple_byte
  3905  000CC2  0A00               	xorlw	0	; case 0
  3906  000CC4  B4D8               	btfsc	status,2,c
  3907  000CC6  0012               	return	
  3908  000CC8  0A78               	xorlw	120	; case 120
  3909  000CCA  A4D8               	btfss	status,2,c
  3910  000CCC  D7DD               	goto	l379
  3911                           
  3912                           ;doprnt.c: 1273: {
  3913                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3914                           
  3915                           ; BSR set to: 0
  3916  000CCE  C0E5  FFD9         	movff	printf@ap,fsr2l
  3917  000CD2  C0E6  FFDA         	movff	printf@ap+1,fsr2h
  3918  000CD6  CFDE F0E7          	movff	postinc2,printf@val
  3919  000CDA  CFDD F0E8          	movff	postdec2,printf@val+1
  3920  000CDE  0E02               	movlw	2
  3921  000CE0  0100               	movlb	0	; () banked
  3922  000CE2  27E5               	addwf	printf@ap& (0+255),f,b
  3923  000CE4  0E00               	movlw	0
  3924  000CE6  23E6               	addwfc	(printf@ap+1)& (0+255),f,b
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;doprnt.c: 1287: }
  3928                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3929  000CE8  0E01               	movlw	1
  3930  000CEA  6FEA               	movwf	printf@c& (0+255),b
  3931  000CEC  D014               	goto	l2207
  3932  000CEE                     
  3933                           ; BSR set to: 0
  3934                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3935                           
  3936                           ; BSR set to: 0
  3937  000CEE  51EA               	movf	printf@c& (0+255),w,b
  3938  000CF0  0D02               	mullw	2
  3939  000CF2  0E01               	movlw	low _hexpowers
  3940  000CF4  24F3               	addwf	prodl,w,c
  3941  000CF6  6EF6               	movwf	tblptrl,c
  3942  000CF8  0E08               	movlw	high _hexpowers
  3943  000CFA  20F4               	addwfc	prodh,w,c
  3944  000CFC  6EF7               	movwf	tblptrh,c
  3945  000CFE                     	if	1	;There are 3 active tblptr bytes
  3946  000CFE  6AF8               	clrf	tblptru,c
  3947  000D00  0E00               	movlw	low (__mediumconst shr (0+16))
  3948  000D02  22F8               	addwfc	tblptru,f,c
  3949  000D04                     	endif
  3950  000D04  0009               	tblrd		*+
  3951  000D06  50F5               	movf	tablat,w,c
  3952  000D08  5DE7               	subwf	printf@val& (0+255),w,b
  3953  000D0A  0009               	tblrd		*+
  3954  000D0C  50F5               	movf	tablat,w,c
  3955  000D0E  59E8               	subwfb	(printf@val+1)& (0+255),w,b
  3956  000D10  A0D8               	btfss	status,0,c
  3957  000D12  D005               	goto	u1820
  3958                           
  3959                           ; BSR set to: 0
  3960                           
  3961                           ; BSR set to: 0
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 1318: break;
  3965  000D14  2BEA               	incf	printf@c& (0+255),f,b
  3966  000D16                     l2207:
  3967                           
  3968                           ; BSR set to: 0
  3969  000D16  0E04               	movlw	4
  3970  000D18  19EA               	xorwf	printf@c& (0+255),w,b
  3971  000D1A  A4D8               	btfss	status,2,c
  3972  000D1C  D7E8               	goto	l380
  3973  000D1E                     u1820:
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 1422: {
  3977                           ;doprnt.c: 1469: }
  3978                           ;doprnt.c: 1472: prec = c;
  3979  000D1E  C0EA  F0E9         	movff	printf@c,printf@prec
  3980                           
  3981                           ;doprnt.c: 1474: while(prec--) {
  3982  000D22  D02C               	goto	l383
  3983  000D24                     
  3984                           ; BSR set to: 0
  3985                           ;doprnt.c: 1478: {
  3986                           ;doprnt.c: 1499: {
  3987                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3988                           
  3989                           ; BSR set to: 0
  3990  000D24  C0E7  F0D9         	movff	printf@val,___lwdiv@dividend
  3991  000D28  C0E8  F0DA         	movff	printf@val+1,___lwdiv@dividend+1
  3992  000D2C  51E9               	movf	printf@prec& (0+255),w,b
  3993  000D2E  0D02               	mullw	2
  3994  000D30  0E01               	movlw	low _hexpowers
  3995  000D32  24F3               	addwf	prodl,w,c
  3996  000D34  6EF6               	movwf	tblptrl,c
  3997  000D36  0E08               	movlw	high _hexpowers
  3998  000D38  20F4               	addwfc	prodh,w,c
  3999  000D3A  6EF7               	movwf	tblptrh,c
  4000  000D3C                     	if	1	;There are 3 active tblptr bytes
  4001  000D3C  6AF8               	clrf	tblptru,c
  4002  000D3E  0E00               	movlw	low (__mediumconst shr (0+16))
  4003  000D40  22F8               	addwfc	tblptru,f,c
  4004  000D42                     	endif
  4005  000D42  0009               	tblrd		*+
  4006  000D44  CFF5 F0DB          	movff	tablat,___lwdiv@divisor
  4007  000D48  000A               	tblrd		*-
  4008  000D4A  CFF5 F0DC          	movff	tablat,___lwdiv@divisor+1
  4009  000D4E  EC4F  F00B         	call	___lwdiv	;wreg free
  4010  000D52  0100               	movlb	0	; () banked
  4011  000D54  51D9               	movf	?___lwdiv& (0+255),w,b
  4012  000D56  0B0F               	andlw	15
  4013  000D58  6FE4               	movwf	printf@idx& (0+255),b
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4017  000D5A  51E4               	movf	printf@idx& (0+255),w,b
  4018  000D5C  0D01               	mullw	1
  4019  000D5E  0E09               	movlw	low STR_17
  4020  000D60  24F3               	addwf	prodl,w,c
  4021  000D62  6EF6               	movwf	tblptrl,c
  4022  000D64  0E08               	movlw	high STR_17
  4023  000D66  20F4               	addwfc	prodh,w,c
  4024  000D68  6EF7               	movwf	tblptrh,c
  4025  000D6A                     	if	1	;There are 3 active tblptr bytes
  4026  000D6A  6AF8               	clrf	tblptru,c
  4027  000D6C  0E00               	movlw	low (__mediumconst shr (0+16))
  4028  000D6E  22F8               	addwfc	tblptru,f,c
  4029  000D70                     	endif
  4030  000D70  0008               	tblrd		*
  4031  000D72  CFF5 F0EA          	movff	tablat,printf@c
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;doprnt.c: 1508: }
  4035                           ;doprnt.c: 1523: }
  4036                           ;doprnt.c: 1524: (putch(c) );
  4037  000D76  51EA               	movf	printf@c& (0+255),w,b
  4038  000D78  EC1D  F00C         	call	_putch
  4039  000D7C                     l383:
  4040  000D7C  0100               	movlb	0	; () banked
  4041  000D7E  07E9               	decf	printf@prec& (0+255),f,b
  4042  000D80  29E9               	incf	printf@prec& (0+255),w,b
  4043  000D82  A4D8               	btfss	status,2,c
  4044  000D84  D7CF               	goto	l384
  4045  000D86                     u1830:
  4046                           
  4047                           ; BSR set to: 0
  4048                           
  4049                           ; BSR set to: 0
  4050  000D86  C0E0  FFF6         	movff	printf@f,tblptrl
  4051  000D8A  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4052  000D8E  C0E2  FFF8         	movff	printf@f+2,tblptru
  4053  000D92  0E01               	movlw	1
  4054  000D94  0100               	movlb	0	; () banked
  4055  000D96  27E0               	addwf	printf@f& (0+255),f,b
  4056  000D98  0E00               	movlw	0
  4057  000D9A  23E1               	addwfc	(printf@f+1)& (0+255),f,b
  4058  000D9C  23E2               	addwfc	(printf@f+2)& (0+255),f,b
  4059  000D9E  BAF8               	btfsc	tblptru,5,c
  4060  000DA0  D003               	bra	u1847
  4061  000DA2  0008               	tblrd		*
  4062  000DA4  50F5               	movf	tablat,w,c
  4063  000DA6  D005               	bra	u1840
  4064  000DA8                     u1847:
  4065  000DA8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4066  000DAC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4067  000DB0  50EF               	movf	indf0,w,c
  4068  000DB2                     u1840:
  4069  000DB2  0100               	movlb	0	; () banked
  4070  000DB4  6FEA               	movwf	printf@c& (0+255),b
  4071  000DB6  51EA               	movf	printf@c& (0+255),w,b
  4072  000DB8  B4D8               	btfsc	status,2,c
  4073  000DBA  0012               	return	
  4074  000DBC  D759               	goto	l372
  4075  000DBE                     __end_of_printf:
  4076                           	opt stack 0
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           intcon2	equ	0xFF1
  4085                           indf0	equ	0xFEF
  4086                           postinc0	equ	0xFEE
  4087                           plusw0	equ	0xFEB
  4088                           fsr0h	equ	0xFEA
  4089                           fsr0l	equ	0xFE9
  4090                           wreg	equ	0xFE8
  4091                           indf1	equ	0xFE7
  4092                           postinc1	equ	0xFE6
  4093                           postdec1	equ	0xFE5
  4094                           fsr1h	equ	0xFE2
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           postinc2	equ	0xFDE
  4098                           postdec2	equ	0xFDD
  4099                           plusw2	equ	0xFDB
  4100                           fsr2h	equ	0xFDA
  4101                           fsr2l	equ	0xFD9
  4102                           status	equ	0xFD8
  4103                           
  4104 ;; *************** function _putch *****************
  4105 ;; Defined at:
  4106 ;;		line 243 in file "Drivers/UART_Driver.c"
  4107 ;; Parameters:    Size  Location     Type
  4108 ;;  data            1    wreg     unsigned char 
  4109 ;; Auto vars:     Size  Location     Type
  4110 ;;  data            1   21[BANK0 ] unsigned char 
  4111 ;;  max             1   22[BANK0 ] unsigned char 
  4112 ;; Return value:  Size  Location     Type
  4113 ;;                  1    wreg      void 
  4114 ;; Registers used:
  4115 ;;		wreg, status,2, status,0, cstack
  4116 ;; Tracked objects:
  4117 ;;		On entry : 0/0
  4118 ;;		On exit  : 0/0
  4119 ;;		Unchanged: 0/0
  4120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4121 ;;      Params:         0       0       0       0       0       0       0       0       0
  4122 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4123 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4124 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4125 ;;Total ram usage:        2 bytes
  4126 ;; Hardware stack levels used:    1
  4127 ;; Hardware stack levels required when called:    6
  4128 ;; This function calls:
  4129 ;;		Nothing
  4130 ;; This function is called by:
  4131 ;;		_printf
  4132 ;; This function uses a non-reentrant model
  4133 ;;
  4134                           
  4135                           	psect	text22
  4136  00183A                     __ptext22:
  4137                           	opt stack 0
  4138  00183A                     _putch:
  4139                           	opt stack 22
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;incstack = 0
  4143                           ;putch@data stored from wreg
  4144  00183A  0100               	movlb	0	; () banked
  4145  00183C  6FD9               	movwf	putch@data& (0+255),b
  4146                           
  4147                           ;UART_Driver.c: 244: uint8_t max = 0;
  4148  00183E  0E00               	movlw	0
  4149  001840  0100               	movlb	0	; () banked
  4150  001842  6FDA               	movwf	putch@max& (0+255),b
  4151                           
  4152                           ;UART_Driver.c: 246: while(TXSTAbits.TRMT == 0 && max < 200) {
  4153  001844  D005               	goto	l166
  4154  001846                     
  4155                           ; BSR set to: 0
  4156                           ;UART_Driver.c: 247: max++;
  4157                           
  4158                           ; BSR set to: 0
  4159  001846  2BDA               	incf	putch@max& (0+255),f,b
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;UART_Driver.c: 248: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  4163  001848  0E06               	movlw	6
  4164  00184A                     u2627:
  4165  00184A  2EE8               	decfsz	wreg,f,c
  4166  00184C  D7FE               	bra	u2627
  4167  00184E  D000               	nop2	
  4168  001850                     l166:
  4169  001850  B2AC               	btfsc	4012,1,c	;volatile
  4170  001852  D004               	goto	u1690
  4171  001854  0EC7               	movlw	199
  4172  001856  0100               	movlb	0	; () banked
  4173  001858  65DA               	cpfsgt	putch@max& (0+255),b
  4174  00185A  D7F5               	goto	l167
  4175  00185C                     u1690:
  4176                           
  4177                           ;UART_Driver.c: 249: }
  4178                           ;UART_Driver.c: 250: TXREG = data;
  4179                           
  4180                           ; BSR set to: 0
  4181  00185C  C0D9  FFAD         	movff	putch@data,4013	;volatile
  4182  001860  0012               	return		;funcret
  4183  001862                     __end_of_putch:
  4184                           	opt stack 0
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           intcon	equ	0xFF2
  4192                           intcon2	equ	0xFF1
  4193                           indf0	equ	0xFEF
  4194                           postinc0	equ	0xFEE
  4195                           plusw0	equ	0xFEB
  4196                           fsr0h	equ	0xFEA
  4197                           fsr0l	equ	0xFE9
  4198                           wreg	equ	0xFE8
  4199                           indf1	equ	0xFE7
  4200                           postinc1	equ	0xFE6
  4201                           postdec1	equ	0xFE5
  4202                           fsr1h	equ	0xFE2
  4203                           fsr1l	equ	0xFE1
  4204                           indf2	equ	0xFDF
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           plusw2	equ	0xFDB
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function ___lwdiv *****************
  4213 ;; Defined at:
  4214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;  dividend        2   21[BANK0 ] unsigned int 
  4217 ;;  divisor         2   23[BANK0 ] unsigned int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  quotient        2   26[BANK0 ] unsigned int 
  4220 ;;  counter         1   25[BANK0 ] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  2   21[BANK0 ] unsigned int 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4230 ;;      Params:         0       4       0       0       0       0       0       0       0
  4231 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4233 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4234 ;;Total ram usage:        7 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    6
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_printf
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text23
  4245  00169E                     __ptext23:
  4246                           	opt stack 0
  4247  00169E                     ___lwdiv:
  4248                           	opt stack 22
  4249                           
  4250                           ;incstack = 0
  4251  00169E  0E00               	movlw	0
  4252  0016A0  0100               	movlb	0	; () banked
  4253  0016A2  6FDF               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4254  0016A4  0E00               	movlw	0
  4255  0016A6  6FDE               	movwf	___lwdiv@quotient& (0+255),b
  4256                           
  4257                           ; BSR set to: 0
  4258  0016A8  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4259  0016AA  11DC               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4260  0016AC  B4D8               	btfsc	status,2,c
  4261  0016AE  D01C               	goto	l796
  4262                           
  4263                           ; BSR set to: 0
  4264  0016B0  0E01               	movlw	1
  4265  0016B2  6FDD               	movwf	___lwdiv@counter& (0+255),b
  4266  0016B4  D004               	goto	l791
  4267  0016B6                     
  4268                           ; BSR set to: 0
  4269                           
  4270                           ; BSR set to: 0
  4271  0016B6  90D8               	bcf	status,0,c
  4272  0016B8  37DB               	rlcf	___lwdiv@divisor& (0+255),f,b
  4273  0016BA  37DC               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4274  0016BC  2BDD               	incf	___lwdiv@counter& (0+255),f,b
  4275  0016BE                     l791:
  4276                           
  4277                           ; BSR set to: 0
  4278                           
  4279                           ; BSR set to: 0
  4280  0016BE  AFDC               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4281  0016C0  D7FA               	goto	l792
  4282  0016C2                     u1710:
  4283                           
  4284                           ; BSR set to: 0
  4285                           
  4286                           ; BSR set to: 0
  4287                           
  4288                           ; BSR set to: 0
  4289  0016C2  90D8               	bcf	status,0,c
  4290  0016C4  37DE               	rlcf	___lwdiv@quotient& (0+255),f,b
  4291  0016C6  37DF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4292                           
  4293                           ; BSR set to: 0
  4294  0016C8  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4295  0016CA  5DD9               	subwf	___lwdiv@dividend& (0+255),w,b
  4296  0016CC  51DC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4297  0016CE  59DA               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4298  0016D0  A0D8               	btfss	status,0,c
  4299  0016D2  D005               	goto	l795
  4300                           
  4301                           ; BSR set to: 0
  4302  0016D4  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4303  0016D6  5FD9               	subwf	___lwdiv@dividend& (0+255),f,b
  4304  0016D8  51DC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4305  0016DA  5BDA               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4306                           
  4307                           ; BSR set to: 0
  4308  0016DC  81DE               	bsf	___lwdiv@quotient& (0+255),0,b
  4309  0016DE                     l795:
  4310                           
  4311                           ; BSR set to: 0
  4312                           
  4313                           ; BSR set to: 0
  4314  0016DE  90D8               	bcf	status,0,c
  4315  0016E0  33DC               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4316  0016E2  33DB               	rrcf	___lwdiv@divisor& (0+255),f,b
  4317                           
  4318                           ; BSR set to: 0
  4319  0016E4  2FDD               	decfsz	___lwdiv@counter& (0+255),f,b
  4320  0016E6  D7ED               	goto	u1710
  4321  0016E8                     l796:
  4322                           
  4323                           ; BSR set to: 0
  4324                           
  4325                           ; BSR set to: 0
  4326  0016E8  C0DE  F0D9         	movff	___lwdiv@quotient,?___lwdiv
  4327  0016EC  C0DF  F0DA         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4328                           
  4329                           ; BSR set to: 0
  4330  0016F0  0012               	return		;funcret
  4331  0016F2                     __end_of___lwdiv:
  4332                           	opt stack 0
  4333                           tblptru	equ	0xFF8
  4334                           tblptrh	equ	0xFF7
  4335                           tblptrl	equ	0xFF6
  4336                           tablat	equ	0xFF5
  4337                           prodh	equ	0xFF4
  4338                           prodl	equ	0xFF3
  4339                           intcon	equ	0xFF2
  4340                           intcon2	equ	0xFF1
  4341                           indf0	equ	0xFEF
  4342                           postinc0	equ	0xFEE
  4343                           plusw0	equ	0xFEB
  4344                           fsr0h	equ	0xFEA
  4345                           fsr0l	equ	0xFE9
  4346                           wreg	equ	0xFE8
  4347                           indf1	equ	0xFE7
  4348                           postinc1	equ	0xFE6
  4349                           postdec1	equ	0xFE5
  4350                           fsr1h	equ	0xFE2
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           plusw2	equ	0xFDB
  4356                           fsr2h	equ	0xFDA
  4357                           fsr2l	equ	0xFD9
  4358                           status	equ	0xFD8
  4359                           
  4360 ;; *************** function _C_DOOR_ReadSensors *****************
  4361 ;; Defined at:
  4362 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;		None
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  d               1   25[BANK0 ] unsigned char 
  4367 ;; Return value:  Size  Location     Type
  4368 ;;                  1    wreg      void 
  4369 ;; Registers used:
  4370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4371 ;; Tracked objects:
  4372 ;;		On entry : 0/0
  4373 ;;		On exit  : 0/0
  4374 ;;		Unchanged: 0/0
  4375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4376 ;;      Params:         0       0       0       0       0       0       0       0       0
  4377 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4378 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4379 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4380 ;;Total ram usage:        5 bytes
  4381 ;; Hardware stack levels used:    1
  4382 ;; Hardware stack levels required when called:    6
  4383 ;; This function calls:
  4384 ;;		Nothing
  4385 ;; This function is called by:
  4386 ;;		_main
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           	psect	text24
  4391  00143A                     __ptext24:
  4392                           	opt stack 0
  4393  00143A                     _C_DOOR_ReadSensors:
  4394                           	opt stack 24
  4395                           
  4396                           ;DOOR_Controller.c: 103: uint8_t d;
  4397                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;incstack = 0
  4401  00143A  0E00               	movlw	0
  4402  00143C  0100               	movlb	0	; () banked
  4403  00143E  6FDD               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  4404  001440  D03E               	goto	l40
  4405  001442                     
  4406                           ; BSR set to: 0
  4407                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 0x01) == 1);
  4408                           
  4409                           ; BSR set to: 0
  4410  001442  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4411  001444  0D0A               	mullw	10
  4412  001446  0E06               	movlw	6
  4413  001448  26F3               	addwf	prodl,f,c
  4414  00144A  0E00               	movlw	0
  4415  00144C  22F4               	addwfc	prodh,f,c
  4416  00144E  0E60               	movlw	low _doors
  4417  001450  24F3               	addwf	prodl,w,c
  4418  001452  6ED9               	movwf	fsr2l,c
  4419  001454  0E00               	movlw	high _doors
  4420  001456  20F4               	addwfc	prodh,w,c
  4421  001458  6EDA               	movwf	fsr2h,c
  4422  00145A  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4423  00145C  0D0A               	mullw	10
  4424  00145E  0E09               	movlw	9
  4425  001460  26F3               	addwf	prodl,f,c
  4426  001462  0E00               	movlw	0
  4427  001464  22F4               	addwfc	prodh,f,c
  4428  001466  0E60               	movlw	low _doors
  4429  001468  24F3               	addwf	prodl,w,c
  4430  00146A  6EE1               	movwf	fsr1l,c
  4431  00146C  0E00               	movlw	high _doors
  4432  00146E  20F4               	addwfc	prodh,w,c
  4433  001470  6EE2               	movwf	fsr1h,c
  4434  001472  50E7               	movf	indf1,w,c
  4435  001474  6FD9               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4436  001476  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4437  001478  0D0A               	mullw	10
  4438  00147A  0E07               	movlw	7
  4439  00147C  26F3               	addwf	prodl,f,c
  4440  00147E  0E00               	movlw	0
  4441  001480  22F4               	addwfc	prodh,f,c
  4442  001482  0E60               	movlw	low _doors
  4443  001484  24F3               	addwf	prodl,w,c
  4444  001486  6EE1               	movwf	fsr1l,c
  4445  001488  0E00               	movlw	high _doors
  4446  00148A  20F4               	addwfc	prodh,w,c
  4447  00148C  6EE2               	movwf	fsr1h,c
  4448  00148E  CFE6 F0DA          	movff	postinc1,??_C_DOOR_ReadSensors+1
  4449  001492  CFE5 F0DB          	movff	postdec1,??_C_DOOR_ReadSensors+2
  4450  001496  C0DA  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  4451  00149A  C0DB  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  4452  00149E  50E7               	movf	indf1,w,c
  4453  0014A0  6FDC               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  4454  0014A2  2BD9               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  4455  0014A4  D002               	goto	u2104
  4456  0014A6                     u2105:
  4457  0014A6  90D8               	bcf	status,0,c
  4458  0014A8  33DC               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  4459  0014AA                     u2104:
  4460  0014AA  2FD9               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  4461  0014AC  D7FC               	goto	u2105
  4462  0014AE  0100               	movlb	0	; () banked
  4463  0014B0  A1DC               	btfss	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  4464  0014B2  D002               	goto	u2110
  4465  0014B4  0E01               	movlw	1
  4466  0014B6  D001               	goto	u2120
  4467  0014B8                     u2110:
  4468  0014B8  0E00               	movlw	0
  4469  0014BA                     u2120:
  4470  0014BA  6EDF               	movwf	indf2,c
  4471                           
  4472                           ; BSR set to: 0
  4473  0014BC  2BDD               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  4474  0014BE                     l40:
  4475                           
  4476                           ; BSR set to: 0
  4477                           
  4478                           ; BSR set to: 0
  4479  0014BE  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4480  0014C0  6FD9               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4481  0014C2  6BDA               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4482  0014C4  5037               	movf	_door_cnt,w,c
  4483  0014C6  5DD9               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4484  0014C8  51DA               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4485  0014CA  0A80               	xorlw	128
  4486  0014CC  6FDB               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4487  0014CE  5038               	movf	_door_cnt+1,w,c
  4488  0014D0  0A80               	xorlw	128
  4489  0014D2  59DB               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4490  0014D4  B0D8               	btfsc	status,0,c
  4491  0014D6  0012               	return	
  4492  0014D8  D7B4               	goto	l41
  4493  0014DA                     __end_of_C_DOOR_ReadSensors:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           prodh	equ	0xFF4
  4500                           prodl	equ	0xFF3
  4501                           intcon	equ	0xFF2
  4502                           intcon2	equ	0xFF1
  4503                           indf0	equ	0xFEF
  4504                           postinc0	equ	0xFEE
  4505                           plusw0	equ	0xFEB
  4506                           fsr0h	equ	0xFEA
  4507                           fsr0l	equ	0xFE9
  4508                           wreg	equ	0xFE8
  4509                           indf1	equ	0xFE7
  4510                           postinc1	equ	0xFE6
  4511                           postdec1	equ	0xFE5
  4512                           fsr1h	equ	0xFE2
  4513                           fsr1l	equ	0xFE1
  4514                           indf2	equ	0xFDF
  4515                           postinc2	equ	0xFDE
  4516                           postdec2	equ	0xFDD
  4517                           plusw2	equ	0xFDB
  4518                           fsr2h	equ	0xFDA
  4519                           fsr2l	equ	0xFD9
  4520                           status	equ	0xFD8
  4521                           
  4522 ;; *************** function _LowISR *****************
  4523 ;; Defined at:
  4524 ;;		line 193 in file "main.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;		None
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      void 
  4531 ;; Registers used:
  4532 ;;		wreg, status,2, status,0
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4538 ;;      Params:         0       0       0       0       0       0       0       0       0
  4539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4540 ;;      Temps:          0      21       0       0       0       0       0       0       0
  4541 ;;      Totals:         0      21       0       0       0       0       0       0       0
  4542 ;;Total ram usage:       21 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    5
  4545 ;; This function calls:
  4546 ;;		Nothing
  4547 ;; This function is called by:
  4548 ;;		Interrupt level 1
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	intcodelo
  4553  000018                     __pintcodelo:
  4554                           	opt stack 0
  4555  000018                     _LowISR:
  4556                           	opt stack 21
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;incstack = 0
  4560  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4561  00001A  CFD8 F0C4          	movff	status,??_LowISR
  4562  00001E  CFE8 F0C5          	movff	wreg,??_LowISR+1
  4563  000022  CFE0 F0C6          	movff	bsr,??_LowISR+2
  4564  000026  CFFA F0C7          	movff	pclath,??_LowISR+3
  4565  00002A  CFFB F0C8          	movff	pclatu,??_LowISR+4
  4566  00002E  CFE9 F0C9          	movff	fsr0l,??_LowISR+5
  4567  000032  CFEA F0CA          	movff	fsr0h,??_LowISR+6
  4568  000036  CFE1 F0CB          	movff	fsr1l,??_LowISR+7
  4569  00003A  CFE2 F0CC          	movff	fsr1h,??_LowISR+8
  4570  00003E  CFD9 F0CD          	movff	fsr2l,??_LowISR+9
  4571  000042  CFDA F0CE          	movff	fsr2h,??_LowISR+10
  4572  000046  CFF3 F0CF          	movff	prodl,??_LowISR+11
  4573  00004A  CFF4 F0D0          	movff	prodh,??_LowISR+12
  4574  00004E  CFF6 F0D1          	movff	tblptrl,??_LowISR+13
  4575  000052  CFF7 F0D2          	movff	tblptrh,??_LowISR+14
  4576  000056  CFF8 F0D3          	movff	tblptru,??_LowISR+15
  4577  00005A  CFF5 F0D4          	movff	tablat,??_LowISR+16
  4578  00005E  C04A  F0D5         	movff	btemp,??_LowISR+17
  4579  000062  C04B  F0D6         	movff	btemp+1,??_LowISR+18
  4580  000066  C04C  F0D7         	movff	btemp+2,??_LowISR+19
  4581  00006A  C04D  F0D8         	movff	btemp+3,??_LowISR+20
  4582                           
  4583                           ;main.c: 195: if (INTCONbits.TMR0IF) {
  4584  00006E  A4F2               	btfss	intcon,2,c	;volatile
  4585  000070  D003               	goto	i1l356
  4586                           
  4587                           ;main.c: 196: INTCONbits.TMR0IF = 0;
  4588  000072  94F2               	bcf	intcon,2,c	;volatile
  4589                           
  4590                           ;main.c: 197: tick = 1;
  4591  000074  0E01               	movlw	1
  4592  000076  6E3D               	movwf	_tick,c
  4593  000078                     i1l356:
  4594                           
  4595                           ;main.c: 198: }
  4596                           ;main.c: 201: if (PIR1bits.TMR1IF) {
  4597  000078  A09E               	btfss	3998,0,c	;volatile
  4598  00007A  D00C               	goto	i1l357
  4599                           
  4600                           ;main.c: 202: TMR1H = 0x5E;
  4601  00007C  0E5E               	movlw	94
  4602  00007E  6ECF               	movwf	4047,c	;volatile
  4603                           
  4604                           ;main.c: 203: TMR1L = 0x00;
  4605  000080  0E00               	movlw	0
  4606  000082  6ECE               	movwf	4046,c	;volatile
  4607                           
  4608                           ;main.c: 205: if (lockDelayCnt < 100-1) {
  4609  000084  0E63               	movlw	99
  4610  000086  603F               	cpfslt	_lockDelayCnt,c
  4611  000088  D002               	goto	i1l358
  4612                           
  4613                           ;main.c: 206: lockDelayCnt++;
  4614  00008A  2A3F               	incf	_lockDelayCnt,f,c
  4615                           
  4616                           ;main.c: 207: } else {
  4617  00008C  D002               	goto	i1l359
  4618  00008E                     i1l358:
  4619                           
  4620                           ;main.c: 208: lock = 1;
  4621  00008E  0E01               	movlw	1
  4622  000090  6E3C               	movwf	_lock,c
  4623  000092                     i1l359:
  4624                           
  4625                           ;main.c: 209: }
  4626                           ;main.c: 211: PIR1bits.TMR1IF = 0;
  4627  000092  909E               	bcf	3998,0,c	;volatile
  4628  000094                     i1l357:
  4629  000094  C0D8  F04D         	movff	??_LowISR+20,btemp+3
  4630  000098  C0D7  F04C         	movff	??_LowISR+19,btemp+2
  4631  00009C  C0D6  F04B         	movff	??_LowISR+18,btemp+1
  4632  0000A0  C0D5  F04A         	movff	??_LowISR+17,btemp
  4633  0000A4  C0D4  FFF5         	movff	??_LowISR+16,tablat
  4634  0000A8  C0D3  FFF8         	movff	??_LowISR+15,tblptru
  4635  0000AC  C0D2  FFF7         	movff	??_LowISR+14,tblptrh
  4636  0000B0  C0D1  FFF6         	movff	??_LowISR+13,tblptrl
  4637  0000B4  C0D0  FFF4         	movff	??_LowISR+12,prodh
  4638  0000B8  C0CF  FFF3         	movff	??_LowISR+11,prodl
  4639  0000BC  C0CE  FFDA         	movff	??_LowISR+10,fsr2h
  4640  0000C0  C0CD  FFD9         	movff	??_LowISR+9,fsr2l
  4641  0000C4  C0CC  FFE2         	movff	??_LowISR+8,fsr1h
  4642  0000C8  C0CB  FFE1         	movff	??_LowISR+7,fsr1l
  4643  0000CC  C0CA  FFEA         	movff	??_LowISR+6,fsr0h
  4644  0000D0  C0C9  FFE9         	movff	??_LowISR+5,fsr0l
  4645  0000D4  C0C8  FFFB         	movff	??_LowISR+4,pclatu
  4646  0000D8  C0C7  FFFA         	movff	??_LowISR+3,pclath
  4647  0000DC  C0C6  FFE0         	movff	??_LowISR+2,bsr
  4648  0000E0  C0C5  FFE8         	movff	??_LowISR+1,wreg
  4649  0000E4  C0C4  FFD8         	movff	??_LowISR,status
  4650  0000E8  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4651  0000EA  0010               	retfie	
  4652  0000EC                     __end_of_LowISR:
  4653                           	opt stack 0
  4654                           pclatu	equ	0xFFB
  4655                           pclath	equ	0xFFA
  4656                           tblptru	equ	0xFF8
  4657                           tblptrh	equ	0xFF7
  4658                           tblptrl	equ	0xFF6
  4659                           tablat	equ	0xFF5
  4660                           prodh	equ	0xFF4
  4661                           prodl	equ	0xFF3
  4662                           intcon	equ	0xFF2
  4663                           intcon2	equ	0xFF1
  4664                           indf0	equ	0xFEF
  4665                           postinc0	equ	0xFEE
  4666                           plusw0	equ	0xFEB
  4667                           fsr0h	equ	0xFEA
  4668                           fsr0l	equ	0xFE9
  4669                           wreg	equ	0xFE8
  4670                           indf1	equ	0xFE7
  4671                           postinc1	equ	0xFE6
  4672                           postdec1	equ	0xFE5
  4673                           fsr1h	equ	0xFE2
  4674                           fsr1l	equ	0xFE1
  4675                           bsr	equ	0xFE0
  4676                           indf2	equ	0xFDF
  4677                           postinc2	equ	0xFDE
  4678                           postdec2	equ	0xFDD
  4679                           plusw2	equ	0xFDB
  4680                           fsr2h	equ	0xFDA
  4681                           fsr2l	equ	0xFD9
  4682                           status	equ	0xFD8
  4683                           
  4684 ;; *************** function _HighISR *****************
  4685 ;; Defined at:
  4686 ;;		line 255 in file "Drivers/UART_Driver.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;		None
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  1    wreg      void 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4700 ;;      Params:         0       0       0       0       0       0       0       0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4702 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4703 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4704 ;;Total ram usage:       18 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    4
  4707 ;; This function calls:
  4708 ;;		_fillDataBuffer
  4709 ;; This function is called by:
  4710 ;;		Interrupt level 2
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           	psect	intcode
  4715  000008                     __pintcode:
  4716                           	opt stack 0
  4717  000008                     _HighISR:
  4718                           	opt stack 21
  4719                           
  4720                           ;incstack = 0
  4721  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4722  00000A  ED0F  F009         	call	int_func,f	;refresh shadow registers
  4723                           pclatu	equ	0xFFB
  4724                           pclath	equ	0xFFA
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           intcon2	equ	0xFF1
  4733                           indf0	equ	0xFEF
  4734                           postinc0	equ	0xFEE
  4735                           plusw0	equ	0xFEB
  4736                           fsr0h	equ	0xFEA
  4737                           fsr0l	equ	0xFE9
  4738                           wreg	equ	0xFE8
  4739                           indf1	equ	0xFE7
  4740                           postinc1	equ	0xFE6
  4741                           postdec1	equ	0xFE5
  4742                           fsr1h	equ	0xFE2
  4743                           fsr1l	equ	0xFE1
  4744                           bsr	equ	0xFE0
  4745                           indf2	equ	0xFDF
  4746                           postinc2	equ	0xFDE
  4747                           postdec2	equ	0xFDD
  4748                           plusw2	equ	0xFDB
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753                           	psect	intcode_body
  4754  00121E                     __pintcode_body:
  4755                           	opt stack 21
  4756  00121E                     int_func:
  4757                           	opt stack 21
  4758  00121E  0006               	pop		; remove dummy address from shadow register refresh
  4759  001220  CFFA F016          	movff	pclath,??_HighISR
  4760  001224  CFFB F017          	movff	pclatu,??_HighISR+1
  4761  001228  CFE9 F018          	movff	fsr0l,??_HighISR+2
  4762  00122C  CFEA F019          	movff	fsr0h,??_HighISR+3
  4763  001230  CFE1 F01A          	movff	fsr1l,??_HighISR+4
  4764  001234  CFE2 F01B          	movff	fsr1h,??_HighISR+5
  4765  001238  CFD9 F01C          	movff	fsr2l,??_HighISR+6
  4766  00123C  CFDA F01D          	movff	fsr2h,??_HighISR+7
  4767  001240  CFF3 F01E          	movff	prodl,??_HighISR+8
  4768  001244  CFF4 F01F          	movff	prodh,??_HighISR+9
  4769  001248  CFF6 F020          	movff	tblptrl,??_HighISR+10
  4770  00124C  CFF7 F021          	movff	tblptrh,??_HighISR+11
  4771  001250  CFF8 F022          	movff	tblptru,??_HighISR+12
  4772  001254  CFF5 F023          	movff	tablat,??_HighISR+13
  4773  001258  C04A  F024         	movff	btemp,??_HighISR+14
  4774  00125C  C04B  F025         	movff	btemp+1,??_HighISR+15
  4775  001260  C04C  F026         	movff	btemp+2,??_HighISR+16
  4776  001264  C04D  F027         	movff	btemp+3,??_HighISR+17
  4777                           
  4778                           ;UART_Driver.c: 256: if (PIR1bits.RC1IF) {
  4779  001268  AA9E               	btfss	3998,5,c	;volatile
  4780  00126A  D00E               	goto	i2l176
  4781                           
  4782                           ;UART_Driver.c: 257: PIR1bits.RC1IF = 0;
  4783  00126C  9A9E               	bcf	3998,5,c	;volatile
  4784                           
  4785                           ;UART_Driver.c: 260: if(RCSTAbits.FERR == 1) {
  4786  00126E  A4AB               	btfss	4011,2,c	;volatile
  4787  001270  D003               	goto	i2l177
  4788                           
  4789                           ;UART_Driver.c: 261: RCREG = 0x00;
  4790  001272  0E00               	movlw	0
  4791  001274  6EAE               	movwf	4014,c	;volatile
  4792                           
  4793                           ;UART_Driver.c: 262: return;
  4794  001276  D008               	goto	i2l176
  4795  001278                     i2l177:
  4796                           
  4797                           ;UART_Driver.c: 263: }
  4798                           ;UART_Driver.c: 265: if(RCSTAbits.OERR == 1) {
  4799  001278  A2AB               	btfss	4011,1,c	;volatile
  4800  00127A  D003               	goto	i2l179
  4801                           
  4802                           ;UART_Driver.c: 266: RCSTAbits.CREN = 0;
  4803  00127C  98AB               	bcf	4011,4,c	;volatile
  4804                           
  4805                           ;UART_Driver.c: 267: RCSTAbits.CREN = 1;
  4806  00127E  88AB               	bsf	4011,4,c	;volatile
  4807                           
  4808                           ;UART_Driver.c: 268: return;
  4809  001280  D003               	goto	i2l176
  4810  001282                     i2l179:
  4811                           
  4812                           ;UART_Driver.c: 269: }
  4813                           ;UART_Driver.c: 270: fillDataBuffer(RCREG);
  4814  001282  50AE               	movf	4014,w,c	;volatile
  4815  001284  EC6A  F005         	call	_fillDataBuffer
  4816  001288                     i2l176:
  4817  001288  C027  F04D         	movff	??_HighISR+17,btemp+3
  4818  00128C  C026  F04C         	movff	??_HighISR+16,btemp+2
  4819  001290  C025  F04B         	movff	??_HighISR+15,btemp+1
  4820  001294  C024  F04A         	movff	??_HighISR+14,btemp
  4821  001298  C023  FFF5         	movff	??_HighISR+13,tablat
  4822  00129C  C022  FFF8         	movff	??_HighISR+12,tblptru
  4823  0012A0  C021  FFF7         	movff	??_HighISR+11,tblptrh
  4824  0012A4  C020  FFF6         	movff	??_HighISR+10,tblptrl
  4825  0012A8  C01F  FFF4         	movff	??_HighISR+9,prodh
  4826  0012AC  C01E  FFF3         	movff	??_HighISR+8,prodl
  4827  0012B0  C01D  FFDA         	movff	??_HighISR+7,fsr2h
  4828  0012B4  C01C  FFD9         	movff	??_HighISR+6,fsr2l
  4829  0012B8  C01B  FFE2         	movff	??_HighISR+5,fsr1h
  4830  0012BC  C01A  FFE1         	movff	??_HighISR+4,fsr1l
  4831  0012C0  C019  FFEA         	movff	??_HighISR+3,fsr0h
  4832  0012C4  C018  FFE9         	movff	??_HighISR+2,fsr0l
  4833  0012C8  C017  FFFB         	movff	??_HighISR+1,pclatu
  4834  0012CC  C016  FFFA         	movff	??_HighISR,pclath
  4835  0012D0  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4836  0012D2  0011               	retfie		f
  4837  0012D4                     __end_of_HighISR:
  4838                           	opt stack 0
  4839                           pclatu	equ	0xFFB
  4840                           pclath	equ	0xFFA
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           intcon2	equ	0xFF1
  4849                           indf0	equ	0xFEF
  4850                           postinc0	equ	0xFEE
  4851                           plusw0	equ	0xFEB
  4852                           fsr0h	equ	0xFEA
  4853                           fsr0l	equ	0xFE9
  4854                           wreg	equ	0xFE8
  4855                           indf1	equ	0xFE7
  4856                           postinc1	equ	0xFE6
  4857                           postdec1	equ	0xFE5
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           bsr	equ	0xFE0
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           plusw2	equ	0xFDB
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869 ;; *************** function _fillDataBuffer *****************
  4870 ;; Defined at:
  4871 ;;		line 68 in file "Drivers/UART_Driver.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  data            1    wreg     unsigned char 
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;  data            1   20[COMRAM] unsigned char 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4885 ;;      Params:         0       0       0       0       0       0       0       0       0
  4886 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4888 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4889 ;;Total ram usage:        1 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    3
  4892 ;; This function calls:
  4893 ;;		_acknowledge
  4894 ;; This function is called by:
  4895 ;;		_HighISR
  4896 ;; This function uses a non-reentrant model
  4897 ;;
  4898                           
  4899                           	psect	text27
  4900  000AD4                     __ptext27:
  4901                           	opt stack 0
  4902  000AD4                     _fillDataBuffer:
  4903                           	opt stack 21
  4904                           
  4905                           ;incstack = 0
  4906                           ;fillDataBuffer@data stored from wreg
  4907  000AD4  6E15               	movwf	fillDataBuffer@data,c
  4908                           
  4909                           ;UART_Driver.c: 69: switch(readBuffer.state) {
  4910  000AD6  D0B1               	goto	i2l120
  4911  000AD8                     
  4912                           ;UART_Driver.c: 71: if(data == 0x26) {
  4913  000AD8  0E26               	movlw	38
  4914  000ADA  1815               	xorwf	fillDataBuffer@data,w,c
  4915  000ADC  A4D8               	btfss	status,2,c
  4916  000ADE  D00E               	goto	i2l122
  4917                           
  4918                           ;UART_Driver.c: 72: readBuffer.typeCnt = 0;
  4919  000AE0  0E00               	movlw	0
  4920  000AE2  0101               	movlb	1	; () banked
  4921  000AE4  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4922                           
  4923                           ;UART_Driver.c: 73: readBuffer.senderCnt = 0;
  4924  000AE6  0E00               	movlw	0
  4925  000AE8  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4926                           
  4927                           ;UART_Driver.c: 74: readBuffer.commandCnt = 0;
  4928  000AEA  0E00               	movlw	0
  4929  000AEC  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4930                           
  4931                           ;UART_Driver.c: 75: readBuffer.messageCnt = 0;
  4932  000AEE  0E00               	movlw	0
  4933  000AF0  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4934                           
  4935                           ;UART_Driver.c: 76: readReady = 0;
  4936  000AF2  0E00               	movlw	0
  4937  000AF4  6E40               	movwf	_readReady,c
  4938                           
  4939                           ;UART_Driver.c: 77: readBuffer.state = 0x01;
  4940  000AF6  0E01               	movlw	1
  4941  000AF8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4942                           
  4943                           ;UART_Driver.c: 78: } else {
  4944  000AFA  0012               	return	
  4945  000AFC                     i2l122:
  4946                           
  4947                           ;UART_Driver.c: 79: readBuffer.state = 0x00;
  4948                           
  4949                           ; BSR set to: 1
  4950  000AFC  0E00               	movlw	0
  4951  000AFE  0101               	movlb	1	; () banked
  4952  000B00  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4953                           
  4954                           ; BSR set to: 1
  4955                           ;UART_Driver.c: 81: }
  4956                           ;UART_Driver.c: 82: break;
  4957                           
  4958                           ; BSR set to: 1
  4959                           ;UART_Driver.c: 80: return;
  4960  000B02  0012               	return	
  4961  000B04                     
  4962                           ; BSR set to: 1
  4963                           ;UART_Driver.c: 85: if (data == 0x3A) {
  4964                           
  4965                           ; BSR set to: 1
  4966  000B04  0E3A               	movlw	58
  4967  000B06  1815               	xorwf	fillDataBuffer@data,w,c
  4968  000B08  A4D8               	btfss	status,2,c
  4969  000B0A  D00D               	goto	i2l127
  4970                           
  4971                           ; BSR set to: 1
  4972                           ;UART_Driver.c: 86: readBuffer.state = 0x02;
  4973  000B0C  0E02               	movlw	2
  4974  000B0E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4975                           
  4976                           ; BSR set to: 1
  4977                           ;UART_Driver.c: 87: readBuffer.type[readBuffer.typeCnt] = '\0';
  4978  000B10  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4979  000B12  0D01               	mullw	1
  4980  000B14  0E00               	movlw	low _readBuffer
  4981  000B16  24F3               	addwf	prodl,w,c
  4982  000B18  6ED9               	movwf	fsr2l,c
  4983  000B1A  0E01               	movlw	high _readBuffer
  4984  000B1C  20F4               	addwfc	prodh,w,c
  4985  000B1E  6EDA               	movwf	fsr2h,c
  4986  000B20  0E00               	movlw	0
  4987  000B22  6EDF               	movwf	indf2,c
  4988                           
  4989                           ;UART_Driver.c: 88: } else {
  4990  000B24  0012               	return	
  4991  000B26                     i2l127:
  4992                           
  4993                           ; BSR set to: 1
  4994                           ;UART_Driver.c: 89: readBuffer.type[readBuffer.typeCnt] = data;
  4995                           
  4996                           ; BSR set to: 1
  4997  000B26  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4998  000B28  0D01               	mullw	1
  4999  000B2A  0E00               	movlw	low _readBuffer
  5000  000B2C  24F3               	addwf	prodl,w,c
  5001  000B2E  6ED9               	movwf	fsr2l,c
  5002  000B30  0E01               	movlw	high _readBuffer
  5003  000B32  20F4               	addwfc	prodh,w,c
  5004  000B34  6EDA               	movwf	fsr2h,c
  5005  000B36  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5006                           
  5007                           ; BSR set to: 1
  5008                           ;UART_Driver.c: 90: readBuffer.typeCnt++;
  5009  000B3A  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5010                           
  5011                           ; BSR set to: 1
  5012                           ;UART_Driver.c: 91: if(readBuffer.typeCnt > 10) {
  5013  000B3C  0E0A               	movlw	10
  5014  000B3E  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5015  000B40  0012               	return	
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;UART_Driver.c: 92: readBuffer.typeCnt = 0;
  5019  000B42  0E00               	movlw	0
  5020  000B44  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5021                           
  5022                           ; BSR set to: 1
  5023                           ;UART_Driver.c: 93: }
  5024                           ;UART_Driver.c: 94: }
  5025                           ;UART_Driver.c: 95: break;
  5026                           
  5027                           ; BSR set to: 1
  5028  000B46  0012               	return	
  5029  000B48                     
  5030                           ; BSR set to: 1
  5031                           ;UART_Driver.c: 98: if (data == 0x3A) {
  5032                           
  5033                           ; BSR set to: 1
  5034  000B48  0E3A               	movlw	58
  5035  000B4A  1815               	xorwf	fillDataBuffer@data,w,c
  5036  000B4C  A4D8               	btfss	status,2,c
  5037  000B4E  D00D               	goto	i2l131
  5038                           
  5039                           ; BSR set to: 1
  5040                           ;UART_Driver.c: 99: readBuffer.state = 0x03;
  5041  000B50  0E03               	movlw	3
  5042  000B52  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5043                           
  5044                           ; BSR set to: 1
  5045                           ;UART_Driver.c: 100: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5046  000B54  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5047  000B56  0D01               	mullw	1
  5048  000B58  0E0B               	movlw	low (_readBuffer+11)
  5049  000B5A  24F3               	addwf	prodl,w,c
  5050  000B5C  6ED9               	movwf	fsr2l,c
  5051  000B5E  0E01               	movlw	high (_readBuffer+11)
  5052  000B60  20F4               	addwfc	prodh,w,c
  5053  000B62  6EDA               	movwf	fsr2h,c
  5054  000B64  0E00               	movlw	0
  5055  000B66  6EDF               	movwf	indf2,c
  5056                           
  5057                           ;UART_Driver.c: 101: } else {
  5058  000B68  0012               	return	
  5059  000B6A                     i2l131:
  5060                           
  5061                           ; BSR set to: 1
  5062                           ;UART_Driver.c: 102: readBuffer.sender[readBuffer.senderCnt] = data;
  5063                           
  5064                           ; BSR set to: 1
  5065  000B6A  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5066  000B6C  0D01               	mullw	1
  5067  000B6E  0E0B               	movlw	low (_readBuffer+11)
  5068  000B70  24F3               	addwf	prodl,w,c
  5069  000B72  6ED9               	movwf	fsr2l,c
  5070  000B74  0E01               	movlw	high (_readBuffer+11)
  5071  000B76  20F4               	addwfc	prodh,w,c
  5072  000B78  6EDA               	movwf	fsr2h,c
  5073  000B7A  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5074                           
  5075                           ; BSR set to: 1
  5076                           ;UART_Driver.c: 103: readBuffer.senderCnt++;
  5077  000B7E  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5078                           
  5079                           ; BSR set to: 1
  5080                           ;UART_Driver.c: 104: if(readBuffer.senderCnt > 50) {
  5081  000B80  0E32               	movlw	50
  5082  000B82  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5083  000B84  0012               	return	
  5084                           
  5085                           ; BSR set to: 1
  5086                           ;UART_Driver.c: 105: readBuffer.senderCnt = 0;
  5087  000B86  0E00               	movlw	0
  5088  000B88  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5089                           
  5090                           ; BSR set to: 1
  5091                           ;UART_Driver.c: 106: }
  5092                           ;UART_Driver.c: 107: }
  5093                           ;UART_Driver.c: 108: break;
  5094                           
  5095                           ; BSR set to: 1
  5096  000B8A  0012               	return	
  5097  000B8C                     
  5098                           ; BSR set to: 1
  5099                           ;UART_Driver.c: 111: if (data == 0x3A) {
  5100                           
  5101                           ; BSR set to: 1
  5102  000B8C  0E3A               	movlw	58
  5103  000B8E  1815               	xorwf	fillDataBuffer@data,w,c
  5104  000B90  A4D8               	btfss	status,2,c
  5105  000B92  D00D               	goto	i2l135
  5106                           
  5107                           ; BSR set to: 1
  5108                           ;UART_Driver.c: 112: readBuffer.state = 0x04;
  5109  000B94  0E04               	movlw	4
  5110  000B96  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5111                           
  5112                           ; BSR set to: 1
  5113                           ;UART_Driver.c: 113: readBuffer.command[readBuffer.commandCnt] = '\0';
  5114  000B98  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5115  000B9A  0D01               	mullw	1
  5116  000B9C  0E3E               	movlw	low (_readBuffer+62)
  5117  000B9E  24F3               	addwf	prodl,w,c
  5118  000BA0  6ED9               	movwf	fsr2l,c
  5119  000BA2  0E01               	movlw	high (_readBuffer+62)
  5120  000BA4  20F4               	addwfc	prodh,w,c
  5121  000BA6  6EDA               	movwf	fsr2h,c
  5122  000BA8  0E00               	movlw	0
  5123  000BAA  6EDF               	movwf	indf2,c
  5124                           
  5125                           ;UART_Driver.c: 114: } else {
  5126  000BAC  0012               	return	
  5127  000BAE                     i2l135:
  5128                           
  5129                           ; BSR set to: 1
  5130                           ;UART_Driver.c: 115: readBuffer.command[readBuffer.commandCnt] = data;
  5131                           
  5132                           ; BSR set to: 1
  5133  000BAE  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5134  000BB0  0D01               	mullw	1
  5135  000BB2  0E3E               	movlw	low (_readBuffer+62)
  5136  000BB4  24F3               	addwf	prodl,w,c
  5137  000BB6  6ED9               	movwf	fsr2l,c
  5138  000BB8  0E01               	movlw	high (_readBuffer+62)
  5139  000BBA  20F4               	addwfc	prodh,w,c
  5140  000BBC  6EDA               	movwf	fsr2h,c
  5141  000BBE  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5142                           
  5143                           ; BSR set to: 1
  5144                           ;UART_Driver.c: 116: readBuffer.commandCnt++;
  5145  000BC2  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5146                           
  5147                           ; BSR set to: 1
  5148                           ;UART_Driver.c: 117: if(readBuffer.commandCnt > 50) {
  5149  000BC4  0E32               	movlw	50
  5150  000BC6  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5151  000BC8  0012               	return	
  5152                           
  5153                           ; BSR set to: 1
  5154                           ;UART_Driver.c: 118: readBuffer.commandCnt = 0;
  5155  000BCA  0E00               	movlw	0
  5156  000BCC  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5157                           
  5158                           ; BSR set to: 1
  5159                           ;UART_Driver.c: 119: }
  5160                           ;UART_Driver.c: 120: }
  5161                           ;UART_Driver.c: 121: break;
  5162                           
  5163                           ; BSR set to: 1
  5164  000BCE  0012               	return	
  5165  000BD0                     
  5166                           ; BSR set to: 1
  5167                           ;UART_Driver.c: 124: if (data == 0x3A) {
  5168                           
  5169                           ; BSR set to: 1
  5170  000BD0  0E3A               	movlw	58
  5171  000BD2  1815               	xorwf	fillDataBuffer@data,w,c
  5172  000BD4  A4D8               	btfss	status,2,c
  5173  000BD6  D00D               	goto	i2l139
  5174                           
  5175                           ; BSR set to: 1
  5176                           ;UART_Driver.c: 125: readBuffer.state = 0x05;
  5177  000BD8  0E05               	movlw	5
  5178  000BDA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5179                           
  5180                           ; BSR set to: 1
  5181                           ;UART_Driver.c: 126: readBuffer.message[readBuffer.messageCnt] = '\0';
  5182  000BDC  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5183  000BDE  0D01               	mullw	1
  5184  000BE0  0E71               	movlw	low (_readBuffer+113)
  5185  000BE2  24F3               	addwf	prodl,w,c
  5186  000BE4  6ED9               	movwf	fsr2l,c
  5187  000BE6  0E01               	movlw	high (_readBuffer+113)
  5188  000BE8  20F4               	addwfc	prodh,w,c
  5189  000BEA  6EDA               	movwf	fsr2h,c
  5190  000BEC  0E00               	movlw	0
  5191  000BEE  6EDF               	movwf	indf2,c
  5192                           
  5193                           ;UART_Driver.c: 127: } else {
  5194  000BF0  0012               	return	
  5195  000BF2                     i2l139:
  5196                           
  5197                           ; BSR set to: 1
  5198                           ;UART_Driver.c: 128: readBuffer.message[readBuffer.messageCnt] = data;
  5199                           
  5200                           ; BSR set to: 1
  5201  000BF2  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5202  000BF4  0D01               	mullw	1
  5203  000BF6  0E71               	movlw	low (_readBuffer+113)
  5204  000BF8  24F3               	addwf	prodl,w,c
  5205  000BFA  6ED9               	movwf	fsr2l,c
  5206  000BFC  0E01               	movlw	high (_readBuffer+113)
  5207  000BFE  20F4               	addwfc	prodh,w,c
  5208  000C00  6EDA               	movwf	fsr2h,c
  5209  000C02  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5210                           
  5211                           ; BSR set to: 1
  5212                           ;UART_Driver.c: 129: readBuffer.messageCnt++;
  5213  000C06  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5214                           
  5215                           ; BSR set to: 1
  5216                           ;UART_Driver.c: 130: if(readBuffer.messageCnt > 50) {
  5217  000C08  0E32               	movlw	50
  5218  000C0A  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5219  000C0C  0012               	return	
  5220                           
  5221                           ; BSR set to: 1
  5222                           ;UART_Driver.c: 131: readBuffer.messageCnt = 0;
  5223  000C0E  0E00               	movlw	0
  5224  000C10  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5225                           
  5226                           ; BSR set to: 1
  5227                           ;UART_Driver.c: 132: }
  5228                           ;UART_Driver.c: 133: }
  5229                           ;UART_Driver.c: 134: break;
  5230                           
  5231                           ; BSR set to: 1
  5232  000C12  0012               	return	
  5233  000C14                     
  5234                           ; BSR set to: 1
  5235                           ;UART_Driver.c: 137: if (data == 0x24) {
  5236                           
  5237                           ; BSR set to: 1
  5238  000C14  0E24               	movlw	36
  5239  000C16  1815               	xorwf	fillDataBuffer@data,w,c
  5240  000C18  A4D8               	btfss	status,2,c
  5241  000C1A  D008               	goto	i2l143
  5242                           
  5243                           ; BSR set to: 1
  5244                           ;UART_Driver.c: 138: acknowledge();
  5245  000C1C  EC1F  F00B         	call	_acknowledge	;wreg free
  5246                           
  5247                           ;UART_Driver.c: 139: readBuffer.state = 0x00;
  5248  000C20  0E00               	movlw	0
  5249  000C22  0101               	movlb	1	; () banked
  5250  000C24  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5251                           
  5252                           ; BSR set to: 1
  5253                           ;UART_Driver.c: 140: readReady = 1;
  5254  000C26  0E01               	movlw	1
  5255  000C28  6E40               	movwf	_readReady,c
  5256                           
  5257                           ;UART_Driver.c: 141: } else {
  5258  000C2A  0012               	return	
  5259  000C2C                     i2l143:
  5260                           
  5261                           ; BSR set to: 1
  5262                           ;UART_Driver.c: 143: readBuffer.readId = (uint8_t)(data - 0x30);
  5263                           
  5264                           ; BSR set to: 1
  5265  000C2C  5015               	movf	fillDataBuffer@data,w,c
  5266  000C2E  0FD0               	addlw	208
  5267  000C30  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  5268                           
  5269                           ; BSR set to: 1
  5270                           ;UART_Driver.c: 144: }
  5271                           ;UART_Driver.c: 145: break;
  5272  000C32  0012               	return	
  5273  000C34                     
  5274                           ; BSR set to: 1
  5275                           ;UART_Driver.c: 148: readBuffer.state = 0x00;
  5276                           
  5277                           ; BSR set to: 1
  5278  000C34  0E00               	movlw	0
  5279  000C36  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5280                           
  5281                           ; BSR set to: 1
  5282                           ;UART_Driver.c: 150: }
  5283                           
  5284                           ;UART_Driver.c: 149: break;
  5285  000C38  0012               	return	
  5286  000C3A                     i2l120:
  5287                           
  5288                           ; BSR set to: 1
  5289  000C3A  0101               	movlb	1	; () banked
  5290  000C3C  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  5291                           
  5292                           ; Switch size 1, requested type "space"
  5293                           ; Number of cases is 6, Range of values is 0 to 5
  5294                           ; switch strategies available:
  5295                           ; Name         Instructions Cycles
  5296                           ; simple_byte           19    10 (average)
  5297                           ;	Chosen strategy is simple_byte
  5298  000C3E  0A00               	xorlw	0	; case 0
  5299  000C40  B4D8               	btfsc	status,2,c
  5300  000C42  D74A               	goto	i2l121
  5301  000C44  0A01               	xorlw	1	; case 1
  5302  000C46  B4D8               	btfsc	status,2,c
  5303  000C48  D75D               	goto	i2l126
  5304  000C4A  0A03               	xorlw	3	; case 2
  5305  000C4C  B4D8               	btfsc	status,2,c
  5306  000C4E  D77C               	goto	i2l130
  5307  000C50  0A01               	xorlw	1	; case 3
  5308  000C52  B4D8               	btfsc	status,2,c
  5309  000C54  D79B               	goto	i2l134
  5310  000C56  0A07               	xorlw	7	; case 4
  5311  000C58  B4D8               	btfsc	status,2,c
  5312  000C5A  D7BA               	goto	i2l138
  5313  000C5C  0A01               	xorlw	1	; case 5
  5314  000C5E  B4D8               	btfsc	status,2,c
  5315  000C60  D7D9               	goto	i2l142
  5316  000C62  D7E8               	goto	i2l145
  5317  000C64                     __end_of_fillDataBuffer:
  5318                           	opt stack 0
  5319                           pclatu	equ	0xFFB
  5320                           pclath	equ	0xFFA
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           intcon2	equ	0xFF1
  5329                           indf0	equ	0xFEF
  5330                           postinc0	equ	0xFEE
  5331                           plusw0	equ	0xFEB
  5332                           fsr0h	equ	0xFEA
  5333                           fsr0l	equ	0xFE9
  5334                           wreg	equ	0xFE8
  5335                           indf1	equ	0xFE7
  5336                           postinc1	equ	0xFE6
  5337                           postdec1	equ	0xFE5
  5338                           fsr1h	equ	0xFE2
  5339                           fsr1l	equ	0xFE1
  5340                           bsr	equ	0xFE0
  5341                           indf2	equ	0xFDF
  5342                           postinc2	equ	0xFDE
  5343                           postdec2	equ	0xFDD
  5344                           plusw2	equ	0xFDB
  5345                           fsr2h	equ	0xFDA
  5346                           fsr2l	equ	0xFD9
  5347                           status	equ	0xFD8
  5348                           
  5349 ;; *************** function _acknowledge *****************
  5350 ;; Defined at:
  5351 ;;		line 153 in file "Drivers/UART_Driver.c"
  5352 ;; Parameters:    Size  Location     Type
  5353 ;;		None
  5354 ;; Auto vars:     Size  Location     Type
  5355 ;;		None
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  1    wreg      void 
  5358 ;; Registers used:
  5359 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5365 ;;      Params:         0       0       0       0       0       0       0       0       0
  5366 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5367 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5368 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5369 ;;Total ram usage:        0 bytes
  5370 ;; Hardware stack levels used:    1
  5371 ;; Hardware stack levels required when called:    2
  5372 ;; This function calls:
  5373 ;;		i2_printf
  5374 ;; This function is called by:
  5375 ;;		_fillDataBuffer
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text28
  5380  00163E                     __ptext28:
  5381                           	opt stack 0
  5382  00163E                     _acknowledge:
  5383                           	opt stack 21
  5384                           
  5385                           ;UART_Driver.c: 154: printf(startCharacter);
  5386                           
  5387                           ; BSR set to: 1
  5388                           ;incstack = 0
  5389  00163E  C048  F008         	movff	_startCharacter,i2printf@f
  5390  001642  C049  F009         	movff	_startCharacter+1,i2printf@f+1
  5391  001646  5008               	movf	i2printf@f,w,c
  5392  001648  1009               	iorwf	i2printf@f+1,w,c
  5393  00164A  A4D8               	btfss	status,2,c
  5394  00164C  0E00               	movlw	low (__mediumconst shr (0+16))
  5395  00164E  6E0A               	movwf	i2printf@f+2,c
  5396  001650  EC88  F007         	call	i2_printf	;wreg free
  5397                           
  5398                           ;UART_Driver.c: 156: printf(ackCharacter);
  5399  001654  C042  F008         	movff	_ackCharacter,i2printf@f
  5400  001658  C043  F009         	movff	_ackCharacter+1,i2printf@f+1
  5401  00165C  5008               	movf	i2printf@f,w,c
  5402  00165E  1009               	iorwf	i2printf@f+1,w,c
  5403  001660  A4D8               	btfss	status,2,c
  5404  001662  0E00               	movlw	low (__mediumconst shr (0+16))
  5405  001664  6E0A               	movwf	i2printf@f+2,c
  5406  001666  EC88  F007         	call	i2_printf	;wreg free
  5407                           
  5408                           ;UART_Driver.c: 158: printf("%x",readBuffer.readId);
  5409  00166A  0E22               	movlw	low STR_5
  5410  00166C  6E08               	movwf	i2printf@f,c
  5411  00166E  0E08               	movlw	high STR_5
  5412  001670  6E09               	movwf	i2printf@f+1,c
  5413  001672  5008               	movf	i2printf@f,w,c
  5414  001674  1009               	iorwf	i2printf@f+1,w,c
  5415  001676  A4D8               	btfss	status,2,c
  5416  001678  0E00               	movlw	low (__mediumconst shr (0+16))
  5417  00167A  6E0A               	movwf	i2printf@f+2,c
  5418  00167C  C1A4  F00B         	movff	_readBuffer+164,?i2_printf+3
  5419  001680  6A0C               	clrf	?i2_printf+4,c
  5420  001682  EC88  F007         	call	i2_printf	;wreg free
  5421                           
  5422                           ;UART_Driver.c: 160: printf(stopCharacter);
  5423  001686  C046  F008         	movff	_stopCharacter,i2printf@f
  5424  00168A  C047  F009         	movff	_stopCharacter+1,i2printf@f+1
  5425  00168E  5008               	movf	i2printf@f,w,c
  5426  001690  1009               	iorwf	i2printf@f+1,w,c
  5427  001692  A4D8               	btfss	status,2,c
  5428  001694  0E00               	movlw	low (__mediumconst shr (0+16))
  5429  001696  6E0A               	movwf	i2printf@f+2,c
  5430  001698  EC88  F007         	call	i2_printf	;wreg free
  5431  00169C  0012               	return		;funcret
  5432  00169E                     __end_of_acknowledge:
  5433                           	opt stack 0
  5434                           pclatu	equ	0xFFB
  5435                           pclath	equ	0xFFA
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon	equ	0xFF2
  5443                           intcon2	equ	0xFF1
  5444                           indf0	equ	0xFEF
  5445                           postinc0	equ	0xFEE
  5446                           plusw0	equ	0xFEB
  5447                           fsr0h	equ	0xFEA
  5448                           fsr0l	equ	0xFE9
  5449                           wreg	equ	0xFE8
  5450                           indf1	equ	0xFE7
  5451                           postinc1	equ	0xFE6
  5452                           postdec1	equ	0xFE5
  5453                           fsr1h	equ	0xFE2
  5454                           fsr1l	equ	0xFE1
  5455                           bsr	equ	0xFE0
  5456                           indf2	equ	0xFDF
  5457                           postinc2	equ	0xFDE
  5458                           postdec2	equ	0xFDD
  5459                           plusw2	equ	0xFDB
  5460                           fsr2h	equ	0xFDA
  5461                           fsr2l	equ	0xFD9
  5462                           status	equ	0xFD8
  5463                           
  5464 ;; *************** function i2_printf *****************
  5465 ;; Defined at:
  5466 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;  f               3    7[COMRAM] PTR const unsigned char 
  5469 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  5470 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  5471 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  5472 ;;		 -> C_DOOR_SendStates@com(3), 
  5473 ;; Auto vars:     Size  Location     Type
  5474 ;;  printf          4    0        struct .
  5475 ;;  printf          3    0        PTR const unsigned char 
  5476 ;;  printf          2   16[COMRAM] unsigned int 
  5477 ;;  printf          2   14[COMRAM] PTR void [1]
  5478 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5479 ;;  printf          2    0        unsigned int 
  5480 ;;  printf          1   19[COMRAM] char 
  5481 ;;  printf          1   18[COMRAM] char 
  5482 ;;  printf          1   13[COMRAM] unsigned char 
  5483 ;;  printf          1   12[COMRAM] unsigned char 
  5484 ;; Return value:  Size  Location     Type
  5485 ;;                  2    7[COMRAM] int 
  5486 ;; Registers used:
  5487 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5488 ;; Tracked objects:
  5489 ;;		On entry : 0/0
  5490 ;;		On exit  : 0/0
  5491 ;;		Unchanged: 0/0
  5492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5493 ;;      Params:         5       0       0       0       0       0       0       0       0
  5494 ;;      Locals:         8       0       0       0       0       0       0       0       0
  5495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5496 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5497 ;;Total ram usage:       13 bytes
  5498 ;; Hardware stack levels used:    1
  5499 ;; Hardware stack levels required when called:    1
  5500 ;; This function calls:
  5501 ;;		i2___lwdiv
  5502 ;;		i2_putch
  5503 ;; This function is called by:
  5504 ;;		_acknowledge
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text29
  5509  000F10                     __ptext29:
  5510                           	opt stack 0
  5511  000F10                     i2_printf:
  5512                           	opt stack 21
  5513                           
  5514                           ;doprnt.c: 466: va_list ap;
  5515                           ;doprnt.c: 499: signed char c;
  5516                           ;doprnt.c: 506: signed char prec;
  5517                           ;doprnt.c: 508: unsigned char flag;
  5518                           ;doprnt.c: 523: union {
  5519                           ;doprnt.c: 524: unsigned long vd;
  5520                           ;doprnt.c: 525: double integ;
  5521                           ;doprnt.c: 526: } tmpval;
  5522                           ;doprnt.c: 528: unsigned int val;
  5523                           ;doprnt.c: 529: unsigned len;
  5524                           ;doprnt.c: 530: const char * cp;
  5525                           ;doprnt.c: 533: *ap = __va_start();
  5526                           
  5527                           ;incstack = 0
  5528  000F10  0E0B               	movlw	low (?i2_printf+3)
  5529  000F12  6E0F               	movwf	i2printf@ap,c
  5530  000F14  0E00               	movlw	high (?i2_printf+3)
  5531  000F16  6E10               	movwf	i2printf@ap+1,c
  5532                           
  5533                           ;doprnt.c: 536: while(c = *f++) {
  5534  000F18  D085               	goto	i2u191_40
  5535  000F1A                     
  5536                           ;doprnt.c: 538: if(c != '%')
  5537  000F1A  0E25               	movlw	37
  5538  000F1C  1814               	xorwf	i2printf@c,w,c
  5539  000F1E  B4D8               	btfsc	status,2,c
  5540  000F20  D004               	goto	i2l373
  5541                           
  5542                           ;doprnt.c: 540: {
  5543                           ;doprnt.c: 541: (putch(c) );
  5544  000F22  5014               	movf	i2printf@c,w,c
  5545  000F24  EC66  F00C         	call	i2_putch
  5546                           
  5547                           ;doprnt.c: 542: continue;
  5548  000F28  D07D               	goto	i2u191_40
  5549  000F2A                     i2l373:
  5550                           
  5551                           ;doprnt.c: 543: }
  5552                           ;doprnt.c: 548: flag = 0;
  5553  000F2A  0E00               	movlw	0
  5554  000F2C  6E0D               	movwf	i2printf@flag,c
  5555                           
  5556                           ;doprnt.c: 635: switch(c = *f++) {
  5557  000F2E  D004               	goto	i2l374
  5558  000F30                     
  5559                           ;doprnt.c: 809: (putch(c) );
  5560  000F30  5014               	movf	i2printf@c,w,c
  5561  000F32  EC66  F00C         	call	i2_putch
  5562                           
  5563                           ;doprnt.c: 810: continue;
  5564  000F36  D076               	goto	i2u191_40
  5565  000F38                     i2l374:
  5566  000F38  C008  FFF6         	movff	i2printf@f,tblptrl
  5567  000F3C  C009  FFF7         	movff	i2printf@f+1,tblptrh
  5568  000F40  C00A  FFF8         	movff	i2printf@f+2,tblptru
  5569  000F44  0E01               	movlw	1
  5570  000F46  2608               	addwf	i2printf@f,f,c
  5571  000F48  0E00               	movlw	0
  5572  000F4A  2209               	addwfc	i2printf@f+1,f,c
  5573  000F4C  220A               	addwfc	i2printf@f+2,f,c
  5574  000F4E  BAF8               	btfsc	tblptru,5,c
  5575  000F50  D003               	bra	i2u187_47
  5576  000F52  0008               	tblrd		*
  5577  000F54  50F5               	movf	tablat,w,c
  5578  000F56  D005               	bra	i2u187_40
  5579  000F58                     i2u187_47:
  5580  000F58  CFF6 FFE9          	movff	tblptrl,fsr0l
  5581  000F5C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5582  000F60  50EF               	movf	indf0,w,c
  5583  000F62                     i2u187_40:
  5584  000F62  6E14               	movwf	i2printf@c,c
  5585  000F64  5014               	movf	i2printf@c,w,c
  5586                           
  5587                           ; Switch size 1, requested type "space"
  5588                           ; Number of cases is 2, Range of values is 0 to 120
  5589                           ; switch strategies available:
  5590                           ; Name         Instructions Cycles
  5591                           ; simple_byte            7     4 (average)
  5592                           ;	Chosen strategy is simple_byte
  5593  000F66  0A00               	xorlw	0	; case 0
  5594  000F68  B4D8               	btfsc	status,2,c
  5595  000F6A  0012               	return	
  5596  000F6C  0A78               	xorlw	120	; case 120
  5597  000F6E  A4D8               	btfss	status,2,c
  5598  000F70  D7DF               	goto	i2l379
  5599                           
  5600                           ;doprnt.c: 1273: {
  5601                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5602  000F72  C00F  FFD9         	movff	i2printf@ap,fsr2l
  5603  000F76  C010  FFDA         	movff	i2printf@ap+1,fsr2h
  5604  000F7A  CFDE F011          	movff	postinc2,i2printf@val
  5605  000F7E  CFDD F012          	movff	postdec2,i2printf@val+1
  5606  000F82  0E02               	movlw	2
  5607  000F84  260F               	addwf	i2printf@ap,f,c
  5608  000F86  0E00               	movlw	0
  5609  000F88  2210               	addwfc	i2printf@ap+1,f,c
  5610                           
  5611                           ;doprnt.c: 1287: }
  5612                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5613  000F8A  0E01               	movlw	1
  5614  000F8C  6E14               	movwf	i2printf@c,c
  5615  000F8E  D014               	goto	i2l2247
  5616  000F90                     
  5617                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5618  000F90  5014               	movf	i2printf@c,w,c
  5619  000F92  0D02               	mullw	2
  5620  000F94  0E01               	movlw	low _hexpowers
  5621  000F96  24F3               	addwf	prodl,w,c
  5622  000F98  6EF6               	movwf	tblptrl,c
  5623  000F9A  0E08               	movlw	high _hexpowers
  5624  000F9C  20F4               	addwfc	prodh,w,c
  5625  000F9E  6EF7               	movwf	tblptrh,c
  5626  000FA0                     	if	1	;There are 3 active tblptr bytes
  5627  000FA0  6AF8               	clrf	tblptru,c
  5628  000FA2  0E00               	movlw	low (__mediumconst shr (0+16))
  5629  000FA4  22F8               	addwfc	tblptru,f,c
  5630  000FA6                     	endif
  5631  000FA6  0009               	tblrd		*+
  5632  000FA8  50F5               	movf	tablat,w,c
  5633  000FAA  5C11               	subwf	i2printf@val,w,c
  5634  000FAC  0009               	tblrd		*+
  5635  000FAE  50F5               	movf	tablat,w,c
  5636  000FB0  5812               	subwfb	i2printf@val+1,w,c
  5637  000FB2  A0D8               	btfss	status,0,c
  5638  000FB4  D005               	goto	i2u190_40
  5639                           
  5640                           ;doprnt.c: 1318: break;
  5641  000FB6  2A14               	incf	i2printf@c,f,c
  5642  000FB8                     i2l2247:
  5643  000FB8  0E04               	movlw	4
  5644  000FBA  1814               	xorwf	i2printf@c,w,c
  5645  000FBC  A4D8               	btfss	status,2,c
  5646  000FBE  D7E8               	goto	i2l380
  5647  000FC0                     i2u190_40:
  5648                           
  5649                           ;doprnt.c: 1422: {
  5650                           ;doprnt.c: 1469: }
  5651                           ;doprnt.c: 1472: prec = c;
  5652  000FC0  C014  F013         	movff	i2printf@c,i2printf@prec
  5653                           
  5654                           ;doprnt.c: 1474: while(prec--) {
  5655  000FC4  D02B               	goto	i2l383
  5656  000FC6                     
  5657                           ;doprnt.c: 1478: {
  5658                           ;doprnt.c: 1499: {
  5659                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5660  000FC6  C011  F001         	movff	i2printf@val,i2___lwdiv@dividend
  5661  000FCA  C012  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  5662  000FCE  5013               	movf	i2printf@prec,w,c
  5663  000FD0  0D02               	mullw	2
  5664  000FD2  0E01               	movlw	low _hexpowers
  5665  000FD4  24F3               	addwf	prodl,w,c
  5666  000FD6  6EF6               	movwf	tblptrl,c
  5667  000FD8  0E08               	movlw	high _hexpowers
  5668  000FDA  20F4               	addwfc	prodh,w,c
  5669  000FDC  6EF7               	movwf	tblptrh,c
  5670  000FDE                     	if	1	;There are 3 active tblptr bytes
  5671  000FDE  6AF8               	clrf	tblptru,c
  5672  000FE0  0E00               	movlw	low (__mediumconst shr (0+16))
  5673  000FE2  22F8               	addwfc	tblptru,f,c
  5674  000FE4                     	endif
  5675  000FE4  0009               	tblrd		*+
  5676  000FE6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  5677  000FEA  000A               	tblrd		*-
  5678  000FEC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  5679  000FF0  EC79  F00B         	call	i2___lwdiv	;wreg free
  5680  000FF4  5001               	movf	?i2___lwdiv,w,c
  5681  000FF6  0B0F               	andlw	15
  5682  000FF8  6E0E               	movwf	i2printf@idx,c
  5683                           
  5684                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5685  000FFA  500E               	movf	i2printf@idx,w,c
  5686  000FFC  0D01               	mullw	1
  5687  000FFE  0E09               	movlw	low STR_17
  5688  001000  24F3               	addwf	prodl,w,c
  5689  001002  6EF6               	movwf	tblptrl,c
  5690  001004  0E08               	movlw	high STR_17
  5691  001006  20F4               	addwfc	prodh,w,c
  5692  001008  6EF7               	movwf	tblptrh,c
  5693  00100A                     	if	1	;There are 3 active tblptr bytes
  5694  00100A  6AF8               	clrf	tblptru,c
  5695  00100C  0E00               	movlw	low (__mediumconst shr (0+16))
  5696  00100E  22F8               	addwfc	tblptru,f,c
  5697  001010                     	endif
  5698  001010  0008               	tblrd		*
  5699  001012  CFF5 F014          	movff	tablat,i2printf@c
  5700                           
  5701                           ;doprnt.c: 1508: }
  5702                           ;doprnt.c: 1523: }
  5703                           ;doprnt.c: 1524: (putch(c) );
  5704  001016  5014               	movf	i2printf@c,w,c
  5705  001018  EC66  F00C         	call	i2_putch
  5706  00101C                     i2l383:
  5707  00101C  0613               	decf	i2printf@prec,f,c
  5708  00101E  2813               	incf	i2printf@prec,w,c
  5709  001020  A4D8               	btfss	status,2,c
  5710  001022  D7D1               	goto	i2l384
  5711  001024                     i2u191_40:
  5712  001024  C008  FFF6         	movff	i2printf@f,tblptrl
  5713  001028  C009  FFF7         	movff	i2printf@f+1,tblptrh
  5714  00102C  C00A  FFF8         	movff	i2printf@f+2,tblptru
  5715  001030  0E01               	movlw	1
  5716  001032  2608               	addwf	i2printf@f,f,c
  5717  001034  0E00               	movlw	0
  5718  001036  2209               	addwfc	i2printf@f+1,f,c
  5719  001038  220A               	addwfc	i2printf@f+2,f,c
  5720  00103A  BAF8               	btfsc	tblptru,5,c
  5721  00103C  D003               	bra	i2u192_47
  5722  00103E  0008               	tblrd		*
  5723  001040  50F5               	movf	tablat,w,c
  5724  001042  D005               	bra	i2u192_40
  5725  001044                     i2u192_47:
  5726  001044  CFF6 FFE9          	movff	tblptrl,fsr0l
  5727  001048  CFF7 FFEA          	movff	tblptrh,fsr0h
  5728  00104C  50EF               	movf	indf0,w,c
  5729  00104E                     i2u192_40:
  5730  00104E  6E14               	movwf	i2printf@c,c
  5731  001050  5014               	movf	i2printf@c,w,c
  5732  001052  B4D8               	btfsc	status,2,c
  5733  001054  0012               	return	
  5734  001056  D761               	goto	i2l372
  5735  001058                     __end_ofi2_printf:
  5736                           	opt stack 0
  5737                           pclatu	equ	0xFFB
  5738                           pclath	equ	0xFFA
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           intcon	equ	0xFF2
  5746                           intcon2	equ	0xFF1
  5747                           indf0	equ	0xFEF
  5748                           postinc0	equ	0xFEE
  5749                           plusw0	equ	0xFEB
  5750                           fsr0h	equ	0xFEA
  5751                           fsr0l	equ	0xFE9
  5752                           wreg	equ	0xFE8
  5753                           indf1	equ	0xFE7
  5754                           postinc1	equ	0xFE6
  5755                           postdec1	equ	0xFE5
  5756                           fsr1h	equ	0xFE2
  5757                           fsr1l	equ	0xFE1
  5758                           bsr	equ	0xFE0
  5759                           indf2	equ	0xFDF
  5760                           postinc2	equ	0xFDE
  5761                           postdec2	equ	0xFDD
  5762                           plusw2	equ	0xFDB
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function i2_putch *****************
  5768 ;; Defined at:
  5769 ;;		line 243 in file "Drivers/UART_Driver.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  data            1    wreg     unsigned char 
  5772 ;; Auto vars:     Size  Location     Type
  5773 ;;  data            1    0[COMRAM] unsigned char 
  5774 ;;  putch           1    1[COMRAM] unsigned char 
  5775 ;; Return value:  Size  Location     Type
  5776 ;;                  1    wreg      void 
  5777 ;; Registers used:
  5778 ;;		wreg, status,2, status,0, cstack
  5779 ;; Tracked objects:
  5780 ;;		On entry : 0/0
  5781 ;;		On exit  : 0/0
  5782 ;;		Unchanged: 0/0
  5783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5784 ;;      Params:         0       0       0       0       0       0       0       0       0
  5785 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5787 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5788 ;;Total ram usage:        2 bytes
  5789 ;; Hardware stack levels used:    1
  5790 ;; This function calls:
  5791 ;;		Nothing
  5792 ;; This function is called by:
  5793 ;;		i2_printf
  5794 ;; This function uses a non-reentrant model
  5795 ;;
  5796                           
  5797                           	psect	text30
  5798  0018CC                     __ptext30:
  5799                           	opt stack 0
  5800  0018CC                     i2_putch:
  5801                           	opt stack 21
  5802                           
  5803                           ;incstack = 0
  5804                           ;i2putch@data stored from wreg
  5805  0018CC  6E01               	movwf	i2putch@data,c
  5806                           
  5807                           ;UART_Driver.c: 244: uint8_t max = 0;
  5808  0018CE  0E00               	movlw	0
  5809  0018D0  6E02               	movwf	i2putch@max,c
  5810                           
  5811                           ;UART_Driver.c: 246: while(TXSTAbits.TRMT == 0 && max < 200) {
  5812  0018D2  D005               	goto	i2l166
  5813  0018D4                     
  5814                           ;UART_Driver.c: 247: max++;
  5815  0018D4  2A02               	incf	i2putch@max,f,c
  5816                           
  5817                           ;UART_Driver.c: 248: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  5818  0018D6  0E06               	movlw	6
  5819  0018D8                     i2u263_47:
  5820  0018D8  2EE8               	decfsz	wreg,f,c
  5821  0018DA  D7FE               	bra	i2u263_47
  5822  0018DC  D000               	nop2	
  5823  0018DE                     i2l166:
  5824  0018DE  B2AC               	btfsc	4012,1,c	;volatile
  5825  0018E0  D003               	goto	i2u174_40
  5826  0018E2  0EC7               	movlw	199
  5827  0018E4  6402               	cpfsgt	i2putch@max,c
  5828  0018E6  D7F6               	goto	i2l167
  5829  0018E8                     i2u174_40:
  5830                           
  5831                           ;UART_Driver.c: 249: }
  5832                           ;UART_Driver.c: 250: TXREG = data;
  5833  0018E8  C001  FFAD         	movff	i2putch@data,4013	;volatile
  5834  0018EC  0012               	return		;funcret
  5835  0018EE                     __end_ofi2_putch:
  5836                           	opt stack 0
  5837                           pclatu	equ	0xFFB
  5838                           pclath	equ	0xFFA
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           intcon2	equ	0xFF1
  5847                           indf0	equ	0xFEF
  5848                           postinc0	equ	0xFEE
  5849                           plusw0	equ	0xFEB
  5850                           fsr0h	equ	0xFEA
  5851                           fsr0l	equ	0xFE9
  5852                           wreg	equ	0xFE8
  5853                           indf1	equ	0xFE7
  5854                           postinc1	equ	0xFE6
  5855                           postdec1	equ	0xFE5
  5856                           fsr1h	equ	0xFE2
  5857                           fsr1l	equ	0xFE1
  5858                           bsr	equ	0xFE0
  5859                           indf2	equ	0xFDF
  5860                           postinc2	equ	0xFDE
  5861                           postdec2	equ	0xFDD
  5862                           plusw2	equ	0xFDB
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function i2___lwdiv *****************
  5868 ;; Defined at:
  5869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  dividend        2    0[COMRAM] unsigned int 
  5872 ;;  divisor         2    2[COMRAM] unsigned int 
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  __lwdiv         2    5[COMRAM] unsigned int 
  5875 ;;  __lwdiv         1    4[COMRAM] unsigned char 
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  2    0[COMRAM] unsigned int 
  5878 ;; Registers used:
  5879 ;;		wreg, status,2, status,0
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5885 ;;      Params:         4       0       0       0       0       0       0       0       0
  5886 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5887 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5888 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5889 ;;Total ram usage:        7 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; This function calls:
  5892 ;;		Nothing
  5893 ;; This function is called by:
  5894 ;;		i2_printf
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text31
  5899  0016F2                     __ptext31:
  5900                           	opt stack 0
  5901  0016F2                     i2___lwdiv:
  5902                           	opt stack 21
  5903                           
  5904                           ;incstack = 0
  5905  0016F2  0E00               	movlw	0
  5906  0016F4  6E07               	movwf	i2___lwdiv@quotient+1,c
  5907  0016F6  0E00               	movlw	0
  5908  0016F8  6E06               	movwf	i2___lwdiv@quotient,c
  5909  0016FA  5003               	movf	i2___lwdiv@divisor,w,c
  5910  0016FC  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5911  0016FE  B4D8               	btfsc	status,2,c
  5912  001700  D01C               	goto	i2l796
  5913  001702  0E01               	movlw	1
  5914  001704  6E05               	movwf	i2___lwdiv@counter,c
  5915  001706  D004               	goto	i2l791
  5916  001708  90D8               	bcf	status,0,c
  5917  00170A  3603               	rlcf	i2___lwdiv@divisor,f,c
  5918  00170C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5919  00170E  2A05               	incf	i2___lwdiv@counter,f,c
  5920  001710                     i2l791:
  5921  001710  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5922  001712  D7FA               	goto	i2l792
  5923  001714                     i2u176_40:
  5924  001714  90D8               	bcf	status,0,c
  5925  001716  3606               	rlcf	i2___lwdiv@quotient,f,c
  5926  001718  3607               	rlcf	i2___lwdiv@quotient+1,f,c
  5927  00171A  5003               	movf	i2___lwdiv@divisor,w,c
  5928  00171C  5C01               	subwf	i2___lwdiv@dividend,w,c
  5929  00171E  5004               	movf	i2___lwdiv@divisor+1,w,c
  5930  001720  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5931  001722  A0D8               	btfss	status,0,c
  5932  001724  D005               	goto	i2l795
  5933  001726  5003               	movf	i2___lwdiv@divisor,w,c
  5934  001728  5E01               	subwf	i2___lwdiv@dividend,f,c
  5935  00172A  5004               	movf	i2___lwdiv@divisor+1,w,c
  5936  00172C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5937  00172E  8006               	bsf	i2___lwdiv@quotient,0,c
  5938  001730                     i2l795:
  5939  001730  90D8               	bcf	status,0,c
  5940  001732  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5941  001734  3203               	rrcf	i2___lwdiv@divisor,f,c
  5942  001736  2E05               	decfsz	i2___lwdiv@counter,f,c
  5943  001738  D7ED               	goto	i2u176_40
  5944  00173A                     i2l796:
  5945  00173A  C006  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5946  00173E  C007  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5947  001742  0012               	return		;funcret
  5948  001744                     __end_ofi2___lwdiv:
  5949                           	opt stack 0
  5950                           pclatu	equ	0xFFB
  5951                           pclath	equ	0xFFA
  5952                           tblptru	equ	0xFF8
  5953                           tblptrh	equ	0xFF7
  5954                           tblptrl	equ	0xFF6
  5955                           tablat	equ	0xFF5
  5956                           prodh	equ	0xFF4
  5957                           prodl	equ	0xFF3
  5958                           intcon	equ	0xFF2
  5959                           intcon2	equ	0xFF1
  5960                           indf0	equ	0xFEF
  5961                           postinc0	equ	0xFEE
  5962                           plusw0	equ	0xFEB
  5963                           fsr0h	equ	0xFEA
  5964                           fsr0l	equ	0xFE9
  5965                           wreg	equ	0xFE8
  5966                           indf1	equ	0xFE7
  5967                           postinc1	equ	0xFE6
  5968                           postdec1	equ	0xFE5
  5969                           fsr1h	equ	0xFE2
  5970                           fsr1l	equ	0xFE1
  5971                           bsr	equ	0xFE0
  5972                           indf2	equ	0xFDF
  5973                           postinc2	equ	0xFDE
  5974                           postdec2	equ	0xFDD
  5975                           plusw2	equ	0xFDB
  5976                           fsr2h	equ	0xFDA
  5977                           fsr2l	equ	0xFD9
  5978                           status	equ	0xFD8
  5979                           pclatu	equ	0xFFB
  5980                           pclath	equ	0xFFA
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           intcon2	equ	0xFF1
  5989                           indf0	equ	0xFEF
  5990                           postinc0	equ	0xFEE
  5991                           plusw0	equ	0xFEB
  5992                           fsr0h	equ	0xFEA
  5993                           fsr0l	equ	0xFE9
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postinc1	equ	0xFE6
  5997                           postdec1	equ	0xFE5
  5998                           fsr1h	equ	0xFE2
  5999                           fsr1l	equ	0xFE1
  6000                           bsr	equ	0xFE0
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           plusw2	equ	0xFDB
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009                           	psect	rparam
  6010  0000                     pclatu	equ	0xFFB
  6011                           pclath	equ	0xFFA
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           intcon2	equ	0xFF1
  6020                           indf0	equ	0xFEF
  6021                           postinc0	equ	0xFEE
  6022                           plusw0	equ	0xFEB
  6023                           fsr0h	equ	0xFEA
  6024                           fsr0l	equ	0xFE9
  6025                           wreg	equ	0xFE8
  6026                           indf1	equ	0xFE7
  6027                           postinc1	equ	0xFE6
  6028                           postdec1	equ	0xFE5
  6029                           fsr1h	equ	0xFE2
  6030                           fsr1l	equ	0xFE1
  6031                           bsr	equ	0xFE0
  6032                           indf2	equ	0xFDF
  6033                           postinc2	equ	0xFDE
  6034                           postdec2	equ	0xFDD
  6035                           plusw2	equ	0xFDB
  6036                           fsr2h	equ	0xFDA
  6037                           fsr2l	equ	0xFD9
  6038                           status	equ	0xFD8
  6039                           
  6040                           	psect	temp
  6041  00004A                     btemp:
  6042                           	opt stack 0
  6043  00004A                     	ds	1
  6044  0000                     int$flags	set	btemp
  6045  0000                     wtemp6	set	btemp+1
  6046                           pclatu	equ	0xFFB
  6047                           pclath	equ	0xFFA
  6048                           tblptru	equ	0xFF8
  6049                           tblptrh	equ	0xFF7
  6050                           tblptrl	equ	0xFF6
  6051                           tablat	equ	0xFF5
  6052                           prodh	equ	0xFF4
  6053                           prodl	equ	0xFF3
  6054                           intcon	equ	0xFF2
  6055                           intcon2	equ	0xFF1
  6056                           indf0	equ	0xFEF
  6057                           postinc0	equ	0xFEE
  6058                           plusw0	equ	0xFEB
  6059                           fsr0h	equ	0xFEA
  6060                           fsr0l	equ	0xFE9
  6061                           wreg	equ	0xFE8
  6062                           indf1	equ	0xFE7
  6063                           postinc1	equ	0xFE6
  6064                           postdec1	equ	0xFE5
  6065                           fsr1h	equ	0xFE2
  6066                           fsr1l	equ	0xFE1
  6067                           bsr	equ	0xFE0
  6068                           indf2	equ	0xFDF
  6069                           postinc2	equ	0xFDE
  6070                           postdec2	equ	0xFDD
  6071                           plusw2	equ	0xFDB
  6072                           fsr2h	equ	0xFDA
  6073                           fsr2l	equ	0xFD9
  6074                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    8
    Data        8
    BSS         292
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      73
    BANK0           160     39     139
    BANK1           256     16     182
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK1[2]), 
		 -> C_DOOR_SendStates@com(BANK1[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), C_DOOR_SendStates@mes(BANK1[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), C_DOOR_SendStates@com(BANK1[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK1[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK1[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer
    _acknowledge->i2_printf
    i2_printf->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_D_UART_Init
    _initDoors->_C_DOOR_LockAll
    _D_UART_Init->___lldiv
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable
    _D_UART_Write->_printf
    _printf->___lwdiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_C_DOOR_SendStates
    _C_DOOR_SendStates->_D_UART_Write

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8589
                                             14 BANK1      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_TMR1_Enable
                        _D_TMR1_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1213
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     489
                                             30 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       9     9      0      90
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     332
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                             21 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     806
                                             34 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     9     9      0      90
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    3277
                                              5 BANK1      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     521
                                             21 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2380
                                              0 BANK1      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1958
                                             28 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0      68
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                             18    18      0    1389
                                             21 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0    1389
                                             20 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0    1048
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            22    17      5    1048
                                              7 COMRAM    13     8      5
                          i2___lwdiv
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     311
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i2_printf
         i2___lwdiv
         i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      B6       7       71.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      49       1       77.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      20        0.0%
DATA                 0      0     18A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Apr 01 16:29:18 2018

                         l22 0EF4                           l23 0DD0                           l40 14BE  
                         l41 1442                           l17 1620                           l34 136C  
                         l35 12DC                           l28 141E                           l29 1390  
                         l46 1202                           l47 1148                           l48 1200  
                __CFG_BOR$ON 000000                           bsr 000FE0           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 _ackCharacter 0042                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l213 1800                          l214 17FA                          l161 187A  
                        l321 0926                          l322 0952                          l307 18BA  
                        l236 195A                          l332 0A3A                          l324 0982  
                        l341 0AAC                          l333 0A50                          l317 08C4  
                        l166 1850                          l342 0A8E                          l326 09B4  
                        l167 1846                          l335 0A6C                          l319 08DC  
                        l344 0AC8                          l328 09EA                          l345 0A92  
                        l337 0A76                          l195 196E                          l347 0A9C  
                        l380 0CEE                          l372 0C70                          l348 0AA6  
                        l373 0C80                          l374 0C90                          l383 0D7C  
                        l384 0D24                          l379 0C88                          l742 153E  
                        l743 154C                          l738 150A                          l739 14FE  
                        l791 16BE                          l935 179E                          l792 16B6  
                        l936 1794                          l795 16DE                          l796 16E8  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _pwm 003B                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2207 0D16                         STR_1 0835                         STR_2 0833  
                       STR_3 081E                         STR_4 081A                         STR_5 0822  
                       STR_6 0837                         STR_7 0837                         STR_8 082D  
                       STR_9 082B                         u2001 10D2                         u2011 1110  
                       u2110 14B8                         u2120 14BA                         u2104 14AA  
                       u2105 14A6                         u2060 150E                         u2151 1196  
                       u2401 08F0                         u2410 0904                         u2084 1332  
                       u2340 17D4                         u2085 132E                         u1710 16C2  
                       u2270 15C2                         u2275 15B6                         u2291 1830  
                       u1820 0D1E                         u2428 0908                         u1830 0D86  
                       u2607 09DC                         u1840 0DB2                         u2617 1134  
                       u1690 185C                         u2627 184A                         u1790 0CBC  
                       u1847 0DA8                         u2577 0846                         u1954 0EC0  
                       u1955 0EBC                         u2587 088E                         u1964 0EE6  
                       u1797 0CB2                         u1965 0EE2                         u2597 08B6  
                       u1984 13E4                         u1985 13E0                 ?_C_DOOR_Init 0001  
                       _baud 0041                         _main 083A                         _read 0028  
                       _lock 003C                         _tick 003D                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0006                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 004A            C_DOOR_UnlockAll@d 00E1                         prodh 000FF4  
                       prodl 000FF3                         start 00EC                __CFG_IESO$OFF 000000  
            __end_of_HighISR 12D4              __end_ofi2_putch 18EE                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  ?_D_PWM_Init 0001            initDoors@door_cnt 00E2  
             _startCharacter 0048              D_PWM_SetPwm@pwm 00D9                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 00E3      __size_of_C_DOOR_LockAll 00B2         commandAndMessage@mes 00E5  
                      ?_main 0001                        STR_10 0831                        STR_11 0829  
                      STR_12 082F                        STR_13 082D                        STR_14 0825  
                      STR_15 0827                        STR_16 0831                        STR_17 0809  
            __end_of___lldiv 155E                        u20011 10CE                        u20111 110C  
            __end_of___lwdiv 16F2                        i2l120 0C3A                        i2l121 0AD8  
                      i2l130 0B48                        i2l122 0AFC                        i2l131 0B6A  
                      i1l356 0078                        i1l357 0094                        i2l142 0C14  
                      i2l134 0B8C                        i2l126 0B04                        i1l358 008E  
                      i2l143 0C2C                        i2l135 0BAE                        i2l127 0B26  
                      i1l359 0092                        i2l145 0C34                        i2l138 0BD0  
                      i2l139 0BF2                        i2l166 18DE                        i2l167 18D4  
                      i2l176 1288                        i2l177 1278                        i2l179 1282  
                      i2l380 0F90                        i2l372 0F1A                        i2l373 0F2A  
                      i2l374 0F38                        i2l383 101C                        i2l384 0FC6  
                      i2l379 0F30                        i2l791 1710                        i2l792 1708  
                      i2l795 1730                        i2l796 173A                        _RCREG 000FAE  
                      _TMR1H 000FCF                        _TMR1L 000FCE         __size_of_acknowledge 0060  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               C_DOOR_Init@cnt 00DC  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 183A  
                      pclath 000FFA                        tablat 000FF5                 ?_D_UART_Init 00E6  
               ?_D_UART_Read 00D9                 ?_D_TMR0_Init 0001                        plusw0 000FEB  
               ?_D_TMR1_Init 0001                        plusw2 000FDB                        status 000FD8  
                      wtemp6 004B                 ?_D_PORT_Init 0001                _stopCharacter 0046  
           __end_ofi2_printf 1058           __size_ofi2___lwdiv 0052              __initialization 1744  
               __end_of_main 0AD4                   i2printf@ap 000F                   i2putch@max 0002  
                     ??_main 01B4                __activetblptr 000003              __CFG_CCP2MX$OFF 000000  
      commandAndMessage@door 00D9                       _ADCON1 000FC1                       _CCPR1L 000FBE  
        __size_of_D_PWM_Init 001E                       ?_putch 0001                       i2l2247 0FB8  
           _C_DOOR_UnlockAll 12D4                    ??_HighISR 0016                    ??i2_putch 0001  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___lldiv 00E1  
              setAlarm@alarm 00D9              C_DOOR_LockAll@d 00E1                    ??___lwdiv 00DD  
                     clear_0 176A                       clear_1 1776                       clear_2 1782  
                     _printf 0C64             __end_of_setAlarm 197C                       _strcmp 1792  
               __pdataCOMRAM 0042        D_UART_Init@interrupts 00EA            __end_ofi2___lwdiv 1744  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 01A6              D_UART_Init@baud 00E8  
            D_UART_Init@name 00E6   __end_of_C_DOOR_ReadSensors 14DA                   __accesstop 0060  
    __end_of__initialization 1788              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 0152               __pcstackCOMRAM 0001                 C_DOOR_Init@d 00DD  
              __end_of_putch 1862             _messageCharacter 0044                  i2printf@idx 000E  
                i2printf@val 0011                ?_D_PWM_SetPwm 0001               _C_DOOR_LockAll 1388  
     __size_of_D_UART_Enable 0024                  i2putch@data 0001               ??_D_UART_Write 01AA  
     __size_of_D_TMR0_Enable 0014                    ?i2_printf 0008       __size_of_D_TMR1_Enable 0014  
          _C_DOOR_SendStates 1140                      ??_putch 00D9           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100           __size_of_initDoors 0022  
           _communicationCnt 003E         __size_of_D_UART_Init 0080         __size_of_D_UART_Read 002C  
       __size_of_D_TMR0_Init 0024         __size_of_D_TMR1_Init 0020          ??_C_DOOR_SendStates 01AB  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E                 ??_D_PWM_Init 00D9  
     __end_of_C_DOOR_LockAll 143A               ??_D_PWM_SetPwm 00D9                   _deviceName 0034  
                    ?_printf 00E0                      ?_strcmp 00D9    __end_of_C_DOOR_SendStates 121E  
    __size_of_fillDataBuffer 0190                   ??i2_printf 000D          D_UART_Enable@enable 00D9  
         __end_of_D_PWM_Init 192C              __CFG_VREGEN$OFF 000000                      _HighISR 0008  
                    i2_putch 18CC                _D_UART_Enable 1862                    ?_setAlarm 0001  
                    __Hparam 0000                      __Lparam 0000              __size_of_LowISR 00D4  
              _D_TMR0_Enable 195E                _D_TMR1_Enable 194A                   _readBuffer 0100  
                    ___lldiv 14DA              ?_C_DOOR_LockAll 0001                      ___lwdiv 169E  
               __psmallconst 0800          C_DOOR_ReadSensors@d 00DD              __CFG_STVREN$OFF 000000  
              ??_acknowledge 0015                      __pcinit 1744                      __ramtop 0800  
   __end_of_C_DOOR_UnlockAll 1388                      __ptext0 083A                      __ptext1 1792  
                    __ptext2 1972                      __ptext3 18AA                      __ptext4 1388  
                    __ptext5 0DBE                      __ptext6 180E                      __ptext7 155E  
                    __ptext8 14DA                      __ptext9 1862              __size_of_printf 015A  
          __end_of_initDoors 18CC                    _T0CONbits 000FD5              __size_of_strcmp 004E  
          __end_of_hexpowers 0809                    _T1CONbits 000FCD                    _T2CONbits 000FCA  
       C_DOOR_SendStates@com 01AE         C_DOOR_SendStates@mes 01B1               __pintcode_body 121E  
       end_of_initialization 1788          D_TMR0_Enable@enable 00D9                      int_func 121E  
             ?_D_UART_Enable 0001                   ??_setAlarm 00D9              ___lldiv@divisor 00DD  
             ?_D_TMR0_Enable 0001              ___lldiv@counter 00E5               ?_D_TMR1_Enable 0001  
       __end_of_D_UART_Write 1140                    _RCSTAbits 000FAB                      printf@c 00EA  
                    printf@f 00E0                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00DE                    _PORTBbits 000F81                    _PORTCbits 000F82  
 __size_of_C_DOOR_SendStates 00DE                    _TRISCbits 000F94          __end_of_acknowledge 169E  
          i2___lwdiv@divisor 0003                    i2___lwdiv 16F2            i2___lwdiv@counter 0005  
       __end_of_D_PWM_SetPwm 180E                  _CCP1CONbits 000FBD                    _TXSTAbits 000FAC  
         _C_DOOR_ReadSensors 143A               __end_of_LowISR 00EC                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 197C               __end_of_printf 0DBE  
             __end_of_strcmp 17E0                 i2printf@flag 000D                 i2printf@prec 0013  
        start_initialization 1744               _fillDataBuffer 0AD4                    i2printf@c 0014  
                  i2printf@f 0008                   ?i2___lwdiv 0001            __size_ofi2_printf 0148  
       ??_C_DOOR_ReadSensors 00D9              ??_D_UART_Enable 00D9                ??_C_DOOR_Init 00D9  
            ??_D_TMR0_Enable 00D9              ??_D_TMR1_Enable 00D9                     ??_LowISR 00C4  
           __CFG_LPT1OSC$OFF 000000                  _acknowledge 163E             D_UART_Write@data 01A8  
                   ??_printf 00E3                 _lockDelayCnt 003F                     ??_strcmp 00DD  
     __end_of_fillDataBuffer 0C64                  __pbssCOMRAM 0028                __pcstackBANK0 00C4  
              __pcstackBANK1 01A6                ??_D_UART_Init 00EB                ??_D_UART_Read 00DF  
              ??_D_TMR0_Init 00DA                ??_D_TMR1_Init 00DA                     ?_HighISR 0001  
                   ?i2_putch 0001        __size_of_D_UART_Write 00E8                ??_D_PORT_Init 00D9  
           ??_C_DOOR_LockAll 00D9             ___lwdiv@dividend 00D9          __end_of_C_DOOR_Init 0F10  
          __size_of_setAlarm 000A                    __pintcode 0008                     ?___lldiv 00D9  
                   ?___lwdiv 00D9                  __pintcodelo 0018           fillDataBuffer@data 0015  
          ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001                  __smallconst 0800  
         ??_C_DOOR_UnlockAll 00D9        __size_of_D_PWM_SetPwm 002E                    _initDoors 18AA  
               _D_UART_Write 1058                    _hexpowers 0801                    _readReady 0040  
           ___lwdiv@quotient 00DE                  ??i2___lwdiv 0005               __size_of_putch 0028  
        D_TMR1_Enable@enable 00D9                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
        __end_of_D_UART_Init 15DE          __end_of_D_UART_Read 183A                     i2u174_40 18E8  
                   i2u190_40 0FC0                     i2u191_40 1024                     i2u263_47 18D8  
                   i2u176_40 1714                     i2u192_40 104E                     i2u192_47 1044  
                   _PIR1bits 000F9E                     i2u187_40 0F62                     i2u187_47 0F58  
        __end_of_D_TMR0_Init 18AA          __end_of_D_TMR1_Init 190E                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 194A                 _D_PWM_SetPwm 17E0  
                 printf@flag 00E3                   printf@prec 00E9                   ?_initDoors 0001  
                   i2_printf 0F10                  _INTCON2bits 000FF1                    copy_data0 1758  
                _C_DOOR_Init 0DBE             __size_of_HighISR 12CC             __size_ofi2_putch 0022  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___lldiv 0084  
           __size_of___lwdiv 0054              ___lwdiv@divisor 00DB              ___lwdiv@counter 00DD  
                   __ptext10 18EE                     __ptext11 194A                     __ptext20 1058  
                   __ptext12 1886                     __ptext21 0C64                     __ptext13 195E  
                   __ptext30 18CC                     __ptext22 183A                     __ptext14 17E0  
                   __ptext31 16F2                     __ptext23 169E                     __ptext15 190E  
                   __ptext24 143A                     __ptext16 192C                     __ptext17 12D4  
                   __ptext18 1140                     __ptext27 0AD4                     __ptext19 15DE  
                   __ptext28 163E                     __ptext29 0F10                     _door_cnt 0037  
                _D_UART_Init 155E                  _D_UART_Read 180E                     _oldAlarm 0039  
                   _newAlarm 003A                     _readData 002E                  _D_TMR0_Init 1886  
                _D_TMR1_Init 18EE                __size_of_main 029A           C_DOOR_SendStates@d 01B3  
                _D_PORT_Init 192C                     _setAlarm 1972                     int$flags 004A  
                  printf@idx 00E4                    printf@val 00E7                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000                    putch@data 00D9                   _INTCONbits 000FF2  
                ??_initDoors 00E2            _commandAndMessage 15DE                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 00A0           ?_commandAndMessage 00D9  
           ___lldiv@dividend 00D9        __end_of_D_UART_Enable 1886        __end_of_D_TMR0_Enable 1972  
        ??_commandAndMessage 00E7        __end_of_D_TMR1_Enable 195E                   _D_PWM_Init 190E  
                   printf@ap 00E5             ??_fillDataBuffer 0015          D_UART_Write@command 01A6  
                   putch@max 00DA                     strcmp@s1 00D9                     strcmp@s2 00DB  
           ___lldiv@quotient 00E1    __end_of_commandAndMessage 163E    __size_of_C_DOOR_UnlockAll 00B4  
