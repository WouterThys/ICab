

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Feb 12 15:57:14 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataBANK0
    87  001A16                     __pidataBANK0:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  001A16  24                 	db	low STR_4
    92  001A17  08                 	db	high STR_4
    93                           
    94                           ;initializer for _messageCharacter
    95  001A18  28                 	db	low STR_3
    96  001A19  08                 	db	high STR_3
    97                           
    98                           ;initializer for _stopCharacter
    99  001A1A  42                 	db	low STR_2
   100  001A1B  08                 	db	high STR_2
   101                           
   102                           ;initializer for _startCharacter
   103  001A1C  44                 	db	low STR_1
   104  001A1D  08                 	db	high STR_1
   105                           
   106                           	psect	smallconst
   107  000800                     __psmallconst:
   108                           	opt stack 0
   109  000800  00                 	db	0
   110  000801                     _dpowers:
   111                           	opt stack 0
   112  000801  0001               	dw	1
   113  000803  000A               	dw	10
   114  000805  0064               	dw	100
   115  000807  03E8               	dw	1000
   116  000809  2710               	dw	10000
   117  00080B                     __end_of_dpowers:
   118                           	opt stack 0
   119  00080B                     _hexpowers:
   120                           	opt stack 0
   121  00080B  0001               	dw	1
   122  00080D  0010               	dw	16
   123  00080F  0100               	dw	256
   124  000811  1000               	dw	4096
   125  000813                     __end_of_hexpowers:
   126                           	opt stack 0
   127  0000                     _TMR1L	set	4046
   128  0000                     _TMR1H	set	4047
   129  0000                     _T1CONbits	set	4045
   130  0000                     _PORTCbits	set	3970
   131  0000                     _CCP1CONbits	set	4029
   132  0000                     _CCPR1L	set	4030
   133  0000                     _T2CONbits	set	4042
   134  0000                     _PR2	set	4043
   135  0000                     _INTCON2bits	set	4081
   136  0000                     _T0CONbits	set	4053
   137  0000                     _TXREG	set	4013
   138  0000                     _TRISCbits	set	3988
   139  0000                     _PIE1bits	set	3997
   140  0000                     _IPR1bits	set	3999
   141  0000                     _PIR1bits	set	3998
   142  0000                     _INTCONbits	set	4082
   143  0000                     _RCONbits	set	4048
   144  0000                     _SPBRG	set	4015
   145  0000                     _BAUDCONbits	set	4024
   146  0000                     _TXSTAbits	set	4012
   147  0000                     _RCREG	set	4014
   148  0000                     _RCSTAbits	set	4011
   149  0000                     _ADCON1	set	4033
   150  0000                     _PORTC	set	3970
   151  0000                     _TRISC	set	3988
   152  0000                     _TRISA	set	3986
   153  0000                     _TRISB	set	3987
   154  0000                     _PORTA	set	3968
   155  0000                     _PORTB	set	3969
   156  000813                     STR_21:
   157                           
   158                           ; BSR set to: 1
   159  000813  30                 	db	48	;'0'
   160  000814  31                 	db	49	;'1'
   161  000815  32                 	db	50	;'2'
   162  000816  33                 	db	51	;'3'
   163  000817  34                 	db	52	;'4'
   164  000818  35                 	db	53	;'5'
   165  000819  36                 	db	54	;'6'
   166  00081A  37                 	db	55	;'7'
   167  00081B  38                 	db	56	;'8'
   168  00081C  39                 	db	57	;'9'
   169  00081D  61                 	db	97	;'a'
   170  00081E  62                 	db	98	;'b'
   171  00081F  63                 	db	99	;'c'
   172  000820  64                 	db	100	;'d'
   173  000821  65                 	db	101	;'e'
   174  000822  66                 	db	102	;'f'
   175  000823  00                 	db	0
   176  000824                     STR_4:
   177                           
   178                           ; BSR set to: 1
   179  000824  5B                 	db	91	;'['
   180  000825  41                 	db	65	;'A'
   181  000826  5D                 	db	93	;']'
   182  000827  00                 	db	0
   183  000828                     STR_3:
   184                           
   185                           ; BSR set to: 1
   186  000828  5B                 	db	91	;'['
   187  000829  4D                 	db	77	;'M'
   188  00082A  5D                 	db	93	;']'
   189  00082B  00                 	db	0
   190  00082C                     STR_9:
   191                           
   192                           ; BSR set to: 1
   193  00082C  25                 	db	37
   194  00082D  64                 	db	100	;'d'
   195  00082E  00                 	db	0
   196  00082F                     STR_10:
   197                           
   198                           ; BSR set to: 1
   199  00082F  25                 	db	37
   200  000830  78                 	db	120	;'x'
   201  000831  00                 	db	0
   202  000832                     STR_18:
   203                           
   204                           ; BSR set to: 1
   205  000832  41                 	db	65	;'A'
   206  000833  00                 	db	0
   207  000834                     STR_19:
   208                           
   209                           ; BSR set to: 1
   210  000834  45                 	db	69	;'E'
   211  000835  00                 	db	0
   212  000836                     STR_14:
   213                           
   214                           ; BSR set to: 1
   215  000836  49                 	db	73	;'I'
   216  000837  00                 	db	0
   217  000838                     STR_12:
   218                           
   219                           ; BSR set to: 1
   220  000838  4C                 	db	76	;'L'
   221  000839  00                 	db	0
   222  00083A                     STR_11:
   223                           
   224                           ; BSR set to: 1
   225  00083A  50                 	db	80	;'P'
   226  00083B  00                 	db	0
   227  00083C                     STR_15:
   228                           
   229                           ; BSR set to: 1
   230  00083C  52                 	db	82	;'R'
   231  00083D  00                 	db	0
   232  00083E                     STR_17:
   233                           
   234                           ; BSR set to: 1
   235  00083E  53                 	db	83	;'S'
   236  00083F  00                 	db	0
   237  000840                     STR_13:
   238                           
   239                           ; BSR set to: 1
   240  000840  55                 	db	85	;'U'
   241  000841  00                 	db	0
   242  000842                     STR_2:
   243                           
   244                           ; BSR set to: 1
   245  000842  24                 	db	36
   246  000843  00                 	db	0
   247  000844                     STR_1:
   248                           
   249                           ; BSR set to: 1
   250  000844  26                 	db	38
   251  000845  00                 	db	0
   252  000846                     STR_5:
   253                           
   254                           ; BSR set to: 1
   255  000846  3A                 	db	58	;':'
   256  000847  00                 	db	0
   257  0000                     
   258                           ; #config settings
   259  000848  00                 	db	0	; dummy byte at the end
   260  0000                     
   261                           	psect	cinit
   262  0017B8                     __pcinit:
   263                           	opt stack 0
   264  0017B8                     start_initialization:
   265                           	opt stack 0
   266  0017B8                     __initialization:
   267                           	opt stack 0
   268                           
   269                           ; Initialize objects allocated to BANK0 (8 bytes)
   270                           ; load TBLPTR registers with __pidataBANK0
   271  0017B8  0E16               	movlw	low __pidataBANK0
   272  0017BA  6EF6               	movwf	tblptrl,c
   273  0017BC  0E1A               	movlw	high __pidataBANK0
   274  0017BE  6EF7               	movwf	tblptrh,c
   275  0017C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   276  0017C2  6EF8               	movwf	tblptru,c
   277  0017C4  EE00  F0F2         	lfsr	0,__pdataBANK0
   278  0017C8  EE10 F008          	lfsr	1,8
   279  0017CC                     copy_data0:
   280  0017CC  0009               	tblrd		*+
   281  0017CE  CFF5 FFEE          	movff	tablat,postinc0
   282  0017D2  50E5               	movf	postdec1,w,c
   283  0017D4  50E1               	movf	fsr1l,w,c
   284  0017D6  E1FA               	bnz	copy_data0
   285                           
   286                           ; Clear objects allocated to BANK1 (166 bytes)
   287  0017D8  EE01  F000         	lfsr	0,__pbssBANK1
   288  0017DC  0EA6               	movlw	166
   289  0017DE                     clear_0:
   290  0017DE  6AEE               	clrf	postinc0,c
   291  0017E0  06E8               	decf	wreg,f,c
   292  0017E2  E1FD               	bnz	clear_0
   293                           
   294                           ; Clear objects allocated to BANK0 (103 bytes)
   295  0017E4  EE00  F060         	lfsr	0,__pbssBANK0
   296  0017E8  0E67               	movlw	103
   297  0017EA                     clear_1:
   298  0017EA  6AEE               	clrf	postinc0,c
   299  0017EC  06E8               	decf	wreg,f,c
   300  0017EE  E1FD               	bnz	clear_1
   301                           
   302                           ; Clear objects allocated to COMRAM (27 bytes)
   303  0017F0  EE00  F029         	lfsr	0,__pbssCOMRAM
   304  0017F4  0E1B               	movlw	27
   305  0017F6                     clear_2:
   306  0017F6  6AEE               	clrf	postinc0,c
   307  0017F8  06E8               	decf	wreg,f,c
   308  0017FA  E1FD               	bnz	clear_2
   309  0017FC                     end_of_initialization:
   310                           	opt stack 0
   311  0017FC                     __end_of__initialization:
   312                           	opt stack 0
   313  0017FC  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   314  0017FE  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   315  001800  0100               	movlb	0
   316  001802  EF7E  F00A         	goto	_main	;jump to C main() function
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	bssCOMRAM
   327  000029                     __pbssCOMRAM:
   328                           	opt stack 0
   329  000029                     _read:
   330                           	opt stack 0
   331  000029                     	ds	7
   332  000030                     _readData:
   333                           	opt stack 0
   334  000030                     	ds	7
   335  000037                     _door_cnt:
   336                           	opt stack 0
   337  000037                     	ds	2
   338  000039                     _oldAlarm:
   339                           	opt stack 0
   340  000039                     	ds	1
   341  00003A                     _newAlarm:
   342                           	opt stack 0
   343  00003A                     	ds	1
   344  00003B                     _pwm:
   345                           	opt stack 0
   346  00003B                     	ds	1
   347  00003C                     _running:
   348                           	opt stack 0
   349  00003C                     	ds	1
   350  00003D                     _lock:
   351                           	opt stack 0
   352  00003D                     	ds	1
   353  00003E                     _tick:
   354                           	opt stack 0
   355  00003E                     	ds	1
   356  00003F                     _ledDelayCnt:
   357                           	opt stack 0
   358  00003F                     	ds	1
   359  000040                     _communicationCnt:
   360                           	opt stack 0
   361  000040                     	ds	1
   362  000041                     _lockDelayCnt:
   363                           	opt stack 0
   364  000041                     	ds	1
   365  000042                     _readReady:
   366                           	opt stack 0
   367  000042                     	ds	1
   368  000043                     _baud:
   369                           	opt stack 0
   370  000043                     	ds	1
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	bssBANK0
   381  000060                     __pbssBANK0:
   382                           	opt stack 0
   383  000060                     _doors:
   384                           	opt stack 0
   385  000060                     	ds	100
   386  0000C4                     _deviceName:
   387                           	opt stack 0
   388  0000C4                     	ds	3
   389                           tblptru	equ	0xFF8
   390                           tblptrh	equ	0xFF7
   391                           tblptrl	equ	0xFF6
   392                           tablat	equ	0xFF5
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           postdec1	equ	0xFE5
   396                           fsr1l	equ	0xFE1
   397                           
   398                           	psect	dataBANK0
   399  0000F2                     __pdataBANK0:
   400                           	opt stack 0
   401  0000F2                     _ackCharacter:
   402                           	opt stack 0
   403  0000F2                     	ds	2
   404  0000F4                     _messageCharacter:
   405                           	opt stack 0
   406  0000F4                     	ds	2
   407  0000F6                     _stopCharacter:
   408                           	opt stack 0
   409  0000F6                     	ds	2
   410  0000F8                     _startCharacter:
   411                           	opt stack 0
   412  0000F8                     	ds	2
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	bssBANK1
   423  000100                     __pbssBANK1:
   424                           	opt stack 0
   425  000100                     _readBuffer:
   426                           	opt stack 0
   427  000100                     	ds	166
   428                           tblptru	equ	0xFF8
   429                           tblptrh	equ	0xFF7
   430                           tblptrl	equ	0xFF6
   431                           tablat	equ	0xFF5
   432                           postinc0	equ	0xFEE
   433                           wreg	equ	0xFE8
   434                           postdec1	equ	0xFE5
   435                           fsr1l	equ	0xFE1
   436                           
   437                           	psect	cstackBANK0
   438  0000C7                     __pcstackBANK0:
   439                           	opt stack 0
   440  0000C7                     ??_C_DOOR_Init:
   441  0000C7                     ??_C_DOOR_LockAll:
   442  0000C7                     ??_C_DOOR_UnlockAll:
   443  0000C7                     ??_C_DOOR_ReadSensors:
   444  0000C7                     ?_strcmp:
   445                           	opt stack 0
   446  0000C7                     ?___lwdiv:
   447                           	opt stack 0
   448  0000C7                     ?___lldiv:
   449                           	opt stack 0
   450  0000C7                     ?_D_UART_Read:
   451                           	opt stack 0
   452  0000C7                     D_UART_Enable@enable:
   453                           	opt stack 0
   454  0000C7                     putch@data:
   455                           	opt stack 0
   456  0000C7                     D_TMR0_Enable@enable:
   457                           	opt stack 0
   458  0000C7                     D_PWM_SetPwm@pwm:
   459                           	opt stack 0
   460  0000C7                     D_TMR1_Enable@enable:
   461                           	opt stack 0
   462  0000C7                     setAlarm@alarm:
   463                           	opt stack 0
   464  0000C7                     ___lwdiv@dividend:
   465                           	opt stack 0
   466  0000C7                     strcmp@s1:
   467                           	opt stack 0
   468  0000C7                     ___lldiv@dividend:
   469                           	opt stack 0
   470  0000C7                     commandAndMessage@door:
   471                           	opt stack 0
   472                           
   473                           ; 10 bytes @ 0x0
   474  0000C7                     	ds	1
   475  0000C8                     putch@max:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x1
   479  0000C8                     	ds	1
   480  0000C9                     ___lwdiv@divisor:
   481                           	opt stack 0
   482  0000C9                     strcmp@s2:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x2
   486  0000C9                     	ds	1
   487  0000CA                     C_DOOR_Init@cnt:
   488                           	opt stack 0
   489                           
   490                           ; 1 bytes @ 0x3
   491  0000CA                     	ds	1
   492  0000CB                     ??_strcmp:
   493  0000CB                     C_DOOR_Init@d:
   494                           	opt stack 0
   495  0000CB                     C_DOOR_ReadSensors@d:
   496                           	opt stack 0
   497  0000CB                     ___lwdiv@counter:
   498                           	opt stack 0
   499  0000CB                     ___lldiv@divisor:
   500                           	opt stack 0
   501                           
   502                           ; 4 bytes @ 0x4
   503  0000CB                     	ds	1
   504  0000CC                     strcmp@r:
   505                           	opt stack 0
   506  0000CC                     ___lwdiv@quotient:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x5
   510  0000CC                     	ds	2
   511  0000CE                     ?___lwmod:
   512                           	opt stack 0
   513  0000CE                     ___lwmod@dividend:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x7
   517  0000CE                     	ds	1
   518  0000CF                     C_DOOR_LockAll@d:
   519                           	opt stack 0
   520  0000CF                     C_DOOR_UnlockAll@d:
   521                           	opt stack 0
   522  0000CF                     ___lldiv@quotient:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x8
   526  0000CF                     	ds	1
   527  0000D0                     initDoors@door_cnt:
   528                           	opt stack 0
   529  0000D0                     ___lwmod@divisor:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x9
   533  0000D0                     	ds	1
   534  0000D1                     commandAndMessage@com:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0xA
   538  0000D1                     	ds	1
   539  0000D2                     ___lwmod@counter:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0xB
   543  0000D2                     	ds	1
   544  0000D3                     ?_printf:
   545                           	opt stack 0
   546  0000D3                     ___lldiv@counter:
   547                           	opt stack 0
   548  0000D3                     commandAndMessage@mes:
   549                           	opt stack 0
   550  0000D3                     printf@f:
   551                           	opt stack 0
   552                           
   553                           ; 3 bytes @ 0xC
   554  0000D3                     	ds	1
   555  0000D4                     D_UART_Init@name:
   556                           	opt stack 0
   557                           
   558                           ; 2 bytes @ 0xD
   559  0000D4                     	ds	1
   560  0000D5                     
   561                           ; 1 bytes @ 0xE
   562  0000D5                     	ds	1
   563  0000D6                     D_UART_Init@baud:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0xF
   567  0000D6                     	ds	2
   568  0000D8                     ??_printf:
   569  0000D8                     D_UART_Init@interrupts:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x11
   573  0000D8                     	ds	1
   574  0000D9                     printf@idx:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x12
   578  0000D9                     	ds	1
   579  0000DA                     printf@ap:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x13
   583  0000DA                     	ds	2
   584  0000DC                     printf@prec:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x15
   588  0000DC                     	ds	1
   589  0000DD                     printf@flag:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0x16
   593  0000DD                     	ds	1
   594  0000DE                     printf@val:
   595                           	opt stack 0
   596                           
   597                           ; 2 bytes @ 0x17
   598  0000DE                     	ds	2
   599  0000E0                     printf@c:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0x19
   603  0000E0                     	ds	1
   604  0000E1                     D_UART_Acknowledge@i:
   605                           	opt stack 0
   606  0000E1                     D_UART_Write@command:
   607                           	opt stack 0
   608  0000E1                     D_UART_WriteInt@command:
   609                           	opt stack 0
   610                           
   611                           ; 2 bytes @ 0x1A
   612  0000E1                     	ds	2
   613  0000E3                     D_UART_Write@data:
   614                           	opt stack 0
   615  0000E3                     D_UART_WriteInt@d:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x1C
   619  0000E3                     	ds	2
   620  0000E5                     ??_D_UART_Write:
   621  0000E5                     ??_D_UART_WriteInt:
   622                           
   623                           ; 1 bytes @ 0x1E
   624  0000E5                     	ds	1
   625  0000E6                     ??_C_DOOR_SendStates:
   626                           
   627                           ; 1 bytes @ 0x1F
   628  0000E6                     	ds	3
   629  0000E9                     C_DOOR_SendStates@com:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x22
   633  0000E9                     	ds	3
   634  0000EC                     C_DOOR_SendStates@mes:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x25
   638  0000EC                     	ds	2
   639  0000EE                     C_DOOR_SendStates@d:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x27
   643  0000EE                     	ds	1
   644  0000EF                     ??_run:
   645                           
   646                           ; 1 bytes @ 0x28
   647  0000EF                     	ds	1
   648  0000F0                     ??_main:
   649                           
   650                           ; 1 bytes @ 0x29
   651  0000F0                     	ds	2
   652                           tblptru	equ	0xFF8
   653                           tblptrh	equ	0xFF7
   654                           tblptrl	equ	0xFF6
   655                           tablat	equ	0xFF5
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           postdec1	equ	0xFE5
   659                           fsr1l	equ	0xFE1
   660                           
   661                           	psect	cstackCOMRAM
   662  000001                     __pcstackCOMRAM:
   663                           	opt stack 0
   664  000001                     fillDataBuffer@data:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x0
   668  000001                     	ds	1
   669  000002                     ??_HighISR:
   670                           
   671                           ; 1 bytes @ 0x1
   672  000002                     	ds	18
   673  000014                     ??_LowISR:
   674                           
   675                           ; 1 bytes @ 0x13
   676  000014                     	ds	21
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1l	equ	0xFE1
   685                           
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   688 ;;
   689 ;; *************** function _main *****************
   690 ;; Defined at:
   691 ;;		line 64 in file "main.c"
   692 ;; Parameters:    Size  Location     Type
   693 ;;		None
   694 ;; Auto vars:     Size  Location     Type
   695 ;;		None
   696 ;; Return value:  Size  Location     Type
   697 ;;                  1    wreg      void 
   698 ;; Registers used:
   699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   700 ;; Tracked objects:
   701 ;;		On entry : 0/0
   702 ;;		On exit  : 0/0
   703 ;;		Unchanged: 0/0
   704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   705 ;;      Params:         0       0       0       0       0       0       0       0       0
   706 ;;      Locals:         0       0       0       0       0       0       0       0       0
   707 ;;      Temps:          0       2       0       0       0       0       0       0       0
   708 ;;      Totals:         0       2       0       0       0       0       0       0       0
   709 ;;Total ram usage:        2 bytes
   710 ;; Hardware stack levels required when called:    8
   711 ;; This function calls:
   712 ;;		_D_PORT_Init
   713 ;;		_D_PWM_Init
   714 ;;		_D_TMR0_Init
   715 ;;		_D_TMR1_Init
   716 ;;		_D_UART_Enable
   717 ;;		_D_UART_Init
   718 ;;		_run
   719 ;; This function is called by:
   720 ;;		Startup code after reset
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text0
   725  0014FC                     __ptext0:
   726                           	opt stack 0
   727  0014FC                     _main:
   728                           	opt stack 23
   729                           
   730                           ;main.c: 65: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   731                           
   732                           ;incstack = 0
   733  0014FC  0E05               	movlw	5
   734  0014FE  0100               	movlb	0	; () banked
   735  001500  6FF1               	movwf	(??_main+1)& (0+255),b
   736  001502  0E0F               	movlw	15
   737  001504  6FF0               	movwf	??_main& (0+255),b
   738  001506  0EF1               	movlw	241
   739  001508                     u2147:
   740  001508  2EE8               	decfsz	wreg,f,c
   741  00150A  D7FE               	bra	u2147
   742  00150C  2FF0               	decfsz	??_main& (0+255),f,b
   743  00150E  D7FC               	bra	u2147
   744  001510  2FF1               	decfsz	(??_main+1)& (0+255),f,b
   745  001512  D7FA               	bra	u2147
   746                           
   747                           ;main.c: 67: D_PORT_Init();
   748  001514  ECE3  F00C         	call	_D_PORT_Init	;wreg free
   749                           
   750                           ;main.c: 71: D_UART_Init("P", 9600, 1);
   751  001518  0E3A               	movlw	low STR_11
   752  00151A  0100               	movlb	0	; () banked
   753  00151C  6FD4               	movwf	D_UART_Init@name& (0+255),b
   754  00151E  0E08               	movlw	high STR_11
   755  001520  6FD5               	movwf	(D_UART_Init@name+1)& (0+255),b
   756  001522  0E25               	movlw	37
   757  001524  6FD7               	movwf	(D_UART_Init@baud+1)& (0+255),b
   758  001526  0E80               	movlw	128
   759  001528  6FD6               	movwf	D_UART_Init@baud& (0+255),b
   760  00152A  0E01               	movlw	1
   761  00152C  6FD8               	movwf	D_UART_Init@interrupts& (0+255),b
   762  00152E  EC0B  F00B         	call	_D_UART_Init	;wreg free
   763                           
   764                           ;main.c: 72: D_UART_Enable(1);
   765  001532  0E01               	movlw	1
   766  001534  EC8F  F00C         	call	_D_UART_Enable
   767                           
   768                           ;main.c: 75: D_TMR0_Init();
   769  001538  ECA1  F00C         	call	_D_TMR0_Init	;wreg free
   770                           
   771                           ;main.c: 76: D_TMR1_Init();
   772  00153C  ECC4  F00C         	call	_D_TMR1_Init	;wreg free
   773                           
   774                           ;main.c: 79: D_PWM_Init();
   775  001540  ECD4  F00C         	call	_D_PWM_Init	;wreg free
   776                           
   777                           ;main.c: 81: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   778  001544  0E05               	movlw	5
   779  001546  0100               	movlb	0	; () banked
   780  001548  6FF1               	movwf	(??_main+1)& (0+255),b
   781  00154A  0E0F               	movlw	15
   782  00154C  6FF0               	movwf	??_main& (0+255),b
   783  00154E  0EF1               	movlw	241
   784  001550                     u2157:
   785  001550  2EE8               	decfsz	wreg,f,c
   786  001552  D7FE               	bra	u2157
   787  001554  2FF0               	decfsz	??_main& (0+255),f,b
   788  001556  D7FC               	bra	u2157
   789  001558  2FF1               	decfsz	(??_main+1)& (0+255),f,b
   790  00155A  D7FA               	bra	u2157
   791                           
   792                           ;main.c: 83: newAlarm = 0;
   793  00155C  0E00               	movlw	0
   794  00155E  6E3A               	movwf	_newAlarm,c
   795                           
   796                           ;main.c: 84: oldAlarm = 0;
   797  001560  0E00               	movlw	0
   798  001562  6E39               	movwf	_oldAlarm,c
   799                           
   800                           ;main.c: 85: lock = 0;
   801  001564  0E00               	movlw	0
   802  001566  6E3D               	movwf	_lock,c
   803                           
   804                           ;main.c: 86: tick = 0;
   805  001568  0E00               	movlw	0
   806  00156A  6E3E               	movwf	_tick,c
   807                           
   808                           ;main.c: 87: running = 0;
   809  00156C  0E00               	movlw	0
   810  00156E  6E3C               	movwf	_running,c
   811                           
   812                           ;main.c: 89: _delay((unsigned long)((200)*(16000000UL/4000.0)));
   813  001570  0E05               	movlw	5
   814  001572  0100               	movlb	0	; () banked
   815  001574  6FF1               	movwf	(??_main+1)& (0+255),b
   816  001576  0E0F               	movlw	15
   817  001578  6FF0               	movwf	??_main& (0+255),b
   818  00157A  0EF1               	movlw	241
   819  00157C                     u2167:
   820  00157C  2EE8               	decfsz	wreg,f,c
   821  00157E  D7FE               	bra	u2167
   822  001580  2FF0               	decfsz	??_main& (0+255),f,b
   823  001582  D7FC               	bra	u2167
   824  001584  2FF1               	decfsz	(??_main+1)& (0+255),f,b
   825  001586  D7FA               	bra	u2167
   826                           
   827                           ;main.c: 93: PORTB = 0xFF;
   828                           
   829                           ;main.c: 92: } else {
   830                           
   831                           ;main.c: 91: PORTB = 0x00;
   832                           
   833                           ;main.c: 90: if (0) {
   834  001588  6881               	setf	3969,c	;volatile
   835                           
   836                           ;main.c: 94: }
   837                           ;main.c: 96: run();
   838  00158A  EC51  F005         	call	_run	;wreg free
   839  00158E  EF76  F000         	goto	start
   840  001592                     __end_of_main:
   841                           	opt stack 0
   842                           tblptru	equ	0xFF8
   843                           tblptrh	equ	0xFF7
   844                           tblptrl	equ	0xFF6
   845                           tablat	equ	0xFF5
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           postdec1	equ	0xFE5
   849                           fsr1l	equ	0xFE1
   850                           
   851 ;; *************** function _run *****************
   852 ;; Defined at:
   853 ;;		line 107 in file "main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;		None
   858 ;; Return value:  Size  Location     Type
   859 ;;                  1    wreg      void 
   860 ;; Registers used:
   861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   862 ;; Tracked objects:
   863 ;;		On entry : 0/0
   864 ;;		On exit  : 0/0
   865 ;;		Unchanged: 0/0
   866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   867 ;;      Params:         0       0       0       0       0       0       0       0       0
   868 ;;      Locals:         0       0       0       0       0       0       0       0       0
   869 ;;      Temps:          0       1       0       0       0       0       0       0       0
   870 ;;      Totals:         0       1       0       0       0       0       0       0       0
   871 ;;Total ram usage:        1 bytes
   872 ;; Hardware stack levels used:    1
   873 ;; Hardware stack levels required when called:    7
   874 ;; This function calls:
   875 ;;		_C_DOOR_LockAll
   876 ;;		_C_DOOR_ReadSensors
   877 ;;		_C_DOOR_SendStates
   878 ;;		_C_DOOR_UnlockAll
   879 ;;		_D_PWM_SetPwm
   880 ;;		_D_TMR1_Enable
   881 ;;		_D_UART_Acknowledge
   882 ;;		_D_UART_Read
   883 ;;		_D_UART_Write
   884 ;;		_D_UART_WriteInt
   885 ;;		_initDoors
   886 ;;		_setAlarm
   887 ;;		_strcmp
   888 ;; This function is called by:
   889 ;;		_main
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text1
   894  000AA2                     __ptext1:
   895                           	opt stack 0
   896  000AA2                     _run:
   897                           	opt stack 23
   898                           
   899                           ;main.c: 111: if (lock) {
   900                           
   901                           ;incstack = 0
   902                           ;main.c: 108: while(1) {
   903  000AA2  503D               	movf	_lock,w,c
   904  000AA4  B4D8               	btfsc	status,2,c
   905  000AA6  D009               	goto	l333
   906                           
   907                           ;main.c: 112: D_TMR1_Enable(0);
   908  000AA8  0E00               	movlw	0
   909  000AAA  ECF2  F00C         	call	_D_TMR1_Enable
   910                           
   911                           ;main.c: 113: lockDelayCnt = 0;
   912  000AAE  0E00               	movlw	0
   913  000AB0  6E41               	movwf	_lockDelayCnt,c
   914                           
   915                           ;main.c: 114: C_DOOR_LockAll();
   916  000AB2  ECD5  F009         	call	_C_DOOR_LockAll	;wreg free
   917                           
   918                           ;main.c: 115: lock = 0;
   919  000AB6  0E00               	movlw	0
   920  000AB8  6E3D               	movwf	_lock,c
   921  000ABA                     l333:
   922                           
   923                           ;main.c: 116: }
   924                           ;main.c: 119: if (readReady) {
   925  000ABA  5042               	movf	_readReady,w,c
   926  000ABC  B4D8               	btfsc	status,2,c
   927  000ABE  D0B8               	goto	l347
   928                           
   929                           ;main.c: 120: readReady = 0;
   930  000AC0  0E00               	movlw	0
   931  000AC2  6E42               	movwf	_readReady,c
   932                           
   933                           ;main.c: 121: read = D_UART_Read();
   934  000AC4  EC4C  F00C         	call	_D_UART_Read	;wreg free
   935  000AC8  EE20  F029         	lfsr	2,_read
   936  000ACC  0E06               	movlw	6
   937  000ACE                     u1981:
   938  000ACE  CFEB FFDB          	movff	plusw0,plusw2
   939  000AD2  06E8               	decf	wreg,f,c
   940  000AD4  E2FC               	bc	u1981
   941                           
   942                           ;main.c: 125: D_UART_Acknowledge(read.ackId);
   943  000AD6  502F               	movf	_read+6,w,c
   944  000AD8  EC4C  F00B         	call	_D_UART_Acknowledge
   945                           
   946                           ;main.c: 128: communicationCnt = 0;
   947  000ADC  0E00               	movlw	0
   948  000ADE  6E40               	movwf	_communicationCnt,c
   949                           
   950                           ;main.c: 129: if (oldAlarm == 3) {
   951  000AE0  0E03               	movlw	3
   952  000AE2  1839               	xorwf	_oldAlarm,w,c
   953  000AE4  A4D8               	btfss	status,2,c
   954  000AE6  D002               	goto	l335
   955                           
   956                           ;main.c: 130: newAlarm = 0;
   957  000AE8  0E00               	movlw	0
   958  000AEA  6E3A               	movwf	_newAlarm,c
   959  000AEC                     l335:
   960                           
   961                           ;main.c: 131: }
   962                           ;main.c: 134: if (strcmp(read.command, "L") == 0) {
   963  000AEC  C02B  F0C7         	movff	_read+2,strcmp@s1
   964  000AF0  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   965  000AF4  0E38               	movlw	low STR_12
   966  000AF6  0100               	movlb	0	; () banked
   967  000AF8  6FC9               	movwf	strcmp@s2& (0+255),b
   968  000AFA  0E08               	movlw	high STR_12
   969  000AFC  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   970  000AFE  EC03  F00C         	call	_strcmp	;wreg free
   971  000B02  0100               	movlb	0	; () banked
   972  000B04  51C7               	movf	?_strcmp& (0+255),w,b
   973  000B06  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
   974  000B08  A4D8               	btfss	status,2,c
   975  000B0A  D006               	goto	l336
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 135: lockDelayCnt = 0;
   979  000B0C  0E00               	movlw	0
   980  000B0E  6E41               	movwf	_lockDelayCnt,c
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 136: D_TMR1_Enable(1);
   984  000B10  0E01               	movlw	1
   985  000B12  ECF2  F00C         	call	_D_TMR1_Enable
   986                           
   987                           ;main.c: 139: } else if (strcmp(read.command, "U") == 0) {
   988  000B16  D08C               	goto	l347
   989  000B18                     l336:
   990  000B18  C02B  F0C7         	movff	_read+2,strcmp@s1
   991  000B1C  C02C  F0C8         	movff	_read+3,strcmp@s1+1
   992  000B20  0E40               	movlw	low STR_13
   993  000B22  0100               	movlb	0	; () banked
   994  000B24  6FC9               	movwf	strcmp@s2& (0+255),b
   995  000B26  0E08               	movlw	high STR_13
   996  000B28  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
   997  000B2A  EC03  F00C         	call	_strcmp	;wreg free
   998  000B2E  0100               	movlb	0	; () banked
   999  000B30  51C7               	movf	?_strcmp& (0+255),w,b
  1000  000B32  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1001  000B34  A4D8               	btfss	status,2,c
  1002  000B36  D008               	goto	l338
  1003                           
  1004                           ; BSR set to: 0
  1005                           ;main.c: 140: lockDelayCnt = 0;
  1006  000B38  0E00               	movlw	0
  1007  000B3A  6E41               	movwf	_lockDelayCnt,c
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;main.c: 141: D_TMR1_Enable(0);
  1011  000B3C  0E00               	movlw	0
  1012  000B3E  ECF2  F00C         	call	_D_TMR1_Enable
  1013                           
  1014                           ;main.c: 142: C_DOOR_UnlockAll();
  1015  000B42  EC7B  F009         	call	_C_DOOR_UnlockAll	;wreg free
  1016                           
  1017                           ;main.c: 145: } else if (strcmp(read.command, "I") == 0) {
  1018  000B46  D074               	goto	l347
  1019  000B48                     l338:
  1020  000B48  C02B  F0C7         	movff	_read+2,strcmp@s1
  1021  000B4C  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1022  000B50  0E36               	movlw	low STR_14
  1023  000B52  0100               	movlb	0	; () banked
  1024  000B54  6FC9               	movwf	strcmp@s2& (0+255),b
  1025  000B56  0E08               	movlw	high STR_14
  1026  000B58  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1027  000B5A  EC03  F00C         	call	_strcmp	;wreg free
  1028  000B5E  0100               	movlb	0	; () banked
  1029  000B60  51C7               	movf	?_strcmp& (0+255),w,b
  1030  000B62  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1031  000B64  A4D8               	btfss	status,2,c
  1032  000B66  D00B               	goto	l340
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;main.c: 146: initDoors((uint8_t)(*read.message - 0x30));
  1036  000B68  C02D  FFD9         	movff	_read+4,fsr2l
  1037  000B6C  C02E  FFDA         	movff	_read+5,fsr2h
  1038  000B70  50DF               	movf	indf2,w,c
  1039  000B72  0FD0               	addlw	208
  1040  000B74  ECB3  F00C         	call	_initDoors
  1041                           
  1042                           ;main.c: 147: running = 1;
  1043  000B78  0E01               	movlw	1
  1044  000B7A  6E3C               	movwf	_running,c
  1045                           
  1046                           ;main.c: 150: } else if (strcmp(read.command, "R") == 0) {
  1047  000B7C  D059               	goto	l347
  1048  000B7E                     l340:
  1049  000B7E  C02B  F0C7         	movff	_read+2,strcmp@s1
  1050  000B82  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1051  000B86  0E3C               	movlw	low STR_15
  1052  000B88  0100               	movlb	0	; () banked
  1053  000B8A  6FC9               	movwf	strcmp@s2& (0+255),b
  1054  000B8C  0E08               	movlw	high STR_15
  1055  000B8E  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1056  000B90  EC03  F00C         	call	_strcmp	;wreg free
  1057  000B94  0100               	movlb	0	; () banked
  1058  000B96  51C7               	movf	?_strcmp& (0+255),w,b
  1059  000B98  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1060  000B9A  A4D8               	btfss	status,2,c
  1061  000B9C  D00B               	goto	l342
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;main.c: 151: _delay((unsigned long)((20)*(16000000UL/4000.0)));
  1065  000B9E  0E68               	movlw	104
  1066  000BA0  0100               	movlb	0	; () banked
  1067  000BA2  6FEF               	movwf	??_run& (0+255),b
  1068  000BA4  0EE4               	movlw	228
  1069  000BA6                     u2177:
  1070  000BA6  2EE8               	decfsz	wreg,f,c
  1071  000BA8  D7FE               	bra	u2177
  1072  000BAA  2FEF               	decfsz	??_run& (0+255),f,b
  1073  000BAC  D7FC               	bra	u2177
  1074  000BAE  F000               	nop	
  1075  000BB0  00FF               	reset		;# 
  1076                           
  1077                           ;main.c: 155: } else if (strcmp(read.command, "P") == 0) {
  1078  000BB2  D03E               	goto	l347
  1079  000BB4                     l342:
  1080  000BB4  C02B  F0C7         	movff	_read+2,strcmp@s1
  1081  000BB8  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1082  000BBC  0E3A               	movlw	low STR_11
  1083  000BBE  0100               	movlb	0	; () banked
  1084  000BC0  6FC9               	movwf	strcmp@s2& (0+255),b
  1085  000BC2  0E08               	movlw	high STR_11
  1086  000BC4  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1087  000BC6  EC03  F00C         	call	_strcmp	;wreg free
  1088  000BCA  0100               	movlb	0	; () banked
  1089  000BCC  51C7               	movf	?_strcmp& (0+255),w,b
  1090  000BCE  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1091  000BD0  A4D8               	btfss	status,2,c
  1092  000BD2  D00A               	goto	l344
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;main.c: 156: D_UART_WriteInt("S", running);
  1096  000BD4  0E3E               	movlw	low STR_17
  1097  000BD6  6FE1               	movwf	D_UART_WriteInt@command& (0+255),b
  1098  000BD8  0E08               	movlw	high STR_17
  1099  000BDA  6FE2               	movwf	(D_UART_WriteInt@command+1)& (0+255),b
  1100  000BDC  C03C  F0E3         	movff	_running,D_UART_WriteInt@d
  1101  000BE0  6BE4               	clrf	(D_UART_WriteInt@d+1)& (0+255),b
  1102  000BE2  ECB6  F008         	call	_D_UART_WriteInt	;wreg free
  1103                           
  1104                           ;main.c: 159: } else if (strcmp(read.command, "A") == 0) {
  1105  000BE6  D024               	goto	l347
  1106  000BE8                     l344:
  1107  000BE8  C02B  F0C7         	movff	_read+2,strcmp@s1
  1108  000BEC  C02C  F0C8         	movff	_read+3,strcmp@s1+1
  1109  000BF0  0E32               	movlw	low STR_18
  1110  000BF2  0100               	movlb	0	; () banked
  1111  000BF4  6FC9               	movwf	strcmp@s2& (0+255),b
  1112  000BF6  0E08               	movlw	high STR_18
  1113  000BF8  6FCA               	movwf	(strcmp@s2+1)& (0+255),b
  1114  000BFA  EC03  F00C         	call	_strcmp	;wreg free
  1115  000BFE  0100               	movlb	0	; () banked
  1116  000C00  51C7               	movf	?_strcmp& (0+255),w,b
  1117  000C02  11C8               	iorwf	(?_strcmp+1)& (0+255),w,b
  1118  000C04  A4D8               	btfss	status,2,c
  1119  000C06  D009               	goto	l346
  1120                           
  1121                           ; BSR set to: 0
  1122                           ;main.c: 160: setAlarm((uint8_t)(*read.message - 0x30));
  1123  000C08  C02D  FFD9         	movff	_read+4,fsr2l
  1124  000C0C  C02E  FFDA         	movff	_read+5,fsr2h
  1125  000C10  50DF               	movf	indf2,w,c
  1126  000C12  0FD0               	addlw	208
  1127  000C14  EC06  F00D         	call	_setAlarm
  1128                           
  1129                           ;main.c: 162: } else {
  1130  000C18  D00B               	goto	l347
  1131  000C1A                     l346:
  1132                           
  1133                           ;main.c: 163: D_UART_Write("E", "U");
  1134  000C1A  0E34               	movlw	low STR_19
  1135  000C1C  0100               	movlb	0	; () banked
  1136  000C1E  6FE1               	movwf	D_UART_Write@command& (0+255),b
  1137  000C20  0E08               	movlw	high STR_19
  1138  000C22  6FE2               	movwf	(D_UART_Write@command+1)& (0+255),b
  1139  000C24  0E40               	movlw	low STR_13
  1140  000C26  6FE3               	movwf	D_UART_Write@data& (0+255),b
  1141  000C28  0E08               	movlw	high STR_13
  1142  000C2A  6FE4               	movwf	(D_UART_Write@data+1)& (0+255),b
  1143  000C2C  EC46  F008         	call	_D_UART_Write	;wreg free
  1144  000C30                     l347:
  1145                           
  1146                           ;main.c: 165: }
  1147                           ;main.c: 166: }
  1148                           ;main.c: 169: if (tick) {
  1149  000C30  503E               	movf	_tick,w,c
  1150  000C32  B4D8               	btfsc	status,2,c
  1151  000C34  D736               	goto	_run
  1152                           
  1153                           ;main.c: 170: tick = 0;
  1154  000C36  0E00               	movlw	0
  1155  000C38  6E3E               	movwf	_tick,c
  1156                           
  1157                           ;main.c: 173: if (ledDelayCnt < 2) {
  1158  000C3A  0E02               	movlw	2
  1159  000C3C  603F               	cpfslt	_ledDelayCnt,c
  1160  000C3E  D002               	goto	l349
  1161                           
  1162                           ;main.c: 174: ledDelayCnt++;
  1163  000C40  2A3F               	incf	_ledDelayCnt,f,c
  1164                           
  1165                           ;main.c: 175: } else {
  1166  000C42  D002               	goto	l350
  1167  000C44                     l349:
  1168                           
  1169                           ;main.c: 177: ledDelayCnt = 0;
  1170  000C44  0E00               	movlw	0
  1171  000C46  6E3F               	movwf	_ledDelayCnt,c
  1172  000C48                     l350:
  1173                           
  1174                           ;main.c: 178: }
  1175                           ;main.c: 181: C_DOOR_ReadSensors();
  1176  000C48  EC2E  F00A         	call	_C_DOOR_ReadSensors	;wreg free
  1177                           
  1178                           ;main.c: 184: C_DOOR_SendStates();
  1179  000C4C  ECCF  F007         	call	_C_DOOR_SendStates	;wreg free
  1180                           
  1181                           ;main.c: 187: if (communicationCnt < 60) {
  1182  000C50  0E3C               	movlw	60
  1183  000C52  6040               	cpfslt	_communicationCnt,c
  1184  000C54  D002               	goto	l351
  1185                           
  1186                           ;main.c: 188: communicationCnt++;
  1187  000C56  2A40               	incf	_communicationCnt,f,c
  1188                           
  1189                           ;main.c: 189: } else {
  1190  000C58  D005               	goto	l353
  1191  000C5A                     l351:
  1192                           
  1193                           ;main.c: 190: if (oldAlarm == 0) {
  1194  000C5A  5039               	movf	_oldAlarm,w,c
  1195  000C5C  A4D8               	btfss	status,2,c
  1196  000C5E  D002               	goto	l353
  1197                           
  1198                           ;main.c: 191: newAlarm = 3;
  1199  000C60  0E03               	movlw	3
  1200  000C62  6E3A               	movwf	_newAlarm,c
  1201  000C64                     l353:
  1202                           
  1203                           ;main.c: 192: }
  1204                           ;main.c: 193: }
  1205                           ;main.c: 196: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1206  000C64  5039               	movf	_oldAlarm,w,c
  1207  000C66  183A               	xorwf	_newAlarm,w,c
  1208  000C68  A4D8               	btfss	status,2,c
  1209  000C6A  D017               	goto	l357
  1210  000C6C  043A               	decf	_newAlarm,w,c
  1211  000C6E  B4D8               	btfsc	status,2,c
  1212  000C70  D014               	goto	l357
  1213  000C72  0E03               	movlw	3
  1214  000C74  183A               	xorwf	_newAlarm,w,c
  1215  000C76  B4D8               	btfsc	status,2,c
  1216  000C78  D010               	goto	l357
  1217  000C7A  D713               	goto	_run
  1218  000C7C                     
  1219                           ;main.c: 200: pwm = 0x00;
  1220                           
  1221                           ;main.c: 199: case 0:
  1222  000C7C  0E00               	movlw	0
  1223  000C7E  D00B               	goto	L1
  1224  000C80                     
  1225                           ;main.c: 204: case 1:
  1226                           ;main.c: 205: if (pwm == 0) {
  1227  000C80  503B               	movf	_pwm,w,c
  1228  000C82  A4D8               	btfss	status,2,c
  1229  000C84  D002               	goto	l363
  1230                           
  1231                           ;main.c: 206: pwm = 1;
  1232  000C86  0E01               	movlw	1
  1233  000C88  6E3B               	movwf	_pwm,c
  1234  000C8A                     l363:
  1235                           
  1236                           ;main.c: 207: }
  1237                           ;main.c: 208: pwm = (uint8_t)(pwm * 0x02);
  1238  000C8A  503B               	movf	_pwm,w,c
  1239  000C8C  0D02               	mullw	2
  1240  000C8E  CFF3 F03B          	movff	prodl,_pwm
  1241                           
  1242                           ;main.c: 209: break;
  1243  000C92  D011               	goto	l360
  1244  000C94                     
  1245                           ;main.c: 212: pwm = 0x7F;
  1246  000C94  0E7F               	movlw	127
  1247  000C96                     L1:
  1248  000C96  6E3B               	movwf	_pwm,c
  1249                           
  1250                           ;main.c: 214: }
  1251                           
  1252                           ;main.c: 213: break;
  1253  000C98  D00E               	goto	l360
  1254  000C9A                     l357:
  1255  000C9A  503A               	movf	_newAlarm,w,c
  1256                           
  1257                           ; Switch size 1, requested type "space"
  1258                           ; Number of cases is 4, Range of values is 0 to 3
  1259                           ; switch strategies available:
  1260                           ; Name         Instructions Cycles
  1261                           ; simple_byte           13     7 (average)
  1262                           ;	Chosen strategy is simple_byte
  1263  000C9C  0A00               	xorlw	0	; case 0
  1264  000C9E  B4D8               	btfsc	status,2,c
  1265  000CA0  D7ED               	goto	l358
  1266  000CA2  0A01               	xorlw	1	; case 1
  1267  000CA4  B4D8               	btfsc	status,2,c
  1268  000CA6  D7EC               	goto	l361
  1269  000CA8  0A03               	xorlw	3	; case 2
  1270  000CAA  B4D8               	btfsc	status,2,c
  1271  000CAC  D7F3               	goto	l364
  1272  000CAE  0A01               	xorlw	1	; case 3
  1273  000CB0  B4D8               	btfsc	status,2,c
  1274  000CB2  D7E6               	goto	l361
  1275  000CB4  D7E3               	goto	l358
  1276  000CB6                     l360:
  1277                           
  1278                           ;main.c: 215: D_PWM_SetPwm(pwm);
  1279  000CB6  503B               	movf	_pwm,w,c
  1280  000CB8  EC64  F00C         	call	_D_PWM_SetPwm
  1281                           
  1282                           ;main.c: 216: oldAlarm = newAlarm;
  1283  000CBC  C03A  F039         	movff	_newAlarm,_oldAlarm
  1284  000CC0  D6F0               	goto	_run
  1285  000CC2                     __end_of_run:
  1286                           	opt stack 0
  1287                           tblptru	equ	0xFF8
  1288                           tblptrh	equ	0xFF7
  1289                           tblptrl	equ	0xFF6
  1290                           tablat	equ	0xFF5
  1291                           prodl	equ	0xFF3
  1292                           postinc0	equ	0xFEE
  1293                           plusw0	equ	0xFEB
  1294                           wreg	equ	0xFE8
  1295                           postdec1	equ	0xFE5
  1296                           fsr1l	equ	0xFE1
  1297                           indf2	equ	0xFDF
  1298                           plusw2	equ	0xFDB
  1299                           fsr2h	equ	0xFDA
  1300                           fsr2l	equ	0xFD9
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _strcmp *****************
  1304 ;; Defined at:
  1305 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  1308 ;;		 -> readBuffer(166), 
  1309 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  1310 ;;		 -> STR_18(2), STR_16(2), STR_15(2), STR_14(2), 
  1311 ;;		 -> STR_13(2), STR_12(2), 
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;  r               1    5[BANK0 ] char 
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  2    0[BANK0 ] int 
  1316 ;; Registers used:
  1317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1323 ;;      Params:         0       4       0       0       0       0       0       0       0
  1324 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1325 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1326 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1327 ;;Total ram usage:        6 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    3
  1330 ;; This function calls:
  1331 ;;		Nothing
  1332 ;; This function is called by:
  1333 ;;		_run
  1334 ;; This function uses a non-reentrant model
  1335 ;;
  1336                           
  1337                           	psect	text2
  1338  001806                     __ptext2:
  1339                           	opt stack 0
  1340  001806                     _strcmp:
  1341                           	opt stack 26
  1342                           
  1343                           ;incstack = 0
  1344  001806  D005               	goto	l970
  1345  001808  0100               	movlb	0	; () banked
  1346  00180A  4BC7               	infsnz	strcmp@s1& (0+255),f,b
  1347  00180C  2BC8               	incf	(strcmp@s1+1)& (0+255),f,b
  1348  00180E  4BC9               	infsnz	strcmp@s2& (0+255),f,b
  1349  001810  2BCA               	incf	(strcmp@s2+1)& (0+255),f,b
  1350  001812                     l970:
  1351                           
  1352                           ; BSR set to: 0
  1353  001812  C0C7  FFD9         	movff	strcmp@s1,fsr2l
  1354  001816  C0C8  FFDA         	movff	strcmp@s1+1,fsr2h
  1355  00181A  50DF               	movf	indf2,w,c
  1356  00181C  0100               	movlb	0	; () banked
  1357  00181E  6FCB               	movwf	??_strcmp& (0+255),b
  1358  001820  C0C9  FFF6         	movff	strcmp@s2,tblptrl
  1359  001824  C0CA  FFF7         	movff	strcmp@s2+1,tblptrh
  1360  001828                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1361  001828  6AF8               	clrf	tblptru,c
  1362  00182A                     	endif
  1363  00182A                     	if	0	;tblptru may be non-zero
  1364  00182A                     	endif
  1365  00182A  0008               	tblrd		*
  1366  00182C  50F5               	movf	tablat,w,c
  1367  00182E  0800               	sublw	0
  1368  001830  25CB               	addwf	??_strcmp& (0+255),w,b
  1369  001832  6FCC               	movwf	strcmp@r& (0+255),b
  1370  001834  51CC               	movf	strcmp@r& (0+255),w,b
  1371  001836  A4D8               	btfss	status,2,c
  1372  001838  D007               	goto	u1900
  1373                           
  1374                           ; BSR set to: 0
  1375  00183A  C0C7  FFD9         	movff	strcmp@s1,fsr2l
  1376  00183E  C0C8  FFDA         	movff	strcmp@s1+1,fsr2h
  1377  001842  50DF               	movf	indf2,w,c
  1378  001844  A4D8               	btfss	status,2,c
  1379  001846  D7E0               	goto	l971
  1380  001848                     u1900:
  1381                           
  1382                           ; BSR set to: 0
  1383                           
  1384                           ; BSR set to: 0
  1385                           
  1386                           ; BSR set to: 0
  1387  001848  51CC               	movf	strcmp@r& (0+255),w,b
  1388  00184A  6FC7               	movwf	?_strcmp& (0+255),b
  1389  00184C  6BC8               	clrf	(?_strcmp+1)& (0+255),b
  1390  00184E  BFC7               	btfsc	?_strcmp& (0+255),7,b
  1391  001850  07C8               	decf	(?_strcmp+1)& (0+255),f,b
  1392  001852  0012               	return	
  1393  001854                     __end_of_strcmp:
  1394                           	opt stack 0
  1395                           tblptru	equ	0xFF8
  1396                           tblptrh	equ	0xFF7
  1397                           tblptrl	equ	0xFF6
  1398                           tablat	equ	0xFF5
  1399                           prodl	equ	0xFF3
  1400                           postinc0	equ	0xFEE
  1401                           plusw0	equ	0xFEB
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1l	equ	0xFE1
  1405                           indf2	equ	0xFDF
  1406                           plusw2	equ	0xFDB
  1407                           fsr2h	equ	0xFDA
  1408                           fsr2l	equ	0xFD9
  1409                           status	equ	0xFD8
  1410                           
  1411 ;; *************** function _setAlarm *****************
  1412 ;; Defined at:
  1413 ;;		line 60 in file "main.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;  alarm           1    wreg     unsigned char 
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  alarm           1    0[BANK0 ] unsigned char 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0
  1428 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1430 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1431 ;;Total ram usage:        1 bytes
  1432 ;; Hardware stack levels used:    1
  1433 ;; Hardware stack levels required when called:    3
  1434 ;; This function calls:
  1435 ;;		Nothing
  1436 ;; This function is called by:
  1437 ;;		_run
  1438 ;; This function uses a non-reentrant model
  1439 ;;
  1440                           
  1441                           	psect	text3
  1442  001A0C                     __ptext3:
  1443                           	opt stack 0
  1444  001A0C                     _setAlarm:
  1445                           	opt stack 26
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;incstack = 0
  1449                           ;setAlarm@alarm stored from wreg
  1450  001A0C  0100               	movlb	0	; () banked
  1451  001A0E  6FC7               	movwf	setAlarm@alarm& (0+255),b
  1452                           
  1453                           ;main.c: 61: newAlarm = alarm;
  1454  001A10  C0C7  F03A         	movff	setAlarm@alarm,_newAlarm
  1455  001A14  0012               	return		;funcret
  1456  001A16                     __end_of_setAlarm:
  1457                           	opt stack 0
  1458                           tblptru	equ	0xFF8
  1459                           tblptrh	equ	0xFF7
  1460                           tblptrl	equ	0xFF6
  1461                           tablat	equ	0xFF5
  1462                           prodl	equ	0xFF3
  1463                           postinc0	equ	0xFEE
  1464                           plusw0	equ	0xFEB
  1465                           wreg	equ	0xFE8
  1466                           postdec1	equ	0xFE5
  1467                           fsr1l	equ	0xFE1
  1468                           indf2	equ	0xFDF
  1469                           plusw2	equ	0xFDB
  1470                           fsr2h	equ	0xFDA
  1471                           fsr2l	equ	0xFD9
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _initDoors *****************
  1475 ;; Defined at:
  1476 ;;		line 48 in file "main.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  door_cnt        1    wreg     unsigned char 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  door_cnt        1    9[BANK0 ] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;                  1    wreg      void 
  1483 ;; Registers used:
  1484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 0/0
  1487 ;;		On exit  : 0/0
  1488 ;;		Unchanged: 0/0
  1489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1490 ;;      Params:         0       0       0       0       0       0       0       0       0
  1491 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1493 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1494 ;;Total ram usage:        1 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    4
  1497 ;; This function calls:
  1498 ;;		_C_DOOR_Init
  1499 ;;		_C_DOOR_LockAll
  1500 ;;		_D_TMR0_Enable
  1501 ;; This function is called by:
  1502 ;;		_run
  1503 ;; This function uses a non-reentrant model
  1504 ;;
  1505                           
  1506                           	psect	text4
  1507  001966                     __ptext4:
  1508                           	opt stack 0
  1509  001966                     _initDoors:
  1510                           	opt stack 25
  1511                           
  1512                           ;incstack = 0
  1513                           ;initDoors@door_cnt stored from wreg
  1514  001966  0100               	movlb	0	; () banked
  1515  001968  6FD0               	movwf	initDoors@door_cnt& (0+255),b
  1516                           
  1517                           ;main.c: 49: if (door_cnt < 1) {
  1518  00196A  0100               	movlb	0	; () banked
  1519  00196C  51D0               	movf	initDoors@door_cnt& (0+255),w,b
  1520  00196E  A4D8               	btfss	status,2,c
  1521  001970  D002               	goto	l318
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 50: door_cnt = 1;
  1525  001972  0E01               	movlw	1
  1526  001974  6FD0               	movwf	initDoors@door_cnt& (0+255),b
  1527  001976                     l318:
  1528                           
  1529                           ; BSR set to: 0
  1530                           ;main.c: 51: }
  1531                           ;main.c: 53: C_DOOR_Init(door_cnt);
  1532                           
  1533                           ; BSR set to: 0
  1534  001976  51D0               	movf	initDoors@door_cnt& (0+255),w,b
  1535  001978  EC26  F007         	call	_C_DOOR_Init
  1536                           
  1537                           ;main.c: 54: C_DOOR_LockAll();
  1538  00197C  ECD5  F009         	call	_C_DOOR_LockAll	;wreg free
  1539                           
  1540                           ;main.c: 57: D_TMR0_Enable(1);
  1541  001980  0E01               	movlw	1
  1542  001982  ECFC  F00C         	call	_D_TMR0_Enable
  1543  001986  0012               	return		;funcret
  1544  001988                     __end_of_initDoors:
  1545                           	opt stack 0
  1546                           tblptru	equ	0xFF8
  1547                           tblptrh	equ	0xFF7
  1548                           tblptrl	equ	0xFF6
  1549                           tablat	equ	0xFF5
  1550                           prodl	equ	0xFF3
  1551                           postinc0	equ	0xFEE
  1552                           plusw0	equ	0xFEB
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           indf2	equ	0xFDF
  1557                           plusw2	equ	0xFDB
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _C_DOOR_LockAll *****************
  1563 ;; Defined at:
  1564 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;  d               1    8[BANK0 ] unsigned char 
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0
  1579 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1580 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1581 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1582 ;;Total ram usage:        9 bytes
  1583 ;; Hardware stack levels used:    1
  1584 ;; Hardware stack levels required when called:    3
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_initDoors
  1589 ;;		_run
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text5
  1594  0013AA                     __ptext5:
  1595                           	opt stack 0
  1596  0013AA                     _C_DOOR_LockAll:
  1597                           	opt stack 25
  1598                           
  1599                           ;DOOR_Controller.c: 80: uint8_t d;
  1600                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1601                           
  1602                           ;incstack = 0
  1603  0013AA  0E00               	movlw	0
  1604  0013AC  0100               	movlb	0	; () banked
  1605  0013AE  6FCF               	movwf	C_DOOR_LockAll@d& (0+255),b
  1606  0013B0  D047               	goto	l30
  1607  0013B2                     
  1608                           ; BSR set to: 0
  1609                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1610                           
  1611                           ; BSR set to: 0
  1612  0013B2  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1613  0013B4  0D0A               	mullw	10
  1614  0013B6  0E02               	movlw	2
  1615  0013B8  26F3               	addwf	prodl,f,c
  1616  0013BA  0E00               	movlw	0
  1617  0013BC  22F4               	addwfc	prodh,f,c
  1618  0013BE  0E60               	movlw	low _doors
  1619  0013C0  24F3               	addwf	prodl,w,c
  1620  0013C2  6ED9               	movwf	fsr2l,c
  1621  0013C4  0E00               	movlw	high _doors
  1622  0013C6  20F4               	addwfc	prodh,w,c
  1623  0013C8  6EDA               	movwf	fsr2h,c
  1624  0013CA  CFDE F0C7          	movff	postinc2,??_C_DOOR_LockAll
  1625  0013CE  CFDD F0C8          	movff	postdec2,??_C_DOOR_LockAll+1
  1626  0013D2  C0C7  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1627  0013D6  C0C8  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1628  0013DA  50DF               	movf	indf2,w,c
  1629  0013DC  6FC9               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1630  0013DE  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1631  0013E0  0D0A               	mullw	10
  1632  0013E2  0E04               	movlw	4
  1633  0013E4  26F3               	addwf	prodl,f,c
  1634  0013E6  0E00               	movlw	0
  1635  0013E8  22F4               	addwfc	prodh,f,c
  1636  0013EA  0E60               	movlw	low _doors
  1637  0013EC  24F3               	addwf	prodl,w,c
  1638  0013EE  6ED9               	movwf	fsr2l,c
  1639  0013F0  0E00               	movlw	high _doors
  1640  0013F2  20F4               	addwfc	prodh,w,c
  1641  0013F4  6EDA               	movwf	fsr2h,c
  1642  0013F6  50DF               	movf	indf2,w,c
  1643  0013F8  6FCA               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1644  0013FA  0E01               	movlw	1
  1645  0013FC  6FCB               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1646  0013FE  2BCA               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1647  001400  D002               	goto	u1694
  1648  001402                     u1695:
  1649  001402  90D8               	bcf	status,0,c
  1650  001404  37CB               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1651  001406                     u1694:
  1652  001406  2FCA               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1653  001408  D7FC               	goto	u1695
  1654  00140A  0100               	movlb	0	; () banked
  1655  00140C  51CB               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1656  00140E  15C9               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1657  001410  6FCC               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1658  001412  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1659  001414  0D0A               	mullw	10
  1660  001416  0E02               	movlw	2
  1661  001418  26F3               	addwf	prodl,f,c
  1662  00141A  0E00               	movlw	0
  1663  00141C  22F4               	addwfc	prodh,f,c
  1664  00141E  0E60               	movlw	low _doors
  1665  001420  24F3               	addwf	prodl,w,c
  1666  001422  6ED9               	movwf	fsr2l,c
  1667  001424  0E00               	movlw	high _doors
  1668  001426  20F4               	addwfc	prodh,w,c
  1669  001428  6EDA               	movwf	fsr2h,c
  1670  00142A  CFDE F0CD          	movff	postinc2,??_C_DOOR_LockAll+6
  1671  00142E  CFDD F0CE          	movff	postdec2,??_C_DOOR_LockAll+7
  1672  001432  C0CD  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1673  001436  C0CE  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1674  00143A  51CC               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1675  00143C  1ADF               	xorwf	indf2,f,c
  1676                           
  1677                           ; BSR set to: 0
  1678  00143E  2BCF               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1679  001440                     l30:
  1680                           
  1681                           ; BSR set to: 0
  1682                           
  1683                           ; BSR set to: 0
  1684  001440  51CF               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1685  001442  6FC7               	movwf	??_C_DOOR_LockAll& (0+255),b
  1686  001444  6BC8               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1687  001446  5037               	movf	_door_cnt,w,c
  1688  001448  5DC7               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1689  00144A  51C8               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1690  00144C  0A80               	xorlw	128
  1691  00144E  6FC9               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1692  001450  5038               	movf	_door_cnt+1,w,c
  1693  001452  0A80               	xorlw	128
  1694  001454  59C9               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1695  001456  B0D8               	btfsc	status,0,c
  1696  001458  0012               	return	
  1697  00145A  D7AB               	goto	l31
  1698  00145C                     __end_of_C_DOOR_LockAll:
  1699                           	opt stack 0
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           prodh	equ	0xFF4
  1705                           prodl	equ	0xFF3
  1706                           postinc0	equ	0xFEE
  1707                           plusw0	equ	0xFEB
  1708                           wreg	equ	0xFE8
  1709                           postdec1	equ	0xFE5
  1710                           fsr1l	equ	0xFE1
  1711                           indf2	equ	0xFDF
  1712                           postinc2	equ	0xFDE
  1713                           postdec2	equ	0xFDD
  1714                           plusw2	equ	0xFDB
  1715                           fsr2h	equ	0xFDA
  1716                           fsr2l	equ	0xFD9
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _C_DOOR_Init *****************
  1720 ;; Defined at:
  1721 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  cnt             1    wreg     unsigned char 
  1724 ;; Auto vars:     Size  Location     Type
  1725 ;;  cnt             1    3[BANK0 ] unsigned char 
  1726 ;;  d               1    4[BANK0 ] unsigned char 
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      void 
  1729 ;; Registers used:
  1730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1736 ;;      Params:         0       0       0       0       0       0       0       0       0
  1737 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1738 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1739 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1740 ;;Total ram usage:        5 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    3
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_initDoors
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text6
  1751  000E4C                     __ptext6:
  1752                           	opt stack 0
  1753  000E4C                     _C_DOOR_Init:
  1754                           	opt stack 25
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;incstack = 0
  1758                           ;C_DOOR_Init@cnt stored from wreg
  1759  000E4C  0100               	movlb	0	; () banked
  1760  000E4E  6FCA               	movwf	C_DOOR_Init@cnt& (0+255),b
  1761                           
  1762                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1763  000E50  C0CA  F037         	movff	C_DOOR_Init@cnt,_door_cnt
  1764  000E54  6A38               	clrf	_door_cnt+1,c
  1765                           
  1766                           ;DOOR_Controller.c: 52: uint8_t d;
  1767                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1768  000E56  0E00               	movlw	0
  1769  000E58  0100               	movlb	0	; () banked
  1770  000E5A  6FCB               	movwf	C_DOOR_Init@d& (0+255),b
  1771  000E5C  D092               	goto	l24
  1772  000E5E                     
  1773                           ; BSR set to: 0
  1774                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1775                           
  1776                           ; BSR set to: 0
  1777  000E5E  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1778  000E60  0D0A               	mullw	10
  1779  000E62  0E60               	movlw	low _doors
  1780  000E64  24F3               	addwf	prodl,w,c
  1781  000E66  6ED9               	movwf	fsr2l,c
  1782  000E68  0E00               	movlw	high _doors
  1783  000E6A  20F4               	addwfc	prodh,w,c
  1784  000E6C  6EDA               	movwf	fsr2h,c
  1785  000E6E  C0CB  FFDF         	movff	C_DOOR_Init@d,indf2
  1786                           
  1787                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1788  000E72  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1789  000E74  0D0A               	mullw	10
  1790  000E76  0E01               	movlw	1
  1791  000E78  26F3               	addwf	prodl,f,c
  1792  000E7A  0E00               	movlw	0
  1793  000E7C  22F4               	addwfc	prodh,f,c
  1794  000E7E  0E60               	movlw	low _doors
  1795  000E80  24F3               	addwf	prodl,w,c
  1796  000E82  6ED9               	movwf	fsr2l,c
  1797  000E84  0E00               	movlw	high _doors
  1798  000E86  20F4               	addwfc	prodh,w,c
  1799  000E88  6EDA               	movwf	fsr2h,c
  1800  000E8A  0E01               	movlw	1
  1801  000E8C  6EDF               	movwf	indf2,c
  1802                           
  1803                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1804  000E8E  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1805  000E90  0D0A               	mullw	10
  1806  000E92  0E02               	movlw	2
  1807  000E94  26F3               	addwf	prodl,f,c
  1808  000E96  0E00               	movlw	0
  1809  000E98  22F4               	addwfc	prodh,f,c
  1810  000E9A  0E60               	movlw	low _doors
  1811  000E9C  24F3               	addwf	prodl,w,c
  1812  000E9E  6ED9               	movwf	fsr2l,c
  1813  000EA0  0E00               	movlw	high _doors
  1814  000EA2  20F4               	addwfc	prodh,w,c
  1815  000EA4  6EDA               	movwf	fsr2h,c
  1816  000EA6  0E81               	movlw	129
  1817  000EA8  6EDE               	movwf	postinc2,c
  1818  000EAA  0E0F               	movlw	15
  1819  000EAC  6EDD               	movwf	postdec2,c
  1820                           
  1821                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1822  000EAE  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1823  000EB0  0D0A               	mullw	10
  1824  000EB2  0E04               	movlw	4
  1825  000EB4  26F3               	addwf	prodl,f,c
  1826  000EB6  0E00               	movlw	0
  1827  000EB8  22F4               	addwfc	prodh,f,c
  1828  000EBA  0E60               	movlw	low _doors
  1829  000EBC  24F3               	addwf	prodl,w,c
  1830  000EBE  6ED9               	movwf	fsr2l,c
  1831  000EC0  0E00               	movlw	high _doors
  1832  000EC2  20F4               	addwfc	prodh,w,c
  1833  000EC4  6EDA               	movwf	fsr2h,c
  1834  000EC6  C0CB  FFDF         	movff	C_DOOR_Init@d,indf2
  1835                           
  1836                           ;DOOR_Controller.c: 60: doors[d].is_open = 1;
  1837  000ECA  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1838  000ECC  0D0A               	mullw	10
  1839  000ECE  0E06               	movlw	6
  1840  000ED0  26F3               	addwf	prodl,f,c
  1841  000ED2  0E00               	movlw	0
  1842  000ED4  22F4               	addwfc	prodh,f,c
  1843  000ED6  0E60               	movlw	low _doors
  1844  000ED8  24F3               	addwf	prodl,w,c
  1845  000EDA  6ED9               	movwf	fsr2l,c
  1846  000EDC  0E00               	movlw	high _doors
  1847  000EDE  20F4               	addwfc	prodh,w,c
  1848  000EE0  6EDA               	movwf	fsr2h,c
  1849  000EE2  0E01               	movlw	1
  1850  000EE4  6EDF               	movwf	indf2,c
  1851                           
  1852                           ;DOOR_Controller.c: 61: doors[d].was_open = !1;
  1853  000EE6  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1854  000EE8  0D0A               	mullw	10
  1855  000EEA  0E05               	movlw	5
  1856  000EEC  26F3               	addwf	prodl,f,c
  1857  000EEE  0E00               	movlw	0
  1858  000EF0  22F4               	addwfc	prodh,f,c
  1859  000EF2  0E60               	movlw	low _doors
  1860  000EF4  24F3               	addwf	prodl,w,c
  1861  000EF6  6ED9               	movwf	fsr2l,c
  1862  000EF8  0E00               	movlw	high _doors
  1863  000EFA  20F4               	addwfc	prodh,w,c
  1864  000EFC  6EDA               	movwf	fsr2h,c
  1865  000EFE  0E00               	movlw	0
  1866  000F00  6EDF               	movwf	indf2,c
  1867                           
  1868                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1869  000F02  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1870  000F04  0D0A               	mullw	10
  1871  000F06  0E07               	movlw	7
  1872  000F08  26F3               	addwf	prodl,f,c
  1873  000F0A  0E00               	movlw	0
  1874  000F0C  22F4               	addwfc	prodh,f,c
  1875  000F0E  0E60               	movlw	low _doors
  1876  000F10  24F3               	addwf	prodl,w,c
  1877  000F12  6ED9               	movwf	fsr2l,c
  1878  000F14  0E00               	movlw	high _doors
  1879  000F16  20F4               	addwfc	prodh,w,c
  1880  000F18  6EDA               	movwf	fsr2h,c
  1881  000F1A  0E80               	movlw	128
  1882  000F1C  6EDE               	movwf	postinc2,c
  1883  000F1E  0E0F               	movlw	15
  1884  000F20  6EDD               	movwf	postdec2,c
  1885                           
  1886                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1887  000F22  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1888  000F24  0D0A               	mullw	10
  1889  000F26  0E09               	movlw	9
  1890  000F28  26F3               	addwf	prodl,f,c
  1891  000F2A  0E00               	movlw	0
  1892  000F2C  22F4               	addwfc	prodh,f,c
  1893  000F2E  0E60               	movlw	low _doors
  1894  000F30  24F3               	addwf	prodl,w,c
  1895  000F32  6ED9               	movwf	fsr2l,c
  1896  000F34  0E00               	movlw	high _doors
  1897  000F36  20F4               	addwfc	prodh,w,c
  1898  000F38  6EDA               	movwf	fsr2h,c
  1899  000F3A  29CB               	incf	C_DOOR_Init@d& (0+255),w,b
  1900  000F3C  6EDF               	movwf	indf2,c
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1904  000F3E  C0CB  F0C7         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1905  000F42  0E01               	movlw	1
  1906  000F44  6FC8               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1907  000F46  2BC7               	incf	??_C_DOOR_Init& (0+255),f,b
  1908  000F48  D002               	goto	u1664
  1909  000F4A                     u1665:
  1910  000F4A  90D8               	bcf	status,0,c
  1911  000F4C  37C8               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1912  000F4E                     u1664:
  1913  000F4E  2FC7               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1914  000F50  D7FC               	goto	u1665
  1915  000F52  0100               	movlb	0	; () banked
  1916  000F54  51C8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1917  000F56  1493               	andwf	3987,w,c	;volatile
  1918  000F58  1A93               	xorwf	3987,f,c	;volatile
  1919                           
  1920                           ; BSR set to: 0
  1921                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1922  000F5A  5092               	movf	3986,w,c	;volatile
  1923  000F5C  0AFF               	xorlw	255
  1924  000F5E  6FC7               	movwf	??_C_DOOR_Init& (0+255),b
  1925  000F60  C0CB  F0C8         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1926  000F64  0E01               	movlw	1
  1927  000F66  27C8               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1928  000F68  0E01               	movlw	1
  1929  000F6A  6FC9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1930  000F6C  2BC8               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1931  000F6E  D002               	goto	u1674
  1932  000F70                     u1675:
  1933  000F70  90D8               	bcf	status,0,c
  1934  000F72  37C9               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1935  000F74                     u1674:
  1936  000F74  2FC8               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1937  000F76  D7FC               	goto	u1675
  1938  000F78  0100               	movlb	0	; () banked
  1939  000F7A  51C9               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1940  000F7C  15C7               	andwf	??_C_DOOR_Init& (0+255),w,b
  1941  000F7E  1A92               	xorwf	3986,f,c	;volatile
  1942                           
  1943                           ; BSR set to: 0
  1944  000F80  2BCB               	incf	C_DOOR_Init@d& (0+255),f,b
  1945  000F82                     l24:
  1946                           
  1947                           ; BSR set to: 0
  1948                           
  1949                           ; BSR set to: 0
  1950  000F82  51CB               	movf	C_DOOR_Init@d& (0+255),w,b
  1951  000F84  6FC7               	movwf	??_C_DOOR_Init& (0+255),b
  1952  000F86  6BC8               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1953  000F88  5037               	movf	_door_cnt,w,c
  1954  000F8A  5DC7               	subwf	??_C_DOOR_Init& (0+255),w,b
  1955  000F8C  51C8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1956  000F8E  0A80               	xorlw	128
  1957  000F90  6FC9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1958  000F92  5038               	movf	_door_cnt+1,w,c
  1959  000F94  0A80               	xorlw	128
  1960  000F96  59C9               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1961  000F98  B0D8               	btfsc	status,0,c
  1962  000F9A  0012               	return	
  1963  000F9C  D760               	goto	l25
  1964  000F9E                     __end_of_C_DOOR_Init:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           prodh	equ	0xFF4
  1971                           prodl	equ	0xFF3
  1972                           postinc0	equ	0xFEE
  1973                           plusw0	equ	0xFEB
  1974                           wreg	equ	0xFE8
  1975                           postdec1	equ	0xFE5
  1976                           fsr1l	equ	0xFE1
  1977                           indf2	equ	0xFDF
  1978                           postinc2	equ	0xFDE
  1979                           postdec2	equ	0xFDD
  1980                           plusw2	equ	0xFDB
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _D_UART_WriteInt *****************
  1986 ;; Defined at:
  1987 ;;		line 220 in file "Drivers/UART_Driver.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  command         2   26[BANK0 ] PTR const unsigned char 
  1990 ;;		 -> STR_17(2), 
  1991 ;;  d               2   28[BANK0 ] int 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;		None
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2003 ;;      Params:         0       4       0       0       0       0       0       0       0
  2004 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2005 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2006 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2007 ;;Total ram usage:        5 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    5
  2010 ;; This function calls:
  2011 ;;		_printf
  2012 ;; This function is called by:
  2013 ;;		_run
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           	psect	text7
  2018  00116C                     __ptext7:
  2019                           	opt stack 0
  2020  00116C                     _D_UART_WriteInt:
  2021                           	opt stack 24
  2022                           
  2023                           ;UART_Driver.c: 221: printf(startCharacter);
  2024                           
  2025                           ; BSR set to: 0
  2026                           ;incstack = 0
  2027  00116C  C0F8  F0D3         	movff	_startCharacter,printf@f
  2028  001170  C0F9  F0D4         	movff	_startCharacter+1,printf@f+1
  2029  001174  0100               	movlb	0	; () banked
  2030  001176  51D3               	movf	printf@f& (0+255),w,b
  2031  001178  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2032  00117A  A4D8               	btfss	status,2,c
  2033  00117C  0E00               	movlw	low (__mediumconst shr (0+16))
  2034  00117E  6FD5               	movwf	(printf@f+2)& (0+255),b
  2035  001180  EC25  F004         	call	_printf	;wreg free
  2036                           
  2037                           ;UART_Driver.c: 223: printf(messageCharacter);
  2038  001184  C0F4  F0D3         	movff	_messageCharacter,printf@f
  2039  001188  C0F5  F0D4         	movff	_messageCharacter+1,printf@f+1
  2040  00118C  0100               	movlb	0	; () banked
  2041  00118E  51D3               	movf	printf@f& (0+255),w,b
  2042  001190  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2043  001192  A4D8               	btfss	status,2,c
  2044  001194  0E00               	movlw	low (__mediumconst shr (0+16))
  2045  001196  6FD5               	movwf	(printf@f+2)& (0+255),b
  2046  001198  EC25  F004         	call	_printf	;wreg free
  2047                           
  2048                           ;UART_Driver.c: 224: printf(deviceName);
  2049  00119C  C0C4  F0D3         	movff	_deviceName,printf@f
  2050  0011A0  C0C5  F0D4         	movff	_deviceName+1,printf@f+1
  2051  0011A4  C0C6  F0D5         	movff	_deviceName+2,printf@f+2
  2052  0011A8  EC25  F004         	call	_printf	;wreg free
  2053                           
  2054                           ;UART_Driver.c: 226: printf(":");printf(command);
  2055  0011AC  0E46               	movlw	low STR_5
  2056  0011AE  0100               	movlb	0	; () banked
  2057  0011B0  6FD3               	movwf	printf@f& (0+255),b
  2058  0011B2  0E08               	movlw	high STR_5
  2059  0011B4  6FD4               	movwf	(printf@f+1)& (0+255),b
  2060  0011B6  51D3               	movf	printf@f& (0+255),w,b
  2061  0011B8  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2062  0011BA  A4D8               	btfss	status,2,c
  2063  0011BC  0E00               	movlw	low (__mediumconst shr (0+16))
  2064  0011BE  6FD5               	movwf	(printf@f+2)& (0+255),b
  2065  0011C0  EC25  F004         	call	_printf	;wreg free
  2066  0011C4  C0E1  F0D3         	movff	D_UART_WriteInt@command,printf@f
  2067  0011C8  C0E2  F0D4         	movff	D_UART_WriteInt@command+1,printf@f+1
  2068  0011CC  0100               	movlb	0	; () banked
  2069  0011CE  51D3               	movf	printf@f& (0+255),w,b
  2070  0011D0  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2071  0011D2  A4D8               	btfss	status,2,c
  2072  0011D4  0E00               	movlw	low (__mediumconst shr (0+16))
  2073  0011D6  6FD5               	movwf	(printf@f+2)& (0+255),b
  2074  0011D8  EC25  F004         	call	_printf	;wreg free
  2075                           
  2076                           ;UART_Driver.c: 228: printf(":");printf("%d", d);
  2077  0011DC  0E46               	movlw	low STR_5
  2078  0011DE  0100               	movlb	0	; () banked
  2079  0011E0  6FD3               	movwf	printf@f& (0+255),b
  2080  0011E2  0E08               	movlw	high STR_5
  2081  0011E4  6FD4               	movwf	(printf@f+1)& (0+255),b
  2082  0011E6  51D3               	movf	printf@f& (0+255),w,b
  2083  0011E8  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2084  0011EA  A4D8               	btfss	status,2,c
  2085  0011EC  0E00               	movlw	low (__mediumconst shr (0+16))
  2086  0011EE  6FD5               	movwf	(printf@f+2)& (0+255),b
  2087  0011F0  EC25  F004         	call	_printf	;wreg free
  2088  0011F4  0E2C               	movlw	low STR_9
  2089  0011F6  0100               	movlb	0	; () banked
  2090  0011F8  6FD3               	movwf	printf@f& (0+255),b
  2091  0011FA  0E08               	movlw	high STR_9
  2092  0011FC  6FD4               	movwf	(printf@f+1)& (0+255),b
  2093  0011FE  51D3               	movf	printf@f& (0+255),w,b
  2094  001200  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2095  001202  A4D8               	btfss	status,2,c
  2096  001204  0E00               	movlw	low (__mediumconst shr (0+16))
  2097  001206  6FD5               	movwf	(printf@f+2)& (0+255),b
  2098  001208  C0E3  F0D6         	movff	D_UART_WriteInt@d,?_printf+3
  2099  00120C  C0E4  F0D7         	movff	D_UART_WriteInt@d+1,?_printf+4
  2100  001210  EC25  F004         	call	_printf	;wreg free
  2101                           
  2102                           ;UART_Driver.c: 230: printf(stopCharacter);
  2103  001214  C0F6  F0D3         	movff	_stopCharacter,printf@f
  2104  001218  C0F7  F0D4         	movff	_stopCharacter+1,printf@f+1
  2105  00121C  0100               	movlb	0	; () banked
  2106  00121E  51D3               	movf	printf@f& (0+255),w,b
  2107  001220  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2108  001222  A4D8               	btfss	status,2,c
  2109  001224  0E00               	movlw	low (__mediumconst shr (0+16))
  2110  001226  6FD5               	movwf	(printf@f+2)& (0+255),b
  2111  001228  EC25  F004         	call	_printf	;wreg free
  2112                           
  2113                           ;UART_Driver.c: 231: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  2114  00122C  0E06               	movlw	6
  2115  00122E  0100               	movlb	0	; () banked
  2116  001230  6FE5               	movwf	??_D_UART_WriteInt& (0+255),b
  2117  001232  0E30               	movlw	48
  2118  001234                     u2187:
  2119  001234  2EE8               	decfsz	wreg,f,c
  2120  001236  D7FE               	bra	u2187
  2121  001238  2FE5               	decfsz	??_D_UART_WriteInt& (0+255),f,b
  2122  00123A  D7FC               	bra	u2187
  2123  00123C  F000               	nop	
  2124  00123E  0012               	return		;funcret
  2125  001240                     __end_of_D_UART_WriteInt:
  2126                           	opt stack 0
  2127                           tblptru	equ	0xFF8
  2128                           tblptrh	equ	0xFF7
  2129                           tblptrl	equ	0xFF6
  2130                           tablat	equ	0xFF5
  2131                           prodh	equ	0xFF4
  2132                           prodl	equ	0xFF3
  2133                           postinc0	equ	0xFEE
  2134                           plusw0	equ	0xFEB
  2135                           wreg	equ	0xFE8
  2136                           postdec1	equ	0xFE5
  2137                           fsr1l	equ	0xFE1
  2138                           indf2	equ	0xFDF
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           plusw2	equ	0xFDB
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _D_UART_Read *****************
  2147 ;; Defined at:
  2148 ;;		line 234 in file "Drivers/UART_Driver.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;		None
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;		None
  2153 ;; Return value:  Size  Location     Type
  2154 ;;                  7    0[BANK0 ] struct .
  2155 ;; Registers used:
  2156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  2157 ;; Tracked objects:
  2158 ;;		On entry : 0/0
  2159 ;;		On exit  : 0/0
  2160 ;;		Unchanged: 0/0
  2161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2162 ;;      Params:         0       7       0       0       0       0       0       0       0
  2163 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2165 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2166 ;;Total ram usage:        7 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_run
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175                           
  2176                           	psect	text8
  2177  001898                     __ptext8:
  2178                           	opt stack 0
  2179  001898                     _D_UART_Read:
  2180                           	opt stack 26
  2181                           
  2182                           ;UART_Driver.c: 235: readData.sender = readBuffer.sender;
  2183                           
  2184                           ;incstack = 0
  2185  001898  0E0B               	movlw	low (_readBuffer+11)
  2186  00189A  6E30               	movwf	_readData,c
  2187  00189C  0E01               	movlw	high (_readBuffer+11)
  2188  00189E  6E31               	movwf	_readData+1,c
  2189                           
  2190                           ;UART_Driver.c: 236: readData.command = readBuffer.command;
  2191  0018A0  0E3E               	movlw	low (_readBuffer+62)
  2192  0018A2  6E32               	movwf	_readData+2,c
  2193  0018A4  0E01               	movlw	high (_readBuffer+62)
  2194  0018A6  6E33               	movwf	_readData+3,c
  2195                           
  2196                           ;UART_Driver.c: 237: readData.message = readBuffer.message;
  2197  0018A8  0E71               	movlw	low (_readBuffer+113)
  2198  0018AA  6E34               	movwf	_readData+4,c
  2199  0018AC  0E01               	movlw	high (_readBuffer+113)
  2200  0018AE  6E35               	movwf	_readData+5,c
  2201                           
  2202                           ;UART_Driver.c: 238: readData.ackId = readBuffer.readId;
  2203  0018B0  C1A4  F036         	movff	_readBuffer+164,_readData+6
  2204                           
  2205                           ;UART_Driver.c: 239: return readData;
  2206  0018B4  EE20  F030         	lfsr	2,_readData
  2207  0018B8  EE00  F0C7         	lfsr	0,?_D_UART_Read
  2208  0018BC  0E06               	movlw	6
  2209  0018BE                     u1841:
  2210  0018BE  CFDB FFEB          	movff	plusw2,plusw0
  2211  0018C2  06E8               	decf	wreg,f,c
  2212  0018C4  E2FC               	bc	u1841
  2213  0018C6  0012               	return	
  2214  0018C8                     __end_of_D_UART_Read:
  2215                           	opt stack 0
  2216                           tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           prodh	equ	0xFF4
  2221                           prodl	equ	0xFF3
  2222                           postinc0	equ	0xFEE
  2223                           plusw0	equ	0xFEB
  2224                           wreg	equ	0xFE8
  2225                           postdec1	equ	0xFE5
  2226                           fsr1l	equ	0xFE1
  2227                           indf2	equ	0xFDF
  2228                           postinc2	equ	0xFDE
  2229                           postdec2	equ	0xFDD
  2230                           plusw2	equ	0xFDB
  2231                           fsr2h	equ	0xFDA
  2232                           fsr2l	equ	0xFD9
  2233                           status	equ	0xFD8
  2234                           
  2235 ;; *************** function _D_UART_Acknowledge *****************
  2236 ;; Defined at:
  2237 ;;		line 289 in file "Drivers/UART_Driver.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;  i               1    wreg     unsigned char 
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  i               1   26[BANK0 ] unsigned char 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2251 ;;      Params:         0       0       0       0       0       0       0       0       0
  2252 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2254 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2255 ;;Total ram usage:        1 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    5
  2258 ;; This function calls:
  2259 ;;		_printf
  2260 ;; This function is called by:
  2261 ;;		_run
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text9
  2266  001698                     __ptext9:
  2267                           	opt stack 0
  2268  001698                     _D_UART_Acknowledge:
  2269                           	opt stack 24
  2270                           
  2271                           ;incstack = 0
  2272                           ;D_UART_Acknowledge@i stored from wreg
  2273  001698  0100               	movlb	0	; () banked
  2274  00169A  6FE1               	movwf	D_UART_Acknowledge@i& (0+255),b
  2275                           
  2276                           ;UART_Driver.c: 290: printf(startCharacter);
  2277  00169C  C0F8  F0D3         	movff	_startCharacter,printf@f
  2278  0016A0  C0F9  F0D4         	movff	_startCharacter+1,printf@f+1
  2279  0016A4  0100               	movlb	0	; () banked
  2280  0016A6  51D3               	movf	printf@f& (0+255),w,b
  2281  0016A8  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2282  0016AA  A4D8               	btfss	status,2,c
  2283  0016AC  0E00               	movlw	low (__mediumconst shr (0+16))
  2284  0016AE  6FD5               	movwf	(printf@f+2)& (0+255),b
  2285  0016B0  EC25  F004         	call	_printf	;wreg free
  2286                           
  2287                           ;UART_Driver.c: 292: printf(ackCharacter);
  2288  0016B4  C0F2  F0D3         	movff	_ackCharacter,printf@f
  2289  0016B8  C0F3  F0D4         	movff	_ackCharacter+1,printf@f+1
  2290  0016BC  0100               	movlb	0	; () banked
  2291  0016BE  51D3               	movf	printf@f& (0+255),w,b
  2292  0016C0  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2293  0016C2  A4D8               	btfss	status,2,c
  2294  0016C4  0E00               	movlw	low (__mediumconst shr (0+16))
  2295  0016C6  6FD5               	movwf	(printf@f+2)& (0+255),b
  2296  0016C8  EC25  F004         	call	_printf	;wreg free
  2297                           
  2298                           ;UART_Driver.c: 294: printf("%x", i);
  2299  0016CC  0E2F               	movlw	low STR_10
  2300  0016CE  0100               	movlb	0	; () banked
  2301  0016D0  6FD3               	movwf	printf@f& (0+255),b
  2302  0016D2  0E08               	movlw	high STR_10
  2303  0016D4  6FD4               	movwf	(printf@f+1)& (0+255),b
  2304  0016D6  51D3               	movf	printf@f& (0+255),w,b
  2305  0016D8  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2306  0016DA  A4D8               	btfss	status,2,c
  2307  0016DC  0E00               	movlw	low (__mediumconst shr (0+16))
  2308  0016DE  6FD5               	movwf	(printf@f+2)& (0+255),b
  2309  0016E0  C0E1  F0D6         	movff	D_UART_Acknowledge@i,?_printf+3
  2310  0016E4  6BD7               	clrf	(?_printf+4)& (0+255),b
  2311  0016E6  EC25  F004         	call	_printf	;wreg free
  2312                           
  2313                           ;UART_Driver.c: 296: printf(stopCharacter);
  2314  0016EA  C0F6  F0D3         	movff	_stopCharacter,printf@f
  2315  0016EE  C0F7  F0D4         	movff	_stopCharacter+1,printf@f+1
  2316  0016F2  0100               	movlb	0	; () banked
  2317  0016F4  51D3               	movf	printf@f& (0+255),w,b
  2318  0016F6  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  2319  0016F8  A4D8               	btfss	status,2,c
  2320  0016FA  0E00               	movlw	low (__mediumconst shr (0+16))
  2321  0016FC  6FD5               	movwf	(printf@f+2)& (0+255),b
  2322  0016FE  EC25  F004         	call	_printf	;wreg free
  2323  001702  0012               	return		;funcret
  2324  001704                     __end_of_D_UART_Acknowledge:
  2325                           	opt stack 0
  2326                           tblptru	equ	0xFF8
  2327                           tblptrh	equ	0xFF7
  2328                           tblptrl	equ	0xFF6
  2329                           tablat	equ	0xFF5
  2330                           prodh	equ	0xFF4
  2331                           prodl	equ	0xFF3
  2332                           postinc0	equ	0xFEE
  2333                           plusw0	equ	0xFEB
  2334                           wreg	equ	0xFE8
  2335                           postdec1	equ	0xFE5
  2336                           fsr1l	equ	0xFE1
  2337                           indf2	equ	0xFDF
  2338                           postinc2	equ	0xFDE
  2339                           postdec2	equ	0xFDD
  2340                           plusw2	equ	0xFDB
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function _D_PWM_SetPwm *****************
  2346 ;; Defined at:
  2347 ;;		line 44 in file "Drivers/PWM_Driver.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;  pwm             1    wreg     unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  pwm             1    0[BANK0 ] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, status,2
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0
  2362 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2364 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2365 ;;Total ram usage:        1 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    3
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_run
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text10
  2376  0018C8                     __ptext10:
  2377                           	opt stack 0
  2378  0018C8                     _D_PWM_SetPwm:
  2379                           	opt stack 26
  2380                           
  2381                           ;incstack = 0
  2382                           ;D_PWM_SetPwm@pwm stored from wreg
  2383  0018C8  0100               	movlb	0	; () banked
  2384  0018CA  6FC7               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2385                           
  2386                           ;PWM_Driver.c: 45: if (pwm > 0) {
  2387  0018CC  0100               	movlb	0	; () banked
  2388  0018CE  51C7               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2389  0018D0  B4D8               	btfsc	status,2,c
  2390  0018D2  D00A               	goto	l216
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  2394  0018D4  B4CA               	btfsc	4042,2,c	;volatile
  2395  0018D6  D005               	goto	l217
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  2399  0018D8  50BD               	movf	4029,w,c	;volatile
  2400  0018DA  0BF0               	andlw	-16
  2401  0018DC  090C               	iorlw	12
  2402  0018DE  6EBD               	movwf	4029,c	;volatile
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  2406  0018E0  84CA               	bsf	4042,2,c	;volatile
  2407  0018E2                     l217:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;PWM_Driver.c: 49: }
  2411                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  2412                           
  2413                           ; BSR set to: 0
  2414  0018E2  C0C7  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2415                           
  2416                           ;PWM_Driver.c: 51: } else {
  2417  0018E6  0012               	return	
  2418  0018E8                     l216:
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  2422  0018E8  90BD               	bcf	4029,0,c	;volatile
  2423  0018EA  92BD               	bcf	4029,1,c	;volatile
  2424  0018EC  94BD               	bcf	4029,2,c	;volatile
  2425  0018EE  96BD               	bcf	4029,3,c	;volatile
  2426                           
  2427                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  2428  0018F0  94CA               	bcf	4042,2,c	;volatile
  2429                           
  2430                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  2431  0018F2  9482               	bcf	3970,2,c	;volatile
  2432  0018F4  0012               	return	
  2433  0018F6                     __end_of_D_PWM_SetPwm:
  2434                           	opt stack 0
  2435                           tblptru	equ	0xFF8
  2436                           tblptrh	equ	0xFF7
  2437                           tblptrl	equ	0xFF6
  2438                           tablat	equ	0xFF5
  2439                           prodh	equ	0xFF4
  2440                           prodl	equ	0xFF3
  2441                           postinc0	equ	0xFEE
  2442                           plusw0	equ	0xFEB
  2443                           wreg	equ	0xFE8
  2444                           postdec1	equ	0xFE5
  2445                           fsr1l	equ	0xFE1
  2446                           indf2	equ	0xFDF
  2447                           postinc2	equ	0xFDE
  2448                           postdec2	equ	0xFDD
  2449                           plusw2	equ	0xFDB
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _C_DOOR_UnlockAll *****************
  2455 ;; Defined at:
  2456 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  d               1    8[BANK0 ] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2470 ;;      Params:         0       0       0       0       0       0       0       0       0
  2471 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2472 ;;      Temps:          0       8       0       0       0       0       0       0       0
  2473 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2474 ;;Total ram usage:        9 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    3
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_run
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text11
  2485  0012F6                     __ptext11:
  2486                           	opt stack 0
  2487  0012F6                     _C_DOOR_UnlockAll:
  2488                           	opt stack 26
  2489                           
  2490                           ;DOOR_Controller.c: 96: uint8_t d;
  2491                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;incstack = 0
  2495  0012F6  0E00               	movlw	0
  2496  0012F8  0100               	movlb	0	; () banked
  2497  0012FA  6FCF               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  2498  0012FC  D048               	goto	l36
  2499  0012FE                     
  2500                           ; BSR set to: 0
  2501                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  2502                           
  2503                           ; BSR set to: 0
  2504  0012FE  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2505  001300  0D0A               	mullw	10
  2506  001302  0E02               	movlw	2
  2507  001304  26F3               	addwf	prodl,f,c
  2508  001306  0E00               	movlw	0
  2509  001308  22F4               	addwfc	prodh,f,c
  2510  00130A  0E60               	movlw	low _doors
  2511  00130C  24F3               	addwf	prodl,w,c
  2512  00130E  6ED9               	movwf	fsr2l,c
  2513  001310  0E00               	movlw	high _doors
  2514  001312  20F4               	addwfc	prodh,w,c
  2515  001314  6EDA               	movwf	fsr2h,c
  2516  001316  CFDE F0C7          	movff	postinc2,??_C_DOOR_UnlockAll
  2517  00131A  CFDD F0C8          	movff	postdec2,??_C_DOOR_UnlockAll+1
  2518  00131E  C0C7  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  2519  001322  C0C8  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  2520  001326  50DF               	movf	indf2,w,c
  2521  001328  0AFF               	xorlw	255
  2522  00132A  6FC9               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  2523  00132C  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2524  00132E  0D0A               	mullw	10
  2525  001330  0E04               	movlw	4
  2526  001332  26F3               	addwf	prodl,f,c
  2527  001334  0E00               	movlw	0
  2528  001336  22F4               	addwfc	prodh,f,c
  2529  001338  0E60               	movlw	low _doors
  2530  00133A  24F3               	addwf	prodl,w,c
  2531  00133C  6ED9               	movwf	fsr2l,c
  2532  00133E  0E00               	movlw	high _doors
  2533  001340  20F4               	addwfc	prodh,w,c
  2534  001342  6EDA               	movwf	fsr2h,c
  2535  001344  50DF               	movf	indf2,w,c
  2536  001346  6FCA               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  2537  001348  0E01               	movlw	1
  2538  00134A  6FCB               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  2539  00134C  2BCA               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  2540  00134E  D002               	goto	u1744
  2541  001350                     u1745:
  2542  001350  90D8               	bcf	status,0,c
  2543  001352  37CB               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  2544  001354                     u1744:
  2545  001354  2FCA               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  2546  001356  D7FC               	goto	u1745
  2547  001358  0100               	movlb	0	; () banked
  2548  00135A  51CB               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  2549  00135C  15C9               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  2550  00135E  6FCC               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  2551  001360  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2552  001362  0D0A               	mullw	10
  2553  001364  0E02               	movlw	2
  2554  001366  26F3               	addwf	prodl,f,c
  2555  001368  0E00               	movlw	0
  2556  00136A  22F4               	addwfc	prodh,f,c
  2557  00136C  0E60               	movlw	low _doors
  2558  00136E  24F3               	addwf	prodl,w,c
  2559  001370  6ED9               	movwf	fsr2l,c
  2560  001372  0E00               	movlw	high _doors
  2561  001374  20F4               	addwfc	prodh,w,c
  2562  001376  6EDA               	movwf	fsr2h,c
  2563  001378  CFDE F0CD          	movff	postinc2,??_C_DOOR_UnlockAll+6
  2564  00137C  CFDD F0CE          	movff	postdec2,??_C_DOOR_UnlockAll+7
  2565  001380  C0CD  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  2566  001384  C0CE  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  2567  001388  51CC               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  2568  00138A  1ADF               	xorwf	indf2,f,c
  2569                           
  2570                           ; BSR set to: 0
  2571  00138C  2BCF               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  2572  00138E                     l36:
  2573                           
  2574                           ; BSR set to: 0
  2575                           
  2576                           ; BSR set to: 0
  2577  00138E  51CF               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  2578  001390  6FC7               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  2579  001392  6BC8               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  2580  001394  5037               	movf	_door_cnt,w,c
  2581  001396  5DC7               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  2582  001398  51C8               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  2583  00139A  0A80               	xorlw	128
  2584  00139C  6FC9               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  2585  00139E  5038               	movf	_door_cnt+1,w,c
  2586  0013A0  0A80               	xorlw	128
  2587  0013A2  59C9               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  2588  0013A4  B0D8               	btfsc	status,0,c
  2589  0013A6  0012               	return	
  2590  0013A8  D7AA               	goto	l37
  2591  0013AA                     __end_of_C_DOOR_UnlockAll:
  2592                           	opt stack 0
  2593                           tblptru	equ	0xFF8
  2594                           tblptrh	equ	0xFF7
  2595                           tblptrl	equ	0xFF6
  2596                           tablat	equ	0xFF5
  2597                           prodh	equ	0xFF4
  2598                           prodl	equ	0xFF3
  2599                           postinc0	equ	0xFEE
  2600                           plusw0	equ	0xFEB
  2601                           wreg	equ	0xFE8
  2602                           postdec1	equ	0xFE5
  2603                           fsr1l	equ	0xFE1
  2604                           indf2	equ	0xFDF
  2605                           postinc2	equ	0xFDE
  2606                           postdec2	equ	0xFDD
  2607                           plusw2	equ	0xFDB
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612 ;; *************** function _C_DOOR_SendStates *****************
  2613 ;; Defined at:
  2614 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  2615 ;; Parameters:    Size  Location     Type
  2616 ;;		None
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  com             3   34[BANK0 ] unsigned char [3]
  2619 ;;  mes             2   37[BANK0 ] unsigned char [2]
  2620 ;;  d               1   39[BANK0 ] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2630 ;;      Params:         0       0       0       0       0       0       0       0       0
  2631 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2632 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2633 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2634 ;;Total ram usage:        9 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    6
  2637 ;; This function calls:
  2638 ;;		_D_UART_Write
  2639 ;;		_commandAndMessage
  2640 ;; This function is called by:
  2641 ;;		_run
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text12
  2646  000F9E                     __ptext12:
  2647                           	opt stack 0
  2648  000F9E                     _C_DOOR_SendStates:
  2649                           	opt stack 23
  2650                           
  2651                           ;DOOR_Controller.c: 110: uint8_t d;
  2652                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;incstack = 0
  2656  000F9E  0E00               	movlw	0
  2657  000FA0  0100               	movlb	0	; () banked
  2658  000FA2  6FEE               	movwf	C_DOOR_SendStates@d& (0+255),b
  2659  000FA4  D065               	goto	l48
  2660  000FA6                     
  2661                           ; BSR set to: 0
  2662                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  2663                           
  2664                           ; BSR set to: 0
  2665  000FA6  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2666  000FA8  0D0A               	mullw	10
  2667  000FAA  0E06               	movlw	6
  2668  000FAC  26F3               	addwf	prodl,f,c
  2669  000FAE  0E00               	movlw	0
  2670  000FB0  22F4               	addwfc	prodh,f,c
  2671  000FB2  0E60               	movlw	low _doors
  2672  000FB4  24F3               	addwf	prodl,w,c
  2673  000FB6  6ED9               	movwf	fsr2l,c
  2674  000FB8  0E00               	movlw	high _doors
  2675  000FBA  20F4               	addwfc	prodh,w,c
  2676  000FBC  6EDA               	movwf	fsr2h,c
  2677  000FBE  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2678  000FC0  0D0A               	mullw	10
  2679  000FC2  0E05               	movlw	5
  2680  000FC4  26F3               	addwf	prodl,f,c
  2681  000FC6  0E00               	movlw	0
  2682  000FC8  22F4               	addwfc	prodh,f,c
  2683  000FCA  0E60               	movlw	low _doors
  2684  000FCC  24F3               	addwf	prodl,w,c
  2685  000FCE  6EE1               	movwf	fsr1l,c
  2686  000FD0  0E00               	movlw	high _doors
  2687  000FD2  20F4               	addwfc	prodh,w,c
  2688  000FD4  6EE2               	movwf	fsr1h,c
  2689  000FD6  50DE               	movf	postinc2,w,c
  2690  000FD8  18E6               	xorwf	postinc1,w,c
  2691  000FDA  B4D8               	btfsc	status,2,c
  2692  000FDC  D048               	goto	l50
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;DOOR_Controller.c: 114: char com[3];
  2696                           ;DOOR_Controller.c: 115: char mes[2];
  2697                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  2698  000FDE  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2699  000FE0  0D0A               	mullw	10
  2700  000FE2  0E60               	movlw	low _doors
  2701  000FE4  24F3               	addwf	prodl,w,c
  2702  000FE6  6ED9               	movwf	fsr2l,c
  2703  000FE8  0E00               	movlw	high _doors
  2704  000FEA  20F4               	addwfc	prodh,w,c
  2705  000FEC  6EDA               	movwf	fsr2h,c
  2706  000FEE  EE00  F0C7         	lfsr	0,commandAndMessage@door
  2707  000FF2  0E09               	movlw	9
  2708  000FF4                     u1811:
  2709  000FF4  CFDB FFEB          	movff	plusw2,plusw0
  2710  000FF8  06E8               	decf	wreg,f,c
  2711  000FFA  E2FC               	bc	u1811
  2712  000FFC  0EE9               	movlw	low C_DOOR_SendStates@com
  2713  000FFE  6FD1               	movwf	commandAndMessage@com& (0+255),b
  2714  001000  0E00               	movlw	high C_DOOR_SendStates@com
  2715  001002  6FD2               	movwf	(commandAndMessage@com+1)& (0+255),b
  2716  001004  0EEC               	movlw	low C_DOOR_SendStates@mes
  2717  001006  6FD3               	movwf	commandAndMessage@mes& (0+255),b
  2718  001008  0E00               	movlw	high C_DOOR_SendStates@mes
  2719  00100A  6FD4               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2720  00100C  EC82  F00B         	call	_commandAndMessage	;wreg free
  2721                           
  2722                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  2723  001010  0EE9               	movlw	low C_DOOR_SendStates@com
  2724  001012  0100               	movlb	0	; () banked
  2725  001014  6FE1               	movwf	D_UART_Write@command& (0+255),b
  2726  001016  0E00               	movlw	high C_DOOR_SendStates@com
  2727  001018  6FE2               	movwf	(D_UART_Write@command+1)& (0+255),b
  2728  00101A  0EEC               	movlw	low C_DOOR_SendStates@mes
  2729  00101C  6FE3               	movwf	D_UART_Write@data& (0+255),b
  2730  00101E  0E00               	movlw	high C_DOOR_SendStates@mes
  2731  001020  6FE4               	movwf	(D_UART_Write@data+1)& (0+255),b
  2732  001022  EC46  F008         	call	_D_UART_Write	;wreg free
  2733                           
  2734                           ;DOOR_Controller.c: 120: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  2735  001026  0E06               	movlw	6
  2736  001028  0100               	movlb	0	; () banked
  2737  00102A  6FE6               	movwf	??_C_DOOR_SendStates& (0+255),b
  2738  00102C  0E30               	movlw	48
  2739  00102E                     u2197:
  2740  00102E  2EE8               	decfsz	wreg,f,c
  2741  001030  D7FE               	bra	u2197
  2742  001032  2FE6               	decfsz	??_C_DOOR_SendStates& (0+255),f,b
  2743  001034  D7FC               	bra	u2197
  2744  001036  F000               	nop	
  2745                           
  2746                           ;DOOR_Controller.c: 122: doors[d].was_open = doors[d].is_open;
  2747  001038  0100               	movlb	0	; () banked
  2748  00103A  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2749  00103C  0D0A               	mullw	10
  2750  00103E  0E06               	movlw	6
  2751  001040  26F3               	addwf	prodl,f,c
  2752  001042  0E00               	movlw	0
  2753  001044  22F4               	addwfc	prodh,f,c
  2754  001046  0E60               	movlw	low _doors
  2755  001048  24F3               	addwf	prodl,w,c
  2756  00104A  6ED9               	movwf	fsr2l,c
  2757  00104C  0E00               	movlw	high _doors
  2758  00104E  20F4               	addwfc	prodh,w,c
  2759  001050  6EDA               	movwf	fsr2h,c
  2760  001052  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2761  001054  0D0A               	mullw	10
  2762  001056  0E05               	movlw	5
  2763  001058  26F3               	addwf	prodl,f,c
  2764  00105A  0E00               	movlw	0
  2765  00105C  22F4               	addwfc	prodh,f,c
  2766  00105E  0E60               	movlw	low _doors
  2767  001060  24F3               	addwf	prodl,w,c
  2768  001062  6EE1               	movwf	fsr1l,c
  2769  001064  0E00               	movlw	high _doors
  2770  001066  20F4               	addwfc	prodh,w,c
  2771  001068  6EE2               	movwf	fsr1h,c
  2772  00106A  CFDF FFE7          	movff	indf2,indf1
  2773  00106E                     l50:
  2774                           
  2775                           ; BSR set to: 0
  2776                           
  2777                           ; BSR set to: 0
  2778  00106E  2BEE               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2779  001070                     l48:
  2780                           
  2781                           ; BSR set to: 0
  2782                           
  2783                           ; BSR set to: 0
  2784  001070  51EE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2785  001072  6FE6               	movwf	??_C_DOOR_SendStates& (0+255),b
  2786  001074  6BE7               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  2787  001076  5037               	movf	_door_cnt,w,c
  2788  001078  5DE6               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  2789  00107A  51E7               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  2790  00107C  0A80               	xorlw	128
  2791  00107E  6FE8               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  2792  001080  5038               	movf	_door_cnt+1,w,c
  2793  001082  0A80               	xorlw	128
  2794  001084  59E8               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  2795  001086  B0D8               	btfsc	status,0,c
  2796  001088  0012               	return	
  2797  00108A  D78D               	goto	l49
  2798  00108C                     __end_of_C_DOOR_SendStates:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           postinc0	equ	0xFEE
  2807                           plusw0	equ	0xFEB
  2808                           wreg	equ	0xFE8
  2809                           indf1	equ	0xFE7
  2810                           postinc1	equ	0xFE6
  2811                           postdec1	equ	0xFE5
  2812                           fsr1h	equ	0xFE2
  2813                           fsr1l	equ	0xFE1
  2814                           indf2	equ	0xFDF
  2815                           postinc2	equ	0xFDE
  2816                           postdec2	equ	0xFDD
  2817                           plusw2	equ	0xFDB
  2818                           fsr2h	equ	0xFDA
  2819                           fsr2l	equ	0xFD9
  2820                           status	equ	0xFD8
  2821                           
  2822 ;; *************** function _commandAndMessage *****************
  2823 ;; Defined at:
  2824 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  door           10    0[BANK0 ] struct .
  2827 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2828 ;;		 -> C_DOOR_SendStates@com(3), 
  2829 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2830 ;;		 -> C_DOOR_SendStates@mes(2), 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;		None
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  1    wreg      void 
  2835 ;; Registers used:
  2836 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2842 ;;      Params:         0      14       0       0       0       0       0       0       0
  2843 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2845 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2846 ;;Total ram usage:       14 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    3
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_C_DOOR_SendStates
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text13
  2857  001704                     __ptext13:
  2858                           	opt stack 0
  2859  001704                     _commandAndMessage:
  2860                           	opt stack 25
  2861                           
  2862                           ;DOOR_Controller.c: 33: com[0] = 'D';
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;incstack = 0
  2866  001704  C0D1  FFD9         	movff	commandAndMessage@com,fsr2l
  2867  001708  C0D2  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2868  00170C  0E44               	movlw	68
  2869  00170E  6EDF               	movwf	indf2,c
  2870                           
  2871                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  2872  001710  0100               	movlb	0	; () banked
  2873  001712  EE20 F001          	lfsr	2,1
  2874  001716  51D1               	movf	commandAndMessage@com& (0+255),w,b
  2875  001718  26D9               	addwf	fsr2l,f,c
  2876  00171A  51D2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2877  00171C  22DA               	addwfc	fsr2h,f,c
  2878  00171E  51C7               	movf	commandAndMessage@door& (0+255),w,b
  2879  001720  0F30               	addlw	48
  2880  001722  6EDF               	movwf	indf2,c
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;DOOR_Controller.c: 35: com[2] = '\0';
  2884  001724  EE20 F002          	lfsr	2,2
  2885  001728  51D1               	movf	commandAndMessage@com& (0+255),w,b
  2886  00172A  26D9               	addwf	fsr2l,f,c
  2887  00172C  51D2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2888  00172E  22DA               	addwfc	fsr2h,f,c
  2889  001730  0E00               	movlw	0
  2890  001732  6EDF               	movwf	indf2,c
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;DOOR_Controller.c: 38: if (door.is_open) {
  2894  001734  51CD               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2895  001736  B4D8               	btfsc	status,2,c
  2896  001738  D006               	goto	l19
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  2900  00173A  C0D3  FFD9         	movff	commandAndMessage@mes,fsr2l
  2901  00173E  C0D4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2902  001742  0E43               	movlw	67
  2903  001744  D005               	goto	L2
  2904  001746                     l19:
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  2908                           
  2909                           ; BSR set to: 0
  2910  001746  C0D3  FFD9         	movff	commandAndMessage@mes,fsr2l
  2911  00174A  C0D4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2912  00174E  0E4F               	movlw	79
  2913  001750                     L2:
  2914  001750  6EDF               	movwf	indf2,c
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;DOOR_Controller.c: 42: }
  2918                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  2919                           
  2920                           ; BSR set to: 0
  2921  001752  EE20 F001          	lfsr	2,1
  2922  001756  51D3               	movf	commandAndMessage@mes& (0+255),w,b
  2923  001758  26D9               	addwf	fsr2l,f,c
  2924  00175A  51D4               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2925  00175C  22DA               	addwfc	fsr2h,f,c
  2926  00175E  0E00               	movlw	0
  2927  001760  6EDF               	movwf	indf2,c
  2928                           
  2929                           ; BSR set to: 0
  2930  001762  0012               	return		;funcret
  2931  001764                     __end_of_commandAndMessage:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           prodh	equ	0xFF4
  2938                           prodl	equ	0xFF3
  2939                           postinc0	equ	0xFEE
  2940                           plusw0	equ	0xFEB
  2941                           wreg	equ	0xFE8
  2942                           indf1	equ	0xFE7
  2943                           postinc1	equ	0xFE6
  2944                           postdec1	equ	0xFE5
  2945                           fsr1h	equ	0xFE2
  2946                           fsr1l	equ	0xFE1
  2947                           indf2	equ	0xFDF
  2948                           postinc2	equ	0xFDE
  2949                           postdec2	equ	0xFDD
  2950                           plusw2	equ	0xFDB
  2951                           fsr2h	equ	0xFDA
  2952                           fsr2l	equ	0xFD9
  2953                           status	equ	0xFD8
  2954                           
  2955 ;; *************** function _D_UART_Write *****************
  2956 ;; Defined at:
  2957 ;;		line 206 in file "Drivers/UART_Driver.c"
  2958 ;; Parameters:    Size  Location     Type
  2959 ;;  command         2   26[BANK0 ] PTR const unsigned char 
  2960 ;;		 -> STR_19(2), C_DOOR_SendStates@com(3), 
  2961 ;;  data            2   28[BANK0 ] PTR const unsigned char 
  2962 ;;		 -> STR_20(2), C_DOOR_SendStates@mes(2), 
  2963 ;; Auto vars:     Size  Location     Type
  2964 ;;		None
  2965 ;; Return value:  Size  Location     Type
  2966 ;;                  1    wreg      void 
  2967 ;; Registers used:
  2968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2969 ;; Tracked objects:
  2970 ;;		On entry : 0/0
  2971 ;;		On exit  : 0/0
  2972 ;;		Unchanged: 0/0
  2973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2974 ;;      Params:         0       4       0       0       0       0       0       0       0
  2975 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2976 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2977 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2978 ;;Total ram usage:        5 bytes
  2979 ;; Hardware stack levels used:    1
  2980 ;; Hardware stack levels required when called:    5
  2981 ;; This function calls:
  2982 ;;		_printf
  2983 ;; This function is called by:
  2984 ;;		_C_DOOR_SendStates
  2985 ;;		_run
  2986 ;; This function uses a non-reentrant model
  2987 ;;
  2988                           
  2989                           	psect	text14
  2990  00108C                     __ptext14:
  2991                           	opt stack 0
  2992  00108C                     _D_UART_Write:
  2993                           	opt stack 24
  2994                           
  2995                           ;UART_Driver.c: 207: printf(startCharacter);
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;incstack = 0
  2999  00108C  C0F8  F0D3         	movff	_startCharacter,printf@f
  3000  001090  C0F9  F0D4         	movff	_startCharacter+1,printf@f+1
  3001  001094  0100               	movlb	0	; () banked
  3002  001096  51D3               	movf	printf@f& (0+255),w,b
  3003  001098  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3004  00109A  A4D8               	btfss	status,2,c
  3005  00109C  0E00               	movlw	low (__mediumconst shr (0+16))
  3006  00109E  6FD5               	movwf	(printf@f+2)& (0+255),b
  3007  0010A0  EC25  F004         	call	_printf	;wreg free
  3008                           
  3009                           ;UART_Driver.c: 209: printf(messageCharacter);
  3010  0010A4  C0F4  F0D3         	movff	_messageCharacter,printf@f
  3011  0010A8  C0F5  F0D4         	movff	_messageCharacter+1,printf@f+1
  3012  0010AC  0100               	movlb	0	; () banked
  3013  0010AE  51D3               	movf	printf@f& (0+255),w,b
  3014  0010B0  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3015  0010B2  A4D8               	btfss	status,2,c
  3016  0010B4  0E00               	movlw	low (__mediumconst shr (0+16))
  3017  0010B6  6FD5               	movwf	(printf@f+2)& (0+255),b
  3018  0010B8  EC25  F004         	call	_printf	;wreg free
  3019                           
  3020                           ;UART_Driver.c: 210: printf(deviceName);
  3021  0010BC  C0C4  F0D3         	movff	_deviceName,printf@f
  3022  0010C0  C0C5  F0D4         	movff	_deviceName+1,printf@f+1
  3023  0010C4  C0C6  F0D5         	movff	_deviceName+2,printf@f+2
  3024  0010C8  EC25  F004         	call	_printf	;wreg free
  3025                           
  3026                           ;UART_Driver.c: 212: printf(":");printf(command);
  3027  0010CC  0E46               	movlw	low STR_5
  3028  0010CE  0100               	movlb	0	; () banked
  3029  0010D0  6FD3               	movwf	printf@f& (0+255),b
  3030  0010D2  0E08               	movlw	high STR_5
  3031  0010D4  6FD4               	movwf	(printf@f+1)& (0+255),b
  3032  0010D6  51D3               	movf	printf@f& (0+255),w,b
  3033  0010D8  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3034  0010DA  A4D8               	btfss	status,2,c
  3035  0010DC  0E00               	movlw	low (__mediumconst shr (0+16))
  3036  0010DE  6FD5               	movwf	(printf@f+2)& (0+255),b
  3037  0010E0  EC25  F004         	call	_printf	;wreg free
  3038  0010E4  C0E1  F0D3         	movff	D_UART_Write@command,printf@f
  3039  0010E8  C0E2  F0D4         	movff	D_UART_Write@command+1,printf@f+1
  3040  0010EC  0100               	movlb	0	; () banked
  3041  0010EE  6BD5               	clrf	(printf@f+2)& (0+255),b
  3042  0010F0  51D3               	movf	printf@f& (0+255),w,b
  3043  0010F2  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3044  0010F4  B4D8               	btfsc	status,2,c
  3045  0010F6  D005               	goto	u1711
  3046  0010F8  0E07               	movlw	(high __ramtop+-1)
  3047  0010FA  65E2               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3048  0010FC  D001               	goto	u17111
  3049  0010FE  D001               	goto	u1711
  3050  001100                     u17111:
  3051  001100  8BD5               	bsf	(printf@f+2)& (0+255),5,b
  3052  001102                     u1711:
  3053  001102  EC25  F004         	call	_printf	;wreg free
  3054                           
  3055                           ;UART_Driver.c: 214: printf(":");printf(data);
  3056  001106  0E46               	movlw	low STR_5
  3057  001108  0100               	movlb	0	; () banked
  3058  00110A  6FD3               	movwf	printf@f& (0+255),b
  3059  00110C  0E08               	movlw	high STR_5
  3060  00110E  6FD4               	movwf	(printf@f+1)& (0+255),b
  3061  001110  51D3               	movf	printf@f& (0+255),w,b
  3062  001112  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3063  001114  A4D8               	btfss	status,2,c
  3064  001116  0E00               	movlw	low (__mediumconst shr (0+16))
  3065  001118  6FD5               	movwf	(printf@f+2)& (0+255),b
  3066  00111A  EC25  F004         	call	_printf	;wreg free
  3067  00111E  C0E3  F0D3         	movff	D_UART_Write@data,printf@f
  3068  001122  C0E4  F0D4         	movff	D_UART_Write@data+1,printf@f+1
  3069  001126  0100               	movlb	0	; () banked
  3070  001128  6BD5               	clrf	(printf@f+2)& (0+255),b
  3071  00112A  51D3               	movf	printf@f& (0+255),w,b
  3072  00112C  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3073  00112E  B4D8               	btfsc	status,2,c
  3074  001130  D005               	goto	u1721
  3075  001132  0E07               	movlw	(high __ramtop+-1)
  3076  001134  65E4               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3077  001136  D001               	goto	u17211
  3078  001138  D001               	goto	u1721
  3079  00113A                     u17211:
  3080  00113A  8BD5               	bsf	(printf@f+2)& (0+255),5,b
  3081  00113C                     u1721:
  3082  00113C  EC25  F004         	call	_printf	;wreg free
  3083                           
  3084                           ;UART_Driver.c: 216: printf(stopCharacter);
  3085  001140  C0F6  F0D3         	movff	_stopCharacter,printf@f
  3086  001144  C0F7  F0D4         	movff	_stopCharacter+1,printf@f+1
  3087  001148  0100               	movlb	0	; () banked
  3088  00114A  51D3               	movf	printf@f& (0+255),w,b
  3089  00114C  11D4               	iorwf	(printf@f+1)& (0+255),w,b
  3090  00114E  A4D8               	btfss	status,2,c
  3091  001150  0E00               	movlw	low (__mediumconst shr (0+16))
  3092  001152  6FD5               	movwf	(printf@f+2)& (0+255),b
  3093  001154  EC25  F004         	call	_printf	;wreg free
  3094                           
  3095                           ;UART_Driver.c: 217: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3096  001158  0E06               	movlw	6
  3097  00115A  0100               	movlb	0	; () banked
  3098  00115C  6FE5               	movwf	??_D_UART_Write& (0+255),b
  3099  00115E  0E30               	movlw	48
  3100  001160                     u2207:
  3101  001160  2EE8               	decfsz	wreg,f,c
  3102  001162  D7FE               	bra	u2207
  3103  001164  2FE5               	decfsz	??_D_UART_Write& (0+255),f,b
  3104  001166  D7FC               	bra	u2207
  3105  001168  F000               	nop	
  3106  00116A  0012               	return		;funcret
  3107  00116C                     __end_of_D_UART_Write:
  3108                           	opt stack 0
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           prodh	equ	0xFF4
  3114                           prodl	equ	0xFF3
  3115                           postinc0	equ	0xFEE
  3116                           plusw0	equ	0xFEB
  3117                           wreg	equ	0xFE8
  3118                           indf1	equ	0xFE7
  3119                           postinc1	equ	0xFE6
  3120                           postdec1	equ	0xFE5
  3121                           fsr1h	equ	0xFE2
  3122                           fsr1l	equ	0xFE1
  3123                           indf2	equ	0xFDF
  3124                           postinc2	equ	0xFDE
  3125                           postdec2	equ	0xFDD
  3126                           plusw2	equ	0xFDB
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _printf *****************
  3132 ;; Defined at:
  3133 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  f               3   12[BANK0 ] PTR const unsigned char 
  3136 ;;		 -> STR_20(2), STR_19(2), STR_17(2), STR_11(2), 
  3137 ;;		 -> STR_10(3), STR_9(3), STR_8(2), STR_7(2), 
  3138 ;;		 -> STR_6(2), STR_5(2), STR_4(4), STR_3(4), 
  3139 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3140 ;;		 -> C_DOOR_SendStates@com(3), 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  idx             1   18[BANK0 ] unsigned char 
  3143 ;;  tmpval          4    0        struct .
  3144 ;;  cp              3    0        PTR const unsigned char 
  3145 ;;  val             2   23[BANK0 ] unsigned int 
  3146 ;;  ap              2   19[BANK0 ] PTR void [1]
  3147 ;;		 -> ?_printf(2), 
  3148 ;;  len             2    0        unsigned int 
  3149 ;;  c               1   25[BANK0 ] char 
  3150 ;;  flag            1   22[BANK0 ] unsigned char 
  3151 ;;  prec            1   21[BANK0 ] char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  2   12[BANK0 ] int 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3161 ;;      Params:         0       5       0       0       0       0       0       0       0
  3162 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3163 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3164 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3165 ;;Total ram usage:       14 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    4
  3168 ;; This function calls:
  3169 ;;		___lwdiv
  3170 ;;		___lwmod
  3171 ;;		_putch
  3172 ;; This function is called by:
  3173 ;;		_D_UART_Write
  3174 ;;		_D_UART_WriteInt
  3175 ;;		_D_UART_Acknowledge
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text15
  3180  00084A                     __ptext15:
  3181                           	opt stack 0
  3182  00084A                     _printf:
  3183                           	opt stack 24
  3184                           
  3185                           ;doprnt.c: 466: va_list ap;
  3186                           ;doprnt.c: 499: signed char c;
  3187                           ;doprnt.c: 506: signed char prec;
  3188                           ;doprnt.c: 508: unsigned char flag;
  3189                           ;doprnt.c: 523: union {
  3190                           ;doprnt.c: 524: unsigned long vd;
  3191                           ;doprnt.c: 525: double integ;
  3192                           ;doprnt.c: 526: } tmpval;
  3193                           ;doprnt.c: 528: unsigned int val;
  3194                           ;doprnt.c: 529: unsigned len;
  3195                           ;doprnt.c: 530: const char * cp;
  3196                           ;doprnt.c: 533: *ap = __va_start();
  3197                           
  3198                           ;incstack = 0
  3199  00084A  0ED6               	movlw	low (?_printf+3)
  3200  00084C  0100               	movlb	0	; () banked
  3201  00084E  6FDA               	movwf	printf@ap& (0+255),b
  3202  000850  0E00               	movlw	high (?_printf+3)
  3203  000852  6FDB               	movwf	(printf@ap+1)& (0+255),b
  3204                           
  3205                           ;doprnt.c: 536: while(c = *f++) {
  3206  000854  D10A               	goto	u1620
  3207  000856                     
  3208                           ; BSR set to: 0
  3209                           ;doprnt.c: 538: if(c != '%')
  3210                           
  3211                           ; BSR set to: 0
  3212  000856  0E25               	movlw	37
  3213  000858  19E0               	xorwf	printf@c& (0+255),w,b
  3214  00085A  B4D8               	btfsc	status,2,c
  3215  00085C  D004               	goto	l391
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;doprnt.c: 540: {
  3219                           ;doprnt.c: 541: (putch(c) );
  3220  00085E  51E0               	movf	printf@c& (0+255),w,b
  3221  000860  EC7B  F00C         	call	_putch
  3222                           
  3223                           ;doprnt.c: 542: continue;
  3224  000864  D102               	goto	u1620
  3225  000866                     l391:
  3226                           
  3227                           ;doprnt.c: 543: }
  3228                           ;doprnt.c: 548: flag = 0;
  3229  000866  0E00               	movlw	0
  3230  000868  0100               	movlb	0	; () banked
  3231  00086A  6FDD               	movwf	printf@flag& (0+255),b
  3232                           
  3233                           ;doprnt.c: 635: switch(c = *f++) {
  3234  00086C  D006               	goto	l392
  3235  00086E                     
  3236                           ; BSR set to: 0
  3237                           ;doprnt.c: 721: flag |= 0x80;
  3238                           
  3239                           ; BSR set to: 0
  3240  00086E  8FDD               	bsf	printf@flag& (0+255),7,b
  3241                           
  3242                           ;doprnt.c: 723: break;
  3243  000870  D02A               	goto	l397
  3244  000872                     
  3245                           ; BSR set to: 0
  3246                           ;doprnt.c: 809: (putch(c) );
  3247                           
  3248                           ; BSR set to: 0
  3249  000872  51E0               	movf	printf@c& (0+255),w,b
  3250  000874  EC7B  F00C         	call	_putch
  3251                           
  3252                           ;doprnt.c: 810: continue;
  3253  000878  D0F8               	goto	u1620
  3254  00087A                     l392:
  3255  00087A  C0D3  FFF6         	movff	printf@f,tblptrl
  3256  00087E  C0D4  FFF7         	movff	printf@f+1,tblptrh
  3257  000882  C0D5  FFF8         	movff	printf@f+2,tblptru
  3258  000886  0E01               	movlw	1
  3259  000888  0100               	movlb	0	; () banked
  3260  00088A  27D3               	addwf	printf@f& (0+255),f,b
  3261  00088C  0E00               	movlw	0
  3262  00088E  23D4               	addwfc	(printf@f+1)& (0+255),f,b
  3263  000890  23D5               	addwfc	(printf@f+2)& (0+255),f,b
  3264  000892  BAF8               	btfsc	tblptru,5,c
  3265  000894  D003               	bra	u1527
  3266  000896  0008               	tblrd		*
  3267  000898  50F5               	movf	tablat,w,c
  3268  00089A  D005               	bra	u1520
  3269  00089C                     u1527:
  3270  00089C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3271  0008A0  CFF7 FFEA          	movff	tblptrh,fsr0h
  3272  0008A4  50EF               	movf	indf0,w,c
  3273  0008A6                     u1520:
  3274  0008A6  0100               	movlb	0	; () banked
  3275  0008A8  6FE0               	movwf	printf@c& (0+255),b
  3276  0008AA  51E0               	movf	printf@c& (0+255),w,b
  3277                           
  3278                           ; Switch size 1, requested type "space"
  3279                           ; Number of cases is 4, Range of values is 0 to 120
  3280                           ; switch strategies available:
  3281                           ; Name         Instructions Cycles
  3282                           ; simple_byte           13     7 (average)
  3283                           ;	Chosen strategy is simple_byte
  3284  0008AC  0A00               	xorlw	0	; case 0
  3285  0008AE  B4D8               	btfsc	status,2,c
  3286  0008B0  0012               	return	
  3287  0008B2  0A64               	xorlw	100	; case 100
  3288  0008B4  B4D8               	btfsc	status,2,c
  3289  0008B6  D007               	goto	l397
  3290  0008B8  0A0D               	xorlw	13	; case 105
  3291  0008BA  B4D8               	btfsc	status,2,c
  3292  0008BC  D004               	goto	l397
  3293  0008BE  0A11               	xorlw	17	; case 120
  3294  0008C0  B4D8               	btfsc	status,2,c
  3295  0008C2  D7D5               	goto	l398
  3296  0008C4  D7D6               	goto	l399
  3297  0008C6                     l397:
  3298                           
  3299                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  3300  0008C6  0100               	movlb	0	; () banked
  3301  0008C8  BFDD               	btfsc	printf@flag& (0+255),7,b
  3302  0008CA  D015               	goto	l400
  3303                           
  3304                           ; BSR set to: 0
  3305                           ;doprnt.c: 1253: {
  3306                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3307  0008CC  C0DA  FFD9         	movff	printf@ap,fsr2l
  3308  0008D0  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  3309  0008D4  CFDE F0DE          	movff	postinc2,printf@val
  3310  0008D8  CFDD F0DF          	movff	postdec2,printf@val+1
  3311                           
  3312                           ; BSR set to: 0
  3313  0008DC  0E02               	movlw	2
  3314  0008DE  27DA               	addwf	printf@ap& (0+255),f,b
  3315  0008E0  0E00               	movlw	0
  3316  0008E2  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;doprnt.c: 1261: if((int)val < 0) {
  3320  0008E4  AFDF               	btfss	(printf@val+1)& (0+255),7,b
  3321  0008E6  D04A               	goto	l403
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;doprnt.c: 1262: flag |= 0x03;
  3325  0008E8  0E03               	movlw	3
  3326  0008EA  13DD               	iorwf	printf@flag& (0+255),f,b
  3327                           
  3328                           ; BSR set to: 0
  3329                           ;doprnt.c: 1263: val = -val;
  3330  0008EC  6DDE               	negf	printf@val& (0+255),b
  3331  0008EE  1FDF               	comf	(printf@val+1)& (0+255),f,b
  3332  0008F0  B0D8               	btfsc	status,0,c
  3333  0008F2  2BDF               	incf	(printf@val+1)& (0+255),f,b
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;doprnt.c: 1264: }
  3337                           ;doprnt.c: 1266: }
  3338  0008F4  D043               	goto	l403
  3339  0008F6                     l400:
  3340                           
  3341                           ; BSR set to: 0
  3342                           ;doprnt.c: 1268: else
  3343                           ;doprnt.c: 1273: {
  3344                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3345                           
  3346                           ; BSR set to: 0
  3347  0008F6  C0DA  FFD9         	movff	printf@ap,fsr2l
  3348  0008FA  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  3349  0008FE  CFDE F0DE          	movff	postinc2,printf@val
  3350  000902  CFDD F0DF          	movff	postdec2,printf@val+1
  3351                           
  3352                           ; BSR set to: 0
  3353  000906  0E02               	movlw	2
  3354  000908  27DA               	addwf	printf@ap& (0+255),f,b
  3355  00090A  0E00               	movlw	0
  3356  00090C  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;doprnt.c: 1287: }
  3360                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  3361  00090E  D036               	goto	l403
  3362  000910                     
  3363                           ; BSR set to: 0
  3364                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3365                           
  3366                           ; BSR set to: 0
  3367  000910  0E01               	movlw	1
  3368  000912  6FE0               	movwf	printf@c& (0+255),b
  3369  000914                     l2132:
  3370                           
  3371                           ; BSR set to: 0
  3372  000914  0E05               	movlw	5
  3373  000916  19E0               	xorwf	printf@c& (0+255),w,b
  3374  000918  B4D8               	btfsc	status,2,c
  3375  00091A  D038               	goto	l408
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;doprnt.c: 1306: if(val < dpowers[c])
  3379                           
  3380                           ; BSR set to: 0
  3381                           
  3382                           ; BSR set to: 0
  3383  00091C  51E0               	movf	printf@c& (0+255),w,b
  3384  00091E  0D02               	mullw	2
  3385  000920  0E01               	movlw	low _dpowers
  3386  000922  24F3               	addwf	prodl,w,c
  3387  000924  6EF6               	movwf	tblptrl,c
  3388  000926  0E08               	movlw	high _dpowers
  3389  000928  20F4               	addwfc	prodh,w,c
  3390  00092A  6EF7               	movwf	tblptrh,c
  3391  00092C                     	if	1	;There are 3 active tblptr bytes
  3392  00092C  6AF8               	clrf	tblptru,c
  3393  00092E  0E00               	movlw	low (__mediumconst shr (0+16))
  3394  000930  22F8               	addwfc	tblptru,f,c
  3395  000932                     	endif
  3396  000932  0009               	tblrd		*+
  3397  000934  50F5               	movf	tablat,w,c
  3398  000936  5DDE               	subwf	printf@val& (0+255),w,b
  3399  000938  0009               	tblrd		*+
  3400  00093A  50F5               	movf	tablat,w,c
  3401  00093C  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  3402  00093E  A0D8               	btfss	status,0,c
  3403  000940  D025               	goto	l408
  3404                           
  3405                           ; BSR set to: 0
  3406                           
  3407                           ; BSR set to: 0
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;doprnt.c: 1307: break;
  3411  000942  2BE0               	incf	printf@c& (0+255),f,b
  3412  000944  D7E7               	goto	l2132
  3413  000946                     
  3414                           ; BSR set to: 0
  3415                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3416                           
  3417                           ; BSR set to: 0
  3418  000946  0E01               	movlw	1
  3419  000948  6FE0               	movwf	printf@c& (0+255),b
  3420  00094A                     l2146:
  3421                           
  3422                           ; BSR set to: 0
  3423  00094A  0E04               	movlw	4
  3424  00094C  19E0               	xorwf	printf@c& (0+255),w,b
  3425  00094E  B4D8               	btfsc	status,2,c
  3426  000950  D01D               	goto	l408
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3430                           
  3431                           ; BSR set to: 0
  3432                           
  3433                           ; BSR set to: 0
  3434  000952  51E0               	movf	printf@c& (0+255),w,b
  3435  000954  0D02               	mullw	2
  3436  000956  0E0B               	movlw	low _hexpowers
  3437  000958  24F3               	addwf	prodl,w,c
  3438  00095A  6EF6               	movwf	tblptrl,c
  3439  00095C  0E08               	movlw	high _hexpowers
  3440  00095E  20F4               	addwfc	prodh,w,c
  3441  000960  6EF7               	movwf	tblptrh,c
  3442  000962                     	if	1	;There are 3 active tblptr bytes
  3443  000962  6AF8               	clrf	tblptru,c
  3444  000964  0E00               	movlw	low (__mediumconst shr (0+16))
  3445  000966  22F8               	addwfc	tblptru,f,c
  3446  000968                     	endif
  3447  000968  0009               	tblrd		*+
  3448  00096A  50F5               	movf	tablat,w,c
  3449  00096C  5DDE               	subwf	printf@val& (0+255),w,b
  3450  00096E  0009               	tblrd		*+
  3451  000970  50F5               	movf	tablat,w,c
  3452  000972  59DF               	subwfb	(printf@val+1)& (0+255),w,b
  3453  000974  A0D8               	btfss	status,0,c
  3454  000976  D00A               	goto	l408
  3455                           
  3456                           ; BSR set to: 0
  3457                           
  3458                           ; BSR set to: 0
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;doprnt.c: 1318: break;
  3462  000978  2BE0               	incf	printf@c& (0+255),f,b
  3463  00097A  D7E7               	goto	l2146
  3464  00097C                     l403:
  3465                           
  3466                           ; BSR set to: 0
  3467                           
  3468                           ; BSR set to: 0
  3469  00097C  51DD               	movf	printf@flag& (0+255),w,b
  3470  00097E  0B80               	andlw	128
  3471                           
  3472                           ; Switch size 1, requested type "space"
  3473                           ; Number of cases is 2, Range of values is 0 to 128
  3474                           ; switch strategies available:
  3475                           ; Name         Instructions Cycles
  3476                           ; simple_byte            7     4 (average)
  3477                           ;	Chosen strategy is simple_byte
  3478  000980  0A00               	xorlw	0	; case 0
  3479  000982  B4D8               	btfsc	status,2,c
  3480  000984  D7C5               	goto	l404
  3481  000986  0A80               	xorlw	128	; case 128
  3482  000988  B4D8               	btfsc	status,2,c
  3483  00098A  D7DD               	goto	l409
  3484  00098C                     l408:
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;doprnt.c: 1422: {
  3488                           ;doprnt.c: 1438: if(flag & 0x03)
  3489                           
  3490                           ; BSR set to: 0
  3491  00098C  C0DD  F0D8         	movff	printf@flag,??_printf
  3492  000990  0E03               	movlw	3
  3493  000992  17D8               	andwf	??_printf& (0+255),f,b
  3494  000994  B4D8               	btfsc	status,2,c
  3495  000996  D003               	goto	l413
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 1439: (putch('-') );
  3499  000998  0E2D               	movlw	45
  3500  00099A  EC7B  F00C         	call	_putch
  3501  00099E                     l413:
  3502                           
  3503                           ;doprnt.c: 1469: }
  3504                           ;doprnt.c: 1472: prec = c;
  3505  00099E  C0E0  F0DC         	movff	printf@c,printf@prec
  3506                           
  3507                           ;doprnt.c: 1474: while(prec--) {
  3508  0009A2  D05E               	goto	l414
  3509  0009A4                     
  3510                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3511  0009A4  0100               	movlb	0	; () banked
  3512  0009A6  51DC               	movf	printf@prec& (0+255),w,b
  3513  0009A8  0D02               	mullw	2
  3514  0009AA  0E01               	movlw	low _dpowers
  3515  0009AC  24F3               	addwf	prodl,w,c
  3516  0009AE  6EF6               	movwf	tblptrl,c
  3517  0009B0  0E08               	movlw	high _dpowers
  3518  0009B2  20F4               	addwfc	prodh,w,c
  3519  0009B4  6EF7               	movwf	tblptrh,c
  3520  0009B6                     	if	1	;There are 3 active tblptr bytes
  3521  0009B6  6AF8               	clrf	tblptru,c
  3522  0009B8  0E00               	movlw	low (__mediumconst shr (0+16))
  3523  0009BA  22F8               	addwfc	tblptru,f,c
  3524  0009BC                     	endif
  3525  0009BC  0009               	tblrd		*+
  3526  0009BE  CFF5 F0C9          	movff	tablat,___lwdiv@divisor
  3527  0009C2  000A               	tblrd		*-
  3528  0009C4  CFF5 F0CA          	movff	tablat,___lwdiv@divisor+1
  3529  0009C8  C0DE  F0C7         	movff	printf@val,___lwdiv@dividend
  3530  0009CC  C0DF  F0C8         	movff	printf@val+1,___lwdiv@dividend+1
  3531  0009D0  ECB2  F00B         	call	___lwdiv	;wreg free
  3532  0009D4  C0C7  F0CE         	movff	?___lwdiv,___lwmod@dividend
  3533  0009D8  C0C8  F0CF         	movff	?___lwdiv+1,___lwmod@dividend+1
  3534  0009DC  0E00               	movlw	0
  3535  0009DE  0100               	movlb	0	; () banked
  3536  0009E0  6FD1               	movwf	(___lwmod@divisor+1)& (0+255),b
  3537  0009E2  0E0A               	movlw	10
  3538  0009E4  6FD0               	movwf	___lwmod@divisor& (0+255),b
  3539  0009E6  EC2A  F00C         	call	___lwmod	;wreg free
  3540  0009EA  0100               	movlb	0	; () banked
  3541  0009EC  51CE               	movf	?___lwmod& (0+255),w,b
  3542  0009EE  0F30               	addlw	48
  3543  0009F0  6FE0               	movwf	printf@c& (0+255),b
  3544                           
  3545                           ;doprnt.c: 1491: break;
  3546  0009F2  D033               	goto	l418
  3547  0009F4                     
  3548                           ; BSR set to: 0
  3549                           ;doprnt.c: 1499: {
  3550                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3551                           
  3552                           ; BSR set to: 0
  3553  0009F4  C0DE  F0C7         	movff	printf@val,___lwdiv@dividend
  3554  0009F8  C0DF  F0C8         	movff	printf@val+1,___lwdiv@dividend+1
  3555  0009FC  51DC               	movf	printf@prec& (0+255),w,b
  3556  0009FE  0D02               	mullw	2
  3557  000A00  0E0B               	movlw	low _hexpowers
  3558  000A02  24F3               	addwf	prodl,w,c
  3559  000A04  6EF6               	movwf	tblptrl,c
  3560  000A06  0E08               	movlw	high _hexpowers
  3561  000A08  20F4               	addwfc	prodh,w,c
  3562  000A0A  6EF7               	movwf	tblptrh,c
  3563  000A0C                     	if	1	;There are 3 active tblptr bytes
  3564  000A0C  6AF8               	clrf	tblptru,c
  3565  000A0E  0E00               	movlw	low (__mediumconst shr (0+16))
  3566  000A10  22F8               	addwfc	tblptru,f,c
  3567  000A12                     	endif
  3568  000A12  0009               	tblrd		*+
  3569  000A14  CFF5 F0C9          	movff	tablat,___lwdiv@divisor
  3570  000A18  000A               	tblrd		*-
  3571  000A1A  CFF5 F0CA          	movff	tablat,___lwdiv@divisor+1
  3572  000A1E  ECB2  F00B         	call	___lwdiv	;wreg free
  3573  000A22  0100               	movlb	0	; () banked
  3574  000A24  51C7               	movf	?___lwdiv& (0+255),w,b
  3575  000A26  0B0F               	andlw	15
  3576  000A28  6FD9               	movwf	printf@idx& (0+255),b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3580  000A2A  51D9               	movf	printf@idx& (0+255),w,b
  3581  000A2C  0D01               	mullw	1
  3582  000A2E  0E13               	movlw	low STR_21
  3583  000A30  24F3               	addwf	prodl,w,c
  3584  000A32  6EF6               	movwf	tblptrl,c
  3585  000A34  0E08               	movlw	high STR_21
  3586  000A36  20F4               	addwfc	prodh,w,c
  3587  000A38  6EF7               	movwf	tblptrh,c
  3588  000A3A                     	if	1	;There are 3 active tblptr bytes
  3589  000A3A  6AF8               	clrf	tblptru,c
  3590  000A3C  0E00               	movlw	low (__mediumconst shr (0+16))
  3591  000A3E  22F8               	addwfc	tblptru,f,c
  3592  000A40                     	endif
  3593  000A40  0008               	tblrd		*
  3594  000A42  CFF5 F0E0          	movff	tablat,printf@c
  3595                           
  3596                           ; BSR set to: 0
  3597                           ;doprnt.c: 1523: }
  3598                           
  3599                           ;doprnt.c: 1508: }
  3600                           ;doprnt.c: 1510: break;
  3601  000A46  D009               	goto	l418
  3602  000A48                     
  3603                           ; BSR set to: 0
  3604  000A48  0100               	movlb	0	; () banked
  3605  000A4A  51DD               	movf	printf@flag& (0+255),w,b
  3606  000A4C  0B80               	andlw	128
  3607                           
  3608                           ; Switch size 1, requested type "space"
  3609                           ; Number of cases is 2, Range of values is 0 to 128
  3610                           ; switch strategies available:
  3611                           ; Name         Instructions Cycles
  3612                           ; simple_byte            7     4 (average)
  3613                           ;	Chosen strategy is simple_byte
  3614  000A4E  0A00               	xorlw	0	; case 0
  3615  000A50  B4D8               	btfsc	status,2,c
  3616  000A52  D7A8               	goto	l417
  3617  000A54  0A80               	xorlw	128	; case 128
  3618  000A56  B4D8               	btfsc	status,2,c
  3619  000A58  D7CD               	goto	l419
  3620  000A5A                     l418:
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;doprnt.c: 1524: (putch(c) );
  3624                           
  3625                           ; BSR set to: 0
  3626  000A5A  51E0               	movf	printf@c& (0+255),w,b
  3627  000A5C  EC7B  F00C         	call	_putch
  3628  000A60                     l414:
  3629  000A60  0100               	movlb	0	; () banked
  3630  000A62  07DC               	decf	printf@prec& (0+255),f,b
  3631  000A64  29DC               	incf	printf@prec& (0+255),w,b
  3632  000A66  A4D8               	btfss	status,2,c
  3633  000A68  D7EF               	goto	l416
  3634  000A6A                     u1620:
  3635                           
  3636                           ; BSR set to: 0
  3637                           
  3638                           ; BSR set to: 0
  3639  000A6A  C0D3  FFF6         	movff	printf@f,tblptrl
  3640  000A6E  C0D4  FFF7         	movff	printf@f+1,tblptrh
  3641  000A72  C0D5  FFF8         	movff	printf@f+2,tblptru
  3642  000A76  0E01               	movlw	1
  3643  000A78  0100               	movlb	0	; () banked
  3644  000A7A  27D3               	addwf	printf@f& (0+255),f,b
  3645  000A7C  0E00               	movlw	0
  3646  000A7E  23D4               	addwfc	(printf@f+1)& (0+255),f,b
  3647  000A80  23D5               	addwfc	(printf@f+2)& (0+255),f,b
  3648  000A82  BAF8               	btfsc	tblptru,5,c
  3649  000A84  D003               	bra	u1637
  3650  000A86  0008               	tblrd		*
  3651  000A88  50F5               	movf	tablat,w,c
  3652  000A8A  D005               	bra	u1630
  3653  000A8C                     u1637:
  3654  000A8C  CFF6 FFE9          	movff	tblptrl,fsr0l
  3655  000A90  CFF7 FFEA          	movff	tblptrh,fsr0h
  3656  000A94  50EF               	movf	indf0,w,c
  3657  000A96                     u1630:
  3658  000A96  0100               	movlb	0	; () banked
  3659  000A98  6FE0               	movwf	printf@c& (0+255),b
  3660  000A9A  51E0               	movf	printf@c& (0+255),w,b
  3661  000A9C  B4D8               	btfsc	status,2,c
  3662  000A9E  0012               	return	
  3663  000AA0  D6DA               	goto	l390
  3664  000AA2                     __end_of_printf:
  3665                           	opt stack 0
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           indf0	equ	0xFEF
  3673                           postinc0	equ	0xFEE
  3674                           plusw0	equ	0xFEB
  3675                           fsr0h	equ	0xFEA
  3676                           fsr0l	equ	0xFE9
  3677                           wreg	equ	0xFE8
  3678                           indf1	equ	0xFE7
  3679                           postinc1	equ	0xFE6
  3680                           postdec1	equ	0xFE5
  3681                           fsr1h	equ	0xFE2
  3682                           fsr1l	equ	0xFE1
  3683                           indf2	equ	0xFDF
  3684                           postinc2	equ	0xFDE
  3685                           postdec2	equ	0xFDD
  3686                           plusw2	equ	0xFDB
  3687                           fsr2h	equ	0xFDA
  3688                           fsr2l	equ	0xFD9
  3689                           status	equ	0xFD8
  3690                           
  3691 ;; *************** function _putch *****************
  3692 ;; Defined at:
  3693 ;;		line 258 in file "Drivers/UART_Driver.c"
  3694 ;; Parameters:    Size  Location     Type
  3695 ;;  data            1    wreg     unsigned char 
  3696 ;; Auto vars:     Size  Location     Type
  3697 ;;  data            1    0[BANK0 ] unsigned char 
  3698 ;;  max             1    1[BANK0 ] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3708 ;;      Params:         0       0       0       0       0       0       0       0       0
  3709 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3711 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3712 ;;Total ram usage:        2 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    3
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_printf
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text16
  3723  0018F6                     __ptext16:
  3724                           	opt stack 0
  3725  0018F6                     _putch:
  3726                           	opt stack 24
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;incstack = 0
  3730                           ;putch@data stored from wreg
  3731  0018F6  0100               	movlb	0	; () banked
  3732  0018F8  6FC7               	movwf	putch@data& (0+255),b
  3733                           
  3734                           ;UART_Driver.c: 259: uint8_t max = 0;
  3735  0018FA  0E00               	movlw	0
  3736  0018FC  0100               	movlb	0	; () banked
  3737  0018FE  6FC8               	movwf	putch@max& (0+255),b
  3738                           
  3739                           ;UART_Driver.c: 261: while(TXSTAbits.TRMT == 0 && max < 200) {
  3740  001900  D005               	goto	l166
  3741  001902                     
  3742                           ; BSR set to: 0
  3743                           ;UART_Driver.c: 262: max++;
  3744                           
  3745                           ; BSR set to: 0
  3746  001902  2BC8               	incf	putch@max& (0+255),f,b
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;UART_Driver.c: 263: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  3750  001904  0E06               	movlw	6
  3751  001906                     u2217:
  3752  001906  2EE8               	decfsz	wreg,f,c
  3753  001908  D7FE               	bra	u2217
  3754  00190A  D000               	nop2	
  3755  00190C                     l166:
  3756  00190C  B2AC               	btfsc	4012,1,c	;volatile
  3757  00190E  D004               	goto	u1440
  3758  001910  0EC7               	movlw	199
  3759  001912  0100               	movlb	0	; () banked
  3760  001914  65C8               	cpfsgt	putch@max& (0+255),b
  3761  001916  D7F5               	goto	l167
  3762  001918                     u1440:
  3763                           
  3764                           ;UART_Driver.c: 264: }
  3765                           ;UART_Driver.c: 265: TXREG = data;
  3766                           
  3767                           ; BSR set to: 0
  3768  001918  C0C7  FFAD         	movff	putch@data,4013	;volatile
  3769  00191C  0012               	return		;funcret
  3770  00191E                     __end_of_putch:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           indf0	equ	0xFEF
  3779                           postinc0	equ	0xFEE
  3780                           plusw0	equ	0xFEB
  3781                           fsr0h	equ	0xFEA
  3782                           fsr0l	equ	0xFE9
  3783                           wreg	equ	0xFE8
  3784                           indf1	equ	0xFE7
  3785                           postinc1	equ	0xFE6
  3786                           postdec1	equ	0xFE5
  3787                           fsr1h	equ	0xFE2
  3788                           fsr1l	equ	0xFE1
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           plusw2	equ	0xFDB
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function ___lwmod *****************
  3798 ;; Defined at:
  3799 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  dividend        2    7[BANK0 ] unsigned int 
  3802 ;;  divisor         2    9[BANK0 ] unsigned int 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  counter         1   11[BANK0 ] unsigned char 
  3805 ;; Return value:  Size  Location     Type
  3806 ;;                  2    7[BANK0 ] unsigned int 
  3807 ;; Registers used:
  3808 ;;		wreg, status,2, status,0
  3809 ;; Tracked objects:
  3810 ;;		On entry : 0/0
  3811 ;;		On exit  : 0/0
  3812 ;;		Unchanged: 0/0
  3813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3814 ;;      Params:         0       4       0       0       0       0       0       0       0
  3815 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3816 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3817 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3818 ;;Total ram usage:        5 bytes
  3819 ;; Hardware stack levels used:    1
  3820 ;; Hardware stack levels required when called:    3
  3821 ;; This function calls:
  3822 ;;		Nothing
  3823 ;; This function is called by:
  3824 ;;		_printf
  3825 ;; This function uses a non-reentrant model
  3826 ;;
  3827                           
  3828                           	psect	text17
  3829  001854                     __ptext17:
  3830                           	opt stack 0
  3831  001854                     ___lwmod:
  3832                           	opt stack 24
  3833                           
  3834                           ;incstack = 0
  3835  001854  0100               	movlb	0	; () banked
  3836  001856  51D0               	movf	___lwmod@divisor& (0+255),w,b
  3837  001858  11D1               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3838  00185A  B4D8               	btfsc	status,2,c
  3839  00185C  D018               	goto	l841
  3840                           
  3841                           ; BSR set to: 0
  3842  00185E  0E01               	movlw	1
  3843  001860  6FD2               	movwf	___lwmod@counter& (0+255),b
  3844  001862  D004               	goto	l836
  3845  001864                     
  3846                           ; BSR set to: 0
  3847                           
  3848                           ; BSR set to: 0
  3849  001864  90D8               	bcf	status,0,c
  3850  001866  37D0               	rlcf	___lwmod@divisor& (0+255),f,b
  3851  001868  37D1               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3852  00186A  2BD2               	incf	___lwmod@counter& (0+255),f,b
  3853  00186C                     l836:
  3854                           
  3855                           ; BSR set to: 0
  3856                           
  3857                           ; BSR set to: 0
  3858  00186C  AFD1               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3859  00186E  D7FA               	goto	l837
  3860  001870                     u1490:
  3861                           
  3862                           ; BSR set to: 0
  3863                           
  3864                           ; BSR set to: 0
  3865                           
  3866                           ; BSR set to: 0
  3867  001870  51D0               	movf	___lwmod@divisor& (0+255),w,b
  3868  001872  5DCE               	subwf	___lwmod@dividend& (0+255),w,b
  3869  001874  51D1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3870  001876  59CF               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3871  001878  A0D8               	btfss	status,0,c
  3872  00187A  D004               	goto	l840
  3873                           
  3874                           ; BSR set to: 0
  3875  00187C  51D0               	movf	___lwmod@divisor& (0+255),w,b
  3876  00187E  5FCE               	subwf	___lwmod@dividend& (0+255),f,b
  3877  001880  51D1               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3878  001882  5BCF               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3879  001884                     l840:
  3880                           
  3881                           ; BSR set to: 0
  3882                           
  3883                           ; BSR set to: 0
  3884  001884  90D8               	bcf	status,0,c
  3885  001886  33D1               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3886  001888  33D0               	rrcf	___lwmod@divisor& (0+255),f,b
  3887                           
  3888                           ; BSR set to: 0
  3889  00188A  2FD2               	decfsz	___lwmod@counter& (0+255),f,b
  3890  00188C  D7F1               	goto	u1490
  3891  00188E                     l841:
  3892                           
  3893                           ; BSR set to: 0
  3894                           
  3895                           ; BSR set to: 0
  3896  00188E  C0CE  F0CE         	movff	___lwmod@dividend,?___lwmod
  3897  001892  C0CF  F0CF         	movff	___lwmod@dividend+1,?___lwmod+1
  3898                           
  3899                           ; BSR set to: 0
  3900  001896  0012               	return		;funcret
  3901  001898                     __end_of___lwmod:
  3902                           	opt stack 0
  3903                           tblptru	equ	0xFF8
  3904                           tblptrh	equ	0xFF7
  3905                           tblptrl	equ	0xFF6
  3906                           tablat	equ	0xFF5
  3907                           prodh	equ	0xFF4
  3908                           prodl	equ	0xFF3
  3909                           indf0	equ	0xFEF
  3910                           postinc0	equ	0xFEE
  3911                           plusw0	equ	0xFEB
  3912                           fsr0h	equ	0xFEA
  3913                           fsr0l	equ	0xFE9
  3914                           wreg	equ	0xFE8
  3915                           indf1	equ	0xFE7
  3916                           postinc1	equ	0xFE6
  3917                           postdec1	equ	0xFE5
  3918                           fsr1h	equ	0xFE2
  3919                           fsr1l	equ	0xFE1
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           postdec2	equ	0xFDD
  3923                           plusw2	equ	0xFDB
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function ___lwdiv *****************
  3929 ;; Defined at:
  3930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  dividend        2    0[BANK0 ] unsigned int 
  3933 ;;  divisor         2    2[BANK0 ] unsigned int 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  quotient        2    5[BANK0 ] unsigned int 
  3936 ;;  counter         1    4[BANK0 ] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  2    0[BANK0 ] unsigned int 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3946 ;;      Params:         0       4       0       0       0       0       0       0       0
  3947 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3948 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3949 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3950 ;;Total ram usage:        7 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    3
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_printf
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text18
  3961  001764                     __ptext18:
  3962                           	opt stack 0
  3963  001764                     ___lwdiv:
  3964                           	opt stack 24
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;incstack = 0
  3968  001764  0E00               	movlw	0
  3969  001766  0100               	movlb	0	; () banked
  3970  001768  6FCD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3971  00176A  0E00               	movlw	0
  3972  00176C  6FCC               	movwf	___lwdiv@quotient& (0+255),b
  3973                           
  3974                           ; BSR set to: 0
  3975  00176E  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  3976  001770  11CA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3977  001772  B4D8               	btfsc	status,2,c
  3978  001774  D01C               	goto	l831
  3979                           
  3980                           ; BSR set to: 0
  3981  001776  0E01               	movlw	1
  3982  001778  6FCB               	movwf	___lwdiv@counter& (0+255),b
  3983  00177A  D004               	goto	l826
  3984  00177C                     
  3985                           ; BSR set to: 0
  3986                           
  3987                           ; BSR set to: 0
  3988  00177C  90D8               	bcf	status,0,c
  3989  00177E  37C9               	rlcf	___lwdiv@divisor& (0+255),f,b
  3990  001780  37CA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3991  001782  2BCB               	incf	___lwdiv@counter& (0+255),f,b
  3992  001784                     l826:
  3993                           
  3994                           ; BSR set to: 0
  3995                           
  3996                           ; BSR set to: 0
  3997  001784  AFCA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3998  001786  D7FA               	goto	l827
  3999  001788                     u1460:
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004                           
  4005                           ; BSR set to: 0
  4006  001788  90D8               	bcf	status,0,c
  4007  00178A  37CC               	rlcf	___lwdiv@quotient& (0+255),f,b
  4008  00178C  37CD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4009                           
  4010                           ; BSR set to: 0
  4011  00178E  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4012  001790  5DC7               	subwf	___lwdiv@dividend& (0+255),w,b
  4013  001792  51CA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4014  001794  59C8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4015  001796  A0D8               	btfss	status,0,c
  4016  001798  D005               	goto	l830
  4017                           
  4018                           ; BSR set to: 0
  4019  00179A  51C9               	movf	___lwdiv@divisor& (0+255),w,b
  4020  00179C  5FC7               	subwf	___lwdiv@dividend& (0+255),f,b
  4021  00179E  51CA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4022  0017A0  5BC8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4023                           
  4024                           ; BSR set to: 0
  4025  0017A2  81CC               	bsf	___lwdiv@quotient& (0+255),0,b
  4026  0017A4                     l830:
  4027                           
  4028                           ; BSR set to: 0
  4029                           
  4030                           ; BSR set to: 0
  4031  0017A4  90D8               	bcf	status,0,c
  4032  0017A6  33CA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4033  0017A8  33C9               	rrcf	___lwdiv@divisor& (0+255),f,b
  4034                           
  4035                           ; BSR set to: 0
  4036  0017AA  2FCB               	decfsz	___lwdiv@counter& (0+255),f,b
  4037  0017AC  D7ED               	goto	u1460
  4038  0017AE                     l831:
  4039                           
  4040                           ; BSR set to: 0
  4041                           
  4042                           ; BSR set to: 0
  4043  0017AE  C0CC  F0C7         	movff	___lwdiv@quotient,?___lwdiv
  4044  0017B2  C0CD  F0C8         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4045                           
  4046                           ; BSR set to: 0
  4047  0017B6  0012               	return		;funcret
  4048  0017B8                     __end_of___lwdiv:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           prodh	equ	0xFF4
  4055                           prodl	equ	0xFF3
  4056                           indf0	equ	0xFEF
  4057                           postinc0	equ	0xFEE
  4058                           plusw0	equ	0xFEB
  4059                           fsr0h	equ	0xFEA
  4060                           fsr0l	equ	0xFE9
  4061                           wreg	equ	0xFE8
  4062                           indf1	equ	0xFE7
  4063                           postinc1	equ	0xFE6
  4064                           postdec1	equ	0xFE5
  4065                           fsr1h	equ	0xFE2
  4066                           fsr1l	equ	0xFE1
  4067                           indf2	equ	0xFDF
  4068                           postinc2	equ	0xFDE
  4069                           postdec2	equ	0xFDD
  4070                           plusw2	equ	0xFDB
  4071                           fsr2h	equ	0xFDA
  4072                           fsr2l	equ	0xFD9
  4073                           status	equ	0xFD8
  4074                           
  4075 ;; *************** function _C_DOOR_ReadSensors *****************
  4076 ;; Defined at:
  4077 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  d               1    4[BANK0 ] unsigned char 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  1    wreg      void 
  4084 ;; Registers used:
  4085 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4091 ;;      Params:         0       0       0       0       0       0       0       0       0
  4092 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4093 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4094 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4095 ;;Total ram usage:        5 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; Hardware stack levels required when called:    3
  4098 ;; This function calls:
  4099 ;;		Nothing
  4100 ;; This function is called by:
  4101 ;;		_run
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text19
  4106  00145C                     __ptext19:
  4107                           	opt stack 0
  4108  00145C                     _C_DOOR_ReadSensors:
  4109                           	opt stack 26
  4110                           
  4111                           ;DOOR_Controller.c: 103: uint8_t d;
  4112                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;incstack = 0
  4116  00145C  0E00               	movlw	0
  4117  00145E  0100               	movlb	0	; () banked
  4118  001460  6FCB               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  4119  001462  D03E               	goto	l42
  4120  001464                     
  4121                           ; BSR set to: 0
  4122                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 0x01) == 1);
  4123                           
  4124                           ; BSR set to: 0
  4125  001464  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4126  001466  0D0A               	mullw	10
  4127  001468  0E06               	movlw	6
  4128  00146A  26F3               	addwf	prodl,f,c
  4129  00146C  0E00               	movlw	0
  4130  00146E  22F4               	addwfc	prodh,f,c
  4131  001470  0E60               	movlw	low _doors
  4132  001472  24F3               	addwf	prodl,w,c
  4133  001474  6ED9               	movwf	fsr2l,c
  4134  001476  0E00               	movlw	high _doors
  4135  001478  20F4               	addwfc	prodh,w,c
  4136  00147A  6EDA               	movwf	fsr2h,c
  4137  00147C  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4138  00147E  0D0A               	mullw	10
  4139  001480  0E09               	movlw	9
  4140  001482  26F3               	addwf	prodl,f,c
  4141  001484  0E00               	movlw	0
  4142  001486  22F4               	addwfc	prodh,f,c
  4143  001488  0E60               	movlw	low _doors
  4144  00148A  24F3               	addwf	prodl,w,c
  4145  00148C  6EE1               	movwf	fsr1l,c
  4146  00148E  0E00               	movlw	high _doors
  4147  001490  20F4               	addwfc	prodh,w,c
  4148  001492  6EE2               	movwf	fsr1h,c
  4149  001494  50E7               	movf	indf1,w,c
  4150  001496  6FC7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4151  001498  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4152  00149A  0D0A               	mullw	10
  4153  00149C  0E07               	movlw	7
  4154  00149E  26F3               	addwf	prodl,f,c
  4155  0014A0  0E00               	movlw	0
  4156  0014A2  22F4               	addwfc	prodh,f,c
  4157  0014A4  0E60               	movlw	low _doors
  4158  0014A6  24F3               	addwf	prodl,w,c
  4159  0014A8  6EE1               	movwf	fsr1l,c
  4160  0014AA  0E00               	movlw	high _doors
  4161  0014AC  20F4               	addwfc	prodh,w,c
  4162  0014AE  6EE2               	movwf	fsr1h,c
  4163  0014B0  CFE6 F0C8          	movff	postinc1,??_C_DOOR_ReadSensors+1
  4164  0014B4  CFE5 F0C9          	movff	postdec1,??_C_DOOR_ReadSensors+2
  4165  0014B8  C0C8  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  4166  0014BC  C0C9  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  4167  0014C0  50E7               	movf	indf1,w,c
  4168  0014C2  6FCA               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  4169  0014C4  2BC7               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  4170  0014C6  D002               	goto	u1764
  4171  0014C8                     u1765:
  4172  0014C8  90D8               	bcf	status,0,c
  4173  0014CA  33CA               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  4174  0014CC                     u1764:
  4175  0014CC  2FC7               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  4176  0014CE  D7FC               	goto	u1765
  4177  0014D0  0100               	movlb	0	; () banked
  4178  0014D2  A1CA               	btfss	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  4179  0014D4  D002               	goto	u1770
  4180  0014D6  0E01               	movlw	1
  4181  0014D8  D001               	goto	u1780
  4182  0014DA                     u1770:
  4183  0014DA  0E00               	movlw	0
  4184  0014DC                     u1780:
  4185  0014DC  6EDF               	movwf	indf2,c
  4186                           
  4187                           ; BSR set to: 0
  4188  0014DE  2BCB               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  4189  0014E0                     l42:
  4190                           
  4191                           ; BSR set to: 0
  4192                           
  4193                           ; BSR set to: 0
  4194  0014E0  51CB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4195  0014E2  6FC7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4196  0014E4  6BC8               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4197  0014E6  5037               	movf	_door_cnt,w,c
  4198  0014E8  5DC7               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4199  0014EA  51C8               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4200  0014EC  0A80               	xorlw	128
  4201  0014EE  6FC9               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4202  0014F0  5038               	movf	_door_cnt+1,w,c
  4203  0014F2  0A80               	xorlw	128
  4204  0014F4  59C9               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4205  0014F6  B0D8               	btfsc	status,0,c
  4206  0014F8  0012               	return	
  4207  0014FA  D7B4               	goto	l43
  4208  0014FC                     __end_of_C_DOOR_ReadSensors:
  4209                           	opt stack 0
  4210                           tblptru	equ	0xFF8
  4211                           tblptrh	equ	0xFF7
  4212                           tblptrl	equ	0xFF6
  4213                           tablat	equ	0xFF5
  4214                           prodh	equ	0xFF4
  4215                           prodl	equ	0xFF3
  4216                           indf0	equ	0xFEF
  4217                           postinc0	equ	0xFEE
  4218                           plusw0	equ	0xFEB
  4219                           fsr0h	equ	0xFEA
  4220                           fsr0l	equ	0xFE9
  4221                           wreg	equ	0xFE8
  4222                           indf1	equ	0xFE7
  4223                           postinc1	equ	0xFE6
  4224                           postdec1	equ	0xFE5
  4225                           fsr1h	equ	0xFE2
  4226                           fsr1l	equ	0xFE1
  4227                           indf2	equ	0xFDF
  4228                           postinc2	equ	0xFDE
  4229                           postdec2	equ	0xFDD
  4230                           plusw2	equ	0xFDB
  4231                           fsr2h	equ	0xFDA
  4232                           fsr2l	equ	0xFD9
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _D_UART_Init *****************
  4236 ;; Defined at:
  4237 ;;		line 166 in file "Drivers/UART_Driver.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;  name            2   13[BANK0 ] PTR const unsigned char 
  4240 ;;		 -> STR_11(2), 
  4241 ;;  baud            2   15[BANK0 ] unsigned int 
  4242 ;;  interrupts      1   17[BANK0 ] unsigned char 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4254 ;;      Params:         0       5       0       0       0       0       0       0       0
  4255 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4257 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4258 ;;Total ram usage:        5 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    4
  4261 ;; This function calls:
  4262 ;;		_D_UART_Enable
  4263 ;;		___lldiv
  4264 ;; This function is called by:
  4265 ;;		_main
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text20
  4270  001616                     __ptext20:
  4271                           	opt stack 0
  4272  001616                     _D_UART_Init:
  4273                           	opt stack 26
  4274                           
  4275                           ;UART_Driver.c: 168: deviceName = name;
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;incstack = 0
  4279  001616  C0D4  F0C4         	movff	D_UART_Init@name,_deviceName
  4280  00161A  C0D5  F0C5         	movff	D_UART_Init@name+1,_deviceName+1
  4281  00161E  0100               	movlb	0	; () banked
  4282  001620  51C4               	movf	_deviceName& (0+255),w,b
  4283  001622  11C5               	iorwf	(_deviceName+1)& (0+255),w,b
  4284  001624  A4D8               	btfss	status,2,c
  4285  001626  0E00               	movlw	low (__mediumconst shr (0+16))
  4286  001628  6FC6               	movwf	(_deviceName+2)& (0+255),b
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;UART_Driver.c: 169: readReady = 0;
  4290  00162A  0E00               	movlw	0
  4291  00162C  6E42               	movwf	_readReady,c
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;UART_Driver.c: 172: D_UART_Enable(0);
  4295  00162E  0E00               	movlw	0
  4296  001630  EC8F  F00C         	call	_D_UART_Enable
  4297                           
  4298                           ;UART_Driver.c: 175: RCSTAbits.FERR = 0;
  4299  001634  94AB               	bcf	4011,2,c	;volatile
  4300                           
  4301                           ;UART_Driver.c: 176: RCSTAbits.OERR = 0;
  4302  001636  92AB               	bcf	4011,1,c	;volatile
  4303                           
  4304                           ;UART_Driver.c: 177: RCREG = 0x00;
  4305  001638  0E00               	movlw	0
  4306  00163A  6EAE               	movwf	4014,c	;volatile
  4307                           
  4308                           ;UART_Driver.c: 180: TXSTAbits.TX9 = 0;
  4309  00163C  9CAC               	bcf	4012,6,c	;volatile
  4310                           
  4311                           ;UART_Driver.c: 181: TXSTAbits.SYNC = 0;
  4312  00163E  98AC               	bcf	4012,4,c	;volatile
  4313                           
  4314                           ;UART_Driver.c: 182: TXSTAbits.BRGH = 0;
  4315  001640  94AC               	bcf	4012,2,c	;volatile
  4316                           
  4317                           ;UART_Driver.c: 185: RCSTAbits.RX9 = 0;
  4318  001642  9CAB               	bcf	4011,6,c	;volatile
  4319                           
  4320                           ;UART_Driver.c: 188: BAUDCONbits.RXDTP = 0;
  4321  001644  9AB8               	bcf	4024,5,c	;volatile
  4322                           
  4323                           ;UART_Driver.c: 189: BAUDCONbits.TXCKP = 0;
  4324  001646  98B8               	bcf	4024,4,c	;volatile
  4325                           
  4326                           ;UART_Driver.c: 190: BAUDCONbits.BRG16 = 0;
  4327  001648  96B8               	bcf	4024,3,c	;volatile
  4328                           
  4329                           ;UART_Driver.c: 193: SPBRG = ((16000000UL/baud)/64)-1;
  4330  00164A  0E00               	movlw	0
  4331  00164C  0100               	movlb	0	; () banked
  4332  00164E  6FC7               	movwf	___lldiv@dividend& (0+255),b
  4333  001650  0E24               	movlw	36
  4334  001652  6FC8               	movwf	(___lldiv@dividend+1)& (0+255),b
  4335  001654  0EF4               	movlw	244
  4336  001656  6FC9               	movwf	(___lldiv@dividend+2)& (0+255),b
  4337  001658  0E00               	movlw	0
  4338  00165A  6FCA               	movwf	(___lldiv@dividend+3)& (0+255),b
  4339  00165C  C0D6  F0CB         	movff	D_UART_Init@baud,___lldiv@divisor
  4340  001660  C0D7  F0CC         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  4341  001664  6BCD               	clrf	(___lldiv@divisor+2)& (0+255),b
  4342  001666  6BCE               	clrf	(___lldiv@divisor+3)& (0+255),b
  4343  001668  ECC9  F00A         	call	___lldiv	;wreg free
  4344  00166C  0E07               	movlw	7
  4345  00166E  D006               	goto	u1940
  4346  001670                     u1945:
  4347  001670  0100               	movlb	0	; () banked
  4348  001672  90D8               	bcf	status,0,c
  4349  001674  33CA               	rrcf	(?___lldiv+3)& (0+255),f,b
  4350  001676  33C9               	rrcf	(?___lldiv+2)& (0+255),f,b
  4351  001678  33C8               	rrcf	(?___lldiv+1)& (0+255),f,b
  4352  00167A  33C7               	rrcf	?___lldiv& (0+255),f,b
  4353  00167C                     u1940:
  4354  00167C  2EE8               	decfsz	wreg,f,c
  4355  00167E  D7F8               	goto	u1945
  4356  001680  05C7               	decf	?___lldiv& (0+255),w,b
  4357  001682  6EAF               	movwf	4015,c	;volatile
  4358                           
  4359                           ;UART_Driver.c: 196: if (interrupts) {
  4360  001684  51D8               	movf	D_UART_Init@interrupts& (0+255),w,b
  4361  001686  B4D8               	btfsc	status,2,c
  4362  001688  0012               	return	
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;UART_Driver.c: 197: RCONbits.IPEN = 1;
  4366  00168A  8ED0               	bsf	4048,7,c	;volatile
  4367                           
  4368                           ;UART_Driver.c: 198: INTCONbits.GIEH = 1;
  4369  00168C  8EF2               	bsf	intcon,7,c	;volatile
  4370                           
  4371                           ;UART_Driver.c: 199: INTCONbits.GIEL = 1;
  4372  00168E  8CF2               	bsf	intcon,6,c	;volatile
  4373                           
  4374                           ;UART_Driver.c: 200: PIR1bits.RCIF = 0;
  4375  001690  9A9E               	bcf	3998,5,c	;volatile
  4376                           
  4377                           ;UART_Driver.c: 201: IPR1bits.RCIP = 1;
  4378  001692  8A9F               	bsf	3999,5,c	;volatile
  4379                           
  4380                           ;UART_Driver.c: 202: PIE1bits.RCIE = 1;
  4381  001694  8A9D               	bsf	3997,5,c	;volatile
  4382  001696  0012               	return	
  4383  001698                     __end_of_D_UART_Init:
  4384                           	opt stack 0
  4385                           tblptru	equ	0xFF8
  4386                           tblptrh	equ	0xFF7
  4387                           tblptrl	equ	0xFF6
  4388                           tablat	equ	0xFF5
  4389                           prodh	equ	0xFF4
  4390                           prodl	equ	0xFF3
  4391                           intcon	equ	0xFF2
  4392                           indf0	equ	0xFEF
  4393                           postinc0	equ	0xFEE
  4394                           plusw0	equ	0xFEB
  4395                           fsr0h	equ	0xFEA
  4396                           fsr0l	equ	0xFE9
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           postinc1	equ	0xFE6
  4400                           postdec1	equ	0xFE5
  4401                           fsr1h	equ	0xFE2
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           plusw2	equ	0xFDB
  4407                           fsr2h	equ	0xFDA
  4408                           fsr2l	equ	0xFD9
  4409                           status	equ	0xFD8
  4410                           
  4411 ;; *************** function ___lldiv *****************
  4412 ;; Defined at:
  4413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  4414 ;; Parameters:    Size  Location     Type
  4415 ;;  dividend        4    0[BANK0 ] unsigned long 
  4416 ;;  divisor         4    4[BANK0 ] unsigned long 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  quotient        4    8[BANK0 ] unsigned long 
  4419 ;;  counter         1   12[BANK0 ] unsigned char 
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  4    0[BANK0 ] unsigned long 
  4422 ;; Registers used:
  4423 ;;		wreg, status,2, status,0
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4429 ;;      Params:         0       8       0       0       0       0       0       0       0
  4430 ;;      Locals:         0       5       0       0       0       0       0       0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4432 ;;      Totals:         0      13       0       0       0       0       0       0       0
  4433 ;;Total ram usage:       13 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    3
  4436 ;; This function calls:
  4437 ;;		Nothing
  4438 ;; This function is called by:
  4439 ;;		_D_UART_Init
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text21
  4444  001592                     __ptext21:
  4445                           	opt stack 0
  4446  001592                     ___lldiv:
  4447                           	opt stack 26
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;incstack = 0
  4451  001592  0E00               	movlw	0
  4452  001594  0100               	movlb	0	; () banked
  4453  001596  6FCF               	movwf	___lldiv@quotient& (0+255),b
  4454  001598  0E00               	movlw	0
  4455  00159A  6FD0               	movwf	(___lldiv@quotient+1)& (0+255),b
  4456  00159C  0E00               	movlw	0
  4457  00159E  6FD1               	movwf	(___lldiv@quotient+2)& (0+255),b
  4458  0015A0  0E00               	movlw	0
  4459  0015A2  6FD2               	movwf	(___lldiv@quotient+3)& (0+255),b
  4460                           
  4461                           ; BSR set to: 0
  4462  0015A4  51CB               	movf	___lldiv@divisor& (0+255),w,b
  4463  0015A6  11CC               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4464  0015A8  11CD               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4465  0015AA  11CE               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4466  0015AC  B4D8               	btfsc	status,2,c
  4467  0015AE  D02A               	goto	l778
  4468                           
  4469                           ; BSR set to: 0
  4470  0015B0  0E01               	movlw	1
  4471  0015B2  6FD3               	movwf	___lldiv@counter& (0+255),b
  4472  0015B4  D006               	goto	l773
  4473  0015B6                     
  4474                           ; BSR set to: 0
  4475                           
  4476                           ; BSR set to: 0
  4477  0015B6  90D8               	bcf	status,0,c
  4478  0015B8  37CB               	rlcf	___lldiv@divisor& (0+255),f,b
  4479  0015BA  37CC               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4480  0015BC  37CD               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4481  0015BE  37CE               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4482  0015C0  2BD3               	incf	___lldiv@counter& (0+255),f,b
  4483  0015C2                     l773:
  4484                           
  4485                           ; BSR set to: 0
  4486                           
  4487                           ; BSR set to: 0
  4488  0015C2  AFCE               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4489  0015C4  D7F8               	goto	l774
  4490  0015C6                     u1920:
  4491                           
  4492                           ; BSR set to: 0
  4493                           
  4494                           ; BSR set to: 0
  4495                           
  4496                           ; BSR set to: 0
  4497  0015C6  90D8               	bcf	status,0,c
  4498  0015C8  37CF               	rlcf	___lldiv@quotient& (0+255),f,b
  4499  0015CA  37D0               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4500  0015CC  37D1               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4501  0015CE  37D2               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4502                           
  4503                           ; BSR set to: 0
  4504  0015D0  51CB               	movf	___lldiv@divisor& (0+255),w,b
  4505  0015D2  5DC7               	subwf	___lldiv@dividend& (0+255),w,b
  4506  0015D4  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4507  0015D6  59C8               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4508  0015D8  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4509  0015DA  59C9               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4510  0015DC  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4511  0015DE  59CA               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4512  0015E0  A0D8               	btfss	status,0,c
  4513  0015E2  D009               	goto	l777
  4514                           
  4515                           ; BSR set to: 0
  4516  0015E4  51CB               	movf	___lldiv@divisor& (0+255),w,b
  4517  0015E6  5FC7               	subwf	___lldiv@dividend& (0+255),f,b
  4518  0015E8  51CC               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4519  0015EA  5BC8               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4520  0015EC  51CD               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4521  0015EE  5BC9               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4522  0015F0  51CE               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4523  0015F2  5BCA               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4524                           
  4525                           ; BSR set to: 0
  4526  0015F4  81CF               	bsf	___lldiv@quotient& (0+255),0,b
  4527  0015F6                     l777:
  4528                           
  4529                           ; BSR set to: 0
  4530                           
  4531                           ; BSR set to: 0
  4532  0015F6  90D8               	bcf	status,0,c
  4533  0015F8  33CE               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4534  0015FA  33CD               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4535  0015FC  33CC               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4536  0015FE  33CB               	rrcf	___lldiv@divisor& (0+255),f,b
  4537                           
  4538                           ; BSR set to: 0
  4539  001600  2FD3               	decfsz	___lldiv@counter& (0+255),f,b
  4540  001602  D7E1               	goto	u1920
  4541  001604                     l778:
  4542                           
  4543                           ; BSR set to: 0
  4544                           
  4545                           ; BSR set to: 0
  4546  001604  C0CF  F0C7         	movff	___lldiv@quotient,?___lldiv
  4547  001608  C0D0  F0C8         	movff	___lldiv@quotient+1,?___lldiv+1
  4548  00160C  C0D1  F0C9         	movff	___lldiv@quotient+2,?___lldiv+2
  4549  001610  C0D2  F0CA         	movff	___lldiv@quotient+3,?___lldiv+3
  4550                           
  4551                           ; BSR set to: 0
  4552  001614  0012               	return		;funcret
  4553  001616                     __end_of___lldiv:
  4554                           	opt stack 0
  4555                           tblptru	equ	0xFF8
  4556                           tblptrh	equ	0xFF7
  4557                           tblptrl	equ	0xFF6
  4558                           tablat	equ	0xFF5
  4559                           prodh	equ	0xFF4
  4560                           prodl	equ	0xFF3
  4561                           intcon	equ	0xFF2
  4562                           indf0	equ	0xFEF
  4563                           postinc0	equ	0xFEE
  4564                           plusw0	equ	0xFEB
  4565                           fsr0h	equ	0xFEA
  4566                           fsr0l	equ	0xFE9
  4567                           wreg	equ	0xFE8
  4568                           indf1	equ	0xFE7
  4569                           postinc1	equ	0xFE6
  4570                           postdec1	equ	0xFE5
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           plusw2	equ	0xFDB
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _D_UART_Enable *****************
  4582 ;; Defined at:
  4583 ;;		line 242 in file "Drivers/UART_Driver.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  enable          1    wreg     unsigned char 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  enable          1    0[BANK0 ] unsigned char 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0
  4598 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4599 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4600 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4601 ;;Total ram usage:        1 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    3
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_D_UART_Init
  4608 ;;		_main
  4609 ;; This function uses a non-reentrant model
  4610 ;;
  4611                           
  4612                           	psect	text22
  4613  00191E                     __ptext22:
  4614                           	opt stack 0
  4615  00191E                     _D_UART_Enable:
  4616                           	opt stack 26
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;incstack = 0
  4620                           ;D_UART_Enable@enable stored from wreg
  4621  00191E  0100               	movlb	0	; () banked
  4622  001920  6FC7               	movwf	D_UART_Enable@enable& (0+255),b
  4623                           
  4624                           ;UART_Driver.c: 243: if(enable) {
  4625  001922  0100               	movlb	0	; () banked
  4626  001924  51C7               	movf	D_UART_Enable@enable& (0+255),w,b
  4627  001926  B4D8               	btfsc	status,2,c
  4628  001928  D006               	goto	l161
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;UART_Driver.c: 244: TRISCbits.TRISC7 = 0;
  4632  00192A  9E94               	bcf	3988,7,c	;volatile
  4633                           
  4634                           ;UART_Driver.c: 245: TRISCbits.TRISC6 = 1;
  4635  00192C  8C94               	bsf	3988,6,c	;volatile
  4636                           
  4637                           ;UART_Driver.c: 246: TXSTAbits.TXEN = 1;
  4638  00192E  8AAC               	bsf	4012,5,c	;volatile
  4639                           
  4640                           ;UART_Driver.c: 247: RCSTAbits.CREN = 1;
  4641  001930  88AB               	bsf	4011,4,c	;volatile
  4642                           
  4643                           ;UART_Driver.c: 248: RCSTAbits.SPEN = 1;
  4644  001932  8EAB               	bsf	4011,7,c	;volatile
  4645                           
  4646                           ;UART_Driver.c: 249: } else {
  4647  001934  0012               	return	
  4648  001936                     l161:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;UART_Driver.c: 250: TRISCbits.TRISC7 = 0;
  4652  001936  9E94               	bcf	3988,7,c	;volatile
  4653                           
  4654                           ;UART_Driver.c: 251: TRISCbits.TRISC6 = 0;
  4655  001938  9C94               	bcf	3988,6,c	;volatile
  4656                           
  4657                           ;UART_Driver.c: 252: TXSTAbits.TXEN = 0;
  4658  00193A  9AAC               	bcf	4012,5,c	;volatile
  4659                           
  4660                           ;UART_Driver.c: 253: RCSTAbits.CREN = 0;
  4661  00193C  98AB               	bcf	4011,4,c	;volatile
  4662                           
  4663                           ;UART_Driver.c: 254: RCSTAbits.SPEN = 0;
  4664  00193E  9EAB               	bcf	4011,7,c	;volatile
  4665  001940  0012               	return	
  4666  001942                     __end_of_D_UART_Enable:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           indf0	equ	0xFEF
  4676                           postinc0	equ	0xFEE
  4677                           plusw0	equ	0xFEB
  4678                           fsr0h	equ	0xFEA
  4679                           fsr0l	equ	0xFE9
  4680                           wreg	equ	0xFE8
  4681                           indf1	equ	0xFE7
  4682                           postinc1	equ	0xFE6
  4683                           postdec1	equ	0xFE5
  4684                           fsr1h	equ	0xFE2
  4685                           fsr1l	equ	0xFE1
  4686                           indf2	equ	0xFDF
  4687                           postinc2	equ	0xFDE
  4688                           postdec2	equ	0xFDD
  4689                           plusw2	equ	0xFDB
  4690                           fsr2h	equ	0xFDA
  4691                           fsr2l	equ	0xFD9
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function _D_TMR1_Init *****************
  4695 ;; Defined at:
  4696 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg, status,2, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0
  4711 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4713 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4714 ;;Total ram usage:        0 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    4
  4717 ;; This function calls:
  4718 ;;		_D_TMR1_Enable
  4719 ;; This function is called by:
  4720 ;;		_main
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text23
  4725  001988                     __ptext23:
  4726                           	opt stack 0
  4727  001988                     _D_TMR1_Init:
  4728                           	opt stack 26
  4729                           
  4730                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;incstack = 0
  4734  001988  0E00               	movlw	0
  4735  00198A  ECF2  F00C         	call	_D_TMR1_Enable
  4736                           
  4737                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  4738  00198E  8ECD               	bsf	4045,7,c	;volatile
  4739                           
  4740                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  4741  001990  9CCD               	bcf	4045,6,c	;volatile
  4742                           
  4743                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  4744  001992  0ECF               	movlw	-49
  4745  001994  16CD               	andwf	4045,f,c	;volatile
  4746                           
  4747                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  4748  001996  96CD               	bcf	4045,3,c	;volatile
  4749                           
  4750                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  4751  001998  92CD               	bcf	4045,1,c	;volatile
  4752                           
  4753                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  4754  00199A  8ED0               	bsf	4048,7,c	;volatile
  4755                           
  4756                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  4757  00199C  8EF2               	bsf	intcon,7,c	;volatile
  4758                           
  4759                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  4760  00199E  8CF2               	bsf	intcon,6,c	;volatile
  4761                           
  4762                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  4763  0019A0  909E               	bcf	3998,0,c	;volatile
  4764                           
  4765                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  4766  0019A2  909F               	bcf	3999,0,c	;volatile
  4767                           
  4768                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  4769  0019A4  809D               	bsf	3997,0,c	;volatile
  4770  0019A6  0012               	return		;funcret
  4771  0019A8                     __end_of_D_TMR1_Init:
  4772                           	opt stack 0
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           indf0	equ	0xFEF
  4781                           postinc0	equ	0xFEE
  4782                           plusw0	equ	0xFEB
  4783                           fsr0h	equ	0xFEA
  4784                           fsr0l	equ	0xFE9
  4785                           wreg	equ	0xFE8
  4786                           indf1	equ	0xFE7
  4787                           postinc1	equ	0xFE6
  4788                           postdec1	equ	0xFE5
  4789                           fsr1h	equ	0xFE2
  4790                           fsr1l	equ	0xFE1
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           plusw2	equ	0xFDB
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _D_TMR1_Enable *****************
  4800 ;; Defined at:
  4801 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  enable          1    wreg     unsigned char 
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;  enable          1    0[BANK0 ] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  1    wreg      void 
  4808 ;; Registers used:
  4809 ;;		wreg, status,2
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0
  4816 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4818 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4819 ;;Total ram usage:        1 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    3
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_D_TMR1_Init
  4826 ;;		_run
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text24
  4831  0019E4                     __ptext24:
  4832                           	opt stack 0
  4833  0019E4                     _D_TMR1_Enable:
  4834                           	opt stack 26
  4835                           
  4836                           ;incstack = 0
  4837                           ;D_TMR1_Enable@enable stored from wreg
  4838  0019E4  0100               	movlb	0	; () banked
  4839  0019E6  6FC7               	movwf	D_TMR1_Enable@enable& (0+255),b
  4840                           
  4841                           ;TMR1_Driver.c: 53: if (enable) {
  4842  0019E8  0100               	movlb	0	; () banked
  4843  0019EA  51C7               	movf	D_TMR1_Enable@enable& (0+255),w,b
  4844  0019EC  B4D8               	btfsc	status,2,c
  4845  0019EE  D002               	goto	l239
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  4849  0019F0  80CD               	bsf	4045,0,c	;volatile
  4850                           
  4851                           ;TMR1_Driver.c: 55: } else {
  4852  0019F2  0012               	return	
  4853  0019F4                     l239:
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  4857  0019F4  90CD               	bcf	4045,0,c	;volatile
  4858  0019F6  0012               	return	
  4859  0019F8                     __end_of_D_TMR1_Enable:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           indf0	equ	0xFEF
  4869                           postinc0	equ	0xFEE
  4870                           plusw0	equ	0xFEB
  4871                           fsr0h	equ	0xFEA
  4872                           fsr0l	equ	0xFE9
  4873                           wreg	equ	0xFE8
  4874                           indf1	equ	0xFE7
  4875                           postinc1	equ	0xFE6
  4876                           postdec1	equ	0xFE5
  4877                           fsr1h	equ	0xFE2
  4878                           fsr1l	equ	0xFE1
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           plusw2	equ	0xFDB
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _D_TMR0_Init *****************
  4888 ;; Defined at:
  4889 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;		None
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4903 ;;      Params:         0       0       0       0       0       0       0       0       0
  4904 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4906 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4907 ;;Total ram usage:        0 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    4
  4910 ;; This function calls:
  4911 ;;		_D_TMR0_Enable
  4912 ;; This function is called by:
  4913 ;;		_main
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text25
  4918  001942                     __ptext25:
  4919                           	opt stack 0
  4920  001942                     _D_TMR0_Init:
  4921                           	opt stack 26
  4922                           
  4923                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;incstack = 0
  4927  001942  0E00               	movlw	0
  4928  001944  ECFC  F00C         	call	_D_TMR0_Enable
  4929                           
  4930                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  4931  001948  9CD5               	bcf	4053,6,c	;volatile
  4932                           
  4933                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  4934  00194A  9AD5               	bcf	4053,5,c	;volatile
  4935                           
  4936                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  4937  00194C  98D5               	bcf	4053,4,c	;volatile
  4938                           
  4939                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  4940  00194E  96D5               	bcf	4053,3,c	;volatile
  4941                           
  4942                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  4943  001950  50D5               	movf	4053,w,c	;volatile
  4944  001952  0BF8               	andlw	-8
  4945  001954  0902               	iorlw	2
  4946  001956  6ED5               	movwf	4053,c	;volatile
  4947                           
  4948                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  4949  001958  8ED0               	bsf	4048,7,c	;volatile
  4950                           
  4951                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  4952  00195A  8EF2               	bsf	intcon,7,c	;volatile
  4953                           
  4954                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  4955  00195C  8CF2               	bsf	intcon,6,c	;volatile
  4956                           
  4957                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  4958  00195E  94F2               	bcf	intcon,2,c	;volatile
  4959                           
  4960                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  4961  001960  94F1               	bcf	intcon2,2,c	;volatile
  4962                           
  4963                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  4964  001962  8AF2               	bsf	intcon,5,c	;volatile
  4965  001964  0012               	return		;funcret
  4966  001966                     __end_of_D_TMR0_Init:
  4967                           	opt stack 0
  4968                           tblptru	equ	0xFF8
  4969                           tblptrh	equ	0xFF7
  4970                           tblptrl	equ	0xFF6
  4971                           tablat	equ	0xFF5
  4972                           prodh	equ	0xFF4
  4973                           prodl	equ	0xFF3
  4974                           intcon	equ	0xFF2
  4975                           intcon2	equ	0xFF1
  4976                           indf0	equ	0xFEF
  4977                           postinc0	equ	0xFEE
  4978                           plusw0	equ	0xFEB
  4979                           fsr0h	equ	0xFEA
  4980                           fsr0l	equ	0xFE9
  4981                           wreg	equ	0xFE8
  4982                           indf1	equ	0xFE7
  4983                           postinc1	equ	0xFE6
  4984                           postdec1	equ	0xFE5
  4985                           fsr1h	equ	0xFE2
  4986                           fsr1l	equ	0xFE1
  4987                           indf2	equ	0xFDF
  4988                           postinc2	equ	0xFDE
  4989                           postdec2	equ	0xFDD
  4990                           plusw2	equ	0xFDB
  4991                           fsr2h	equ	0xFDA
  4992                           fsr2l	equ	0xFD9
  4993                           status	equ	0xFD8
  4994                           
  4995 ;; *************** function _D_TMR0_Enable *****************
  4996 ;; Defined at:
  4997 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  4998 ;; Parameters:    Size  Location     Type
  4999 ;;  enable          1    wreg     unsigned char 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  enable          1    0[BANK0 ] unsigned char 
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5011 ;;      Params:         0       0       0       0       0       0       0       0       0
  5012 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5014 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5015 ;;Total ram usage:        1 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    3
  5018 ;; This function calls:
  5019 ;;		Nothing
  5020 ;; This function is called by:
  5021 ;;		_D_TMR0_Init
  5022 ;;		_initDoors
  5023 ;; This function uses a non-reentrant model
  5024 ;;
  5025                           
  5026                           	psect	text26
  5027  0019F8                     __ptext26:
  5028                           	opt stack 0
  5029  0019F8                     _D_TMR0_Enable:
  5030                           	opt stack 25
  5031                           
  5032                           ;incstack = 0
  5033                           ;D_TMR0_Enable@enable stored from wreg
  5034  0019F8  0100               	movlb	0	; () banked
  5035  0019FA  6FC7               	movwf	D_TMR0_Enable@enable& (0+255),b
  5036                           
  5037                           ;TMR0_Driver.c: 54: if (enable) {
  5038  0019FC  0100               	movlb	0	; () banked
  5039  0019FE  51C7               	movf	D_TMR0_Enable@enable& (0+255),w,b
  5040  001A00  B4D8               	btfsc	status,2,c
  5041  001A02  D002               	goto	l198
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  5045  001A04  8ED5               	bsf	4053,7,c	;volatile
  5046                           
  5047                           ;TMR0_Driver.c: 56: } else {
  5048  001A06  0012               	return	
  5049  001A08                     l198:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  5053  001A08  9ED5               	bcf	4053,7,c	;volatile
  5054  001A0A  0012               	return	
  5055  001A0C                     __end_of_D_TMR0_Enable:
  5056                           	opt stack 0
  5057                           tblptru	equ	0xFF8
  5058                           tblptrh	equ	0xFF7
  5059                           tblptrl	equ	0xFF6
  5060                           tablat	equ	0xFF5
  5061                           prodh	equ	0xFF4
  5062                           prodl	equ	0xFF3
  5063                           intcon	equ	0xFF2
  5064                           intcon2	equ	0xFF1
  5065                           indf0	equ	0xFEF
  5066                           postinc0	equ	0xFEE
  5067                           plusw0	equ	0xFEB
  5068                           fsr0h	equ	0xFEA
  5069                           fsr0l	equ	0xFE9
  5070                           wreg	equ	0xFE8
  5071                           indf1	equ	0xFE7
  5072                           postinc1	equ	0xFE6
  5073                           postdec1	equ	0xFE5
  5074                           fsr1h	equ	0xFE2
  5075                           fsr1l	equ	0xFE1
  5076                           indf2	equ	0xFDF
  5077                           postinc2	equ	0xFDE
  5078                           postdec2	equ	0xFDD
  5079                           plusw2	equ	0xFDB
  5080                           fsr2h	equ	0xFDA
  5081                           fsr2l	equ	0xFD9
  5082                           status	equ	0xFD8
  5083                           
  5084 ;; *************** function _D_PWM_Init *****************
  5085 ;; Defined at:
  5086 ;;		line 31 in file "Drivers/PWM_Driver.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;                  1    wreg      void 
  5093 ;; Registers used:
  5094 ;;		wreg, status,2
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5100 ;;      Params:         0       0       0       0       0       0       0       0       0
  5101 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5103 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5104 ;;Total ram usage:        0 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    3
  5107 ;; This function calls:
  5108 ;;		Nothing
  5109 ;; This function is called by:
  5110 ;;		_main
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           	psect	text27
  5115  0019A8                     __ptext27:
  5116                           	opt stack 0
  5117  0019A8                     _D_PWM_Init:
  5118                           	opt stack 27
  5119                           
  5120                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;incstack = 0
  5124  0019A8  68CB               	setf	4043,c	;volatile
  5125                           
  5126                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  5127  0019AA  94CA               	bcf	4042,2,c	;volatile
  5128                           
  5129                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  5130  0019AC  50CA               	movf	4042,w,c	;volatile
  5131  0019AE  0BFC               	andlw	-4
  5132  0019B0  0901               	iorlw	1
  5133  0019B2  6ECA               	movwf	4042,c	;volatile
  5134                           
  5135                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  5136  0019B4  96CA               	bcf	4042,3,c	;volatile
  5137  0019B6  98CA               	bcf	4042,4,c	;volatile
  5138  0019B8  9ACA               	bcf	4042,5,c	;volatile
  5139  0019BA  9CCA               	bcf	4042,6,c	;volatile
  5140                           
  5141                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  5142  0019BC  0E1F               	movlw	31
  5143  0019BE  6EBE               	movwf	4030,c	;volatile
  5144                           
  5145                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  5146  0019C0  0ECF               	movlw	-49
  5147  0019C2  16BD               	andwf	4029,f,c	;volatile
  5148  0019C4  0012               	return		;funcret
  5149  0019C6                     __end_of_D_PWM_Init:
  5150                           	opt stack 0
  5151                           tblptru	equ	0xFF8
  5152                           tblptrh	equ	0xFF7
  5153                           tblptrl	equ	0xFF6
  5154                           tablat	equ	0xFF5
  5155                           prodh	equ	0xFF4
  5156                           prodl	equ	0xFF3
  5157                           intcon	equ	0xFF2
  5158                           intcon2	equ	0xFF1
  5159                           indf0	equ	0xFEF
  5160                           postinc0	equ	0xFEE
  5161                           plusw0	equ	0xFEB
  5162                           fsr0h	equ	0xFEA
  5163                           fsr0l	equ	0xFE9
  5164                           wreg	equ	0xFE8
  5165                           indf1	equ	0xFE7
  5166                           postinc1	equ	0xFE6
  5167                           postdec1	equ	0xFE5
  5168                           fsr1h	equ	0xFE2
  5169                           fsr1l	equ	0xFE1
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           postdec2	equ	0xFDD
  5173                           plusw2	equ	0xFDB
  5174                           fsr2h	equ	0xFDA
  5175                           fsr2l	equ	0xFD9
  5176                           status	equ	0xFD8
  5177                           
  5178 ;; *************** function _D_PORT_Init *****************
  5179 ;; Defined at:
  5180 ;;		line 32 in file "Drivers/PORT_Driver.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;		None
  5185 ;; Return value:  Size  Location     Type
  5186 ;;                  1    wreg      void 
  5187 ;; Registers used:
  5188 ;;		wreg, status,2
  5189 ;; Tracked objects:
  5190 ;;		On entry : 0/0
  5191 ;;		On exit  : 0/0
  5192 ;;		Unchanged: 0/0
  5193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5194 ;;      Params:         0       0       0       0       0       0       0       0       0
  5195 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5197 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5198 ;;Total ram usage:        0 bytes
  5199 ;; Hardware stack levels used:    1
  5200 ;; Hardware stack levels required when called:    3
  5201 ;; This function calls:
  5202 ;;		Nothing
  5203 ;; This function is called by:
  5204 ;;		_main
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text28
  5209  0019C6                     __ptext28:
  5210                           	opt stack 0
  5211  0019C6                     _D_PORT_Init:
  5212                           	opt stack 27
  5213                           
  5214                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  5215                           
  5216                           ;incstack = 0
  5217  0019C6  0E00               	movlw	0
  5218  0019C8  6E92               	movwf	3986,c	;volatile
  5219  0019CA  0E00               	movlw	0
  5220  0019CC  6E80               	movwf	3968,c	;volatile
  5221                           
  5222                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  5223  0019CE  0E00               	movlw	0
  5224  0019D0  6E93               	movwf	3987,c	;volatile
  5225  0019D2  0E00               	movlw	0
  5226  0019D4  6E81               	movwf	3969,c	;volatile
  5227                           
  5228                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  5229  0019D6  0E00               	movlw	0
  5230  0019D8  6E94               	movwf	3988,c	;volatile
  5231  0019DA  0E00               	movlw	0
  5232  0019DC  6E82               	movwf	3970,c	;volatile
  5233                           
  5234                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  5235  0019DE  0E0F               	movlw	15
  5236  0019E0  6EC1               	movwf	4033,c	;volatile
  5237  0019E2  0012               	return		;funcret
  5238  0019E4                     __end_of_D_PORT_Init:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           intcon2	equ	0xFF1
  5248                           indf0	equ	0xFEF
  5249                           postinc0	equ	0xFEE
  5250                           plusw0	equ	0xFEB
  5251                           fsr0h	equ	0xFEA
  5252                           fsr0l	equ	0xFE9
  5253                           wreg	equ	0xFE8
  5254                           indf1	equ	0xFE7
  5255                           postinc1	equ	0xFE6
  5256                           postdec1	equ	0xFE5
  5257                           fsr1h	equ	0xFE2
  5258                           fsr1l	equ	0xFE1
  5259                           indf2	equ	0xFDF
  5260                           postinc2	equ	0xFDE
  5261                           postdec2	equ	0xFDD
  5262                           plusw2	equ	0xFDB
  5263                           fsr2h	equ	0xFDA
  5264                           fsr2l	equ	0xFD9
  5265                           status	equ	0xFD8
  5266                           
  5267 ;; *************** function _LowISR *****************
  5268 ;; Defined at:
  5269 ;;		line 222 in file "main.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2, status,0
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5283 ;;      Params:         0       0       0       0       0       0       0       0       0
  5284 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5285 ;;      Temps:         21       0       0       0       0       0       0       0       0
  5286 ;;      Totals:        21       0       0       0       0       0       0       0       0
  5287 ;;Total ram usage:       21 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    2
  5290 ;; This function calls:
  5291 ;;		Nothing
  5292 ;; This function is called by:
  5293 ;;		Interrupt level 1
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	intcodelo
  5298  000018                     __pintcodelo:
  5299                           	opt stack 0
  5300  000018                     _LowISR:
  5301                           	opt stack 23
  5302                           
  5303                           ;incstack = 0
  5304  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  5305  00001A  CFD8 F014          	movff	status,??_LowISR
  5306  00001E  CFE8 F015          	movff	wreg,??_LowISR+1
  5307  000022  CFE0 F016          	movff	bsr,??_LowISR+2
  5308  000026  CFFA F017          	movff	pclath,??_LowISR+3
  5309  00002A  CFFB F018          	movff	pclatu,??_LowISR+4
  5310  00002E  CFE9 F019          	movff	fsr0l,??_LowISR+5
  5311  000032  CFEA F01A          	movff	fsr0h,??_LowISR+6
  5312  000036  CFE1 F01B          	movff	fsr1l,??_LowISR+7
  5313  00003A  CFE2 F01C          	movff	fsr1h,??_LowISR+8
  5314  00003E  CFD9 F01D          	movff	fsr2l,??_LowISR+9
  5315  000042  CFDA F01E          	movff	fsr2h,??_LowISR+10
  5316  000046  CFF3 F01F          	movff	prodl,??_LowISR+11
  5317  00004A  CFF4 F020          	movff	prodh,??_LowISR+12
  5318  00004E  CFF6 F021          	movff	tblptrl,??_LowISR+13
  5319  000052  CFF7 F022          	movff	tblptrh,??_LowISR+14
  5320  000056  CFF8 F023          	movff	tblptru,??_LowISR+15
  5321  00005A  CFF5 F024          	movff	tablat,??_LowISR+16
  5322  00005E  C044  F025         	movff	btemp,??_LowISR+17
  5323  000062  C045  F026         	movff	btemp+1,??_LowISR+18
  5324  000066  C046  F027         	movff	btemp+2,??_LowISR+19
  5325  00006A  C047  F028         	movff	btemp+3,??_LowISR+20
  5326                           
  5327                           ;main.c: 224: if (INTCONbits.TMR0IF) {
  5328  00006E  A4F2               	btfss	intcon,2,c	;volatile
  5329  000070  D003               	goto	i1l372
  5330                           
  5331                           ;main.c: 225: INTCONbits.TMR0IF = 0;
  5332  000072  94F2               	bcf	intcon,2,c	;volatile
  5333                           
  5334                           ;main.c: 226: tick = 1;
  5335  000074  0E01               	movlw	1
  5336  000076  6E3E               	movwf	_tick,c
  5337  000078                     i1l372:
  5338                           
  5339                           ;main.c: 227: }
  5340                           ;main.c: 230: if (PIR1bits.TMR1IF) {
  5341  000078  A09E               	btfss	3998,0,c	;volatile
  5342  00007A  D00C               	goto	i1l373
  5343                           
  5344                           ;main.c: 231: TMR1H = 0x5E;
  5345  00007C  0E5E               	movlw	94
  5346  00007E  6ECF               	movwf	4047,c	;volatile
  5347                           
  5348                           ;main.c: 232: TMR1L = 0x00;
  5349  000080  0E00               	movlw	0
  5350  000082  6ECE               	movwf	4046,c	;volatile
  5351                           
  5352                           ;main.c: 234: if (lockDelayCnt < 100-1) {
  5353  000084  0E63               	movlw	99
  5354  000086  6041               	cpfslt	_lockDelayCnt,c
  5355  000088  D002               	goto	i1l374
  5356                           
  5357                           ;main.c: 235: lockDelayCnt++;
  5358  00008A  2A41               	incf	_lockDelayCnt,f,c
  5359                           
  5360                           ;main.c: 236: } else {
  5361  00008C  D002               	goto	i1l375
  5362  00008E                     i1l374:
  5363                           
  5364                           ;main.c: 237: lock = 1;
  5365  00008E  0E01               	movlw	1
  5366  000090  6E3D               	movwf	_lock,c
  5367  000092                     i1l375:
  5368                           
  5369                           ;main.c: 238: }
  5370                           ;main.c: 240: PIR1bits.TMR1IF = 0;
  5371  000092  909E               	bcf	3998,0,c	;volatile
  5372  000094                     i1l373:
  5373  000094  C028  F047         	movff	??_LowISR+20,btemp+3
  5374  000098  C027  F046         	movff	??_LowISR+19,btemp+2
  5375  00009C  C026  F045         	movff	??_LowISR+18,btemp+1
  5376  0000A0  C025  F044         	movff	??_LowISR+17,btemp
  5377  0000A4  C024  FFF5         	movff	??_LowISR+16,tablat
  5378  0000A8  C023  FFF8         	movff	??_LowISR+15,tblptru
  5379  0000AC  C022  FFF7         	movff	??_LowISR+14,tblptrh
  5380  0000B0  C021  FFF6         	movff	??_LowISR+13,tblptrl
  5381  0000B4  C020  FFF4         	movff	??_LowISR+12,prodh
  5382  0000B8  C01F  FFF3         	movff	??_LowISR+11,prodl
  5383  0000BC  C01E  FFDA         	movff	??_LowISR+10,fsr2h
  5384  0000C0  C01D  FFD9         	movff	??_LowISR+9,fsr2l
  5385  0000C4  C01C  FFE2         	movff	??_LowISR+8,fsr1h
  5386  0000C8  C01B  FFE1         	movff	??_LowISR+7,fsr1l
  5387  0000CC  C01A  FFEA         	movff	??_LowISR+6,fsr0h
  5388  0000D0  C019  FFE9         	movff	??_LowISR+5,fsr0l
  5389  0000D4  C018  FFFB         	movff	??_LowISR+4,pclatu
  5390  0000D8  C017  FFFA         	movff	??_LowISR+3,pclath
  5391  0000DC  C016  FFE0         	movff	??_LowISR+2,bsr
  5392  0000E0  C015  FFE8         	movff	??_LowISR+1,wreg
  5393  0000E4  C014  FFD8         	movff	??_LowISR,status
  5394  0000E8  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  5395  0000EA  0010               	retfie	
  5396  0000EC                     __end_of_LowISR:
  5397                           	opt stack 0
  5398                           pclatu	equ	0xFFB
  5399                           pclath	equ	0xFFA
  5400                           tblptru	equ	0xFF8
  5401                           tblptrh	equ	0xFF7
  5402                           tblptrl	equ	0xFF6
  5403                           tablat	equ	0xFF5
  5404                           prodh	equ	0xFF4
  5405                           prodl	equ	0xFF3
  5406                           intcon	equ	0xFF2
  5407                           intcon2	equ	0xFF1
  5408                           indf0	equ	0xFEF
  5409                           postinc0	equ	0xFEE
  5410                           plusw0	equ	0xFEB
  5411                           fsr0h	equ	0xFEA
  5412                           fsr0l	equ	0xFE9
  5413                           wreg	equ	0xFE8
  5414                           indf1	equ	0xFE7
  5415                           postinc1	equ	0xFE6
  5416                           postdec1	equ	0xFE5
  5417                           fsr1h	equ	0xFE2
  5418                           fsr1l	equ	0xFE1
  5419                           bsr	equ	0xFE0
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           postdec2	equ	0xFDD
  5423                           plusw2	equ	0xFDB
  5424                           fsr2h	equ	0xFDA
  5425                           fsr2l	equ	0xFD9
  5426                           status	equ	0xFD8
  5427                           
  5428 ;; *************** function _HighISR *****************
  5429 ;; Defined at:
  5430 ;;		line 270 in file "Drivers/UART_Driver.c"
  5431 ;; Parameters:    Size  Location     Type
  5432 ;;		None
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;		None
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      void 
  5437 ;; Registers used:
  5438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0
  5445 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5446 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5447 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5448 ;;Total ram usage:       18 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    1
  5451 ;; This function calls:
  5452 ;;		_fillDataBuffer
  5453 ;; This function is called by:
  5454 ;;		Interrupt level 2
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	intcode
  5459  000008                     __pintcode:
  5460                           	opt stack 0
  5461  000008                     _HighISR:
  5462                           	opt stack 23
  5463                           
  5464                           ;incstack = 0
  5465  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5466  00000A  ED20  F009         	call	int_func,f	;refresh shadow registers
  5467                           pclatu	equ	0xFFB
  5468                           pclath	equ	0xFFA
  5469                           tblptru	equ	0xFF8
  5470                           tblptrh	equ	0xFF7
  5471                           tblptrl	equ	0xFF6
  5472                           tablat	equ	0xFF5
  5473                           prodh	equ	0xFF4
  5474                           prodl	equ	0xFF3
  5475                           intcon	equ	0xFF2
  5476                           intcon2	equ	0xFF1
  5477                           indf0	equ	0xFEF
  5478                           postinc0	equ	0xFEE
  5479                           plusw0	equ	0xFEB
  5480                           fsr0h	equ	0xFEA
  5481                           fsr0l	equ	0xFE9
  5482                           wreg	equ	0xFE8
  5483                           indf1	equ	0xFE7
  5484                           postinc1	equ	0xFE6
  5485                           postdec1	equ	0xFE5
  5486                           fsr1h	equ	0xFE2
  5487                           fsr1l	equ	0xFE1
  5488                           bsr	equ	0xFE0
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           postdec2	equ	0xFDD
  5492                           plusw2	equ	0xFDB
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497                           	psect	intcode_body
  5498  001240                     __pintcode_body:
  5499                           	opt stack 23
  5500  001240                     int_func:
  5501                           	opt stack 23
  5502  001240  0006               	pop		; remove dummy address from shadow register refresh
  5503  001242  CFFA F002          	movff	pclath,??_HighISR
  5504  001246  CFFB F003          	movff	pclatu,??_HighISR+1
  5505  00124A  CFE9 F004          	movff	fsr0l,??_HighISR+2
  5506  00124E  CFEA F005          	movff	fsr0h,??_HighISR+3
  5507  001252  CFE1 F006          	movff	fsr1l,??_HighISR+4
  5508  001256  CFE2 F007          	movff	fsr1h,??_HighISR+5
  5509  00125A  CFD9 F008          	movff	fsr2l,??_HighISR+6
  5510  00125E  CFDA F009          	movff	fsr2h,??_HighISR+7
  5511  001262  CFF3 F00A          	movff	prodl,??_HighISR+8
  5512  001266  CFF4 F00B          	movff	prodh,??_HighISR+9
  5513  00126A  CFF6 F00C          	movff	tblptrl,??_HighISR+10
  5514  00126E  CFF7 F00D          	movff	tblptrh,??_HighISR+11
  5515  001272  CFF8 F00E          	movff	tblptru,??_HighISR+12
  5516  001276  CFF5 F00F          	movff	tablat,??_HighISR+13
  5517  00127A  C044  F010         	movff	btemp,??_HighISR+14
  5518  00127E  C045  F011         	movff	btemp+1,??_HighISR+15
  5519  001282  C046  F012         	movff	btemp+2,??_HighISR+16
  5520  001286  C047  F013         	movff	btemp+3,??_HighISR+17
  5521                           
  5522                           ;UART_Driver.c: 271: if (PIR1bits.RC1IF) {
  5523  00128A  AA9E               	btfss	3998,5,c	;volatile
  5524  00128C  D00E               	goto	i2l176
  5525                           
  5526                           ;UART_Driver.c: 272: PIR1bits.RC1IF = 0;
  5527  00128E  9A9E               	bcf	3998,5,c	;volatile
  5528                           
  5529                           ;UART_Driver.c: 275: if(RCSTAbits.FERR == 1) {
  5530  001290  A4AB               	btfss	4011,2,c	;volatile
  5531  001292  D003               	goto	i2l177
  5532                           
  5533                           ;UART_Driver.c: 276: RCREG = 0x00;
  5534  001294  0E00               	movlw	0
  5535  001296  6EAE               	movwf	4014,c	;volatile
  5536                           
  5537                           ;UART_Driver.c: 277: return;
  5538  001298  D008               	goto	i2l176
  5539  00129A                     i2l177:
  5540                           
  5541                           ;UART_Driver.c: 278: }
  5542                           ;UART_Driver.c: 280: if(RCSTAbits.OERR == 1) {
  5543  00129A  A2AB               	btfss	4011,1,c	;volatile
  5544  00129C  D003               	goto	i2l179
  5545                           
  5546                           ;UART_Driver.c: 281: RCSTAbits.CREN = 0;
  5547  00129E  98AB               	bcf	4011,4,c	;volatile
  5548                           
  5549                           ;UART_Driver.c: 282: RCSTAbits.CREN = 1;
  5550  0012A0  88AB               	bsf	4011,4,c	;volatile
  5551                           
  5552                           ;UART_Driver.c: 283: return;
  5553  0012A2  D003               	goto	i2l176
  5554  0012A4                     i2l179:
  5555                           
  5556                           ;UART_Driver.c: 284: }
  5557                           ;UART_Driver.c: 285: fillDataBuffer(RCREG);
  5558  0012A4  50AE               	movf	4014,w,c	;volatile
  5559  0012A6  EC61  F006         	call	_fillDataBuffer
  5560  0012AA                     i2l176:
  5561  0012AA  C013  F047         	movff	??_HighISR+17,btemp+3
  5562  0012AE  C012  F046         	movff	??_HighISR+16,btemp+2
  5563  0012B2  C011  F045         	movff	??_HighISR+15,btemp+1
  5564  0012B6  C010  F044         	movff	??_HighISR+14,btemp
  5565  0012BA  C00F  FFF5         	movff	??_HighISR+13,tablat
  5566  0012BE  C00E  FFF8         	movff	??_HighISR+12,tblptru
  5567  0012C2  C00D  FFF7         	movff	??_HighISR+11,tblptrh
  5568  0012C6  C00C  FFF6         	movff	??_HighISR+10,tblptrl
  5569  0012CA  C00B  FFF4         	movff	??_HighISR+9,prodh
  5570  0012CE  C00A  FFF3         	movff	??_HighISR+8,prodl
  5571  0012D2  C009  FFDA         	movff	??_HighISR+7,fsr2h
  5572  0012D6  C008  FFD9         	movff	??_HighISR+6,fsr2l
  5573  0012DA  C007  FFE2         	movff	??_HighISR+5,fsr1h
  5574  0012DE  C006  FFE1         	movff	??_HighISR+4,fsr1l
  5575  0012E2  C005  FFEA         	movff	??_HighISR+3,fsr0h
  5576  0012E6  C004  FFE9         	movff	??_HighISR+2,fsr0l
  5577  0012EA  C003  FFFB         	movff	??_HighISR+1,pclatu
  5578  0012EE  C002  FFFA         	movff	??_HighISR,pclath
  5579  0012F2  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5580  0012F4  0011               	retfie		f
  5581  0012F6                     __end_of_HighISR:
  5582                           	opt stack 0
  5583                           pclatu	equ	0xFFB
  5584                           pclath	equ	0xFFA
  5585                           tblptru	equ	0xFF8
  5586                           tblptrh	equ	0xFF7
  5587                           tblptrl	equ	0xFF6
  5588                           tablat	equ	0xFF5
  5589                           prodh	equ	0xFF4
  5590                           prodl	equ	0xFF3
  5591                           intcon	equ	0xFF2
  5592                           intcon2	equ	0xFF1
  5593                           indf0	equ	0xFEF
  5594                           postinc0	equ	0xFEE
  5595                           plusw0	equ	0xFEB
  5596                           fsr0h	equ	0xFEA
  5597                           fsr0l	equ	0xFE9
  5598                           wreg	equ	0xFE8
  5599                           indf1	equ	0xFE7
  5600                           postinc1	equ	0xFE6
  5601                           postdec1	equ	0xFE5
  5602                           fsr1h	equ	0xFE2
  5603                           fsr1l	equ	0xFE1
  5604                           bsr	equ	0xFE0
  5605                           indf2	equ	0xFDF
  5606                           postinc2	equ	0xFDE
  5607                           postdec2	equ	0xFDD
  5608                           plusw2	equ	0xFDB
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _fillDataBuffer *****************
  5614 ;; Defined at:
  5615 ;;		line 68 in file "Drivers/UART_Driver.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  data            1    wreg     unsigned char 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;  data            1    0[COMRAM] unsigned char 
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      void 
  5622 ;; Registers used:
  5623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5629 ;;      Params:         0       0       0       0       0       0       0       0       0
  5630 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5632 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5633 ;;Total ram usage:        1 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_HighISR
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           	psect	text31
  5643  000CC2                     __ptext31:
  5644                           	opt stack 0
  5645  000CC2                     _fillDataBuffer:
  5646                           	opt stack 23
  5647                           
  5648                           ;incstack = 0
  5649                           ;fillDataBuffer@data stored from wreg
  5650  000CC2  6E01               	movwf	fillDataBuffer@data,c
  5651                           
  5652                           ;UART_Driver.c: 69: switch(readBuffer.state) {
  5653  000CC4  D0AE               	goto	i2l120
  5654  000CC6                     
  5655                           ;UART_Driver.c: 71: if(data == 0x26) {
  5656  000CC6  0E26               	movlw	38
  5657  000CC8  1801               	xorwf	fillDataBuffer@data,w,c
  5658  000CCA  A4D8               	btfss	status,2,c
  5659  000CCC  D00E               	goto	i2l122
  5660                           
  5661                           ;UART_Driver.c: 72: readBuffer.typeCnt = 0;
  5662  000CCE  0E00               	movlw	0
  5663  000CD0  0101               	movlb	1	; () banked
  5664  000CD2  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5665                           
  5666                           ;UART_Driver.c: 73: readBuffer.senderCnt = 0;
  5667  000CD4  0E00               	movlw	0
  5668  000CD6  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5669                           
  5670                           ;UART_Driver.c: 74: readBuffer.commandCnt = 0;
  5671  000CD8  0E00               	movlw	0
  5672  000CDA  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5673                           
  5674                           ;UART_Driver.c: 75: readBuffer.messageCnt = 0;
  5675  000CDC  0E00               	movlw	0
  5676  000CDE  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5677                           
  5678                           ;UART_Driver.c: 76: readReady = 0;
  5679  000CE0  0E00               	movlw	0
  5680  000CE2  6E42               	movwf	_readReady,c
  5681                           
  5682                           ;UART_Driver.c: 77: readBuffer.state = 0x01;
  5683  000CE4  0E01               	movlw	1
  5684  000CE6  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5685                           
  5686                           ;UART_Driver.c: 78: } else {
  5687  000CE8  0012               	return	
  5688  000CEA                     i2l122:
  5689                           
  5690                           ;UART_Driver.c: 79: readBuffer.state = 0x00;
  5691                           
  5692                           ; BSR set to: 1
  5693  000CEA  0E00               	movlw	0
  5694  000CEC  0101               	movlb	1	; () banked
  5695  000CEE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5696                           
  5697                           ; BSR set to: 1
  5698                           ;UART_Driver.c: 81: }
  5699                           ;UART_Driver.c: 82: break;
  5700                           
  5701                           ; BSR set to: 1
  5702                           ;UART_Driver.c: 80: return;
  5703  000CF0  0012               	return	
  5704  000CF2                     
  5705                           ; BSR set to: 1
  5706                           ;UART_Driver.c: 85: if (data == 0x3A) {
  5707                           
  5708                           ; BSR set to: 1
  5709  000CF2  0E3A               	movlw	58
  5710  000CF4  1801               	xorwf	fillDataBuffer@data,w,c
  5711  000CF6  A4D8               	btfss	status,2,c
  5712  000CF8  D00D               	goto	i2l127
  5713                           
  5714                           ; BSR set to: 1
  5715                           ;UART_Driver.c: 86: readBuffer.state = 0x02;
  5716  000CFA  0E02               	movlw	2
  5717  000CFC  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5718                           
  5719                           ; BSR set to: 1
  5720                           ;UART_Driver.c: 87: readBuffer.type[readBuffer.typeCnt] = '\0';
  5721  000CFE  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5722  000D00  0D01               	mullw	1
  5723  000D02  0E00               	movlw	low _readBuffer
  5724  000D04  24F3               	addwf	prodl,w,c
  5725  000D06  6ED9               	movwf	fsr2l,c
  5726  000D08  0E01               	movlw	high _readBuffer
  5727  000D0A  20F4               	addwfc	prodh,w,c
  5728  000D0C  6EDA               	movwf	fsr2h,c
  5729  000D0E  0E00               	movlw	0
  5730  000D10  6EDF               	movwf	indf2,c
  5731                           
  5732                           ;UART_Driver.c: 88: } else {
  5733  000D12  0012               	return	
  5734  000D14                     i2l127:
  5735                           
  5736                           ; BSR set to: 1
  5737                           ;UART_Driver.c: 89: readBuffer.type[readBuffer.typeCnt] = data;
  5738                           
  5739                           ; BSR set to: 1
  5740  000D14  510A               	movf	(_readBuffer+10)& (0+255),w,b
  5741  000D16  0D01               	mullw	1
  5742  000D18  0E00               	movlw	low _readBuffer
  5743  000D1A  24F3               	addwf	prodl,w,c
  5744  000D1C  6ED9               	movwf	fsr2l,c
  5745  000D1E  0E01               	movlw	high _readBuffer
  5746  000D20  20F4               	addwfc	prodh,w,c
  5747  000D22  6EDA               	movwf	fsr2h,c
  5748  000D24  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5749                           
  5750                           ; BSR set to: 1
  5751                           ;UART_Driver.c: 90: readBuffer.typeCnt++;
  5752  000D28  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5753                           
  5754                           ; BSR set to: 1
  5755                           ;UART_Driver.c: 91: if(readBuffer.typeCnt > 10) {
  5756  000D2A  0E0A               	movlw	10
  5757  000D2C  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5758  000D2E  0012               	return	
  5759                           
  5760                           ; BSR set to: 1
  5761                           ;UART_Driver.c: 92: readBuffer.typeCnt = 0;
  5762  000D30  0E00               	movlw	0
  5763  000D32  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5764                           
  5765                           ; BSR set to: 1
  5766                           ;UART_Driver.c: 93: }
  5767                           ;UART_Driver.c: 94: }
  5768                           ;UART_Driver.c: 95: break;
  5769                           
  5770                           ; BSR set to: 1
  5771  000D34  0012               	return	
  5772  000D36                     
  5773                           ; BSR set to: 1
  5774                           ;UART_Driver.c: 98: if (data == 0x3A) {
  5775                           
  5776                           ; BSR set to: 1
  5777  000D36  0E3A               	movlw	58
  5778  000D38  1801               	xorwf	fillDataBuffer@data,w,c
  5779  000D3A  A4D8               	btfss	status,2,c
  5780  000D3C  D00D               	goto	i2l131
  5781                           
  5782                           ; BSR set to: 1
  5783                           ;UART_Driver.c: 99: readBuffer.state = 0x03;
  5784  000D3E  0E03               	movlw	3
  5785  000D40  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5786                           
  5787                           ; BSR set to: 1
  5788                           ;UART_Driver.c: 100: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5789  000D42  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5790  000D44  0D01               	mullw	1
  5791  000D46  0E0B               	movlw	low (_readBuffer+11)
  5792  000D48  24F3               	addwf	prodl,w,c
  5793  000D4A  6ED9               	movwf	fsr2l,c
  5794  000D4C  0E01               	movlw	high (_readBuffer+11)
  5795  000D4E  20F4               	addwfc	prodh,w,c
  5796  000D50  6EDA               	movwf	fsr2h,c
  5797  000D52  0E00               	movlw	0
  5798  000D54  6EDF               	movwf	indf2,c
  5799                           
  5800                           ;UART_Driver.c: 101: } else {
  5801  000D56  0012               	return	
  5802  000D58                     i2l131:
  5803                           
  5804                           ; BSR set to: 1
  5805                           ;UART_Driver.c: 102: readBuffer.sender[readBuffer.senderCnt] = data;
  5806                           
  5807                           ; BSR set to: 1
  5808  000D58  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5809  000D5A  0D01               	mullw	1
  5810  000D5C  0E0B               	movlw	low (_readBuffer+11)
  5811  000D5E  24F3               	addwf	prodl,w,c
  5812  000D60  6ED9               	movwf	fsr2l,c
  5813  000D62  0E01               	movlw	high (_readBuffer+11)
  5814  000D64  20F4               	addwfc	prodh,w,c
  5815  000D66  6EDA               	movwf	fsr2h,c
  5816  000D68  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5817                           
  5818                           ; BSR set to: 1
  5819                           ;UART_Driver.c: 103: readBuffer.senderCnt++;
  5820  000D6C  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5821                           
  5822                           ; BSR set to: 1
  5823                           ;UART_Driver.c: 104: if(readBuffer.senderCnt > 50) {
  5824  000D6E  0E32               	movlw	50
  5825  000D70  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5826  000D72  0012               	return	
  5827                           
  5828                           ; BSR set to: 1
  5829                           ;UART_Driver.c: 105: readBuffer.senderCnt = 0;
  5830  000D74  0E00               	movlw	0
  5831  000D76  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5832                           
  5833                           ; BSR set to: 1
  5834                           ;UART_Driver.c: 106: }
  5835                           ;UART_Driver.c: 107: }
  5836                           ;UART_Driver.c: 108: break;
  5837                           
  5838                           ; BSR set to: 1
  5839  000D78  0012               	return	
  5840  000D7A                     
  5841                           ; BSR set to: 1
  5842                           ;UART_Driver.c: 111: if (data == 0x3A) {
  5843                           
  5844                           ; BSR set to: 1
  5845  000D7A  0E3A               	movlw	58
  5846  000D7C  1801               	xorwf	fillDataBuffer@data,w,c
  5847  000D7E  A4D8               	btfss	status,2,c
  5848  000D80  D00D               	goto	i2l135
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;UART_Driver.c: 112: readBuffer.state = 0x04;
  5852  000D82  0E04               	movlw	4
  5853  000D84  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5854                           
  5855                           ; BSR set to: 1
  5856                           ;UART_Driver.c: 113: readBuffer.command[readBuffer.commandCnt] = '\0';
  5857  000D86  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5858  000D88  0D01               	mullw	1
  5859  000D8A  0E3E               	movlw	low (_readBuffer+62)
  5860  000D8C  24F3               	addwf	prodl,w,c
  5861  000D8E  6ED9               	movwf	fsr2l,c
  5862  000D90  0E01               	movlw	high (_readBuffer+62)
  5863  000D92  20F4               	addwfc	prodh,w,c
  5864  000D94  6EDA               	movwf	fsr2h,c
  5865  000D96  0E00               	movlw	0
  5866  000D98  6EDF               	movwf	indf2,c
  5867                           
  5868                           ;UART_Driver.c: 114: } else {
  5869  000D9A  0012               	return	
  5870  000D9C                     i2l135:
  5871                           
  5872                           ; BSR set to: 1
  5873                           ;UART_Driver.c: 115: readBuffer.command[readBuffer.commandCnt] = data;
  5874                           
  5875                           ; BSR set to: 1
  5876  000D9C  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5877  000D9E  0D01               	mullw	1
  5878  000DA0  0E3E               	movlw	low (_readBuffer+62)
  5879  000DA2  24F3               	addwf	prodl,w,c
  5880  000DA4  6ED9               	movwf	fsr2l,c
  5881  000DA6  0E01               	movlw	high (_readBuffer+62)
  5882  000DA8  20F4               	addwfc	prodh,w,c
  5883  000DAA  6EDA               	movwf	fsr2h,c
  5884  000DAC  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5885                           
  5886                           ; BSR set to: 1
  5887                           ;UART_Driver.c: 116: readBuffer.commandCnt++;
  5888  000DB0  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5889                           
  5890                           ; BSR set to: 1
  5891                           ;UART_Driver.c: 117: if(readBuffer.commandCnt > 50) {
  5892  000DB2  0E32               	movlw	50
  5893  000DB4  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5894  000DB6  0012               	return	
  5895                           
  5896                           ; BSR set to: 1
  5897                           ;UART_Driver.c: 118: readBuffer.commandCnt = 0;
  5898  000DB8  0E00               	movlw	0
  5899  000DBA  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5900                           
  5901                           ; BSR set to: 1
  5902                           ;UART_Driver.c: 119: }
  5903                           ;UART_Driver.c: 120: }
  5904                           ;UART_Driver.c: 121: break;
  5905                           
  5906                           ; BSR set to: 1
  5907  000DBC  0012               	return	
  5908  000DBE                     
  5909                           ; BSR set to: 1
  5910                           ;UART_Driver.c: 124: if (data == 0x3A) {
  5911                           
  5912                           ; BSR set to: 1
  5913  000DBE  0E3A               	movlw	58
  5914  000DC0  1801               	xorwf	fillDataBuffer@data,w,c
  5915  000DC2  A4D8               	btfss	status,2,c
  5916  000DC4  D00D               	goto	i2l139
  5917                           
  5918                           ; BSR set to: 1
  5919                           ;UART_Driver.c: 125: readBuffer.state = 0x05;
  5920  000DC6  0E05               	movlw	5
  5921  000DC8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5922                           
  5923                           ; BSR set to: 1
  5924                           ;UART_Driver.c: 126: readBuffer.message[readBuffer.messageCnt] = '\0';
  5925  000DCA  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5926  000DCC  0D01               	mullw	1
  5927  000DCE  0E71               	movlw	low (_readBuffer+113)
  5928  000DD0  24F3               	addwf	prodl,w,c
  5929  000DD2  6ED9               	movwf	fsr2l,c
  5930  000DD4  0E01               	movlw	high (_readBuffer+113)
  5931  000DD6  20F4               	addwfc	prodh,w,c
  5932  000DD8  6EDA               	movwf	fsr2h,c
  5933  000DDA  0E00               	movlw	0
  5934  000DDC  6EDF               	movwf	indf2,c
  5935                           
  5936                           ;UART_Driver.c: 127: } else {
  5937  000DDE  0012               	return	
  5938  000DE0                     i2l139:
  5939                           
  5940                           ; BSR set to: 1
  5941                           ;UART_Driver.c: 128: readBuffer.message[readBuffer.messageCnt] = data;
  5942                           
  5943                           ; BSR set to: 1
  5944  000DE0  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5945  000DE2  0D01               	mullw	1
  5946  000DE4  0E71               	movlw	low (_readBuffer+113)
  5947  000DE6  24F3               	addwf	prodl,w,c
  5948  000DE8  6ED9               	movwf	fsr2l,c
  5949  000DEA  0E01               	movlw	high (_readBuffer+113)
  5950  000DEC  20F4               	addwfc	prodh,w,c
  5951  000DEE  6EDA               	movwf	fsr2h,c
  5952  000DF0  C001  FFDF         	movff	fillDataBuffer@data,indf2
  5953                           
  5954                           ; BSR set to: 1
  5955                           ;UART_Driver.c: 129: readBuffer.messageCnt++;
  5956  000DF4  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5957                           
  5958                           ; BSR set to: 1
  5959                           ;UART_Driver.c: 130: if(readBuffer.messageCnt > 50) {
  5960  000DF6  0E32               	movlw	50
  5961  000DF8  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5962  000DFA  0012               	return	
  5963                           
  5964                           ; BSR set to: 1
  5965                           ;UART_Driver.c: 131: readBuffer.messageCnt = 0;
  5966  000DFC  0E00               	movlw	0
  5967  000DFE  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5968                           
  5969                           ; BSR set to: 1
  5970                           ;UART_Driver.c: 132: }
  5971                           ;UART_Driver.c: 133: }
  5972                           ;UART_Driver.c: 134: break;
  5973                           
  5974                           ; BSR set to: 1
  5975  000E00  0012               	return	
  5976  000E02                     
  5977                           ; BSR set to: 1
  5978                           ;UART_Driver.c: 137: if (data == 0x24) {
  5979                           
  5980                           ; BSR set to: 1
  5981  000E02  0E24               	movlw	36
  5982  000E04  1801               	xorwf	fillDataBuffer@data,w,c
  5983  000E06  A4D8               	btfss	status,2,c
  5984  000E08  D005               	goto	i2l143
  5985                           
  5986                           ; BSR set to: 1
  5987                           ;UART_Driver.c: 139: readBuffer.state = 0x00;
  5988  000E0A  0E00               	movlw	0
  5989  000E0C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5990                           
  5991                           ;UART_Driver.c: 140: readReady = 1;
  5992  000E0E  0E01               	movlw	1
  5993  000E10  6E42               	movwf	_readReady,c
  5994                           
  5995                           ;UART_Driver.c: 141: } else {
  5996  000E12  0012               	return	
  5997  000E14                     i2l143:
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;UART_Driver.c: 143: readBuffer.readId = (uint8_t)(data - 0x30);
  6001                           
  6002                           ; BSR set to: 1
  6003  000E14  5001               	movf	fillDataBuffer@data,w,c
  6004  000E16  0FD0               	addlw	208
  6005  000E18  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  6006                           
  6007                           ; BSR set to: 1
  6008                           ;UART_Driver.c: 144: }
  6009                           ;UART_Driver.c: 145: break;
  6010  000E1A  0012               	return	
  6011  000E1C                     
  6012                           ; BSR set to: 1
  6013                           ;UART_Driver.c: 148: readBuffer.state = 0x00;
  6014                           
  6015                           ; BSR set to: 1
  6016  000E1C  0E00               	movlw	0
  6017  000E1E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  6018                           
  6019                           ; BSR set to: 1
  6020                           ;UART_Driver.c: 150: }
  6021                           
  6022                           ;UART_Driver.c: 149: break;
  6023  000E20  0012               	return	
  6024  000E22                     i2l120:
  6025                           
  6026                           ; BSR set to: 1
  6027  000E22  0101               	movlb	1	; () banked
  6028  000E24  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  6029                           
  6030                           ; Switch size 1, requested type "space"
  6031                           ; Number of cases is 6, Range of values is 0 to 5
  6032                           ; switch strategies available:
  6033                           ; Name         Instructions Cycles
  6034                           ; simple_byte           19    10 (average)
  6035                           ;	Chosen strategy is simple_byte
  6036  000E26  0A00               	xorlw	0	; case 0
  6037  000E28  B4D8               	btfsc	status,2,c
  6038  000E2A  D74D               	goto	i2l121
  6039  000E2C  0A01               	xorlw	1	; case 1
  6040  000E2E  B4D8               	btfsc	status,2,c
  6041  000E30  D760               	goto	i2l126
  6042  000E32  0A03               	xorlw	3	; case 2
  6043  000E34  B4D8               	btfsc	status,2,c
  6044  000E36  D77F               	goto	i2l130
  6045  000E38  0A01               	xorlw	1	; case 3
  6046  000E3A  B4D8               	btfsc	status,2,c
  6047  000E3C  D79E               	goto	i2l134
  6048  000E3E  0A07               	xorlw	7	; case 4
  6049  000E40  B4D8               	btfsc	status,2,c
  6050  000E42  D7BD               	goto	i2l138
  6051  000E44  0A01               	xorlw	1	; case 5
  6052  000E46  B4D8               	btfsc	status,2,c
  6053  000E48  D7DC               	goto	i2l142
  6054  000E4A  D7E8               	goto	i2l145
  6055  000E4C                     __end_of_fillDataBuffer:
  6056                           	opt stack 0
  6057                           pclatu	equ	0xFFB
  6058                           pclath	equ	0xFFA
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           intcon	equ	0xFF2
  6066                           intcon2	equ	0xFF1
  6067                           indf0	equ	0xFEF
  6068                           postinc0	equ	0xFEE
  6069                           plusw0	equ	0xFEB
  6070                           fsr0h	equ	0xFEA
  6071                           fsr0l	equ	0xFE9
  6072                           wreg	equ	0xFE8
  6073                           indf1	equ	0xFE7
  6074                           postinc1	equ	0xFE6
  6075                           postdec1	equ	0xFE5
  6076                           fsr1h	equ	0xFE2
  6077                           fsr1l	equ	0xFE1
  6078                           bsr	equ	0xFE0
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           plusw2	equ	0xFDB
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           pclatu	equ	0xFFB
  6087                           pclath	equ	0xFFA
  6088                           tblptru	equ	0xFF8
  6089                           tblptrh	equ	0xFF7
  6090                           tblptrl	equ	0xFF6
  6091                           tablat	equ	0xFF5
  6092                           prodh	equ	0xFF4
  6093                           prodl	equ	0xFF3
  6094                           intcon	equ	0xFF2
  6095                           intcon2	equ	0xFF1
  6096                           indf0	equ	0xFEF
  6097                           postinc0	equ	0xFEE
  6098                           plusw0	equ	0xFEB
  6099                           fsr0h	equ	0xFEA
  6100                           fsr0l	equ	0xFE9
  6101                           wreg	equ	0xFE8
  6102                           indf1	equ	0xFE7
  6103                           postinc1	equ	0xFE6
  6104                           postdec1	equ	0xFE5
  6105                           fsr1h	equ	0xFE2
  6106                           fsr1l	equ	0xFE1
  6107                           bsr	equ	0xFE0
  6108                           indf2	equ	0xFDF
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           plusw2	equ	0xFDB
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116                           	psect	rparam
  6117  0000                     pclatu	equ	0xFFB
  6118                           pclath	equ	0xFFA
  6119                           tblptru	equ	0xFF8
  6120                           tblptrh	equ	0xFF7
  6121                           tblptrl	equ	0xFF6
  6122                           tablat	equ	0xFF5
  6123                           prodh	equ	0xFF4
  6124                           prodl	equ	0xFF3
  6125                           intcon	equ	0xFF2
  6126                           intcon2	equ	0xFF1
  6127                           indf0	equ	0xFEF
  6128                           postinc0	equ	0xFEE
  6129                           plusw0	equ	0xFEB
  6130                           fsr0h	equ	0xFEA
  6131                           fsr0l	equ	0xFE9
  6132                           wreg	equ	0xFE8
  6133                           indf1	equ	0xFE7
  6134                           postinc1	equ	0xFE6
  6135                           postdec1	equ	0xFE5
  6136                           fsr1h	equ	0xFE2
  6137                           fsr1l	equ	0xFE1
  6138                           bsr	equ	0xFE0
  6139                           indf2	equ	0xFDF
  6140                           postinc2	equ	0xFDE
  6141                           postdec2	equ	0xFDD
  6142                           plusw2	equ	0xFDB
  6143                           fsr2h	equ	0xFDA
  6144                           fsr2l	equ	0xFD9
  6145                           status	equ	0xFD8
  6146                           
  6147                           	psect	temp
  6148  000044                     btemp:
  6149                           	opt stack 0
  6150  000044                     	ds	1
  6151  0000                     int$flags	set	btemp
  6152  0000                     wtemp6	set	btemp+1
  6153                           pclatu	equ	0xFFB
  6154                           pclath	equ	0xFFA
  6155                           tblptru	equ	0xFF8
  6156                           tblptrh	equ	0xFF7
  6157                           tblptrl	equ	0xFF6
  6158                           tablat	equ	0xFF5
  6159                           prodh	equ	0xFF4
  6160                           prodl	equ	0xFF3
  6161                           intcon	equ	0xFF2
  6162                           intcon2	equ	0xFF1
  6163                           indf0	equ	0xFEF
  6164                           postinc0	equ	0xFEE
  6165                           plusw0	equ	0xFEB
  6166                           fsr0h	equ	0xFEA
  6167                           fsr0l	equ	0xFE9
  6168                           wreg	equ	0xFE8
  6169                           indf1	equ	0xFE7
  6170                           postinc1	equ	0xFE6
  6171                           postdec1	equ	0xFE5
  6172                           fsr1h	equ	0xFE2
  6173                           fsr1l	equ	0xFE1
  6174                           bsr	equ	0xFE0
  6175                           indf2	equ	0xFDF
  6176                           postinc2	equ	0xFDE
  6177                           postdec2	equ	0xFDD
  6178                           plusw2	equ	0xFDB
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8


Data Sizes:
    Strings     53
    Constant    18
    Data        8
    BSS         296
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      67
    BANK0           160     43     154
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_15(CODE[2]), STR_14(CODE[2]), 
		 -> STR_13(CODE[2]), STR_12(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_20(CODE[2]), STR_19(CODE[2]), STR_17(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_WriteInt@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_17(CODE[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_20(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_19(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_11(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_11(CODE[2]), ROM(CODE[32767]), 

    S101$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S101$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S101$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer

Critical Paths under _main in BANK0

    _main->_run
    _run->_C_DOOR_SendStates
    _initDoors->_C_DOOR_LockAll
    _D_UART_WriteInt->_printf
    _D_UART_Acknowledge->_printf
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _D_UART_Init->___lldiv
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20300
                                             41 BANK0      2     2      0
                        _D_PORT_Init
                         _D_PWM_Init
                        _D_TMR0_Init
                        _D_TMR1_Init
                      _D_UART_Enable
                        _D_UART_Init
                                _run
 ---------------------------------------------------------------------------------
 (1) _run                                                  1     1      0   19410
                                             40 BANK0      1     1      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                       _D_PWM_SetPwm
                      _D_TMR1_Enable
                 _D_UART_Acknowledge
                        _D_UART_Read
                       _D_UART_Write
                    _D_UART_WriteInt
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4    1213
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _setAlarm                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initDoors                                            1     1      0     489
                                              9 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (3) _C_DOOR_LockAll                                       9     9      0      90
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (3) _C_DOOR_Init                                          5     5      0     332
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _D_UART_WriteInt                                      5     1      4    4079
                                             26 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_UART_Read                                          7     0      7       0
                                              0 BANK0      7     0      7
 ---------------------------------------------------------------------------------
 (2) _D_UART_Acknowledge                                   1     1      0    3868
                                             26 BANK0      1     1      0
                             _printf
 ---------------------------------------------------------------------------------
 (2) _D_PWM_SetPwm                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_UnlockAll                                     9     9      0      90
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_SendStates                                    9     9      0    5144
                                             31 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (3) _commandAndMessage                                   14     0     14     521
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (2) _D_UART_Write                                         5     1      4    4259
                                             26 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              23    18      5    3837
                                             12 BANK0     14     9      5
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     601
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_ReadSensors                                   5     5      0      90
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     815
                                             13 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (3) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0       0
                                             19 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HighISR                                             18    18      0     165
                                              1 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (8) _fillDataBuffer                                       1     1      0     165
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_PORT_Init
   _D_PWM_Init
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _run
     _C_DOOR_LockAll
     _C_DOOR_ReadSensors
     _C_DOOR_SendStates
       _D_UART_Write
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _commandAndMessage
     _C_DOOR_UnlockAll
     _D_PWM_SetPwm
     _D_TMR1_Enable
     _D_UART_Acknowledge
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _D_UART_Read
     _D_UART_Write
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _D_UART_WriteInt
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _initDoors
       _C_DOOR_Init
       _C_DOOR_LockAll
       _D_TMR0_Enable
     _setAlarm
     _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2B      9A       5       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     183      20        0.0%
DATA                 0      0     183       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Feb 12 15:57:14 2019

                         l30 1440                           l31 13B2                           l24 0F82  
                         l25 0E5E                           l42 14E0                           l50 106E  
                         l43 1464                           l19 1746                           l36 138E  
                         l37 12FE                           l48 1070                           l49 0FA6  
                __CFG_BOR$ON 000000                           bsr 000FE0                  __CFG_BORV$3 000000  
               _ackCharacter 00F2                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l400 08F6  
                        l216 18E8                          l161 1936                          l217 18E2  
                        l403 097C                          l404 0910                          l340 0B7E  
                        l413 099E                          l333 0ABA                          l166 190C  
                        l414 0A60                          l318 1976                          l350 0C48  
                        l342 0BB4                          l239 19F4                          l167 1902  
                        l351 0C5A                          l335 0AEC                          l416 0A48  
                        l408 098C                          l360 0CB6                          l344 0BE8  
                        l336 0B18                          l417 09A4                          l409 0946  
                        l361 0C80                          l353 0C64                          l418 0A5A  
                        l346 0C1A                          l338 0B48                          l419 09F4  
                        l363 0C8A                          l347 0C30                          l364 0C94  
                        l357 0C9A                          l349 0C44                          l198 1A08  
                        l390 0856                          l358 0C7C                          l391 0866  
                        l392 087A                          l397 08C6                          l830 17A4  
                        l398 086E                          l831 17AE                          l399 0872  
                        l840 1884                          l841 188E                          l826 1784  
                        l827 177C                          l836 186C                          l773 15C2  
                        l837 1864                          l774 15B6                          l777 15F6  
                        l778 1604                          l970 1812                          l971 1808  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _pwm 003B                          _run 0AA2                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l2132 0914                         l2146 094A  
                       STR_1 0844                         ?_run 0001                         STR_2 0842  
                       STR_3 0828                         STR_4 0824                         STR_5 0846  
                       STR_6 0846                         STR_7 0846                         STR_8 0846  
                       STR_9 082C                         u2207 1160                         u1440 1918  
                       u1520 08A6                         u2217 1906                         u2147 1508  
                       u1460 1788                         u1620 0A6A                         u2157 1550  
                       u1630 0A96                         u1527 089C                         u1711 1102  
                       u2167 157C                         u1721 113C                         u2177 0BA6  
                       u1490 1870                         u1811 0FF4                         u2187 1234  
                       u1900 1848                         u1637 0A8C                         u2197 102E  
                       u1920 15C6                         u1744 1354                         u1664 0F4E  
                       u1745 1350                         u1841 18BE                         u1665 0F4A  
                       u1770 14DA                         u1674 0F74                         u1675 0F70  
                       u1940 167C                         u1780 14DC                         u1764 14CC  
                       u1765 14C8                         u1694 1406                         u1695 1402  
                       u1945 1670                         u1981 0ACE                 ?_C_DOOR_Init 0001  
                       _baud 0043                         _main 14FC                         _read 0029  
                       _lock 003D                         _tick 003E                         fsr0h 000FEA  
                       fsr1h 000FE2                         indf0 000FEF                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0044  
          C_DOOR_UnlockAll@d 00CF                         prodh 000FF4                         prodl 000FF3  
                       start 00EC                __CFG_IESO$OFF 000000              __end_of_HighISR 12F6  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000                  ?_D_PWM_Init 0001  
          initDoors@door_cnt 00D0               _startCharacter 00F8                        ??_run 00EF  
            D_PWM_SetPwm@pwm 00C7                __CFG_PLLDIV$5 000000         commandAndMessage@com 00D1  
    __size_of_C_DOOR_LockAll 00B2         commandAndMessage@mes 00D3                        ?_main 0001  
                      STR_10 082F                        STR_11 083A                        STR_20 0840  
                      STR_12 0838                        STR_13 0840                        STR_21 0813  
                      STR_14 0836                        STR_15 083C                        STR_16 083A  
                      STR_17 083E                        STR_18 0832                        STR_19 0834  
            __end_of___lldiv 1616                        u17111 1100                        u17211 113A  
            __end_of___lwdiv 17B8          D_UART_Acknowledge@i 00E1                        i2l120 0E22  
                      i2l121 0CC6              __end_of___lwmod 1898                        i2l130 0D36  
                      i2l122 0CEA                        i2l131 0D58                        i1l372 0078  
                      i1l373 0094                        i2l142 0E02                        i2l134 0D7A  
                      i2l126 0CF2                        i1l374 008E                        i2l143 0E14  
                      i2l135 0D9C                        i2l127 0D14                        i1l375 0092  
                      i2l145 0E1C                        i2l138 0DBE                        i2l139 0DE0  
                      i2l176 12AA                        i2l177 129A                        i2l179 12A4  
                      _RCREG 000FAE                        _TMR1H 000FCF                        _TMR1L 000FCE  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               C_DOOR_Init@cnt 00CA  
             __CFG_EBTRB$OFF 000000              __end_of_dpowers 080B                        _doors 0060  
                      _putch 18F6                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00D4                 ?_D_UART_Read 00C7                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                 ?_D_TMR1_Init 0001                        plusw2 000FDB  
                      status 000FD8                        wtemp6 0045                 ?_D_PORT_Init 0001  
              _stopCharacter 00F6              __initialization 17B8                 __end_of_main 1592  
                     ??_main 00F0                __activetblptr 000003   __end_of_D_UART_Acknowledge 1704  
            __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00C7                       _ADCON1 000FC1  
                     _CCPR1L 000FBE          __size_of_D_PWM_Init 001E                       ?_putch 0001  
           _C_DOOR_UnlockAll 12F6                    ??_HighISR 0002                       _LowISR 0018  
             __CFG_XINST$OFF 000000                    ??___lldiv 00CF                setAlarm@alarm 00C7  
            C_DOOR_LockAll@d 00CF                    ??___lwdiv 00CB                    ??___lwmod 00D2  
                     clear_0 17DE                       clear_1 17EA                       clear_2 17F6  
                     _printf 084A             __end_of_setAlarm 1A16     __size_of_D_UART_WriteInt 00D4  
                     _strcmp 1806        D_UART_Init@interrupts 00D8                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
              ?_D_UART_Write 00E1              D_UART_Init@baud 00D6              D_UART_Init@name 00D4  
 __end_of_C_DOOR_ReadSensors 14FC                   __accesstop 0060      __end_of__initialization 17FC  
            __CFG_PBADEN$OFF 000000                ___rparam_used 000001         __size_of_C_DOOR_Init 0152  
             __pcstackCOMRAM 0001                 __pidataBANK0 1A16                 C_DOOR_Init@d 00CB  
              __end_of_putch 191E             _messageCharacter 00F4                ?_D_PWM_SetPwm 0001  
             _C_DOOR_LockAll 13AA       __size_of_D_UART_Enable 0024               ??_D_UART_Write 00E5  
     __size_of_D_TMR0_Enable 0014       __size_of_D_TMR1_Enable 0014            _C_DOOR_SendStates 0F9E  
                    ??_putch 00C7           ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060  
                 __pbssBANK1 0100           __size_of_initDoors 0022             _communicationCnt 0040  
       __size_of_D_UART_Init 0082         __size_of_D_UART_Read 0030         __size_of_D_TMR0_Init 0024  
       __size_of_D_TMR1_Init 0020          ??_C_DOOR_SendStates 00E6                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E                 ??_D_PWM_Init 00C7       __end_of_C_DOOR_LockAll 145C  
             ??_D_PWM_SetPwm 00C7                   _deviceName 00C4                      ?_printf 00D3  
                    ?_strcmp 00C7    __end_of_C_DOOR_SendStates 108C      __size_of_fillDataBuffer 018A  
        D_UART_Enable@enable 00C7            ??_D_UART_WriteInt 00E5           __end_of_D_PWM_Init 19C6  
            __CFG_VREGEN$OFF 000000                      _HighISR 0008                _D_UART_Enable 191E  
                  ?_setAlarm 0001                      __Hparam 0000                      __Lparam 0000  
            __size_of_LowISR 00D4                _D_TMR0_Enable 19F8                _D_TMR1_Enable 19E4  
                 _readBuffer 0100                      ___lldiv 1592              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 1764                      ___lwmod 1854                 __psmallconst 0800  
        C_DOOR_ReadSensors@d 00CB              __CFG_STVREN$OFF 000000                      __pcinit 17B8  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 13AA                      __ptext0 14FC  
                    __ptext1 0AA2                      __ptext2 1806                      __ptext3 1A0C  
                    __ptext4 1966                      __ptext5 13AA                      __ptext6 0E4C  
                    __ptext7 116C                      __ptext8 1898                      __ptext9 1698  
            __size_of_printf 0258            __end_of_initDoors 1988                    _T0CONbits 000FD5  
            __size_of_strcmp 004E            __end_of_hexpowers 0813                    _T1CONbits 000FCD  
                    _dpowers 0801                    _T2CONbits 000FCA                 __size_of_run 0220  
       C_DOOR_SendStates@com 00E9         C_DOOR_SendStates@mes 00EC                      _running 003C  
             __pintcode_body 1240         end_of_initialization 17FC           _D_UART_Acknowledge 1698  
        D_TMR0_Enable@enable 00C7                      int_func 1240               ?_D_UART_Enable 0001  
                 ??_setAlarm 00C7              ___lldiv@divisor 00CB               ?_D_TMR0_Enable 0001  
            ___lldiv@counter 00D3               ?_D_TMR1_Enable 0001         __end_of_D_UART_Write 116C  
        ?_D_UART_Acknowledge 0001                    _RCSTAbits 000FAB                      printf@c 00E0  
                    printf@f 00D3                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00CC                    _PORTCbits 000F82   __size_of_C_DOOR_SendStates 00EE  
                  _TRISCbits 000F94         ??_D_UART_Acknowledge 00E1         __end_of_D_PWM_SetPwm 18F6  
                _CCP1CONbits 000FBD                    _TXSTAbits 000FAC           _C_DOOR_ReadSensors 145C  
             __end_of_LowISR 00EC                  _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001  
             __end_of_printf 0AA2               __end_of_strcmp 1854          start_initialization 17B8  
             _fillDataBuffer 0CC2                  __end_of_run 0CC2         ??_C_DOOR_ReadSensors 00C7  
            ??_D_UART_Enable 00C7                ??_C_DOOR_Init 00C7              ??_D_TMR0_Enable 00C7  
            ??_D_TMR1_Enable 00C7                     ??_LowISR 0014                  __pdataBANK0 00F2  
           __CFG_LPT1OSC$OFF 000000              _D_UART_WriteInt 116C             D_UART_Write@data 00E3  
                   ??_printf 00D8                 _lockDelayCnt 0041                     ??_strcmp 00CB  
           D_UART_WriteInt@d 00E3       __end_of_fillDataBuffer 0E4C                  __pbssCOMRAM 0029  
              __pcstackBANK0 00C7                ??_D_UART_Init 00D9                ??_D_UART_Read 00CE  
              ??_D_TMR0_Init 00C8                ??_D_TMR1_Init 00C8                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00C7             ??_C_DOOR_LockAll 00C7  
           ___lwdiv@dividend 00C7          __end_of_C_DOOR_Init 0F9E            __size_of_setAlarm 000A  
                  __pintcode 0008                     ?___lldiv 00C7                     ?___lwdiv 00C7  
                   ?___lwmod 00CE                  __pintcodelo 0018           fillDataBuffer@data 0001  
                _ledDelayCnt 003F            ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001  
                __smallconst 0800           ??_C_DOOR_UnlockAll 00C7        __size_of_D_PWM_SetPwm 002E  
                  _initDoors 1966                 _D_UART_Write 108C                    _hexpowers 080B  
                  _readReady 0042             ___lwdiv@quotient 00CC               __size_of_putch 0028  
        D_TMR1_Enable@enable 00C7                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
        __end_of_D_UART_Init 1698          __end_of_D_UART_Read 18C8                     _PIR1bits 000F9E  
    __end_of_D_UART_WriteInt 1240          __end_of_D_TMR0_Init 1966          __end_of_D_TMR1_Init 19A8  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000       D_UART_WriteInt@command 00E1  
        __end_of_D_PORT_Init 19E4                 _D_PWM_SetPwm 18C8                   printf@flag 00DD  
                 printf@prec 00DC                   ?_initDoors 0001                  _INTCON2bits 000FF1  
                  copy_data0 17CC                  _C_DOOR_Init 0E4C             __size_of_HighISR 12EE  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___lldiv 0084  
           __size_of___lwdiv 0054             __size_of___lwmod 0044              ___lwdiv@divisor 00C9  
__size_of_D_UART_Acknowledge 006C              ___lwdiv@counter 00CB                     __ptext10 18C8  
                   __ptext11 12F6                     __ptext20 1616                     __ptext12 0F9E  
                   __ptext21 1592                     __ptext13 1704                     __ptext22 191E  
                   __ptext14 108C                     __ptext31 0CC2                     __ptext23 1988  
                   __ptext15 084A                     __ptext24 19E4                     __ptext16 18F6  
                   __ptext25 1942                     __ptext17 1854                     __ptext26 19F8  
                   __ptext18 1764                     __ptext27 19A8                     __ptext19 145C  
                   __ptext28 19C6                     _door_cnt 0037                  _D_UART_Init 1616  
                _D_UART_Read 1898                     _oldAlarm 0039                     _newAlarm 003A  
                   _readData 0030                  _D_TMR0_Init 1942                  _D_TMR1_Init 1988  
              __size_of_main 0096           C_DOOR_SendStates@d 00EE                  _D_PORT_Init 19C6  
                   _setAlarm 1A0C             ?_D_UART_WriteInt 00E1                     int$flags 0044  
                  printf@idx 00D9                    printf@val 00DE        __CFG_CPUDIV$OSC1_PLL2 000000  
                  putch@data 00C7                   _INTCONbits 000FF2                  ??_initDoors 00D0  
          _commandAndMessage 1704                     intlevel1 0000                     intlevel2 0000  
__size_of_C_DOOR_ReadSensors 00A0           ?_commandAndMessage 00C7             ___lwmod@dividend 00CE  
           ___lldiv@dividend 00C7        __end_of_D_UART_Enable 1942        __end_of_D_TMR0_Enable 1A0C  
        ??_commandAndMessage 00D5        __end_of_D_TMR1_Enable 19F8                   _D_PWM_Init 19A8  
                   printf@ap 00DA             ??_fillDataBuffer 0001          D_UART_Write@command 00E1  
                   putch@max 00C8                     strcmp@s1 00C7                     strcmp@s2 00C9  
           ___lldiv@quotient 00CF              ___lwmod@divisor 00D0              ___lwmod@counter 00D2  
  __end_of_commandAndMessage 1764    __size_of_C_DOOR_UnlockAll 00B4  
