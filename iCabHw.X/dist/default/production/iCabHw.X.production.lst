

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov 25 01:29:02 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.44
    42                           ; Generated 14/09/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F2550 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataCOMRAM
    77  0011D0                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _ackCharacter
    81  0011D0  20                 	db	low STR_7
    82  0011D1  08                 	db	high STR_7
    83                           
    84                           ;initializer for _stopCharacter
    85  0011D2  2B                 	db	low STR_5
    86  0011D3  08                 	db	high STR_5
    87                           
    88                           ;initializer for _startCharacter
    89  0011D4  2D                 	db	low STR_4
    90  0011D5  08                 	db	high STR_4
    91                           
    92                           	psect	idataBANK0
    93  0011D6                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _messageCharacter
    97  0011D6  24                 	db	low STR_6
    98  0011D7  08                 	db	high STR_6
    99                           
   100                           	psect	smallconst
   101  000800                     __psmallconst:
   102                           	opt stack 0
   103  000800  00                 	db	0
   104  000801                     _hexpowers:
   105                           	opt stack 0
   106  000801  0001               	dw	1
   107  000803  0010               	dw	16
   108  000805  0100               	dw	256
   109  000807  1000               	dw	4096
   110  000809                     __end_of_hexpowers:
   111                           	opt stack 0
   112  0000                     _PIE1bits	set	3997
   113  0000                     _IPR1bits	set	3999
   114  0000                     _PIR1bits	set	3998
   115  0000                     _INTCONbits	set	4082
   116  0000                     _RCONbits	set	4048
   117  0000                     _SPBRG	set	4015
   118  0000                     _BAUDCONbits	set	4024
   119  0000                     _TRISCbits	set	3988
   120  0000                     _RCREG	set	4014
   121  0000                     _RCSTAbits	set	4011
   122  0000                     _TXREG	set	4013
   123  0000                     _TXSTAbits	set	4012
   124  0000                     _ADCON1	set	4033
   125  0000                     _PORTC	set	3970
   126  0000                     _TRISC	set	3988
   127  0000                     _PORTB	set	3969
   128  0000                     _TRISB	set	3987
   129  0000                     _PORTA	set	3968
   130  0000                     _TRISA	set	3986
   131  000809                     STR_11:
   132  000809  30                 	db	48	;'0'
   133  00080A  31                 	db	49	;'1'
   134  00080B  32                 	db	50	;'2'
   135  00080C  33                 	db	51	;'3'
   136  00080D  34                 	db	52	;'4'
   137  00080E  35                 	db	53	;'5'
   138  00080F  36                 	db	54	;'6'
   139  000810  37                 	db	55	;'7'
   140  000811  38                 	db	56	;'8'
   141  000812  39                 	db	57	;'9'
   142  000813  61                 	db	97	;'a'
   143  000814  62                 	db	98	;'b'
   144  000815  63                 	db	99	;'c'
   145  000816  64                 	db	100	;'d'
   146  000817  65                 	db	101	;'e'
   147  000818  66                 	db	102	;'f'
   148  000819  00                 	db	0
   149  00081A                     STR_3:
   150  00081A  53                 	db	83	;'S'
   151  00081B  74                 	db	116	;'t'
   152  00081C  61                 	db	97	;'a'
   153  00081D  72                 	db	114	;'r'
   154  00081E  74                 	db	116	;'t'
   155  00081F  00                 	db	0
   156  000820                     STR_7:
   157  000820  5B                 	db	91	;'['
   158  000821  41                 	db	65	;'A'
   159  000822  5D                 	db	93	;']'
   160  000823  00                 	db	0
   161  000824                     STR_6:
   162  000824  5B                 	db	91	;'['
   163  000825  4D                 	db	77	;'M'
   164  000826  5D                 	db	93	;']'
   165  000827  00                 	db	0
   166  000828                     STR_8:
   167  000828  25                 	db	37
   168  000829  78                 	db	120	;'x'
   169  00082A  00                 	db	0
   170  00082B                     STR_5:
   171  00082B  24                 	db	36
   172  00082C  00                 	db	0
   173  00082D                     STR_4:
   174  00082D  26                 	db	38
   175  00082E  00                 	db	0
   176  00082F                     STR_9:
   177  00082F  3A                 	db	58	;':'
   178  000830  00                 	db	0
   179  000831                     STR_2:
   180  000831  49                 	db	73	;'I'
   181  000832  00                 	db	0
   182  000833                     STR_1:
   183  000833  50                 	db	80	;'P'
   184  000834  00                 	db	0
   185  0000                     
   186                           ; #config settings
   187  000835  00                 	db	0	; dummy byte at the end
   188  0000                     
   189                           	psect	cinit
   190  000F10                     __pcinit:
   191                           	opt stack 0
   192  000F10                     start_initialization:
   193                           	opt stack 0
   194  000F10                     __initialization:
   195                           	opt stack 0
   196                           
   197                           ; Initialize objects allocated to BANK0 (2 bytes)
   198                           ; load TBLPTR registers with __pidataBANK0
   199  000F10  0ED6               	movlw	low __pidataBANK0
   200  000F12  6EF6               	movwf	tblptrl,c
   201  000F14  0E11               	movlw	high __pidataBANK0
   202  000F16  6EF7               	movwf	tblptrh,c
   203  000F18  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   204  000F1A  6EF8               	movwf	tblptru,c
   205  000F1C  0009               	tblrd		*+	;fetch initializer
   206  000F1E  CFF5 F08F          	movff	tablat,__pdataBANK0
   207  000F22  0009               	tblrd		*+	;fetch initializer
   208  000F24  CFF5 F090          	movff	tablat,__pdataBANK0+1
   209                           
   210                           ; Initialize objects allocated to COMRAM (6 bytes)
   211                           ; load TBLPTR registers with __pidataCOMRAM
   212  000F28  0ED0               	movlw	low __pidataCOMRAM
   213  000F2A  6EF6               	movwf	tblptrl,c
   214  000F2C  0E11               	movlw	high __pidataCOMRAM
   215  000F2E  6EF7               	movwf	tblptrh,c
   216  000F30  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   217  000F32  6EF8               	movwf	tblptru,c
   218  000F34  EE00  F03B         	lfsr	0,__pdataCOMRAM
   219  000F38  EE10 F006          	lfsr	1,6
   220  000F3C                     copy_data0:
   221  000F3C  0009               	tblrd		*+
   222  000F3E  CFF5 FFEE          	movff	tablat,postinc0
   223  000F42  50E5               	movf	postdec1,w,c
   224  000F44  50E1               	movf	fsr1l,w,c
   225  000F46  E1FA               	bnz	copy_data0
   226                           
   227                           ; Clear objects allocated to BANK1 (166 bytes)
   228  000F48  EE01  F000         	lfsr	0,__pbssBANK1
   229  000F4C  0EA6               	movlw	166
   230  000F4E                     clear_0:
   231  000F4E  6AEE               	clrf	postinc0,c
   232  000F50  06E8               	decf	wreg,f,c
   233  000F52  E1FD               	bnz	clear_0
   234                           
   235                           ; Clear objects allocated to BANK0 (19 bytes)
   236  000F54  EE00  F07C         	lfsr	0,__pbssBANK0
   237  000F58  0E13               	movlw	19
   238  000F5A                     clear_1:
   239  000F5A  6AEE               	clrf	postinc0,c
   240  000F5C  06E8               	decf	wreg,f,c
   241  000F5E  E1FD               	bnz	clear_1
   242                           
   243                           ; Clear objects allocated to COMRAM (13 bytes)
   244  000F60  EE00  F02E         	lfsr	0,__pbssCOMRAM
   245  000F64  0E0D               	movlw	13
   246  000F66                     clear_2:
   247  000F66  6AEE               	clrf	postinc0,c
   248  000F68  06E8               	decf	wreg,f,c
   249  000F6A  E1FD               	bnz	clear_2
   250  000F6C                     end_of_initialization:
   251                           	opt stack 0
   252  000F6C                     __end_of__initialization:
   253                           	opt stack 0
   254  000F6C  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   255  000F6E  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   256  000F70  0E00               	movlw	low (__Lmediumconst shr (0+16))
   257  000F72  6EF8               	movwf	tblptru,c
   258  000F74  0100               	movlb	0
   259  000F76  EFED  F007         	goto	_main	;jump to C main() function
   260                           tblptru	equ	0xFF8
   261                           tblptrh	equ	0xFF7
   262                           tblptrl	equ	0xFF6
   263                           tablat	equ	0xFF5
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           postdec1	equ	0xFE5
   267                           fsr1l	equ	0xFE1
   268                           
   269                           	psect	bssCOMRAM
   270  00002E                     __pbssCOMRAM:
   271                           	opt stack 0
   272  00002E                     _readData:
   273                           	opt stack 0
   274  00002E                     	ds	6
   275  000034                     _read:
   276                           	opt stack 0
   277  000034                     	ds	6
   278  00003A                     _baud:
   279                           	opt stack 0
   280  00003A                     	ds	1
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	dataCOMRAM
   291  00003B                     __pdataCOMRAM:
   292                           	opt stack 0
   293  00003B                     _ackCharacter:
   294                           	opt stack 0
   295  00003B                     	ds	2
   296  00003D                     _stopCharacter:
   297                           	opt stack 0
   298  00003D                     	ds	2
   299  00003F                     _startCharacter:
   300                           	opt stack 0
   301  00003F                     	ds	2
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           postdec1	equ	0xFE5
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	bssBANK0
   312  00007C                     __pbssBANK0:
   313                           	opt stack 0
   314  00007C                     _doors:
   315                           	opt stack 0
   316  00007C                     	ds	15
   317  00008B                     _deviceName:
   318                           	opt stack 0
   319  00008B                     	ds	3
   320  00008E                     _readReady:
   321                           	opt stack 0
   322  00008E                     	ds	1
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           postdec1	equ	0xFE5
   330                           fsr1l	equ	0xFE1
   331                           
   332                           	psect	dataBANK0
   333  00008F                     __pdataBANK0:
   334                           	opt stack 0
   335  00008F                     _messageCharacter:
   336                           	opt stack 0
   337  00008F                     	ds	2
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           postdec1	equ	0xFE5
   345                           fsr1l	equ	0xFE1
   346                           
   347                           	psect	bssBANK1
   348  000100                     __pbssBANK1:
   349                           	opt stack 0
   350  000100                     _readBuffer:
   351                           	opt stack 0
   352  000100                     	ds	166
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	cstackBANK0
   363  000060                     __pcstackBANK0:
   364                           	opt stack 0
   365  000060                     ?___wmul:
   366                           	opt stack 0
   367  000060                     ?___lwdiv:
   368                           	opt stack 0
   369  000060                     ?___aldiv:
   370                           	opt stack 0
   371  000060                     writeByte@data:
   372                           	opt stack 0
   373  000060                     D_UART_Enable@enable:
   374                           	opt stack 0
   375  000060                     ___wmul@multiplier:
   376                           	opt stack 0
   377  000060                     ___lwdiv@dividend:
   378                           	opt stack 0
   379  000060                     ___aldiv@dividend:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0x0
   383  000060                     	ds	1
   384  000061                     putch@data:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x1
   388  000061                     	ds	1
   389  000062                     ___wmul@multiplicand:
   390                           	opt stack 0
   391  000062                     ___lwdiv@divisor:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0x2
   395  000062                     	ds	2
   396  000064                     ___lwdiv@counter:
   397                           	opt stack 0
   398  000064                     ___wmul@product:
   399                           	opt stack 0
   400  000064                     ___aldiv@divisor:
   401                           	opt stack 0
   402                           
   403                           ; 4 bytes @ 0x4
   404  000064                     	ds	1
   405  000065                     ___lwdiv@quotient:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x5
   409  000065                     	ds	1
   410  000066                     C_DOOR_Init@d:
   411                           	opt stack 0
   412  000066                     C_DOOR_LockAll@d:
   413                           	opt stack 0
   414                           
   415                           ; 2 bytes @ 0x6
   416  000066                     	ds	1
   417  000067                     ?_printf:
   418                           	opt stack 0
   419  000067                     printf@f:
   420                           	opt stack 0
   421                           
   422                           ; 3 bytes @ 0x7
   423  000067                     	ds	1
   424  000068                     ___aldiv@counter:
   425                           	opt stack 0
   426                           
   427                           ; 1 bytes @ 0x8
   428  000068                     	ds	1
   429  000069                     ___aldiv@sign:
   430                           	opt stack 0
   431                           
   432                           ; 1 bytes @ 0x9
   433  000069                     	ds	1
   434  00006A                     ??_printf:
   435  00006A                     ___aldiv@quotient:
   436                           	opt stack 0
   437                           
   438                           ; 4 bytes @ 0xA
   439  00006A                     	ds	3
   440  00006D                     printf@flag:
   441                           	opt stack 0
   442                           
   443                           ; 1 bytes @ 0xD
   444  00006D                     	ds	1
   445  00006E                     printf@idx:
   446                           	opt stack 0
   447  00006E                     D_UART_Init@name:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0xE
   451  00006E                     	ds	1
   452  00006F                     printf@ap:
   453                           	opt stack 0
   454                           
   455                           ; 2 bytes @ 0xF
   456  00006F                     	ds	1
   457  000070                     D_UART_Init@baud:
   458                           	opt stack 0
   459                           
   460                           ; 2 bytes @ 0x10
   461  000070                     	ds	1
   462  000071                     printf@val:
   463                           	opt stack 0
   464                           
   465                           ; 2 bytes @ 0x11
   466  000071                     	ds	1
   467  000072                     D_UART_Init@interrupts:
   468                           	opt stack 0
   469                           
   470                           ; 1 bytes @ 0x12
   471  000072                     	ds	1
   472  000073                     printf@prec:
   473                           	opt stack 0
   474  000073                     _D_UART_Init$1223:
   475                           	opt stack 0
   476                           
   477                           ; 4 bytes @ 0x13
   478  000073                     	ds	1
   479  000074                     printf@c:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x14
   483  000074                     	ds	1
   484  000075                     D_UART_Write@command:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x15
   488  000075                     	ds	2
   489  000077                     D_UART_Write@data:
   490                           	opt stack 0
   491                           
   492                           ; 2 bytes @ 0x17
   493  000077                     	ds	2
   494  000079                     ??_D_UART_Write:
   495                           
   496                           ; 1 bytes @ 0x19
   497  000079                     	ds	1
   498  00007A                     ??_main:
   499                           
   500                           ; 1 bytes @ 0x1A
   501  00007A                     	ds	2
   502                           tblptru	equ	0xFF8
   503                           tblptrh	equ	0xFF7
   504                           tblptrl	equ	0xFF6
   505                           tablat	equ	0xFF5
   506                           postinc0	equ	0xFEE
   507                           wreg	equ	0xFE8
   508                           postdec1	equ	0xFE5
   509                           fsr1l	equ	0xFE1
   510                           
   511                           	psect	cstackCOMRAM
   512  000001                     __pcstackCOMRAM:
   513                           	opt stack 0
   514  000001                     ?i1___lwdiv:
   515                           	opt stack 0
   516  000001                     i1writeByte@data:
   517                           	opt stack 0
   518  000001                     i1___lwdiv@dividend:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x0
   522  000001                     	ds	1
   523  000002                     i1putch@data:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x1
   527  000002                     	ds	1
   528  000003                     i1___lwdiv@divisor:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x2
   532  000003                     	ds	2
   533  000005                     i1___lwdiv@quotient:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x4
   537  000005                     	ds	2
   538  000007                     i1___lwdiv@counter:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x6
   542  000007                     	ds	1
   543  000008                     ?i1_printf:
   544                           	opt stack 0
   545  000008                     i1printf@f:
   546                           	opt stack 0
   547                           
   548                           ; 3 bytes @ 0x7
   549  000008                     	ds	5
   550  00000D                     ??i1_printf:
   551                           
   552                           ; 1 bytes @ 0xC
   553  00000D                     	ds	3
   554  000010                     i1printf@flag:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0xF
   558  000010                     	ds	1
   559  000011                     i1printf@ap:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x10
   563  000011                     	ds	2
   564  000013                     i1printf@idx:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x12
   568  000013                     	ds	1
   569  000014                     i1printf@val:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x13
   573  000014                     	ds	2
   574  000016                     i1printf@prec:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x15
   578  000016                     	ds	1
   579  000017                     i1printf@c:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x16
   583  000017                     	ds	1
   584  000018                     fillDataBuffer@data:
   585                           	opt stack 0
   586                           
   587                           ; 1 bytes @ 0x17
   588  000018                     	ds	1
   589  000019                     ??_LowISR:
   590                           
   591                           ; 1 bytes @ 0x18
   592  000019                     	ds	21
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           postinc0	equ	0xFEE
   598                           wreg	equ	0xFE8
   599                           postdec1	equ	0xFE5
   600                           fsr1l	equ	0xFE1
   601                           
   602 ;;
   603 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   604 ;;
   605 ;; *************** function _main *****************
   606 ;; Defined at:
   607 ;;		line 14 in file "main.c"
   608 ;; Parameters:    Size  Location     Type
   609 ;;		None
   610 ;; Auto vars:     Size  Location     Type
   611 ;;		None
   612 ;; Return value:  Size  Location     Type
   613 ;;                  1    wreg      void 
   614 ;; Registers used:
   615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         0       0       0       0       0       0       0       0       0
   622 ;;      Locals:         0       0       0       0       0       0       0       0       0
   623 ;;      Temps:          0       2       0       0       0       0       0       0       0
   624 ;;      Totals:         0       2       0       0       0       0       0       0       0
   625 ;;Total ram usage:        2 bytes
   626 ;; Hardware stack levels required when called:   10
   627 ;; This function calls:
   628 ;;		_C_DOOR_Init
   629 ;;		_C_DOOR_LockAll
   630 ;;		_D_PORT_Init
   631 ;;		_D_UART_Enable
   632 ;;		_D_UART_Init
   633 ;;		_D_UART_Write
   634 ;; This function is called by:
   635 ;;		Startup code after reset
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text0
   640  000FDA                     __ptext0:
   641                           	opt stack 0
   642  000FDA                     _main:
   643                           	opt stack 21
   644                           
   645                           ;main.c: 16: D_PORT_Init();
   646                           
   647                           ;incstack = 0
   648  000FDA  ECBC  F008         	call	_D_PORT_Init	;wreg free
   649                           
   650                           ;main.c: 19: C_DOOR_Init();
   651  000FDE  ECE5  F006         	call	_C_DOOR_Init	;wreg free
   652                           
   653                           ;main.c: 20: C_DOOR_LockAll();
   654  000FE2  EC6E  F008         	call	_C_DOOR_LockAll	;wreg free
   655                           
   656                           ;main.c: 24: D_UART_Init("P", 9600, 1);
   657  000FE6  0E33               	movlw	low STR_1
   658  000FE8  0100               	movlb	0	; () banked
   659  000FEA  6F6E               	movwf	D_UART_Init@name& (0+255),b
   660  000FEC  0E08               	movlw	high STR_1
   661  000FEE  6F6F               	movwf	(D_UART_Init@name+1)& (0+255),b
   662  000FF0  0E25               	movlw	37
   663  000FF2  6F71               	movwf	(D_UART_Init@baud+1)& (0+255),b
   664  000FF4  0E80               	movlw	128
   665  000FF6  6F70               	movwf	D_UART_Init@baud& (0+255),b
   666  000FF8  0E01               	movlw	1
   667  000FFA  6F72               	movwf	D_UART_Init@interrupts& (0+255),b
   668  000FFC  EC37  F007         	call	_D_UART_Init	;wreg free
   669                           
   670                           ;main.c: 25: D_UART_Enable(1);
   671  001000  0E01               	movlw	1
   672  001002  ECAA  F008         	call	_D_UART_Enable
   673                           
   674                           ;main.c: 27: _delay((unsigned long)((200)*(16000000/4000.0)));
   675  001006  0E05               	movlw	5
   676  001008  0100               	movlb	0	; () banked
   677  00100A  6F7B               	movwf	(??_main+1)& (0+255),b
   678  00100C  0E0F               	movlw	15
   679  00100E  6F7A               	movwf	??_main& (0+255),b
   680  001010  0EF1               	movlw	241
   681  001012                     u1187:
   682  001012  2EE8               	decfsz	wreg,f,c
   683  001014  D7FE               	bra	u1187
   684  001016  2F7A               	decfsz	??_main& (0+255),f,b
   685  001018  D7FC               	bra	u1187
   686  00101A  2F7B               	decfsz	(??_main+1)& (0+255),f,b
   687  00101C  D7FA               	bra	u1187
   688                           
   689                           ;main.c: 28: D_UART_Write("I", "Start");
   690  00101E  0E31               	movlw	low STR_2
   691  001020  0100               	movlb	0	; () banked
   692  001022  6F75               	movwf	D_UART_Write@command& (0+255),b
   693  001024  0E08               	movlw	high STR_2
   694  001026  6F76               	movwf	(D_UART_Write@command+1)& (0+255),b
   695  001028  0E1A               	movlw	low STR_3
   696  00102A  6F77               	movwf	D_UART_Write@data& (0+255),b
   697  00102C  0E08               	movlw	high STR_3
   698  00102E  6F78               	movwf	(D_UART_Write@data+1)& (0+255),b
   699  001030  EC7F  F006         	call	_D_UART_Write	;wreg free
   700  001034                     l21:
   701  001034  D7FF               	goto	l21
   702  001036                     __end_of_main:
   703                           	opt stack 0
   704                           tblptru	equ	0xFF8
   705                           tblptrh	equ	0xFF7
   706                           tblptrl	equ	0xFF6
   707                           tablat	equ	0xFF5
   708                           postinc0	equ	0xFEE
   709                           wreg	equ	0xFE8
   710                           postdec1	equ	0xFE5
   711                           fsr1l	equ	0xFE1
   712                           
   713 ;; *************** function _D_UART_Write *****************
   714 ;; Defined at:
   715 ;;		line 223 in file "Drivers/UART_Driver.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;  command         2   21[BANK0 ] PTR const unsigned char 
   718 ;;		 -> STR_2(2), 
   719 ;;  data            2   23[BANK0 ] PTR const unsigned char 
   720 ;;		 -> STR_3(6), 
   721 ;; Auto vars:     Size  Location     Type
   722 ;;		None
   723 ;; Return value:  Size  Location     Type
   724 ;;                  1    wreg      void 
   725 ;; Registers used:
   726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   727 ;; Tracked objects:
   728 ;;		On entry : 0/0
   729 ;;		On exit  : 0/0
   730 ;;		Unchanged: 0/0
   731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   732 ;;      Params:         0       4       0       0       0       0       0       0       0
   733 ;;      Locals:         0       0       0       0       0       0       0       0       0
   734 ;;      Temps:          0       1       0       0       0       0       0       0       0
   735 ;;      Totals:         0       5       0       0       0       0       0       0       0
   736 ;;Total ram usage:        5 bytes
   737 ;; Hardware stack levels used:    1
   738 ;; Hardware stack levels required when called:    9
   739 ;; This function calls:
   740 ;;		_printf
   741 ;; This function is called by:
   742 ;;		_main
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           	psect	text1
   747  000CFE                     __ptext1:
   748                           	opt stack 0
   749  000CFE                     _D_UART_Write:
   750                           	opt stack 21
   751                           
   752                           ;UART_Driver.c: 224: printf(startCharacter);
   753                           
   754                           ;incstack = 0
   755  000CFE  C03F  F067         	movff	_startCharacter,printf@f
   756  000D02  C040  F068         	movff	_startCharacter+1,printf@f+1
   757  000D06  0100               	movlb	0	; () banked
   758  000D08  5167               	movf	printf@f& (0+255),w,b
   759  000D0A  1168               	iorwf	(printf@f+1)& (0+255),w,b
   760  000D0C  A4D8               	btfss	status,2,c
   761  000D0E  0E00               	movlw	low (__mediumconst shr (0+16))
   762  000D10  6F69               	movwf	(printf@f+2)& (0+255),b
   763  000D12  ECE7  F004         	call	_printf	;wreg free
   764                           
   765                           ;UART_Driver.c: 226: printf(messageCharacter);
   766  000D16  C08F  F067         	movff	_messageCharacter,printf@f
   767  000D1A  C090  F068         	movff	_messageCharacter+1,printf@f+1
   768  000D1E  0100               	movlb	0	; () banked
   769  000D20  5167               	movf	printf@f& (0+255),w,b
   770  000D22  1168               	iorwf	(printf@f+1)& (0+255),w,b
   771  000D24  A4D8               	btfss	status,2,c
   772  000D26  0E00               	movlw	low (__mediumconst shr (0+16))
   773  000D28  6F69               	movwf	(printf@f+2)& (0+255),b
   774  000D2A  ECE7  F004         	call	_printf	;wreg free
   775                           
   776                           ;UART_Driver.c: 227: printf(deviceName);
   777  000D2E  C08B  F067         	movff	_deviceName,printf@f
   778  000D32  C08C  F068         	movff	_deviceName+1,printf@f+1
   779  000D36  C08D  F069         	movff	_deviceName+2,printf@f+2
   780  000D3A  ECE7  F004         	call	_printf	;wreg free
   781                           
   782                           ;UART_Driver.c: 229: printf(":");printf(command);
   783  000D3E  0E2F               	movlw	low STR_9
   784  000D40  0100               	movlb	0	; () banked
   785  000D42  6F67               	movwf	printf@f& (0+255),b
   786  000D44  0E08               	movlw	high STR_9
   787  000D46  6F68               	movwf	(printf@f+1)& (0+255),b
   788  000D48  5167               	movf	printf@f& (0+255),w,b
   789  000D4A  1168               	iorwf	(printf@f+1)& (0+255),w,b
   790  000D4C  A4D8               	btfss	status,2,c
   791  000D4E  0E00               	movlw	low (__mediumconst shr (0+16))
   792  000D50  6F69               	movwf	(printf@f+2)& (0+255),b
   793  000D52  ECE7  F004         	call	_printf	;wreg free
   794  000D56  C075  F067         	movff	D_UART_Write@command,printf@f
   795  000D5A  C076  F068         	movff	D_UART_Write@command+1,printf@f+1
   796  000D5E  0100               	movlb	0	; () banked
   797  000D60  5167               	movf	printf@f& (0+255),w,b
   798  000D62  1168               	iorwf	(printf@f+1)& (0+255),w,b
   799  000D64  A4D8               	btfss	status,2,c
   800  000D66  0E00               	movlw	low (__mediumconst shr (0+16))
   801  000D68  6F69               	movwf	(printf@f+2)& (0+255),b
   802  000D6A  ECE7  F004         	call	_printf	;wreg free
   803                           
   804                           ;UART_Driver.c: 231: printf(":");printf(data);
   805  000D6E  0E2F               	movlw	low STR_9
   806  000D70  0100               	movlb	0	; () banked
   807  000D72  6F67               	movwf	printf@f& (0+255),b
   808  000D74  0E08               	movlw	high STR_9
   809  000D76  6F68               	movwf	(printf@f+1)& (0+255),b
   810  000D78  5167               	movf	printf@f& (0+255),w,b
   811  000D7A  1168               	iorwf	(printf@f+1)& (0+255),w,b
   812  000D7C  A4D8               	btfss	status,2,c
   813  000D7E  0E00               	movlw	low (__mediumconst shr (0+16))
   814  000D80  6F69               	movwf	(printf@f+2)& (0+255),b
   815  000D82  ECE7  F004         	call	_printf	;wreg free
   816  000D86  C077  F067         	movff	D_UART_Write@data,printf@f
   817  000D8A  C078  F068         	movff	D_UART_Write@data+1,printf@f+1
   818  000D8E  0100               	movlb	0	; () banked
   819  000D90  5167               	movf	printf@f& (0+255),w,b
   820  000D92  1168               	iorwf	(printf@f+1)& (0+255),w,b
   821  000D94  A4D8               	btfss	status,2,c
   822  000D96  0E00               	movlw	low (__mediumconst shr (0+16))
   823  000D98  6F69               	movwf	(printf@f+2)& (0+255),b
   824  000D9A  ECE7  F004         	call	_printf	;wreg free
   825                           
   826                           ;UART_Driver.c: 233: printf(stopCharacter);
   827  000D9E  C03D  F067         	movff	_stopCharacter,printf@f
   828  000DA2  C03E  F068         	movff	_stopCharacter+1,printf@f+1
   829  000DA6  0100               	movlb	0	; () banked
   830  000DA8  5167               	movf	printf@f& (0+255),w,b
   831  000DAA  1168               	iorwf	(printf@f+1)& (0+255),w,b
   832  000DAC  A4D8               	btfss	status,2,c
   833  000DAE  0E00               	movlw	low (__mediumconst shr (0+16))
   834  000DB0  6F69               	movwf	(printf@f+2)& (0+255),b
   835  000DB2  ECE7  F004         	call	_printf	;wreg free
   836                           
   837                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(16000000/4000.0)));
   838  000DB6  0E06               	movlw	6
   839  000DB8  0100               	movlb	0	; () banked
   840  000DBA  6F79               	movwf	??_D_UART_Write& (0+255),b
   841  000DBC  0E30               	movlw	48
   842  000DBE                     u1197:
   843  000DBE  2EE8               	decfsz	wreg,f,c
   844  000DC0  D7FE               	bra	u1197
   845  000DC2  2F79               	decfsz	??_D_UART_Write& (0+255),f,b
   846  000DC4  D7FC               	bra	u1197
   847  000DC6  F000               	nop	
   848  000DC8  0012               	return		;funcret
   849  000DCA                     __end_of_D_UART_Write:
   850                           	opt stack 0
   851                           tblptru	equ	0xFF8
   852                           tblptrh	equ	0xFF7
   853                           tblptrl	equ	0xFF6
   854                           tablat	equ	0xFF5
   855                           postinc0	equ	0xFEE
   856                           wreg	equ	0xFE8
   857                           postdec1	equ	0xFE5
   858                           fsr1l	equ	0xFE1
   859                           status	equ	0xFD8
   860                           
   861 ;; *************** function _printf *****************
   862 ;; Defined at:
   863 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;  f               3    7[BANK0 ] PTR const unsigned char 
   866 ;;		 -> STR_10(2), STR_9(2), STR_8(3), STR_7(4), 
   867 ;;		 -> STR_6(4), ROM(32767), STR_5(2), STR_4(2), 
   868 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  idx             1   14[BANK0 ] unsigned char 
   871 ;;  tmpval          4    0        struct .
   872 ;;  cp              3    0        PTR const unsigned char 
   873 ;;  val             2   17[BANK0 ] unsigned int 
   874 ;;  ap              2   15[BANK0 ] PTR void [1]
   875 ;;		 -> ?i1_printf(2), ?_printf(2), 
   876 ;;  len             2    0        unsigned int 
   877 ;;  c               1   20[BANK0 ] char 
   878 ;;  prec            1   19[BANK0 ] char 
   879 ;;  flag            1   13[BANK0 ] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  2    7[BANK0 ] int 
   882 ;; Registers used:
   883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   889 ;;      Params:         0       3       0       0       0       0       0       0       0
   890 ;;      Locals:         0       8       0       0       0       0       0       0       0
   891 ;;      Temps:          0       3       0       0       0       0       0       0       0
   892 ;;      Totals:         0      14       0       0       0       0       0       0       0
   893 ;;Total ram usage:       14 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    8
   896 ;; This function calls:
   897 ;;		___lwdiv
   898 ;;		_putch
   899 ;; This function is called by:
   900 ;;		_D_UART_Write
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904                           	psect	text2
   905  0009CE                     __ptext2:
   906                           	opt stack 0
   907  0009CE                     _printf:
   908                           	opt stack 21
   909                           
   910                           ;doprnt.c: 466: va_list ap;
   911                           ;doprnt.c: 499: signed char c;
   912                           ;doprnt.c: 506: signed char prec;
   913                           ;doprnt.c: 508: unsigned char flag;
   914                           ;doprnt.c: 523: union {
   915                           ;doprnt.c: 524: unsigned long vd;
   916                           ;doprnt.c: 525: double integ;
   917                           ;doprnt.c: 526: } tmpval;
   918                           ;doprnt.c: 528: unsigned int val;
   919                           ;doprnt.c: 529: unsigned len;
   920                           ;doprnt.c: 530: const char * cp;
   921                           ;doprnt.c: 533: *ap = __va_start();
   922                           
   923                           ;incstack = 0
   924  0009CE  0E6A               	movlw	low (?_printf+3)
   925  0009D0  0100               	movlb	0	; () banked
   926  0009D2  6F6F               	movwf	printf@ap& (0+255),b
   927  0009D4  0E00               	movlw	high (?_printf+3)
   928  0009D6  6F70               	movwf	(printf@ap+1)& (0+255),b
   929                           
   930                           ;doprnt.c: 536: while(c = *f++) {
   931  0009D8  D07E               	goto	u1020
   932  0009DA                     
   933                           ; BSR set to: 0
   934                           ;doprnt.c: 538: if(c != '%')
   935                           
   936                           ; BSR set to: 0
   937  0009DA  0E25               	movlw	37
   938  0009DC  1974               	xorwf	printf@c& (0+255),w,b
   939  0009DE  B4D8               	btfsc	status,2,c
   940  0009E0  D004               	goto	l188
   941                           
   942                           ; BSR set to: 0
   943                           ;doprnt.c: 540: {
   944                           ;doprnt.c: 541: (putch(c) );
   945  0009E2  5174               	movf	printf@c& (0+255),w,b
   946  0009E4  ECCB  F008         	call	_putch
   947                           
   948                           ;doprnt.c: 542: continue;
   949  0009E8  D076               	goto	u1020
   950  0009EA                     l188:
   951                           
   952                           ;doprnt.c: 543: }
   953                           ;doprnt.c: 548: flag = 0;
   954  0009EA  0E00               	movlw	0
   955  0009EC  0100               	movlb	0	; () banked
   956  0009EE  6F6D               	movwf	printf@flag& (0+255),b
   957                           
   958                           ;doprnt.c: 635: switch(c = *f++) {
   959  0009F0  D004               	goto	l189
   960  0009F2                     
   961                           ; BSR set to: 0
   962                           ;doprnt.c: 809: (putch(c) );
   963                           
   964                           ; BSR set to: 0
   965  0009F2  5174               	movf	printf@c& (0+255),w,b
   966  0009F4  ECCB  F008         	call	_putch
   967                           
   968                           ;doprnt.c: 810: continue;
   969  0009F8  D06E               	goto	u1020
   970  0009FA                     l189:
   971  0009FA  C067  F06A         	movff	printf@f,??_printf
   972  0009FE  C068  F06B         	movff	printf@f+1,??_printf+1
   973  000A02  C069  F06C         	movff	printf@f+2,??_printf+2
   974  000A06  0100               	movlb	0	; () banked
   975  000A08  2B67               	incf	printf@f& (0+255),f,b
   976  000A0A  0E00               	movlw	0
   977  000A0C  2368               	addwfc	(printf@f+1)& (0+255),f,b
   978  000A0E  2369               	addwfc	(printf@f+2)& (0+255),f,b
   979  000A10  C06A  FFF6         	movff	??_printf,tblptrl
   980  000A14  C06B  FFF7         	movff	??_printf+1,tblptrh
   981  000A18  C06C  FFF8         	movff	??_printf+2,tblptru
   982  000A1C  0008               	tblrd		*
   983  000A1E  CFF5 F074          	movff	tablat,printf@c
   984  000A22  5174               	movf	printf@c& (0+255),w,b
   985                           
   986                           ; Switch size 1, requested type "space"
   987                           ; Number of cases is 2, Range of values is 0 to 120
   988                           ; switch strategies available:
   989                           ; Name         Instructions Cycles
   990                           ; simple_byte            7     4 (average)
   991                           ;	Chosen strategy is simple_byte
   992  000A24  0A00               	xorlw	0	; case 0
   993  000A26  B4D8               	btfsc	status,2,c
   994  000A28  0012               	return	
   995  000A2A  0A78               	xorlw	120	; case 120
   996  000A2C  A4D8               	btfss	status,2,c
   997  000A2E  D7E1               	goto	l194
   998                           
   999                           ;doprnt.c: 1273: {
  1000                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1001                           
  1002                           ; BSR set to: 0
  1003  000A30  C06F  FFD9         	movff	printf@ap,fsr2l
  1004  000A34  C070  FFDA         	movff	printf@ap+1,fsr2h
  1005  000A38  CFDE F071          	movff	postinc2,printf@val
  1006  000A3C  CFDD F072          	movff	postdec2,printf@val+1
  1007  000A40  0E02               	movlw	2
  1008  000A42  0100               	movlb	0	; () banked
  1009  000A44  276F               	addwf	printf@ap& (0+255),f,b
  1010  000A46  0E00               	movlw	0
  1011  000A48  2370               	addwfc	(printf@ap+1)& (0+255),f,b
  1012                           
  1013                           ; BSR set to: 0
  1014                           ;doprnt.c: 1287: }
  1015                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  1016  000A4A  0E01               	movlw	1
  1017  000A4C  6F74               	movwf	printf@c& (0+255),b
  1018  000A4E  D011               	goto	l1630
  1019  000A50                     
  1020                           ; BSR set to: 0
  1021                           ;doprnt.c: 1317: if(val < hexpowers[c])
  1022                           
  1023                           ; BSR set to: 0
  1024  000A50  5174               	movf	printf@c& (0+255),w,b
  1025  000A52  0D02               	mullw	2
  1026  000A54  0E01               	movlw	low _hexpowers
  1027  000A56  24F3               	addwf	prodl,w,c
  1028  000A58  6EF6               	movwf	tblptrl,c
  1029  000A5A  0E08               	movlw	high _hexpowers
  1030  000A5C  20F4               	addwfc	prodh,w,c
  1031  000A5E  6EF7               	movwf	tblptrh,c
  1032  000A60                     	if	0	;There are less than 3 active tblptr bytes
  1033  000A60                     	endif
  1034  000A60  0009               	tblrd		*+
  1035  000A62  50F5               	movf	tablat,w,c
  1036  000A64  5D71               	subwf	printf@val& (0+255),w,b
  1037  000A66  0009               	tblrd		*+
  1038  000A68  50F5               	movf	tablat,w,c
  1039  000A6A  5972               	subwfb	(printf@val+1)& (0+255),w,b
  1040  000A6C  A0D8               	btfss	status,0,c
  1041  000A6E  D005               	goto	u1010
  1042                           
  1043                           ; BSR set to: 0
  1044                           
  1045                           ; BSR set to: 0
  1046                           
  1047                           ; BSR set to: 0
  1048                           ;doprnt.c: 1318: break;
  1049  000A70  2B74               	incf	printf@c& (0+255),f,b
  1050  000A72                     l1630:
  1051                           
  1052                           ; BSR set to: 0
  1053  000A72  0E04               	movlw	4
  1054  000A74  1974               	xorwf	printf@c& (0+255),w,b
  1055  000A76  A4D8               	btfss	status,2,c
  1056  000A78  D7EB               	goto	l195
  1057  000A7A                     u1010:
  1058                           
  1059                           ; BSR set to: 0
  1060                           ;doprnt.c: 1422: {
  1061                           ;doprnt.c: 1469: }
  1062                           ;doprnt.c: 1472: prec = c;
  1063  000A7A  C074  F073         	movff	printf@c,printf@prec
  1064                           
  1065                           ;doprnt.c: 1474: while(prec--) {
  1066  000A7E  D026               	goto	l198
  1067  000A80                     
  1068                           ; BSR set to: 0
  1069                           ;doprnt.c: 1478: {
  1070                           ;doprnt.c: 1499: {
  1071                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  1072                           
  1073                           ; BSR set to: 0
  1074  000A80  C071  F060         	movff	printf@val,___lwdiv@dividend
  1075  000A84  C072  F061         	movff	printf@val+1,___lwdiv@dividend+1
  1076  000A88  5173               	movf	printf@prec& (0+255),w,b
  1077  000A8A  0D02               	mullw	2
  1078  000A8C  0E01               	movlw	low _hexpowers
  1079  000A8E  24F3               	addwf	prodl,w,c
  1080  000A90  6EF6               	movwf	tblptrl,c
  1081  000A92  0E08               	movlw	high _hexpowers
  1082  000A94  20F4               	addwfc	prodh,w,c
  1083  000A96  6EF7               	movwf	tblptrh,c
  1084  000A98                     	if	0	;There are less than 3 active tblptr bytes
  1085  000A98                     	endif
  1086  000A98  0009               	tblrd		*+
  1087  000A9A  CFF5 F062          	movff	tablat,___lwdiv@divisor
  1088  000A9E  000A               	tblrd		*-
  1089  000AA0  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  1090  000AA4  EC1B  F008         	call	___lwdiv	;wreg free
  1091  000AA8  0100               	movlb	0	; () banked
  1092  000AAA  5160               	movf	?___lwdiv& (0+255),w,b
  1093  000AAC  0B0F               	andlw	15
  1094  000AAE  6F6E               	movwf	printf@idx& (0+255),b
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  1098  000AB0  516E               	movf	printf@idx& (0+255),w,b
  1099  000AB2  0D01               	mullw	1
  1100  000AB4  0E09               	movlw	low STR_11
  1101  000AB6  24F3               	addwf	prodl,w,c
  1102  000AB8  6EF6               	movwf	tblptrl,c
  1103  000ABA  0E08               	movlw	high STR_11
  1104  000ABC  20F4               	addwfc	prodh,w,c
  1105  000ABE  6EF7               	movwf	tblptrh,c
  1106  000AC0                     	if	0	;There are less than 3 active tblptr bytes
  1107  000AC0                     	endif
  1108  000AC0  0008               	tblrd		*
  1109  000AC2  CFF5 F074          	movff	tablat,printf@c
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;doprnt.c: 1508: }
  1113                           ;doprnt.c: 1523: }
  1114                           ;doprnt.c: 1524: (putch(c) );
  1115  000AC6  5174               	movf	printf@c& (0+255),w,b
  1116  000AC8  ECCB  F008         	call	_putch
  1117  000ACC                     l198:
  1118  000ACC  0100               	movlb	0	; () banked
  1119  000ACE  0773               	decf	printf@prec& (0+255),f,b
  1120  000AD0  2973               	incf	printf@prec& (0+255),w,b
  1121  000AD2  A4D8               	btfss	status,2,c
  1122  000AD4  D7D5               	goto	l199
  1123  000AD6                     u1020:
  1124                           
  1125                           ; BSR set to: 0
  1126                           
  1127                           ; BSR set to: 0
  1128  000AD6  C067  F06A         	movff	printf@f,??_printf
  1129  000ADA  C068  F06B         	movff	printf@f+1,??_printf+1
  1130  000ADE  C069  F06C         	movff	printf@f+2,??_printf+2
  1131  000AE2  0100               	movlb	0	; () banked
  1132  000AE4  2B67               	incf	printf@f& (0+255),f,b
  1133  000AE6  0E00               	movlw	0
  1134  000AE8  2368               	addwfc	(printf@f+1)& (0+255),f,b
  1135  000AEA  2369               	addwfc	(printf@f+2)& (0+255),f,b
  1136  000AEC  C06A  FFF6         	movff	??_printf,tblptrl
  1137  000AF0  C06B  FFF7         	movff	??_printf+1,tblptrh
  1138  000AF4  C06C  FFF8         	movff	??_printf+2,tblptru
  1139  000AF8  0008               	tblrd		*
  1140  000AFA  CFF5 F074          	movff	tablat,printf@c
  1141  000AFE  5174               	movf	printf@c& (0+255),w,b
  1142  000B00  B4D8               	btfsc	status,2,c
  1143  000B02  0012               	return	
  1144  000B04  D76A               	goto	l187
  1145  000B06                     __end_of_printf:
  1146                           	opt stack 0
  1147                           tblptru	equ	0xFF8
  1148                           tblptrh	equ	0xFF7
  1149                           tblptrl	equ	0xFF6
  1150                           tablat	equ	0xFF5
  1151                           prodh	equ	0xFF4
  1152                           prodl	equ	0xFF3
  1153                           postinc0	equ	0xFEE
  1154                           wreg	equ	0xFE8
  1155                           postdec1	equ	0xFE5
  1156                           fsr1l	equ	0xFE1
  1157                           postinc2	equ	0xFDE
  1158                           postdec2	equ	0xFDD
  1159                           fsr2h	equ	0xFDA
  1160                           fsr2l	equ	0xFD9
  1161                           status	equ	0xFD8
  1162                           
  1163 ;; *************** function _putch *****************
  1164 ;; Defined at:
  1165 ;;		line 260 in file "Drivers/UART_Driver.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  data            1    wreg     unsigned char 
  1168 ;; Auto vars:     Size  Location     Type
  1169 ;;  data            1    1[BANK0 ] unsigned char 
  1170 ;; Return value:  Size  Location     Type
  1171 ;;                  1    wreg      void 
  1172 ;; Registers used:
  1173 ;;		wreg, status,2, cstack
  1174 ;; Tracked objects:
  1175 ;;		On entry : 0/0
  1176 ;;		On exit  : 0/0
  1177 ;;		Unchanged: 0/0
  1178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1179 ;;      Params:         0       0       0       0       0       0       0       0       0
  1180 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1181 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1182 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1183 ;;Total ram usage:        1 bytes
  1184 ;; Hardware stack levels used:    1
  1185 ;; Hardware stack levels required when called:    7
  1186 ;; This function calls:
  1187 ;;		_writeByte
  1188 ;; This function is called by:
  1189 ;;		_printf
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192                           
  1193                           	psect	text3
  1194  001196                     __ptext3:
  1195                           	opt stack 0
  1196  001196                     _putch:
  1197                           	opt stack 21
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;incstack = 0
  1201                           ;putch@data stored from wreg
  1202  001196  0100               	movlb	0	; () banked
  1203  001198  6F61               	movwf	putch@data& (0+255),b
  1204                           
  1205                           ;UART_Driver.c: 261: writeByte(data);
  1206  00119A  0100               	movlb	0	; () banked
  1207  00119C  5161               	movf	putch@data& (0+255),w,b
  1208  00119E  ECD2  F008         	call	_writeByte
  1209  0011A2  0012               	return		;funcret
  1210  0011A4                     __end_of_putch:
  1211                           	opt stack 0
  1212                           tblptru	equ	0xFF8
  1213                           tblptrh	equ	0xFF7
  1214                           tblptrl	equ	0xFF6
  1215                           tablat	equ	0xFF5
  1216                           prodh	equ	0xFF4
  1217                           prodl	equ	0xFF3
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           postdec1	equ	0xFE5
  1221                           fsr1l	equ	0xFE1
  1222                           postinc2	equ	0xFDE
  1223                           postdec2	equ	0xFDD
  1224                           fsr2h	equ	0xFDA
  1225                           fsr2l	equ	0xFD9
  1226                           status	equ	0xFD8
  1227                           
  1228 ;; *************** function _writeByte *****************
  1229 ;; Defined at:
  1230 ;;		line 69 in file "Drivers/UART_Driver.c"
  1231 ;; Parameters:    Size  Location     Type
  1232 ;;  data            1    wreg     unsigned char 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  data            1    0[BANK0 ] unsigned char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  1    wreg      void 
  1237 ;; Registers used:
  1238 ;;		wreg
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1244 ;;      Params:         0       0       0       0       0       0       0       0       0
  1245 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1247 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1248 ;;Total ram usage:        1 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    6
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_putch
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text4
  1259  0011A4                     __ptext4:
  1260                           	opt stack 0
  1261  0011A4                     _writeByte:
  1262                           	opt stack 21
  1263                           
  1264                           ;incstack = 0
  1265                           ;writeByte@data stored from wreg
  1266  0011A4  0100               	movlb	0	; () banked
  1267  0011A6  6F60               	movwf	writeByte@data& (0+255),b
  1268  0011A8                     
  1269                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  1270  0011A8  A2AC               	btfss	4012,1,c	;volatile
  1271  0011AA  D7FE               	goto	l1568
  1272                           
  1273                           ;UART_Driver.c: 71: TXREG = data;
  1274  0011AC  C060  FFAD         	movff	writeByte@data,4013	;volatile
  1275  0011B0  0012               	return		;funcret
  1276  0011B2                     __end_of_writeByte:
  1277                           	opt stack 0
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           prodh	equ	0xFF4
  1283                           prodl	equ	0xFF3
  1284                           postinc0	equ	0xFEE
  1285                           wreg	equ	0xFE8
  1286                           postdec1	equ	0xFE5
  1287                           fsr1l	equ	0xFE1
  1288                           postinc2	equ	0xFDE
  1289                           postdec2	equ	0xFDD
  1290                           fsr2h	equ	0xFDA
  1291                           fsr2l	equ	0xFD9
  1292                           status	equ	0xFD8
  1293                           
  1294 ;; *************** function ___lwdiv *****************
  1295 ;; Defined at:
  1296 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;  dividend        2    0[BANK0 ] unsigned int 
  1299 ;;  divisor         2    2[BANK0 ] unsigned int 
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  quotient        2    5[BANK0 ] unsigned int 
  1302 ;;  counter         1    4[BANK0 ] unsigned char 
  1303 ;; Return value:  Size  Location     Type
  1304 ;;                  2    0[BANK0 ] unsigned int 
  1305 ;; Registers used:
  1306 ;;		wreg, status,2, status,0
  1307 ;; Tracked objects:
  1308 ;;		On entry : 0/0
  1309 ;;		On exit  : 0/0
  1310 ;;		Unchanged: 0/0
  1311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1312 ;;      Params:         0       4       0       0       0       0       0       0       0
  1313 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1314 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1315 ;;      Totals:         0       7       0       0       0       0       0       0       0
  1316 ;;Total ram usage:        7 bytes
  1317 ;; Hardware stack levels used:    1
  1318 ;; Hardware stack levels required when called:    6
  1319 ;; This function calls:
  1320 ;;		Nothing
  1321 ;; This function is called by:
  1322 ;;		_printf
  1323 ;; This function uses a non-reentrant model
  1324 ;;
  1325                           
  1326                           	psect	text5
  1327  001036                     __ptext5:
  1328                           	opt stack 0
  1329  001036                     ___lwdiv:
  1330                           	opt stack 22
  1331                           
  1332                           ;incstack = 0
  1333  001036  0E00               	movlw	0
  1334  001038  0100               	movlb	0	; () banked
  1335  00103A  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  1336  00103C  0E00               	movlw	0
  1337  00103E  6F65               	movwf	___lwdiv@quotient& (0+255),b
  1338                           
  1339                           ; BSR set to: 0
  1340  001040  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1341  001042  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  1342  001044  B4D8               	btfsc	status,2,c
  1343  001046  D01C               	goto	l611
  1344                           
  1345                           ; BSR set to: 0
  1346  001048  0E01               	movlw	1
  1347  00104A  6F64               	movwf	___lwdiv@counter& (0+255),b
  1348  00104C  D004               	goto	l606
  1349  00104E                     
  1350                           ; BSR set to: 0
  1351                           
  1352                           ; BSR set to: 0
  1353  00104E  90D8               	bcf	status,0,c
  1354  001050  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  1355  001052  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  1356  001054  2B64               	incf	___lwdiv@counter& (0+255),f,b
  1357  001056                     l606:
  1358                           
  1359                           ; BSR set to: 0
  1360                           
  1361                           ; BSR set to: 0
  1362  001056  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  1363  001058  D7FA               	goto	l607
  1364  00105A                     u950:
  1365                           
  1366                           ; BSR set to: 0
  1367                           
  1368                           ; BSR set to: 0
  1369                           
  1370                           ; BSR set to: 0
  1371  00105A  90D8               	bcf	status,0,c
  1372  00105C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  1373  00105E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  1374                           
  1375                           ; BSR set to: 0
  1376  001060  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1377  001062  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  1378  001064  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1379  001066  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  1380  001068  A0D8               	btfss	status,0,c
  1381  00106A  D005               	goto	l610
  1382                           
  1383                           ; BSR set to: 0
  1384  00106C  5162               	movf	___lwdiv@divisor& (0+255),w,b
  1385  00106E  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  1386  001070  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  1387  001072  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  1388                           
  1389                           ; BSR set to: 0
  1390  001074  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  1391  001076                     l610:
  1392                           
  1393                           ; BSR set to: 0
  1394                           
  1395                           ; BSR set to: 0
  1396  001076  90D8               	bcf	status,0,c
  1397  001078  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  1398  00107A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  1399                           
  1400                           ; BSR set to: 0
  1401  00107C  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  1402  00107E  D7ED               	goto	u950
  1403  001080                     l611:
  1404                           
  1405                           ; BSR set to: 0
  1406                           
  1407                           ; BSR set to: 0
  1408  001080  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  1409  001084  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1410                           
  1411                           ; BSR set to: 0
  1412  001088  0012               	return		;funcret
  1413  00108A                     __end_of___lwdiv:
  1414                           	opt stack 0
  1415                           tblptru	equ	0xFF8
  1416                           tblptrh	equ	0xFF7
  1417                           tblptrl	equ	0xFF6
  1418                           tablat	equ	0xFF5
  1419                           prodh	equ	0xFF4
  1420                           prodl	equ	0xFF3
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postdec1	equ	0xFE5
  1424                           fsr1l	equ	0xFE1
  1425                           postinc2	equ	0xFDE
  1426                           postdec2	equ	0xFDD
  1427                           fsr2h	equ	0xFDA
  1428                           fsr2l	equ	0xFD9
  1429                           status	equ	0xFD8
  1430                           
  1431 ;; *************** function _D_UART_Init *****************
  1432 ;; Defined at:
  1433 ;;		line 182 in file "Drivers/UART_Driver.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1436 ;;		 -> STR_1(2), 
  1437 ;;  baud            2   16[BANK0 ] unsigned int 
  1438 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;		None
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg, status,2, status,0, cstack
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1450 ;;      Params:         0       5       0       0       0       0       0       0       0
  1451 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1453 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1454 ;;Total ram usage:        9 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    7
  1457 ;; This function calls:
  1458 ;;		_D_UART_Enable
  1459 ;;		___aldiv
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text6
  1466  000E6E                     __ptext6:
  1467                           	opt stack 0
  1468  000E6E                     _D_UART_Init:
  1469                           	opt stack 23
  1470                           
  1471                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;incstack = 0
  1475  000E6E  9E94               	bcf	3988,7,c	;volatile
  1476                           
  1477                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1478  000E70  8C94               	bsf	3988,6,c	;volatile
  1479                           
  1480                           ;UART_Driver.c: 188: deviceName = name;
  1481  000E72  C06E  F08B         	movff	D_UART_Init@name,_deviceName
  1482  000E76  C06F  F08C         	movff	D_UART_Init@name+1,_deviceName+1
  1483  000E7A  0100               	movlb	0	; () banked
  1484  000E7C  518B               	movf	_deviceName& (0+255),w,b
  1485  000E7E  118C               	iorwf	(_deviceName+1)& (0+255),w,b
  1486  000E80  A4D8               	btfss	status,2,c
  1487  000E82  0E00               	movlw	low (__mediumconst shr (0+16))
  1488  000E84  6F8D               	movwf	(_deviceName+2)& (0+255),b
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;UART_Driver.c: 189: readReady = 0;
  1492  000E86  0E00               	movlw	0
  1493  000E88  6F8E               	movwf	_readReady& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1497  000E8A  0E00               	movlw	0
  1498  000E8C  ECAA  F008         	call	_D_UART_Enable
  1499                           
  1500                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1501  000E90  9CAC               	bcf	4012,6,c	;volatile
  1502                           
  1503                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1504  000E92  98AC               	bcf	4012,4,c	;volatile
  1505                           
  1506                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1507  000E94  94AC               	bcf	4012,2,c	;volatile
  1508                           
  1509                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1510  000E96  9CAB               	bcf	4011,6,c	;volatile
  1511                           
  1512                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1513  000E98  9AB8               	bcf	4024,5,c	;volatile
  1514                           
  1515                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1516  000E9A  98B8               	bcf	4024,4,c	;volatile
  1517                           
  1518                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1519  000E9C  96B8               	bcf	4024,3,c	;volatile
  1520                           
  1521                           ;UART_Driver.c: 210: SPBRG = ((16000000/baud)/64)-1;
  1522  000E9E  C070  F064         	movff	D_UART_Init@baud,___aldiv@divisor
  1523  000EA2  C071  F065         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1524  000EA6  0100               	movlb	0	; () banked
  1525  000EA8  6B66               	clrf	(___aldiv@divisor+2)& (0+255),b
  1526  000EAA  6B67               	clrf	(___aldiv@divisor+3)& (0+255),b
  1527  000EAC  0E00               	movlw	0
  1528  000EAE  6F60               	movwf	___aldiv@dividend& (0+255),b
  1529  000EB0  0E24               	movlw	36
  1530  000EB2  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
  1531  000EB4  0EF4               	movlw	244
  1532  000EB6  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
  1533  000EB8  0E00               	movlw	0
  1534  000EBA  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
  1535  000EBC  EC18  F006         	call	___aldiv	;wreg free
  1536  000EC0  C060  F073         	movff	?___aldiv,_D_UART_Init$1223
  1537  000EC4  C061  F074         	movff	?___aldiv+1,_D_UART_Init$1223+1
  1538  000EC8  C062  F075         	movff	?___aldiv+2,_D_UART_Init$1223+2
  1539  000ECC  C063  F076         	movff	?___aldiv+3,_D_UART_Init$1223+3
  1540                           
  1541                           ;UART_Driver.c: 210: SPBRG = ((16000000/baud)/64)-1;
  1542  000ED0  C073  F060         	movff	_D_UART_Init$1223,___aldiv@dividend
  1543  000ED4  C074  F061         	movff	_D_UART_Init$1223+1,___aldiv@dividend+1
  1544  000ED8  C075  F062         	movff	_D_UART_Init$1223+2,___aldiv@dividend+2
  1545  000EDC  C076  F063         	movff	_D_UART_Init$1223+3,___aldiv@dividend+3
  1546  000EE0  0E40               	movlw	64
  1547  000EE2  0100               	movlb	0	; () banked
  1548  000EE4  6F64               	movwf	___aldiv@divisor& (0+255),b
  1549  000EE6  0E00               	movlw	0
  1550  000EE8  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
  1551  000EEA  0E00               	movlw	0
  1552  000EEC  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
  1553  000EEE  0E00               	movlw	0
  1554  000EF0  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
  1555  000EF2  EC18  F006         	call	___aldiv	;wreg free
  1556  000EF6  0100               	movlb	0	; () banked
  1557  000EF8  0560               	decf	?___aldiv& (0+255),w,b
  1558  000EFA  6EAF               	movwf	4015,c	;volatile
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;UART_Driver.c: 213: if (interrupts) {
  1562  000EFC  5172               	movf	D_UART_Init@interrupts& (0+255),w,b
  1563  000EFE  B4D8               	btfsc	status,2,c
  1564  000F00  0012               	return	
  1565                           
  1566                           ; BSR set to: 0
  1567                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1568  000F02  8ED0               	bsf	4048,7,c	;volatile
  1569                           
  1570                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1571  000F04  8EF2               	bsf	intcon,7,c	;volatile
  1572                           
  1573                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1574  000F06  8CF2               	bsf	intcon,6,c	;volatile
  1575                           
  1576                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1577  000F08  9A9E               	bcf	3998,5,c	;volatile
  1578                           
  1579                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1580  000F0A  9A9F               	bcf	3999,5,c	;volatile
  1581                           
  1582                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1583  000F0C  8A9D               	bsf	3997,5,c	;volatile
  1584  000F0E  0012               	return	
  1585  000F10                     __end_of_D_UART_Init:
  1586                           	opt stack 0
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           prodh	equ	0xFF4
  1592                           prodl	equ	0xFF3
  1593                           intcon	equ	0xFF2
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           postdec1	equ	0xFE5
  1597                           fsr1l	equ	0xFE1
  1598                           postinc2	equ	0xFDE
  1599                           postdec2	equ	0xFDD
  1600                           fsr2h	equ	0xFDA
  1601                           fsr2l	equ	0xFD9
  1602                           status	equ	0xFD8
  1603                           
  1604 ;; *************** function ___aldiv *****************
  1605 ;; Defined at:
  1606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;  dividend        4    0[BANK0 ] long 
  1609 ;;  divisor         4    4[BANK0 ] long 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;  quotient        4   10[BANK0 ] long 
  1612 ;;  sign            1    9[BANK0 ] unsigned char 
  1613 ;;  counter         1    8[BANK0 ] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  4    0[BANK0 ] long 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1623 ;;      Params:         0       8       0       0       0       0       0       0       0
  1624 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1625 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1626 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1627 ;;Total ram usage:       14 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    6
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_D_UART_Init
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           	psect	text7
  1638  000C30                     __ptext7:
  1639                           	opt stack 0
  1640  000C30                     ___aldiv:
  1641                           	opt stack 23
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;incstack = 0
  1645  000C30  0E00               	movlw	0
  1646  000C32  0100               	movlb	0	; () banked
  1647  000C34  6F69               	movwf	___aldiv@sign& (0+255),b
  1648                           
  1649                           ; BSR set to: 0
  1650  000C36  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1651  000C38  D00A               	goto	l258
  1652                           
  1653                           ; BSR set to: 0
  1654  000C3A  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1655  000C3C  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1656  000C3E  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1657  000C40  6D64               	negf	___aldiv@divisor& (0+255),b
  1658  000C42  0E00               	movlw	0
  1659  000C44  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1660  000C46  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1661  000C48  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1662                           
  1663                           ; BSR set to: 0
  1664  000C4A  0E01               	movlw	1
  1665  000C4C  6F69               	movwf	___aldiv@sign& (0+255),b
  1666  000C4E                     l258:
  1667                           
  1668                           ; BSR set to: 0
  1669                           
  1670                           ; BSR set to: 0
  1671  000C4E  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1672  000C50  D00A               	goto	l259
  1673                           
  1674                           ; BSR set to: 0
  1675  000C52  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1676  000C54  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1677  000C56  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1678  000C58  6D60               	negf	___aldiv@dividend& (0+255),b
  1679  000C5A  0E00               	movlw	0
  1680  000C5C  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1681  000C5E  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1682  000C60  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1683                           
  1684                           ; BSR set to: 0
  1685  000C62  0E01               	movlw	1
  1686  000C64  1B69               	xorwf	___aldiv@sign& (0+255),f,b
  1687  000C66                     l259:
  1688                           
  1689                           ; BSR set to: 0
  1690                           
  1691                           ; BSR set to: 0
  1692  000C66  0E00               	movlw	0
  1693  000C68  6F6A               	movwf	___aldiv@quotient& (0+255),b
  1694  000C6A  0E00               	movlw	0
  1695  000C6C  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
  1696  000C6E  0E00               	movlw	0
  1697  000C70  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
  1698  000C72  0E00               	movlw	0
  1699  000C74  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
  1700                           
  1701                           ; BSR set to: 0
  1702  000C76  5164               	movf	___aldiv@divisor& (0+255),w,b
  1703  000C78  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1704  000C7A  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1705  000C7C  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1706  000C7E  B4D8               	btfsc	status,2,c
  1707  000C80  D02A               	goto	l266
  1708                           
  1709                           ; BSR set to: 0
  1710  000C82  0E01               	movlw	1
  1711  000C84  6F68               	movwf	___aldiv@counter& (0+255),b
  1712  000C86  D006               	goto	l261
  1713  000C88                     
  1714                           ; BSR set to: 0
  1715                           
  1716                           ; BSR set to: 0
  1717  000C88  90D8               	bcf	status,0,c
  1718  000C8A  3764               	rlcf	___aldiv@divisor& (0+255),f,b
  1719  000C8C  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1720  000C8E  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1721  000C90  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1722  000C92  2B68               	incf	___aldiv@counter& (0+255),f,b
  1723  000C94                     l261:
  1724                           
  1725                           ; BSR set to: 0
  1726                           
  1727                           ; BSR set to: 0
  1728  000C94  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1729  000C96  D7F8               	goto	l262
  1730  000C98                     u1070:
  1731                           
  1732                           ; BSR set to: 0
  1733                           
  1734                           ; BSR set to: 0
  1735                           
  1736                           ; BSR set to: 0
  1737  000C98  90D8               	bcf	status,0,c
  1738  000C9A  376A               	rlcf	___aldiv@quotient& (0+255),f,b
  1739  000C9C  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1740  000C9E  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1741  000CA0  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1742                           
  1743                           ; BSR set to: 0
  1744  000CA2  5164               	movf	___aldiv@divisor& (0+255),w,b
  1745  000CA4  5D60               	subwf	___aldiv@dividend& (0+255),w,b
  1746  000CA6  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1747  000CA8  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1748  000CAA  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1749  000CAC  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1750  000CAE  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1751  000CB0  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1752  000CB2  A0D8               	btfss	status,0,c
  1753  000CB4  D009               	goto	l265
  1754                           
  1755                           ; BSR set to: 0
  1756  000CB6  5164               	movf	___aldiv@divisor& (0+255),w,b
  1757  000CB8  5F60               	subwf	___aldiv@dividend& (0+255),f,b
  1758  000CBA  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1759  000CBC  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1760  000CBE  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1761  000CC0  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1762  000CC2  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1763  000CC4  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1764                           
  1765                           ; BSR set to: 0
  1766  000CC6  816A               	bsf	___aldiv@quotient& (0+255),0,b
  1767  000CC8                     l265:
  1768                           
  1769                           ; BSR set to: 0
  1770                           
  1771                           ; BSR set to: 0
  1772  000CC8  90D8               	bcf	status,0,c
  1773  000CCA  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1774  000CCC  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1775  000CCE  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1776  000CD0  3364               	rrcf	___aldiv@divisor& (0+255),f,b
  1777                           
  1778                           ; BSR set to: 0
  1779  000CD2  2F68               	decfsz	___aldiv@counter& (0+255),f,b
  1780  000CD4  D7E1               	goto	u1070
  1781  000CD6                     l266:
  1782                           
  1783                           ; BSR set to: 0
  1784                           
  1785                           ; BSR set to: 0
  1786                           
  1787                           ; BSR set to: 0
  1788  000CD6  5169               	movf	___aldiv@sign& (0+255),w,b
  1789  000CD8  B4D8               	btfsc	status,2,c
  1790  000CDA  D008               	goto	l267
  1791                           
  1792                           ; BSR set to: 0
  1793  000CDC  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1794  000CDE  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1795  000CE0  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1796  000CE2  6D6A               	negf	___aldiv@quotient& (0+255),b
  1797  000CE4  0E00               	movlw	0
  1798  000CE6  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1799  000CE8  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1800  000CEA  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1801  000CEC                     l267:
  1802                           
  1803                           ; BSR set to: 0
  1804                           
  1805                           ; BSR set to: 0
  1806  000CEC  C06A  F060         	movff	___aldiv@quotient,?___aldiv
  1807  000CF0  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
  1808  000CF4  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
  1809  000CF8  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
  1810  000CFC  0012               	return	
  1811  000CFE                     __end_of___aldiv:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           prodh	equ	0xFF4
  1818                           prodl	equ	0xFF3
  1819                           intcon	equ	0xFF2
  1820                           postinc0	equ	0xFEE
  1821                           wreg	equ	0xFE8
  1822                           postdec1	equ	0xFE5
  1823                           fsr1l	equ	0xFE1
  1824                           postinc2	equ	0xFDE
  1825                           postdec2	equ	0xFDD
  1826                           fsr2h	equ	0xFDA
  1827                           fsr2l	equ	0xFD9
  1828                           status	equ	0xFD8
  1829                           
  1830 ;; *************** function _D_UART_Enable *****************
  1831 ;; Defined at:
  1832 ;;		line 244 in file "Drivers/UART_Driver.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;  enable          1    wreg     unsigned char 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  enable          1    0[BANK0 ] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  1    wreg      void 
  1839 ;; Registers used:
  1840 ;;		wreg, status,2
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1846 ;;      Params:         0       0       0       0       0       0       0       0       0
  1847 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1849 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1850 ;;Total ram usage:        1 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; Hardware stack levels required when called:    6
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_main
  1857 ;;		_D_UART_Init
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text8
  1862  001154                     __ptext8:
  1863                           	opt stack 0
  1864  001154                     _D_UART_Enable:
  1865                           	opt stack 23
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;incstack = 0
  1869                           ;D_UART_Enable@enable stored from wreg
  1870  001154  0100               	movlb	0	; () banked
  1871  001156  6F60               	movwf	D_UART_Enable@enable& (0+255),b
  1872                           
  1873                           ;UART_Driver.c: 245: if(enable) {
  1874  001158  0100               	movlb	0	; () banked
  1875  00115A  5160               	movf	D_UART_Enable@enable& (0+255),w,b
  1876  00115C  B4D8               	btfsc	status,2,c
  1877  00115E  D006               	goto	l146
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  1881  001160  9E94               	bcf	3988,7,c	;volatile
  1882                           
  1883                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  1884  001162  8C94               	bsf	3988,6,c	;volatile
  1885                           
  1886                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  1887  001164  8AAC               	bsf	4012,5,c	;volatile
  1888                           
  1889                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  1890  001166  88AB               	bsf	4011,4,c	;volatile
  1891                           
  1892                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  1893  001168  8EAB               	bsf	4011,7,c	;volatile
  1894                           
  1895                           ;UART_Driver.c: 251: } else {
  1896  00116A  0012               	return	
  1897  00116C                     l146:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  1901  00116C  9E94               	bcf	3988,7,c	;volatile
  1902                           
  1903                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  1904  00116E  9C94               	bcf	3988,6,c	;volatile
  1905                           
  1906                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  1907  001170  9AAC               	bcf	4012,5,c	;volatile
  1908                           
  1909                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  1910  001172  98AB               	bcf	4011,4,c	;volatile
  1911                           
  1912                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  1913  001174  9EAB               	bcf	4011,7,c	;volatile
  1914  001176  0012               	return	
  1915  001178                     __end_of_D_UART_Enable:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           prodh	equ	0xFF4
  1922                           prodl	equ	0xFF3
  1923                           intcon	equ	0xFF2
  1924                           postinc0	equ	0xFEE
  1925                           wreg	equ	0xFE8
  1926                           postdec1	equ	0xFE5
  1927                           fsr1l	equ	0xFE1
  1928                           postinc2	equ	0xFDE
  1929                           postdec2	equ	0xFDD
  1930                           fsr2h	equ	0xFDA
  1931                           fsr2l	equ	0xFD9
  1932                           status	equ	0xFD8
  1933                           
  1934 ;; *************** function _D_PORT_Init *****************
  1935 ;; Defined at:
  1936 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1937 ;; Parameters:    Size  Location     Type
  1938 ;;		None
  1939 ;; Auto vars:     Size  Location     Type
  1940 ;;		None
  1941 ;; Return value:  Size  Location     Type
  1942 ;;                  1    wreg      void 
  1943 ;; Registers used:
  1944 ;;		wreg, status,2
  1945 ;; Tracked objects:
  1946 ;;		On entry : 0/0
  1947 ;;		On exit  : 0/0
  1948 ;;		Unchanged: 0/0
  1949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1950 ;;      Params:         0       0       0       0       0       0       0       0       0
  1951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1953 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1954 ;;Total ram usage:        0 bytes
  1955 ;; Hardware stack levels used:    1
  1956 ;; Hardware stack levels required when called:    6
  1957 ;; This function calls:
  1958 ;;		Nothing
  1959 ;; This function is called by:
  1960 ;;		_main
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text9
  1965  001178                     __ptext9:
  1966                           	opt stack 0
  1967  001178                     _D_PORT_Init:
  1968                           	opt stack 24
  1969                           
  1970                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;incstack = 0
  1974  001178  0E00               	movlw	0
  1975  00117A  6E92               	movwf	3986,c	;volatile
  1976  00117C  0E00               	movlw	0
  1977  00117E  6E80               	movwf	3968,c	;volatile
  1978                           
  1979                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1980  001180  0E00               	movlw	0
  1981  001182  6E93               	movwf	3987,c	;volatile
  1982  001184  0E00               	movlw	0
  1983  001186  6E81               	movwf	3969,c	;volatile
  1984                           
  1985                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1986  001188  0E00               	movlw	0
  1987  00118A  6E94               	movwf	3988,c	;volatile
  1988  00118C  0E00               	movlw	0
  1989  00118E  6E82               	movwf	3970,c	;volatile
  1990                           
  1991                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1992  001190  0E0F               	movlw	15
  1993  001192  6EC1               	movwf	4033,c	;volatile
  1994  001194  0012               	return		;funcret
  1995  001196                     __end_of_D_PORT_Init:
  1996                           	opt stack 0
  1997                           tblptru	equ	0xFF8
  1998                           tblptrh	equ	0xFF7
  1999                           tblptrl	equ	0xFF6
  2000                           tablat	equ	0xFF5
  2001                           prodh	equ	0xFF4
  2002                           prodl	equ	0xFF3
  2003                           intcon	equ	0xFF2
  2004                           postinc0	equ	0xFEE
  2005                           wreg	equ	0xFE8
  2006                           postdec1	equ	0xFE5
  2007                           fsr1l	equ	0xFE1
  2008                           postinc2	equ	0xFDE
  2009                           postdec2	equ	0xFDD
  2010                           fsr2h	equ	0xFDA
  2011                           fsr2l	equ	0xFD9
  2012                           status	equ	0xFD8
  2013                           
  2014 ;; *************** function _C_DOOR_LockAll *****************
  2015 ;; Defined at:
  2016 ;;		line 46 in file "Controllers/DOOR_Controller.c"
  2017 ;; Parameters:    Size  Location     Type
  2018 ;;		None
  2019 ;; Auto vars:     Size  Location     Type
  2020 ;;  d               2    6[BANK0 ] int 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      void 
  2023 ;; Registers used:
  2024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2030 ;;      Params:         0       0       0       0       0       0       0       0       0
  2031 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2032 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2033 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2034 ;;Total ram usage:        2 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; Hardware stack levels required when called:    7
  2037 ;; This function calls:
  2038 ;;		___wmul
  2039 ;; This function is called by:
  2040 ;;		_main
  2041 ;; This function uses a non-reentrant model
  2042 ;;
  2043                           
  2044                           	psect	text10
  2045  0010DC                     __ptext10:
  2046                           	opt stack 0
  2047  0010DC                     _C_DOOR_LockAll:
  2048                           	opt stack 23
  2049                           
  2050                           ;DOOR_Controller.c: 47: int d;
  2051                           ;DOOR_Controller.c: 48: for (d = 0; d < 5; d++) {
  2052                           
  2053                           ;incstack = 0
  2054  0010DC  0E00               	movlw	0
  2055  0010DE  0100               	movlb	0	; () banked
  2056  0010E0  6F67               	movwf	(C_DOOR_LockAll@d+1)& (0+255),b
  2057  0010E2  0E00               	movlw	0
  2058  0010E4  6F66               	movwf	C_DOOR_LockAll@d& (0+255),b
  2059  0010E6                     l1708:
  2060                           
  2061                           ; BSR set to: 0
  2062  0010E6  BF67               	btfsc	(C_DOOR_LockAll@d+1)& (0+255),7,b
  2063  0010E8  D006               	goto	l173
  2064  0010EA  5167               	movf	(C_DOOR_LockAll@d+1)& (0+255),w,b
  2065  0010EC  E11E               	bnz	l175
  2066  0010EE  0E05               	movlw	5
  2067  0010F0  5D66               	subwf	C_DOOR_LockAll@d& (0+255),w,b
  2068  0010F2  B0D8               	btfsc	status,0,c
  2069  0010F4  0012               	return	
  2070  0010F6                     l173:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;DOOR_Controller.c: 49: doors[d].is_locked = 1;
  2074                           
  2075                           ; BSR set to: 0
  2076  0010F6  C066  F060         	movff	C_DOOR_LockAll@d,___wmul@multiplier
  2077  0010FA  C067  F061         	movff	C_DOOR_LockAll@d+1,___wmul@multiplier+1
  2078  0010FE  0E00               	movlw	0
  2079  001100  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2080  001102  0E03               	movlw	3
  2081  001104  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2082  001106  EC96  F008         	call	___wmul	;wreg free
  2083  00110A  0E02               	movlw	2
  2084  00110C  0100               	movlb	0	; () banked
  2085  00110E  2760               	addwf	?___wmul& (0+255),f,b
  2086  001110  0E00               	movlw	0
  2087  001112  2361               	addwfc	(?___wmul+1)& (0+255),f,b
  2088  001114  0E7C               	movlw	low _doors
  2089  001116  2560               	addwf	?___wmul& (0+255),w,b
  2090  001118  6ED9               	movwf	fsr2l,c
  2091  00111A  0E00               	movlw	high _doors
  2092  00111C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2093  00111E  6EDA               	movwf	fsr2h,c
  2094  001120  0E01               	movlw	1
  2095  001122  6EDF               	movwf	indf2,c
  2096                           
  2097                           ; BSR set to: 0
  2098  001124  4B66               	infsnz	C_DOOR_LockAll@d& (0+255),f,b
  2099  001126  2B67               	incf	(C_DOOR_LockAll@d+1)& (0+255),f,b
  2100  001128  D7DE               	goto	l1708
  2101  00112A                     l175:
  2102                           
  2103                           ; BSR set to: 0
  2104  00112A  0012               	return		;funcret
  2105  00112C                     __end_of_C_DOOR_LockAll:
  2106                           	opt stack 0
  2107                           tblptru	equ	0xFF8
  2108                           tblptrh	equ	0xFF7
  2109                           tblptrl	equ	0xFF6
  2110                           tablat	equ	0xFF5
  2111                           prodh	equ	0xFF4
  2112                           prodl	equ	0xFF3
  2113                           intcon	equ	0xFF2
  2114                           postinc0	equ	0xFEE
  2115                           wreg	equ	0xFE8
  2116                           postdec1	equ	0xFE5
  2117                           fsr1l	equ	0xFE1
  2118                           indf2	equ	0xFDF
  2119                           postinc2	equ	0xFDE
  2120                           postdec2	equ	0xFDD
  2121                           fsr2h	equ	0xFDA
  2122                           fsr2l	equ	0xFD9
  2123                           status	equ	0xFD8
  2124                           
  2125 ;; *************** function _C_DOOR_Init *****************
  2126 ;; Defined at:
  2127 ;;		line 25 in file "Controllers/DOOR_Controller.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  d               2    6[BANK0 ] int 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  1    wreg      void 
  2134 ;; Registers used:
  2135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2141 ;;      Params:         0       0       0       0       0       0       0       0       0
  2142 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2144 ;;      Totals:         0       2       0       0       0       0       0       0       0
  2145 ;;Total ram usage:        2 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    7
  2148 ;; This function calls:
  2149 ;;		___wmul
  2150 ;; This function is called by:
  2151 ;;		_main
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           	psect	text11
  2156  000DCA                     __ptext11:
  2157                           	opt stack 0
  2158  000DCA                     _C_DOOR_Init:
  2159                           	opt stack 23
  2160                           
  2161                           ;DOOR_Controller.c: 29: int d;
  2162                           ;DOOR_Controller.c: 30: for (d = 0; d < 5; d++) {
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;incstack = 0
  2166  000DCA  0E00               	movlw	0
  2167  000DCC  0100               	movlb	0	; () banked
  2168  000DCE  6F67               	movwf	(C_DOOR_Init@d+1)& (0+255),b
  2169  000DD0  0E00               	movlw	0
  2170  000DD2  6F66               	movwf	C_DOOR_Init@d& (0+255),b
  2171  000DD4                     l1696:
  2172                           
  2173                           ; BSR set to: 0
  2174  000DD4  BF67               	btfsc	(C_DOOR_Init@d+1)& (0+255),7,b
  2175  000DD6  D006               	goto	l162
  2176  000DD8  5167               	movf	(C_DOOR_Init@d+1)& (0+255),w,b
  2177  000DDA  E148               	bnz	l164
  2178  000DDC  0E05               	movlw	5
  2179  000DDE  5D66               	subwf	C_DOOR_Init@d& (0+255),w,b
  2180  000DE0  B0D8               	btfsc	status,0,c
  2181  000DE2  0012               	return	
  2182  000DE4                     l162:
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;DOOR_Controller.c: 31: doors[d].id = d;
  2186                           
  2187                           ; BSR set to: 0
  2188  000DE4  C066  F060         	movff	C_DOOR_Init@d,___wmul@multiplier
  2189  000DE8  C067  F061         	movff	C_DOOR_Init@d+1,___wmul@multiplier+1
  2190  000DEC  0E00               	movlw	0
  2191  000DEE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2192  000DF0  0E03               	movlw	3
  2193  000DF2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2194  000DF4  EC96  F008         	call	___wmul	;wreg free
  2195  000DF8  0E7C               	movlw	low _doors
  2196  000DFA  0100               	movlb	0	; () banked
  2197  000DFC  2560               	addwf	?___wmul& (0+255),w,b
  2198  000DFE  6ED9               	movwf	fsr2l,c
  2199  000E00  0E00               	movlw	high _doors
  2200  000E02  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2201  000E04  6EDA               	movwf	fsr2h,c
  2202  000E06  C066  FFDF         	movff	C_DOOR_Init@d,indf2
  2203                           
  2204                           ;DOOR_Controller.c: 32: doors[d].is_locked = 1;
  2205  000E0A  C066  F060         	movff	C_DOOR_Init@d,___wmul@multiplier
  2206  000E0E  C067  F061         	movff	C_DOOR_Init@d+1,___wmul@multiplier+1
  2207  000E12  0E00               	movlw	0
  2208  000E14  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2209  000E16  0E03               	movlw	3
  2210  000E18  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2211  000E1A  EC96  F008         	call	___wmul	;wreg free
  2212  000E1E  0E02               	movlw	2
  2213  000E20  0100               	movlb	0	; () banked
  2214  000E22  2760               	addwf	?___wmul& (0+255),f,b
  2215  000E24  0E00               	movlw	0
  2216  000E26  2361               	addwfc	(?___wmul+1)& (0+255),f,b
  2217  000E28  0E7C               	movlw	low _doors
  2218  000E2A  2560               	addwf	?___wmul& (0+255),w,b
  2219  000E2C  6ED9               	movwf	fsr2l,c
  2220  000E2E  0E00               	movlw	high _doors
  2221  000E30  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2222  000E32  6EDA               	movwf	fsr2h,c
  2223  000E34  0E01               	movlw	1
  2224  000E36  6EDF               	movwf	indf2,c
  2225                           
  2226                           ;DOOR_Controller.c: 33: doors[d].is_open = 0;
  2227  000E38  C066  F060         	movff	C_DOOR_Init@d,___wmul@multiplier
  2228  000E3C  C067  F061         	movff	C_DOOR_Init@d+1,___wmul@multiplier+1
  2229  000E40  0E00               	movlw	0
  2230  000E42  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2231  000E44  0E03               	movlw	3
  2232  000E46  6F62               	movwf	___wmul@multiplicand& (0+255),b
  2233  000E48  EC96  F008         	call	___wmul	;wreg free
  2234  000E4C  0E01               	movlw	1
  2235  000E4E  0100               	movlb	0	; () banked
  2236  000E50  2760               	addwf	?___wmul& (0+255),f,b
  2237  000E52  0E00               	movlw	0
  2238  000E54  2361               	addwfc	(?___wmul+1)& (0+255),f,b
  2239  000E56  0E7C               	movlw	low _doors
  2240  000E58  2560               	addwf	?___wmul& (0+255),w,b
  2241  000E5A  6ED9               	movwf	fsr2l,c
  2242  000E5C  0E00               	movlw	high _doors
  2243  000E5E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  2244  000E60  6EDA               	movwf	fsr2h,c
  2245  000E62  0E00               	movlw	0
  2246  000E64  6EDF               	movwf	indf2,c
  2247                           
  2248                           ; BSR set to: 0
  2249  000E66  4B66               	infsnz	C_DOOR_Init@d& (0+255),f,b
  2250  000E68  2B67               	incf	(C_DOOR_Init@d+1)& (0+255),f,b
  2251  000E6A  D7B4               	goto	l1696
  2252  000E6C                     l164:
  2253                           
  2254                           ; BSR set to: 0
  2255  000E6C  0012               	return		;funcret
  2256  000E6E                     __end_of_C_DOOR_Init:
  2257                           	opt stack 0
  2258                           tblptru	equ	0xFF8
  2259                           tblptrh	equ	0xFF7
  2260                           tblptrl	equ	0xFF6
  2261                           tablat	equ	0xFF5
  2262                           prodh	equ	0xFF4
  2263                           prodl	equ	0xFF3
  2264                           intcon	equ	0xFF2
  2265                           postinc0	equ	0xFEE
  2266                           wreg	equ	0xFE8
  2267                           postdec1	equ	0xFE5
  2268                           fsr1l	equ	0xFE1
  2269                           indf2	equ	0xFDF
  2270                           postinc2	equ	0xFDE
  2271                           postdec2	equ	0xFDD
  2272                           fsr2h	equ	0xFDA
  2273                           fsr2l	equ	0xFD9
  2274                           status	equ	0xFD8
  2275                           
  2276 ;; *************** function ___wmul *****************
  2277 ;; Defined at:
  2278 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2281 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  product         2    4[BANK0 ] unsigned int 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  2    0[BANK0 ] unsigned int 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2, status,0, prodl, prodh
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2293 ;;      Params:         0       4       0       0       0       0       0       0       0
  2294 ;;      Locals:         0       2       0       0       0       0       0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2296 ;;      Totals:         0       6       0       0       0       0       0       0       0
  2297 ;;Total ram usage:        6 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    6
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_C_DOOR_Init
  2304 ;;		_C_DOOR_LockAll
  2305 ;;		_C_DOOR_Lock
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text12
  2310  00112C                     __ptext12:
  2311                           	opt stack 0
  2312  00112C                     ___wmul:
  2313                           	opt stack 23
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;incstack = 0
  2317  00112C  0100               	movlb	0	; () banked
  2318  00112E  5160               	movf	___wmul@multiplier& (0+255),w,b
  2319  001130  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2320  001132  CFF3 F064          	movff	prodl,___wmul@product
  2321  001136  CFF4 F065          	movff	prodh,___wmul@product+1
  2322  00113A  5160               	movf	___wmul@multiplier& (0+255),w,b
  2323  00113C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2324  00113E  50F3               	movf	prodl,w,c
  2325  001140  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2326  001142  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2327  001144  0362               	mulwf	___wmul@multiplicand& (0+255),b
  2328  001146  50F3               	movf	prodl,w,c
  2329  001148  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  2330                           
  2331                           ; BSR set to: 0
  2332  00114A  C064  F060         	movff	___wmul@product,?___wmul
  2333  00114E  C065  F061         	movff	___wmul@product+1,?___wmul+1
  2334  001152  0012               	return	
  2335  001154                     __end_of___wmul:
  2336                           	opt stack 0
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           intcon	equ	0xFF2
  2344                           postinc0	equ	0xFEE
  2345                           wreg	equ	0xFE8
  2346                           postdec1	equ	0xFE5
  2347                           fsr1l	equ	0xFE1
  2348                           indf2	equ	0xFDF
  2349                           postinc2	equ	0xFDE
  2350                           postdec2	equ	0xFDD
  2351                           fsr2h	equ	0xFDA
  2352                           fsr2l	equ	0xFD9
  2353                           status	equ	0xFD8
  2354                           
  2355 ;; *************** function _LowISR *****************
  2356 ;; Defined at:
  2357 ;;		line 264 in file "Drivers/UART_Driver.c"
  2358 ;; Parameters:    Size  Location     Type
  2359 ;;		None
  2360 ;; Auto vars:     Size  Location     Type
  2361 ;;		None
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  1    wreg      void 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2371 ;;      Params:         0       0       0       0       0       0       0       0       0
  2372 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2373 ;;      Temps:         21       0       0       0       0       0       0       0       0
  2374 ;;      Totals:        21       0       0       0       0       0       0       0       0
  2375 ;;Total ram usage:       21 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    5
  2378 ;; This function calls:
  2379 ;;		_fillDataBuffer
  2380 ;;		_readByte
  2381 ;; This function is called by:
  2382 ;;		Interrupt level 1
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	intcodelo
  2387  000018                     __pintcodelo:
  2388                           	opt stack 0
  2389  000018                     _LowISR:
  2390                           	opt stack 21
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;incstack = 0
  2394  000018  8041               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2395  00001A  CFD8 F019          	movff	status,??_LowISR
  2396  00001E  CFE8 F01A          	movff	wreg,??_LowISR+1
  2397  000022  CFE0 F01B          	movff	bsr,??_LowISR+2
  2398  000026  CFFA F01C          	movff	pclath,??_LowISR+3
  2399  00002A  CFFB F01D          	movff	pclatu,??_LowISR+4
  2400  00002E  CFE9 F01E          	movff	fsr0l,??_LowISR+5
  2401  000032  CFEA F01F          	movff	fsr0h,??_LowISR+6
  2402  000036  CFE1 F020          	movff	fsr1l,??_LowISR+7
  2403  00003A  CFE2 F021          	movff	fsr1h,??_LowISR+8
  2404  00003E  CFD9 F022          	movff	fsr2l,??_LowISR+9
  2405  000042  CFDA F023          	movff	fsr2h,??_LowISR+10
  2406  000046  CFF3 F024          	movff	prodl,??_LowISR+11
  2407  00004A  CFF4 F025          	movff	prodh,??_LowISR+12
  2408  00004E  CFF6 F026          	movff	tblptrl,??_LowISR+13
  2409  000052  CFF7 F027          	movff	tblptrh,??_LowISR+14
  2410  000056  CFF8 F028          	movff	tblptru,??_LowISR+15
  2411  00005A  CFF5 F029          	movff	tablat,??_LowISR+16
  2412  00005E  C041  F02A         	movff	btemp,??_LowISR+17
  2413  000062  C042  F02B         	movff	btemp+1,??_LowISR+18
  2414  000066  C043  F02C         	movff	btemp+2,??_LowISR+19
  2415  00006A  C044  F02D         	movff	btemp+3,??_LowISR+20
  2416                           
  2417                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  2418  00006E  AA9E               	btfss	3998,5,c	;volatile
  2419  000070  D005               	goto	i1l156
  2420                           
  2421                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  2422  000072  ECE4  F008         	call	_readByte	;wreg free
  2423  000076  EC1B  F004         	call	_fillDataBuffer
  2424                           
  2425                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  2426  00007A  9A9E               	bcf	3998,5,c	;volatile
  2427  00007C                     i1l156:
  2428  00007C  C02D  F044         	movff	??_LowISR+20,btemp+3
  2429  000080  C02C  F043         	movff	??_LowISR+19,btemp+2
  2430  000084  C02B  F042         	movff	??_LowISR+18,btemp+1
  2431  000088  C02A  F041         	movff	??_LowISR+17,btemp
  2432  00008C  C029  FFF5         	movff	??_LowISR+16,tablat
  2433  000090  C028  FFF8         	movff	??_LowISR+15,tblptru
  2434  000094  C027  FFF7         	movff	??_LowISR+14,tblptrh
  2435  000098  C026  FFF6         	movff	??_LowISR+13,tblptrl
  2436  00009C  C025  FFF4         	movff	??_LowISR+12,prodh
  2437  0000A0  C024  FFF3         	movff	??_LowISR+11,prodl
  2438  0000A4  C023  FFDA         	movff	??_LowISR+10,fsr2h
  2439  0000A8  C022  FFD9         	movff	??_LowISR+9,fsr2l
  2440  0000AC  C021  FFE2         	movff	??_LowISR+8,fsr1h
  2441  0000B0  C020  FFE1         	movff	??_LowISR+7,fsr1l
  2442  0000B4  C01F  FFEA         	movff	??_LowISR+6,fsr0h
  2443  0000B8  C01E  FFE9         	movff	??_LowISR+5,fsr0l
  2444  0000BC  C01D  FFFB         	movff	??_LowISR+4,pclatu
  2445  0000C0  C01C  FFFA         	movff	??_LowISR+3,pclath
  2446  0000C4  C01B  FFE0         	movff	??_LowISR+2,bsr
  2447  0000C8  C01A  FFE8         	movff	??_LowISR+1,wreg
  2448  0000CC  C019  FFD8         	movff	??_LowISR,status
  2449  0000D0  9041               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2450  0000D2  0010               	retfie	
  2451  0000D4                     __end_of_LowISR:
  2452                           	opt stack 0
  2453                           pclatu	equ	0xFFB
  2454                           pclath	equ	0xFFA
  2455                           tblptru	equ	0xFF8
  2456                           tblptrh	equ	0xFF7
  2457                           tblptrl	equ	0xFF6
  2458                           tablat	equ	0xFF5
  2459                           prodh	equ	0xFF4
  2460                           prodl	equ	0xFF3
  2461                           intcon	equ	0xFF2
  2462                           postinc0	equ	0xFEE
  2463                           fsr0h	equ	0xFEA
  2464                           fsr0l	equ	0xFE9
  2465                           wreg	equ	0xFE8
  2466                           postdec1	equ	0xFE5
  2467                           fsr1h	equ	0xFE2
  2468                           fsr1l	equ	0xFE1
  2469                           bsr	equ	0xFE0
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function _readByte *****************
  2478 ;; Defined at:
  2479 ;;		line 74 in file "Drivers/UART_Driver.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      unsigned char 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2493 ;;      Params:         0       0       0       0       0       0       0       0       0
  2494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2496 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2497 ;;Total ram usage:        0 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; This function calls:
  2500 ;;		Nothing
  2501 ;; This function is called by:
  2502 ;;		_LowISR
  2503 ;; This function uses a non-reentrant model
  2504 ;;
  2505                           
  2506                           	psect	text14
  2507  0011C8                     __ptext14:
  2508                           	opt stack 0
  2509  0011C8                     _readByte:
  2510                           	opt stack 25
  2511                           
  2512                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  2513                           
  2514                           ;incstack = 0
  2515  0011C8  50AB               	movf	4011,w,c	;volatile
  2516                           
  2517                           ;UART_Driver.c: 77: }
  2518                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  2519  0011CA  50AB               	movf	4011,w,c	;volatile
  2520                           
  2521                           ;UART_Driver.c: 80: }
  2522                           ;UART_Driver.c: 81: return RCREG;
  2523  0011CC  50AE               	movf	4014,w,c	;volatile
  2524  0011CE  0012               	return	
  2525  0011D0                     __end_of_readByte:
  2526                           	opt stack 0
  2527                           pclatu	equ	0xFFB
  2528                           pclath	equ	0xFFA
  2529                           tblptru	equ	0xFF8
  2530                           tblptrh	equ	0xFF7
  2531                           tblptrl	equ	0xFF6
  2532                           tablat	equ	0xFF5
  2533                           prodh	equ	0xFF4
  2534                           prodl	equ	0xFF3
  2535                           intcon	equ	0xFF2
  2536                           postinc0	equ	0xFEE
  2537                           fsr0h	equ	0xFEA
  2538                           fsr0l	equ	0xFE9
  2539                           wreg	equ	0xFE8
  2540                           postdec1	equ	0xFE5
  2541                           fsr1h	equ	0xFE2
  2542                           fsr1l	equ	0xFE1
  2543                           bsr	equ	0xFE0
  2544                           indf2	equ	0xFDF
  2545                           postinc2	equ	0xFDE
  2546                           postdec2	equ	0xFDD
  2547                           fsr2h	equ	0xFDA
  2548                           fsr2l	equ	0xFD9
  2549                           status	equ	0xFD8
  2550                           
  2551 ;; *************** function _fillDataBuffer *****************
  2552 ;; Defined at:
  2553 ;;		line 84 in file "Drivers/UART_Driver.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  data            1    wreg     unsigned char 
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;  data            1   23[COMRAM] unsigned char 
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0
  2568 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2570 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2571 ;;Total ram usage:        1 bytes
  2572 ;; Hardware stack levels used:    1
  2573 ;; Hardware stack levels required when called:    4
  2574 ;; This function calls:
  2575 ;;		_acknowledge
  2576 ;; This function is called by:
  2577 ;;		_LowISR
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text15
  2582  000836                     __ptext15:
  2583                           	opt stack 0
  2584  000836                     _fillDataBuffer:
  2585                           	opt stack 21
  2586                           
  2587                           ;incstack = 0
  2588                           ;fillDataBuffer@data stored from wreg
  2589  000836  6E18               	movwf	fillDataBuffer@data,c
  2590                           
  2591                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  2592  000838  D0B5               	goto	i1l105
  2593  00083A                     
  2594                           ;UART_Driver.c: 87: if(data == 0x26) {
  2595  00083A  0E26               	movlw	38
  2596  00083C  1818               	xorwf	fillDataBuffer@data,w,c
  2597  00083E  A4D8               	btfss	status,2,c
  2598  000840  D010               	goto	i1l107
  2599                           
  2600                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  2601  000842  0E00               	movlw	0
  2602  000844  0101               	movlb	1	; () banked
  2603  000846  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2604                           
  2605                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  2606  000848  0E00               	movlw	0
  2607  00084A  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2608                           
  2609                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  2610  00084C  0E00               	movlw	0
  2611  00084E  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2612                           
  2613                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  2614  000850  0E00               	movlw	0
  2615  000852  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2616                           
  2617                           ;UART_Driver.c: 92: readReady = 0;
  2618  000854  0E00               	movlw	0
  2619  000856  0100               	movlb	0	; () banked
  2620  000858  6F8E               	movwf	_readReady& (0+255),b
  2621                           
  2622                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  2623  00085A  0E01               	movlw	1
  2624  00085C  0101               	movlb	1	; () banked
  2625  00085E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2626                           
  2627                           ;UART_Driver.c: 94: } else {
  2628  000860  0012               	return	
  2629  000862                     i1l107:
  2630                           
  2631                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  2632                           
  2633                           ; BSR set to: 1
  2634  000862  0E00               	movlw	0
  2635  000864  0101               	movlb	1	; () banked
  2636  000866  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2637                           
  2638                           ; BSR set to: 1
  2639                           ;UART_Driver.c: 97: }
  2640                           ;UART_Driver.c: 98: break;
  2641                           
  2642                           ; BSR set to: 1
  2643                           ;UART_Driver.c: 96: return;
  2644  000868  0012               	return	
  2645  00086A                     
  2646                           ; BSR set to: 1
  2647                           ;UART_Driver.c: 101: if (data == 0x3A) {
  2648                           
  2649                           ; BSR set to: 1
  2650  00086A  0E3A               	movlw	58
  2651  00086C  1818               	xorwf	fillDataBuffer@data,w,c
  2652  00086E  A4D8               	btfss	status,2,c
  2653  000870  D00D               	goto	i1l112
  2654                           
  2655                           ; BSR set to: 1
  2656                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  2657  000872  0E02               	movlw	2
  2658  000874  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2659                           
  2660                           ; BSR set to: 1
  2661                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  2662  000876  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2663  000878  0D01               	mullw	1
  2664  00087A  0E00               	movlw	low _readBuffer
  2665  00087C  24F3               	addwf	prodl,w,c
  2666  00087E  6ED9               	movwf	fsr2l,c
  2667  000880  0E01               	movlw	high _readBuffer
  2668  000882  20F4               	addwfc	prodh,w,c
  2669  000884  6EDA               	movwf	fsr2h,c
  2670  000886  0E00               	movlw	0
  2671  000888  6EDF               	movwf	indf2,c
  2672                           
  2673                           ;UART_Driver.c: 104: } else {
  2674  00088A  0012               	return	
  2675  00088C                     i1l112:
  2676                           
  2677                           ; BSR set to: 1
  2678                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  2679                           
  2680                           ; BSR set to: 1
  2681  00088C  510A               	movf	(_readBuffer+10)& (0+255),w,b
  2682  00088E  0D01               	mullw	1
  2683  000890  0E00               	movlw	low _readBuffer
  2684  000892  24F3               	addwf	prodl,w,c
  2685  000894  6ED9               	movwf	fsr2l,c
  2686  000896  0E01               	movlw	high _readBuffer
  2687  000898  20F4               	addwfc	prodh,w,c
  2688  00089A  6EDA               	movwf	fsr2h,c
  2689  00089C  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2690                           
  2691                           ; BSR set to: 1
  2692                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  2693  0008A0  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  2694                           
  2695                           ; BSR set to: 1
  2696                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  2697  0008A2  0E0A               	movlw	10
  2698  0008A4  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  2699  0008A6  0012               	return	
  2700                           
  2701                           ; BSR set to: 1
  2702                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  2703  0008A8  0E00               	movlw	0
  2704  0008AA  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  2705                           
  2706                           ; BSR set to: 1
  2707                           ;UART_Driver.c: 109: }
  2708                           ;UART_Driver.c: 110: }
  2709                           ;UART_Driver.c: 111: break;
  2710                           
  2711                           ; BSR set to: 1
  2712  0008AC  0012               	return	
  2713  0008AE                     
  2714                           ; BSR set to: 1
  2715                           ;UART_Driver.c: 114: if (data == 0x3A) {
  2716                           
  2717                           ; BSR set to: 1
  2718  0008AE  0E3A               	movlw	58
  2719  0008B0  1818               	xorwf	fillDataBuffer@data,w,c
  2720  0008B2  A4D8               	btfss	status,2,c
  2721  0008B4  D00D               	goto	i1l116
  2722                           
  2723                           ; BSR set to: 1
  2724                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  2725  0008B6  0E03               	movlw	3
  2726  0008B8  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2727                           
  2728                           ; BSR set to: 1
  2729                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  2730  0008BA  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2731  0008BC  0D01               	mullw	1
  2732  0008BE  0E0B               	movlw	low (_readBuffer+11)
  2733  0008C0  24F3               	addwf	prodl,w,c
  2734  0008C2  6ED9               	movwf	fsr2l,c
  2735  0008C4  0E01               	movlw	high (_readBuffer+11)
  2736  0008C6  20F4               	addwfc	prodh,w,c
  2737  0008C8  6EDA               	movwf	fsr2h,c
  2738  0008CA  0E00               	movlw	0
  2739  0008CC  6EDF               	movwf	indf2,c
  2740                           
  2741                           ;UART_Driver.c: 117: } else {
  2742  0008CE  0012               	return	
  2743  0008D0                     i1l116:
  2744                           
  2745                           ; BSR set to: 1
  2746                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  2747                           
  2748                           ; BSR set to: 1
  2749  0008D0  513D               	movf	(_readBuffer+61)& (0+255),w,b
  2750  0008D2  0D01               	mullw	1
  2751  0008D4  0E0B               	movlw	low (_readBuffer+11)
  2752  0008D6  24F3               	addwf	prodl,w,c
  2753  0008D8  6ED9               	movwf	fsr2l,c
  2754  0008DA  0E01               	movlw	high (_readBuffer+11)
  2755  0008DC  20F4               	addwfc	prodh,w,c
  2756  0008DE  6EDA               	movwf	fsr2h,c
  2757  0008E0  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2758                           
  2759                           ; BSR set to: 1
  2760                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  2761  0008E4  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  2762                           
  2763                           ; BSR set to: 1
  2764                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  2765  0008E6  0E32               	movlw	50
  2766  0008E8  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  2767  0008EA  0012               	return	
  2768                           
  2769                           ; BSR set to: 1
  2770                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  2771  0008EC  0E00               	movlw	0
  2772  0008EE  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  2773                           
  2774                           ; BSR set to: 1
  2775                           ;UART_Driver.c: 122: }
  2776                           ;UART_Driver.c: 123: }
  2777                           ;UART_Driver.c: 124: break;
  2778                           
  2779                           ; BSR set to: 1
  2780  0008F0  0012               	return	
  2781  0008F2                     
  2782                           ; BSR set to: 1
  2783                           ;UART_Driver.c: 127: if (data == 0x3A) {
  2784                           
  2785                           ; BSR set to: 1
  2786  0008F2  0E3A               	movlw	58
  2787  0008F4  1818               	xorwf	fillDataBuffer@data,w,c
  2788  0008F6  A4D8               	btfss	status,2,c
  2789  0008F8  D00D               	goto	i1l120
  2790                           
  2791                           ; BSR set to: 1
  2792                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  2793  0008FA  0E04               	movlw	4
  2794  0008FC  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2795                           
  2796                           ; BSR set to: 1
  2797                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  2798  0008FE  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2799  000900  0D01               	mullw	1
  2800  000902  0E3E               	movlw	low (_readBuffer+62)
  2801  000904  24F3               	addwf	prodl,w,c
  2802  000906  6ED9               	movwf	fsr2l,c
  2803  000908  0E01               	movlw	high (_readBuffer+62)
  2804  00090A  20F4               	addwfc	prodh,w,c
  2805  00090C  6EDA               	movwf	fsr2h,c
  2806  00090E  0E00               	movlw	0
  2807  000910  6EDF               	movwf	indf2,c
  2808                           
  2809                           ;UART_Driver.c: 130: } else {
  2810  000912  0012               	return	
  2811  000914                     i1l120:
  2812                           
  2813                           ; BSR set to: 1
  2814                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  2815                           
  2816                           ; BSR set to: 1
  2817  000914  5170               	movf	(_readBuffer+112)& (0+255),w,b
  2818  000916  0D01               	mullw	1
  2819  000918  0E3E               	movlw	low (_readBuffer+62)
  2820  00091A  24F3               	addwf	prodl,w,c
  2821  00091C  6ED9               	movwf	fsr2l,c
  2822  00091E  0E01               	movlw	high (_readBuffer+62)
  2823  000920  20F4               	addwfc	prodh,w,c
  2824  000922  6EDA               	movwf	fsr2h,c
  2825  000924  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2826                           
  2827                           ; BSR set to: 1
  2828                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  2829  000928  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  2830                           
  2831                           ; BSR set to: 1
  2832                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  2833  00092A  0E32               	movlw	50
  2834  00092C  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  2835  00092E  0012               	return	
  2836                           
  2837                           ; BSR set to: 1
  2838                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  2839  000930  0E00               	movlw	0
  2840  000932  6F70               	movwf	(_readBuffer+112)& (0+255),b
  2841                           
  2842                           ; BSR set to: 1
  2843                           ;UART_Driver.c: 135: }
  2844                           ;UART_Driver.c: 136: }
  2845                           ;UART_Driver.c: 137: break;
  2846                           
  2847                           ; BSR set to: 1
  2848  000934  0012               	return	
  2849  000936                     
  2850                           ; BSR set to: 1
  2851                           ;UART_Driver.c: 140: if (data == 0x3A) {
  2852                           
  2853                           ; BSR set to: 1
  2854  000936  0E3A               	movlw	58
  2855  000938  1818               	xorwf	fillDataBuffer@data,w,c
  2856  00093A  A4D8               	btfss	status,2,c
  2857  00093C  D00D               	goto	i1l124
  2858                           
  2859                           ; BSR set to: 1
  2860                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  2861  00093E  0E05               	movlw	5
  2862  000940  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2863                           
  2864                           ; BSR set to: 1
  2865                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  2866  000942  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2867  000944  0D01               	mullw	1
  2868  000946  0E71               	movlw	low (_readBuffer+113)
  2869  000948  24F3               	addwf	prodl,w,c
  2870  00094A  6ED9               	movwf	fsr2l,c
  2871  00094C  0E01               	movlw	high (_readBuffer+113)
  2872  00094E  20F4               	addwfc	prodh,w,c
  2873  000950  6EDA               	movwf	fsr2h,c
  2874  000952  0E00               	movlw	0
  2875  000954  6EDF               	movwf	indf2,c
  2876                           
  2877                           ;UART_Driver.c: 143: } else {
  2878  000956  0012               	return	
  2879  000958                     i1l124:
  2880                           
  2881                           ; BSR set to: 1
  2882                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  2883                           
  2884                           ; BSR set to: 1
  2885  000958  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  2886  00095A  0D01               	mullw	1
  2887  00095C  0E71               	movlw	low (_readBuffer+113)
  2888  00095E  24F3               	addwf	prodl,w,c
  2889  000960  6ED9               	movwf	fsr2l,c
  2890  000962  0E01               	movlw	high (_readBuffer+113)
  2891  000964  20F4               	addwfc	prodh,w,c
  2892  000966  6EDA               	movwf	fsr2h,c
  2893  000968  C018  FFDF         	movff	fillDataBuffer@data,indf2
  2894                           
  2895                           ; BSR set to: 1
  2896                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  2897  00096C  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  2898                           
  2899                           ; BSR set to: 1
  2900                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  2901  00096E  0E32               	movlw	50
  2902  000970  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  2903  000972  0012               	return	
  2904                           
  2905                           ; BSR set to: 1
  2906                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  2907  000974  0E00               	movlw	0
  2908  000976  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  2909                           
  2910                           ; BSR set to: 1
  2911                           ;UART_Driver.c: 148: }
  2912                           ;UART_Driver.c: 149: }
  2913                           ;UART_Driver.c: 150: break;
  2914                           
  2915                           ; BSR set to: 1
  2916  000978  0012               	return	
  2917  00097A                     
  2918                           ; BSR set to: 1
  2919                           ;UART_Driver.c: 153: if (data == 0x24) {
  2920                           
  2921                           ; BSR set to: 1
  2922  00097A  0E24               	movlw	36
  2923  00097C  1818               	xorwf	fillDataBuffer@data,w,c
  2924  00097E  A4D8               	btfss	status,2,c
  2925  000980  D009               	goto	i1l128
  2926                           
  2927                           ; BSR set to: 1
  2928                           ;UART_Driver.c: 154: acknowledge();
  2929  000982  ECBD  F007         	call	_acknowledge	;wreg free
  2930                           
  2931                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  2932  000986  0E00               	movlw	0
  2933  000988  0101               	movlb	1	; () banked
  2934  00098A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2935                           
  2936                           ; BSR set to: 1
  2937                           ;UART_Driver.c: 156: readReady = 1;
  2938  00098C  0E01               	movlw	1
  2939  00098E  0100               	movlb	0	; () banked
  2940  000990  6F8E               	movwf	_readReady& (0+255),b
  2941                           
  2942                           ;UART_Driver.c: 157: } else {
  2943  000992  0012               	return	
  2944  000994                     i1l128:
  2945                           
  2946                           ;UART_Driver.c: 159: readBuffer.readId = (data - 0x30);
  2947                           
  2948                           ; BSR set to: 0
  2949  000994  5018               	movf	fillDataBuffer@data,w,c
  2950  000996  0FD0               	addlw	208
  2951  000998  0101               	movlb	1	; () banked
  2952  00099A  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  2953                           
  2954                           ; BSR set to: 1
  2955                           ;UART_Driver.c: 160: }
  2956                           ;UART_Driver.c: 161: break;
  2957  00099C  0012               	return	
  2958  00099E                     
  2959                           ; BSR set to: 1
  2960                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  2961                           
  2962                           ; BSR set to: 1
  2963  00099E  0E00               	movlw	0
  2964  0009A0  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  2965                           
  2966                           ; BSR set to: 1
  2967                           ;UART_Driver.c: 166: }
  2968                           
  2969                           ;UART_Driver.c: 165: break;
  2970  0009A2  0012               	return	
  2971  0009A4                     i1l105:
  2972                           
  2973                           ; BSR set to: 1
  2974  0009A4  0101               	movlb	1	; () banked
  2975  0009A6  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  2976                           
  2977                           ; Switch size 1, requested type "space"
  2978                           ; Number of cases is 6, Range of values is 0 to 5
  2979                           ; switch strategies available:
  2980                           ; Name         Instructions Cycles
  2981                           ; simple_byte           19    10 (average)
  2982                           ;	Chosen strategy is simple_byte
  2983  0009A8  0A00               	xorlw	0	; case 0
  2984  0009AA  B4D8               	btfsc	status,2,c
  2985  0009AC  D746               	goto	i1l106
  2986  0009AE  0A01               	xorlw	1	; case 1
  2987  0009B0  B4D8               	btfsc	status,2,c
  2988  0009B2  D75B               	goto	i1l111
  2989  0009B4  0A03               	xorlw	3	; case 2
  2990  0009B6  B4D8               	btfsc	status,2,c
  2991  0009B8  D77A               	goto	i1l115
  2992  0009BA  0A01               	xorlw	1	; case 3
  2993  0009BC  B4D8               	btfsc	status,2,c
  2994  0009BE  D799               	goto	i1l119
  2995  0009C0  0A07               	xorlw	7	; case 4
  2996  0009C2  B4D8               	btfsc	status,2,c
  2997  0009C4  D7B8               	goto	i1l123
  2998  0009C6  0A01               	xorlw	1	; case 5
  2999  0009C8  B4D8               	btfsc	status,2,c
  3000  0009CA  D7D7               	goto	i1l127
  3001  0009CC  D7E8               	goto	i1l130
  3002  0009CE                     __end_of_fillDataBuffer:
  3003                           	opt stack 0
  3004                           pclatu	equ	0xFFB
  3005                           pclath	equ	0xFFA
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           prodh	equ	0xFF4
  3011                           prodl	equ	0xFF3
  3012                           intcon	equ	0xFF2
  3013                           postinc0	equ	0xFEE
  3014                           fsr0h	equ	0xFEA
  3015                           fsr0l	equ	0xFE9
  3016                           wreg	equ	0xFE8
  3017                           postdec1	equ	0xFE5
  3018                           fsr1h	equ	0xFE2
  3019                           fsr1l	equ	0xFE1
  3020                           bsr	equ	0xFE0
  3021                           indf2	equ	0xFDF
  3022                           postinc2	equ	0xFDE
  3023                           postdec2	equ	0xFDD
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function _acknowledge *****************
  3029 ;; Defined at:
  3030 ;;		line 169 in file "Drivers/UART_Driver.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;		None
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;		None
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      void 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3044 ;;      Params:         0       0       0       0       0       0       0       0       0
  3045 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3046 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3047 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3048 ;;Total ram usage:        0 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    3
  3051 ;; This function calls:
  3052 ;;		i1_printf
  3053 ;; This function is called by:
  3054 ;;		_fillDataBuffer
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text16
  3059  000F7A                     __ptext16:
  3060                           	opt stack 0
  3061  000F7A                     _acknowledge:
  3062                           	opt stack 21
  3063                           
  3064                           ;UART_Driver.c: 170: printf(startCharacter);
  3065                           
  3066                           ;incstack = 0
  3067  000F7A  C03F  F008         	movff	_startCharacter,i1printf@f
  3068  000F7E  C040  F009         	movff	_startCharacter+1,i1printf@f+1
  3069  000F82  5008               	movf	i1printf@f,w,c
  3070  000F84  1009               	iorwf	i1printf@f+1,w,c
  3071  000F86  A4D8               	btfss	status,2,c
  3072  000F88  0E00               	movlw	low (__mediumconst shr (0+16))
  3073  000F8A  6E0A               	movwf	i1printf@f+2,c
  3074  000F8C  EC83  F005         	call	i1_printf	;wreg free
  3075                           
  3076                           ;UART_Driver.c: 172: printf(ackCharacter);
  3077  000F90  C03B  F008         	movff	_ackCharacter,i1printf@f
  3078  000F94  C03C  F009         	movff	_ackCharacter+1,i1printf@f+1
  3079  000F98  5008               	movf	i1printf@f,w,c
  3080  000F9A  1009               	iorwf	i1printf@f+1,w,c
  3081  000F9C  A4D8               	btfss	status,2,c
  3082  000F9E  0E00               	movlw	low (__mediumconst shr (0+16))
  3083  000FA0  6E0A               	movwf	i1printf@f+2,c
  3084  000FA2  EC83  F005         	call	i1_printf	;wreg free
  3085                           
  3086                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  3087  000FA6  0E28               	movlw	low STR_8
  3088  000FA8  6E08               	movwf	i1printf@f,c
  3089  000FAA  0E08               	movlw	high STR_8
  3090  000FAC  6E09               	movwf	i1printf@f+1,c
  3091  000FAE  5008               	movf	i1printf@f,w,c
  3092  000FB0  1009               	iorwf	i1printf@f+1,w,c
  3093  000FB2  A4D8               	btfss	status,2,c
  3094  000FB4  0E00               	movlw	low (__mediumconst shr (0+16))
  3095  000FB6  6E0A               	movwf	i1printf@f+2,c
  3096  000FB8  C1A4  F00B         	movff	_readBuffer+164,?i1_printf+3
  3097  000FBC  6A0C               	clrf	?i1_printf+4,c
  3098  000FBE  EC83  F005         	call	i1_printf	;wreg free
  3099                           
  3100                           ;UART_Driver.c: 176: printf(stopCharacter);
  3101  000FC2  C03D  F008         	movff	_stopCharacter,i1printf@f
  3102  000FC6  C03E  F009         	movff	_stopCharacter+1,i1printf@f+1
  3103  000FCA  5008               	movf	i1printf@f,w,c
  3104  000FCC  1009               	iorwf	i1printf@f+1,w,c
  3105  000FCE  A4D8               	btfss	status,2,c
  3106  000FD0  0E00               	movlw	low (__mediumconst shr (0+16))
  3107  000FD2  6E0A               	movwf	i1printf@f+2,c
  3108  000FD4  EC83  F005         	call	i1_printf	;wreg free
  3109  000FD8  0012               	return		;funcret
  3110  000FDA                     __end_of_acknowledge:
  3111                           	opt stack 0
  3112                           pclatu	equ	0xFFB
  3113                           pclath	equ	0xFFA
  3114                           tblptru	equ	0xFF8
  3115                           tblptrh	equ	0xFF7
  3116                           tblptrl	equ	0xFF6
  3117                           tablat	equ	0xFF5
  3118                           prodh	equ	0xFF4
  3119                           prodl	equ	0xFF3
  3120                           intcon	equ	0xFF2
  3121                           postinc0	equ	0xFEE
  3122                           fsr0h	equ	0xFEA
  3123                           fsr0l	equ	0xFE9
  3124                           wreg	equ	0xFE8
  3125                           postdec1	equ	0xFE5
  3126                           fsr1h	equ	0xFE2
  3127                           fsr1l	equ	0xFE1
  3128                           bsr	equ	0xFE0
  3129                           indf2	equ	0xFDF
  3130                           postinc2	equ	0xFDE
  3131                           postdec2	equ	0xFDD
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function i1_printf *****************
  3137 ;; Defined at:
  3138 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  f               3    7[COMRAM] PTR const unsigned char 
  3141 ;;		 -> STR_10(2), STR_9(2), STR_8(3), STR_7(4), 
  3142 ;;		 -> STR_6(4), ROM(32767), STR_5(2), STR_4(2), 
  3143 ;;		 -> STR_3(6), STR_2(2), STR_1(2), 
  3144 ;; Auto vars:     Size  Location     Type
  3145 ;;  printf          4    0        struct .
  3146 ;;  printf          3    0        PTR const unsigned char 
  3147 ;;  printf          2   19[COMRAM] unsigned int 
  3148 ;;  printf          2   16[COMRAM] PTR void [1]
  3149 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3150 ;;  printf          2    0        unsigned int 
  3151 ;;  printf          1   22[COMRAM] char 
  3152 ;;  printf          1   21[COMRAM] char 
  3153 ;;  printf          1   18[COMRAM] unsigned char 
  3154 ;;  printf          1   15[COMRAM] unsigned char 
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  2    7[COMRAM] int 
  3157 ;; Registers used:
  3158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3164 ;;      Params:         5       0       0       0       0       0       0       0       0
  3165 ;;      Locals:         8       0       0       0       0       0       0       0       0
  3166 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3167 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3168 ;;Total ram usage:       16 bytes
  3169 ;; Hardware stack levels used:    1
  3170 ;; Hardware stack levels required when called:    2
  3171 ;; This function calls:
  3172 ;;		i1___lwdiv
  3173 ;;		i1_putch
  3174 ;; This function is called by:
  3175 ;;		_acknowledge
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           	psect	text17
  3180  000B06                     __ptext17:
  3181                           	opt stack 0
  3182  000B06                     i1_printf:
  3183                           	opt stack 21
  3184                           
  3185                           ;doprnt.c: 466: va_list ap;
  3186                           ;doprnt.c: 499: signed char c;
  3187                           ;doprnt.c: 506: signed char prec;
  3188                           ;doprnt.c: 508: unsigned char flag;
  3189                           ;doprnt.c: 523: union {
  3190                           ;doprnt.c: 524: unsigned long vd;
  3191                           ;doprnt.c: 525: double integ;
  3192                           ;doprnt.c: 526: } tmpval;
  3193                           ;doprnt.c: 528: unsigned int val;
  3194                           ;doprnt.c: 529: unsigned len;
  3195                           ;doprnt.c: 530: const char * cp;
  3196                           ;doprnt.c: 533: *ap = __va_start();
  3197                           
  3198                           ;incstack = 0
  3199  000B06  0E0B               	movlw	low (?i1_printf+3)
  3200  000B08  6E11               	movwf	i1printf@ap,c
  3201  000B0A  0E00               	movlw	high (?i1_printf+3)
  3202  000B0C  6E12               	movwf	i1printf@ap+1,c
  3203                           
  3204                           ;doprnt.c: 536: while(c = *f++) {
  3205  000B0E  D079               	goto	i1u59_20
  3206  000B10                     
  3207                           ;doprnt.c: 538: if(c != '%')
  3208  000B10  0E25               	movlw	37
  3209  000B12  1817               	xorwf	i1printf@c,w,c
  3210  000B14  B4D8               	btfsc	status,2,c
  3211  000B16  D004               	goto	i1l188
  3212                           
  3213                           ;doprnt.c: 540: {
  3214                           ;doprnt.c: 541: (putch(c) );
  3215  000B18  5017               	movf	i1printf@c,w,c
  3216  000B1A  ECDF  F008         	call	i1_putch
  3217                           
  3218                           ;doprnt.c: 542: continue;
  3219  000B1E  D071               	goto	i1u59_20
  3220  000B20                     i1l188:
  3221                           
  3222                           ;doprnt.c: 543: }
  3223                           ;doprnt.c: 548: flag = 0;
  3224  000B20  0E00               	movlw	0
  3225  000B22  6E10               	movwf	i1printf@flag,c
  3226                           
  3227                           ;doprnt.c: 635: switch(c = *f++) {
  3228  000B24  D004               	goto	i1l189
  3229  000B26                     
  3230                           ;doprnt.c: 809: (putch(c) );
  3231  000B26  5017               	movf	i1printf@c,w,c
  3232  000B28  ECDF  F008         	call	i1_putch
  3233                           
  3234                           ;doprnt.c: 810: continue;
  3235  000B2C  D06A               	goto	i1u59_20
  3236  000B2E                     i1l189:
  3237  000B2E  C008  F00D         	movff	i1printf@f,??i1_printf
  3238  000B32  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  3239  000B36  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  3240  000B3A  2A08               	incf	i1printf@f,f,c
  3241  000B3C  0E00               	movlw	0
  3242  000B3E  2209               	addwfc	i1printf@f+1,f,c
  3243  000B40  220A               	addwfc	i1printf@f+2,f,c
  3244  000B42  C00D  FFF6         	movff	??i1_printf,tblptrl
  3245  000B46  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  3246  000B4A  C00F  FFF8         	movff	??i1_printf+2,tblptru
  3247  000B4E  0008               	tblrd		*
  3248  000B50  CFF5 F017          	movff	tablat,i1printf@c
  3249  000B54  5017               	movf	i1printf@c,w,c
  3250                           
  3251                           ; Switch size 1, requested type "space"
  3252                           ; Number of cases is 2, Range of values is 0 to 120
  3253                           ; switch strategies available:
  3254                           ; Name         Instructions Cycles
  3255                           ; simple_byte            7     4 (average)
  3256                           ;	Chosen strategy is simple_byte
  3257  000B56  0A00               	xorlw	0	; case 0
  3258  000B58  B4D8               	btfsc	status,2,c
  3259  000B5A  0012               	return	
  3260  000B5C  0A78               	xorlw	120	; case 120
  3261  000B5E  A4D8               	btfss	status,2,c
  3262  000B60  D7E2               	goto	i1l194
  3263                           
  3264                           ;doprnt.c: 1273: {
  3265                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3266  000B62  C011  FFD9         	movff	i1printf@ap,fsr2l
  3267  000B66  C012  FFDA         	movff	i1printf@ap+1,fsr2h
  3268  000B6A  CFDE F014          	movff	postinc2,i1printf@val
  3269  000B6E  CFDD F015          	movff	postdec2,i1printf@val+1
  3270  000B72  0E02               	movlw	2
  3271  000B74  2611               	addwf	i1printf@ap,f,c
  3272  000B76  0E00               	movlw	0
  3273  000B78  2212               	addwfc	i1printf@ap+1,f,c
  3274                           
  3275                           ;doprnt.c: 1287: }
  3276                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3277  000B7A  0E01               	movlw	1
  3278  000B7C  6E17               	movwf	i1printf@c,c
  3279  000B7E  D011               	goto	i1l1288
  3280  000B80                     
  3281                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3282  000B80  5017               	movf	i1printf@c,w,c
  3283  000B82  0D02               	mullw	2
  3284  000B84  0E01               	movlw	low _hexpowers
  3285  000B86  24F3               	addwf	prodl,w,c
  3286  000B88  6EF6               	movwf	tblptrl,c
  3287  000B8A  0E08               	movlw	high _hexpowers
  3288  000B8C  20F4               	addwfc	prodh,w,c
  3289  000B8E  6EF7               	movwf	tblptrh,c
  3290  000B90                     	if	0	;There are less than 3 active tblptr bytes
  3291  000B90                     	endif
  3292  000B90  0009               	tblrd		*+
  3293  000B92  50F5               	movf	tablat,w,c
  3294  000B94  5C14               	subwf	i1printf@val,w,c
  3295  000B96  0009               	tblrd		*+
  3296  000B98  50F5               	movf	tablat,w,c
  3297  000B9A  5815               	subwfb	i1printf@val+1,w,c
  3298  000B9C  A0D8               	btfss	status,0,c
  3299  000B9E  D005               	goto	i1u58_20
  3300                           
  3301                           ;doprnt.c: 1318: break;
  3302  000BA0  2A17               	incf	i1printf@c,f,c
  3303  000BA2                     i1l1288:
  3304  000BA2  0E04               	movlw	4
  3305  000BA4  1817               	xorwf	i1printf@c,w,c
  3306  000BA6  A4D8               	btfss	status,2,c
  3307  000BA8  D7EB               	goto	i1l195
  3308  000BAA                     i1u58_20:
  3309                           
  3310                           ;doprnt.c: 1422: {
  3311                           ;doprnt.c: 1469: }
  3312                           ;doprnt.c: 1472: prec = c;
  3313  000BAA  C017  F016         	movff	i1printf@c,i1printf@prec
  3314                           
  3315                           ;doprnt.c: 1474: while(prec--) {
  3316  000BAE  D025               	goto	i1l198
  3317  000BB0                     
  3318                           ;doprnt.c: 1478: {
  3319                           ;doprnt.c: 1499: {
  3320                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3321  000BB0  C014  F001         	movff	i1printf@val,i1___lwdiv@dividend
  3322  000BB4  C015  F002         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  3323  000BB8  5016               	movf	i1printf@prec,w,c
  3324  000BBA  0D02               	mullw	2
  3325  000BBC  0E01               	movlw	low _hexpowers
  3326  000BBE  24F3               	addwf	prodl,w,c
  3327  000BC0  6EF6               	movwf	tblptrl,c
  3328  000BC2  0E08               	movlw	high _hexpowers
  3329  000BC4  20F4               	addwfc	prodh,w,c
  3330  000BC6  6EF7               	movwf	tblptrh,c
  3331  000BC8                     	if	0	;There are less than 3 active tblptr bytes
  3332  000BC8                     	endif
  3333  000BC8  0009               	tblrd		*+
  3334  000BCA  CFF5 F003          	movff	tablat,i1___lwdiv@divisor
  3335  000BCE  000A               	tblrd		*-
  3336  000BD0  CFF5 F004          	movff	tablat,i1___lwdiv@divisor+1
  3337  000BD4  EC45  F008         	call	i1___lwdiv	;wreg free
  3338  000BD8  5001               	movf	?i1___lwdiv,w,c
  3339  000BDA  0B0F               	andlw	15
  3340  000BDC  6E13               	movwf	i1printf@idx,c
  3341                           
  3342                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3343  000BDE  5013               	movf	i1printf@idx,w,c
  3344  000BE0  0D01               	mullw	1
  3345  000BE2  0E09               	movlw	low STR_11
  3346  000BE4  24F3               	addwf	prodl,w,c
  3347  000BE6  6EF6               	movwf	tblptrl,c
  3348  000BE8  0E08               	movlw	high STR_11
  3349  000BEA  20F4               	addwfc	prodh,w,c
  3350  000BEC  6EF7               	movwf	tblptrh,c
  3351  000BEE                     	if	0	;There are less than 3 active tblptr bytes
  3352  000BEE                     	endif
  3353  000BEE  0008               	tblrd		*
  3354  000BF0  CFF5 F017          	movff	tablat,i1printf@c
  3355                           
  3356                           ;doprnt.c: 1508: }
  3357                           ;doprnt.c: 1523: }
  3358                           ;doprnt.c: 1524: (putch(c) );
  3359  000BF4  5017               	movf	i1printf@c,w,c
  3360  000BF6  ECDF  F008         	call	i1_putch
  3361  000BFA                     i1l198:
  3362  000BFA  0616               	decf	i1printf@prec,f,c
  3363  000BFC  2816               	incf	i1printf@prec,w,c
  3364  000BFE  A4D8               	btfss	status,2,c
  3365  000C00  D7D7               	goto	i1l199
  3366  000C02                     i1u59_20:
  3367  000C02  C008  F00D         	movff	i1printf@f,??i1_printf
  3368  000C06  C009  F00E         	movff	i1printf@f+1,??i1_printf+1
  3369  000C0A  C00A  F00F         	movff	i1printf@f+2,??i1_printf+2
  3370  000C0E  2A08               	incf	i1printf@f,f,c
  3371  000C10  0E00               	movlw	0
  3372  000C12  2209               	addwfc	i1printf@f+1,f,c
  3373  000C14  220A               	addwfc	i1printf@f+2,f,c
  3374  000C16  C00D  FFF6         	movff	??i1_printf,tblptrl
  3375  000C1A  C00E  FFF7         	movff	??i1_printf+1,tblptrh
  3376  000C1E  C00F  FFF8         	movff	??i1_printf+2,tblptru
  3377  000C22  0008               	tblrd		*
  3378  000C24  CFF5 F017          	movff	tablat,i1printf@c
  3379  000C28  5017               	movf	i1printf@c,w,c
  3380  000C2A  B4D8               	btfsc	status,2,c
  3381  000C2C  0012               	return	
  3382  000C2E  D770               	goto	i1l187
  3383  000C30                     __end_ofi1_printf:
  3384                           	opt stack 0
  3385                           pclatu	equ	0xFFB
  3386                           pclath	equ	0xFFA
  3387                           tblptru	equ	0xFF8
  3388                           tblptrh	equ	0xFF7
  3389                           tblptrl	equ	0xFF6
  3390                           tablat	equ	0xFF5
  3391                           prodh	equ	0xFF4
  3392                           prodl	equ	0xFF3
  3393                           intcon	equ	0xFF2
  3394                           postinc0	equ	0xFEE
  3395                           fsr0h	equ	0xFEA
  3396                           fsr0l	equ	0xFE9
  3397                           wreg	equ	0xFE8
  3398                           postdec1	equ	0xFE5
  3399                           fsr1h	equ	0xFE2
  3400                           fsr1l	equ	0xFE1
  3401                           bsr	equ	0xFE0
  3402                           indf2	equ	0xFDF
  3403                           postinc2	equ	0xFDE
  3404                           postdec2	equ	0xFDD
  3405                           fsr2h	equ	0xFDA
  3406                           fsr2l	equ	0xFD9
  3407                           status	equ	0xFD8
  3408                           
  3409 ;; *************** function i1_putch *****************
  3410 ;; Defined at:
  3411 ;;		line 260 in file "Drivers/UART_Driver.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  data            1    wreg     unsigned char 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  data            1    1[COMRAM] unsigned char 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  1    wreg      void 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, cstack
  3420 ;; Tracked objects:
  3421 ;;		On entry : 0/0
  3422 ;;		On exit  : 0/0
  3423 ;;		Unchanged: 0/0
  3424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3425 ;;      Params:         0       0       0       0       0       0       0       0       0
  3426 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3427 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3428 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3429 ;;Total ram usage:        1 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    1
  3432 ;; This function calls:
  3433 ;;		i1_writeByte
  3434 ;; This function is called by:
  3435 ;;		i1_printf
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text18
  3440  0011BE                     __ptext18:
  3441                           	opt stack 0
  3442  0011BE                     i1_putch:
  3443                           	opt stack 21
  3444                           
  3445                           ;incstack = 0
  3446                           ;i1putch@data stored from wreg
  3447  0011BE  6E02               	movwf	i1putch@data,c
  3448                           
  3449                           ;UART_Driver.c: 261: writeByte(data);
  3450  0011C0  5002               	movf	i1putch@data,w,c
  3451  0011C2  ECD9  F008         	call	i1_writeByte
  3452  0011C6  0012               	return		;funcret
  3453  0011C8                     __end_ofi1_putch:
  3454                           	opt stack 0
  3455                           pclatu	equ	0xFFB
  3456                           pclath	equ	0xFFA
  3457                           tblptru	equ	0xFF8
  3458                           tblptrh	equ	0xFF7
  3459                           tblptrl	equ	0xFF6
  3460                           tablat	equ	0xFF5
  3461                           prodh	equ	0xFF4
  3462                           prodl	equ	0xFF3
  3463                           intcon	equ	0xFF2
  3464                           postinc0	equ	0xFEE
  3465                           fsr0h	equ	0xFEA
  3466                           fsr0l	equ	0xFE9
  3467                           wreg	equ	0xFE8
  3468                           postdec1	equ	0xFE5
  3469                           fsr1h	equ	0xFE2
  3470                           fsr1l	equ	0xFE1
  3471                           bsr	equ	0xFE0
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function i1_writeByte *****************
  3480 ;; Defined at:
  3481 ;;		line 69 in file "Drivers/UART_Driver.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  data            1    wreg     unsigned char 
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  data            1    0[COMRAM] unsigned char 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0
  3496 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3498 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3499 ;;Total ram usage:        1 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; This function calls:
  3502 ;;		Nothing
  3503 ;; This function is called by:
  3504 ;;		i1_putch
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           	psect	text19
  3509  0011B2                     __ptext19:
  3510                           	opt stack 0
  3511  0011B2                     i1_writeByte:
  3512                           	opt stack 21
  3513                           
  3514                           ;incstack = 0
  3515                           ;i1writeByte@data stored from wreg
  3516  0011B2  6E01               	movwf	i1writeByte@data,c
  3517  0011B4                     
  3518                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  3519  0011B4  A2AC               	btfss	4012,1,c	;volatile
  3520  0011B6  D7FE               	goto	i1l1202
  3521                           
  3522                           ;UART_Driver.c: 71: TXREG = data;
  3523  0011B8  C001  FFAD         	movff	i1writeByte@data,4013	;volatile
  3524  0011BC  0012               	return		;funcret
  3525  0011BE                     __end_ofi1_writeByte:
  3526                           	opt stack 0
  3527                           pclatu	equ	0xFFB
  3528                           pclath	equ	0xFFA
  3529                           tblptru	equ	0xFF8
  3530                           tblptrh	equ	0xFF7
  3531                           tblptrl	equ	0xFF6
  3532                           tablat	equ	0xFF5
  3533                           prodh	equ	0xFF4
  3534                           prodl	equ	0xFF3
  3535                           intcon	equ	0xFF2
  3536                           postinc0	equ	0xFEE
  3537                           fsr0h	equ	0xFEA
  3538                           fsr0l	equ	0xFE9
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           fsr1h	equ	0xFE2
  3542                           fsr1l	equ	0xFE1
  3543                           bsr	equ	0xFE0
  3544                           indf2	equ	0xFDF
  3545                           postinc2	equ	0xFDE
  3546                           postdec2	equ	0xFDD
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function i1___lwdiv *****************
  3552 ;; Defined at:
  3553 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;  dividend        2    0[COMRAM] unsigned int 
  3556 ;;  divisor         2    2[COMRAM] unsigned int 
  3557 ;; Auto vars:     Size  Location     Type
  3558 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  3559 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  2    0[COMRAM] unsigned int 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3569 ;;      Params:         4       0       0       0       0       0       0       0       0
  3570 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3572 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3573 ;;Total ram usage:        7 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; This function calls:
  3576 ;;		Nothing
  3577 ;; This function is called by:
  3578 ;;		i1_printf
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text20
  3583  00108A                     __ptext20:
  3584                           	opt stack 0
  3585  00108A                     i1___lwdiv:
  3586                           	opt stack 22
  3587                           
  3588                           ;incstack = 0
  3589  00108A  0E00               	movlw	0
  3590  00108C  6E06               	movwf	i1___lwdiv@quotient+1,c
  3591  00108E  0E00               	movlw	0
  3592  001090  6E05               	movwf	i1___lwdiv@quotient,c
  3593  001092  5003               	movf	i1___lwdiv@divisor,w,c
  3594  001094  1004               	iorwf	i1___lwdiv@divisor+1,w,c
  3595  001096  B4D8               	btfsc	status,2,c
  3596  001098  D01C               	goto	i1l611
  3597  00109A  0E01               	movlw	1
  3598  00109C  6E07               	movwf	i1___lwdiv@counter,c
  3599  00109E  D004               	goto	i1l606
  3600  0010A0  90D8               	bcf	status,0,c
  3601  0010A2  3603               	rlcf	i1___lwdiv@divisor,f,c
  3602  0010A4  3604               	rlcf	i1___lwdiv@divisor+1,f,c
  3603  0010A6  2A07               	incf	i1___lwdiv@counter,f,c
  3604  0010A8                     i1l606:
  3605  0010A8  AE04               	btfss	i1___lwdiv@divisor+1,7,c
  3606  0010AA  D7FA               	goto	i1l607
  3607  0010AC                     i1u50_20:
  3608  0010AC  90D8               	bcf	status,0,c
  3609  0010AE  3605               	rlcf	i1___lwdiv@quotient,f,c
  3610  0010B0  3606               	rlcf	i1___lwdiv@quotient+1,f,c
  3611  0010B2  5003               	movf	i1___lwdiv@divisor,w,c
  3612  0010B4  5C01               	subwf	i1___lwdiv@dividend,w,c
  3613  0010B6  5004               	movf	i1___lwdiv@divisor+1,w,c
  3614  0010B8  5802               	subwfb	i1___lwdiv@dividend+1,w,c
  3615  0010BA  A0D8               	btfss	status,0,c
  3616  0010BC  D005               	goto	i1l610
  3617  0010BE  5003               	movf	i1___lwdiv@divisor,w,c
  3618  0010C0  5E01               	subwf	i1___lwdiv@dividend,f,c
  3619  0010C2  5004               	movf	i1___lwdiv@divisor+1,w,c
  3620  0010C4  5A02               	subwfb	i1___lwdiv@dividend+1,f,c
  3621  0010C6  8005               	bsf	i1___lwdiv@quotient,0,c
  3622  0010C8                     i1l610:
  3623  0010C8  90D8               	bcf	status,0,c
  3624  0010CA  3204               	rrcf	i1___lwdiv@divisor+1,f,c
  3625  0010CC  3203               	rrcf	i1___lwdiv@divisor,f,c
  3626  0010CE  2E07               	decfsz	i1___lwdiv@counter,f,c
  3627  0010D0  D7ED               	goto	i1u50_20
  3628  0010D2                     i1l611:
  3629  0010D2  C005  F001         	movff	i1___lwdiv@quotient,?i1___lwdiv
  3630  0010D6  C006  F002         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  3631  0010DA  0012               	return		;funcret
  3632  0010DC                     __end_ofi1___lwdiv:
  3633                           	opt stack 0
  3634                           pclatu	equ	0xFFB
  3635                           pclath	equ	0xFFA
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           intcon	equ	0xFF2
  3643                           postinc0	equ	0xFEE
  3644                           fsr0h	equ	0xFEA
  3645                           fsr0l	equ	0xFE9
  3646                           wreg	equ	0xFE8
  3647                           postdec1	equ	0xFE5
  3648                           fsr1h	equ	0xFE2
  3649                           fsr1l	equ	0xFE1
  3650                           bsr	equ	0xFE0
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           pclatu	equ	0xFFB
  3658                           pclath	equ	0xFFA
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodh	equ	0xFF4
  3664                           prodl	equ	0xFF3
  3665                           intcon	equ	0xFF2
  3666                           postinc0	equ	0xFEE
  3667                           fsr0h	equ	0xFEA
  3668                           fsr0l	equ	0xFE9
  3669                           wreg	equ	0xFE8
  3670                           postdec1	equ	0xFE5
  3671                           fsr1h	equ	0xFE2
  3672                           fsr1l	equ	0xFE1
  3673                           bsr	equ	0xFE0
  3674                           indf2	equ	0xFDF
  3675                           postinc2	equ	0xFDE
  3676                           postdec2	equ	0xFDD
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681                           	psect	rparam
  3682  0000                     pclatu	equ	0xFFB
  3683                           pclath	equ	0xFFA
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           prodh	equ	0xFF4
  3689                           prodl	equ	0xFF3
  3690                           intcon	equ	0xFF2
  3691                           postinc0	equ	0xFEE
  3692                           fsr0h	equ	0xFEA
  3693                           fsr0l	equ	0xFE9
  3694                           wreg	equ	0xFE8
  3695                           postdec1	equ	0xFE5
  3696                           fsr1h	equ	0xFE2
  3697                           fsr1l	equ	0xFE1
  3698                           bsr	equ	0xFE0
  3699                           indf2	equ	0xFDF
  3700                           postinc2	equ	0xFDE
  3701                           postdec2	equ	0xFDD
  3702                           fsr2h	equ	0xFDA
  3703                           fsr2l	equ	0xFD9
  3704                           status	equ	0xFD8
  3705                           
  3706                           	psect	temp
  3707  000041                     btemp:
  3708                           	opt stack 0
  3709  000041                     	ds	1
  3710  0000                     int$flags	set	btemp
  3711  0000                     wtemp6	set	btemp+1
  3712                           pclatu	equ	0xFFB
  3713                           pclath	equ	0xFFA
  3714                           tblptru	equ	0xFF8
  3715                           tblptrh	equ	0xFF7
  3716                           tblptrl	equ	0xFF6
  3717                           tablat	equ	0xFF5
  3718                           prodh	equ	0xFF4
  3719                           prodl	equ	0xFF3
  3720                           intcon	equ	0xFF2
  3721                           postinc0	equ	0xFEE
  3722                           fsr0h	equ	0xFEA
  3723                           fsr0l	equ	0xFE9
  3724                           wreg	equ	0xFE8
  3725                           postdec1	equ	0xFE5
  3726                           fsr1h	equ	0xFE2
  3727                           fsr1l	equ	0xFE1
  3728                           bsr	equ	0xFE0
  3729                           indf2	equ	0xFDF
  3730                           postinc2	equ	0xFDE
  3731                           postdec2	equ	0xFDD
  3732                           fsr2h	equ	0xFDA
  3733                           fsr2l	equ	0xFD9
  3734                           status	equ	0xFD8


Data Sizes:
    Strings     44
    Constant    8
    Data        8
    BSS         198
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     45      64
    BANK0           160     28      49
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[3]), STR_7(CODE[4]), 
		 -> STR_6(CODE[4]), ROM(CODE[32767]), STR_5(CODE[2]), STR_4(CODE[2]), 
		 -> STR_3(CODE[6]), STR_2(CODE[2]), STR_1(CODE[2]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> ROM(CODE[32767]), STR_1(CODE[2]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_7(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_6(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_5(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_4(CODE[2]), 

    S21$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    S21$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    S21$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _main in BANK0

    _main->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte
    _D_UART_Init->___aldiv
    _C_DOOR_LockAll->___wmul
    _C_DOOR_Init->___wmul

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6373
                                             26 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                        _D_PORT_Init
                      _D_UART_Enable
                        _D_UART_Init
                       _D_UART_Write
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2194
                                             21 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    20      3    1952
                                              7 BANK0     14    11      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      62
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5    1233
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     805
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       2     2      0    1411
                                              6 BANK0      2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          2     2      0    1504
                                              6 BANK0      2     2      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1312
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              21    21      0     967
                                             24 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (6) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _fillDataBuffer                                       1     1      0     967
                                             23 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (7) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (8) i1_printf                                            25    20      5     725
                                              7 COMRAM    16    11      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (9) i1_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (10) i1_writeByte                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
     ___wmul
   _C_DOOR_LockAll
     ___wmul
   _D_PORT_Init
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1C      31       5       30.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2D      40       1       68.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     117      20        0.0%
DATA                 0      0     117       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov 25 01:29:02 2017

                     l21 1034              __CFG_BOR$ON 000000                       bsr 000FE0  
    ___wmul@multiplicand 0062              __CFG_BORV$3 000000             _ackCharacter 003B  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l162 0DE4                      l146 116C  
                    l164 0E6C                      l173 10F6                      l261 0C94  
                    l262 0C88                      l175 112A                      l265 0CC8  
                    l266 0CD6                      l258 0C4E                      l610 1076  
                    l194 09F2                      l267 0CEC                      l259 0C66  
                    l611 1080                      l195 0A50                      l187 09DA  
                    l188 09EA                      l189 09FA                      l606 1056  
                    l198 0ACC                      l607 104E                      l199 0A80  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u950 105A  
                    prod 000FF3                      wreg 000FE8             __CFG_FOSC$HS 000000  
    __end_ofi1_writeByte 11BE             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1630 0A72                     l1708 10E6                     l1568 11A8  
                   l1696 0DD4                     STR_1 0833                     STR_2 0831  
                   STR_3 081A                     STR_4 082D                     STR_5 082B  
                   STR_6 0824                     STR_7 0820                     STR_8 0828  
                   STR_9 082F                     u1010 0A7A                     u1020 0AD6  
                   u1070 0C98                     u1187 1012                     u1197 0DBE  
           ?_C_DOOR_Init 0001                     _baud 003A                     _main 0FDA  
                   _read 0034                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 0041  
                   prodh 000FF4                     prodl 000FF3                     start 00D4  
          __CFG_IESO$OFF 000000          __end_ofi1_putch 11C8            __CFG_MCLRE$ON 000000  
           ___param_bank 000000           _startCharacter 003F            __CFG_PLLDIV$5 000000  
__size_of_C_DOOR_LockAll 0050          __end_of___aldiv 0CFE                    ?_main 0001  
                  STR_10 082F                    STR_11 0809          __end_of___lwdiv 108A  
                  i1l111 086A                    i1l120 0914                    i1l112 088C  
                  i1l105 09A4                    i1l130 099E                    i1l106 083A  
                  i1l123 0936                    i1l115 08AE                    i1l107 0862  
                  i1l124 0958                    i1l116 08D0                    i1l127 097A  
                  i1l119 08F2                    i1l128 0994                    i1l156 007C  
                  i1l610 10C8                    i1l194 0B26                    i1l611 10D2  
                  i1l195 0B80                    i1l187 0B10                    i1l188 0B20  
                  i1l189 0B2E                    i1l606 10A8                    i1l198 0BFA  
                  i1l607 10A0                    i1l199 0BB0                    _RCREG 000FAE  
   __size_of_acknowledge 0060                    _SPBRG 000FAF                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82            __CFG_USBDIV$1 000000  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TXREG 000FAD            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _doors 007C                    _putch 1196          i1writeByte@data 0001  
                  pclath 000FFA                    tablat 000FF5             ?_D_UART_Init 006E  
                  status 000FD8                    wtemp6 0042             ?_D_PORT_Init 0001  
     __size_ofi1___lwdiv 0052            _stopCharacter 003D         __end_ofi1_printf 0C30  
             i1printf@ap 0011          __initialization 0F10         _D_UART_Init$1223 0073  
           __end_of_main 1036                   ??_main 007A              i1_writeByte 11B2  
          __activetblptr 000002          __CFG_CCP2MX$OFF 000000                   _ADCON1 000FC1  
                 ?_putch 0001                   i1l1202 11B4                   i1l1288 0BA2  
              ??i1_putch 0002                   _LowISR 0018           __CFG_XINST$OFF 000000  
              ??___aldiv 0068                   ___wmul 112C          C_DOOR_LockAll@d 0066  
              ??___lwdiv 0064         __end_of_readByte 11D0                   clear_0 0F4E  
                 clear_1 0F5A                   clear_2 0F66                   _printf 09CE  
      __end_ofi1___lwdiv 10DC             __pdataCOMRAM 003B    D_UART_Init@interrupts 0072  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8            ?_D_UART_Write 0075          D_UART_Init@baud 0070  
        D_UART_Init@name 006E               __accesstop 0060  __end_of__initialization 0F6C  
        __CFG_PBADEN$OFF 000000            ___rparam_used 000001     __size_of_C_DOOR_Init 00A4  
            i1printf@idx 0013              i1printf@val 0014           __pcstackCOMRAM 0001  
           __pidataBANK0 11D6             C_DOOR_Init@d 0066              i1putch@data 0002  
          __end_of_putch 11A4         _messageCharacter 008F           _C_DOOR_LockAll 10DC  
 __size_of_D_UART_Enable 0024           ??_D_UART_Write 0079                ?i1_printf 0008  
                ??_putch 0061               __pbssBANK0 007C               __pbssBANK1 0100  
   __size_of_D_UART_Init 00A2                  ?_LowISR 0001     __size_of_D_PORT_Init 001E  
                ?___wmul 0060   __end_of_C_DOOR_LockAll 112C               _deviceName 008B  
                ?_printf 0067               ??i1_printf 000D  __size_of_fillDataBuffer 0198  
                i1u50_20 10AC                  i1u58_20 0BAA                  i1u59_20 0C02  
    D_UART_Enable@enable 0060          __CFG_VREGEN$OFF 000000                  i1_putch 11BE  
              ?_readByte 0001       __size_of_writeByte 000E            _D_UART_Enable 1154  
                __Hparam 0000                  __Lparam 0000          __size_of_LowISR 00BC  
             _readBuffer 0100                  ___aldiv 0C30          ?_C_DOOR_LockAll 0001  
        __size_of___wmul 0028                  ___lwdiv 1036             __psmallconst 0800  
        __CFG_STVREN$OFF 000000            ??_acknowledge 0018                  __pcinit 0F10  
                __ramtop 0800                  __ptext0 0FDA                  __ptext1 0CFE  
                __ptext2 09CE                  __ptext3 1196                  __ptext4 11A4  
                __ptext5 1036                  __ptext6 0E6E                  __ptext7 0C30  
                __ptext8 1154                  __ptext9 1178          __size_of_printf 0138  
           ?i1_writeByte 0001        __end_of_hexpowers 0809        i1___lwdiv@divisor 0003  
      i1___lwdiv@counter 0007         ___aldiv@dividend 0060     end_of_initialization 0F6C  
             ??_readByte 0001            __Lmediumconst 0000           ?_D_UART_Enable 0001  
   __end_of_D_UART_Write 0DCA                _RCSTAbits 000FAB                  printf@c 0074  
                printf@f 0067         ___aldiv@quotient 006A                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc2 000FDE  
      __end_of_writeByte 11B2                _TRISCbits 000F94      __end_of_acknowledge 0FDA  
              i1___lwdiv 108A                _TXSTAbits 000FAC             i1printf@flag 0010  
           i1printf@prec 0016           __end_of_LowISR 00D4           __end_of___wmul 1154  
            _BAUDCONbits 000FB8            __pidataCOMRAM 11D0           __end_of_printf 0B06  
    start_initialization 0F10           _fillDataBuffer 0836                i1printf@c 0017  
              i1printf@f 0008               ?i1___lwdiv 0001        __size_ofi1_printf 012A  
        ??_D_UART_Enable 0060            ??_C_DOOR_Init 0066                 ??_LowISR 0019  
               ??___wmul 0064              __pdataBANK0 008F         __CFG_LPT1OSC$OFF 000000  
            _acknowledge 0F7A         D_UART_Write@data 0077                 ??_printf 006A  
 __end_of_fillDataBuffer 09CE              __pbssCOMRAM 002E     __size_ofi1_writeByte 000C  
          __pcstackBANK0 0060            ??_D_UART_Init 0073                 ?i1_putch 0001  
  __size_of_D_UART_Write 00CC            ??_D_PORT_Init 0060         ??_C_DOOR_LockAll 0066  
      __size_of_readByte 0008         ___lwdiv@dividend 0060      __end_of_C_DOOR_Init 0E6E  
               ?___aldiv 0060                 ?___lwdiv 0060              __pintcodelo 0018  
     fillDataBuffer@data 0018          ?_fillDataBuffer 0001              __smallconst 0800  
           _D_UART_Write 0CFE                _hexpowers 0801                _readReady 008E  
       ___lwdiv@quotient 0065              ??i1___lwdiv 0005           __size_of_putch 000E  
        ___aldiv@divisor 0064          ___aldiv@counter 0068           ___wmul@product 0064  
               _IPR1bits 000F9F                 _PIE1bits 000F9D      __end_of_D_UART_Init 0F10  
               _PIR1bits 000F9E                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
    __end_of_D_PORT_Init 1196        ___wmul@multiplier 0060               printf@flag 006D  
             printf@prec 0073                 i1_printf 0B06                _writeByte 11A4  
              copy_data0 0F3C              _C_DOOR_Init 0DCA         __size_ofi1_putch 000A  
               __Hrparam 0000                 __Lrparam 0000         __size_of___aldiv 00CE  
       __size_of___lwdiv 0054          ___lwdiv@divisor 0062          ___lwdiv@counter 0064  
               __ptext10 10DC                 __ptext11 0DCA                 __ptext20 108A  
               __ptext12 112C                 __ptext14 11C8                 __ptext15 0836  
               __ptext16 0F7A                 __ptext17 0B06                 __ptext18 11BE  
               __ptext19 11B2               ?_writeByte 0001       i1___lwdiv@dividend 0001  
            _D_UART_Init 0E6E                 _readData 002E                 _readByte 11C8  
          __size_of_main 005C              _D_PORT_Init 1178                 int$flags 0041  
              printf@idx 006E                printf@val 0071             ?_acknowledge 0001  
  __CFG_CPUDIV$OSC1_PLL2 000000       i1___lwdiv@quotient 0005                putch@data 0061  
             _INTCONbits 000FF2                 intlevel1 0000    __end_of_D_UART_Enable 1178  
               printf@ap 006F         ??_fillDataBuffer 0018      D_UART_Write@command 0075  
          ??i1_writeByte 0001            writeByte@data 0060             ___aldiv@sign 0069  
            ??_writeByte 0060  
