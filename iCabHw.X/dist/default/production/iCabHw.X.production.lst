

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Dec 02 12:46:33 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  00169E                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  00169E  1A                 	db	low STR_4
    92  00169F  08                 	db	high STR_4
    93                           
    94                           ;initializer for _stopCharacter
    95  0016A0  31                 	db	low STR_2
    96  0016A1  08                 	db	high STR_2
    97                           
    98                           ;initializer for _startCharacter
    99  0016A2  33                 	db	low STR_1
   100  0016A3  08                 	db	high STR_1
   101                           
   102                           	psect	idataBANK0
   103  0016A4                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _messageCharacter
   107  0016A4  1E                 	db	low STR_3
   108  0016A5  08                 	db	high STR_3
   109                           
   110                           	psect	smallconst
   111  000800                     __psmallconst:
   112                           	opt stack 0
   113  000800  00                 	db	0
   114  000801                     _hexpowers:
   115                           	opt stack 0
   116  000801  0001               	dw	1
   117  000803  0010               	dw	16
   118  000805  0100               	dw	256
   119  000807  1000               	dw	4096
   120  000809                     __end_of_hexpowers:
   121                           	opt stack 0
   122  0000                     _INTCON2bits	set	4081
   123  0000                     _T0CONbits	set	4053
   124  0000                     _PIE1bits	set	3997
   125  0000                     _IPR1bits	set	3999
   126  0000                     _PIR1bits	set	3998
   127  0000                     _INTCONbits	set	4082
   128  0000                     _RCONbits	set	4048
   129  0000                     _SPBRG	set	4015
   130  0000                     _BAUDCONbits	set	4024
   131  0000                     _TRISCbits	set	3988
   132  0000                     _RCREG	set	4014
   133  0000                     _RCSTAbits	set	4011
   134  0000                     _TXREG	set	4013
   135  0000                     _TXSTAbits	set	4012
   136  0000                     _ADCON1	set	4033
   137  0000                     _PORTC	set	3970
   138  0000                     _TRISC	set	3988
   139  0000                     _PORTA	set	3968
   140  0000                     _TRISA	set	3986
   141  0000                     _TRISB	set	3987
   142  0000                     _PORTB	set	3969
   143  000809                     STR_16:
   144  000809  30                 	db	48	;'0'
   145  00080A  31                 	db	49	;'1'
   146  00080B  32                 	db	50	;'2'
   147  00080C  33                 	db	51	;'3'
   148  00080D  34                 	db	52	;'4'
   149  00080E  35                 	db	53	;'5'
   150  00080F  36                 	db	54	;'6'
   151  000810  37                 	db	55	;'7'
   152  000811  38                 	db	56	;'8'
   153  000812  39                 	db	57	;'9'
   154  000813  61                 	db	97	;'a'
   155  000814  62                 	db	98	;'b'
   156  000815  63                 	db	99	;'c'
   157  000816  64                 	db	100	;'d'
   158  000817  65                 	db	101	;'e'
   159  000818  66                 	db	102	;'f'
   160  000819  00                 	db	0
   161  00081A                     STR_4:
   162  00081A  5B                 	db	91	;'['
   163  00081B  41                 	db	65	;'A'
   164  00081C  5D                 	db	93	;']'
   165  00081D  00                 	db	0
   166  00081E                     STR_3:
   167  00081E  5B                 	db	91	;'['
   168  00081F  4D                 	db	77	;'M'
   169  000820  5D                 	db	93	;']'
   170  000821  00                 	db	0
   171  000822                     STR_5:
   172  000822  25                 	db	37
   173  000823  78                 	db	120	;'x'
   174  000824  00                 	db	0
   175  000825                     STR_14:
   176  000825  45                 	db	69	;'E'
   177  000826  00                 	db	0
   178  000827                     STR_11:
   179  000827  49                 	db	73	;'I'
   180  000828  00                 	db	0
   181  000829                     STR_9:
   182  000829  4C                 	db	76	;'L'
   183  00082A  00                 	db	0
   184  00082B                     STR_8:
   185  00082B  50                 	db	80	;'P'
   186  00082C  00                 	db	0
   187  00082D                     STR_12:
   188  00082D  52                 	db	82	;'R'
   189  00082E  00                 	db	0
   190  00082F                     STR_10:
   191  00082F  55                 	db	85	;'U'
   192  000830  00                 	db	0
   193  000831                     STR_2:
   194  000831  24                 	db	36
   195  000832  00                 	db	0
   196  000833                     STR_1:
   197  000833  26                 	db	38
   198  000834  00                 	db	0
   199  000835                     STR_6:
   200  000835  3A                 	db	58	;':'
   201  000836  00                 	db	0
   202  0000                     
   203                           ; #config settings
   204  000837  00                 	db	0	; dummy byte at the end
   205  0000                     
   206                           	psect	cinit
   207  00142E                     __pcinit:
   208                           	opt stack 0
   209  00142E                     start_initialization:
   210                           	opt stack 0
   211  00142E                     __initialization:
   212                           	opt stack 0
   213                           
   214                           ; Initialize objects allocated to BANK0 (2 bytes)
   215                           ; load TBLPTR registers with __pidataBANK0
   216  00142E  0EA4               	movlw	low __pidataBANK0
   217  001430  6EF6               	movwf	tblptrl,c
   218  001432  0E16               	movlw	high __pidataBANK0
   219  001434  6EF7               	movwf	tblptrh,c
   220  001436  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   221  001438  6EF8               	movwf	tblptru,c
   222  00143A  0009               	tblrd		*+	;fetch initializer
   223  00143C  CFF5 F0F9          	movff	tablat,__pdataBANK0
   224  001440  0009               	tblrd		*+	;fetch initializer
   225  001442  CFF5 F0FA          	movff	tablat,__pdataBANK0+1
   226                           
   227                           ; Initialize objects allocated to COMRAM (6 bytes)
   228                           ; load TBLPTR registers with __pidataCOMRAM
   229  001446  0E9E               	movlw	low __pidataCOMRAM
   230  001448  6EF6               	movwf	tblptrl,c
   231  00144A  0E16               	movlw	high __pidataCOMRAM
   232  00144C  6EF7               	movwf	tblptrh,c
   233  00144E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   234  001450  6EF8               	movwf	tblptru,c
   235  001452  EE00  F03D         	lfsr	0,__pdataCOMRAM
   236  001456  EE10 F006          	lfsr	1,6
   237  00145A                     copy_data0:
   238  00145A  0009               	tblrd		*+
   239  00145C  CFF5 FFEE          	movff	tablat,postinc0
   240  001460  50E5               	movf	postdec1,w,c
   241  001462  50E1               	movf	fsr1l,w,c
   242  001464  E1FA               	bnz	copy_data0
   243                           
   244                           ; Clear objects allocated to BANK1 (166 bytes)
   245  001466  EE01  F000         	lfsr	0,__pbssBANK1
   246  00146A  0EA6               	movlw	166
   247  00146C                     clear_0:
   248  00146C  6AEE               	clrf	postinc0,c
   249  00146E  06E8               	decf	wreg,f,c
   250  001470  E1FD               	bnz	clear_0
   251                           
   252                           ; Clear objects allocated to BANK0 (119 bytes)
   253  001472  EE00  F060         	lfsr	0,__pbssBANK0
   254  001476  0E77               	movlw	119
   255  001478                     clear_1:
   256  001478  6AEE               	clrf	postinc0,c
   257  00147A  06E8               	decf	wreg,f,c
   258  00147C  E1FD               	bnz	clear_1
   259                           
   260                           ; Clear objects allocated to COMRAM (1 bytes)
   261  00147E  6A43               	clrf	__pbssCOMRAM& (0+255),c
   262  001480                     end_of_initialization:
   263                           	opt stack 0
   264  001480                     __end_of__initialization:
   265                           	opt stack 0
   266  001480  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   267  001482  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   268  001484  0100               	movlb	0
   269  001486  EFE8  F004         	goto	_main	;jump to C main() function
   270                           tblptru	equ	0xFF8
   271                           tblptrh	equ	0xFF7
   272                           tblptrl	equ	0xFF6
   273                           tablat	equ	0xFF5
   274                           postinc0	equ	0xFEE
   275                           wreg	equ	0xFE8
   276                           postdec1	equ	0xFE5
   277                           fsr1l	equ	0xFE1
   278                           
   279                           	psect	bssCOMRAM
   280  000043                     __pbssCOMRAM:
   281                           	opt stack 0
   282  000043                     _baud:
   283                           	opt stack 0
   284  000043                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1l	equ	0xFE1
   293                           
   294                           	psect	dataCOMRAM
   295  00003D                     __pdataCOMRAM:
   296                           	opt stack 0
   297  00003D                     _ackCharacter:
   298                           	opt stack 0
   299  00003D                     	ds	2
   300  00003F                     _stopCharacter:
   301                           	opt stack 0
   302  00003F                     	ds	2
   303  000041                     _startCharacter:
   304                           	opt stack 0
   305  000041                     	ds	2
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           postdec1	equ	0xFE5
   313                           fsr1l	equ	0xFE1
   314                           
   315                           	psect	bssBANK0
   316  000060                     __pbssBANK0:
   317                           	opt stack 0
   318  000060                     _doors:
   319                           	opt stack 0
   320  000060                     	ds	100
   321  0000C4                     _read:
   322                           	opt stack 0
   323  0000C4                     	ds	6
   324  0000CA                     _readData:
   325                           	opt stack 0
   326  0000CA                     	ds	6
   327  0000D0                     _deviceName:
   328                           	opt stack 0
   329  0000D0                     	ds	3
   330  0000D3                     _door_cnt:
   331                           	opt stack 0
   332  0000D3                     	ds	2
   333  0000D5                     _tick:
   334                           	opt stack 0
   335  0000D5                     	ds	1
   336  0000D6                     _readReady:
   337                           	opt stack 0
   338  0000D6                     	ds	1
   339                           tblptru	equ	0xFF8
   340                           tblptrh	equ	0xFF7
   341                           tblptrl	equ	0xFF6
   342                           tablat	equ	0xFF5
   343                           postinc0	equ	0xFEE
   344                           wreg	equ	0xFE8
   345                           postdec1	equ	0xFE5
   346                           fsr1l	equ	0xFE1
   347                           
   348                           	psect	dataBANK0
   349  0000F9                     __pdataBANK0:
   350                           	opt stack 0
   351  0000F9                     _messageCharacter:
   352                           	opt stack 0
   353  0000F9                     	ds	2
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           postdec1	equ	0xFE5
   361                           fsr1l	equ	0xFE1
   362                           
   363                           	psect	bssBANK1
   364  000100                     __pbssBANK1:
   365                           	opt stack 0
   366  000100                     _readBuffer:
   367                           	opt stack 0
   368  000100                     	ds	166
   369                           tblptru	equ	0xFF8
   370                           tblptrh	equ	0xFF7
   371                           tblptrl	equ	0xFF6
   372                           tablat	equ	0xFF5
   373                           postinc0	equ	0xFEE
   374                           wreg	equ	0xFE8
   375                           postdec1	equ	0xFE5
   376                           fsr1l	equ	0xFE1
   377                           
   378                           	psect	cstackBANK0
   379  0000D7                     __pcstackBANK0:
   380                           	opt stack 0
   381  0000D7                     ??_C_DOOR_Init:
   382  0000D7                     ??_C_DOOR_ReadSensors:
   383  0000D7                     ?_strcmp:
   384                           	opt stack 0
   385  0000D7                     ?___lwdiv:
   386                           	opt stack 0
   387  0000D7                     ?___aldiv:
   388                           	opt stack 0
   389  0000D7                     ?_D_UART_Read:
   390                           	opt stack 0
   391  0000D7                     writeByte@data:
   392                           	opt stack 0
   393  0000D7                     D_UART_Enable@enable:
   394                           	opt stack 0
   395  0000D7                     D_TMR0_Enable@enable:
   396                           	opt stack 0
   397  0000D7                     ___lwdiv@dividend:
   398                           	opt stack 0
   399  0000D7                     strcmp@s1:
   400                           	opt stack 0
   401  0000D7                     ___aldiv@dividend:
   402                           	opt stack 0
   403  0000D7                     commandAndMessage@door:
   404                           	opt stack 0
   405                           
   406                           ; 10 bytes @ 0x0
   407  0000D7                     	ds	1
   408  0000D8                     putch@data:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x1
   412  0000D8                     	ds	1
   413  0000D9                     ___lwdiv@divisor:
   414                           	opt stack 0
   415  0000D9                     strcmp@s2:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x2
   419  0000D9                     	ds	1
   420  0000DA                     C_DOOR_Init@cnt:
   421                           	opt stack 0
   422                           
   423                           ; 1 bytes @ 0x3
   424  0000DA                     	ds	1
   425  0000DB                     ??_strcmp:
   426  0000DB                     C_DOOR_Init@d:
   427                           	opt stack 0
   428  0000DB                     C_DOOR_ReadSensors@d:
   429                           	opt stack 0
   430  0000DB                     ___lwdiv@quotient:
   431                           	opt stack 0
   432  0000DB                     ___aldiv@divisor:
   433                           	opt stack 0
   434                           
   435                           ; 4 bytes @ 0x4
   436  0000DB                     	ds	1
   437  0000DC                     initDoors@door_cnt:
   438                           	opt stack 0
   439  0000DC                     strcmp@r:
   440                           	opt stack 0
   441                           
   442                           ; 1 bytes @ 0x5
   443  0000DC                     	ds	1
   444  0000DD                     ___lwdiv@counter:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x6
   448  0000DD                     	ds	1
   449  0000DE                     ?_printf:
   450                           	opt stack 0
   451  0000DE                     printf@f:
   452                           	opt stack 0
   453                           
   454                           ; 3 bytes @ 0x7
   455  0000DE                     	ds	1
   456  0000DF                     ___aldiv@counter:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x8
   460  0000DF                     	ds	1
   461  0000E0                     ___aldiv@sign:
   462                           	opt stack 0
   463                           
   464                           ; 1 bytes @ 0x9
   465  0000E0                     	ds	1
   466  0000E1                     printf@flag:
   467                           	opt stack 0
   468  0000E1                     commandAndMessage@com:
   469                           	opt stack 0
   470  0000E1                     ___aldiv@quotient:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0xA
   474  0000E1                     	ds	1
   475  0000E2                     printf@ap:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0xB
   479  0000E2                     	ds	1
   480  0000E3                     commandAndMessage@mes:
   481                           	opt stack 0
   482                           
   483                           ; 2 bytes @ 0xC
   484  0000E3                     	ds	1
   485  0000E4                     printf@idx:
   486                           	opt stack 0
   487                           
   488                           ; 1 bytes @ 0xD
   489  0000E4                     	ds	1
   490  0000E5                     D_UART_Init@name:
   491                           	opt stack 0
   492  0000E5                     printf@val:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0xE
   496  0000E5                     	ds	2
   497  0000E7                     printf@prec:
   498                           	opt stack 0
   499  0000E7                     D_UART_Init@baud:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x10
   503  0000E7                     	ds	1
   504  0000E8                     printf@c:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x11
   508  0000E8                     	ds	1
   509  0000E9                     D_UART_Init@interrupts:
   510                           	opt stack 0
   511  0000E9                     D_UART_Write@command:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x12
   515  0000E9                     	ds	1
   516  0000EA                     _D_UART_Init$1504:
   517                           	opt stack 0
   518                           
   519                           ; 4 bytes @ 0x13
   520  0000EA                     	ds	1
   521  0000EB                     D_UART_Write@data:
   522                           	opt stack 0
   523                           
   524                           ; 2 bytes @ 0x14
   525  0000EB                     	ds	2
   526  0000ED                     ??_D_UART_Write:
   527                           
   528                           ; 1 bytes @ 0x16
   529  0000ED                     	ds	1
   530  0000EE                     ??_C_DOOR_SendStates:
   531                           
   532                           ; 1 bytes @ 0x17
   533  0000EE                     	ds	3
   534  0000F1                     C_DOOR_SendStates@com:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x1A
   538  0000F1                     	ds	3
   539  0000F4                     C_DOOR_SendStates@mes:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x1D
   543  0000F4                     	ds	2
   544  0000F6                     C_DOOR_SendStates@d:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x1F
   548  0000F6                     	ds	1
   549  0000F7                     ??_main:
   550                           
   551                           ; 1 bytes @ 0x20
   552  0000F7                     	ds	2
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postdec1	equ	0xFE5
   560                           fsr1l	equ	0xFE1
   561                           
   562                           	psect	cstackCOMRAM
   563  000001                     __pcstackCOMRAM:
   564                           	opt stack 0
   565  000001                     ??_HighISR:
   566  000001                     
   567                           ; 1 bytes @ 0x0
   568  000001                     	ds	18
   569  000013                     ?i1___lwdiv:
   570                           	opt stack 0
   571  000013                     i1writeByte@data:
   572                           	opt stack 0
   573  000013                     i1___lwdiv@dividend:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x12
   577  000013                     	ds	1
   578  000014                     i1putch@data:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x13
   582  000014                     	ds	1
   583  000015                     i1___lwdiv@divisor:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x14
   587  000015                     	ds	2
   588  000017                     i1___lwdiv@quotient:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x16
   592  000017                     	ds	2
   593  000019                     i1___lwdiv@counter:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0x18
   597  000019                     	ds	1
   598  00001A                     ?i1_printf:
   599                           	opt stack 0
   600  00001A                     i1printf@f:
   601                           	opt stack 0
   602                           
   603                           ; 3 bytes @ 0x19
   604  00001A                     	ds	5
   605  00001F                     i1printf@flag:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x1E
   609  00001F                     	ds	1
   610  000020                     i1printf@ap:
   611                           	opt stack 0
   612                           
   613                           ; 2 bytes @ 0x1F
   614  000020                     	ds	2
   615  000022                     i1printf@idx:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x21
   619  000022                     	ds	1
   620  000023                     i1printf@val:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x22
   624  000023                     	ds	2
   625  000025                     i1printf@prec:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0x24
   629  000025                     	ds	1
   630  000026                     i1printf@c:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x25
   634  000026                     	ds	1
   635  000027                     fillDataBuffer@data:
   636                           	opt stack 0
   637                           
   638                           ; 1 bytes @ 0x26
   639  000027                     	ds	1
   640  000028                     ??_LowISR:
   641                           
   642                           ; 1 bytes @ 0x27
   643  000028                     	ds	21
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653 ;;
   654 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   655 ;;
   656 ;; *************** function _main *****************
   657 ;; Defined at:
   658 ;;		line 39 in file "main.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;		None
   663 ;; Return value:  Size  Location     Type
   664 ;;                  1    wreg      void 
   665 ;; Registers used:
   666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   667 ;; Tracked objects:
   668 ;;		On entry : 0/0
   669 ;;		On exit  : 0/0
   670 ;;		Unchanged: 0/0
   671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   672 ;;      Params:         0       0       0       0       0       0       0       0       0
   673 ;;      Locals:         0       0       0       0       0       0       0       0       0
   674 ;;      Temps:          0       2       0       0       0       0       0       0       0
   675 ;;      Totals:         0       2       0       0       0       0       0       0       0
   676 ;;Total ram usage:        2 bytes
   677 ;; Hardware stack levels required when called:   12
   678 ;; This function calls:
   679 ;;		_C_DOOR_LockAll
   680 ;;		_C_DOOR_ReadSensors
   681 ;;		_C_DOOR_SendStates
   682 ;;		_C_DOOR_UnlockAll
   683 ;;		_D_PORT_Init
   684 ;;		_D_TMR0_Init
   685 ;;		_D_UART_Enable
   686 ;;		_D_UART_Init
   687 ;;		_D_UART_Read
   688 ;;		_D_UART_Write
   689 ;;		_initDoors
   690 ;;		_strcmp
   691 ;; This function is called by:
   692 ;;		Startup code after reset
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text0
   697  0009D0                     __ptext0:
   698                           	opt stack 0
   699  0009D0                     _main:
   700                           	opt stack 19
   701                           
   702                           ;main.c: 40: _delay((unsigned long)((200)*(16000000/4000.0)));
   703                           
   704                           ;incstack = 0
   705  0009D0  0E05               	movlw	5
   706  0009D2  0100               	movlb	0	; () banked
   707  0009D4  6FF8               	movwf	(??_main+1)& (0+255),b
   708  0009D6  0E0F               	movlw	15
   709  0009D8  6FF7               	movwf	??_main& (0+255),b
   710  0009DA  0EF1               	movlw	241
   711  0009DC                     u1457:
   712  0009DC  2EE8               	decfsz	wreg,f,c
   713  0009DE  D7FE               	bra	u1457
   714  0009E0  2FF7               	decfsz	??_main& (0+255),f,b
   715  0009E2  D7FC               	bra	u1457
   716  0009E4  2FF8               	decfsz	(??_main+1)& (0+255),f,b
   717  0009E6  D7FA               	bra	u1457
   718                           
   719                           ;main.c: 42: D_PORT_Init();
   720  0009E8  EC0B  F00B         	call	_D_PORT_Init	;wreg free
   721                           
   722                           ;main.c: 46: D_UART_Init("P", 9600, 1);
   723  0009EC  0E2B               	movlw	low STR_8
   724  0009EE  0100               	movlb	0	; () banked
   725  0009F0  6FE5               	movwf	D_UART_Init@name& (0+255),b
   726  0009F2  0E08               	movlw	high STR_8
   727  0009F4  6FE6               	movwf	(D_UART_Init@name+1)& (0+255),b
   728  0009F6  0E25               	movlw	37
   729  0009F8  6FE8               	movwf	(D_UART_Init@baud+1)& (0+255),b
   730  0009FA  0E80               	movlw	128
   731  0009FC  6FE7               	movwf	D_UART_Init@baud& (0+255),b
   732  0009FE  0E01               	movlw	1
   733  000A00  6FE9               	movwf	D_UART_Init@interrupts& (0+255),b
   734  000A02  ECC4  F008         	call	_D_UART_Init	;wreg free
   735                           
   736                           ;main.c: 47: D_UART_Enable(1);
   737  000A06  0E01               	movlw	1
   738  000A08  ECD6  F00A         	call	_D_UART_Enable
   739                           
   740                           ;main.c: 50: D_TMR0_Init();
   741  000A0C  ECE8  F00A         	call	_D_TMR0_Init	;wreg free
   742                           
   743                           ;main.c: 52: _delay((unsigned long)((200)*(16000000/4000.0)));
   744  000A10  0E05               	movlw	5
   745  000A12  0100               	movlb	0	; () banked
   746  000A14  6FF8               	movwf	(??_main+1)& (0+255),b
   747  000A16  0E0F               	movlw	15
   748  000A18  6FF7               	movwf	??_main& (0+255),b
   749  000A1A  0EF1               	movlw	241
   750  000A1C                     u1467:
   751  000A1C  2EE8               	decfsz	wreg,f,c
   752  000A1E  D7FE               	bra	u1467
   753  000A20  2FF7               	decfsz	??_main& (0+255),f,b
   754  000A22  D7FC               	bra	u1467
   755  000A24  2FF8               	decfsz	(??_main+1)& (0+255),f,b
   756  000A26  D7FA               	bra	u1467
   757  000A28                     
   758                           ;main.c: 56: if (readReady) {
   759  000A28  0100               	movlb	0	; () banked
   760  000A2A  51D6               	movf	_readReady& (0+255),w,b
   761  000A2C  B4D8               	btfsc	status,2,c
   762  000A2E  D07F               	goto	l261
   763                           
   764                           ; BSR set to: 0
   765                           ;main.c: 57: readReady = 0;
   766  000A30  0E00               	movlw	0
   767  000A32  6FD6               	movwf	_readReady& (0+255),b
   768                           
   769                           ; BSR set to: 0
   770                           ;main.c: 58: read = D_UART_Read();
   771  000A34  ECBF  F00A         	call	_D_UART_Read	;wreg free
   772  000A38  EE20  F0C4         	lfsr	2,_read
   773  000A3C  0E05               	movlw	5
   774  000A3E                     u1371:
   775  000A3E  CFEB FFDB          	movff	plusw0,plusw2
   776  000A42  06E8               	decf	wreg,f,c
   777  000A44  E2FC               	bc	u1371
   778                           
   779                           ;main.c: 59: if (strcmp(read.command, "L") == 0) {
   780  000A46  C0C6  F0D7         	movff	_read+2,strcmp@s1
   781  000A4A  C0C7  F0D8         	movff	_read+3,strcmp@s1+1
   782  000A4E  0E29               	movlw	low STR_9
   783  000A50  0100               	movlb	0	; () banked
   784  000A52  6FD9               	movwf	strcmp@s2& (0+255),b
   785  000A54  0E08               	movlw	high STR_9
   786  000A56  6FDA               	movwf	(strcmp@s2+1)& (0+255),b
   787  000A58  EC98  F00A         	call	_strcmp	;wreg free
   788  000A5C  0100               	movlb	0	; () banked
   789  000A5E  51D7               	movf	?_strcmp& (0+255),w,b
   790  000A60  11D8               	iorwf	(?_strcmp+1)& (0+255),w,b
   791  000A62  A4D8               	btfss	status,2,c
   792  000A64  D003               	goto	l252
   793                           
   794                           ; BSR set to: 0
   795                           ;main.c: 60: C_DOOR_LockAll();
   796  000A66  EC24  F00B         	call	_C_DOOR_LockAll	;wreg free
   797                           
   798                           ;main.c: 61: } else if (strcmp(read.command, "U") == 0) {
   799  000A6A  D061               	goto	l261
   800  000A6C                     l252:
   801  000A6C  C0C6  F0D7         	movff	_read+2,strcmp@s1
   802  000A70  C0C7  F0D8         	movff	_read+3,strcmp@s1+1
   803  000A74  0E2F               	movlw	low STR_10
   804  000A76  0100               	movlb	0	; () banked
   805  000A78  6FD9               	movwf	strcmp@s2& (0+255),b
   806  000A7A  0E08               	movlw	high STR_10
   807  000A7C  6FDA               	movwf	(strcmp@s2+1)& (0+255),b
   808  000A7E  EC98  F00A         	call	_strcmp	;wreg free
   809  000A82  0100               	movlb	0	; () banked
   810  000A84  51D7               	movf	?_strcmp& (0+255),w,b
   811  000A86  11D8               	iorwf	(?_strcmp+1)& (0+255),w,b
   812  000A88  A4D8               	btfss	status,2,c
   813  000A8A  D003               	goto	l254
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 62: C_DOOR_UnlockAll();
   817  000A8C  EC2B  F00B         	call	_C_DOOR_UnlockAll	;wreg free
   818                           
   819                           ;main.c: 63: } else if (strcmp(read.command, "I") == 0) {
   820  000A90  D04E               	goto	l261
   821  000A92                     l254:
   822  000A92  C0C6  F0D7         	movff	_read+2,strcmp@s1
   823  000A96  C0C7  F0D8         	movff	_read+3,strcmp@s1+1
   824  000A9A  0E27               	movlw	low STR_11
   825  000A9C  0100               	movlb	0	; () banked
   826  000A9E  6FD9               	movwf	strcmp@s2& (0+255),b
   827  000AA0  0E08               	movlw	high STR_11
   828  000AA2  6FDA               	movwf	(strcmp@s2+1)& (0+255),b
   829  000AA4  EC98  F00A         	call	_strcmp	;wreg free
   830  000AA8  0100               	movlb	0	; () banked
   831  000AAA  51D7               	movf	?_strcmp& (0+255),w,b
   832  000AAC  11D8               	iorwf	(?_strcmp+1)& (0+255),w,b
   833  000AAE  A4D8               	btfss	status,2,c
   834  000AB0  D009               	goto	l256
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 64: initDoors((uint8_t)(*read.message - 0x30));
   838  000AB2  C0C8  FFD9         	movff	_read+4,fsr2l
   839  000AB6  C0C9  FFDA         	movff	_read+5,fsr2h
   840  000ABA  50DF               	movf	indf2,w,c
   841  000ABC  0FD0               	addlw	208
   842  000ABE  ECFA  F00A         	call	_initDoors
   843                           
   844                           ;main.c: 65: } else if (strcmp(read.command, "R") == 0) {
   845  000AC2  D035               	goto	l261
   846  000AC4                     l256:
   847  000AC4  C0C6  F0D7         	movff	_read+2,strcmp@s1
   848  000AC8  C0C7  F0D8         	movff	_read+3,strcmp@s1+1
   849  000ACC  0E2D               	movlw	low STR_12
   850  000ACE  0100               	movlb	0	; () banked
   851  000AD0  6FD9               	movwf	strcmp@s2& (0+255),b
   852  000AD2  0E08               	movlw	high STR_12
   853  000AD4  6FDA               	movwf	(strcmp@s2+1)& (0+255),b
   854  000AD6  EC98  F00A         	call	_strcmp	;wreg free
   855  000ADA  0100               	movlb	0	; () banked
   856  000ADC  51D7               	movf	?_strcmp& (0+255),w,b
   857  000ADE  11D8               	iorwf	(?_strcmp+1)& (0+255),w,b
   858  000AE0  A4D8               	btfss	status,2,c
   859  000AE2  D00B               	goto	l258
   860                           
   861                           ; BSR set to: 0
   862                           ;main.c: 66: _delay((unsigned long)((20)*(16000000/4000.0)));
   863  000AE4  0E68               	movlw	104
   864  000AE6  0100               	movlb	0	; () banked
   865  000AE8  6FF7               	movwf	??_main& (0+255),b
   866  000AEA  0EE4               	movlw	228
   867  000AEC                     u1477:
   868  000AEC  2EE8               	decfsz	wreg,f,c
   869  000AEE  D7FE               	bra	u1477
   870  000AF0  2FF7               	decfsz	??_main& (0+255),f,b
   871  000AF2  D7FC               	bra	u1477
   872  000AF4  F000               	nop	
   873  000AF6  00FF               	reset		;# 
   874                           
   875                           ;main.c: 68: } else if (strcmp(read.command, "P") == 0) {
   876  000AF8  D01A               	goto	l261
   877  000AFA                     l258:
   878  000AFA  C0C6  F0D7         	movff	_read+2,strcmp@s1
   879  000AFE  C0C7  F0D8         	movff	_read+3,strcmp@s1+1
   880  000B02  0E2B               	movlw	low STR_8
   881  000B04  0100               	movlb	0	; () banked
   882  000B06  6FD9               	movwf	strcmp@s2& (0+255),b
   883  000B08  0E08               	movlw	high STR_8
   884  000B0A  6FDA               	movwf	(strcmp@s2+1)& (0+255),b
   885  000B0C  EC98  F00A         	call	_strcmp	;wreg free
   886  000B10  0100               	movlb	0	; () banked
   887  000B12  51D7               	movf	?_strcmp& (0+255),w,b
   888  000B14  11D8               	iorwf	(?_strcmp+1)& (0+255),w,b
   889  000B16  B4D8               	btfsc	status,2,c
   890  000B18  D00A               	goto	l261
   891                           
   892                           ; BSR set to: 0
   893                           ;main.c: 71: D_UART_Write("E", "U");
   894                           
   895                           ; BSR set to: 0
   896                           
   897                           ; BSR set to: 0
   898                           ;main.c: 70: } else {
   899  000B1A  0E25               	movlw	low STR_14
   900  000B1C  6FE9               	movwf	D_UART_Write@command& (0+255),b
   901  000B1E  0E08               	movlw	high STR_14
   902  000B20  6FEA               	movwf	(D_UART_Write@command+1)& (0+255),b
   903  000B22  0E2F               	movlw	low STR_10
   904  000B24  6FEB               	movwf	D_UART_Write@data& (0+255),b
   905  000B26  0E08               	movlw	high STR_10
   906  000B28  6FEC               	movwf	(D_UART_Write@data+1)& (0+255),b
   907  000B2A  EC7F  F007         	call	_D_UART_Write	;wreg free
   908  000B2E                     l261:
   909                           
   910                           ;main.c: 72: }
   911                           ;main.c: 73: }
   912                           ;main.c: 76: if (tick) {
   913  000B2E  0100               	movlb	0	; () banked
   914  000B30  51D5               	movf	_tick& (0+255),w,b
   915  000B32  B4D8               	btfsc	status,2,c
   916  000B34  D779               	goto	l250
   917                           
   918                           ; BSR set to: 0
   919                           ;main.c: 77: tick = 0;
   920  000B36  0E00               	movlw	0
   921  000B38  6FD5               	movwf	_tick& (0+255),b
   922                           
   923                           ; BSR set to: 0
   924                           ;main.c: 80: C_DOOR_ReadSensors();
   925  000B3A  EC6A  F009         	call	_C_DOOR_ReadSensors	;wreg free
   926                           
   927                           ;main.c: 83: C_DOOR_SendStates();
   928  000B3E  ECEF  F007         	call	_C_DOOR_SendStates	;wreg free
   929  000B42  D772               	goto	l250
   930  000B44                     __end_of_main:
   931                           	opt stack 0
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           postinc0	equ	0xFEE
   937                           plusw0	equ	0xFEB
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           indf2	equ	0xFDF
   942                           plusw2	equ	0xFDB
   943                           fsr2h	equ	0xFDA
   944                           fsr2l	equ	0xFD9
   945                           status	equ	0xFD8
   946                           
   947 ;; *************** function _strcmp *****************
   948 ;; Defined at:
   949 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   952 ;;		 -> readBuffer(166), 
   953 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   954 ;;		 -> STR_13(2), STR_12(2), STR_11(2), STR_10(2), 
   955 ;;		 -> STR_9(2), 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  r               1    5[BANK0 ] char 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  2    0[BANK0 ] int 
   960 ;; Registers used:
   961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   967 ;;      Params:         0       4       0       0       0       0       0       0       0
   968 ;;      Locals:         0       1       0       0       0       0       0       0       0
   969 ;;      Temps:          0       1       0       0       0       0       0       0       0
   970 ;;      Totals:         0       6       0       0       0       0       0       0       0
   971 ;;Total ram usage:        6 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; Hardware stack levels required when called:    7
   974 ;; This function calls:
   975 ;;		Nothing
   976 ;; This function is called by:
   977 ;;		_main
   978 ;; This function uses a non-reentrant model
   979 ;;
   980                           
   981                           	psect	text1
   982  001530                     __ptext1:
   983                           	opt stack 0
   984  001530                     _strcmp:
   985                           	opt stack 23
   986                           
   987                           ;incstack = 0
   988  001530  D005               	goto	l846
   989  001532  0100               	movlb	0	; () banked
   990  001534  4BD7               	infsnz	strcmp@s1& (0+255),f,b
   991  001536  2BD8               	incf	(strcmp@s1+1)& (0+255),f,b
   992  001538  4BD9               	infsnz	strcmp@s2& (0+255),f,b
   993  00153A  2BDA               	incf	(strcmp@s2+1)& (0+255),f,b
   994  00153C                     l846:
   995                           
   996                           ; BSR set to: 0
   997  00153C  C0D7  FFD9         	movff	strcmp@s1,fsr2l
   998  001540  C0D8  FFDA         	movff	strcmp@s1+1,fsr2h
   999  001544  50DF               	movf	indf2,w,c
  1000  001546  0100               	movlb	0	; () banked
  1001  001548  6FDB               	movwf	??_strcmp& (0+255),b
  1002  00154A  C0D9  FFF6         	movff	strcmp@s2,tblptrl
  1003  00154E  C0DA  FFF7         	movff	strcmp@s2+1,tblptrh
  1004  001552                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1005  001552  6AF8               	clrf	tblptru,c
  1006  001554                     	endif
  1007  001554                     	if	0	;tblptru may be non-zero
  1008  001554                     	endif
  1009  001554  0008               	tblrd		*
  1010  001556  50F5               	movf	tablat,w,c
  1011  001558  0800               	sublw	0
  1012  00155A  25DB               	addwf	??_strcmp& (0+255),w,b
  1013  00155C  6FDC               	movwf	strcmp@r& (0+255),b
  1014  00155E  51DC               	movf	strcmp@r& (0+255),w,b
  1015  001560  A4D8               	btfss	status,2,c
  1016  001562  D007               	goto	u1280
  1017                           
  1018                           ; BSR set to: 0
  1019  001564  C0D7  FFD9         	movff	strcmp@s1,fsr2l
  1020  001568  C0D8  FFDA         	movff	strcmp@s1+1,fsr2h
  1021  00156C  50DF               	movf	indf2,w,c
  1022  00156E  A4D8               	btfss	status,2,c
  1023  001570  D7E0               	goto	l847
  1024  001572                     u1280:
  1025                           
  1026                           ; BSR set to: 0
  1027                           
  1028                           ; BSR set to: 0
  1029                           
  1030                           ; BSR set to: 0
  1031  001572  51DC               	movf	strcmp@r& (0+255),w,b
  1032  001574  6FD7               	movwf	?_strcmp& (0+255),b
  1033  001576  6BD8               	clrf	(?_strcmp+1)& (0+255),b
  1034  001578  BFD7               	btfsc	?_strcmp& (0+255),7,b
  1035  00157A  07D8               	decf	(?_strcmp+1)& (0+255),f,b
  1036  00157C  0012               	return	
  1037  00157E                     __end_of_strcmp:
  1038                           	opt stack 0
  1039                           tblptru	equ	0xFF8
  1040                           tblptrh	equ	0xFF7
  1041                           tblptrl	equ	0xFF6
  1042                           tablat	equ	0xFF5
  1043                           postinc0	equ	0xFEE
  1044                           plusw0	equ	0xFEB
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           indf2	equ	0xFDF
  1049                           plusw2	equ	0xFDB
  1050                           fsr2h	equ	0xFDA
  1051                           fsr2l	equ	0xFD9
  1052                           status	equ	0xFD8
  1053                           
  1054 ;; *************** function _initDoors *****************
  1055 ;; Defined at:
  1056 ;;		line 27 in file "main.c"
  1057 ;; Parameters:    Size  Location     Type
  1058 ;;  door_cnt        1    wreg     unsigned char 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  door_cnt        1    5[BANK0 ] unsigned char 
  1061 ;; Return value:  Size  Location     Type
  1062 ;;                  1    wreg      void 
  1063 ;; Registers used:
  1064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1065 ;; Tracked objects:
  1066 ;;		On entry : 0/0
  1067 ;;		On exit  : 0/0
  1068 ;;		Unchanged: 0/0
  1069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1070 ;;      Params:         0       0       0       0       0       0       0       0       0
  1071 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1073 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1074 ;;Total ram usage:        1 bytes
  1075 ;; Hardware stack levels used:    1
  1076 ;; Hardware stack levels required when called:    8
  1077 ;; This function calls:
  1078 ;;		_C_DOOR_Init
  1079 ;;		_C_DOOR_LockAll
  1080 ;;		_D_TMR0_Enable
  1081 ;; This function is called by:
  1082 ;;		_main
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text2
  1087  0015F4                     __ptext2:
  1088                           	opt stack 0
  1089  0015F4                     _initDoors:
  1090                           	opt stack 22
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;incstack = 0
  1094                           ;initDoors@door_cnt stored from wreg
  1095  0015F4  0100               	movlb	0	; () banked
  1096  0015F6  6FDC               	movwf	initDoors@door_cnt& (0+255),b
  1097                           
  1098                           ;main.c: 28: if (door_cnt < 1) {
  1099  0015F8  0100               	movlb	0	; () banked
  1100  0015FA  51DC               	movf	initDoors@door_cnt& (0+255),w,b
  1101  0015FC  A4D8               	btfss	status,2,c
  1102  0015FE  D002               	goto	l244
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;main.c: 29: door_cnt = 1;
  1106  001600  0E01               	movlw	1
  1107  001602  6FDC               	movwf	initDoors@door_cnt& (0+255),b
  1108  001604                     l244:
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 30: }
  1112                           ;main.c: 32: C_DOOR_Init(door_cnt);
  1113                           
  1114                           ; BSR set to: 0
  1115  001604  51DC               	movf	initDoors@door_cnt& (0+255),w,b
  1116  001606  ECF3  F006         	call	_C_DOOR_Init
  1117                           
  1118                           ;main.c: 33: C_DOOR_LockAll();
  1119  00160A  EC24  F00B         	call	_C_DOOR_LockAll	;wreg free
  1120                           
  1121                           ;main.c: 36: D_TMR0_Enable(1);
  1122  00160E  0E01               	movlw	1
  1123  001610  EC1A  F00B         	call	_D_TMR0_Enable
  1124  001614  0012               	return		;funcret
  1125  001616                     __end_of_initDoors:
  1126                           	opt stack 0
  1127                           tblptru	equ	0xFF8
  1128                           tblptrh	equ	0xFF7
  1129                           tblptrl	equ	0xFF6
  1130                           tablat	equ	0xFF5
  1131                           postinc0	equ	0xFEE
  1132                           plusw0	equ	0xFEB
  1133                           wreg	equ	0xFE8
  1134                           postdec1	equ	0xFE5
  1135                           fsr1l	equ	0xFE1
  1136                           indf2	equ	0xFDF
  1137                           plusw2	equ	0xFDB
  1138                           fsr2h	equ	0xFDA
  1139                           fsr2l	equ	0xFD9
  1140                           status	equ	0xFD8
  1141                           
  1142 ;; *************** function _C_DOOR_LockAll *****************
  1143 ;; Defined at:
  1144 ;;		line 76 in file "Controllers/DOOR_Controller.c"
  1145 ;; Parameters:    Size  Location     Type
  1146 ;;		None
  1147 ;; Auto vars:     Size  Location     Type
  1148 ;;		None
  1149 ;; Return value:  Size  Location     Type
  1150 ;;                  1    wreg      void 
  1151 ;; Registers used:
  1152 ;;		wreg, fsr2l, fsr2h
  1153 ;; Tracked objects:
  1154 ;;		On entry : 0/0
  1155 ;;		On exit  : 0/0
  1156 ;;		Unchanged: 0/0
  1157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1158 ;;      Params:         0       0       0       0       0       0       0       0       0
  1159 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1160 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1161 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1162 ;;Total ram usage:        0 bytes
  1163 ;; Hardware stack levels used:    1
  1164 ;; Hardware stack levels required when called:    7
  1165 ;; This function calls:
  1166 ;;		Nothing
  1167 ;; This function is called by:
  1168 ;;		_initDoors
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text3
  1174  001648                     __ptext3:
  1175                           	opt stack 0
  1176  001648                     _C_DOOR_LockAll:
  1177                           	opt stack 22
  1178                           
  1179                           ;DOOR_Controller.c: 81: *doors[0].lock_port |= 0xC0;
  1180                           
  1181                           ;incstack = 0
  1182  001648  C062  FFD9         	movff	_doors+2,fsr2l
  1183  00164C  C063  FFDA         	movff	_doors+3,fsr2h
  1184  001650  0EC0               	movlw	192
  1185  001652  12DF               	iorwf	indf2,f,c
  1186  001654  0012               	return		;funcret
  1187  001656                     __end_of_C_DOOR_LockAll:
  1188                           	opt stack 0
  1189                           tblptru	equ	0xFF8
  1190                           tblptrh	equ	0xFF7
  1191                           tblptrl	equ	0xFF6
  1192                           tablat	equ	0xFF5
  1193                           postinc0	equ	0xFEE
  1194                           plusw0	equ	0xFEB
  1195                           wreg	equ	0xFE8
  1196                           postdec1	equ	0xFE5
  1197                           fsr1l	equ	0xFE1
  1198                           indf2	equ	0xFDF
  1199                           plusw2	equ	0xFDB
  1200                           fsr2h	equ	0xFDA
  1201                           fsr2l	equ	0xFD9
  1202                           status	equ	0xFD8
  1203                           
  1204 ;; *************** function _C_DOOR_Init *****************
  1205 ;; Defined at:
  1206 ;;		line 45 in file "Controllers/DOOR_Controller.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  cnt             1    wreg     unsigned char 
  1209 ;; Auto vars:     Size  Location     Type
  1210 ;;  cnt             1    3[BANK0 ] unsigned char 
  1211 ;;  d               1    4[BANK0 ] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1221 ;;      Params:         0       0       0       0       0       0       0       0       0
  1222 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1223 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1224 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1225 ;;Total ram usage:        5 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    7
  1228 ;; This function calls:
  1229 ;;		Nothing
  1230 ;; This function is called by:
  1231 ;;		_initDoors
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           	psect	text4
  1236  000DE6                     __ptext4:
  1237                           	opt stack 0
  1238  000DE6                     _C_DOOR_Init:
  1239                           	opt stack 22
  1240                           
  1241                           ;incstack = 0
  1242                           ;C_DOOR_Init@cnt stored from wreg
  1243  000DE6  0100               	movlb	0	; () banked
  1244  000DE8  6FDA               	movwf	C_DOOR_Init@cnt& (0+255),b
  1245                           
  1246                           ;DOOR_Controller.c: 47: TRISB &= 0x3F;
  1247  000DEA  0E3F               	movlw	63
  1248  000DEC  1693               	andwf	3987,f,c	;volatile
  1249                           
  1250                           ;DOOR_Controller.c: 48: TRISB |= 0x3F;
  1251  000DEE  0E3F               	movlw	63
  1252  000DF0  1293               	iorwf	3987,f,c	;volatile
  1253                           
  1254                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1255  000DF2  C0DA  F0D3         	movff	C_DOOR_Init@cnt,_door_cnt
  1256  000DF6  0100               	movlb	0	; () banked
  1257  000DF8  6BD4               	clrf	(_door_cnt+1)& (0+255),b
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;DOOR_Controller.c: 52: uint8_t d;
  1261                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1262  000DFA  0E00               	movlw	0
  1263  000DFC  6FDB               	movwf	C_DOOR_Init@d& (0+255),b
  1264  000DFE  D071               	goto	l18
  1265  000E00                     
  1266                           ; BSR set to: 0
  1267                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1268                           
  1269                           ; BSR set to: 0
  1270  000E00  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1271  000E02  0D0A               	mullw	10
  1272  000E04  0E60               	movlw	low _doors
  1273  000E06  24F3               	addwf	prodl,w,c
  1274  000E08  6ED9               	movwf	fsr2l,c
  1275  000E0A  0E00               	movlw	high _doors
  1276  000E0C  20F4               	addwfc	prodh,w,c
  1277  000E0E  6EDA               	movwf	fsr2h,c
  1278  000E10  C0DB  FFDF         	movff	C_DOOR_Init@d,indf2
  1279                           
  1280                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1281  000E14  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1282  000E16  0D0A               	mullw	10
  1283  000E18  0E01               	movlw	1
  1284  000E1A  26F3               	addwf	prodl,f,c
  1285  000E1C  0E00               	movlw	0
  1286  000E1E  22F4               	addwfc	prodh,f,c
  1287  000E20  0E60               	movlw	low _doors
  1288  000E22  24F3               	addwf	prodl,w,c
  1289  000E24  6ED9               	movwf	fsr2l,c
  1290  000E26  0E00               	movlw	high _doors
  1291  000E28  20F4               	addwfc	prodh,w,c
  1292  000E2A  6EDA               	movwf	fsr2h,c
  1293  000E2C  0E01               	movlw	1
  1294  000E2E  6EDF               	movwf	indf2,c
  1295                           
  1296                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1297  000E30  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1298  000E32  0D0A               	mullw	10
  1299  000E34  0E02               	movlw	2
  1300  000E36  26F3               	addwf	prodl,f,c
  1301  000E38  0E00               	movlw	0
  1302  000E3A  22F4               	addwfc	prodh,f,c
  1303  000E3C  0E60               	movlw	low _doors
  1304  000E3E  24F3               	addwf	prodl,w,c
  1305  000E40  6ED9               	movwf	fsr2l,c
  1306  000E42  0E00               	movlw	high _doors
  1307  000E44  20F4               	addwfc	prodh,w,c
  1308  000E46  6EDA               	movwf	fsr2h,c
  1309  000E48  0E81               	movlw	129
  1310  000E4A  6EDE               	movwf	postinc2,c
  1311  000E4C  0E0F               	movlw	15
  1312  000E4E  6EDD               	movwf	postdec2,c
  1313                           
  1314                           ;DOOR_Controller.c: 58: doors[d].lock_pin = 7;
  1315  000E50  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1316  000E52  0D0A               	mullw	10
  1317  000E54  0E04               	movlw	4
  1318  000E56  26F3               	addwf	prodl,f,c
  1319  000E58  0E00               	movlw	0
  1320  000E5A  22F4               	addwfc	prodh,f,c
  1321  000E5C  0E60               	movlw	low _doors
  1322  000E5E  24F3               	addwf	prodl,w,c
  1323  000E60  6ED9               	movwf	fsr2l,c
  1324  000E62  0E00               	movlw	high _doors
  1325  000E64  20F4               	addwfc	prodh,w,c
  1326  000E66  6EDA               	movwf	fsr2h,c
  1327  000E68  0E07               	movlw	7
  1328  000E6A  6EDF               	movwf	indf2,c
  1329                           
  1330                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1331  000E6C  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1332  000E6E  0D0A               	mullw	10
  1333  000E70  0E06               	movlw	6
  1334  000E72  26F3               	addwf	prodl,f,c
  1335  000E74  0E00               	movlw	0
  1336  000E76  22F4               	addwfc	prodh,f,c
  1337  000E78  0E60               	movlw	low _doors
  1338  000E7A  24F3               	addwf	prodl,w,c
  1339  000E7C  6ED9               	movwf	fsr2l,c
  1340  000E7E  0E00               	movlw	high _doors
  1341  000E80  20F4               	addwfc	prodh,w,c
  1342  000E82  6EDA               	movwf	fsr2h,c
  1343  000E84  0E00               	movlw	0
  1344  000E86  6EDF               	movwf	indf2,c
  1345                           
  1346                           ;DOOR_Controller.c: 61: doors[d].was_open = 0;
  1347  000E88  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1348  000E8A  0D0A               	mullw	10
  1349  000E8C  0E05               	movlw	5
  1350  000E8E  26F3               	addwf	prodl,f,c
  1351  000E90  0E00               	movlw	0
  1352  000E92  22F4               	addwfc	prodh,f,c
  1353  000E94  0E60               	movlw	low _doors
  1354  000E96  24F3               	addwf	prodl,w,c
  1355  000E98  6ED9               	movwf	fsr2l,c
  1356  000E9A  0E00               	movlw	high _doors
  1357  000E9C  20F4               	addwfc	prodh,w,c
  1358  000E9E  6EDA               	movwf	fsr2h,c
  1359  000EA0  0E00               	movlw	0
  1360  000EA2  6EDF               	movwf	indf2,c
  1361                           
  1362                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTB;
  1363  000EA4  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1364  000EA6  0D0A               	mullw	10
  1365  000EA8  0E07               	movlw	7
  1366  000EAA  26F3               	addwf	prodl,f,c
  1367  000EAC  0E00               	movlw	0
  1368  000EAE  22F4               	addwfc	prodh,f,c
  1369  000EB0  0E60               	movlw	low _doors
  1370  000EB2  24F3               	addwf	prodl,w,c
  1371  000EB4  6ED9               	movwf	fsr2l,c
  1372  000EB6  0E00               	movlw	high _doors
  1373  000EB8  20F4               	addwfc	prodh,w,c
  1374  000EBA  6EDA               	movwf	fsr2h,c
  1375  000EBC  0E81               	movlw	129
  1376  000EBE  6EDE               	movwf	postinc2,c
  1377  000EC0  0E0F               	movlw	15
  1378  000EC2  6EDD               	movwf	postdec2,c
  1379                           
  1380                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = d;
  1381  000EC4  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1382  000EC6  0D0A               	mullw	10
  1383  000EC8  0E09               	movlw	9
  1384  000ECA  26F3               	addwf	prodl,f,c
  1385  000ECC  0E00               	movlw	0
  1386  000ECE  22F4               	addwfc	prodh,f,c
  1387  000ED0  0E60               	movlw	low _doors
  1388  000ED2  24F3               	addwf	prodl,w,c
  1389  000ED4  6ED9               	movwf	fsr2l,c
  1390  000ED6  0E00               	movlw	high _doors
  1391  000ED8  20F4               	addwfc	prodh,w,c
  1392  000EDA  6EDA               	movwf	fsr2h,c
  1393  000EDC  C0DB  FFDF         	movff	C_DOOR_Init@d,indf2
  1394                           
  1395                           ; BSR set to: 0
  1396  000EE0  2BDB               	incf	C_DOOR_Init@d& (0+255),f,b
  1397  000EE2                     l18:
  1398                           
  1399                           ; BSR set to: 0
  1400                           
  1401                           ; BSR set to: 0
  1402  000EE2  51DB               	movf	C_DOOR_Init@d& (0+255),w,b
  1403  000EE4  6FD7               	movwf	??_C_DOOR_Init& (0+255),b
  1404  000EE6  6BD8               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1405  000EE8  51D3               	movf	_door_cnt& (0+255),w,b
  1406  000EEA  5DD7               	subwf	??_C_DOOR_Init& (0+255),w,b
  1407  000EEC  51D8               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1408  000EEE  0A80               	xorlw	128
  1409  000EF0  6FD9               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1410  000EF2  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  1411  000EF4  0A80               	xorlw	128
  1412  000EF6  59D9               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1413  000EF8  B0D8               	btfsc	status,0,c
  1414  000EFA  0012               	return	
  1415  000EFC  D781               	goto	l19
  1416  000EFE                     __end_of_C_DOOR_Init:
  1417                           	opt stack 0
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           prodh	equ	0xFF4
  1423                           prodl	equ	0xFF3
  1424                           postinc0	equ	0xFEE
  1425                           plusw0	equ	0xFEB
  1426                           wreg	equ	0xFE8
  1427                           postdec1	equ	0xFE5
  1428                           fsr1l	equ	0xFE1
  1429                           indf2	equ	0xFDF
  1430                           postinc2	equ	0xFDE
  1431                           postdec2	equ	0xFDD
  1432                           plusw2	equ	0xFDB
  1433                           fsr2h	equ	0xFDA
  1434                           fsr2l	equ	0xFD9
  1435                           status	equ	0xFD8
  1436                           
  1437 ;; *************** function _D_UART_Read *****************
  1438 ;; Defined at:
  1439 ;;		line 240 in file "Drivers/UART_Driver.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;		None
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  6    0[BANK0 ] struct .
  1446 ;; Registers used:
  1447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1453 ;;      Params:         0       6       0       0       0       0       0       0       0
  1454 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1456 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1457 ;;Total ram usage:        6 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    7
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text5
  1468  00157E                     __ptext5:
  1469                           	opt stack 0
  1470  00157E                     _D_UART_Read:
  1471                           	opt stack 23
  1472                           
  1473                           ;UART_Driver.c: 241: readData.sender = readBuffer.sender;
  1474                           
  1475                           ; BSR set to: 0
  1476                           ;incstack = 0
  1477  00157E  0E0B               	movlw	low (_readBuffer+11)
  1478  001580  0100               	movlb	0	; () banked
  1479  001582  6FCA               	movwf	_readData& (0+255),b
  1480  001584  0E01               	movlw	high (_readBuffer+11)
  1481  001586  6FCB               	movwf	(_readData+1)& (0+255),b
  1482                           
  1483                           ;UART_Driver.c: 242: readData.command = readBuffer.command;
  1484  001588  0E3E               	movlw	low (_readBuffer+62)
  1485  00158A  6FCC               	movwf	(_readData+2)& (0+255),b
  1486  00158C  0E01               	movlw	high (_readBuffer+62)
  1487  00158E  6FCD               	movwf	(_readData+3)& (0+255),b
  1488                           
  1489                           ;UART_Driver.c: 243: readData.message = readBuffer.message;
  1490  001590  0E71               	movlw	low (_readBuffer+113)
  1491  001592  6FCE               	movwf	(_readData+4)& (0+255),b
  1492  001594  0E01               	movlw	high (_readBuffer+113)
  1493  001596  6FCF               	movwf	(_readData+5)& (0+255),b
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;UART_Driver.c: 244: return readData;
  1497  001598  EE20  F0CA         	lfsr	2,_readData
  1498  00159C  EE00  F0D7         	lfsr	0,?_D_UART_Read
  1499  0015A0  0E05               	movlw	5
  1500  0015A2                     u1251:
  1501  0015A2  CFDB FFEB          	movff	plusw2,plusw0
  1502  0015A6  06E8               	decf	wreg,f,c
  1503  0015A8  E2FC               	bc	u1251
  1504  0015AA  0012               	return	
  1505  0015AC                     __end_of_D_UART_Read:
  1506                           	opt stack 0
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           prodh	equ	0xFF4
  1512                           prodl	equ	0xFF3
  1513                           postinc0	equ	0xFEE
  1514                           plusw0	equ	0xFEB
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1l	equ	0xFE1
  1518                           indf2	equ	0xFDF
  1519                           postinc2	equ	0xFDE
  1520                           postdec2	equ	0xFDD
  1521                           plusw2	equ	0xFDB
  1522                           fsr2h	equ	0xFDA
  1523                           fsr2l	equ	0xFD9
  1524                           status	equ	0xFD8
  1525                           
  1526 ;; *************** function _D_UART_Init *****************
  1527 ;; Defined at:
  1528 ;;		line 182 in file "Drivers/UART_Driver.c"
  1529 ;; Parameters:    Size  Location     Type
  1530 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1531 ;;		 -> STR_8(2), 
  1532 ;;  baud            2   16[BANK0 ] unsigned int 
  1533 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      void 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       5       0       0       0       0       0       0       0
  1546 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        9 bytes
  1550 ;; Hardware stack levels used:    1
  1551 ;; Hardware stack levels required when called:    8
  1552 ;; This function calls:
  1553 ;;		_D_UART_Enable
  1554 ;;		___aldiv
  1555 ;; This function is called by:
  1556 ;;		_main
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text6
  1561  001188                     __ptext6:
  1562                           	opt stack 0
  1563  001188                     _D_UART_Init:
  1564                           	opt stack 22
  1565                           
  1566                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;incstack = 0
  1570  001188  9E94               	bcf	3988,7,c	;volatile
  1571                           
  1572                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1573  00118A  8C94               	bsf	3988,6,c	;volatile
  1574                           
  1575                           ;UART_Driver.c: 188: deviceName = name;
  1576  00118C  C0E5  F0D0         	movff	D_UART_Init@name,_deviceName
  1577  001190  C0E6  F0D1         	movff	D_UART_Init@name+1,_deviceName+1
  1578  001194  0100               	movlb	0	; () banked
  1579  001196  51D0               	movf	_deviceName& (0+255),w,b
  1580  001198  11D1               	iorwf	(_deviceName+1)& (0+255),w,b
  1581  00119A  A4D8               	btfss	status,2,c
  1582  00119C  0E00               	movlw	low (__mediumconst shr (0+16))
  1583  00119E  6FD2               	movwf	(_deviceName+2)& (0+255),b
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;UART_Driver.c: 189: readReady = 0;
  1587  0011A0  0E00               	movlw	0
  1588  0011A2  6FD6               	movwf	_readReady& (0+255),b
  1589                           
  1590                           ; BSR set to: 0
  1591                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1592  0011A4  0E00               	movlw	0
  1593  0011A6  ECD6  F00A         	call	_D_UART_Enable
  1594                           
  1595                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1596  0011AA  9CAC               	bcf	4012,6,c	;volatile
  1597                           
  1598                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1599  0011AC  98AC               	bcf	4012,4,c	;volatile
  1600                           
  1601                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1602  0011AE  94AC               	bcf	4012,2,c	;volatile
  1603                           
  1604                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1605  0011B0  9CAB               	bcf	4011,6,c	;volatile
  1606                           
  1607                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1608  0011B2  9AB8               	bcf	4024,5,c	;volatile
  1609                           
  1610                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1611  0011B4  98B8               	bcf	4024,4,c	;volatile
  1612                           
  1613                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1614  0011B6  96B8               	bcf	4024,3,c	;volatile
  1615                           
  1616                           ;UART_Driver.c: 208: RCSTAbits.FERR = 0;
  1617  0011B8  94AB               	bcf	4011,2,c	;volatile
  1618                           
  1619                           ;UART_Driver.c: 209: RCSTAbits.OERR = 0;
  1620  0011BA  92AB               	bcf	4011,1,c	;volatile
  1621                           
  1622                           ;UART_Driver.c: 210: RCREG = 0x00;
  1623  0011BC  0E00               	movlw	0
  1624  0011BE  6EAE               	movwf	4014,c	;volatile
  1625                           
  1626                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1627  0011C0  C0E7  F0DB         	movff	D_UART_Init@baud,___aldiv@divisor
  1628  0011C4  C0E8  F0DC         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1629  0011C8  0100               	movlb	0	; () banked
  1630  0011CA  6BDD               	clrf	(___aldiv@divisor+2)& (0+255),b
  1631  0011CC  6BDE               	clrf	(___aldiv@divisor+3)& (0+255),b
  1632  0011CE  0E00               	movlw	0
  1633  0011D0  6FD7               	movwf	___aldiv@dividend& (0+255),b
  1634  0011D2  0E24               	movlw	36
  1635  0011D4  6FD8               	movwf	(___aldiv@dividend+1)& (0+255),b
  1636  0011D6  0EF4               	movlw	244
  1637  0011D8  6FD9               	movwf	(___aldiv@dividend+2)& (0+255),b
  1638  0011DA  0E00               	movlw	0
  1639  0011DC  6FDA               	movwf	(___aldiv@dividend+3)& (0+255),b
  1640  0011DE  EC5D  F008         	call	___aldiv	;wreg free
  1641  0011E2  C0D7  F0EA         	movff	?___aldiv,_D_UART_Init$1504
  1642  0011E6  C0D8  F0EB         	movff	?___aldiv+1,_D_UART_Init$1504+1
  1643  0011EA  C0D9  F0EC         	movff	?___aldiv+2,_D_UART_Init$1504+2
  1644  0011EE  C0DA  F0ED         	movff	?___aldiv+3,_D_UART_Init$1504+3
  1645                           
  1646                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1647  0011F2  C0EA  F0D7         	movff	_D_UART_Init$1504,___aldiv@dividend
  1648  0011F6  C0EB  F0D8         	movff	_D_UART_Init$1504+1,___aldiv@dividend+1
  1649  0011FA  C0EC  F0D9         	movff	_D_UART_Init$1504+2,___aldiv@dividend+2
  1650  0011FE  C0ED  F0DA         	movff	_D_UART_Init$1504+3,___aldiv@dividend+3
  1651  001202  0E40               	movlw	64
  1652  001204  0100               	movlb	0	; () banked
  1653  001206  6FDB               	movwf	___aldiv@divisor& (0+255),b
  1654  001208  0E00               	movlw	0
  1655  00120A  6FDC               	movwf	(___aldiv@divisor+1)& (0+255),b
  1656  00120C  0E00               	movlw	0
  1657  00120E  6FDD               	movwf	(___aldiv@divisor+2)& (0+255),b
  1658  001210  0E00               	movlw	0
  1659  001212  6FDE               	movwf	(___aldiv@divisor+3)& (0+255),b
  1660  001214  EC5D  F008         	call	___aldiv	;wreg free
  1661  001218  0100               	movlb	0	; () banked
  1662  00121A  05D7               	decf	?___aldiv& (0+255),w,b
  1663  00121C  6EAF               	movwf	4015,c	;volatile
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;UART_Driver.c: 216: if (interrupts) {
  1667  00121E  51E9               	movf	D_UART_Init@interrupts& (0+255),w,b
  1668  001220  B4D8               	btfsc	status,2,c
  1669  001222  0012               	return	
  1670                           
  1671                           ; BSR set to: 0
  1672                           ;UART_Driver.c: 217: RCONbits.IPEN = 1;
  1673  001224  8ED0               	bsf	4048,7,c	;volatile
  1674                           
  1675                           ;UART_Driver.c: 218: INTCONbits.GIEH = 1;
  1676  001226  8EF2               	bsf	intcon,7,c	;volatile
  1677                           
  1678                           ;UART_Driver.c: 219: INTCONbits.GIEL = 1;
  1679  001228  8CF2               	bsf	intcon,6,c	;volatile
  1680                           
  1681                           ;UART_Driver.c: 220: PIR1bits.RCIF = 0;
  1682  00122A  9A9E               	bcf	3998,5,c	;volatile
  1683                           
  1684                           ;UART_Driver.c: 221: IPR1bits.RCIP = 0;
  1685  00122C  9A9F               	bcf	3999,5,c	;volatile
  1686                           
  1687                           ;UART_Driver.c: 222: PIE1bits.RCIE = 1;
  1688  00122E  8A9D               	bsf	3997,5,c	;volatile
  1689  001230  0012               	return	
  1690  001232                     __end_of_D_UART_Init:
  1691                           	opt stack 0
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           prodh	equ	0xFF4
  1697                           prodl	equ	0xFF3
  1698                           intcon	equ	0xFF2
  1699                           postinc0	equ	0xFEE
  1700                           plusw0	equ	0xFEB
  1701                           wreg	equ	0xFE8
  1702                           postdec1	equ	0xFE5
  1703                           fsr1l	equ	0xFE1
  1704                           indf2	equ	0xFDF
  1705                           postinc2	equ	0xFDE
  1706                           postdec2	equ	0xFDD
  1707                           plusw2	equ	0xFDB
  1708                           fsr2h	equ	0xFDA
  1709                           fsr2l	equ	0xFD9
  1710                           status	equ	0xFD8
  1711                           
  1712 ;; *************** function ___aldiv *****************
  1713 ;; Defined at:
  1714 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  dividend        4    0[BANK0 ] long 
  1717 ;;  divisor         4    4[BANK0 ] long 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  quotient        4   10[BANK0 ] long 
  1720 ;;  sign            1    9[BANK0 ] unsigned char 
  1721 ;;  counter         1    8[BANK0 ] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  4    0[BANK0 ] long 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1731 ;;      Params:         0       8       0       0       0       0       0       0       0
  1732 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1733 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1734 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1735 ;;Total ram usage:       14 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; Hardware stack levels required when called:    7
  1738 ;; This function calls:
  1739 ;;		Nothing
  1740 ;; This function is called by:
  1741 ;;		_D_UART_Init
  1742 ;; This function uses a non-reentrant model
  1743 ;;
  1744                           
  1745                           	psect	text7
  1746  0010BA                     __ptext7:
  1747                           	opt stack 0
  1748  0010BA                     ___aldiv:
  1749                           	opt stack 22
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;incstack = 0
  1753  0010BA  0E00               	movlw	0
  1754  0010BC  0100               	movlb	0	; () banked
  1755  0010BE  6FE0               	movwf	___aldiv@sign& (0+255),b
  1756                           
  1757                           ; BSR set to: 0
  1758  0010C0  AFDE               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1759  0010C2  D00A               	goto	l354
  1760                           
  1761                           ; BSR set to: 0
  1762  0010C4  1FDE               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1763  0010C6  1FDD               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1764  0010C8  1FDC               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1765  0010CA  6DDB               	negf	___aldiv@divisor& (0+255),b
  1766  0010CC  0E00               	movlw	0
  1767  0010CE  23DC               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1768  0010D0  23DD               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1769  0010D2  23DE               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1770                           
  1771                           ; BSR set to: 0
  1772  0010D4  0E01               	movlw	1
  1773  0010D6  6FE0               	movwf	___aldiv@sign& (0+255),b
  1774  0010D8                     l354:
  1775                           
  1776                           ; BSR set to: 0
  1777                           
  1778                           ; BSR set to: 0
  1779  0010D8  AFDA               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1780  0010DA  D00A               	goto	l355
  1781                           
  1782                           ; BSR set to: 0
  1783  0010DC  1FDA               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1784  0010DE  1FD9               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1785  0010E0  1FD8               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1786  0010E2  6DD7               	negf	___aldiv@dividend& (0+255),b
  1787  0010E4  0E00               	movlw	0
  1788  0010E6  23D8               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1789  0010E8  23D9               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1790  0010EA  23DA               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1791                           
  1792                           ; BSR set to: 0
  1793  0010EC  0E01               	movlw	1
  1794  0010EE  1BE0               	xorwf	___aldiv@sign& (0+255),f,b
  1795  0010F0                     l355:
  1796                           
  1797                           ; BSR set to: 0
  1798                           
  1799                           ; BSR set to: 0
  1800  0010F0  0E00               	movlw	0
  1801  0010F2  6FE1               	movwf	___aldiv@quotient& (0+255),b
  1802  0010F4  0E00               	movlw	0
  1803  0010F6  6FE2               	movwf	(___aldiv@quotient+1)& (0+255),b
  1804  0010F8  0E00               	movlw	0
  1805  0010FA  6FE3               	movwf	(___aldiv@quotient+2)& (0+255),b
  1806  0010FC  0E00               	movlw	0
  1807  0010FE  6FE4               	movwf	(___aldiv@quotient+3)& (0+255),b
  1808                           
  1809                           ; BSR set to: 0
  1810  001100  51DB               	movf	___aldiv@divisor& (0+255),w,b
  1811  001102  11DC               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1812  001104  11DD               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1813  001106  11DE               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1814  001108  B4D8               	btfsc	status,2,c
  1815  00110A  D02A               	goto	l362
  1816                           
  1817                           ; BSR set to: 0
  1818  00110C  0E01               	movlw	1
  1819  00110E  6FDF               	movwf	___aldiv@counter& (0+255),b
  1820  001110  D006               	goto	l357
  1821  001112                     
  1822                           ; BSR set to: 0
  1823                           
  1824                           ; BSR set to: 0
  1825  001112  90D8               	bcf	status,0,c
  1826  001114  37DB               	rlcf	___aldiv@divisor& (0+255),f,b
  1827  001116  37DC               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1828  001118  37DD               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1829  00111A  37DE               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1830  00111C  2BDF               	incf	___aldiv@counter& (0+255),f,b
  1831  00111E                     l357:
  1832                           
  1833                           ; BSR set to: 0
  1834                           
  1835                           ; BSR set to: 0
  1836  00111E  AFDE               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1837  001120  D7F8               	goto	l358
  1838  001122                     u1060:
  1839                           
  1840                           ; BSR set to: 0
  1841                           
  1842                           ; BSR set to: 0
  1843                           
  1844                           ; BSR set to: 0
  1845  001122  90D8               	bcf	status,0,c
  1846  001124  37E1               	rlcf	___aldiv@quotient& (0+255),f,b
  1847  001126  37E2               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1848  001128  37E3               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1849  00112A  37E4               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1850                           
  1851                           ; BSR set to: 0
  1852  00112C  51DB               	movf	___aldiv@divisor& (0+255),w,b
  1853  00112E  5DD7               	subwf	___aldiv@dividend& (0+255),w,b
  1854  001130  51DC               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1855  001132  59D8               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1856  001134  51DD               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1857  001136  59D9               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1858  001138  51DE               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1859  00113A  59DA               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1860  00113C  A0D8               	btfss	status,0,c
  1861  00113E  D009               	goto	l361
  1862                           
  1863                           ; BSR set to: 0
  1864  001140  51DB               	movf	___aldiv@divisor& (0+255),w,b
  1865  001142  5FD7               	subwf	___aldiv@dividend& (0+255),f,b
  1866  001144  51DC               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1867  001146  5BD8               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1868  001148  51DD               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1869  00114A  5BD9               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1870  00114C  51DE               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1871  00114E  5BDA               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1872                           
  1873                           ; BSR set to: 0
  1874  001150  81E1               	bsf	___aldiv@quotient& (0+255),0,b
  1875  001152                     l361:
  1876                           
  1877                           ; BSR set to: 0
  1878                           
  1879                           ; BSR set to: 0
  1880  001152  90D8               	bcf	status,0,c
  1881  001154  33DE               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1882  001156  33DD               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1883  001158  33DC               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1884  00115A  33DB               	rrcf	___aldiv@divisor& (0+255),f,b
  1885                           
  1886                           ; BSR set to: 0
  1887  00115C  2FDF               	decfsz	___aldiv@counter& (0+255),f,b
  1888  00115E  D7E1               	goto	u1060
  1889  001160                     l362:
  1890                           
  1891                           ; BSR set to: 0
  1892                           
  1893                           ; BSR set to: 0
  1894                           
  1895                           ; BSR set to: 0
  1896  001160  51E0               	movf	___aldiv@sign& (0+255),w,b
  1897  001162  B4D8               	btfsc	status,2,c
  1898  001164  D008               	goto	l363
  1899                           
  1900                           ; BSR set to: 0
  1901  001166  1FE4               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1902  001168  1FE3               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1903  00116A  1FE2               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1904  00116C  6DE1               	negf	___aldiv@quotient& (0+255),b
  1905  00116E  0E00               	movlw	0
  1906  001170  23E2               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1907  001172  23E3               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1908  001174  23E4               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1909  001176                     l363:
  1910                           
  1911                           ; BSR set to: 0
  1912                           
  1913                           ; BSR set to: 0
  1914  001176  C0E1  F0D7         	movff	___aldiv@quotient,?___aldiv
  1915  00117A  C0E2  F0D8         	movff	___aldiv@quotient+1,?___aldiv+1
  1916  00117E  C0E3  F0D9         	movff	___aldiv@quotient+2,?___aldiv+2
  1917  001182  C0E4  F0DA         	movff	___aldiv@quotient+3,?___aldiv+3
  1918  001186  0012               	return	
  1919  001188                     __end_of___aldiv:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           postinc0	equ	0xFEE
  1929                           plusw0	equ	0xFEB
  1930                           wreg	equ	0xFE8
  1931                           postdec1	equ	0xFE5
  1932                           fsr1l	equ	0xFE1
  1933                           indf2	equ	0xFDF
  1934                           postinc2	equ	0xFDE
  1935                           postdec2	equ	0xFDD
  1936                           plusw2	equ	0xFDB
  1937                           fsr2h	equ	0xFDA
  1938                           fsr2l	equ	0xFD9
  1939                           status	equ	0xFD8
  1940                           
  1941 ;; *************** function _D_UART_Enable *****************
  1942 ;; Defined at:
  1943 ;;		line 247 in file "Drivers/UART_Driver.c"
  1944 ;; Parameters:    Size  Location     Type
  1945 ;;  enable          1    wreg     unsigned char 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  enable          1    0[BANK0 ] unsigned char 
  1948 ;; Return value:  Size  Location     Type
  1949 ;;                  1    wreg      void 
  1950 ;; Registers used:
  1951 ;;		wreg, status,2
  1952 ;; Tracked objects:
  1953 ;;		On entry : 0/0
  1954 ;;		On exit  : 0/0
  1955 ;;		Unchanged: 0/0
  1956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1957 ;;      Params:         0       0       0       0       0       0       0       0       0
  1958 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1959 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1960 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1961 ;;Total ram usage:        1 bytes
  1962 ;; Hardware stack levels used:    1
  1963 ;; Hardware stack levels required when called:    7
  1964 ;; This function calls:
  1965 ;;		Nothing
  1966 ;; This function is called by:
  1967 ;;		_D_UART_Init
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971                           
  1972                           	psect	text8
  1973  0015AC                     __ptext8:
  1974                           	opt stack 0
  1975  0015AC                     _D_UART_Enable:
  1976                           	opt stack 22
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;incstack = 0
  1980                           ;D_UART_Enable@enable stored from wreg
  1981  0015AC  0100               	movlb	0	; () banked
  1982  0015AE  6FD7               	movwf	D_UART_Enable@enable& (0+255),b
  1983                           
  1984                           ;UART_Driver.c: 248: if(enable) {
  1985  0015B0  0100               	movlb	0	; () banked
  1986  0015B2  51D7               	movf	D_UART_Enable@enable& (0+255),w,b
  1987  0015B4  B4D8               	btfsc	status,2,c
  1988  0015B6  D006               	goto	l176
  1989                           
  1990                           ; BSR set to: 0
  1991                           ;UART_Driver.c: 249: TRISCbits.TRISC7 = 0;
  1992  0015B8  9E94               	bcf	3988,7,c	;volatile
  1993                           
  1994                           ;UART_Driver.c: 250: TRISCbits.TRISC6 = 1;
  1995  0015BA  8C94               	bsf	3988,6,c	;volatile
  1996                           
  1997                           ;UART_Driver.c: 251: TXSTAbits.TXEN = 1;
  1998  0015BC  8AAC               	bsf	4012,5,c	;volatile
  1999                           
  2000                           ;UART_Driver.c: 252: RCSTAbits.CREN = 1;
  2001  0015BE  88AB               	bsf	4011,4,c	;volatile
  2002                           
  2003                           ;UART_Driver.c: 253: RCSTAbits.SPEN = 1;
  2004  0015C0  8EAB               	bsf	4011,7,c	;volatile
  2005                           
  2006                           ;UART_Driver.c: 254: } else {
  2007  0015C2  0012               	return	
  2008  0015C4                     l176:
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;UART_Driver.c: 255: TRISCbits.TRISC7 = 0;
  2012  0015C4  9E94               	bcf	3988,7,c	;volatile
  2013                           
  2014                           ;UART_Driver.c: 256: TRISCbits.TRISC6 = 0;
  2015  0015C6  9C94               	bcf	3988,6,c	;volatile
  2016                           
  2017                           ;UART_Driver.c: 257: TXSTAbits.TXEN = 0;
  2018  0015C8  9AAC               	bcf	4012,5,c	;volatile
  2019                           
  2020                           ;UART_Driver.c: 258: RCSTAbits.CREN = 0;
  2021  0015CA  98AB               	bcf	4011,4,c	;volatile
  2022                           
  2023                           ;UART_Driver.c: 259: RCSTAbits.SPEN = 0;
  2024  0015CC  9EAB               	bcf	4011,7,c	;volatile
  2025  0015CE  0012               	return	
  2026  0015D0                     __end_of_D_UART_Enable:
  2027                           	opt stack 0
  2028                           tblptru	equ	0xFF8
  2029                           tblptrh	equ	0xFF7
  2030                           tblptrl	equ	0xFF6
  2031                           tablat	equ	0xFF5
  2032                           prodh	equ	0xFF4
  2033                           prodl	equ	0xFF3
  2034                           intcon	equ	0xFF2
  2035                           postinc0	equ	0xFEE
  2036                           plusw0	equ	0xFEB
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           fsr1l	equ	0xFE1
  2040                           indf2	equ	0xFDF
  2041                           postinc2	equ	0xFDE
  2042                           postdec2	equ	0xFDD
  2043                           plusw2	equ	0xFDB
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8
  2047                           
  2048 ;; *************** function _D_TMR0_Init *****************
  2049 ;; Defined at:
  2050 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2064 ;;      Params:         0       0       0       0       0       0       0       0       0
  2065 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2066 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2067 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2068 ;;Total ram usage:        0 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:    8
  2071 ;; This function calls:
  2072 ;;		_D_TMR0_Enable
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text9
  2079  0015D0                     __ptext9:
  2080                           	opt stack 0
  2081  0015D0                     _D_TMR0_Init:
  2082                           	opt stack 22
  2083                           
  2084                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2085                           
  2086                           ; BSR set to: 0
  2087                           ;incstack = 0
  2088  0015D0  0E00               	movlw	0
  2089  0015D2  EC1A  F00B         	call	_D_TMR0_Enable
  2090                           
  2091                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2092  0015D6  9CD5               	bcf	4053,6,c	;volatile
  2093                           
  2094                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2095  0015D8  9AD5               	bcf	4053,5,c	;volatile
  2096                           
  2097                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2098  0015DA  98D5               	bcf	4053,4,c	;volatile
  2099                           
  2100                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2101  0015DC  96D5               	bcf	4053,3,c	;volatile
  2102                           
  2103                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2104  0015DE  50D5               	movf	4053,w,c	;volatile
  2105  0015E0  0BF8               	andlw	-8
  2106  0015E2  0902               	iorlw	2
  2107  0015E4  6ED5               	movwf	4053,c	;volatile
  2108                           
  2109                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2110  0015E6  8ED0               	bsf	4048,7,c	;volatile
  2111                           
  2112                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2113  0015E8  8EF2               	bsf	intcon,7,c	;volatile
  2114                           
  2115                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2116  0015EA  8CF2               	bsf	intcon,6,c	;volatile
  2117                           
  2118                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2119  0015EC  94F2               	bcf	intcon,2,c	;volatile
  2120                           
  2121                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  2122  0015EE  84F1               	bsf	intcon2,2,c	;volatile
  2123                           
  2124                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2125  0015F0  8AF2               	bsf	intcon,5,c	;volatile
  2126  0015F2  0012               	return		;funcret
  2127  0015F4                     __end_of_D_TMR0_Init:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           prodh	equ	0xFF4
  2134                           prodl	equ	0xFF3
  2135                           intcon	equ	0xFF2
  2136                           intcon2	equ	0xFF1
  2137                           postinc0	equ	0xFEE
  2138                           plusw0	equ	0xFEB
  2139                           wreg	equ	0xFE8
  2140                           postdec1	equ	0xFE5
  2141                           fsr1l	equ	0xFE1
  2142                           indf2	equ	0xFDF
  2143                           postinc2	equ	0xFDE
  2144                           postdec2	equ	0xFDD
  2145                           plusw2	equ	0xFDB
  2146                           fsr2h	equ	0xFDA
  2147                           fsr2l	equ	0xFD9
  2148                           status	equ	0xFD8
  2149                           
  2150 ;; *************** function _D_TMR0_Enable *****************
  2151 ;; Defined at:
  2152 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  2153 ;; Parameters:    Size  Location     Type
  2154 ;;  enable          1    wreg     unsigned char 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  enable          1    0[BANK0 ] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  1    wreg      void 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2166 ;;      Params:         0       0       0       0       0       0       0       0       0
  2167 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2169 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2170 ;;Total ram usage:        1 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    7
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_D_TMR0_Init
  2177 ;;		_initDoors
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181                           	psect	text10
  2182  001634                     __ptext10:
  2183                           	opt stack 0
  2184  001634                     _D_TMR0_Enable:
  2185                           	opt stack 22
  2186                           
  2187                           ;incstack = 0
  2188                           ;D_TMR0_Enable@enable stored from wreg
  2189  001634  0100               	movlb	0	; () banked
  2190  001636  6FD7               	movwf	D_TMR0_Enable@enable& (0+255),b
  2191                           
  2192                           ;TMR0_Driver.c: 54: if (enable) {
  2193  001638  0100               	movlb	0	; () banked
  2194  00163A  51D7               	movf	D_TMR0_Enable@enable& (0+255),w,b
  2195  00163C  B4D8               	btfsc	status,2,c
  2196  00163E  D002               	goto	l203
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  2200  001640  8ED5               	bsf	4053,7,c	;volatile
  2201                           
  2202                           ;TMR0_Driver.c: 56: } else {
  2203  001642  0012               	return	
  2204  001644                     l203:
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  2208  001644  9ED5               	bcf	4053,7,c	;volatile
  2209  001646  0012               	return	
  2210  001648                     __end_of_D_TMR0_Enable:
  2211                           	opt stack 0
  2212                           tblptru	equ	0xFF8
  2213                           tblptrh	equ	0xFF7
  2214                           tblptrl	equ	0xFF6
  2215                           tablat	equ	0xFF5
  2216                           prodh	equ	0xFF4
  2217                           prodl	equ	0xFF3
  2218                           intcon	equ	0xFF2
  2219                           intcon2	equ	0xFF1
  2220                           postinc0	equ	0xFEE
  2221                           plusw0	equ	0xFEB
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           postinc2	equ	0xFDE
  2227                           postdec2	equ	0xFDD
  2228                           plusw2	equ	0xFDB
  2229                           fsr2h	equ	0xFDA
  2230                           fsr2l	equ	0xFD9
  2231                           status	equ	0xFD8
  2232                           
  2233 ;; *************** function _D_PORT_Init *****************
  2234 ;; Defined at:
  2235 ;;		line 32 in file "Drivers/PORT_Driver.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;		None
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, status,2
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2249 ;;      Params:         0       0       0       0       0       0       0       0       0
  2250 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2252 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2253 ;;Total ram usage:        0 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    7
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_main
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263                           	psect	text11
  2264  001616                     __ptext11:
  2265                           	opt stack 0
  2266  001616                     _D_PORT_Init:
  2267                           	opt stack 23
  2268                           
  2269                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;incstack = 0
  2273  001616  0E00               	movlw	0
  2274  001618  6E92               	movwf	3986,c	;volatile
  2275  00161A  0E00               	movlw	0
  2276  00161C  6E80               	movwf	3968,c	;volatile
  2277                           
  2278                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  2279  00161E  0E00               	movlw	0
  2280  001620  6E93               	movwf	3987,c	;volatile
  2281  001622  0E00               	movlw	0
  2282  001624  6E81               	movwf	3969,c	;volatile
  2283                           
  2284                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  2285  001626  0E00               	movlw	0
  2286  001628  6E94               	movwf	3988,c	;volatile
  2287  00162A  0E00               	movlw	0
  2288  00162C  6E82               	movwf	3970,c	;volatile
  2289                           
  2290                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  2291  00162E  0E0F               	movlw	15
  2292  001630  6EC1               	movwf	4033,c	;volatile
  2293  001632  0012               	return		;funcret
  2294  001634                     __end_of_D_PORT_Init:
  2295                           	opt stack 0
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           prodh	equ	0xFF4
  2301                           prodl	equ	0xFF3
  2302                           intcon	equ	0xFF2
  2303                           intcon2	equ	0xFF1
  2304                           postinc0	equ	0xFEE
  2305                           plusw0	equ	0xFEB
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1l	equ	0xFE1
  2309                           indf2	equ	0xFDF
  2310                           postinc2	equ	0xFDE
  2311                           postdec2	equ	0xFDD
  2312                           plusw2	equ	0xFDB
  2313                           fsr2h	equ	0xFDA
  2314                           fsr2l	equ	0xFD9
  2315                           status	equ	0xFD8
  2316                           
  2317 ;; *************** function _C_DOOR_UnlockAll *****************
  2318 ;; Defined at:
  2319 ;;		line 93 in file "Controllers/DOOR_Controller.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;		None
  2322 ;; Auto vars:     Size  Location     Type
  2323 ;;		None
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  1    wreg      void 
  2326 ;; Registers used:
  2327 ;;		wreg, fsr2l, fsr2h
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2333 ;;      Params:         0       0       0       0       0       0       0       0       0
  2334 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2336 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2337 ;;Total ram usage:        0 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    7
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_main
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           	psect	text12
  2348  001656                     __ptext12:
  2349                           	opt stack 0
  2350  001656                     _C_DOOR_UnlockAll:
  2351                           	opt stack 23
  2352                           
  2353                           ;DOOR_Controller.c: 98: *doors[0].lock_port &= 0x3F;
  2354                           
  2355                           ;incstack = 0
  2356  001656  C062  FFD9         	movff	_doors+2,fsr2l
  2357  00165A  C063  FFDA         	movff	_doors+3,fsr2h
  2358  00165E  0E3F               	movlw	63
  2359  001660  16DF               	andwf	indf2,f,c
  2360  001662  0012               	return		;funcret
  2361  001664                     __end_of_C_DOOR_UnlockAll:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           prodh	equ	0xFF4
  2368                           prodl	equ	0xFF3
  2369                           intcon	equ	0xFF2
  2370                           intcon2	equ	0xFF1
  2371                           postinc0	equ	0xFEE
  2372                           plusw0	equ	0xFEB
  2373                           wreg	equ	0xFE8
  2374                           postdec1	equ	0xFE5
  2375                           fsr1l	equ	0xFE1
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           plusw2	equ	0xFDB
  2380                           fsr2h	equ	0xFDA
  2381                           fsr2l	equ	0xFD9
  2382                           status	equ	0xFD8
  2383                           
  2384 ;; *************** function _C_DOOR_SendStates *****************
  2385 ;; Defined at:
  2386 ;;		line 108 in file "Controllers/DOOR_Controller.c"
  2387 ;; Parameters:    Size  Location     Type
  2388 ;;		None
  2389 ;; Auto vars:     Size  Location     Type
  2390 ;;  com             3   26[BANK0 ] unsigned char [3]
  2391 ;;  mes             2   29[BANK0 ] unsigned char [2]
  2392 ;;  d               1   31[BANK0 ] unsigned char 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      void 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2402 ;;      Params:         0       0       0       0       0       0       0       0       0
  2403 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2404 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2405 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2406 ;;Total ram usage:        9 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:   11
  2409 ;; This function calls:
  2410 ;;		_D_UART_Write
  2411 ;;		_commandAndMessage
  2412 ;; This function is called by:
  2413 ;;		_main
  2414 ;; This function uses a non-reentrant model
  2415 ;;
  2416                           
  2417                           	psect	text13
  2418  000FDE                     __ptext13:
  2419                           	opt stack 0
  2420  000FDE                     _C_DOOR_SendStates:
  2421                           	opt stack 19
  2422                           
  2423                           ;DOOR_Controller.c: 109: uint8_t d;
  2424                           ;DOOR_Controller.c: 110: for (d = 0; d < door_cnt; d++) {
  2425                           
  2426                           ;incstack = 0
  2427  000FDE  0E00               	movlw	0
  2428  000FE0  0100               	movlb	0	; () banked
  2429  000FE2  6FF6               	movwf	C_DOOR_SendStates@d& (0+255),b
  2430  000FE4  D05C               	goto	l50
  2431  000FE6                     
  2432                           ; BSR set to: 0
  2433                           ;DOOR_Controller.c: 111: if (doors[d].was_open != doors[d].is_open) {
  2434                           
  2435                           ; BSR set to: 0
  2436  000FE6  51F6               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2437  000FE8  0D0A               	mullw	10
  2438  000FEA  0E06               	movlw	6
  2439  000FEC  26F3               	addwf	prodl,f,c
  2440  000FEE  0E00               	movlw	0
  2441  000FF0  22F4               	addwfc	prodh,f,c
  2442  000FF2  0E60               	movlw	low _doors
  2443  000FF4  24F3               	addwf	prodl,w,c
  2444  000FF6  6ED9               	movwf	fsr2l,c
  2445  000FF8  0E00               	movlw	high _doors
  2446  000FFA  20F4               	addwfc	prodh,w,c
  2447  000FFC  6EDA               	movwf	fsr2h,c
  2448  000FFE  51F6               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2449  001000  0D0A               	mullw	10
  2450  001002  0E05               	movlw	5
  2451  001004  26F3               	addwf	prodl,f,c
  2452  001006  0E00               	movlw	0
  2453  001008  22F4               	addwfc	prodh,f,c
  2454  00100A  0E60               	movlw	low _doors
  2455  00100C  24F3               	addwf	prodl,w,c
  2456  00100E  6EE1               	movwf	fsr1l,c
  2457  001010  0E00               	movlw	high _doors
  2458  001012  20F4               	addwfc	prodh,w,c
  2459  001014  6EE2               	movwf	fsr1h,c
  2460  001016  50DE               	movf	postinc2,w,c
  2461  001018  18E6               	xorwf	postinc1,w,c
  2462  00101A  B4D8               	btfsc	status,2,c
  2463  00101C  D03F               	goto	l52
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;DOOR_Controller.c: 113: char com[3];
  2467                           ;DOOR_Controller.c: 114: char mes[2];
  2468                           ;DOOR_Controller.c: 115: commandAndMessage(doors[d], com, mes);
  2469  00101E  51F6               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2470  001020  0D0A               	mullw	10
  2471  001022  0E60               	movlw	low _doors
  2472  001024  24F3               	addwf	prodl,w,c
  2473  001026  6ED9               	movwf	fsr2l,c
  2474  001028  0E00               	movlw	high _doors
  2475  00102A  20F4               	addwfc	prodh,w,c
  2476  00102C  6EDA               	movwf	fsr2h,c
  2477  00102E  EE00  F0D7         	lfsr	0,commandAndMessage@door
  2478  001032  0E09               	movlw	9
  2479  001034                     u1121:
  2480  001034  CFDB FFEB          	movff	plusw2,plusw0
  2481  001038  06E8               	decf	wreg,f,c
  2482  00103A  E2FC               	bc	u1121
  2483  00103C  0EF1               	movlw	low C_DOOR_SendStates@com
  2484  00103E  6FE1               	movwf	commandAndMessage@com& (0+255),b
  2485  001040  0E00               	movlw	high C_DOOR_SendStates@com
  2486  001042  6FE2               	movwf	(commandAndMessage@com+1)& (0+255),b
  2487  001044  0EF4               	movlw	low C_DOOR_SendStates@mes
  2488  001046  6FE3               	movwf	commandAndMessage@mes& (0+255),b
  2489  001048  0E00               	movlw	high C_DOOR_SendStates@mes
  2490  00104A  6FE4               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2491  00104C  ECB7  F009         	call	_commandAndMessage	;wreg free
  2492                           
  2493                           ;DOOR_Controller.c: 118: D_UART_Write(com, mes);
  2494  001050  0EF1               	movlw	low C_DOOR_SendStates@com
  2495  001052  0100               	movlb	0	; () banked
  2496  001054  6FE9               	movwf	D_UART_Write@command& (0+255),b
  2497  001056  0E00               	movlw	high C_DOOR_SendStates@com
  2498  001058  6FEA               	movwf	(D_UART_Write@command+1)& (0+255),b
  2499  00105A  0EF4               	movlw	low C_DOOR_SendStates@mes
  2500  00105C  6FEB               	movwf	D_UART_Write@data& (0+255),b
  2501  00105E  0E00               	movlw	high C_DOOR_SendStates@mes
  2502  001060  6FEC               	movwf	(D_UART_Write@data+1)& (0+255),b
  2503  001062  EC7F  F007         	call	_D_UART_Write	;wreg free
  2504                           
  2505                           ;DOOR_Controller.c: 120: doors[d].was_open = doors[d].is_open;
  2506  001066  0100               	movlb	0	; () banked
  2507  001068  51F6               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2508  00106A  0D0A               	mullw	10
  2509  00106C  0E06               	movlw	6
  2510  00106E  26F3               	addwf	prodl,f,c
  2511  001070  0E00               	movlw	0
  2512  001072  22F4               	addwfc	prodh,f,c
  2513  001074  0E60               	movlw	low _doors
  2514  001076  24F3               	addwf	prodl,w,c
  2515  001078  6ED9               	movwf	fsr2l,c
  2516  00107A  0E00               	movlw	high _doors
  2517  00107C  20F4               	addwfc	prodh,w,c
  2518  00107E  6EDA               	movwf	fsr2h,c
  2519  001080  51F6               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2520  001082  0D0A               	mullw	10
  2521  001084  0E05               	movlw	5
  2522  001086  26F3               	addwf	prodl,f,c
  2523  001088  0E00               	movlw	0
  2524  00108A  22F4               	addwfc	prodh,f,c
  2525  00108C  0E60               	movlw	low _doors
  2526  00108E  24F3               	addwf	prodl,w,c
  2527  001090  6EE1               	movwf	fsr1l,c
  2528  001092  0E00               	movlw	high _doors
  2529  001094  20F4               	addwfc	prodh,w,c
  2530  001096  6EE2               	movwf	fsr1h,c
  2531  001098  CFDF FFE7          	movff	indf2,indf1
  2532  00109C                     l52:
  2533                           
  2534                           ; BSR set to: 0
  2535                           
  2536                           ; BSR set to: 0
  2537  00109C  2BF6               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2538  00109E                     l50:
  2539                           
  2540                           ; BSR set to: 0
  2541                           
  2542                           ; BSR set to: 0
  2543  00109E  51F6               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2544  0010A0  6FEE               	movwf	??_C_DOOR_SendStates& (0+255),b
  2545  0010A2  6BEF               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  2546  0010A4  51D3               	movf	_door_cnt& (0+255),w,b
  2547  0010A6  5DEE               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  2548  0010A8  51EF               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  2549  0010AA  0A80               	xorlw	128
  2550  0010AC  6FF0               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  2551  0010AE  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  2552  0010B0  0A80               	xorlw	128
  2553  0010B2  59F0               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  2554  0010B4  B0D8               	btfsc	status,0,c
  2555  0010B6  0012               	return	
  2556  0010B8  D796               	goto	l51
  2557  0010BA                     __end_of_C_DOOR_SendStates:
  2558                           	opt stack 0
  2559                           tblptru	equ	0xFF8
  2560                           tblptrh	equ	0xFF7
  2561                           tblptrl	equ	0xFF6
  2562                           tablat	equ	0xFF5
  2563                           prodh	equ	0xFF4
  2564                           prodl	equ	0xFF3
  2565                           intcon	equ	0xFF2
  2566                           intcon2	equ	0xFF1
  2567                           postinc0	equ	0xFEE
  2568                           plusw0	equ	0xFEB
  2569                           wreg	equ	0xFE8
  2570                           indf1	equ	0xFE7
  2571                           postinc1	equ	0xFE6
  2572                           postdec1	equ	0xFE5
  2573                           fsr1h	equ	0xFE2
  2574                           fsr1l	equ	0xFE1
  2575                           indf2	equ	0xFDF
  2576                           postinc2	equ	0xFDE
  2577                           postdec2	equ	0xFDD
  2578                           plusw2	equ	0xFDB
  2579                           fsr2h	equ	0xFDA
  2580                           fsr2l	equ	0xFD9
  2581                           status	equ	0xFD8
  2582                           
  2583 ;; *************** function _commandAndMessage *****************
  2584 ;; Defined at:
  2585 ;;		line 27 in file "Controllers/DOOR_Controller.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;  door           10    0[BANK0 ] struct .
  2588 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2589 ;;		 -> C_DOOR_SendStates@com(3), 
  2590 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2591 ;;		 -> C_DOOR_SendStates@mes(2), 
  2592 ;; Auto vars:     Size  Location     Type
  2593 ;;		None
  2594 ;; Return value:  Size  Location     Type
  2595 ;;                  1    wreg      void 
  2596 ;; Registers used:
  2597 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2598 ;; Tracked objects:
  2599 ;;		On entry : 0/0
  2600 ;;		On exit  : 0/0
  2601 ;;		Unchanged: 0/0
  2602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2603 ;;      Params:         0      14       0       0       0       0       0       0       0
  2604 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2606 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2607 ;;Total ram usage:       14 bytes
  2608 ;; Hardware stack levels used:    1
  2609 ;; Hardware stack levels required when called:    7
  2610 ;; This function calls:
  2611 ;;		Nothing
  2612 ;; This function is called by:
  2613 ;;		_C_DOOR_SendStates
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text14
  2618  00136E                     __ptext14:
  2619                           	opt stack 0
  2620  00136E                     _commandAndMessage:
  2621                           	opt stack 22
  2622                           
  2623                           ;DOOR_Controller.c: 29: com[0] = 'D';
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;incstack = 0
  2627  00136E  C0E1  FFD9         	movff	commandAndMessage@com,fsr2l
  2628  001372  C0E2  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2629  001376  0E44               	movlw	68
  2630  001378  6EDF               	movwf	indf2,c
  2631                           
  2632                           ;DOOR_Controller.c: 30: com[1] = (uint8_t)(door.id + 0x30);
  2633  00137A  0100               	movlb	0	; () banked
  2634  00137C  EE20 F001          	lfsr	2,1
  2635  001380  51E1               	movf	commandAndMessage@com& (0+255),w,b
  2636  001382  26D9               	addwf	fsr2l,f,c
  2637  001384  51E2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2638  001386  22DA               	addwfc	fsr2h,f,c
  2639  001388  51D7               	movf	commandAndMessage@door& (0+255),w,b
  2640  00138A  0F30               	addlw	48
  2641  00138C  6EDF               	movwf	indf2,c
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;DOOR_Controller.c: 31: com[2] = '\0';
  2645  00138E  EE20 F002          	lfsr	2,2
  2646  001392  51E1               	movf	commandAndMessage@com& (0+255),w,b
  2647  001394  26D9               	addwf	fsr2l,f,c
  2648  001396  51E2               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2649  001398  22DA               	addwfc	fsr2h,f,c
  2650  00139A  0E00               	movlw	0
  2651  00139C  6EDF               	movwf	indf2,c
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;DOOR_Controller.c: 34: if (door.is_open) {
  2655  00139E  51DD               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2656  0013A0  B4D8               	btfsc	status,2,c
  2657  0013A2  D006               	goto	l13
  2658                           
  2659                           ; BSR set to: 0
  2660                           ;DOOR_Controller.c: 35: mes[0] = 'C';
  2661  0013A4  C0E3  FFD9         	movff	commandAndMessage@mes,fsr2l
  2662  0013A8  C0E4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2663  0013AC  0E43               	movlw	67
  2664  0013AE  D005               	goto	L1
  2665  0013B0                     l13:
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;DOOR_Controller.c: 37: mes[0] = 'O';
  2669                           
  2670                           ; BSR set to: 0
  2671  0013B0  C0E3  FFD9         	movff	commandAndMessage@mes,fsr2l
  2672  0013B4  C0E4  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2673  0013B8  0E4F               	movlw	79
  2674  0013BA                     L1:
  2675  0013BA  6EDF               	movwf	indf2,c
  2676                           
  2677                           ; BSR set to: 0
  2678                           ;DOOR_Controller.c: 38: }
  2679                           ;DOOR_Controller.c: 39: mes[1] = '\0';
  2680                           
  2681                           ; BSR set to: 0
  2682  0013BC  EE20 F001          	lfsr	2,1
  2683  0013C0  51E3               	movf	commandAndMessage@mes& (0+255),w,b
  2684  0013C2  26D9               	addwf	fsr2l,f,c
  2685  0013C4  51E4               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2686  0013C6  22DA               	addwfc	fsr2h,f,c
  2687  0013C8  0E00               	movlw	0
  2688  0013CA  6EDF               	movwf	indf2,c
  2689                           
  2690                           ; BSR set to: 0
  2691  0013CC  0012               	return		;funcret
  2692  0013CE                     __end_of_commandAndMessage:
  2693                           	opt stack 0
  2694                           tblptru	equ	0xFF8
  2695                           tblptrh	equ	0xFF7
  2696                           tblptrl	equ	0xFF6
  2697                           tablat	equ	0xFF5
  2698                           prodh	equ	0xFF4
  2699                           prodl	equ	0xFF3
  2700                           intcon	equ	0xFF2
  2701                           intcon2	equ	0xFF1
  2702                           postinc0	equ	0xFEE
  2703                           plusw0	equ	0xFEB
  2704                           wreg	equ	0xFE8
  2705                           indf1	equ	0xFE7
  2706                           postinc1	equ	0xFE6
  2707                           postdec1	equ	0xFE5
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           plusw2	equ	0xFDB
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _D_UART_Write *****************
  2719 ;; Defined at:
  2720 ;;		line 226 in file "Drivers/UART_Driver.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2723 ;;		 -> STR_14(2), C_DOOR_SendStates@com(3), 
  2724 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2725 ;;		 -> STR_15(2), C_DOOR_SendStates@mes(2), 
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2737 ;;      Params:         0       4       0       0       0       0       0       0       0
  2738 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2739 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2740 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2741 ;;Total ram usage:        5 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:   10
  2744 ;; This function calls:
  2745 ;;		_printf
  2746 ;; This function is called by:
  2747 ;;		_C_DOOR_SendStates
  2748 ;;		_main
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text15
  2753  000EFE                     __ptext15:
  2754                           	opt stack 0
  2755  000EFE                     _D_UART_Write:
  2756                           	opt stack 20
  2757                           
  2758                           ;UART_Driver.c: 227: printf(startCharacter);
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;incstack = 0
  2762  000EFE  C041  F0DE         	movff	_startCharacter,printf@f
  2763  000F02  C042  F0DF         	movff	_startCharacter+1,printf@f+1
  2764  000F06  0100               	movlb	0	; () banked
  2765  000F08  51DE               	movf	printf@f& (0+255),w,b
  2766  000F0A  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2767  000F0C  A4D8               	btfss	status,2,c
  2768  000F0E  0E00               	movlw	low (__mediumconst shr (0+16))
  2769  000F10  6FE0               	movwf	(printf@f+2)& (0+255),b
  2770  000F12  ECA2  F005         	call	_printf	;wreg free
  2771                           
  2772                           ;UART_Driver.c: 229: printf(messageCharacter);
  2773  000F16  C0F9  F0DE         	movff	_messageCharacter,printf@f
  2774  000F1A  C0FA  F0DF         	movff	_messageCharacter+1,printf@f+1
  2775  000F1E  0100               	movlb	0	; () banked
  2776  000F20  51DE               	movf	printf@f& (0+255),w,b
  2777  000F22  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2778  000F24  A4D8               	btfss	status,2,c
  2779  000F26  0E00               	movlw	low (__mediumconst shr (0+16))
  2780  000F28  6FE0               	movwf	(printf@f+2)& (0+255),b
  2781  000F2A  ECA2  F005         	call	_printf	;wreg free
  2782                           
  2783                           ;UART_Driver.c: 230: printf(deviceName);
  2784  000F2E  C0D0  F0DE         	movff	_deviceName,printf@f
  2785  000F32  C0D1  F0DF         	movff	_deviceName+1,printf@f+1
  2786  000F36  C0D2  F0E0         	movff	_deviceName+2,printf@f+2
  2787  000F3A  ECA2  F005         	call	_printf	;wreg free
  2788                           
  2789                           ;UART_Driver.c: 232: printf(":");printf(command);
  2790  000F3E  0E35               	movlw	low STR_6
  2791  000F40  0100               	movlb	0	; () banked
  2792  000F42  6FDE               	movwf	printf@f& (0+255),b
  2793  000F44  0E08               	movlw	high STR_6
  2794  000F46  6FDF               	movwf	(printf@f+1)& (0+255),b
  2795  000F48  51DE               	movf	printf@f& (0+255),w,b
  2796  000F4A  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2797  000F4C  A4D8               	btfss	status,2,c
  2798  000F4E  0E00               	movlw	low (__mediumconst shr (0+16))
  2799  000F50  6FE0               	movwf	(printf@f+2)& (0+255),b
  2800  000F52  ECA2  F005         	call	_printf	;wreg free
  2801  000F56  C0E9  F0DE         	movff	D_UART_Write@command,printf@f
  2802  000F5A  C0EA  F0DF         	movff	D_UART_Write@command+1,printf@f+1
  2803  000F5E  0100               	movlb	0	; () banked
  2804  000F60  6BE0               	clrf	(printf@f+2)& (0+255),b
  2805  000F62  51DE               	movf	printf@f& (0+255),w,b
  2806  000F64  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2807  000F66  B4D8               	btfsc	status,2,c
  2808  000F68  D005               	goto	u991
  2809  000F6A  0E07               	movlw	(high __ramtop+-1)
  2810  000F6C  65EA               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2811  000F6E  D001               	goto	u9911
  2812  000F70  D001               	goto	u991
  2813  000F72                     u9911:
  2814  000F72  8BE0               	bsf	(printf@f+2)& (0+255),5,b
  2815  000F74                     u991:
  2816  000F74  ECA2  F005         	call	_printf	;wreg free
  2817                           
  2818                           ;UART_Driver.c: 234: printf(":");printf(data);
  2819  000F78  0E35               	movlw	low STR_6
  2820  000F7A  0100               	movlb	0	; () banked
  2821  000F7C  6FDE               	movwf	printf@f& (0+255),b
  2822  000F7E  0E08               	movlw	high STR_6
  2823  000F80  6FDF               	movwf	(printf@f+1)& (0+255),b
  2824  000F82  51DE               	movf	printf@f& (0+255),w,b
  2825  000F84  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2826  000F86  A4D8               	btfss	status,2,c
  2827  000F88  0E00               	movlw	low (__mediumconst shr (0+16))
  2828  000F8A  6FE0               	movwf	(printf@f+2)& (0+255),b
  2829  000F8C  ECA2  F005         	call	_printf	;wreg free
  2830  000F90  C0EB  F0DE         	movff	D_UART_Write@data,printf@f
  2831  000F94  C0EC  F0DF         	movff	D_UART_Write@data+1,printf@f+1
  2832  000F98  0100               	movlb	0	; () banked
  2833  000F9A  6BE0               	clrf	(printf@f+2)& (0+255),b
  2834  000F9C  51DE               	movf	printf@f& (0+255),w,b
  2835  000F9E  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2836  000FA0  B4D8               	btfsc	status,2,c
  2837  000FA2  D005               	goto	u1001
  2838  000FA4  0E07               	movlw	(high __ramtop+-1)
  2839  000FA6  65EC               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2840  000FA8  D001               	goto	u10011
  2841  000FAA  D001               	goto	u1001
  2842  000FAC                     u10011:
  2843  000FAC  8BE0               	bsf	(printf@f+2)& (0+255),5,b
  2844  000FAE                     u1001:
  2845  000FAE  ECA2  F005         	call	_printf	;wreg free
  2846                           
  2847                           ;UART_Driver.c: 236: printf(stopCharacter);
  2848  000FB2  C03F  F0DE         	movff	_stopCharacter,printf@f
  2849  000FB6  C040  F0DF         	movff	_stopCharacter+1,printf@f+1
  2850  000FBA  0100               	movlb	0	; () banked
  2851  000FBC  51DE               	movf	printf@f& (0+255),w,b
  2852  000FBE  11DF               	iorwf	(printf@f+1)& (0+255),w,b
  2853  000FC0  A4D8               	btfss	status,2,c
  2854  000FC2  0E00               	movlw	low (__mediumconst shr (0+16))
  2855  000FC4  6FE0               	movwf	(printf@f+2)& (0+255),b
  2856  000FC6  ECA2  F005         	call	_printf	;wreg free
  2857                           
  2858                           ;UART_Driver.c: 237: _delay((unsigned long)((1)*(16000000/4000.0)));
  2859  000FCA  0E06               	movlw	6
  2860  000FCC  0100               	movlb	0	; () banked
  2861  000FCE  6FED               	movwf	??_D_UART_Write& (0+255),b
  2862  000FD0  0E30               	movlw	48
  2863  000FD2                     u1487:
  2864  000FD2  2EE8               	decfsz	wreg,f,c
  2865  000FD4  D7FE               	bra	u1487
  2866  000FD6  2FED               	decfsz	??_D_UART_Write& (0+255),f,b
  2867  000FD8  D7FC               	bra	u1487
  2868  000FDA  F000               	nop	
  2869  000FDC  0012               	return		;funcret
  2870  000FDE                     __end_of_D_UART_Write:
  2871                           	opt stack 0
  2872                           tblptru	equ	0xFF8
  2873                           tblptrh	equ	0xFF7
  2874                           tblptrl	equ	0xFF6
  2875                           tablat	equ	0xFF5
  2876                           prodh	equ	0xFF4
  2877                           prodl	equ	0xFF3
  2878                           intcon	equ	0xFF2
  2879                           intcon2	equ	0xFF1
  2880                           postinc0	equ	0xFEE
  2881                           plusw0	equ	0xFEB
  2882                           wreg	equ	0xFE8
  2883                           indf1	equ	0xFE7
  2884                           postinc1	equ	0xFE6
  2885                           postdec1	equ	0xFE5
  2886                           fsr1h	equ	0xFE2
  2887                           fsr1l	equ	0xFE1
  2888                           indf2	equ	0xFDF
  2889                           postinc2	equ	0xFDE
  2890                           postdec2	equ	0xFDD
  2891                           plusw2	equ	0xFDB
  2892                           fsr2h	equ	0xFDA
  2893                           fsr2l	equ	0xFD9
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _printf *****************
  2897 ;; Defined at:
  2898 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2901 ;;		 -> STR_15(2), STR_14(2), STR_8(2), STR_7(2), 
  2902 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  2903 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  2904 ;;		 -> C_DOOR_SendStates@com(3), 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  idx             1   13[BANK0 ] unsigned char 
  2907 ;;  tmpval          4    0        struct .
  2908 ;;  cp              3    0        PTR const unsigned char 
  2909 ;;  val             2   14[BANK0 ] unsigned int 
  2910 ;;  ap              2   11[BANK0 ] PTR void [1]
  2911 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2912 ;;  len             2    0        unsigned int 
  2913 ;;  c               1   17[BANK0 ] char 
  2914 ;;  prec            1   16[BANK0 ] char 
  2915 ;;  flag            1   10[BANK0 ] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  2    7[BANK0 ] int 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2925 ;;      Params:         0       3       0       0       0       0       0       0       0
  2926 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2928 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2929 ;;Total ram usage:       11 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    9
  2932 ;; This function calls:
  2933 ;;		___lwdiv
  2934 ;;		_putch
  2935 ;; This function is called by:
  2936 ;;		_D_UART_Write
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text16
  2941  000B44                     __ptext16:
  2942                           	opt stack 0
  2943  000B44                     _printf:
  2944                           	opt stack 20
  2945                           
  2946                           ;doprnt.c: 466: va_list ap;
  2947                           ;doprnt.c: 499: signed char c;
  2948                           ;doprnt.c: 506: signed char prec;
  2949                           ;doprnt.c: 508: unsigned char flag;
  2950                           ;doprnt.c: 523: union {
  2951                           ;doprnt.c: 524: unsigned long vd;
  2952                           ;doprnt.c: 525: double integ;
  2953                           ;doprnt.c: 526: } tmpval;
  2954                           ;doprnt.c: 528: unsigned int val;
  2955                           ;doprnt.c: 529: unsigned len;
  2956                           ;doprnt.c: 530: const char * cp;
  2957                           ;doprnt.c: 533: *ap = __va_start();
  2958                           
  2959                           ;incstack = 0
  2960  000B44  0EE1               	movlw	low (?_printf+3)
  2961  000B46  0100               	movlb	0	; () banked
  2962  000B48  6FE2               	movwf	printf@ap& (0+255),b
  2963  000B4A  0E00               	movlw	high (?_printf+3)
  2964  000B4C  6FE3               	movwf	(printf@ap+1)& (0+255),b
  2965                           
  2966                           ;doprnt.c: 536: while(c = *f++) {
  2967  000B4E  D08B               	goto	u860
  2968  000B50                     
  2969                           ; BSR set to: 0
  2970                           ;doprnt.c: 538: if(c != '%')
  2971                           
  2972                           ; BSR set to: 0
  2973  000B50  0E25               	movlw	37
  2974  000B52  19E8               	xorwf	printf@c& (0+255),w,b
  2975  000B54  B4D8               	btfsc	status,2,c
  2976  000B56  D004               	goto	l284
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;doprnt.c: 540: {
  2980                           ;doprnt.c: 541: (putch(c) );
  2981  000B58  51E8               	movf	printf@c& (0+255),w,b
  2982  000B5A  EC32  F00B         	call	_putch
  2983                           
  2984                           ;doprnt.c: 542: continue;
  2985  000B5E  D083               	goto	u860
  2986  000B60                     l284:
  2987                           
  2988                           ;doprnt.c: 543: }
  2989                           ;doprnt.c: 548: flag = 0;
  2990  000B60  0E00               	movlw	0
  2991  000B62  0100               	movlb	0	; () banked
  2992  000B64  6FE1               	movwf	printf@flag& (0+255),b
  2993                           
  2994                           ;doprnt.c: 635: switch(c = *f++) {
  2995  000B66  D004               	goto	l285
  2996  000B68                     
  2997                           ; BSR set to: 0
  2998                           ;doprnt.c: 809: (putch(c) );
  2999                           
  3000                           ; BSR set to: 0
  3001  000B68  51E8               	movf	printf@c& (0+255),w,b
  3002  000B6A  EC32  F00B         	call	_putch
  3003                           
  3004                           ;doprnt.c: 810: continue;
  3005  000B6E  D07B               	goto	u860
  3006  000B70                     l285:
  3007  000B70  C0DE  FFF6         	movff	printf@f,tblptrl
  3008  000B74  C0DF  FFF7         	movff	printf@f+1,tblptrh
  3009  000B78  C0E0  FFF8         	movff	printf@f+2,tblptru
  3010  000B7C  0E01               	movlw	1
  3011  000B7E  0100               	movlb	0	; () banked
  3012  000B80  27DE               	addwf	printf@f& (0+255),f,b
  3013  000B82  0E00               	movlw	0
  3014  000B84  23DF               	addwfc	(printf@f+1)& (0+255),f,b
  3015  000B86  23E0               	addwfc	(printf@f+2)& (0+255),f,b
  3016  000B88  BAF8               	btfsc	tblptru,5,c
  3017  000B8A  D003               	bra	u827
  3018  000B8C  0008               	tblrd		*
  3019  000B8E  50F5               	movf	tablat,w,c
  3020  000B90  D005               	bra	u820
  3021  000B92                     u827:
  3022  000B92  CFF6 FFE9          	movff	tblptrl,fsr0l
  3023  000B96  CFF7 FFEA          	movff	tblptrh,fsr0h
  3024  000B9A  50EF               	movf	indf0,w,c
  3025  000B9C                     u820:
  3026  000B9C  0100               	movlb	0	; () banked
  3027  000B9E  6FE8               	movwf	printf@c& (0+255),b
  3028  000BA0  51E8               	movf	printf@c& (0+255),w,b
  3029                           
  3030                           ; Switch size 1, requested type "space"
  3031                           ; Number of cases is 2, Range of values is 0 to 120
  3032                           ; switch strategies available:
  3033                           ; Name         Instructions Cycles
  3034                           ; simple_byte            7     4 (average)
  3035                           ;	Chosen strategy is simple_byte
  3036  000BA2  0A00               	xorlw	0	; case 0
  3037  000BA4  B4D8               	btfsc	status,2,c
  3038  000BA6  0012               	return	
  3039  000BA8  0A78               	xorlw	120	; case 120
  3040  000BAA  A4D8               	btfss	status,2,c
  3041  000BAC  D7DD               	goto	l290
  3042                           
  3043                           ;doprnt.c: 1273: {
  3044                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3045                           
  3046                           ; BSR set to: 0
  3047  000BAE  C0E2  FFD9         	movff	printf@ap,fsr2l
  3048  000BB2  C0E3  FFDA         	movff	printf@ap+1,fsr2h
  3049  000BB6  CFDE F0E5          	movff	postinc2,printf@val
  3050  000BBA  CFDD F0E6          	movff	postdec2,printf@val+1
  3051  000BBE  0E02               	movlw	2
  3052  000BC0  0100               	movlb	0	; () banked
  3053  000BC2  27E2               	addwf	printf@ap& (0+255),f,b
  3054  000BC4  0E00               	movlw	0
  3055  000BC6  23E3               	addwfc	(printf@ap+1)& (0+255),f,b
  3056                           
  3057                           ; BSR set to: 0
  3058                           ;doprnt.c: 1287: }
  3059                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3060  000BC8  0E01               	movlw	1
  3061  000BCA  6FE8               	movwf	printf@c& (0+255),b
  3062  000BCC  D014               	goto	l1522
  3063  000BCE                     
  3064                           ; BSR set to: 0
  3065                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3066                           
  3067                           ; BSR set to: 0
  3068  000BCE  51E8               	movf	printf@c& (0+255),w,b
  3069  000BD0  0D02               	mullw	2
  3070  000BD2  0E01               	movlw	low _hexpowers
  3071  000BD4  24F3               	addwf	prodl,w,c
  3072  000BD6  6EF6               	movwf	tblptrl,c
  3073  000BD8  0E08               	movlw	high _hexpowers
  3074  000BDA  20F4               	addwfc	prodh,w,c
  3075  000BDC  6EF7               	movwf	tblptrh,c
  3076  000BDE                     	if	1	;There are 3 active tblptr bytes
  3077  000BDE  6AF8               	clrf	tblptru,c
  3078  000BE0  0E00               	movlw	low (__mediumconst shr (0+16))
  3079  000BE2  22F8               	addwfc	tblptru,f,c
  3080  000BE4                     	endif
  3081  000BE4  0009               	tblrd		*+
  3082  000BE6  50F5               	movf	tablat,w,c
  3083  000BE8  5DE5               	subwf	printf@val& (0+255),w,b
  3084  000BEA  0009               	tblrd		*+
  3085  000BEC  50F5               	movf	tablat,w,c
  3086  000BEE  59E6               	subwfb	(printf@val+1)& (0+255),w,b
  3087  000BF0  A0D8               	btfss	status,0,c
  3088  000BF2  D005               	goto	u850
  3089                           
  3090                           ; BSR set to: 0
  3091                           
  3092                           ; BSR set to: 0
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;doprnt.c: 1318: break;
  3096  000BF4  2BE8               	incf	printf@c& (0+255),f,b
  3097  000BF6                     l1522:
  3098                           
  3099                           ; BSR set to: 0
  3100  000BF6  0E04               	movlw	4
  3101  000BF8  19E8               	xorwf	printf@c& (0+255),w,b
  3102  000BFA  A4D8               	btfss	status,2,c
  3103  000BFC  D7E8               	goto	l291
  3104  000BFE                     u850:
  3105                           
  3106                           ; BSR set to: 0
  3107                           ;doprnt.c: 1422: {
  3108                           ;doprnt.c: 1469: }
  3109                           ;doprnt.c: 1472: prec = c;
  3110  000BFE  C0E8  F0E7         	movff	printf@c,printf@prec
  3111                           
  3112                           ;doprnt.c: 1474: while(prec--) {
  3113  000C02  D02C               	goto	l294
  3114  000C04                     
  3115                           ; BSR set to: 0
  3116                           ;doprnt.c: 1478: {
  3117                           ;doprnt.c: 1499: {
  3118                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3119                           
  3120                           ; BSR set to: 0
  3121  000C04  C0E5  F0D7         	movff	printf@val,___lwdiv@dividend
  3122  000C08  C0E6  F0D8         	movff	printf@val+1,___lwdiv@dividend+1
  3123  000C0C  51E7               	movf	printf@prec& (0+255),w,b
  3124  000C0E  0D02               	mullw	2
  3125  000C10  0E01               	movlw	low _hexpowers
  3126  000C12  24F3               	addwf	prodl,w,c
  3127  000C14  6EF6               	movwf	tblptrl,c
  3128  000C16  0E08               	movlw	high _hexpowers
  3129  000C18  20F4               	addwfc	prodh,w,c
  3130  000C1A  6EF7               	movwf	tblptrh,c
  3131  000C1C                     	if	1	;There are 3 active tblptr bytes
  3132  000C1C  6AF8               	clrf	tblptru,c
  3133  000C1E  0E00               	movlw	low (__mediumconst shr (0+16))
  3134  000C20  22F8               	addwfc	tblptru,f,c
  3135  000C22                     	endif
  3136  000C22  0009               	tblrd		*+
  3137  000C24  CFF5 F0D9          	movff	tablat,___lwdiv@divisor
  3138  000C28  000A               	tblrd		*-
  3139  000C2A  CFF5 F0DA          	movff	tablat,___lwdiv@divisor+1
  3140  000C2E  EC45  F00A         	call	___lwdiv	;wreg free
  3141  000C32  0100               	movlb	0	; () banked
  3142  000C34  51D7               	movf	?___lwdiv& (0+255),w,b
  3143  000C36  0B0F               	andlw	15
  3144  000C38  6FE4               	movwf	printf@idx& (0+255),b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3148  000C3A  51E4               	movf	printf@idx& (0+255),w,b
  3149  000C3C  0D01               	mullw	1
  3150  000C3E  0E09               	movlw	low STR_16
  3151  000C40  24F3               	addwf	prodl,w,c
  3152  000C42  6EF6               	movwf	tblptrl,c
  3153  000C44  0E08               	movlw	high STR_16
  3154  000C46  20F4               	addwfc	prodh,w,c
  3155  000C48  6EF7               	movwf	tblptrh,c
  3156  000C4A                     	if	1	;There are 3 active tblptr bytes
  3157  000C4A  6AF8               	clrf	tblptru,c
  3158  000C4C  0E00               	movlw	low (__mediumconst shr (0+16))
  3159  000C4E  22F8               	addwfc	tblptru,f,c
  3160  000C50                     	endif
  3161  000C50  0008               	tblrd		*
  3162  000C52  CFF5 F0E8          	movff	tablat,printf@c
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;doprnt.c: 1508: }
  3166                           ;doprnt.c: 1523: }
  3167                           ;doprnt.c: 1524: (putch(c) );
  3168  000C56  51E8               	movf	printf@c& (0+255),w,b
  3169  000C58  EC32  F00B         	call	_putch
  3170  000C5C                     l294:
  3171  000C5C  0100               	movlb	0	; () banked
  3172  000C5E  07E7               	decf	printf@prec& (0+255),f,b
  3173  000C60  29E7               	incf	printf@prec& (0+255),w,b
  3174  000C62  A4D8               	btfss	status,2,c
  3175  000C64  D7CF               	goto	l295
  3176  000C66                     u860:
  3177                           
  3178                           ; BSR set to: 0
  3179                           
  3180                           ; BSR set to: 0
  3181  000C66  C0DE  FFF6         	movff	printf@f,tblptrl
  3182  000C6A  C0DF  FFF7         	movff	printf@f+1,tblptrh
  3183  000C6E  C0E0  FFF8         	movff	printf@f+2,tblptru
  3184  000C72  0E01               	movlw	1
  3185  000C74  0100               	movlb	0	; () banked
  3186  000C76  27DE               	addwf	printf@f& (0+255),f,b
  3187  000C78  0E00               	movlw	0
  3188  000C7A  23DF               	addwfc	(printf@f+1)& (0+255),f,b
  3189  000C7C  23E0               	addwfc	(printf@f+2)& (0+255),f,b
  3190  000C7E  BAF8               	btfsc	tblptru,5,c
  3191  000C80  D003               	bra	u877
  3192  000C82  0008               	tblrd		*
  3193  000C84  50F5               	movf	tablat,w,c
  3194  000C86  D005               	bra	u870
  3195  000C88                     u877:
  3196  000C88  CFF6 FFE9          	movff	tblptrl,fsr0l
  3197  000C8C  CFF7 FFEA          	movff	tblptrh,fsr0h
  3198  000C90  50EF               	movf	indf0,w,c
  3199  000C92                     u870:
  3200  000C92  0100               	movlb	0	; () banked
  3201  000C94  6FE8               	movwf	printf@c& (0+255),b
  3202  000C96  51E8               	movf	printf@c& (0+255),w,b
  3203  000C98  B4D8               	btfsc	status,2,c
  3204  000C9A  0012               	return	
  3205  000C9C  D759               	goto	l283
  3206  000C9E                     __end_of_printf:
  3207                           	opt stack 0
  3208                           tblptru	equ	0xFF8
  3209                           tblptrh	equ	0xFF7
  3210                           tblptrl	equ	0xFF6
  3211                           tablat	equ	0xFF5
  3212                           prodh	equ	0xFF4
  3213                           prodl	equ	0xFF3
  3214                           intcon	equ	0xFF2
  3215                           intcon2	equ	0xFF1
  3216                           indf0	equ	0xFEF
  3217                           postinc0	equ	0xFEE
  3218                           plusw0	equ	0xFEB
  3219                           fsr0h	equ	0xFEA
  3220                           fsr0l	equ	0xFE9
  3221                           wreg	equ	0xFE8
  3222                           indf1	equ	0xFE7
  3223                           postinc1	equ	0xFE6
  3224                           postdec1	equ	0xFE5
  3225                           fsr1h	equ	0xFE2
  3226                           fsr1l	equ	0xFE1
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           postdec2	equ	0xFDD
  3230                           plusw2	equ	0xFDB
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _putch *****************
  3236 ;; Defined at:
  3237 ;;		line 263 in file "Drivers/UART_Driver.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  data            1    wreg     unsigned char 
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;  data            1    1[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0
  3252 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3254 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3255 ;;Total ram usage:        1 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    8
  3258 ;; This function calls:
  3259 ;;		_writeByte
  3260 ;; This function is called by:
  3261 ;;		_printf
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           	psect	text17
  3266  001664                     __ptext17:
  3267                           	opt stack 0
  3268  001664                     _putch:
  3269                           	opt stack 20
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;incstack = 0
  3273                           ;putch@data stored from wreg
  3274  001664  0100               	movlb	0	; () banked
  3275  001666  6FD8               	movwf	putch@data& (0+255),b
  3276                           
  3277                           ;UART_Driver.c: 264: writeByte(data);
  3278  001668  0100               	movlb	0	; () banked
  3279  00166A  51D8               	movf	putch@data& (0+255),w,b
  3280  00166C  EC39  F00B         	call	_writeByte
  3281  001670  0012               	return		;funcret
  3282  001672                     __end_of_putch:
  3283                           	opt stack 0
  3284                           tblptru	equ	0xFF8
  3285                           tblptrh	equ	0xFF7
  3286                           tblptrl	equ	0xFF6
  3287                           tablat	equ	0xFF5
  3288                           prodh	equ	0xFF4
  3289                           prodl	equ	0xFF3
  3290                           intcon	equ	0xFF2
  3291                           intcon2	equ	0xFF1
  3292                           indf0	equ	0xFEF
  3293                           postinc0	equ	0xFEE
  3294                           plusw0	equ	0xFEB
  3295                           fsr0h	equ	0xFEA
  3296                           fsr0l	equ	0xFE9
  3297                           wreg	equ	0xFE8
  3298                           indf1	equ	0xFE7
  3299                           postinc1	equ	0xFE6
  3300                           postdec1	equ	0xFE5
  3301                           fsr1h	equ	0xFE2
  3302                           fsr1l	equ	0xFE1
  3303                           indf2	equ	0xFDF
  3304                           postinc2	equ	0xFDE
  3305                           postdec2	equ	0xFDD
  3306                           plusw2	equ	0xFDB
  3307                           fsr2h	equ	0xFDA
  3308                           fsr2l	equ	0xFD9
  3309                           status	equ	0xFD8
  3310                           
  3311 ;; *************** function _writeByte *****************
  3312 ;; Defined at:
  3313 ;;		line 69 in file "Drivers/UART_Driver.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  data            1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  data            1    0[BANK0 ] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3327 ;;      Params:         0       0       0       0       0       0       0       0       0
  3328 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3330 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3331 ;;Total ram usage:        1 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    7
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_putch
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           	psect	text18
  3342  001672                     __ptext18:
  3343                           	opt stack 0
  3344  001672                     _writeByte:
  3345                           	opt stack 20
  3346                           
  3347                           ;incstack = 0
  3348                           ;writeByte@data stored from wreg
  3349  001672  0100               	movlb	0	; () banked
  3350  001674  6FD7               	movwf	writeByte@data& (0+255),b
  3351  001676                     
  3352                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  3353  001676  A2AC               	btfss	4012,1,c	;volatile
  3354  001678  D7FE               	goto	l1436
  3355                           
  3356                           ;UART_Driver.c: 71: TXREG = data;
  3357  00167A  C0D7  FFAD         	movff	writeByte@data,4013	;volatile
  3358  00167E  0012               	return		;funcret
  3359  001680                     __end_of_writeByte:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           intcon2	equ	0xFF1
  3369                           indf0	equ	0xFEF
  3370                           postinc0	equ	0xFEE
  3371                           plusw0	equ	0xFEB
  3372                           fsr0h	equ	0xFEA
  3373                           fsr0l	equ	0xFE9
  3374                           wreg	equ	0xFE8
  3375                           indf1	equ	0xFE7
  3376                           postinc1	equ	0xFE6
  3377                           postdec1	equ	0xFE5
  3378                           fsr1h	equ	0xFE2
  3379                           fsr1l	equ	0xFE1
  3380                           indf2	equ	0xFDF
  3381                           postinc2	equ	0xFDE
  3382                           postdec2	equ	0xFDD
  3383                           plusw2	equ	0xFDB
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function ___lwdiv *****************
  3389 ;; Defined at:
  3390 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  dividend        2    0[BANK0 ] unsigned int 
  3393 ;;  divisor         2    2[BANK0 ] unsigned int 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  quotient        2    4[BANK0 ] unsigned int 
  3396 ;;  counter         1    6[BANK0 ] unsigned char 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  2    0[BANK0 ] unsigned int 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3406 ;;      Params:         0       4       0       0       0       0       0       0       0
  3407 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3409 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3410 ;;Total ram usage:        7 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    7
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_printf
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           	psect	text19
  3421  00148A                     __ptext19:
  3422                           	opt stack 0
  3423  00148A                     ___lwdiv:
  3424                           	opt stack 21
  3425                           
  3426                           ;incstack = 0
  3427  00148A  0E00               	movlw	0
  3428  00148C  0100               	movlb	0	; () banked
  3429  00148E  6FDC               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3430  001490  0E00               	movlw	0
  3431  001492  6FDB               	movwf	___lwdiv@quotient& (0+255),b
  3432                           
  3433                           ; BSR set to: 0
  3434  001494  51D9               	movf	___lwdiv@divisor& (0+255),w,b
  3435  001496  11DA               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3436  001498  B4D8               	btfsc	status,2,c
  3437  00149A  D01C               	goto	l707
  3438                           
  3439                           ; BSR set to: 0
  3440  00149C  0E01               	movlw	1
  3441  00149E  6FDD               	movwf	___lwdiv@counter& (0+255),b
  3442  0014A0  D004               	goto	l702
  3443  0014A2                     
  3444                           ; BSR set to: 0
  3445                           
  3446                           ; BSR set to: 0
  3447  0014A2  90D8               	bcf	status,0,c
  3448  0014A4  37D9               	rlcf	___lwdiv@divisor& (0+255),f,b
  3449  0014A6  37DA               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3450  0014A8  2BDD               	incf	___lwdiv@counter& (0+255),f,b
  3451  0014AA                     l702:
  3452                           
  3453                           ; BSR set to: 0
  3454                           
  3455                           ; BSR set to: 0
  3456  0014AA  AFDA               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3457  0014AC  D7FA               	goto	l703
  3458  0014AE                     u760:
  3459                           
  3460                           ; BSR set to: 0
  3461                           
  3462                           ; BSR set to: 0
  3463                           
  3464                           ; BSR set to: 0
  3465  0014AE  90D8               	bcf	status,0,c
  3466  0014B0  37DB               	rlcf	___lwdiv@quotient& (0+255),f,b
  3467  0014B2  37DC               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3468                           
  3469                           ; BSR set to: 0
  3470  0014B4  51D9               	movf	___lwdiv@divisor& (0+255),w,b
  3471  0014B6  5DD7               	subwf	___lwdiv@dividend& (0+255),w,b
  3472  0014B8  51DA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3473  0014BA  59D8               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3474  0014BC  A0D8               	btfss	status,0,c
  3475  0014BE  D005               	goto	l706
  3476                           
  3477                           ; BSR set to: 0
  3478  0014C0  51D9               	movf	___lwdiv@divisor& (0+255),w,b
  3479  0014C2  5FD7               	subwf	___lwdiv@dividend& (0+255),f,b
  3480  0014C4  51DA               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3481  0014C6  5BD8               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3482                           
  3483                           ; BSR set to: 0
  3484  0014C8  81DB               	bsf	___lwdiv@quotient& (0+255),0,b
  3485  0014CA                     l706:
  3486                           
  3487                           ; BSR set to: 0
  3488                           
  3489                           ; BSR set to: 0
  3490  0014CA  90D8               	bcf	status,0,c
  3491  0014CC  33DA               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3492  0014CE  33D9               	rrcf	___lwdiv@divisor& (0+255),f,b
  3493                           
  3494                           ; BSR set to: 0
  3495  0014D0  2FDD               	decfsz	___lwdiv@counter& (0+255),f,b
  3496  0014D2  D7ED               	goto	u760
  3497  0014D4                     l707:
  3498                           
  3499                           ; BSR set to: 0
  3500                           
  3501                           ; BSR set to: 0
  3502  0014D4  C0DB  F0D7         	movff	___lwdiv@quotient,?___lwdiv
  3503  0014D8  C0DC  F0D8         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3504                           
  3505                           ; BSR set to: 0
  3506  0014DC  0012               	return		;funcret
  3507  0014DE                     __end_of___lwdiv:
  3508                           	opt stack 0
  3509                           tblptru	equ	0xFF8
  3510                           tblptrh	equ	0xFF7
  3511                           tblptrl	equ	0xFF6
  3512                           tablat	equ	0xFF5
  3513                           prodh	equ	0xFF4
  3514                           prodl	equ	0xFF3
  3515                           intcon	equ	0xFF2
  3516                           intcon2	equ	0xFF1
  3517                           indf0	equ	0xFEF
  3518                           postinc0	equ	0xFEE
  3519                           plusw0	equ	0xFEB
  3520                           fsr0h	equ	0xFEA
  3521                           fsr0l	equ	0xFE9
  3522                           wreg	equ	0xFE8
  3523                           indf1	equ	0xFE7
  3524                           postinc1	equ	0xFE6
  3525                           postdec1	equ	0xFE5
  3526                           fsr1h	equ	0xFE2
  3527                           fsr1l	equ	0xFE1
  3528                           indf2	equ	0xFDF
  3529                           postinc2	equ	0xFDE
  3530                           postdec2	equ	0xFDD
  3531                           plusw2	equ	0xFDB
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _C_DOOR_ReadSensors *****************
  3537 ;; Defined at:
  3538 ;;		line 101 in file "Controllers/DOOR_Controller.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;		None
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  d               1    4[BANK0 ] unsigned char 
  3543 ;; Return value:  Size  Location     Type
  3544 ;;                  1    wreg      void 
  3545 ;; Registers used:
  3546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3547 ;; Tracked objects:
  3548 ;;		On entry : 0/0
  3549 ;;		On exit  : 0/0
  3550 ;;		Unchanged: 0/0
  3551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3552 ;;      Params:         0       0       0       0       0       0       0       0       0
  3553 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3554 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3555 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3556 ;;Total ram usage:        5 bytes
  3557 ;; Hardware stack levels used:    1
  3558 ;; Hardware stack levels required when called:    7
  3559 ;; This function calls:
  3560 ;;		Nothing
  3561 ;; This function is called by:
  3562 ;;		_main
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text20
  3567  0012D4                     __ptext20:
  3568                           	opt stack 0
  3569  0012D4                     _C_DOOR_ReadSensors:
  3570                           	opt stack 23
  3571                           
  3572                           ;DOOR_Controller.c: 102: uint8_t d;
  3573                           ;DOOR_Controller.c: 103: for (d = 0; d < door_cnt; d++) {
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;incstack = 0
  3577  0012D4  0E00               	movlw	0
  3578  0012D6  0100               	movlb	0	; () banked
  3579  0012D8  6FDB               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3580  0012DA  D03B               	goto	l44
  3581  0012DC                     
  3582                           ; BSR set to: 0
  3583                           ;DOOR_Controller.c: 104: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pi
      +                          n) & 0x01;
  3584                           
  3585                           ; BSR set to: 0
  3586  0012DC  51DB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3587  0012DE  0D0A               	mullw	10
  3588  0012E0  0E06               	movlw	6
  3589  0012E2  26F3               	addwf	prodl,f,c
  3590  0012E4  0E00               	movlw	0
  3591  0012E6  22F4               	addwfc	prodh,f,c
  3592  0012E8  0E60               	movlw	low _doors
  3593  0012EA  24F3               	addwf	prodl,w,c
  3594  0012EC  6ED9               	movwf	fsr2l,c
  3595  0012EE  0E00               	movlw	high _doors
  3596  0012F0  20F4               	addwfc	prodh,w,c
  3597  0012F2  6EDA               	movwf	fsr2h,c
  3598  0012F4  51DB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3599  0012F6  0D0A               	mullw	10
  3600  0012F8  0E09               	movlw	9
  3601  0012FA  26F3               	addwf	prodl,f,c
  3602  0012FC  0E00               	movlw	0
  3603  0012FE  22F4               	addwfc	prodh,f,c
  3604  001300  0E60               	movlw	low _doors
  3605  001302  24F3               	addwf	prodl,w,c
  3606  001304  6EE1               	movwf	fsr1l,c
  3607  001306  0E00               	movlw	high _doors
  3608  001308  20F4               	addwfc	prodh,w,c
  3609  00130A  6EE2               	movwf	fsr1h,c
  3610  00130C  50E7               	movf	indf1,w,c
  3611  00130E  6FD7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3612  001310  51DB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3613  001312  0D0A               	mullw	10
  3614  001314  0E07               	movlw	7
  3615  001316  26F3               	addwf	prodl,f,c
  3616  001318  0E00               	movlw	0
  3617  00131A  22F4               	addwfc	prodh,f,c
  3618  00131C  0E60               	movlw	low _doors
  3619  00131E  24F3               	addwf	prodl,w,c
  3620  001320  6EE1               	movwf	fsr1l,c
  3621  001322  0E00               	movlw	high _doors
  3622  001324  20F4               	addwfc	prodh,w,c
  3623  001326  6EE2               	movwf	fsr1h,c
  3624  001328  CFE6 F0D8          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3625  00132C  CFE5 F0D9          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3626  001330  C0D8  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3627  001334  C0D9  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3628  001338  50E7               	movf	indf1,w,c
  3629  00133A  6FDA               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3630  00133C  2BD7               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3631  00133E  D002               	goto	u1094
  3632  001340                     u1095:
  3633  001340  90D8               	bcf	status,0,c
  3634  001342  33DA               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3635  001344                     u1094:
  3636  001344  2FD7               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3637  001346  D7FC               	goto	u1095
  3638  001348  0100               	movlb	0	; () banked
  3639  00134A  51DA               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3640  00134C  0B01               	andlw	1
  3641  00134E  6EDF               	movwf	indf2,c
  3642                           
  3643                           ; BSR set to: 0
  3644  001350  2BDB               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3645  001352                     l44:
  3646                           
  3647                           ; BSR set to: 0
  3648                           
  3649                           ; BSR set to: 0
  3650  001352  51DB               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3651  001354  6FD7               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3652  001356  6BD8               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  3653  001358  51D3               	movf	_door_cnt& (0+255),w,b
  3654  00135A  5DD7               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  3655  00135C  51D8               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  3656  00135E  0A80               	xorlw	128
  3657  001360  6FD9               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  3658  001362  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  3659  001364  0A80               	xorlw	128
  3660  001366  59D9               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  3661  001368  B0D8               	btfsc	status,0,c
  3662  00136A  0012               	return	
  3663  00136C  D7B7               	goto	l45
  3664  00136E                     __end_of_C_DOOR_ReadSensors:
  3665                           	opt stack 0
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           intcon2	equ	0xFF1
  3674                           indf0	equ	0xFEF
  3675                           postinc0	equ	0xFEE
  3676                           plusw0	equ	0xFEB
  3677                           fsr0h	equ	0xFEA
  3678                           fsr0l	equ	0xFE9
  3679                           wreg	equ	0xFE8
  3680                           indf1	equ	0xFE7
  3681                           postinc1	equ	0xFE6
  3682                           postdec1	equ	0xFE5
  3683                           fsr1h	equ	0xFE2
  3684                           fsr1l	equ	0xFE1
  3685                           indf2	equ	0xFDF
  3686                           postinc2	equ	0xFDE
  3687                           postdec2	equ	0xFDD
  3688                           plusw2	equ	0xFDB
  3689                           fsr2h	equ	0xFDA
  3690                           fsr2l	equ	0xFD9
  3691                           status	equ	0xFD8
  3692                           
  3693 ;; *************** function _LowISR *****************
  3694 ;; Defined at:
  3695 ;;		line 267 in file "Drivers/UART_Driver.c"
  3696 ;; Parameters:    Size  Location     Type
  3697 ;;		None
  3698 ;; Auto vars:     Size  Location     Type
  3699 ;;		None
  3700 ;; Return value:  Size  Location     Type
  3701 ;;                  1    wreg      void 
  3702 ;; Registers used:
  3703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3704 ;; Tracked objects:
  3705 ;;		On entry : 0/0
  3706 ;;		On exit  : 0/0
  3707 ;;		Unchanged: 0/0
  3708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3709 ;;      Params:         0       0       0       0       0       0       0       0       0
  3710 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3711 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3712 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3713 ;;Total ram usage:       21 bytes
  3714 ;; Hardware stack levels used:    1
  3715 ;; Hardware stack levels required when called:    6
  3716 ;; This function calls:
  3717 ;;		_fillDataBuffer
  3718 ;;		_readByte
  3719 ;; This function is called by:
  3720 ;;		Interrupt level 1
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	intcodelo
  3725  000018                     __pintcodelo:
  3726                           	opt stack 0
  3727  000018                     _LowISR:
  3728                           	opt stack 19
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;incstack = 0
  3732  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3733  00001A  CFD8 F028          	movff	status,??_LowISR
  3734  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3735  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3736  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3737  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3738  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3739  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3740  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3741  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3742  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3743  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3744  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3745  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3746  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3747  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3748  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3749  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3750  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3751  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3752  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3753  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3754                           
  3755                           ;UART_Driver.c: 268: if (PIR1bits.RC1IF) {
  3756  00006E  AA9E               	btfss	3998,5,c	;volatile
  3757  000070  D005               	goto	i1l186
  3758                           
  3759                           ;UART_Driver.c: 269: fillDataBuffer(readByte());
  3760  000072  EC4B  F00B         	call	_readByte	;wreg free
  3761  000076  EC1C  F004         	call	_fillDataBuffer
  3762                           
  3763                           ;UART_Driver.c: 270: PIR1bits.RC1IF = 0;
  3764  00007A  9A9E               	bcf	3998,5,c	;volatile
  3765  00007C                     i1l186:
  3766  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3767  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3768  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3769  000088  C039  F044         	movff	??_LowISR+17,btemp
  3770  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3771  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3772  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3773  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3774  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3775  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3776  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3777  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3778  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3779  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3780  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3781  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3782  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3783  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3784  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3785  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3786  0000CC  C028  FFD8         	movff	??_LowISR,status
  3787  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3788  0000D2  0010               	retfie	
  3789  0000D4                     __end_of_LowISR:
  3790                           	opt stack 0
  3791                           pclatu	equ	0xFFB
  3792                           pclath	equ	0xFFA
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           intcon2	equ	0xFF1
  3801                           indf0	equ	0xFEF
  3802                           postinc0	equ	0xFEE
  3803                           plusw0	equ	0xFEB
  3804                           fsr0h	equ	0xFEA
  3805                           fsr0l	equ	0xFE9
  3806                           wreg	equ	0xFE8
  3807                           indf1	equ	0xFE7
  3808                           postinc1	equ	0xFE6
  3809                           postdec1	equ	0xFE5
  3810                           fsr1h	equ	0xFE2
  3811                           fsr1l	equ	0xFE1
  3812                           bsr	equ	0xFE0
  3813                           indf2	equ	0xFDF
  3814                           postinc2	equ	0xFDE
  3815                           postdec2	equ	0xFDD
  3816                           plusw2	equ	0xFDB
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _readByte *****************
  3822 ;; Defined at:
  3823 ;;		line 74 in file "Drivers/UART_Driver.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      unsigned char 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3837 ;;      Params:         0       0       0       0       0       0       0       0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3840 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3841 ;;Total ram usage:        0 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    1
  3844 ;; This function calls:
  3845 ;;		Nothing
  3846 ;; This function is called by:
  3847 ;;		_LowISR
  3848 ;; This function uses a non-reentrant model
  3849 ;;
  3850                           
  3851                           	psect	text22
  3852  001696                     __ptext22:
  3853                           	opt stack 0
  3854  001696                     _readByte:
  3855                           	opt stack 23
  3856                           
  3857                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3858                           
  3859                           ;incstack = 0
  3860  001696  50AB               	movf	4011,w,c	;volatile
  3861                           
  3862                           ;UART_Driver.c: 77: }
  3863                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3864  001698  50AB               	movf	4011,w,c	;volatile
  3865                           
  3866                           ;UART_Driver.c: 80: }
  3867                           ;UART_Driver.c: 81: return RCREG;
  3868  00169A  50AE               	movf	4014,w,c	;volatile
  3869  00169C  0012               	return	
  3870  00169E                     __end_of_readByte:
  3871                           	opt stack 0
  3872                           pclatu	equ	0xFFB
  3873                           pclath	equ	0xFFA
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           prodh	equ	0xFF4
  3879                           prodl	equ	0xFF3
  3880                           intcon	equ	0xFF2
  3881                           intcon2	equ	0xFF1
  3882                           indf0	equ	0xFEF
  3883                           postinc0	equ	0xFEE
  3884                           plusw0	equ	0xFEB
  3885                           fsr0h	equ	0xFEA
  3886                           fsr0l	equ	0xFE9
  3887                           wreg	equ	0xFE8
  3888                           indf1	equ	0xFE7
  3889                           postinc1	equ	0xFE6
  3890                           postdec1	equ	0xFE5
  3891                           fsr1h	equ	0xFE2
  3892                           fsr1l	equ	0xFE1
  3893                           bsr	equ	0xFE0
  3894                           indf2	equ	0xFDF
  3895                           postinc2	equ	0xFDE
  3896                           postdec2	equ	0xFDD
  3897                           plusw2	equ	0xFDB
  3898                           fsr2h	equ	0xFDA
  3899                           fsr2l	equ	0xFD9
  3900                           status	equ	0xFD8
  3901                           
  3902 ;; *************** function _fillDataBuffer *****************
  3903 ;; Defined at:
  3904 ;;		line 84 in file "Drivers/UART_Driver.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;  data            1    wreg     unsigned char 
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  data            1   38[COMRAM] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0
  3919 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3921 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3922 ;;Total ram usage:        1 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    5
  3925 ;; This function calls:
  3926 ;;		_acknowledge
  3927 ;; This function is called by:
  3928 ;;		_LowISR
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text23
  3933  000838                     __ptext23:
  3934                           	opt stack 0
  3935  000838                     _fillDataBuffer:
  3936                           	opt stack 19
  3937                           
  3938                           ;incstack = 0
  3939                           ;fillDataBuffer@data stored from wreg
  3940  000838  6E27               	movwf	fillDataBuffer@data,c
  3941                           
  3942                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3943  00083A  D0B5               	goto	i1l135
  3944  00083C                     
  3945                           ;UART_Driver.c: 87: if(data == 0x26) {
  3946  00083C  0E26               	movlw	38
  3947  00083E  1827               	xorwf	fillDataBuffer@data,w,c
  3948  000840  A4D8               	btfss	status,2,c
  3949  000842  D010               	goto	i1l137
  3950                           
  3951                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3952  000844  0E00               	movlw	0
  3953  000846  0101               	movlb	1	; () banked
  3954  000848  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3955                           
  3956                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3957  00084A  0E00               	movlw	0
  3958  00084C  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3959                           
  3960                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3961  00084E  0E00               	movlw	0
  3962  000850  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3963                           
  3964                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3965  000852  0E00               	movlw	0
  3966  000854  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3967                           
  3968                           ;UART_Driver.c: 92: readReady = 0;
  3969  000856  0E00               	movlw	0
  3970  000858  0100               	movlb	0	; () banked
  3971  00085A  6FD6               	movwf	_readReady& (0+255),b
  3972                           
  3973                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3974  00085C  0E01               	movlw	1
  3975  00085E  0101               	movlb	1	; () banked
  3976  000860  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3977                           
  3978                           ;UART_Driver.c: 94: } else {
  3979  000862  0012               	return	
  3980  000864                     i1l137:
  3981                           
  3982                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3983                           
  3984                           ; BSR set to: 1
  3985  000864  0E00               	movlw	0
  3986  000866  0101               	movlb	1	; () banked
  3987  000868  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3988                           
  3989                           ; BSR set to: 1
  3990                           ;UART_Driver.c: 97: }
  3991                           ;UART_Driver.c: 98: break;
  3992                           
  3993                           ; BSR set to: 1
  3994                           ;UART_Driver.c: 96: return;
  3995  00086A  0012               	return	
  3996  00086C                     
  3997                           ; BSR set to: 1
  3998                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3999                           
  4000                           ; BSR set to: 1
  4001  00086C  0E3A               	movlw	58
  4002  00086E  1827               	xorwf	fillDataBuffer@data,w,c
  4003  000870  A4D8               	btfss	status,2,c
  4004  000872  D00D               	goto	i1l142
  4005                           
  4006                           ; BSR set to: 1
  4007                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  4008  000874  0E02               	movlw	2
  4009  000876  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4010                           
  4011                           ; BSR set to: 1
  4012                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  4013  000878  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4014  00087A  0D01               	mullw	1
  4015  00087C  0E00               	movlw	low _readBuffer
  4016  00087E  24F3               	addwf	prodl,w,c
  4017  000880  6ED9               	movwf	fsr2l,c
  4018  000882  0E01               	movlw	high _readBuffer
  4019  000884  20F4               	addwfc	prodh,w,c
  4020  000886  6EDA               	movwf	fsr2h,c
  4021  000888  0E00               	movlw	0
  4022  00088A  6EDF               	movwf	indf2,c
  4023                           
  4024                           ;UART_Driver.c: 104: } else {
  4025  00088C  0012               	return	
  4026  00088E                     i1l142:
  4027                           
  4028                           ; BSR set to: 1
  4029                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  4030                           
  4031                           ; BSR set to: 1
  4032  00088E  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4033  000890  0D01               	mullw	1
  4034  000892  0E00               	movlw	low _readBuffer
  4035  000894  24F3               	addwf	prodl,w,c
  4036  000896  6ED9               	movwf	fsr2l,c
  4037  000898  0E01               	movlw	high _readBuffer
  4038  00089A  20F4               	addwfc	prodh,w,c
  4039  00089C  6EDA               	movwf	fsr2h,c
  4040  00089E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4041                           
  4042                           ; BSR set to: 1
  4043                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  4044  0008A2  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  4045                           
  4046                           ; BSR set to: 1
  4047                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  4048  0008A4  0E0A               	movlw	10
  4049  0008A6  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  4050  0008A8  0012               	return	
  4051                           
  4052                           ; BSR set to: 1
  4053                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  4054  0008AA  0E00               	movlw	0
  4055  0008AC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4056                           
  4057                           ; BSR set to: 1
  4058                           ;UART_Driver.c: 109: }
  4059                           ;UART_Driver.c: 110: }
  4060                           ;UART_Driver.c: 111: break;
  4061                           
  4062                           ; BSR set to: 1
  4063  0008AE  0012               	return	
  4064  0008B0                     
  4065                           ; BSR set to: 1
  4066                           ;UART_Driver.c: 114: if (data == 0x3A) {
  4067                           
  4068                           ; BSR set to: 1
  4069  0008B0  0E3A               	movlw	58
  4070  0008B2  1827               	xorwf	fillDataBuffer@data,w,c
  4071  0008B4  A4D8               	btfss	status,2,c
  4072  0008B6  D00D               	goto	i1l146
  4073                           
  4074                           ; BSR set to: 1
  4075                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  4076  0008B8  0E03               	movlw	3
  4077  0008BA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4078                           
  4079                           ; BSR set to: 1
  4080                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  4081  0008BC  513D               	movf	(_readBuffer+61)& (0+255),w,b
  4082  0008BE  0D01               	mullw	1
  4083  0008C0  0E0B               	movlw	low (_readBuffer+11)
  4084  0008C2  24F3               	addwf	prodl,w,c
  4085  0008C4  6ED9               	movwf	fsr2l,c
  4086  0008C6  0E01               	movlw	high (_readBuffer+11)
  4087  0008C8  20F4               	addwfc	prodh,w,c
  4088  0008CA  6EDA               	movwf	fsr2h,c
  4089  0008CC  0E00               	movlw	0
  4090  0008CE  6EDF               	movwf	indf2,c
  4091                           
  4092                           ;UART_Driver.c: 117: } else {
  4093  0008D0  0012               	return	
  4094  0008D2                     i1l146:
  4095                           
  4096                           ; BSR set to: 1
  4097                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  4098                           
  4099                           ; BSR set to: 1
  4100  0008D2  513D               	movf	(_readBuffer+61)& (0+255),w,b
  4101  0008D4  0D01               	mullw	1
  4102  0008D6  0E0B               	movlw	low (_readBuffer+11)
  4103  0008D8  24F3               	addwf	prodl,w,c
  4104  0008DA  6ED9               	movwf	fsr2l,c
  4105  0008DC  0E01               	movlw	high (_readBuffer+11)
  4106  0008DE  20F4               	addwfc	prodh,w,c
  4107  0008E0  6EDA               	movwf	fsr2h,c
  4108  0008E2  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4109                           
  4110                           ; BSR set to: 1
  4111                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  4112  0008E6  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  4113                           
  4114                           ; BSR set to: 1
  4115                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  4116  0008E8  0E32               	movlw	50
  4117  0008EA  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  4118  0008EC  0012               	return	
  4119                           
  4120                           ; BSR set to: 1
  4121                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  4122  0008EE  0E00               	movlw	0
  4123  0008F0  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4124                           
  4125                           ; BSR set to: 1
  4126                           ;UART_Driver.c: 122: }
  4127                           ;UART_Driver.c: 123: }
  4128                           ;UART_Driver.c: 124: break;
  4129                           
  4130                           ; BSR set to: 1
  4131  0008F2  0012               	return	
  4132  0008F4                     
  4133                           ; BSR set to: 1
  4134                           ;UART_Driver.c: 127: if (data == 0x3A) {
  4135                           
  4136                           ; BSR set to: 1
  4137  0008F4  0E3A               	movlw	58
  4138  0008F6  1827               	xorwf	fillDataBuffer@data,w,c
  4139  0008F8  A4D8               	btfss	status,2,c
  4140  0008FA  D00D               	goto	i1l150
  4141                           
  4142                           ; BSR set to: 1
  4143                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  4144  0008FC  0E04               	movlw	4
  4145  0008FE  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4146                           
  4147                           ; BSR set to: 1
  4148                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  4149  000900  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4150  000902  0D01               	mullw	1
  4151  000904  0E3E               	movlw	low (_readBuffer+62)
  4152  000906  24F3               	addwf	prodl,w,c
  4153  000908  6ED9               	movwf	fsr2l,c
  4154  00090A  0E01               	movlw	high (_readBuffer+62)
  4155  00090C  20F4               	addwfc	prodh,w,c
  4156  00090E  6EDA               	movwf	fsr2h,c
  4157  000910  0E00               	movlw	0
  4158  000912  6EDF               	movwf	indf2,c
  4159                           
  4160                           ;UART_Driver.c: 130: } else {
  4161  000914  0012               	return	
  4162  000916                     i1l150:
  4163                           
  4164                           ; BSR set to: 1
  4165                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  4166                           
  4167                           ; BSR set to: 1
  4168  000916  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4169  000918  0D01               	mullw	1
  4170  00091A  0E3E               	movlw	low (_readBuffer+62)
  4171  00091C  24F3               	addwf	prodl,w,c
  4172  00091E  6ED9               	movwf	fsr2l,c
  4173  000920  0E01               	movlw	high (_readBuffer+62)
  4174  000922  20F4               	addwfc	prodh,w,c
  4175  000924  6EDA               	movwf	fsr2h,c
  4176  000926  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4177                           
  4178                           ; BSR set to: 1
  4179                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  4180  00092A  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  4181                           
  4182                           ; BSR set to: 1
  4183                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  4184  00092C  0E32               	movlw	50
  4185  00092E  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  4186  000930  0012               	return	
  4187                           
  4188                           ; BSR set to: 1
  4189                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  4190  000932  0E00               	movlw	0
  4191  000934  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4192                           
  4193                           ; BSR set to: 1
  4194                           ;UART_Driver.c: 135: }
  4195                           ;UART_Driver.c: 136: }
  4196                           ;UART_Driver.c: 137: break;
  4197                           
  4198                           ; BSR set to: 1
  4199  000936  0012               	return	
  4200  000938                     
  4201                           ; BSR set to: 1
  4202                           ;UART_Driver.c: 140: if (data == 0x3A) {
  4203                           
  4204                           ; BSR set to: 1
  4205  000938  0E3A               	movlw	58
  4206  00093A  1827               	xorwf	fillDataBuffer@data,w,c
  4207  00093C  A4D8               	btfss	status,2,c
  4208  00093E  D00D               	goto	i1l154
  4209                           
  4210                           ; BSR set to: 1
  4211                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  4212  000940  0E05               	movlw	5
  4213  000942  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4214                           
  4215                           ; BSR set to: 1
  4216                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4217  000944  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4218  000946  0D01               	mullw	1
  4219  000948  0E71               	movlw	low (_readBuffer+113)
  4220  00094A  24F3               	addwf	prodl,w,c
  4221  00094C  6ED9               	movwf	fsr2l,c
  4222  00094E  0E01               	movlw	high (_readBuffer+113)
  4223  000950  20F4               	addwfc	prodh,w,c
  4224  000952  6EDA               	movwf	fsr2h,c
  4225  000954  0E00               	movlw	0
  4226  000956  6EDF               	movwf	indf2,c
  4227                           
  4228                           ;UART_Driver.c: 143: } else {
  4229  000958  0012               	return	
  4230  00095A                     i1l154:
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4234                           
  4235                           ; BSR set to: 1
  4236  00095A  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4237  00095C  0D01               	mullw	1
  4238  00095E  0E71               	movlw	low (_readBuffer+113)
  4239  000960  24F3               	addwf	prodl,w,c
  4240  000962  6ED9               	movwf	fsr2l,c
  4241  000964  0E01               	movlw	high (_readBuffer+113)
  4242  000966  20F4               	addwfc	prodh,w,c
  4243  000968  6EDA               	movwf	fsr2h,c
  4244  00096A  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4245                           
  4246                           ; BSR set to: 1
  4247                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4248  00096E  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4249                           
  4250                           ; BSR set to: 1
  4251                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4252  000970  0E32               	movlw	50
  4253  000972  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4254  000974  0012               	return	
  4255                           
  4256                           ; BSR set to: 1
  4257                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4258  000976  0E00               	movlw	0
  4259  000978  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4260                           
  4261                           ; BSR set to: 1
  4262                           ;UART_Driver.c: 148: }
  4263                           ;UART_Driver.c: 149: }
  4264                           ;UART_Driver.c: 150: break;
  4265                           
  4266                           ; BSR set to: 1
  4267  00097A  0012               	return	
  4268  00097C                     
  4269                           ; BSR set to: 1
  4270                           ;UART_Driver.c: 153: if (data == 0x24) {
  4271                           
  4272                           ; BSR set to: 1
  4273  00097C  0E24               	movlw	36
  4274  00097E  1827               	xorwf	fillDataBuffer@data,w,c
  4275  000980  A4D8               	btfss	status,2,c
  4276  000982  D009               	goto	i1l158
  4277                           
  4278                           ; BSR set to: 1
  4279                           ;UART_Driver.c: 154: acknowledge();
  4280  000984  ECE7  F009         	call	_acknowledge	;wreg free
  4281                           
  4282                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4283  000988  0E00               	movlw	0
  4284  00098A  0101               	movlb	1	; () banked
  4285  00098C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4286                           
  4287                           ; BSR set to: 1
  4288                           ;UART_Driver.c: 156: readReady = 1;
  4289  00098E  0E01               	movlw	1
  4290  000990  0100               	movlb	0	; () banked
  4291  000992  6FD6               	movwf	_readReady& (0+255),b
  4292                           
  4293                           ;UART_Driver.c: 157: } else {
  4294  000994  0012               	return	
  4295  000996                     i1l158:
  4296                           
  4297                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4298                           
  4299                           ; BSR set to: 0
  4300  000996  5027               	movf	fillDataBuffer@data,w,c
  4301  000998  0FD0               	addlw	208
  4302  00099A  0101               	movlb	1	; () banked
  4303  00099C  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4304                           
  4305                           ; BSR set to: 1
  4306                           ;UART_Driver.c: 160: }
  4307                           ;UART_Driver.c: 161: break;
  4308  00099E  0012               	return	
  4309  0009A0                     
  4310                           ; BSR set to: 1
  4311                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4312                           
  4313                           ; BSR set to: 1
  4314  0009A0  0E00               	movlw	0
  4315  0009A2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4316                           
  4317                           ; BSR set to: 1
  4318                           ;UART_Driver.c: 166: }
  4319                           
  4320                           ;UART_Driver.c: 165: break;
  4321  0009A4  0012               	return	
  4322  0009A6                     i1l135:
  4323                           
  4324                           ; BSR set to: 1
  4325  0009A6  0101               	movlb	1	; () banked
  4326  0009A8  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4327                           
  4328                           ; Switch size 1, requested type "space"
  4329                           ; Number of cases is 6, Range of values is 0 to 5
  4330                           ; switch strategies available:
  4331                           ; Name         Instructions Cycles
  4332                           ; simple_byte           19    10 (average)
  4333                           ;	Chosen strategy is simple_byte
  4334  0009AA  0A00               	xorlw	0	; case 0
  4335  0009AC  B4D8               	btfsc	status,2,c
  4336  0009AE  D746               	goto	i1l136
  4337  0009B0  0A01               	xorlw	1	; case 1
  4338  0009B2  B4D8               	btfsc	status,2,c
  4339  0009B4  D75B               	goto	i1l141
  4340  0009B6  0A03               	xorlw	3	; case 2
  4341  0009B8  B4D8               	btfsc	status,2,c
  4342  0009BA  D77A               	goto	i1l145
  4343  0009BC  0A01               	xorlw	1	; case 3
  4344  0009BE  B4D8               	btfsc	status,2,c
  4345  0009C0  D799               	goto	i1l149
  4346  0009C2  0A07               	xorlw	7	; case 4
  4347  0009C4  B4D8               	btfsc	status,2,c
  4348  0009C6  D7B8               	goto	i1l153
  4349  0009C8  0A01               	xorlw	1	; case 5
  4350  0009CA  B4D8               	btfsc	status,2,c
  4351  0009CC  D7D7               	goto	i1l157
  4352  0009CE  D7E8               	goto	i1l160
  4353  0009D0                     __end_of_fillDataBuffer:
  4354                           	opt stack 0
  4355                           pclatu	equ	0xFFB
  4356                           pclath	equ	0xFFA
  4357                           tblptru	equ	0xFF8
  4358                           tblptrh	equ	0xFF7
  4359                           tblptrl	equ	0xFF6
  4360                           tablat	equ	0xFF5
  4361                           prodh	equ	0xFF4
  4362                           prodl	equ	0xFF3
  4363                           intcon	equ	0xFF2
  4364                           intcon2	equ	0xFF1
  4365                           indf0	equ	0xFEF
  4366                           postinc0	equ	0xFEE
  4367                           plusw0	equ	0xFEB
  4368                           fsr0h	equ	0xFEA
  4369                           fsr0l	equ	0xFE9
  4370                           wreg	equ	0xFE8
  4371                           indf1	equ	0xFE7
  4372                           postinc1	equ	0xFE6
  4373                           postdec1	equ	0xFE5
  4374                           fsr1h	equ	0xFE2
  4375                           fsr1l	equ	0xFE1
  4376                           bsr	equ	0xFE0
  4377                           indf2	equ	0xFDF
  4378                           postinc2	equ	0xFDE
  4379                           postdec2	equ	0xFDD
  4380                           plusw2	equ	0xFDB
  4381                           fsr2h	equ	0xFDA
  4382                           fsr2l	equ	0xFD9
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _acknowledge *****************
  4386 ;; Defined at:
  4387 ;;		line 169 in file "Drivers/UART_Driver.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;                  1    wreg      void 
  4394 ;; Registers used:
  4395 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4401 ;;      Params:         0       0       0       0       0       0       0       0       0
  4402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4404 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:    4
  4408 ;; This function calls:
  4409 ;;		i1_printf
  4410 ;; This function is called by:
  4411 ;;		_fillDataBuffer
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text24
  4416  0013CE                     __ptext24:
  4417                           	opt stack 0
  4418  0013CE                     _acknowledge:
  4419                           	opt stack 19
  4420                           
  4421                           ;UART_Driver.c: 170: printf(startCharacter);
  4422                           
  4423                           ;incstack = 0
  4424  0013CE  C041  F01A         	movff	_startCharacter,i1printf@f
  4425  0013D2  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4426  0013D6  501A               	movf	i1printf@f,w,c
  4427  0013D8  101B               	iorwf	i1printf@f+1,w,c
  4428  0013DA  A4D8               	btfss	status,2,c
  4429  0013DC  0E00               	movlw	low (__mediumconst shr (0+16))
  4430  0013DE  6E1C               	movwf	i1printf@f+2,c
  4431  0013E0  EC4F  F006         	call	i1_printf	;wreg free
  4432                           
  4433                           ;UART_Driver.c: 172: printf(ackCharacter);
  4434  0013E4  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4435  0013E8  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4436  0013EC  501A               	movf	i1printf@f,w,c
  4437  0013EE  101B               	iorwf	i1printf@f+1,w,c
  4438  0013F0  A4D8               	btfss	status,2,c
  4439  0013F2  0E00               	movlw	low (__mediumconst shr (0+16))
  4440  0013F4  6E1C               	movwf	i1printf@f+2,c
  4441  0013F6  EC4F  F006         	call	i1_printf	;wreg free
  4442                           
  4443                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4444  0013FA  0E22               	movlw	low STR_5
  4445  0013FC  6E1A               	movwf	i1printf@f,c
  4446  0013FE  0E08               	movlw	high STR_5
  4447  001400  6E1B               	movwf	i1printf@f+1,c
  4448  001402  501A               	movf	i1printf@f,w,c
  4449  001404  101B               	iorwf	i1printf@f+1,w,c
  4450  001406  A4D8               	btfss	status,2,c
  4451  001408  0E00               	movlw	low (__mediumconst shr (0+16))
  4452  00140A  6E1C               	movwf	i1printf@f+2,c
  4453  00140C  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4454  001410  6A1E               	clrf	?i1_printf+4,c
  4455  001412  EC4F  F006         	call	i1_printf	;wreg free
  4456                           
  4457                           ;UART_Driver.c: 176: printf(stopCharacter);
  4458  001416  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4459  00141A  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4460  00141E  501A               	movf	i1printf@f,w,c
  4461  001420  101B               	iorwf	i1printf@f+1,w,c
  4462  001422  A4D8               	btfss	status,2,c
  4463  001424  0E00               	movlw	low (__mediumconst shr (0+16))
  4464  001426  6E1C               	movwf	i1printf@f+2,c
  4465  001428  EC4F  F006         	call	i1_printf	;wreg free
  4466  00142C  0012               	return		;funcret
  4467  00142E                     __end_of_acknowledge:
  4468                           	opt stack 0
  4469                           pclatu	equ	0xFFB
  4470                           pclath	equ	0xFFA
  4471                           tblptru	equ	0xFF8
  4472                           tblptrh	equ	0xFF7
  4473                           tblptrl	equ	0xFF6
  4474                           tablat	equ	0xFF5
  4475                           prodh	equ	0xFF4
  4476                           prodl	equ	0xFF3
  4477                           intcon	equ	0xFF2
  4478                           intcon2	equ	0xFF1
  4479                           indf0	equ	0xFEF
  4480                           postinc0	equ	0xFEE
  4481                           plusw0	equ	0xFEB
  4482                           fsr0h	equ	0xFEA
  4483                           fsr0l	equ	0xFE9
  4484                           wreg	equ	0xFE8
  4485                           indf1	equ	0xFE7
  4486                           postinc1	equ	0xFE6
  4487                           postdec1	equ	0xFE5
  4488                           fsr1h	equ	0xFE2
  4489                           fsr1l	equ	0xFE1
  4490                           bsr	equ	0xFE0
  4491                           indf2	equ	0xFDF
  4492                           postinc2	equ	0xFDE
  4493                           postdec2	equ	0xFDD
  4494                           plusw2	equ	0xFDB
  4495                           fsr2h	equ	0xFDA
  4496                           fsr2l	equ	0xFD9
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function i1_printf *****************
  4500 ;; Defined at:
  4501 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4504 ;;		 -> STR_15(2), STR_14(2), STR_8(2), STR_7(2), 
  4505 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  4506 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  4507 ;;		 -> C_DOOR_SendStates@com(3), 
  4508 ;; Auto vars:     Size  Location     Type
  4509 ;;  printf          4    0        struct .
  4510 ;;  printf          3    0        PTR const unsigned char 
  4511 ;;  printf          2   34[COMRAM] unsigned int 
  4512 ;;  printf          2   31[COMRAM] PTR void [1]
  4513 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4514 ;;  printf          2    0        unsigned int 
  4515 ;;  printf          1   37[COMRAM] char 
  4516 ;;  printf          1   36[COMRAM] char 
  4517 ;;  printf          1   33[COMRAM] unsigned char 
  4518 ;;  printf          1   30[COMRAM] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  2   25[COMRAM] int 
  4521 ;; Registers used:
  4522 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4528 ;;      Params:         5       0       0       0       0       0       0       0       0
  4529 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4531 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4532 ;;Total ram usage:       13 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; Hardware stack levels required when called:    3
  4535 ;; This function calls:
  4536 ;;		i1___lwdiv
  4537 ;;		i1_putch
  4538 ;; This function is called by:
  4539 ;;		_acknowledge
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	text25
  4544  000C9E                     __ptext25:
  4545                           	opt stack 0
  4546  000C9E                     i1_printf:
  4547                           	opt stack 19
  4548                           
  4549                           ;doprnt.c: 466: va_list ap;
  4550                           ;doprnt.c: 499: signed char c;
  4551                           ;doprnt.c: 506: signed char prec;
  4552                           ;doprnt.c: 508: unsigned char flag;
  4553                           ;doprnt.c: 523: union {
  4554                           ;doprnt.c: 524: unsigned long vd;
  4555                           ;doprnt.c: 525: double integ;
  4556                           ;doprnt.c: 526: } tmpval;
  4557                           ;doprnt.c: 528: unsigned int val;
  4558                           ;doprnt.c: 529: unsigned len;
  4559                           ;doprnt.c: 530: const char * cp;
  4560                           ;doprnt.c: 533: *ap = __va_start();
  4561                           
  4562                           ;incstack = 0
  4563  000C9E  0E1D               	movlw	low (?i1_printf+3)
  4564  000CA0  6E20               	movwf	i1printf@ap,c
  4565  000CA2  0E00               	movlw	high (?i1_printf+3)
  4566  000CA4  6E21               	movwf	i1printf@ap+1,c
  4567                           
  4568                           ;doprnt.c: 536: while(c = *f++) {
  4569  000CA6  D085               	goto	i1u94_20
  4570  000CA8                     
  4571                           ;doprnt.c: 538: if(c != '%')
  4572  000CA8  0E25               	movlw	37
  4573  000CAA  1826               	xorwf	i1printf@c,w,c
  4574  000CAC  B4D8               	btfsc	status,2,c
  4575  000CAE  D004               	goto	i1l284
  4576                           
  4577                           ;doprnt.c: 540: {
  4578                           ;doprnt.c: 541: (putch(c) );
  4579  000CB0  5026               	movf	i1printf@c,w,c
  4580  000CB2  EC46  F00B         	call	i1_putch
  4581                           
  4582                           ;doprnt.c: 542: continue;
  4583  000CB6  D07D               	goto	i1u94_20
  4584  000CB8                     i1l284:
  4585                           
  4586                           ;doprnt.c: 543: }
  4587                           ;doprnt.c: 548: flag = 0;
  4588  000CB8  0E00               	movlw	0
  4589  000CBA  6E1F               	movwf	i1printf@flag,c
  4590                           
  4591                           ;doprnt.c: 635: switch(c = *f++) {
  4592  000CBC  D004               	goto	i1l285
  4593  000CBE                     
  4594                           ;doprnt.c: 809: (putch(c) );
  4595  000CBE  5026               	movf	i1printf@c,w,c
  4596  000CC0  EC46  F00B         	call	i1_putch
  4597                           
  4598                           ;doprnt.c: 810: continue;
  4599  000CC4  D076               	goto	i1u94_20
  4600  000CC6                     i1l285:
  4601  000CC6  C01A  FFF6         	movff	i1printf@f,tblptrl
  4602  000CCA  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4603  000CCE  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4604  000CD2  0E01               	movlw	1
  4605  000CD4  261A               	addwf	i1printf@f,f,c
  4606  000CD6  0E00               	movlw	0
  4607  000CD8  221B               	addwfc	i1printf@f+1,f,c
  4608  000CDA  221C               	addwfc	i1printf@f+2,f,c
  4609  000CDC  BAF8               	btfsc	tblptru,5,c
  4610  000CDE  D003               	bra	i1u90_27
  4611  000CE0  0008               	tblrd		*
  4612  000CE2  50F5               	movf	tablat,w,c
  4613  000CE4  D005               	bra	i1u90_20
  4614  000CE6                     i1u90_27:
  4615  000CE6  CFF6 FFE9          	movff	tblptrl,fsr0l
  4616  000CEA  CFF7 FFEA          	movff	tblptrh,fsr0h
  4617  000CEE  50EF               	movf	indf0,w,c
  4618  000CF0                     i1u90_20:
  4619  000CF0  6E26               	movwf	i1printf@c,c
  4620  000CF2  5026               	movf	i1printf@c,w,c
  4621                           
  4622                           ; Switch size 1, requested type "space"
  4623                           ; Number of cases is 2, Range of values is 0 to 120
  4624                           ; switch strategies available:
  4625                           ; Name         Instructions Cycles
  4626                           ; simple_byte            7     4 (average)
  4627                           ;	Chosen strategy is simple_byte
  4628  000CF4  0A00               	xorlw	0	; case 0
  4629  000CF6  B4D8               	btfsc	status,2,c
  4630  000CF8  0012               	return	
  4631  000CFA  0A78               	xorlw	120	; case 120
  4632  000CFC  A4D8               	btfss	status,2,c
  4633  000CFE  D7DF               	goto	i1l290
  4634                           
  4635                           ;doprnt.c: 1273: {
  4636                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4637  000D00  C020  FFD9         	movff	i1printf@ap,fsr2l
  4638  000D04  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4639  000D08  CFDE F023          	movff	postinc2,i1printf@val
  4640  000D0C  CFDD F024          	movff	postdec2,i1printf@val+1
  4641  000D10  0E02               	movlw	2
  4642  000D12  2620               	addwf	i1printf@ap,f,c
  4643  000D14  0E00               	movlw	0
  4644  000D16  2221               	addwfc	i1printf@ap+1,f,c
  4645                           
  4646                           ;doprnt.c: 1287: }
  4647                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4648  000D18  0E01               	movlw	1
  4649  000D1A  6E26               	movwf	i1printf@c,c
  4650  000D1C  D014               	goto	i1l1564
  4651  000D1E                     
  4652                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4653  000D1E  5026               	movf	i1printf@c,w,c
  4654  000D20  0D02               	mullw	2
  4655  000D22  0E01               	movlw	low _hexpowers
  4656  000D24  24F3               	addwf	prodl,w,c
  4657  000D26  6EF6               	movwf	tblptrl,c
  4658  000D28  0E08               	movlw	high _hexpowers
  4659  000D2A  20F4               	addwfc	prodh,w,c
  4660  000D2C  6EF7               	movwf	tblptrh,c
  4661  000D2E                     	if	1	;There are 3 active tblptr bytes
  4662  000D2E  6AF8               	clrf	tblptru,c
  4663  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
  4664  000D32  22F8               	addwfc	tblptru,f,c
  4665  000D34                     	endif
  4666  000D34  0009               	tblrd		*+
  4667  000D36  50F5               	movf	tablat,w,c
  4668  000D38  5C23               	subwf	i1printf@val,w,c
  4669  000D3A  0009               	tblrd		*+
  4670  000D3C  50F5               	movf	tablat,w,c
  4671  000D3E  5824               	subwfb	i1printf@val+1,w,c
  4672  000D40  A0D8               	btfss	status,0,c
  4673  000D42  D005               	goto	i1u93_20
  4674                           
  4675                           ;doprnt.c: 1318: break;
  4676  000D44  2A26               	incf	i1printf@c,f,c
  4677  000D46                     i1l1564:
  4678  000D46  0E04               	movlw	4
  4679  000D48  1826               	xorwf	i1printf@c,w,c
  4680  000D4A  A4D8               	btfss	status,2,c
  4681  000D4C  D7E8               	goto	i1l291
  4682  000D4E                     i1u93_20:
  4683                           
  4684                           ;doprnt.c: 1422: {
  4685                           ;doprnt.c: 1469: }
  4686                           ;doprnt.c: 1472: prec = c;
  4687  000D4E  C026  F025         	movff	i1printf@c,i1printf@prec
  4688                           
  4689                           ;doprnt.c: 1474: while(prec--) {
  4690  000D52  D02B               	goto	i1l294
  4691  000D54                     
  4692                           ;doprnt.c: 1478: {
  4693                           ;doprnt.c: 1499: {
  4694                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4695  000D54  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4696  000D58  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4697  000D5C  5025               	movf	i1printf@prec,w,c
  4698  000D5E  0D02               	mullw	2
  4699  000D60  0E01               	movlw	low _hexpowers
  4700  000D62  24F3               	addwf	prodl,w,c
  4701  000D64  6EF6               	movwf	tblptrl,c
  4702  000D66  0E08               	movlw	high _hexpowers
  4703  000D68  20F4               	addwfc	prodh,w,c
  4704  000D6A  6EF7               	movwf	tblptrh,c
  4705  000D6C                     	if	1	;There are 3 active tblptr bytes
  4706  000D6C  6AF8               	clrf	tblptru,c
  4707  000D6E  0E00               	movlw	low (__mediumconst shr (0+16))
  4708  000D70  22F8               	addwfc	tblptru,f,c
  4709  000D72                     	endif
  4710  000D72  0009               	tblrd		*+
  4711  000D74  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4712  000D78  000A               	tblrd		*-
  4713  000D7A  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4714  000D7E  EC6F  F00A         	call	i1___lwdiv	;wreg free
  4715  000D82  5013               	movf	?i1___lwdiv,w,c
  4716  000D84  0B0F               	andlw	15
  4717  000D86  6E22               	movwf	i1printf@idx,c
  4718                           
  4719                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4720  000D88  5022               	movf	i1printf@idx,w,c
  4721  000D8A  0D01               	mullw	1
  4722  000D8C  0E09               	movlw	low STR_16
  4723  000D8E  24F3               	addwf	prodl,w,c
  4724  000D90  6EF6               	movwf	tblptrl,c
  4725  000D92  0E08               	movlw	high STR_16
  4726  000D94  20F4               	addwfc	prodh,w,c
  4727  000D96  6EF7               	movwf	tblptrh,c
  4728  000D98                     	if	1	;There are 3 active tblptr bytes
  4729  000D98  6AF8               	clrf	tblptru,c
  4730  000D9A  0E00               	movlw	low (__mediumconst shr (0+16))
  4731  000D9C  22F8               	addwfc	tblptru,f,c
  4732  000D9E                     	endif
  4733  000D9E  0008               	tblrd		*
  4734  000DA0  CFF5 F026          	movff	tablat,i1printf@c
  4735                           
  4736                           ;doprnt.c: 1508: }
  4737                           ;doprnt.c: 1523: }
  4738                           ;doprnt.c: 1524: (putch(c) );
  4739  000DA4  5026               	movf	i1printf@c,w,c
  4740  000DA6  EC46  F00B         	call	i1_putch
  4741  000DAA                     i1l294:
  4742  000DAA  0625               	decf	i1printf@prec,f,c
  4743  000DAC  2825               	incf	i1printf@prec,w,c
  4744  000DAE  A4D8               	btfss	status,2,c
  4745  000DB0  D7D1               	goto	i1l295
  4746  000DB2                     i1u94_20:
  4747  000DB2  C01A  FFF6         	movff	i1printf@f,tblptrl
  4748  000DB6  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4749  000DBA  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4750  000DBE  0E01               	movlw	1
  4751  000DC0  261A               	addwf	i1printf@f,f,c
  4752  000DC2  0E00               	movlw	0
  4753  000DC4  221B               	addwfc	i1printf@f+1,f,c
  4754  000DC6  221C               	addwfc	i1printf@f+2,f,c
  4755  000DC8  BAF8               	btfsc	tblptru,5,c
  4756  000DCA  D003               	bra	i1u95_27
  4757  000DCC  0008               	tblrd		*
  4758  000DCE  50F5               	movf	tablat,w,c
  4759  000DD0  D005               	bra	i1u95_20
  4760  000DD2                     i1u95_27:
  4761  000DD2  CFF6 FFE9          	movff	tblptrl,fsr0l
  4762  000DD6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4763  000DDA  50EF               	movf	indf0,w,c
  4764  000DDC                     i1u95_20:
  4765  000DDC  6E26               	movwf	i1printf@c,c
  4766  000DDE  5026               	movf	i1printf@c,w,c
  4767  000DE0  B4D8               	btfsc	status,2,c
  4768  000DE2  0012               	return	
  4769  000DE4  D761               	goto	i1l283
  4770  000DE6                     __end_ofi1_printf:
  4771                           	opt stack 0
  4772                           pclatu	equ	0xFFB
  4773                           pclath	equ	0xFFA
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           intcon2	equ	0xFF1
  4782                           indf0	equ	0xFEF
  4783                           postinc0	equ	0xFEE
  4784                           plusw0	equ	0xFEB
  4785                           fsr0h	equ	0xFEA
  4786                           fsr0l	equ	0xFE9
  4787                           wreg	equ	0xFE8
  4788                           indf1	equ	0xFE7
  4789                           postinc1	equ	0xFE6
  4790                           postdec1	equ	0xFE5
  4791                           fsr1h	equ	0xFE2
  4792                           fsr1l	equ	0xFE1
  4793                           bsr	equ	0xFE0
  4794                           indf2	equ	0xFDF
  4795                           postinc2	equ	0xFDE
  4796                           postdec2	equ	0xFDD
  4797                           plusw2	equ	0xFDB
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           
  4802 ;; *************** function i1_putch *****************
  4803 ;; Defined at:
  4804 ;;		line 263 in file "Drivers/UART_Driver.c"
  4805 ;; Parameters:    Size  Location     Type
  4806 ;;  data            1    wreg     unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  data            1   19[COMRAM] unsigned char 
  4809 ;; Return value:  Size  Location     Type
  4810 ;;                  1    wreg      void 
  4811 ;; Registers used:
  4812 ;;		wreg, status,2, cstack
  4813 ;; Tracked objects:
  4814 ;;		On entry : 0/0
  4815 ;;		On exit  : 0/0
  4816 ;;		Unchanged: 0/0
  4817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4818 ;;      Params:         0       0       0       0       0       0       0       0       0
  4819 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4821 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4822 ;;Total ram usage:        1 bytes
  4823 ;; Hardware stack levels used:    1
  4824 ;; Hardware stack levels required when called:    2
  4825 ;; This function calls:
  4826 ;;		i1_writeByte
  4827 ;; This function is called by:
  4828 ;;		i1_printf
  4829 ;; This function uses a non-reentrant model
  4830 ;;
  4831                           
  4832                           	psect	text26
  4833  00168C                     __ptext26:
  4834                           	opt stack 0
  4835  00168C                     i1_putch:
  4836                           	opt stack 19
  4837                           
  4838                           ;incstack = 0
  4839                           ;i1putch@data stored from wreg
  4840  00168C  6E14               	movwf	i1putch@data,c
  4841                           
  4842                           ;UART_Driver.c: 264: writeByte(data);
  4843  00168E  5014               	movf	i1putch@data,w,c
  4844  001690  EC40  F00B         	call	i1_writeByte
  4845  001694  0012               	return		;funcret
  4846  001696                     __end_ofi1_putch:
  4847                           	opt stack 0
  4848                           pclatu	equ	0xFFB
  4849                           pclath	equ	0xFFA
  4850                           tblptru	equ	0xFF8
  4851                           tblptrh	equ	0xFF7
  4852                           tblptrl	equ	0xFF6
  4853                           tablat	equ	0xFF5
  4854                           prodh	equ	0xFF4
  4855                           prodl	equ	0xFF3
  4856                           intcon	equ	0xFF2
  4857                           intcon2	equ	0xFF1
  4858                           indf0	equ	0xFEF
  4859                           postinc0	equ	0xFEE
  4860                           plusw0	equ	0xFEB
  4861                           fsr0h	equ	0xFEA
  4862                           fsr0l	equ	0xFE9
  4863                           wreg	equ	0xFE8
  4864                           indf1	equ	0xFE7
  4865                           postinc1	equ	0xFE6
  4866                           postdec1	equ	0xFE5
  4867                           fsr1h	equ	0xFE2
  4868                           fsr1l	equ	0xFE1
  4869                           bsr	equ	0xFE0
  4870                           indf2	equ	0xFDF
  4871                           postinc2	equ	0xFDE
  4872                           postdec2	equ	0xFDD
  4873                           plusw2	equ	0xFDB
  4874                           fsr2h	equ	0xFDA
  4875                           fsr2l	equ	0xFD9
  4876                           status	equ	0xFD8
  4877                           
  4878 ;; *************** function i1_writeByte *****************
  4879 ;; Defined at:
  4880 ;;		line 69 in file "Drivers/UART_Driver.c"
  4881 ;; Parameters:    Size  Location     Type
  4882 ;;  data            1    wreg     unsigned char 
  4883 ;; Auto vars:     Size  Location     Type
  4884 ;;  data            1   18[COMRAM] unsigned char 
  4885 ;; Return value:  Size  Location     Type
  4886 ;;                  1    wreg      void 
  4887 ;; Registers used:
  4888 ;;		wreg
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4894 ;;      Params:         0       0       0       0       0       0       0       0       0
  4895 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4896 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4897 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4898 ;;Total ram usage:        1 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    1
  4901 ;; This function calls:
  4902 ;;		Nothing
  4903 ;; This function is called by:
  4904 ;;		i1_putch
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           	psect	text27
  4909  001680                     __ptext27:
  4910                           	opt stack 0
  4911  001680                     i1_writeByte:
  4912                           	opt stack 19
  4913                           
  4914                           ;incstack = 0
  4915                           ;i1writeByte@data stored from wreg
  4916  001680  6E13               	movwf	i1writeByte@data,c
  4917  001682                     
  4918                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4919  001682  A2AC               	btfss	4012,1,c	;volatile
  4920  001684  D7FE               	goto	i1l1440
  4921                           
  4922                           ;UART_Driver.c: 71: TXREG = data;
  4923  001686  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4924  00168A  0012               	return		;funcret
  4925  00168C                     __end_ofi1_writeByte:
  4926                           	opt stack 0
  4927                           pclatu	equ	0xFFB
  4928                           pclath	equ	0xFFA
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           intcon	equ	0xFF2
  4936                           intcon2	equ	0xFF1
  4937                           indf0	equ	0xFEF
  4938                           postinc0	equ	0xFEE
  4939                           plusw0	equ	0xFEB
  4940                           fsr0h	equ	0xFEA
  4941                           fsr0l	equ	0xFE9
  4942                           wreg	equ	0xFE8
  4943                           indf1	equ	0xFE7
  4944                           postinc1	equ	0xFE6
  4945                           postdec1	equ	0xFE5
  4946                           fsr1h	equ	0xFE2
  4947                           fsr1l	equ	0xFE1
  4948                           bsr	equ	0xFE0
  4949                           indf2	equ	0xFDF
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           plusw2	equ	0xFDB
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function i1___lwdiv *****************
  4958 ;; Defined at:
  4959 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  dividend        2   18[COMRAM] unsigned int 
  4962 ;;  divisor         2   20[COMRAM] unsigned int 
  4963 ;; Auto vars:     Size  Location     Type
  4964 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4965 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;                  2   18[COMRAM] unsigned int 
  4968 ;; Registers used:
  4969 ;;		wreg, status,2, status,0
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4975 ;;      Params:         4       0       0       0       0       0       0       0       0
  4976 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4977 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4978 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4979 ;;Total ram usage:        7 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    1
  4982 ;; This function calls:
  4983 ;;		Nothing
  4984 ;; This function is called by:
  4985 ;;		i1_printf
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           	psect	text28
  4990  0014DE                     __ptext28:
  4991                           	opt stack 0
  4992  0014DE                     i1___lwdiv:
  4993                           	opt stack 20
  4994                           
  4995                           ;incstack = 0
  4996  0014DE  0E00               	movlw	0
  4997  0014E0  6E18               	movwf	i1___lwdiv@quotient+1,c
  4998  0014E2  0E00               	movlw	0
  4999  0014E4  6E17               	movwf	i1___lwdiv@quotient,c
  5000  0014E6  5015               	movf	i1___lwdiv@divisor,w,c
  5001  0014E8  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  5002  0014EA  B4D8               	btfsc	status,2,c
  5003  0014EC  D01C               	goto	i1l707
  5004  0014EE  0E01               	movlw	1
  5005  0014F0  6E19               	movwf	i1___lwdiv@counter,c
  5006  0014F2  D004               	goto	i1l702
  5007  0014F4  90D8               	bcf	status,0,c
  5008  0014F6  3615               	rlcf	i1___lwdiv@divisor,f,c
  5009  0014F8  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  5010  0014FA  2A19               	incf	i1___lwdiv@counter,f,c
  5011  0014FC                     i1l702:
  5012  0014FC  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  5013  0014FE  D7FA               	goto	i1l703
  5014  001500                     i1u79_20:
  5015  001500  90D8               	bcf	status,0,c
  5016  001502  3617               	rlcf	i1___lwdiv@quotient,f,c
  5017  001504  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  5018  001506  5015               	movf	i1___lwdiv@divisor,w,c
  5019  001508  5C13               	subwf	i1___lwdiv@dividend,w,c
  5020  00150A  5016               	movf	i1___lwdiv@divisor+1,w,c
  5021  00150C  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  5022  00150E  A0D8               	btfss	status,0,c
  5023  001510  D005               	goto	i1l706
  5024  001512  5015               	movf	i1___lwdiv@divisor,w,c
  5025  001514  5E13               	subwf	i1___lwdiv@dividend,f,c
  5026  001516  5016               	movf	i1___lwdiv@divisor+1,w,c
  5027  001518  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  5028  00151A  8017               	bsf	i1___lwdiv@quotient,0,c
  5029  00151C                     i1l706:
  5030  00151C  90D8               	bcf	status,0,c
  5031  00151E  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  5032  001520  3215               	rrcf	i1___lwdiv@divisor,f,c
  5033  001522  2E19               	decfsz	i1___lwdiv@counter,f,c
  5034  001524  D7ED               	goto	i1u79_20
  5035  001526                     i1l707:
  5036  001526  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  5037  00152A  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  5038  00152E  0012               	return		;funcret
  5039  001530                     __end_ofi1___lwdiv:
  5040                           	opt stack 0
  5041                           pclatu	equ	0xFFB
  5042                           pclath	equ	0xFFA
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           intcon2	equ	0xFF1
  5051                           indf0	equ	0xFEF
  5052                           postinc0	equ	0xFEE
  5053                           plusw0	equ	0xFEB
  5054                           fsr0h	equ	0xFEA
  5055                           fsr0l	equ	0xFE9
  5056                           wreg	equ	0xFE8
  5057                           indf1	equ	0xFE7
  5058                           postinc1	equ	0xFE6
  5059                           postdec1	equ	0xFE5
  5060                           fsr1h	equ	0xFE2
  5061                           fsr1l	equ	0xFE1
  5062                           bsr	equ	0xFE0
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _HighISR *****************
  5072 ;; Defined at:
  5073 ;;		line 89 in file "main.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5087 ;;      Params:         0       0       0       0       0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5089 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5090 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5091 ;;Total ram usage:       18 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		Interrupt level 2
  5097 ;; This function uses a non-reentrant model
  5098 ;;
  5099                           
  5100                           	psect	intcode
  5101  000008                     __pintcode:
  5102                           	opt stack 0
  5103  000008                     _HighISR:
  5104                           	opt stack 19
  5105                           
  5106                           ;incstack = 0
  5107  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5108  00000A  ED19  F009         	call	int_func,f	;refresh shadow registers
  5109                           pclatu	equ	0xFFB
  5110                           pclath	equ	0xFFA
  5111                           tblptru	equ	0xFF8
  5112                           tblptrh	equ	0xFF7
  5113                           tblptrl	equ	0xFF6
  5114                           tablat	equ	0xFF5
  5115                           prodh	equ	0xFF4
  5116                           prodl	equ	0xFF3
  5117                           intcon	equ	0xFF2
  5118                           intcon2	equ	0xFF1
  5119                           indf0	equ	0xFEF
  5120                           postinc0	equ	0xFEE
  5121                           plusw0	equ	0xFEB
  5122                           fsr0h	equ	0xFEA
  5123                           fsr0l	equ	0xFE9
  5124                           wreg	equ	0xFE8
  5125                           indf1	equ	0xFE7
  5126                           postinc1	equ	0xFE6
  5127                           postdec1	equ	0xFE5
  5128                           fsr1h	equ	0xFE2
  5129                           fsr1l	equ	0xFE1
  5130                           bsr	equ	0xFE0
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           plusw2	equ	0xFDB
  5135                           fsr2h	equ	0xFDA
  5136                           fsr2l	equ	0xFD9
  5137                           status	equ	0xFD8
  5138                           
  5139                           	psect	intcode_body
  5140  001232                     __pintcode_body:
  5141                           	opt stack 19
  5142  001232                     int_func:
  5143                           	opt stack 19
  5144  001232  0006               	pop		; remove dummy address from shadow register refresh
  5145  001234  CFFA F001          	movff	pclath,??_HighISR
  5146  001238  CFFB F002          	movff	pclatu,??_HighISR+1
  5147  00123C  CFE9 F003          	movff	fsr0l,??_HighISR+2
  5148  001240  CFEA F004          	movff	fsr0h,??_HighISR+3
  5149  001244  CFE1 F005          	movff	fsr1l,??_HighISR+4
  5150  001248  CFE2 F006          	movff	fsr1h,??_HighISR+5
  5151  00124C  CFD9 F007          	movff	fsr2l,??_HighISR+6
  5152  001250  CFDA F008          	movff	fsr2h,??_HighISR+7
  5153  001254  CFF3 F009          	movff	prodl,??_HighISR+8
  5154  001258  CFF4 F00A          	movff	prodh,??_HighISR+9
  5155  00125C  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  5156  001260  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  5157  001264  CFF8 F00D          	movff	tblptru,??_HighISR+12
  5158  001268  CFF5 F00E          	movff	tablat,??_HighISR+13
  5159  00126C  C044  F00F         	movff	btemp,??_HighISR+14
  5160  001270  C045  F010         	movff	btemp+1,??_HighISR+15
  5161  001274  C046  F011         	movff	btemp+2,??_HighISR+16
  5162  001278  C047  F012         	movff	btemp+3,??_HighISR+17
  5163                           
  5164                           ;main.c: 90: if (INTCONbits.TMR0IF) {
  5165  00127C  A4F2               	btfss	intcon,2,c	;volatile
  5166  00127E  D004               	goto	i2l270
  5167                           
  5168                           ;main.c: 91: tick = 1;
  5169  001280  0E01               	movlw	1
  5170  001282  0100               	movlb	0	; () banked
  5171  001284  6FD5               	movwf	_tick& (0+255),b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;main.c: 92: INTCONbits.TMR0IF = 0;
  5175  001286  94F2               	bcf	intcon,2,c	;volatile
  5176  001288                     i2l270:
  5177                           
  5178                           ; BSR set to: 0
  5179  001288  C012  F047         	movff	??_HighISR+17,btemp+3
  5180  00128C  C011  F046         	movff	??_HighISR+16,btemp+2
  5181  001290  C010  F045         	movff	??_HighISR+15,btemp+1
  5182  001294  C00F  F044         	movff	??_HighISR+14,btemp
  5183  001298  C00E  FFF5         	movff	??_HighISR+13,tablat
  5184  00129C  C00D  FFF8         	movff	??_HighISR+12,tblptru
  5185  0012A0  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  5186  0012A4  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  5187  0012A8  C00A  FFF4         	movff	??_HighISR+9,prodh
  5188  0012AC  C009  FFF3         	movff	??_HighISR+8,prodl
  5189  0012B0  C008  FFDA         	movff	??_HighISR+7,fsr2h
  5190  0012B4  C007  FFD9         	movff	??_HighISR+6,fsr2l
  5191  0012B8  C006  FFE2         	movff	??_HighISR+5,fsr1h
  5192  0012BC  C005  FFE1         	movff	??_HighISR+4,fsr1l
  5193  0012C0  C004  FFEA         	movff	??_HighISR+3,fsr0h
  5194  0012C4  C003  FFE9         	movff	??_HighISR+2,fsr0l
  5195  0012C8  C002  FFFB         	movff	??_HighISR+1,pclatu
  5196  0012CC  C001  FFFA         	movff	??_HighISR,pclath
  5197  0012D0  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5198  0012D2  0011               	retfie		f
  5199  0012D4                     __end_of_HighISR:
  5200                           	opt stack 0
  5201                           pclatu	equ	0xFFB
  5202                           pclath	equ	0xFFA
  5203                           tblptru	equ	0xFF8
  5204                           tblptrh	equ	0xFF7
  5205                           tblptrl	equ	0xFF6
  5206                           tablat	equ	0xFF5
  5207                           prodh	equ	0xFF4
  5208                           prodl	equ	0xFF3
  5209                           intcon	equ	0xFF2
  5210                           intcon2	equ	0xFF1
  5211                           indf0	equ	0xFEF
  5212                           postinc0	equ	0xFEE
  5213                           plusw0	equ	0xFEB
  5214                           fsr0h	equ	0xFEA
  5215                           fsr0l	equ	0xFE9
  5216                           wreg	equ	0xFE8
  5217                           indf1	equ	0xFE7
  5218                           postinc1	equ	0xFE6
  5219                           postdec1	equ	0xFE5
  5220                           fsr1h	equ	0xFE2
  5221                           fsr1l	equ	0xFE1
  5222                           bsr	equ	0xFE0
  5223                           indf2	equ	0xFDF
  5224                           postinc2	equ	0xFDE
  5225                           postdec2	equ	0xFDD
  5226                           plusw2	equ	0xFDB
  5227                           fsr2h	equ	0xFDA
  5228                           fsr2l	equ	0xFD9
  5229                           status	equ	0xFD8
  5230                           pclatu	equ	0xFFB
  5231                           pclath	equ	0xFFA
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           intcon2	equ	0xFF1
  5240                           indf0	equ	0xFEF
  5241                           postinc0	equ	0xFEE
  5242                           plusw0	equ	0xFEB
  5243                           fsr0h	equ	0xFEA
  5244                           fsr0l	equ	0xFE9
  5245                           wreg	equ	0xFE8
  5246                           indf1	equ	0xFE7
  5247                           postinc1	equ	0xFE6
  5248                           postdec1	equ	0xFE5
  5249                           fsr1h	equ	0xFE2
  5250                           fsr1l	equ	0xFE1
  5251                           bsr	equ	0xFE0
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           plusw2	equ	0xFDB
  5256                           fsr2h	equ	0xFDA
  5257                           fsr2l	equ	0xFD9
  5258                           status	equ	0xFD8
  5259                           
  5260                           	psect	rparam
  5261  0000                     pclatu	equ	0xFFB
  5262                           pclath	equ	0xFFA
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon2	equ	0xFF1
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           plusw0	equ	0xFEB
  5274                           fsr0h	equ	0xFEA
  5275                           fsr0l	equ	0xFE9
  5276                           wreg	equ	0xFE8
  5277                           indf1	equ	0xFE7
  5278                           postinc1	equ	0xFE6
  5279                           postdec1	equ	0xFE5
  5280                           fsr1h	equ	0xFE2
  5281                           fsr1l	equ	0xFE1
  5282                           bsr	equ	0xFE0
  5283                           indf2	equ	0xFDF
  5284                           postinc2	equ	0xFDE
  5285                           postdec2	equ	0xFDD
  5286                           plusw2	equ	0xFDB
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291                           	psect	temp
  5292  000044                     btemp:
  5293                           	opt stack 0
  5294  000044                     	ds	1
  5295  0000                     int$flags	set	btemp
  5296  0000                     wtemp6	set	btemp+1
  5297                           pclatu	equ	0xFFB
  5298                           pclath	equ	0xFFA
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           intcon2	equ	0xFF1
  5307                           indf0	equ	0xFEF
  5308                           postinc0	equ	0xFEE
  5309                           plusw0	equ	0xFEB
  5310                           fsr0h	equ	0xFEA
  5311                           fsr0l	equ	0xFE9
  5312                           wreg	equ	0xFE8
  5313                           indf1	equ	0xFE7
  5314                           postinc1	equ	0xFE6
  5315                           postdec1	equ	0xFE5
  5316                           fsr1h	equ	0xFE2
  5317                           fsr1l	equ	0xFE1
  5318                           bsr	equ	0xFE0
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           plusw2	equ	0xFDB
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    8
    Data        8
    BSS         286
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     34     155
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), STR_10(CODE[2]), 
		 -> STR_9(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_15(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_14(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S97$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S97$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S97$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _initDoors->_C_DOOR_Init
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6662
                                             32 BANK0      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                          _initDoors
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     851
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     333
                                              5 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     266
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    2524
                                             23 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     405
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1877
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      9B       5       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     184      20        0.0%
DATA                 0      0     184       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Dec 02 12:46:33 2017

                         l13 13B0                           l50 109E                           l18 0EE2  
                         l51 0FE6                           l19 0E00                           l44 1352  
                         l52 109C                           l45 12DC                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l203 1644                          l250 0A28  
                        l244 1604                          l252 0A6C                          l261 0B2E  
                        l254 0A92                          l176 15C4                          l256 0AC4  
                        l361 1152                          l290 0B68                          l362 1160  
                        l354 10D8                          l258 0AFA                          l291 0BCE  
                        l283 0B50                          l363 1176                          l355 10F0  
                        l284 0B60                          l285 0B70                          l357 111E  
                        l702 14AA                          l294 0C5C                          l358 1112  
                        l703 14A2                          l295 0C04                          l706 14CA  
                        l707 14D4                          l846 153C                          l847 1532  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          u820 0B9C  
                        u760 14AE                          u850 0BFE                          u827 0B92  
                        u860 0C66                          u870 0C92                          u877 0C88  
                        u991 0F74                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000          __end_ofi1_writeByte 168C                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l1522 0BF6                         l1436 1676  
                       STR_1 0833                         STR_2 0831                         STR_3 081E  
                       STR_4 081A                         STR_5 0822                         STR_6 0835  
                       STR_7 0835                         STR_8 082B                         STR_9 0829  
                       u1001 0FAE                         u1121 1034                         u1060 1122  
                       u1251 15A2                         u1094 1344                         u1095 1340  
                       u1280 1572                         u1371 0A3E                         u1457 09DC  
                       u1467 0A1C                         u1477 0AEC                         u1487 0FD2  
                       u9911 0F72                 ?_C_DOOR_Init 0001                         _baud 0043  
                       _main 09D0                         _read 00C4                         _tick 00D5  
                       fsr0h 000FEA                         fsr1h 000FE2                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 0044                         prodh 000FF4                         prodl 000FF3  
                       start 00D4                __CFG_IESO$OFF 000000              __end_ofi1_putch 1696  
            __end_of_HighISR 12D4                __CFG_MCLRE$ON 000000                 ___param_bank 000000  
          initDoors@door_cnt 00DC               _startCharacter 0041                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 00E1      __size_of_C_DOOR_LockAll 000E         commandAndMessage@mes 00E3  
            __end_of___aldiv 1188                        ?_main 0001                        STR_10 082F  
                      STR_11 0827                        STR_12 082D                        STR_13 082B  
                      STR_14 0825                        STR_15 082F                        STR_16 0809  
                      u10011 0FAC              __end_of___lwdiv 14DE                        i1l141 086C  
                      i1l150 0916                        i1l142 088E                        i1l135 09A6  
                      i1l160 09A0                        i1l136 083C                        i1l153 0938  
                      i1l145 08B0                        i1l137 0864                        i1l154 095A  
                      i1l146 08D2                        i1l157 097C                        i1l149 08F4  
                      i1l158 0996                        i1l290 0CBE                        i1l186 007C  
                      i1l291 0D1E                        i1l283 0CA8                        i1l284 0CB8  
                      i1l285 0CC6                        i1l702 14FC                        i1l294 0DAA  
                      i1l703 14F4                        i1l295 0D54                        i1l706 151C  
                      i1l707 1526                        i2l270 1288                        _RCREG 000FAE  
       __size_of_acknowledge 0060                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             C_DOOR_Init@cnt 00DA               __CFG_EBTRB$OFF 000000                        _doors 0060  
                      _putch 1664              i1writeByte@data 0013                        pclath 000FFA  
                      tablat 000FF5                 ?_D_UART_Init 00E5                 ?_D_UART_Read 00D7  
               ?_D_TMR0_Init 0001                        plusw0 000FEB                        plusw2 000FDB  
                      status 000FD8                        wtemp6 0045                 ?_D_PORT_Init 0001  
         __size_ofi1___lwdiv 0052                _stopCharacter 003F             __end_ofi1_printf 0DE6  
                 i1printf@ap 0020              __initialization 142E             _D_UART_Init$1504 00EA  
               __end_of_main 0B44                       ??_main 00F7                  i1_writeByte 1680  
              __activetblptr 000003              __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00D7  
                     _ADCON1 000FC1                       ?_putch 0001                       i1l1440 1682  
                     i1l1564 0D46                    ??i1_putch 0014             _C_DOOR_UnlockAll 1656  
                  ??_HighISR 0001                       _LowISR 0018               __CFG_XINST$OFF 000000  
                  ??___aldiv 00DF                    ??___lwdiv 00DB             __end_of_readByte 169E  
                     clear_0 146C                       clear_1 1478                       _printf 0B44  
                     _strcmp 1530            __end_ofi1___lwdiv 1530                 __pdataCOMRAM 003D  
      D_UART_Init@interrupts 00E9                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00E9  
            D_UART_Init@baud 00E7              D_UART_Init@name 00E5   __end_of_C_DOOR_ReadSensors 136E  
                 __accesstop 0060      __end_of__initialization 1480              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 0118                  i1printf@idx 0022  
                i1printf@val 0023               __pcstackCOMRAM 0001                 __pidataBANK0 16A4  
               C_DOOR_Init@d 00DB                  i1putch@data 0014                __end_of_putch 1672  
           _messageCharacter 00F9               _C_DOOR_LockAll 1648       __size_of_D_UART_Enable 0024  
             ??_D_UART_Write 00ED                    ?i1_printf 001A       __size_of_D_TMR0_Enable 0014  
          _C_DOOR_SendStates 0FDE                      ??_putch 00D8           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100           __size_of_initDoors 0022  
       __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 002E         __size_of_D_TMR0_Init 0024  
        ??_C_DOOR_SendStates 00EE                      ?_LowISR 0001         __size_of_D_PORT_Init 001E  
     __end_of_C_DOOR_LockAll 1656                   _deviceName 00D0                      ?_printf 00DE  
                    ?_strcmp 00D7    __end_of_C_DOOR_SendStates 10BA                   ??i1_printf 001F  
    __size_of_fillDataBuffer 0198                      i1u90_20 0CF0                      i1u90_27 0CE6  
                    i1u93_20 0D4E                      i1u94_20 0DB2          D_UART_Enable@enable 00D7  
                    i1u79_20 1500                      i1u95_20 0DDC                      i1u95_27 0DD2  
            __CFG_VREGEN$OFF 000000                      i1_putch 168C                      _HighISR 0008  
                  ?_readByte 0001           __size_of_writeByte 000E                _D_UART_Enable 15AC  
                    __Hparam 0000                      __Lparam 0000              __size_of_LowISR 00BC  
              _D_TMR0_Enable 1634                   _readBuffer 0100                      ___aldiv 10BA  
            ?_C_DOOR_LockAll 0001                      ___lwdiv 148A                 __psmallconst 0800  
        C_DOOR_ReadSensors@d 00DB              __CFG_STVREN$OFF 000000                ??_acknowledge 0027  
                    __pcinit 142E                      __ramtop 0800     __end_of_C_DOOR_UnlockAll 1664  
                    __ptext0 09D0                      __ptext1 1530                      __ptext2 15F4  
                    __ptext3 1648                      __ptext4 0DE6                      __ptext5 157E  
                    __ptext6 1188                      __ptext7 10BA                      __ptext8 15AC  
                    __ptext9 15D0              __size_of_printf 015A            __end_of_initDoors 1616  
                  _T0CONbits 000FD5                 ?i1_writeByte 0001              __size_of_strcmp 004E  
          __end_of_hexpowers 0809            i1___lwdiv@divisor 0015            i1___lwdiv@counter 0019  
       C_DOOR_SendStates@com 00F1         C_DOOR_SendStates@mes 00F4             ___aldiv@dividend 00D7  
             __pintcode_body 1232         end_of_initialization 1480                   ??_readByte 0013  
        D_TMR0_Enable@enable 00D7                      int_func 1232               ?_D_UART_Enable 0001  
             ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0FDE                    _RCSTAbits 000FAB  
                    printf@c 00E8                      printf@f 00DE             ___aldiv@quotient 00E1  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE                      strcmp@r 00DC  
          __end_of_writeByte 1680   __size_of_C_DOOR_SendStates 00DC                    _TRISCbits 000F94  
        __end_of_acknowledge 142E                    i1___lwdiv 14DE                    _TXSTAbits 000FAC  
               i1printf@flag 001F                 i1printf@prec 0025           _C_DOOR_ReadSensors 12D4  
             __end_of_LowISR 00D4                  _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001  
              __pidataCOMRAM 169E               __end_of_printf 0C9E               __end_of_strcmp 157E  
        start_initialization 142E               _fillDataBuffer 0838                    i1printf@c 0026  
                  i1printf@f 001A                   ?i1___lwdiv 0013            __size_ofi1_printf 0148  
       ??_C_DOOR_ReadSensors 00D7              ??_D_UART_Enable 00D7                ??_C_DOOR_Init 00D7  
            ??_D_TMR0_Enable 00D7                     ??_LowISR 0028                  __pdataBANK0 00F9  
           __CFG_LPT1OSC$OFF 000000                  _acknowledge 13CE             D_UART_Write@data 00EB  
                   ??_printf 00E1                     ??_strcmp 00DB       __end_of_fillDataBuffer 09D0  
                __pbssCOMRAM 0043         __size_ofi1_writeByte 000C                __pcstackBANK0 00D7  
              ??_D_UART_Init 00EA                ??_D_UART_Read 00DD                ??_D_TMR0_Init 00D8  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00E0  
              ??_D_PORT_Init 00D7             ??_C_DOOR_LockAll 00D7            __size_of_readByte 0008  
           ___lwdiv@dividend 00D7          __end_of_C_DOOR_Init 0EFE                    __pintcode 0008  
                   ?___aldiv 00D7                     ?___lwdiv 00D7                  __pintcodelo 0018  
         fillDataBuffer@data 0027            ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001  
                __smallconst 0800           ??_C_DOOR_UnlockAll 00D7                    _initDoors 15F4  
               _D_UART_Write 0EFE                    _hexpowers 0801                    _readReady 00D6  
           ___lwdiv@quotient 00DB                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00DB              ___aldiv@counter 00DF                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 1232          __end_of_D_UART_Read 15AC  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 15F4                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 1634                   printf@flag 00E1  
                 printf@prec 00E7                     i1_printf 0C9E                   ?_initDoors 0001  
                  _writeByte 1672                  _INTCON2bits 000FF1                    copy_data0 145A  
                _C_DOOR_Init 0DE6             __size_ofi1_putch 000A             __size_of_HighISR 12CC  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___aldiv 00CE  
           __size_of___lwdiv 0054              ___lwdiv@divisor 00D9              ___lwdiv@counter 00DD  
                   __ptext10 1634                     __ptext11 1616                     __ptext20 12D4  
                   __ptext12 1656                     __ptext13 0FDE                     __ptext22 1696  
                   __ptext14 136E                     __ptext23 0838                     __ptext15 0EFE  
                   __ptext24 13CE                     __ptext16 0B44                     __ptext25 0C9E  
                   __ptext17 1664                     __ptext26 168C                     __ptext18 1672  
                   __ptext27 1680                     __ptext19 148A                     __ptext28 14DE  
                 ?_writeByte 0001                     _door_cnt 00D3           i1___lwdiv@dividend 0013  
                _D_UART_Init 1188                  _D_UART_Read 157E                     _readData 00CA  
                _D_TMR0_Init 15D0                     _readByte 1696                __size_of_main 0174  
         C_DOOR_SendStates@d 00F6                  _D_PORT_Init 1616                     int$flags 0044  
                  printf@idx 00E4                    printf@val 00E5                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00D8  
                 _INTCONbits 000FF2                  ??_initDoors 00DC            _commandAndMessage 136E  
                   intlevel1 0000                     intlevel2 0000  __size_of_C_DOOR_ReadSensors 009A  
         ?_commandAndMessage 00D7        __end_of_D_UART_Enable 15D0        __end_of_D_TMR0_Enable 1648  
        ??_commandAndMessage 00E5                     printf@ap 00E2             ??_fillDataBuffer 0027  
        D_UART_Write@command 00E9                ??i1_writeByte 0013                     strcmp@s1 00D7  
                   strcmp@s2 00D9                writeByte@data 00D7    __end_of_commandAndMessage 13CE  
               ___aldiv@sign 00E0                  ??_writeByte 00D7    __size_of_C_DOOR_UnlockAll 000E  
