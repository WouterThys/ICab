

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Nov 25 18:46:00 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    48                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    49                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    50  0000                     
    51                           ; Version 1.44
    52                           ; Generated 14/09/2017 GMT
    53                           ; 
    54                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    55                           ; All rights reserved.
    56                           ; 
    57                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    58                           ; 
    59                           ; Redistribution and use in source and binary forms, with or without modification, are
    60                           ; permitted provided that the following conditions are met:
    61                           ; 
    62                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    63                           ;        conditions and the following disclaimer.
    64                           ; 
    65                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    66                           ;        of conditions and the following disclaimer in the documentation and/or other
    67                           ;        materials provided with the distribution.
    68                           ; 
    69                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    70                           ;        software without specific prior written permission.
    71                           ; 
    72                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    73                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    74                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    75                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    76                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    77                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    78                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    79                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    80                           ; 
    81                           ; 
    82                           ; Code-generator required, PIC18F2550 Definitions
    83                           ; 
    84                           ; SFR Addresses
    85  0000                     
    86                           	psect	idataCOMRAM
    87  001588                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _ackCharacter
    91  001588  20                 	db	low STR_4
    92  001589  08                 	db	high STR_4
    93                           
    94                           ;initializer for _stopCharacter
    95  00158A  33                 	db	low STR_2
    96  00158B  08                 	db	high STR_2
    97                           
    98                           ;initializer for _startCharacter
    99  00158C  35                 	db	low STR_1
   100  00158D  08                 	db	high STR_1
   101                           
   102                           	psect	idataBANK0
   103  00158E                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _messageCharacter
   107  00158E  24                 	db	low STR_3
   108  00158F  08                 	db	high STR_3
   109                           
   110                           	psect	smallconst
   111  000800                     __psmallconst:
   112                           	opt stack 0
   113  000800  00                 	db	0
   114  000801                     _hexpowers:
   115                           	opt stack 0
   116  000801  0001               	dw	1
   117  000803  0010               	dw	16
   118  000805  0100               	dw	256
   119  000807  1000               	dw	4096
   120  000809                     __end_of_hexpowers:
   121                           	opt stack 0
   122  000809                     STR_13:
   123  000809  30                 	db	48	;'0'
   124  00080A  31                 	db	49	;'1'
   125  00080B  32                 	db	50	;'2'
   126  00080C  33                 	db	51	;'3'
   127  00080D  34                 	db	52	;'4'
   128  00080E  35                 	db	53	;'5'
   129  00080F  36                 	db	54	;'6'
   130  000810  37                 	db	55	;'7'
   131  000811  38                 	db	56	;'8'
   132  000812  39                 	db	57	;'9'
   133  000813  61                 	db	97	;'a'
   134  000814  62                 	db	98	;'b'
   135  000815  63                 	db	99	;'c'
   136  000816  64                 	db	100	;'d'
   137  000817  65                 	db	101	;'e'
   138  000818  66                 	db	102	;'f'
   139  000819  00                 	db	0
   140  00081A                     STR_10:
   141  00081A  53                 	db	83	;'S'
   142  00081B  74                 	db	116	;'t'
   143  00081C  61                 	db	97	;'a'
   144  00081D  72                 	db	114	;'r'
   145  00081E  74                 	db	116	;'t'
   146  00081F  00                 	db	0
   147  000820                     STR_4:
   148  000820  5B                 	db	91	;'['
   149  000821  41                 	db	65	;'A'
   150  000822  5D                 	db	93	;']'
   151  000823  00                 	db	0
   152  000824                     STR_3:
   153  000824  5B                 	db	91	;'['
   154  000825  4D                 	db	77	;'M'
   155  000826  5D                 	db	93	;']'
   156  000827  00                 	db	0
   157  000828                     STR_5:
   158  000828  25                 	db	37
   159  000829  78                 	db	120	;'x'
   160  00082A  00                 	db	0
   161  00082B                     STR_9:
   162  00082B  49                 	db	73	;'I'
   163  00082C  00                 	db	0
   164  00082D                     STR_11:
   165  00082D  4C                 	db	76	;'L'
   166  00082E  00                 	db	0
   167  00082F                     STR_8:
   168  00082F  50                 	db	80	;'P'
   169  000830  00                 	db	0
   170  000831                     STR_12:
   171  000831  55                 	db	85	;'U'
   172  000832  00                 	db	0
   173  000833                     STR_2:
   174  000833  24                 	db	36
   175  000834  00                 	db	0
   176  000835                     STR_1:
   177  000835  26                 	db	38
   178  000836  00                 	db	0
   179  000837                     STR_6:
   180  000837  3A                 	db	58	;':'
   181  000838  00                 	db	0
   182  0000                     
   183                           ; #config settings
   184  000839  00                 	db	0	; dummy byte at the end
   185  0000                     
   186                           	psect	nvBANK0
   187  0000C1                     __pnvBANK0:
   188                           	opt stack 0
   189  0000C1                     _deviceName:
   190                           	opt stack 0
   191  0000C1                     	ds	3
   192  0000                     _INTCON2bits	set	4081
   193  0000                     _T0CONbits	set	4053
   194  0000                     _PIE1bits	set	3997
   195  0000                     _IPR1bits	set	3999
   196  0000                     _PIR1bits	set	3998
   197  0000                     _INTCONbits	set	4082
   198  0000                     _RCONbits	set	4048
   199  0000                     _SPBRG	set	4015
   200  0000                     _BAUDCONbits	set	4024
   201  0000                     _TRISCbits	set	3988
   202  0000                     _RCREG	set	4014
   203  0000                     _RCSTAbits	set	4011
   204  0000                     _TXREG	set	4013
   205  0000                     _TXSTAbits	set	4012
   206  0000                     _ADCON1	set	4033
   207  0000                     _PORTC	set	3970
   208  0000                     _TRISC	set	3988
   209  0000                     _PORTA	set	3968
   210  0000                     _TRISA	set	3986
   211  0000                     _TRISB	set	3987
   212  0000                     _PORTB	set	3969
   213                           
   214                           	psect	cinit
   215  0012EA                     __pcinit:
   216                           	opt stack 0
   217  0012EA                     start_initialization:
   218                           	opt stack 0
   219  0012EA                     __initialization:
   220                           	opt stack 0
   221                           
   222                           ; Initialize objects allocated to BANK0 (2 bytes)
   223                           ; load TBLPTR registers with __pidataBANK0
   224  0012EA  0E8E               	movlw	low __pidataBANK0
   225  0012EC  6EF6               	movwf	tblptrl,c
   226  0012EE  0E15               	movlw	high __pidataBANK0
   227  0012F0  6EF7               	movwf	tblptrh,c
   228  0012F2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   229  0012F4  6EF8               	movwf	tblptru,c
   230  0012F6  0009               	tblrd		*+	;fetch initializer
   231  0012F8  CFF5 F0C4          	movff	tablat,__pdataBANK0
   232  0012FC  0009               	tblrd		*+	;fetch initializer
   233  0012FE  CFF5 F0C5          	movff	tablat,__pdataBANK0+1
   234                           
   235                           ; Initialize objects allocated to COMRAM (6 bytes)
   236                           ; load TBLPTR registers with __pidataCOMRAM
   237  001302  0E88               	movlw	low __pidataCOMRAM
   238  001304  6EF6               	movwf	tblptrl,c
   239  001306  0E15               	movlw	high __pidataCOMRAM
   240  001308  6EF7               	movwf	tblptrh,c
   241  00130A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   242  00130C  6EF8               	movwf	tblptru,c
   243  00130E  EE00  F03D         	lfsr	0,__pdataCOMRAM
   244  001312  EE10 F006          	lfsr	1,6
   245  001316                     copy_data0:
   246  001316  0009               	tblrd		*+
   247  001318  CFF5 FFEE          	movff	tablat,postinc0
   248  00131C  50E5               	movf	postdec1,w,c
   249  00131E  50E1               	movf	fsr1l,w,c
   250  001320  E1FA               	bnz	copy_data0
   251                           
   252                           ; Clear objects allocated to BANK1 (166 bytes)
   253  001322  EE01  F000         	lfsr	0,__pbssBANK1
   254  001326  0EA6               	movlw	166
   255  001328                     clear_0:
   256  001328  6AEE               	clrf	postinc0,c
   257  00132A  06E8               	decf	wreg,f,c
   258  00132C  E1FD               	bnz	clear_0
   259                           
   260                           ; Clear objects allocated to BANK0 (64 bytes)
   261  00132E  EE00  F060         	lfsr	0,__pbssBANK0
   262  001332  0E40               	movlw	64
   263  001334                     clear_1:
   264  001334  6AEE               	clrf	postinc0,c
   265  001336  06E8               	decf	wreg,f,c
   266  001338  E1FD               	bnz	clear_1
   267                           
   268                           ; Clear objects allocated to COMRAM (1 bytes)
   269  00133A  6A43               	clrf	__pbssCOMRAM& (0+255),c
   270  00133C                     end_of_initialization:
   271                           	opt stack 0
   272  00133C                     __end_of__initialization:
   273                           	opt stack 0
   274  00133C  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   275  00133E  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   276  001340  0100               	movlb	0
   277  001342  EF27  F007         	goto	_main	;jump to C main() function
   278                           tblptru	equ	0xFF8
   279                           tblptrh	equ	0xFF7
   280                           tblptrl	equ	0xFF6
   281                           tablat	equ	0xFF5
   282                           postinc0	equ	0xFEE
   283                           wreg	equ	0xFE8
   284                           postdec1	equ	0xFE5
   285                           fsr1l	equ	0xFE1
   286                           
   287                           	psect	bssCOMRAM
   288  000043                     __pbssCOMRAM:
   289                           	opt stack 0
   290  000043                     _baud:
   291                           	opt stack 0
   292  000043                     	ds	1
   293                           tblptru	equ	0xFF8
   294                           tblptrh	equ	0xFF7
   295                           tblptrl	equ	0xFF6
   296                           tablat	equ	0xFF5
   297                           postinc0	equ	0xFEE
   298                           wreg	equ	0xFE8
   299                           postdec1	equ	0xFE5
   300                           fsr1l	equ	0xFE1
   301                           
   302                           	psect	dataCOMRAM
   303  00003D                     __pdataCOMRAM:
   304                           	opt stack 0
   305  00003D                     _ackCharacter:
   306                           	opt stack 0
   307  00003D                     	ds	2
   308  00003F                     _stopCharacter:
   309                           	opt stack 0
   310  00003F                     	ds	2
   311  000041                     _startCharacter:
   312                           	opt stack 0
   313  000041                     	ds	2
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	bssBANK0
   324  000060                     __pbssBANK0:
   325                           	opt stack 0
   326  000060                     _doors:
   327                           	opt stack 0
   328  000060                     	ds	50
   329  000092                     _read:
   330                           	opt stack 0
   331  000092                     	ds	6
   332  000098                     _readData:
   333                           	opt stack 0
   334  000098                     	ds	6
   335  00009E                     _tick:
   336                           	opt stack 0
   337  00009E                     	ds	1
   338  00009F                     _readReady:
   339                           	opt stack 0
   340  00009F                     	ds	1
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	dataBANK0
   351  0000C4                     __pdataBANK0:
   352                           	opt stack 0
   353  0000C4                     _messageCharacter:
   354                           	opt stack 0
   355  0000C4                     	ds	2
   356                           tblptru	equ	0xFF8
   357                           tblptrh	equ	0xFF7
   358                           tblptrl	equ	0xFF6
   359                           tablat	equ	0xFF5
   360                           postinc0	equ	0xFEE
   361                           wreg	equ	0xFE8
   362                           postdec1	equ	0xFE5
   363                           fsr1l	equ	0xFE1
   364                           
   365                           	psect	bssBANK1
   366  000100                     __pbssBANK1:
   367                           	opt stack 0
   368  000100                     _readBuffer:
   369                           	opt stack 0
   370  000100                     	ds	166
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           postdec1	equ	0xFE5
   378                           fsr1l	equ	0xFE1
   379                           
   380                           	psect	cstackBANK0
   381  0000A0                     __pcstackBANK0:
   382                           	opt stack 0
   383  0000A0                     ??_C_DOOR_ReadSensors:
   384  0000A0                     ?_strcmp:
   385                           	opt stack 0
   386  0000A0                     ?___lwdiv:
   387                           	opt stack 0
   388  0000A0                     ?___aldiv:
   389                           	opt stack 0
   390  0000A0                     ?_D_UART_Read:
   391                           	opt stack 0
   392  0000A0                     C_DOOR_Init@d:
   393                           	opt stack 0
   394  0000A0                     writeByte@data:
   395                           	opt stack 0
   396  0000A0                     D_UART_Enable@enable:
   397                           	opt stack 0
   398  0000A0                     D_TMR0_Enable@enable:
   399                           	opt stack 0
   400  0000A0                     ___lwdiv@dividend:
   401                           	opt stack 0
   402  0000A0                     strcmp@s1:
   403                           	opt stack 0
   404  0000A0                     ___aldiv@dividend:
   405                           	opt stack 0
   406  0000A0                     commandAndMessage@door:
   407                           	opt stack 0
   408                           
   409                           ; 10 bytes @ 0x0
   410  0000A0                     	ds	1
   411  0000A1                     putch@data:
   412                           	opt stack 0
   413                           
   414                           ; 1 bytes @ 0x1
   415  0000A1                     	ds	1
   416  0000A2                     ___lwdiv@divisor:
   417                           	opt stack 0
   418  0000A2                     strcmp@s2:
   419                           	opt stack 0
   420                           
   421                           ; 2 bytes @ 0x2
   422  0000A2                     	ds	2
   423  0000A4                     ??_strcmp:
   424  0000A4                     C_DOOR_ReadSensors@d:
   425                           	opt stack 0
   426  0000A4                     ___lwdiv@quotient:
   427                           	opt stack 0
   428  0000A4                     ___aldiv@divisor:
   429                           	opt stack 0
   430                           
   431                           ; 4 bytes @ 0x4
   432  0000A4                     	ds	1
   433  0000A5                     strcmp@r:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x5
   437  0000A5                     	ds	1
   438  0000A6                     ___lwdiv@counter:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x6
   442  0000A6                     	ds	1
   443  0000A7                     ?_printf:
   444                           	opt stack 0
   445  0000A7                     printf@f:
   446                           	opt stack 0
   447                           
   448                           ; 3 bytes @ 0x7
   449  0000A7                     	ds	1
   450  0000A8                     ___aldiv@counter:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x8
   454  0000A8                     	ds	1
   455  0000A9                     ___aldiv@sign:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x9
   459  0000A9                     	ds	1
   460  0000AA                     printf@flag:
   461                           	opt stack 0
   462  0000AA                     commandAndMessage@com:
   463                           	opt stack 0
   464  0000AA                     ___aldiv@quotient:
   465                           	opt stack 0
   466                           
   467                           ; 4 bytes @ 0xA
   468  0000AA                     	ds	1
   469  0000AB                     printf@ap:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0xB
   473  0000AB                     	ds	1
   474  0000AC                     commandAndMessage@mes:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0xC
   478  0000AC                     	ds	1
   479  0000AD                     printf@idx:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0xD
   483  0000AD                     	ds	1
   484  0000AE                     D_UART_Init@name:
   485                           	opt stack 0
   486  0000AE                     printf@val:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0xE
   490  0000AE                     	ds	2
   491  0000B0                     printf@prec:
   492                           	opt stack 0
   493  0000B0                     D_UART_Init@baud:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x10
   497  0000B0                     	ds	1
   498  0000B1                     printf@c:
   499                           	opt stack 0
   500                           
   501                           ; 1 bytes @ 0x11
   502  0000B1                     	ds	1
   503  0000B2                     D_UART_Init@interrupts:
   504                           	opt stack 0
   505  0000B2                     D_UART_Write@command:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x12
   509  0000B2                     	ds	1
   510  0000B3                     _D_UART_Init$1494:
   511                           	opt stack 0
   512                           
   513                           ; 4 bytes @ 0x13
   514  0000B3                     	ds	1
   515  0000B4                     D_UART_Write@data:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x14
   519  0000B4                     	ds	2
   520  0000B6                     ??_D_UART_Write:
   521                           
   522                           ; 1 bytes @ 0x16
   523  0000B6                     	ds	1
   524  0000B7                     
   525                           ; 1 bytes @ 0x17
   526  0000B7                     	ds	2
   527  0000B9                     C_DOOR_SendStates@com:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x19
   531  0000B9                     	ds	3
   532  0000BC                     C_DOOR_SendStates@mes:
   533                           	opt stack 0
   534                           
   535                           ; 2 bytes @ 0x1C
   536  0000BC                     	ds	2
   537  0000BE                     C_DOOR_SendStates@d:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x1E
   541  0000BE                     	ds	1
   542  0000BF                     ??_main:
   543                           
   544                           ; 1 bytes @ 0x1F
   545  0000BF                     	ds	2
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	cstackCOMRAM
   556  000001                     __pcstackCOMRAM:
   557                           	opt stack 0
   558  000001                     ??_HighISR:
   559  000001                     
   560                           ; 1 bytes @ 0x0
   561  000001                     	ds	18
   562  000013                     ?i1___lwdiv:
   563                           	opt stack 0
   564  000013                     i1writeByte@data:
   565                           	opt stack 0
   566  000013                     i1___lwdiv@dividend:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x12
   570  000013                     	ds	1
   571  000014                     i1putch@data:
   572                           	opt stack 0
   573                           
   574                           ; 1 bytes @ 0x13
   575  000014                     	ds	1
   576  000015                     i1___lwdiv@divisor:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x14
   580  000015                     	ds	2
   581  000017                     i1___lwdiv@quotient:
   582                           	opt stack 0
   583                           
   584                           ; 2 bytes @ 0x16
   585  000017                     	ds	2
   586  000019                     i1___lwdiv@counter:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x18
   590  000019                     	ds	1
   591  00001A                     ?i1_printf:
   592                           	opt stack 0
   593  00001A                     i1printf@f:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x19
   597  00001A                     	ds	5
   598  00001F                     i1printf@flag:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x1E
   602  00001F                     	ds	1
   603  000020                     i1printf@ap:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x1F
   607  000020                     	ds	2
   608  000022                     i1printf@idx:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x21
   612  000022                     	ds	1
   613  000023                     i1printf@val:
   614                           	opt stack 0
   615                           
   616                           ; 2 bytes @ 0x22
   617  000023                     	ds	2
   618  000025                     i1printf@prec:
   619                           	opt stack 0
   620                           
   621                           ; 1 bytes @ 0x24
   622  000025                     	ds	1
   623  000026                     i1printf@c:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x25
   627  000026                     	ds	1
   628  000027                     fillDataBuffer@data:
   629                           	opt stack 0
   630                           
   631                           ; 1 bytes @ 0x26
   632  000027                     	ds	1
   633  000028                     ??_LowISR:
   634                           
   635                           ; 1 bytes @ 0x27
   636  000028                     	ds	21
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           postdec1	equ	0xFE5
   644                           fsr1l	equ	0xFE1
   645                           
   646 ;;
   647 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   648 ;;
   649 ;; *************** function _main *****************
   650 ;; Defined at:
   651 ;;		line 16 in file "main.c"
   652 ;; Parameters:    Size  Location     Type
   653 ;;		None
   654 ;; Auto vars:     Size  Location     Type
   655 ;;		None
   656 ;; Return value:  Size  Location     Type
   657 ;;                  1    wreg      void 
   658 ;; Registers used:
   659 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   665 ;;      Params:         0       0       0       0       0       0       0       0       0
   666 ;;      Locals:         0       0       0       0       0       0       0       0       0
   667 ;;      Temps:          0       2       0       0       0       0       0       0       0
   668 ;;      Totals:         0       2       0       0       0       0       0       0       0
   669 ;;Total ram usage:        2 bytes
   670 ;; Hardware stack levels required when called:   12
   671 ;; This function calls:
   672 ;;		_C_DOOR_Init
   673 ;;		_C_DOOR_LockAll
   674 ;;		_C_DOOR_ReadSensors
   675 ;;		_C_DOOR_SendStates
   676 ;;		_C_DOOR_UnlockAll
   677 ;;		_D_PORT_Init
   678 ;;		_D_TMR0_Enable
   679 ;;		_D_TMR0_Init
   680 ;;		_D_UART_Enable
   681 ;;		_D_UART_Init
   682 ;;		_D_UART_Read
   683 ;;		_D_UART_Write
   684 ;;		_strcmp
   685 ;; This function is called by:
   686 ;;		Startup code after reset
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           	psect	text0
   691  000E4E                     __ptext0:
   692                           	opt stack 0
   693  000E4E                     _main:
   694                           	opt stack 19
   695                           
   696                           ;main.c: 18: D_PORT_Init();
   697                           
   698                           ;incstack = 0
   699  000E4E  EC80  F00A         	call	_D_PORT_Init	;wreg free
   700                           
   701                           ;main.c: 22: D_UART_Init("P", 9600, 1);
   702  000E52  0E2F               	movlw	low STR_8
   703  000E54  0100               	movlb	0	; () banked
   704  000E56  6FAE               	movwf	D_UART_Init@name& (0+255),b
   705  000E58  0E08               	movlw	high STR_8
   706  000E5A  6FAF               	movwf	(D_UART_Init@name+1)& (0+255),b
   707  000E5C  0E25               	movlw	37
   708  000E5E  6FB1               	movwf	(D_UART_Init@baud+1)& (0+255),b
   709  000E60  0E80               	movlw	128
   710  000E62  6FB0               	movwf	D_UART_Init@baud& (0+255),b
   711  000E64  0E01               	movlw	1
   712  000E66  6FB2               	movwf	D_UART_Init@interrupts& (0+255),b
   713  000E68  EC60  F008         	call	_D_UART_Init	;wreg free
   714                           
   715                           ;main.c: 23: D_UART_Enable(1);
   716  000E6C  0E01               	movlw	1
   717  000E6E  EC5C  F00A         	call	_D_UART_Enable
   718                           
   719                           ;main.c: 26: D_TMR0_Init();
   720  000E72  EC6E  F00A         	call	_D_TMR0_Init	;wreg free
   721                           
   722                           ;main.c: 29: C_DOOR_Init();
   723  000E76  EC3A  F006         	call	_C_DOOR_Init	;wreg free
   724                           
   725                           ;main.c: 30: C_DOOR_UnlockAll();
   726  000E7A  EC99  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   727                           
   728                           ;main.c: 32: _delay((unsigned long)((200)*(16000000/4000.0)));
   729  000E7E  0E05               	movlw	5
   730  000E80  0100               	movlb	0	; () banked
   731  000E82  6FC0               	movwf	(??_main+1)& (0+255),b
   732  000E84  0E0F               	movlw	15
   733  000E86  6FBF               	movwf	??_main& (0+255),b
   734  000E88  0EF1               	movlw	241
   735  000E8A                     u1457:
   736  000E8A  2EE8               	decfsz	wreg,f,c
   737  000E8C  D7FE               	bra	u1457
   738  000E8E  2FBF               	decfsz	??_main& (0+255),f,b
   739  000E90  D7FC               	bra	u1457
   740  000E92  2FC0               	decfsz	(??_main+1)& (0+255),f,b
   741  000E94  D7FA               	bra	u1457
   742                           
   743                           ;main.c: 35: D_UART_Write("I", "Start");
   744  000E96  0E2B               	movlw	low STR_9
   745  000E98  0100               	movlb	0	; () banked
   746  000E9A  6FB2               	movwf	D_UART_Write@command& (0+255),b
   747  000E9C  0E08               	movlw	high STR_9
   748  000E9E  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
   749  000EA0  0E1A               	movlw	low STR_10
   750  000EA2  6FB4               	movwf	D_UART_Write@data& (0+255),b
   751  000EA4  0E08               	movlw	high STR_10
   752  000EA6  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
   753  000EA8  ECB7  F006         	call	_D_UART_Write	;wreg free
   754                           
   755                           ;main.c: 36: D_TMR0_Enable(1);
   756  000EAC  0E01               	movlw	1
   757  000EAE  EC8F  F00A         	call	_D_TMR0_Enable
   758  000EB2                     
   759                           ;main.c: 40: if (readReady) {
   760  000EB2  0100               	movlb	0	; () banked
   761  000EB4  519F               	movf	_readReady& (0+255),w,b
   762  000EB6  B4D8               	btfsc	status,2,c
   763  000EB8  D02D               	goto	l240
   764                           
   765                           ; BSR set to: 0
   766                           ;main.c: 41: readReady = 0;
   767  000EBA  0E00               	movlw	0
   768  000EBC  6F9F               	movwf	_readReady& (0+255),b
   769                           
   770                           ; BSR set to: 0
   771                           ;main.c: 42: read = D_UART_Read();
   772  000EBE  EC45  F00A         	call	_D_UART_Read	;wreg free
   773  000EC2  EE20  F092         	lfsr	2,_read
   774  000EC6  0E05               	movlw	5
   775  000EC8                     u1401:
   776  000EC8  CFEB FFDB          	movff	plusw0,plusw2
   777  000ECC  06E8               	decf	wreg,f,c
   778  000ECE  E2FC               	bc	u1401
   779                           
   780                           ;main.c: 43: if (strcmp(read.command, "L") == 0) {
   781  000ED0  C094  F0A0         	movff	_read+2,strcmp@s1
   782  000ED4  C095  F0A1         	movff	_read+3,strcmp@s1+1
   783  000ED8  0E2D               	movlw	low STR_11
   784  000EDA  0100               	movlb	0	; () banked
   785  000EDC  6FA2               	movwf	strcmp@s2& (0+255),b
   786  000EDE  0E08               	movlw	high STR_11
   787  000EE0  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   788  000EE2  EC1E  F00A         	call	_strcmp	;wreg free
   789  000EE6  0100               	movlb	0	; () banked
   790  000EE8  51A0               	movf	?_strcmp& (0+255),w,b
   791  000EEA  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   792  000EEC  B4D8               	btfsc	status,2,c
   793                           
   794                           ; BSR set to: 0
   795                           ;main.c: 44: C_DOOR_LockAll();
   796  000EEE  ECAE  F00A         	call	_C_DOOR_LockAll	;wreg free
   797                           
   798                           ;main.c: 45: }
   799                           ;main.c: 46: if (strcmp(read.command, "U") == 0) {
   800  000EF2  C094  F0A0         	movff	_read+2,strcmp@s1
   801  000EF6  C095  F0A1         	movff	_read+3,strcmp@s1+1
   802  000EFA  0E31               	movlw	low STR_12
   803  000EFC  0100               	movlb	0	; () banked
   804  000EFE  6FA2               	movwf	strcmp@s2& (0+255),b
   805  000F00  0E08               	movlw	high STR_12
   806  000F02  6FA3               	movwf	(strcmp@s2+1)& (0+255),b
   807  000F04  EC1E  F00A         	call	_strcmp	;wreg free
   808  000F08  0100               	movlb	0	; () banked
   809  000F0A  51A0               	movf	?_strcmp& (0+255),w,b
   810  000F0C  11A1               	iorwf	(?_strcmp+1)& (0+255),w,b
   811  000F0E  B4D8               	btfsc	status,2,c
   812                           
   813                           ; BSR set to: 0
   814                           ;main.c: 47: C_DOOR_UnlockAll();
   815  000F10  EC99  F00A         	call	_C_DOOR_UnlockAll	;wreg free
   816  000F14                     l240:
   817                           
   818                           ;main.c: 48: }
   819                           ;main.c: 49: }
   820                           ;main.c: 52: if (tick) {
   821  000F14  0100               	movlb	0	; () banked
   822  000F16  519E               	movf	_tick& (0+255),w,b
   823  000F18  B4D8               	btfsc	status,2,c
   824  000F1A  D7CB               	goto	l237
   825                           
   826                           ; BSR set to: 0
   827                           ;main.c: 53: tick = 0;
   828  000F1C  0E00               	movlw	0
   829  000F1E  6F9E               	movwf	_tick& (0+255),b
   830                           
   831                           ; BSR set to: 0
   832                           ;main.c: 56: C_DOOR_ReadSensors();
   833  000F20  EC02  F009         	call	_C_DOOR_ReadSensors	;wreg free
   834                           
   835                           ;main.c: 59: C_DOOR_SendStates();
   836  000F24  ECFC  F007         	call	_C_DOOR_SendStates	;wreg free
   837  000F28  D7C4               	goto	l237
   838  000F2A                     __end_of_main:
   839                           	opt stack 0
   840                           tblptru	equ	0xFF8
   841                           tblptrh	equ	0xFF7
   842                           tblptrl	equ	0xFF6
   843                           tablat	equ	0xFF5
   844                           postinc0	equ	0xFEE
   845                           plusw0	equ	0xFEB
   846                           wreg	equ	0xFE8
   847                           postdec1	equ	0xFE5
   848                           fsr1l	equ	0xFE1
   849                           plusw2	equ	0xFDB
   850                           status	equ	0xFD8
   851                           
   852 ;; *************** function _strcmp *****************
   853 ;; Defined at:
   854 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
   857 ;;		 -> readBuffer(166), 
   858 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
   859 ;;		 -> STR_12(2), STR_11(2), 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  r               1    5[BANK0 ] char 
   862 ;; Return value:  Size  Location     Type
   863 ;;                  2    0[BANK0 ] int 
   864 ;; Registers used:
   865 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   871 ;;      Params:         0       4       0       0       0       0       0       0       0
   872 ;;      Locals:         0       1       0       0       0       0       0       0       0
   873 ;;      Temps:          0       1       0       0       0       0       0       0       0
   874 ;;      Totals:         0       6       0       0       0       0       0       0       0
   875 ;;Total ram usage:        6 bytes
   876 ;; Hardware stack levels used:    1
   877 ;; Hardware stack levels required when called:    7
   878 ;; This function calls:
   879 ;;		Nothing
   880 ;; This function is called by:
   881 ;;		_main
   882 ;; This function uses a non-reentrant model
   883 ;;
   884                           
   885                           	psect	text1
   886  00143C                     __ptext1:
   887                           	opt stack 0
   888  00143C                     _strcmp:
   889                           	opt stack 23
   890                           
   891                           ;incstack = 0
   892  00143C  D005               	goto	l825
   893  00143E  0100               	movlb	0	; () banked
   894  001440  4BA0               	infsnz	strcmp@s1& (0+255),f,b
   895  001442  2BA1               	incf	(strcmp@s1+1)& (0+255),f,b
   896  001444  4BA2               	infsnz	strcmp@s2& (0+255),f,b
   897  001446  2BA3               	incf	(strcmp@s2+1)& (0+255),f,b
   898  001448                     l825:
   899                           
   900                           ; BSR set to: 0
   901  001448  C0A0  FFD9         	movff	strcmp@s1,fsr2l
   902  00144C  C0A1  FFDA         	movff	strcmp@s1+1,fsr2h
   903  001450  50DF               	movf	indf2,w,c
   904  001452  0100               	movlb	0	; () banked
   905  001454  6FA4               	movwf	??_strcmp& (0+255),b
   906  001456  C0A2  FFF6         	movff	strcmp@s2,tblptrl
   907  00145A  C0A3  FFF7         	movff	strcmp@s2+1,tblptrh
   908  00145E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
   909  00145E  6AF8               	clrf	tblptru,c
   910  001460                     	endif
   911  001460                     	if	0	;tblptru may be non-zero
   912  001460                     	endif
   913  001460  0008               	tblrd		*
   914  001462  50F5               	movf	tablat,w,c
   915  001464  0800               	sublw	0
   916  001466  25A4               	addwf	??_strcmp& (0+255),w,b
   917  001468  6FA5               	movwf	strcmp@r& (0+255),b
   918  00146A  51A5               	movf	strcmp@r& (0+255),w,b
   919  00146C  A4D8               	btfss	status,2,c
   920  00146E  D007               	goto	u1290
   921                           
   922                           ; BSR set to: 0
   923  001470  C0A0  FFD9         	movff	strcmp@s1,fsr2l
   924  001474  C0A1  FFDA         	movff	strcmp@s1+1,fsr2h
   925  001478  50DF               	movf	indf2,w,c
   926  00147A  A4D8               	btfss	status,2,c
   927  00147C  D7E0               	goto	l826
   928  00147E                     u1290:
   929                           
   930                           ; BSR set to: 0
   931                           
   932                           ; BSR set to: 0
   933                           
   934                           ; BSR set to: 0
   935  00147E  51A5               	movf	strcmp@r& (0+255),w,b
   936  001480  6FA0               	movwf	?_strcmp& (0+255),b
   937  001482  6BA1               	clrf	(?_strcmp+1)& (0+255),b
   938  001484  BFA0               	btfsc	?_strcmp& (0+255),7,b
   939  001486  07A1               	decf	(?_strcmp+1)& (0+255),f,b
   940  001488  0012               	return	
   941  00148A                     __end_of_strcmp:
   942                           	opt stack 0
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           plusw0	equ	0xFEB
   949                           wreg	equ	0xFE8
   950                           postdec1	equ	0xFE5
   951                           fsr1l	equ	0xFE1
   952                           indf2	equ	0xFDF
   953                           plusw2	equ	0xFDB
   954                           fsr2h	equ	0xFDA
   955                           fsr2l	equ	0xFD9
   956                           status	equ	0xFD8
   957                           
   958 ;; *************** function _D_UART_Read *****************
   959 ;; Defined at:
   960 ;;		line 237 in file "Drivers/UART_Driver.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  6    0[BANK0 ] struct .
   967 ;; Registers used:
   968 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   974 ;;      Params:         0       6       0       0       0       0       0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0
   976 ;;      Temps:          0       0       0       0       0       0       0       0       0
   977 ;;      Totals:         0       6       0       0       0       0       0       0       0
   978 ;;Total ram usage:        6 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:    7
   981 ;; This function calls:
   982 ;;		Nothing
   983 ;; This function is called by:
   984 ;;		_main
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text2
   989  00148A                     __ptext2:
   990                           	opt stack 0
   991  00148A                     _D_UART_Read:
   992                           	opt stack 23
   993                           
   994                           ;UART_Driver.c: 238: readData.sender = readBuffer.sender;
   995                           
   996                           ; BSR set to: 0
   997                           ;incstack = 0
   998  00148A  0E0B               	movlw	low (_readBuffer+11)
   999  00148C  0100               	movlb	0	; () banked
  1000  00148E  6F98               	movwf	_readData& (0+255),b
  1001  001490  0E01               	movlw	high (_readBuffer+11)
  1002  001492  6F99               	movwf	(_readData+1)& (0+255),b
  1003                           
  1004                           ;UART_Driver.c: 239: readData.command = readBuffer.command;
  1005  001494  0E3E               	movlw	low (_readBuffer+62)
  1006  001496  6F9A               	movwf	(_readData+2)& (0+255),b
  1007  001498  0E01               	movlw	high (_readBuffer+62)
  1008  00149A  6F9B               	movwf	(_readData+3)& (0+255),b
  1009                           
  1010                           ;UART_Driver.c: 240: readData.message = readBuffer.message;
  1011  00149C  0E71               	movlw	low (_readBuffer+113)
  1012  00149E  6F9C               	movwf	(_readData+4)& (0+255),b
  1013  0014A0  0E01               	movlw	high (_readBuffer+113)
  1014  0014A2  6F9D               	movwf	(_readData+5)& (0+255),b
  1015                           
  1016                           ; BSR set to: 0
  1017                           ;UART_Driver.c: 241: return readData;
  1018  0014A4  EE20  F098         	lfsr	2,_readData
  1019  0014A8  EE00  F0A0         	lfsr	0,?_D_UART_Read
  1020  0014AC  0E05               	movlw	5
  1021  0014AE                     u1271:
  1022  0014AE  CFDB FFEB          	movff	plusw2,plusw0
  1023  0014B2  06E8               	decf	wreg,f,c
  1024  0014B4  E2FC               	bc	u1271
  1025  0014B6  0012               	return	
  1026  0014B8                     __end_of_D_UART_Read:
  1027                           	opt stack 0
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           postinc0	equ	0xFEE
  1033                           plusw0	equ	0xFEB
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           indf2	equ	0xFDF
  1038                           plusw2	equ	0xFDB
  1039                           fsr2h	equ	0xFDA
  1040                           fsr2l	equ	0xFD9
  1041                           status	equ	0xFD8
  1042                           
  1043 ;; *************** function _D_UART_Init *****************
  1044 ;; Defined at:
  1045 ;;		line 182 in file "Drivers/UART_Driver.c"
  1046 ;; Parameters:    Size  Location     Type
  1047 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1048 ;;		 -> STR_8(2), 
  1049 ;;  baud            2   16[BANK0 ] unsigned int 
  1050 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;		None
  1053 ;; Return value:  Size  Location     Type
  1054 ;;                  1    wreg      void 
  1055 ;; Registers used:
  1056 ;;		wreg, status,2, status,0, cstack
  1057 ;; Tracked objects:
  1058 ;;		On entry : 0/0
  1059 ;;		On exit  : 0/0
  1060 ;;		Unchanged: 0/0
  1061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1062 ;;      Params:         0       5       0       0       0       0       0       0       0
  1063 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1065 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1066 ;;Total ram usage:        9 bytes
  1067 ;; Hardware stack levels used:    1
  1068 ;; Hardware stack levels required when called:    8
  1069 ;; This function calls:
  1070 ;;		_D_UART_Enable
  1071 ;;		___aldiv
  1072 ;; This function is called by:
  1073 ;;		_main
  1074 ;; This function uses a non-reentrant model
  1075 ;;
  1076                           
  1077                           	psect	text3
  1078  0010C0                     __ptext3:
  1079                           	opt stack 0
  1080  0010C0                     _D_UART_Init:
  1081                           	opt stack 22
  1082                           
  1083                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;incstack = 0
  1087  0010C0  9E94               	bcf	3988,7,c	;volatile
  1088                           
  1089                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1090  0010C2  8C94               	bsf	3988,6,c	;volatile
  1091                           
  1092                           ;UART_Driver.c: 188: deviceName = name;
  1093  0010C4  C0AE  F0C1         	movff	D_UART_Init@name,_deviceName
  1094  0010C8  C0AF  F0C2         	movff	D_UART_Init@name+1,_deviceName+1
  1095  0010CC  0100               	movlb	0	; () banked
  1096  0010CE  51C1               	movf	_deviceName& (0+255),w,b
  1097  0010D0  11C2               	iorwf	(_deviceName+1)& (0+255),w,b
  1098  0010D2  A4D8               	btfss	status,2,c
  1099  0010D4  0E00               	movlw	low (__mediumconst shr (0+16))
  1100  0010D6  6FC3               	movwf	(_deviceName+2)& (0+255),b
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;UART_Driver.c: 189: readReady = 0;
  1104  0010D8  0E00               	movlw	0
  1105  0010DA  6F9F               	movwf	_readReady& (0+255),b
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1109  0010DC  0E00               	movlw	0
  1110  0010DE  EC5C  F00A         	call	_D_UART_Enable
  1111                           
  1112                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1113  0010E2  9CAC               	bcf	4012,6,c	;volatile
  1114                           
  1115                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1116  0010E4  98AC               	bcf	4012,4,c	;volatile
  1117                           
  1118                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1119  0010E6  94AC               	bcf	4012,2,c	;volatile
  1120                           
  1121                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1122  0010E8  9CAB               	bcf	4011,6,c	;volatile
  1123                           
  1124                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1125  0010EA  9AB8               	bcf	4024,5,c	;volatile
  1126                           
  1127                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1128  0010EC  98B8               	bcf	4024,4,c	;volatile
  1129                           
  1130                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1131  0010EE  96B8               	bcf	4024,3,c	;volatile
  1132                           
  1133                           ;UART_Driver.c: 210: SPBRG = ((16000000/baud)/64)-1;
  1134  0010F0  C0B0  F0A4         	movff	D_UART_Init@baud,___aldiv@divisor
  1135  0010F4  C0B1  F0A5         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1136  0010F8  0100               	movlb	0	; () banked
  1137  0010FA  6BA6               	clrf	(___aldiv@divisor+2)& (0+255),b
  1138  0010FC  6BA7               	clrf	(___aldiv@divisor+3)& (0+255),b
  1139  0010FE  0E00               	movlw	0
  1140  001100  6FA0               	movwf	___aldiv@dividend& (0+255),b
  1141  001102  0E24               	movlw	36
  1142  001104  6FA1               	movwf	(___aldiv@dividend+1)& (0+255),b
  1143  001106  0EF4               	movlw	244
  1144  001108  6FA2               	movwf	(___aldiv@dividend+2)& (0+255),b
  1145  00110A  0E00               	movlw	0
  1146  00110C  6FA3               	movwf	(___aldiv@dividend+3)& (0+255),b
  1147  00110E  EC95  F007         	call	___aldiv	;wreg free
  1148  001112  C0A0  F0B3         	movff	?___aldiv,_D_UART_Init$1494
  1149  001116  C0A1  F0B4         	movff	?___aldiv+1,_D_UART_Init$1494+1
  1150  00111A  C0A2  F0B5         	movff	?___aldiv+2,_D_UART_Init$1494+2
  1151  00111E  C0A3  F0B6         	movff	?___aldiv+3,_D_UART_Init$1494+3
  1152                           
  1153                           ;UART_Driver.c: 210: SPBRG = ((16000000/baud)/64)-1;
  1154  001122  C0B3  F0A0         	movff	_D_UART_Init$1494,___aldiv@dividend
  1155  001126  C0B4  F0A1         	movff	_D_UART_Init$1494+1,___aldiv@dividend+1
  1156  00112A  C0B5  F0A2         	movff	_D_UART_Init$1494+2,___aldiv@dividend+2
  1157  00112E  C0B6  F0A3         	movff	_D_UART_Init$1494+3,___aldiv@dividend+3
  1158  001132  0E40               	movlw	64
  1159  001134  0100               	movlb	0	; () banked
  1160  001136  6FA4               	movwf	___aldiv@divisor& (0+255),b
  1161  001138  0E00               	movlw	0
  1162  00113A  6FA5               	movwf	(___aldiv@divisor+1)& (0+255),b
  1163  00113C  0E00               	movlw	0
  1164  00113E  6FA6               	movwf	(___aldiv@divisor+2)& (0+255),b
  1165  001140  0E00               	movlw	0
  1166  001142  6FA7               	movwf	(___aldiv@divisor+3)& (0+255),b
  1167  001144  EC95  F007         	call	___aldiv	;wreg free
  1168  001148  0100               	movlb	0	; () banked
  1169  00114A  05A0               	decf	?___aldiv& (0+255),w,b
  1170  00114C  6EAF               	movwf	4015,c	;volatile
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;UART_Driver.c: 213: if (interrupts) {
  1174  00114E  51B2               	movf	D_UART_Init@interrupts& (0+255),w,b
  1175  001150  B4D8               	btfsc	status,2,c
  1176  001152  0012               	return	
  1177                           
  1178                           ; BSR set to: 0
  1179                           ;UART_Driver.c: 214: RCONbits.IPEN = 1;
  1180  001154  8ED0               	bsf	4048,7,c	;volatile
  1181                           
  1182                           ;UART_Driver.c: 215: INTCONbits.GIEH = 1;
  1183  001156  8EF2               	bsf	intcon,7,c	;volatile
  1184                           
  1185                           ;UART_Driver.c: 216: INTCONbits.GIEL = 1;
  1186  001158  8CF2               	bsf	intcon,6,c	;volatile
  1187                           
  1188                           ;UART_Driver.c: 217: PIR1bits.RCIF = 0;
  1189  00115A  9A9E               	bcf	3998,5,c	;volatile
  1190                           
  1191                           ;UART_Driver.c: 218: IPR1bits.RCIP = 0;
  1192  00115C  9A9F               	bcf	3999,5,c	;volatile
  1193                           
  1194                           ;UART_Driver.c: 219: PIE1bits.RCIE = 1;
  1195  00115E  8A9D               	bsf	3997,5,c	;volatile
  1196  001160  0012               	return	
  1197  001162                     __end_of_D_UART_Init:
  1198                           	opt stack 0
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           intcon	equ	0xFF2
  1204                           postinc0	equ	0xFEE
  1205                           plusw0	equ	0xFEB
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           plusw2	equ	0xFDB
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function ___aldiv *****************
  1216 ;; Defined at:
  1217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  dividend        4    0[BANK0 ] long 
  1220 ;;  divisor         4    4[BANK0 ] long 
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;  quotient        4   10[BANK0 ] long 
  1223 ;;  sign            1    9[BANK0 ] unsigned char 
  1224 ;;  counter         1    8[BANK0 ] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  4    0[BANK0 ] long 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         0       8       0       0       0       0       0       0       0
  1235 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1238 ;;Total ram usage:       14 bytes
  1239 ;; Hardware stack levels used:    1
  1240 ;; Hardware stack levels required when called:    7
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_D_UART_Init
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text4
  1249  000F2A                     __ptext4:
  1250                           	opt stack 0
  1251  000F2A                     ___aldiv:
  1252                           	opt stack 22
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;incstack = 0
  1256  000F2A  0E00               	movlw	0
  1257  000F2C  0100               	movlb	0	; () banked
  1258  000F2E  6FA9               	movwf	___aldiv@sign& (0+255),b
  1259                           
  1260                           ; BSR set to: 0
  1261  000F30  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1262  000F32  D00A               	goto	l333
  1263                           
  1264                           ; BSR set to: 0
  1265  000F34  1FA7               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1266  000F36  1FA6               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1267  000F38  1FA5               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1268  000F3A  6DA4               	negf	___aldiv@divisor& (0+255),b
  1269  000F3C  0E00               	movlw	0
  1270  000F3E  23A5               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1271  000F40  23A6               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1272  000F42  23A7               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1273                           
  1274                           ; BSR set to: 0
  1275  000F44  0E01               	movlw	1
  1276  000F46  6FA9               	movwf	___aldiv@sign& (0+255),b
  1277  000F48                     l333:
  1278                           
  1279                           ; BSR set to: 0
  1280                           
  1281                           ; BSR set to: 0
  1282  000F48  AFA3               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1283  000F4A  D00A               	goto	l334
  1284                           
  1285                           ; BSR set to: 0
  1286  000F4C  1FA3               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1287  000F4E  1FA2               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1288  000F50  1FA1               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1289  000F52  6DA0               	negf	___aldiv@dividend& (0+255),b
  1290  000F54  0E00               	movlw	0
  1291  000F56  23A1               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1292  000F58  23A2               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1293  000F5A  23A3               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1294                           
  1295                           ; BSR set to: 0
  1296  000F5C  0E01               	movlw	1
  1297  000F5E  1BA9               	xorwf	___aldiv@sign& (0+255),f,b
  1298  000F60                     l334:
  1299                           
  1300                           ; BSR set to: 0
  1301                           
  1302                           ; BSR set to: 0
  1303  000F60  0E00               	movlw	0
  1304  000F62  6FAA               	movwf	___aldiv@quotient& (0+255),b
  1305  000F64  0E00               	movlw	0
  1306  000F66  6FAB               	movwf	(___aldiv@quotient+1)& (0+255),b
  1307  000F68  0E00               	movlw	0
  1308  000F6A  6FAC               	movwf	(___aldiv@quotient+2)& (0+255),b
  1309  000F6C  0E00               	movlw	0
  1310  000F6E  6FAD               	movwf	(___aldiv@quotient+3)& (0+255),b
  1311                           
  1312                           ; BSR set to: 0
  1313  000F70  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1314  000F72  11A5               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1315  000F74  11A6               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1316  000F76  11A7               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1317  000F78  B4D8               	btfsc	status,2,c
  1318  000F7A  D02A               	goto	l341
  1319                           
  1320                           ; BSR set to: 0
  1321  000F7C  0E01               	movlw	1
  1322  000F7E  6FA8               	movwf	___aldiv@counter& (0+255),b
  1323  000F80  D006               	goto	l336
  1324  000F82                     
  1325                           ; BSR set to: 0
  1326                           
  1327                           ; BSR set to: 0
  1328  000F82  90D8               	bcf	status,0,c
  1329  000F84  37A4               	rlcf	___aldiv@divisor& (0+255),f,b
  1330  000F86  37A5               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1331  000F88  37A6               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1332  000F8A  37A7               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1333  000F8C  2BA8               	incf	___aldiv@counter& (0+255),f,b
  1334  000F8E                     l336:
  1335                           
  1336                           ; BSR set to: 0
  1337                           
  1338                           ; BSR set to: 0
  1339  000F8E  AFA7               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1340  000F90  D7F8               	goto	l337
  1341  000F92                     u1040:
  1342                           
  1343                           ; BSR set to: 0
  1344                           
  1345                           ; BSR set to: 0
  1346                           
  1347                           ; BSR set to: 0
  1348  000F92  90D8               	bcf	status,0,c
  1349  000F94  37AA               	rlcf	___aldiv@quotient& (0+255),f,b
  1350  000F96  37AB               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  1351  000F98  37AC               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  1352  000F9A  37AD               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  1353                           
  1354                           ; BSR set to: 0
  1355  000F9C  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1356  000F9E  5DA0               	subwf	___aldiv@dividend& (0+255),w,b
  1357  000FA0  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1358  000FA2  59A1               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  1359  000FA4  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1360  000FA6  59A2               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  1361  000FA8  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1362  000FAA  59A3               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  1363  000FAC  A0D8               	btfss	status,0,c
  1364  000FAE  D009               	goto	l340
  1365                           
  1366                           ; BSR set to: 0
  1367  000FB0  51A4               	movf	___aldiv@divisor& (0+255),w,b
  1368  000FB2  5FA0               	subwf	___aldiv@dividend& (0+255),f,b
  1369  000FB4  51A5               	movf	(___aldiv@divisor+1)& (0+255),w,b
  1370  000FB6  5BA1               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  1371  000FB8  51A6               	movf	(___aldiv@divisor+2)& (0+255),w,b
  1372  000FBA  5BA2               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  1373  000FBC  51A7               	movf	(___aldiv@divisor+3)& (0+255),w,b
  1374  000FBE  5BA3               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  1375                           
  1376                           ; BSR set to: 0
  1377  000FC0  81AA               	bsf	___aldiv@quotient& (0+255),0,b
  1378  000FC2                     l340:
  1379                           
  1380                           ; BSR set to: 0
  1381                           
  1382                           ; BSR set to: 0
  1383  000FC2  90D8               	bcf	status,0,c
  1384  000FC4  33A7               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  1385  000FC6  33A6               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  1386  000FC8  33A5               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  1387  000FCA  33A4               	rrcf	___aldiv@divisor& (0+255),f,b
  1388                           
  1389                           ; BSR set to: 0
  1390  000FCC  2FA8               	decfsz	___aldiv@counter& (0+255),f,b
  1391  000FCE  D7E1               	goto	u1040
  1392  000FD0                     l341:
  1393                           
  1394                           ; BSR set to: 0
  1395                           
  1396                           ; BSR set to: 0
  1397                           
  1398                           ; BSR set to: 0
  1399  000FD0  51A9               	movf	___aldiv@sign& (0+255),w,b
  1400  000FD2  B4D8               	btfsc	status,2,c
  1401  000FD4  D008               	goto	l342
  1402                           
  1403                           ; BSR set to: 0
  1404  000FD6  1FAD               	comf	(___aldiv@quotient+3)& (0+255),f,b
  1405  000FD8  1FAC               	comf	(___aldiv@quotient+2)& (0+255),f,b
  1406  000FDA  1FAB               	comf	(___aldiv@quotient+1)& (0+255),f,b
  1407  000FDC  6DAA               	negf	___aldiv@quotient& (0+255),b
  1408  000FDE  0E00               	movlw	0
  1409  000FE0  23AB               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  1410  000FE2  23AC               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  1411  000FE4  23AD               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  1412  000FE6                     l342:
  1413                           
  1414                           ; BSR set to: 0
  1415                           
  1416                           ; BSR set to: 0
  1417  000FE6  C0AA  F0A0         	movff	___aldiv@quotient,?___aldiv
  1418  000FEA  C0AB  F0A1         	movff	___aldiv@quotient+1,?___aldiv+1
  1419  000FEE  C0AC  F0A2         	movff	___aldiv@quotient+2,?___aldiv+2
  1420  000FF2  C0AD  F0A3         	movff	___aldiv@quotient+3,?___aldiv+3
  1421  000FF6  0012               	return	
  1422  000FF8                     __end_of___aldiv:
  1423                           	opt stack 0
  1424                           tblptru	equ	0xFF8
  1425                           tblptrh	equ	0xFF7
  1426                           tblptrl	equ	0xFF6
  1427                           tablat	equ	0xFF5
  1428                           intcon	equ	0xFF2
  1429                           postinc0	equ	0xFEE
  1430                           plusw0	equ	0xFEB
  1431                           wreg	equ	0xFE8
  1432                           postdec1	equ	0xFE5
  1433                           fsr1l	equ	0xFE1
  1434                           indf2	equ	0xFDF
  1435                           plusw2	equ	0xFDB
  1436                           fsr2h	equ	0xFDA
  1437                           fsr2l	equ	0xFD9
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _D_UART_Enable *****************
  1441 ;; Defined at:
  1442 ;;		line 244 in file "Drivers/UART_Driver.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  enable          1    wreg     unsigned char 
  1445 ;; Auto vars:     Size  Location     Type
  1446 ;;  enable          1    0[BANK0 ] unsigned char 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  1    wreg      void 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1456 ;;      Params:         0       0       0       0       0       0       0       0       0
  1457 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1459 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1460 ;;Total ram usage:        1 bytes
  1461 ;; Hardware stack levels used:    1
  1462 ;; Hardware stack levels required when called:    7
  1463 ;; This function calls:
  1464 ;;		Nothing
  1465 ;; This function is called by:
  1466 ;;		_D_UART_Init
  1467 ;;		_main
  1468 ;; This function uses a non-reentrant model
  1469 ;;
  1470                           
  1471                           	psect	text5
  1472  0014B8                     __ptext5:
  1473                           	opt stack 0
  1474  0014B8                     _D_UART_Enable:
  1475                           	opt stack 22
  1476                           
  1477                           ; BSR set to: 0
  1478                           ;incstack = 0
  1479                           ;D_UART_Enable@enable stored from wreg
  1480  0014B8  0100               	movlb	0	; () banked
  1481  0014BA  6FA0               	movwf	D_UART_Enable@enable& (0+255),b
  1482                           
  1483                           ;UART_Driver.c: 245: if(enable) {
  1484  0014BC  0100               	movlb	0	; () banked
  1485  0014BE  51A0               	movf	D_UART_Enable@enable& (0+255),w,b
  1486  0014C0  B4D8               	btfsc	status,2,c
  1487  0014C2  D006               	goto	l167
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;UART_Driver.c: 246: TRISCbits.TRISC7 = 0;
  1491  0014C4  9E94               	bcf	3988,7,c	;volatile
  1492                           
  1493                           ;UART_Driver.c: 247: TRISCbits.TRISC6 = 1;
  1494  0014C6  8C94               	bsf	3988,6,c	;volatile
  1495                           
  1496                           ;UART_Driver.c: 248: TXSTAbits.TXEN = 1;
  1497  0014C8  8AAC               	bsf	4012,5,c	;volatile
  1498                           
  1499                           ;UART_Driver.c: 249: RCSTAbits.CREN = 1;
  1500  0014CA  88AB               	bsf	4011,4,c	;volatile
  1501                           
  1502                           ;UART_Driver.c: 250: RCSTAbits.SPEN = 1;
  1503  0014CC  8EAB               	bsf	4011,7,c	;volatile
  1504                           
  1505                           ;UART_Driver.c: 251: } else {
  1506  0014CE  0012               	return	
  1507  0014D0                     l167:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;UART_Driver.c: 252: TRISCbits.TRISC7 = 0;
  1511  0014D0  9E94               	bcf	3988,7,c	;volatile
  1512                           
  1513                           ;UART_Driver.c: 253: TRISCbits.TRISC6 = 0;
  1514  0014D2  9C94               	bcf	3988,6,c	;volatile
  1515                           
  1516                           ;UART_Driver.c: 254: TXSTAbits.TXEN = 0;
  1517  0014D4  9AAC               	bcf	4012,5,c	;volatile
  1518                           
  1519                           ;UART_Driver.c: 255: RCSTAbits.CREN = 0;
  1520  0014D6  98AB               	bcf	4011,4,c	;volatile
  1521                           
  1522                           ;UART_Driver.c: 256: RCSTAbits.SPEN = 0;
  1523  0014D8  9EAB               	bcf	4011,7,c	;volatile
  1524  0014DA  0012               	return	
  1525  0014DC                     __end_of_D_UART_Enable:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           intcon	equ	0xFF2
  1532                           postinc0	equ	0xFEE
  1533                           plusw0	equ	0xFEB
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1l	equ	0xFE1
  1537                           indf2	equ	0xFDF
  1538                           plusw2	equ	0xFDB
  1539                           fsr2h	equ	0xFDA
  1540                           fsr2l	equ	0xFD9
  1541                           status	equ	0xFD8
  1542                           
  1543 ;; *************** function _D_TMR0_Init *****************
  1544 ;; Defined at:
  1545 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1559 ;;      Params:         0       0       0       0       0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    8
  1566 ;; This function calls:
  1567 ;;		_D_TMR0_Enable
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           	psect	text6
  1574  0014DC                     __ptext6:
  1575                           	opt stack 0
  1576  0014DC                     _D_TMR0_Init:
  1577                           	opt stack 22
  1578                           
  1579                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;incstack = 0
  1583  0014DC  0E00               	movlw	0
  1584  0014DE  EC8F  F00A         	call	_D_TMR0_Enable
  1585                           
  1586                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  1587  0014E2  9CD5               	bcf	4053,6,c	;volatile
  1588                           
  1589                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  1590  0014E4  9AD5               	bcf	4053,5,c	;volatile
  1591                           
  1592                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  1593  0014E6  98D5               	bcf	4053,4,c	;volatile
  1594                           
  1595                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  1596  0014E8  96D5               	bcf	4053,3,c	;volatile
  1597                           
  1598                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  1599  0014EA  50D5               	movf	4053,w,c	;volatile
  1600  0014EC  0BF8               	andlw	-8
  1601  0014EE  0902               	iorlw	2
  1602  0014F0  6ED5               	movwf	4053,c	;volatile
  1603                           
  1604                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  1605  0014F2  8ED0               	bsf	4048,7,c	;volatile
  1606                           
  1607                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  1608  0014F4  8EF2               	bsf	intcon,7,c	;volatile
  1609                           
  1610                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  1611  0014F6  8CF2               	bsf	intcon,6,c	;volatile
  1612                           
  1613                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  1614  0014F8  94F2               	bcf	intcon,2,c	;volatile
  1615                           
  1616                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  1617  0014FA  84F1               	bsf	intcon2,2,c	;volatile
  1618                           
  1619                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  1620  0014FC  8AF2               	bsf	intcon,5,c	;volatile
  1621  0014FE  0012               	return		;funcret
  1622  001500                     __end_of_D_TMR0_Init:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           intcon	equ	0xFF2
  1629                           intcon2	equ	0xFF1
  1630                           postinc0	equ	0xFEE
  1631                           plusw0	equ	0xFEB
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           indf2	equ	0xFDF
  1636                           plusw2	equ	0xFDB
  1637                           fsr2h	equ	0xFDA
  1638                           fsr2l	equ	0xFD9
  1639                           status	equ	0xFD8
  1640                           
  1641 ;; *************** function _D_TMR0_Enable *****************
  1642 ;; Defined at:
  1643 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  enable          1    wreg     unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  enable          1    0[BANK0 ] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, status,2
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0
  1658 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1660 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1661 ;;Total ram usage:        1 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    7
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_D_TMR0_Init
  1668 ;;		_main
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text7
  1673  00151E                     __ptext7:
  1674                           	opt stack 0
  1675  00151E                     _D_TMR0_Enable:
  1676                           	opt stack 22
  1677                           
  1678                           ;incstack = 0
  1679                           ;D_TMR0_Enable@enable stored from wreg
  1680  00151E  0100               	movlb	0	; () banked
  1681  001520  6FA0               	movwf	D_TMR0_Enable@enable& (0+255),b
  1682                           
  1683                           ;TMR0_Driver.c: 54: if (enable) {
  1684  001522  0100               	movlb	0	; () banked
  1685  001524  51A0               	movf	D_TMR0_Enable@enable& (0+255),w,b
  1686  001526  B4D8               	btfsc	status,2,c
  1687  001528  D002               	goto	l194
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  1691  00152A  8ED5               	bsf	4053,7,c	;volatile
  1692                           
  1693                           ;TMR0_Driver.c: 56: } else {
  1694  00152C  0012               	return	
  1695  00152E                     l194:
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  1699  00152E  9ED5               	bcf	4053,7,c	;volatile
  1700  001530  0012               	return	
  1701  001532                     __end_of_D_TMR0_Enable:
  1702                           	opt stack 0
  1703                           tblptru	equ	0xFF8
  1704                           tblptrh	equ	0xFF7
  1705                           tblptrl	equ	0xFF6
  1706                           tablat	equ	0xFF5
  1707                           intcon	equ	0xFF2
  1708                           intcon2	equ	0xFF1
  1709                           postinc0	equ	0xFEE
  1710                           plusw0	equ	0xFEB
  1711                           wreg	equ	0xFE8
  1712                           postdec1	equ	0xFE5
  1713                           fsr1l	equ	0xFE1
  1714                           indf2	equ	0xFDF
  1715                           plusw2	equ	0xFDB
  1716                           fsr2h	equ	0xFDA
  1717                           fsr2l	equ	0xFD9
  1718                           status	equ	0xFD8
  1719                           
  1720 ;; *************** function _D_PORT_Init *****************
  1721 ;; Defined at:
  1722 ;;		line 32 in file "Drivers/PORT_Driver.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;		None
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;		None
  1727 ;; Return value:  Size  Location     Type
  1728 ;;                  1    wreg      void 
  1729 ;; Registers used:
  1730 ;;		wreg, status,2
  1731 ;; Tracked objects:
  1732 ;;		On entry : 0/0
  1733 ;;		On exit  : 0/0
  1734 ;;		Unchanged: 0/0
  1735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1736 ;;      Params:         0       0       0       0       0       0       0       0       0
  1737 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1738 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1739 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1740 ;;Total ram usage:        0 bytes
  1741 ;; Hardware stack levels used:    1
  1742 ;; Hardware stack levels required when called:    7
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;; This function uses a non-reentrant model
  1748 ;;
  1749                           
  1750                           	psect	text8
  1751  001500                     __ptext8:
  1752                           	opt stack 0
  1753  001500                     _D_PORT_Init:
  1754                           	opt stack 23
  1755                           
  1756                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  1757                           
  1758                           ; BSR set to: 0
  1759                           ;incstack = 0
  1760  001500  0E00               	movlw	0
  1761  001502  6E92               	movwf	3986,c	;volatile
  1762  001504  0E00               	movlw	0
  1763  001506  6E80               	movwf	3968,c	;volatile
  1764                           
  1765                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  1766  001508  0E00               	movlw	0
  1767  00150A  6E93               	movwf	3987,c	;volatile
  1768  00150C  0E00               	movlw	0
  1769  00150E  6E81               	movwf	3969,c	;volatile
  1770                           
  1771                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  1772  001510  0E00               	movlw	0
  1773  001512  6E94               	movwf	3988,c	;volatile
  1774  001514  0E00               	movlw	0
  1775  001516  6E82               	movwf	3970,c	;volatile
  1776                           
  1777                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  1778  001518  0E0F               	movlw	15
  1779  00151A  6EC1               	movwf	4033,c	;volatile
  1780  00151C  0012               	return		;funcret
  1781  00151E                     __end_of_D_PORT_Init:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           intcon	equ	0xFF2
  1788                           intcon2	equ	0xFF1
  1789                           postinc0	equ	0xFEE
  1790                           plusw0	equ	0xFEB
  1791                           wreg	equ	0xFE8
  1792                           postdec1	equ	0xFE5
  1793                           fsr1l	equ	0xFE1
  1794                           indf2	equ	0xFDF
  1795                           plusw2	equ	0xFDB
  1796                           fsr2h	equ	0xFDA
  1797                           fsr2l	equ	0xFD9
  1798                           status	equ	0xFD8
  1799                           
  1800 ;; *************** function _C_DOOR_UnlockAll *****************
  1801 ;; Defined at:
  1802 ;;		line 87 in file "Controllers/DOOR_Controller.c"
  1803 ;; Parameters:    Size  Location     Type
  1804 ;;		None
  1805 ;; Auto vars:     Size  Location     Type
  1806 ;;		None
  1807 ;; Return value:  Size  Location     Type
  1808 ;;                  1    wreg      void 
  1809 ;; Registers used:
  1810 ;;		wreg, fsr2l, fsr2h
  1811 ;; Tracked objects:
  1812 ;;		On entry : 0/0
  1813 ;;		On exit  : 0/0
  1814 ;;		Unchanged: 0/0
  1815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1816 ;;      Params:         0       0       0       0       0       0       0       0       0
  1817 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1818 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1819 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1820 ;;Total ram usage:        0 bytes
  1821 ;; Hardware stack levels used:    1
  1822 ;; Hardware stack levels required when called:    7
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text9
  1831  001532                     __ptext9:
  1832                           	opt stack 0
  1833  001532                     _C_DOOR_UnlockAll:
  1834                           	opt stack 23
  1835                           
  1836                           ;DOOR_Controller.c: 92: *doors[0].lock_port &= 0x3F;
  1837                           
  1838                           ;incstack = 0
  1839  001532  C062  FFD9         	movff	_doors+2,fsr2l
  1840  001536  C063  FFDA         	movff	_doors+3,fsr2h
  1841  00153A  0E3F               	movlw	63
  1842  00153C  16DF               	andwf	indf2,f,c
  1843  00153E  0012               	return		;funcret
  1844  001540                     __end_of_C_DOOR_UnlockAll:
  1845                           	opt stack 0
  1846                           tblptru	equ	0xFF8
  1847                           tblptrh	equ	0xFF7
  1848                           tblptrl	equ	0xFF6
  1849                           tablat	equ	0xFF5
  1850                           intcon	equ	0xFF2
  1851                           intcon2	equ	0xFF1
  1852                           postinc0	equ	0xFEE
  1853                           plusw0	equ	0xFEB
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1l	equ	0xFE1
  1857                           indf2	equ	0xFDF
  1858                           plusw2	equ	0xFDB
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _C_DOOR_SendStates *****************
  1864 ;; Defined at:
  1865 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  com             3   25[BANK0 ] unsigned char [3]
  1870 ;;  mes             2   28[BANK0 ] unsigned char [2]
  1871 ;;  d               1   30[BANK0 ] unsigned char 
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  1    wreg      void 
  1874 ;; Registers used:
  1875 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1881 ;;      Params:         0       0       0       0       0       0       0       0       0
  1882 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1883 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1884 ;;      Totals:         0       8       0       0       0       0       0       0       0
  1885 ;;Total ram usage:        8 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:   11
  1888 ;; This function calls:
  1889 ;;		_D_UART_Write
  1890 ;;		_commandAndMessage
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           	psect	text10
  1897  000FF8                     __ptext10:
  1898                           	opt stack 0
  1899  000FF8                     _C_DOOR_SendStates:
  1900                           	opt stack 19
  1901                           
  1902                           ;DOOR_Controller.c: 103: uint8_t d;
  1903                           ;DOOR_Controller.c: 104: for (d = 0; d < 5; d++) {
  1904                           
  1905                           ;incstack = 0
  1906  000FF8  0E00               	movlw	0
  1907  000FFA  0100               	movlb	0	; () banked
  1908  000FFC  6FBE               	movwf	C_DOOR_SendStates@d& (0+255),b
  1909  000FFE                     l1641:
  1910                           
  1911                           ; BSR set to: 0
  1912  000FFE  0E04               	movlw	4
  1913  001000  65BE               	cpfsgt	C_DOOR_SendStates@d& (0+255),b
  1914  001002  D001               	goto	l42
  1915  001004  0012               	return	
  1916  001006                     l42:
  1917                           
  1918                           ; BSR set to: 0
  1919                           ;DOOR_Controller.c: 105: if (doors[d].was_open != doors[d].is_open) {
  1920                           
  1921                           ; BSR set to: 0
  1922  001006  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1923  001008  0D0A               	mullw	10
  1924  00100A  0E06               	movlw	6
  1925  00100C  26F3               	addwf	prodl,f,c
  1926  00100E  0E00               	movlw	0
  1927  001010  22F4               	addwfc	prodh,f,c
  1928  001012  0E60               	movlw	low _doors
  1929  001014  24F3               	addwf	prodl,w,c
  1930  001016  6ED9               	movwf	fsr2l,c
  1931  001018  0E00               	movlw	high _doors
  1932  00101A  20F4               	addwfc	prodh,w,c
  1933  00101C  6EDA               	movwf	fsr2h,c
  1934  00101E  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1935  001020  0D0A               	mullw	10
  1936  001022  0E05               	movlw	5
  1937  001024  26F3               	addwf	prodl,f,c
  1938  001026  0E00               	movlw	0
  1939  001028  22F4               	addwfc	prodh,f,c
  1940  00102A  0E60               	movlw	low _doors
  1941  00102C  24F3               	addwf	prodl,w,c
  1942  00102E  6EE1               	movwf	fsr1l,c
  1943  001030  0E00               	movlw	high _doors
  1944  001032  20F4               	addwfc	prodh,w,c
  1945  001034  6EE2               	movwf	fsr1h,c
  1946  001036  50DE               	movf	postinc2,w,c
  1947  001038  18E6               	xorwf	postinc1,w,c
  1948  00103A  B4D8               	btfsc	status,2,c
  1949  00103C  D03F               	goto	l44
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;DOOR_Controller.c: 107: char com[3];
  1953                           ;DOOR_Controller.c: 108: char mes[2];
  1954                           ;DOOR_Controller.c: 109: commandAndMessage(doors[d], &com, &mes);
  1955  00103E  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1956  001040  0D0A               	mullw	10
  1957  001042  0E60               	movlw	low _doors
  1958  001044  24F3               	addwf	prodl,w,c
  1959  001046  6ED9               	movwf	fsr2l,c
  1960  001048  0E00               	movlw	high _doors
  1961  00104A  20F4               	addwfc	prodh,w,c
  1962  00104C  6EDA               	movwf	fsr2h,c
  1963  00104E  EE00  F0A0         	lfsr	0,commandAndMessage@door
  1964  001052  0E09               	movlw	9
  1965  001054                     u1141:
  1966  001054  CFDB FFEB          	movff	plusw2,plusw0
  1967  001058  06E8               	decf	wreg,f,c
  1968  00105A  E2FC               	bc	u1141
  1969  00105C  0EB9               	movlw	low C_DOOR_SendStates@com
  1970  00105E  6FAA               	movwf	commandAndMessage@com& (0+255),b
  1971  001060  0E00               	movlw	high C_DOOR_SendStates@com
  1972  001062  6FAB               	movwf	(commandAndMessage@com+1)& (0+255),b
  1973  001064  0EBC               	movlw	low C_DOOR_SendStates@mes
  1974  001066  6FAC               	movwf	commandAndMessage@mes& (0+255),b
  1975  001068  0E00               	movlw	high C_DOOR_SendStates@mes
  1976  00106A  6FAD               	movwf	(commandAndMessage@mes+1)& (0+255),b
  1977  00106C  ECF6  F009         	call	_commandAndMessage	;wreg free
  1978                           
  1979                           ;DOOR_Controller.c: 112: D_UART_Write(com, mes);
  1980  001070  0EB9               	movlw	low C_DOOR_SendStates@com
  1981  001072  0100               	movlb	0	; () banked
  1982  001074  6FB2               	movwf	D_UART_Write@command& (0+255),b
  1983  001076  0E00               	movlw	high C_DOOR_SendStates@com
  1984  001078  6FB3               	movwf	(D_UART_Write@command+1)& (0+255),b
  1985  00107A  0EBC               	movlw	low C_DOOR_SendStates@mes
  1986  00107C  6FB4               	movwf	D_UART_Write@data& (0+255),b
  1987  00107E  0E00               	movlw	high C_DOOR_SendStates@mes
  1988  001080  6FB5               	movwf	(D_UART_Write@data+1)& (0+255),b
  1989  001082  ECB7  F006         	call	_D_UART_Write	;wreg free
  1990                           
  1991                           ;DOOR_Controller.c: 114: doors[d].was_open = doors[d].is_open;
  1992  001086  0100               	movlb	0	; () banked
  1993  001088  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  1994  00108A  0D0A               	mullw	10
  1995  00108C  0E06               	movlw	6
  1996  00108E  26F3               	addwf	prodl,f,c
  1997  001090  0E00               	movlw	0
  1998  001092  22F4               	addwfc	prodh,f,c
  1999  001094  0E60               	movlw	low _doors
  2000  001096  24F3               	addwf	prodl,w,c
  2001  001098  6ED9               	movwf	fsr2l,c
  2002  00109A  0E00               	movlw	high _doors
  2003  00109C  20F4               	addwfc	prodh,w,c
  2004  00109E  6EDA               	movwf	fsr2h,c
  2005  0010A0  51BE               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2006  0010A2  0D0A               	mullw	10
  2007  0010A4  0E05               	movlw	5
  2008  0010A6  26F3               	addwf	prodl,f,c
  2009  0010A8  0E00               	movlw	0
  2010  0010AA  22F4               	addwfc	prodh,f,c
  2011  0010AC  0E60               	movlw	low _doors
  2012  0010AE  24F3               	addwf	prodl,w,c
  2013  0010B0  6EE1               	movwf	fsr1l,c
  2014  0010B2  0E00               	movlw	high _doors
  2015  0010B4  20F4               	addwfc	prodh,w,c
  2016  0010B6  6EE2               	movwf	fsr1h,c
  2017  0010B8  CFDF FFE7          	movff	indf2,indf1
  2018  0010BC                     l44:
  2019                           
  2020                           ; BSR set to: 0
  2021                           
  2022                           ; BSR set to: 0
  2023  0010BC  2BBE               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2024  0010BE  D79F               	goto	l1641
  2025  0010C0                     __end_of_C_DOOR_SendStates:
  2026                           	opt stack 0
  2027                           tblptru	equ	0xFF8
  2028                           tblptrh	equ	0xFF7
  2029                           tblptrl	equ	0xFF6
  2030                           tablat	equ	0xFF5
  2031                           prodh	equ	0xFF4
  2032                           prodl	equ	0xFF3
  2033                           intcon	equ	0xFF2
  2034                           intcon2	equ	0xFF1
  2035                           postinc0	equ	0xFEE
  2036                           plusw0	equ	0xFEB
  2037                           wreg	equ	0xFE8
  2038                           indf1	equ	0xFE7
  2039                           postinc1	equ	0xFE6
  2040                           postdec1	equ	0xFE5
  2041                           fsr1h	equ	0xFE2
  2042                           fsr1l	equ	0xFE1
  2043                           indf2	equ	0xFDF
  2044                           postinc2	equ	0xFDE
  2045                           plusw2	equ	0xFDB
  2046                           fsr2h	equ	0xFDA
  2047                           fsr2l	equ	0xFD9
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function _commandAndMessage *****************
  2051 ;; Defined at:
  2052 ;;		line 26 in file "Controllers/DOOR_Controller.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  door           10    0[BANK0 ] struct .
  2055 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2056 ;;		 -> C_DOOR_SendStates@com(3), 
  2057 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2058 ;;		 -> C_DOOR_SendStates@mes(2), 
  2059 ;; Auto vars:     Size  Location     Type
  2060 ;;		None
  2061 ;; Return value:  Size  Location     Type
  2062 ;;                  1    wreg      void 
  2063 ;; Registers used:
  2064 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2065 ;; Tracked objects:
  2066 ;;		On entry : 0/0
  2067 ;;		On exit  : 0/0
  2068 ;;		Unchanged: 0/0
  2069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2070 ;;      Params:         0      14       0       0       0       0       0       0       0
  2071 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2072 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2073 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2074 ;;Total ram usage:       14 bytes
  2075 ;; Hardware stack levels used:    1
  2076 ;; Hardware stack levels required when called:    7
  2077 ;; This function calls:
  2078 ;;		Nothing
  2079 ;; This function is called by:
  2080 ;;		_C_DOOR_SendStates
  2081 ;; This function uses a non-reentrant model
  2082 ;;
  2083                           
  2084                           	psect	text11
  2085  0013EC                     __ptext11:
  2086                           	opt stack 0
  2087  0013EC                     _commandAndMessage:
  2088                           	opt stack 22
  2089                           
  2090                           ;DOOR_Controller.c: 28: com[0] = 'P';
  2091                           
  2092                           ; BSR set to: 0
  2093                           ;incstack = 0
  2094  0013EC  C0AA  FFD9         	movff	commandAndMessage@com,fsr2l
  2095  0013F0  C0AB  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2096  0013F4  0E50               	movlw	80
  2097  0013F6  6EDF               	movwf	indf2,c
  2098                           
  2099                           ;DOOR_Controller.c: 29: com[1] = door.id + 0x30;
  2100  0013F8  0100               	movlb	0	; () banked
  2101  0013FA  EE20 F001          	lfsr	2,1
  2102  0013FE  51AA               	movf	commandAndMessage@com& (0+255),w,b
  2103  001400  26D9               	addwf	fsr2l,f,c
  2104  001402  51AB               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2105  001404  22DA               	addwfc	fsr2h,f,c
  2106  001406  51A0               	movf	commandAndMessage@door& (0+255),w,b
  2107  001408  0F30               	addlw	48
  2108  00140A  6EDF               	movwf	indf2,c
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;DOOR_Controller.c: 30: com[2] = '\0';
  2112  00140C  EE20 F002          	lfsr	2,2
  2113  001410  51AA               	movf	commandAndMessage@com& (0+255),w,b
  2114  001412  26D9               	addwf	fsr2l,f,c
  2115  001414  51AB               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2116  001416  22DA               	addwfc	fsr2h,f,c
  2117  001418  0E00               	movlw	0
  2118  00141A  6EDF               	movwf	indf2,c
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;DOOR_Controller.c: 33: mes[0] = door.is_open + 0x30;
  2122  00141C  51A6               	movf	(commandAndMessage@door+6)& (0+255),w,b
  2123  00141E  0F30               	addlw	48
  2124  001420  C0AC  FFD9         	movff	commandAndMessage@mes,fsr2l
  2125  001424  C0AD  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  2126  001428  6EDF               	movwf	indf2,c
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;DOOR_Controller.c: 34: mes[1] = '\0';
  2130  00142A  EE20 F001          	lfsr	2,1
  2131  00142E  51AC               	movf	commandAndMessage@mes& (0+255),w,b
  2132  001430  26D9               	addwf	fsr2l,f,c
  2133  001432  51AD               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  2134  001434  22DA               	addwfc	fsr2h,f,c
  2135  001436  0E00               	movlw	0
  2136  001438  6EDF               	movwf	indf2,c
  2137                           
  2138                           ; BSR set to: 0
  2139  00143A  0012               	return		;funcret
  2140  00143C                     __end_of_commandAndMessage:
  2141                           	opt stack 0
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           prodh	equ	0xFF4
  2147                           prodl	equ	0xFF3
  2148                           intcon	equ	0xFF2
  2149                           intcon2	equ	0xFF1
  2150                           postinc0	equ	0xFEE
  2151                           plusw0	equ	0xFEB
  2152                           wreg	equ	0xFE8
  2153                           indf1	equ	0xFE7
  2154                           postinc1	equ	0xFE6
  2155                           postdec1	equ	0xFE5
  2156                           fsr1h	equ	0xFE2
  2157                           fsr1l	equ	0xFE1
  2158                           indf2	equ	0xFDF
  2159                           postinc2	equ	0xFDE
  2160                           plusw2	equ	0xFDB
  2161                           fsr2h	equ	0xFDA
  2162                           fsr2l	equ	0xFD9
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _D_UART_Write *****************
  2166 ;; Defined at:
  2167 ;;		line 223 in file "Drivers/UART_Driver.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  2170 ;;		 -> STR_9(2), C_DOOR_SendStates@com(3), 
  2171 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  2172 ;;		 -> STR_10(6), C_DOOR_SendStates@mes(2), 
  2173 ;; Auto vars:     Size  Location     Type
  2174 ;;		None
  2175 ;; Return value:  Size  Location     Type
  2176 ;;                  1    wreg      void 
  2177 ;; Registers used:
  2178 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2179 ;; Tracked objects:
  2180 ;;		On entry : 0/0
  2181 ;;		On exit  : 0/0
  2182 ;;		Unchanged: 0/0
  2183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2184 ;;      Params:         0       4       0       0       0       0       0       0       0
  2185 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2186 ;;      Temps:          0       1       0       0       0       0       0       0       0
  2187 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2188 ;;Total ram usage:        5 bytes
  2189 ;; Hardware stack levels used:    1
  2190 ;; Hardware stack levels required when called:   10
  2191 ;; This function calls:
  2192 ;;		_printf
  2193 ;; This function is called by:
  2194 ;;		_C_DOOR_SendStates
  2195 ;;		_main
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text12
  2200  000D6E                     __ptext12:
  2201                           	opt stack 0
  2202  000D6E                     _D_UART_Write:
  2203                           	opt stack 20
  2204                           
  2205                           ;UART_Driver.c: 224: printf(startCharacter);
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;incstack = 0
  2209  000D6E  C041  F0A7         	movff	_startCharacter,printf@f
  2210  000D72  C042  F0A8         	movff	_startCharacter+1,printf@f+1
  2211  000D76  0100               	movlb	0	; () banked
  2212  000D78  51A7               	movf	printf@f& (0+255),w,b
  2213  000D7A  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2214  000D7C  A4D8               	btfss	status,2,c
  2215  000D7E  0E00               	movlw	low (__mediumconst shr (0+16))
  2216  000D80  6FA9               	movwf	(printf@f+2)& (0+255),b
  2217  000D82  ECE9  F004         	call	_printf	;wreg free
  2218                           
  2219                           ;UART_Driver.c: 226: printf(messageCharacter);
  2220  000D86  C0C4  F0A7         	movff	_messageCharacter,printf@f
  2221  000D8A  C0C5  F0A8         	movff	_messageCharacter+1,printf@f+1
  2222  000D8E  0100               	movlb	0	; () banked
  2223  000D90  51A7               	movf	printf@f& (0+255),w,b
  2224  000D92  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2225  000D94  A4D8               	btfss	status,2,c
  2226  000D96  0E00               	movlw	low (__mediumconst shr (0+16))
  2227  000D98  6FA9               	movwf	(printf@f+2)& (0+255),b
  2228  000D9A  ECE9  F004         	call	_printf	;wreg free
  2229                           
  2230                           ;UART_Driver.c: 227: printf(deviceName);
  2231  000D9E  C0C1  F0A7         	movff	_deviceName,printf@f
  2232  000DA2  C0C2  F0A8         	movff	_deviceName+1,printf@f+1
  2233  000DA6  C0C3  F0A9         	movff	_deviceName+2,printf@f+2
  2234  000DAA  ECE9  F004         	call	_printf	;wreg free
  2235                           
  2236                           ;UART_Driver.c: 229: printf(":");printf(command);
  2237  000DAE  0E37               	movlw	low STR_6
  2238  000DB0  0100               	movlb	0	; () banked
  2239  000DB2  6FA7               	movwf	printf@f& (0+255),b
  2240  000DB4  0E08               	movlw	high STR_6
  2241  000DB6  6FA8               	movwf	(printf@f+1)& (0+255),b
  2242  000DB8  51A7               	movf	printf@f& (0+255),w,b
  2243  000DBA  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2244  000DBC  A4D8               	btfss	status,2,c
  2245  000DBE  0E00               	movlw	low (__mediumconst shr (0+16))
  2246  000DC0  6FA9               	movwf	(printf@f+2)& (0+255),b
  2247  000DC2  ECE9  F004         	call	_printf	;wreg free
  2248  000DC6  C0B2  F0A7         	movff	D_UART_Write@command,printf@f
  2249  000DCA  C0B3  F0A8         	movff	D_UART_Write@command+1,printf@f+1
  2250  000DCE  0100               	movlb	0	; () banked
  2251  000DD0  6BA9               	clrf	(printf@f+2)& (0+255),b
  2252  000DD2  51A7               	movf	printf@f& (0+255),w,b
  2253  000DD4  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2254  000DD6  B4D8               	btfsc	status,2,c
  2255  000DD8  D005               	goto	u971
  2256  000DDA  0E07               	movlw	(high __ramtop+-1)
  2257  000DDC  65B3               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  2258  000DDE  D001               	goto	u9711
  2259  000DE0  D001               	goto	u971
  2260  000DE2                     u9711:
  2261  000DE2  8BA9               	bsf	(printf@f+2)& (0+255),5,b
  2262  000DE4                     u971:
  2263  000DE4  ECE9  F004         	call	_printf	;wreg free
  2264                           
  2265                           ;UART_Driver.c: 231: printf(":");printf(data);
  2266  000DE8  0E37               	movlw	low STR_6
  2267  000DEA  0100               	movlb	0	; () banked
  2268  000DEC  6FA7               	movwf	printf@f& (0+255),b
  2269  000DEE  0E08               	movlw	high STR_6
  2270  000DF0  6FA8               	movwf	(printf@f+1)& (0+255),b
  2271  000DF2  51A7               	movf	printf@f& (0+255),w,b
  2272  000DF4  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2273  000DF6  A4D8               	btfss	status,2,c
  2274  000DF8  0E00               	movlw	low (__mediumconst shr (0+16))
  2275  000DFA  6FA9               	movwf	(printf@f+2)& (0+255),b
  2276  000DFC  ECE9  F004         	call	_printf	;wreg free
  2277  000E00  C0B4  F0A7         	movff	D_UART_Write@data,printf@f
  2278  000E04  C0B5  F0A8         	movff	D_UART_Write@data+1,printf@f+1
  2279  000E08  0100               	movlb	0	; () banked
  2280  000E0A  6BA9               	clrf	(printf@f+2)& (0+255),b
  2281  000E0C  51A7               	movf	printf@f& (0+255),w,b
  2282  000E0E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2283  000E10  B4D8               	btfsc	status,2,c
  2284  000E12  D005               	goto	u981
  2285  000E14  0E07               	movlw	(high __ramtop+-1)
  2286  000E16  65B5               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  2287  000E18  D001               	goto	u9811
  2288  000E1A  D001               	goto	u981
  2289  000E1C                     u9811:
  2290  000E1C  8BA9               	bsf	(printf@f+2)& (0+255),5,b
  2291  000E1E                     u981:
  2292  000E1E  ECE9  F004         	call	_printf	;wreg free
  2293                           
  2294                           ;UART_Driver.c: 233: printf(stopCharacter);
  2295  000E22  C03F  F0A7         	movff	_stopCharacter,printf@f
  2296  000E26  C040  F0A8         	movff	_stopCharacter+1,printf@f+1
  2297  000E2A  0100               	movlb	0	; () banked
  2298  000E2C  51A7               	movf	printf@f& (0+255),w,b
  2299  000E2E  11A8               	iorwf	(printf@f+1)& (0+255),w,b
  2300  000E30  A4D8               	btfss	status,2,c
  2301  000E32  0E00               	movlw	low (__mediumconst shr (0+16))
  2302  000E34  6FA9               	movwf	(printf@f+2)& (0+255),b
  2303  000E36  ECE9  F004         	call	_printf	;wreg free
  2304                           
  2305                           ;UART_Driver.c: 234: _delay((unsigned long)((1)*(16000000/4000.0)));
  2306  000E3A  0E06               	movlw	6
  2307  000E3C  0100               	movlb	0	; () banked
  2308  000E3E  6FB6               	movwf	??_D_UART_Write& (0+255),b
  2309  000E40  0E30               	movlw	48
  2310  000E42                     u1467:
  2311  000E42  2EE8               	decfsz	wreg,f,c
  2312  000E44  D7FE               	bra	u1467
  2313  000E46  2FB6               	decfsz	??_D_UART_Write& (0+255),f,b
  2314  000E48  D7FC               	bra	u1467
  2315  000E4A  F000               	nop	
  2316  000E4C  0012               	return		;funcret
  2317  000E4E                     __end_of_D_UART_Write:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           intcon2	equ	0xFF1
  2327                           postinc0	equ	0xFEE
  2328                           plusw0	equ	0xFEB
  2329                           wreg	equ	0xFE8
  2330                           indf1	equ	0xFE7
  2331                           postinc1	equ	0xFE6
  2332                           postdec1	equ	0xFE5
  2333                           fsr1h	equ	0xFE2
  2334                           fsr1l	equ	0xFE1
  2335                           indf2	equ	0xFDF
  2336                           postinc2	equ	0xFDE
  2337                           plusw2	equ	0xFDB
  2338                           fsr2h	equ	0xFDA
  2339                           fsr2l	equ	0xFD9
  2340                           status	equ	0xFD8
  2341                           
  2342 ;; *************** function _printf *****************
  2343 ;; Defined at:
  2344 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2345 ;; Parameters:    Size  Location     Type
  2346 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  2347 ;;		 -> STR_10(6), STR_9(2), STR_8(2), STR_7(2), 
  2348 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  2349 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  2350 ;;		 -> C_DOOR_SendStates@com(3), 
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  idx             1   13[BANK0 ] unsigned char 
  2353 ;;  tmpval          4    0        struct .
  2354 ;;  cp              3    0        PTR const unsigned char 
  2355 ;;  val             2   14[BANK0 ] unsigned int 
  2356 ;;  ap              2   11[BANK0 ] PTR void [1]
  2357 ;;		 -> ?i1_printf(2), ?_printf(2), 
  2358 ;;  len             2    0        unsigned int 
  2359 ;;  c               1   17[BANK0 ] char 
  2360 ;;  prec            1   16[BANK0 ] char 
  2361 ;;  flag            1   10[BANK0 ] unsigned char 
  2362 ;; Return value:  Size  Location     Type
  2363 ;;                  2    7[BANK0 ] int 
  2364 ;; Registers used:
  2365 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2366 ;; Tracked objects:
  2367 ;;		On entry : 0/0
  2368 ;;		On exit  : 0/0
  2369 ;;		Unchanged: 0/0
  2370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2371 ;;      Params:         0       3       0       0       0       0       0       0       0
  2372 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2374 ;;      Totals:         0      11       0       0       0       0       0       0       0
  2375 ;;Total ram usage:       11 bytes
  2376 ;; Hardware stack levels used:    1
  2377 ;; Hardware stack levels required when called:    9
  2378 ;; This function calls:
  2379 ;;		___lwdiv
  2380 ;;		_putch
  2381 ;; This function is called by:
  2382 ;;		_D_UART_Write
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386                           	psect	text13
  2387  0009D2                     __ptext13:
  2388                           	opt stack 0
  2389  0009D2                     _printf:
  2390                           	opt stack 20
  2391                           
  2392                           ;doprnt.c: 466: va_list ap;
  2393                           ;doprnt.c: 499: signed char c;
  2394                           ;doprnt.c: 506: signed char prec;
  2395                           ;doprnt.c: 508: unsigned char flag;
  2396                           ;doprnt.c: 523: union {
  2397                           ;doprnt.c: 524: unsigned long vd;
  2398                           ;doprnt.c: 525: double integ;
  2399                           ;doprnt.c: 526: } tmpval;
  2400                           ;doprnt.c: 528: unsigned int val;
  2401                           ;doprnt.c: 529: unsigned len;
  2402                           ;doprnt.c: 530: const char * cp;
  2403                           ;doprnt.c: 533: *ap = __va_start();
  2404                           
  2405                           ;incstack = 0
  2406  0009D2  0EAA               	movlw	low (?_printf+3)
  2407  0009D4  0100               	movlb	0	; () banked
  2408  0009D6  6FAB               	movwf	printf@ap& (0+255),b
  2409  0009D8  0E00               	movlw	high (?_printf+3)
  2410  0009DA  6FAC               	movwf	(printf@ap+1)& (0+255),b
  2411                           
  2412                           ;doprnt.c: 536: while(c = *f++) {
  2413  0009DC  D08B               	goto	u860
  2414  0009DE                     
  2415                           ; BSR set to: 0
  2416                           ;doprnt.c: 538: if(c != '%')
  2417                           
  2418                           ; BSR set to: 0
  2419  0009DE  0E25               	movlw	37
  2420  0009E0  19B1               	xorwf	printf@c& (0+255),w,b
  2421  0009E2  B4D8               	btfsc	status,2,c
  2422  0009E4  D004               	goto	l263
  2423                           
  2424                           ; BSR set to: 0
  2425                           ;doprnt.c: 540: {
  2426                           ;doprnt.c: 541: (putch(c) );
  2427  0009E6  51B1               	movf	printf@c& (0+255),w,b
  2428  0009E8  ECA0  F00A         	call	_putch
  2429                           
  2430                           ;doprnt.c: 542: continue;
  2431  0009EC  D083               	goto	u860
  2432  0009EE                     l263:
  2433                           
  2434                           ;doprnt.c: 543: }
  2435                           ;doprnt.c: 548: flag = 0;
  2436  0009EE  0E00               	movlw	0
  2437  0009F0  0100               	movlb	0	; () banked
  2438  0009F2  6FAA               	movwf	printf@flag& (0+255),b
  2439                           
  2440                           ;doprnt.c: 635: switch(c = *f++) {
  2441  0009F4  D004               	goto	l264
  2442  0009F6                     
  2443                           ; BSR set to: 0
  2444                           ;doprnt.c: 809: (putch(c) );
  2445                           
  2446                           ; BSR set to: 0
  2447  0009F6  51B1               	movf	printf@c& (0+255),w,b
  2448  0009F8  ECA0  F00A         	call	_putch
  2449                           
  2450                           ;doprnt.c: 810: continue;
  2451  0009FC  D07B               	goto	u860
  2452  0009FE                     l264:
  2453  0009FE  C0A7  FFF6         	movff	printf@f,tblptrl
  2454  000A02  C0A8  FFF7         	movff	printf@f+1,tblptrh
  2455  000A06  C0A9  FFF8         	movff	printf@f+2,tblptru
  2456  000A0A  0E01               	movlw	1
  2457  000A0C  0100               	movlb	0	; () banked
  2458  000A0E  27A7               	addwf	printf@f& (0+255),f,b
  2459  000A10  0E00               	movlw	0
  2460  000A12  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2461  000A14  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2462  000A16  BAF8               	btfsc	tblptru,5,c
  2463  000A18  D003               	bra	u827
  2464  000A1A  0008               	tblrd		*
  2465  000A1C  50F5               	movf	tablat,w,c
  2466  000A1E  D005               	bra	u820
  2467  000A20                     u827:
  2468  000A20  CFF6 FFE9          	movff	tblptrl,fsr0l
  2469  000A24  CFF7 FFEA          	movff	tblptrh,fsr0h
  2470  000A28  50EF               	movf	indf0,w,c
  2471  000A2A                     u820:
  2472  000A2A  0100               	movlb	0	; () banked
  2473  000A2C  6FB1               	movwf	printf@c& (0+255),b
  2474  000A2E  51B1               	movf	printf@c& (0+255),w,b
  2475                           
  2476                           ; Switch size 1, requested type "space"
  2477                           ; Number of cases is 2, Range of values is 0 to 120
  2478                           ; switch strategies available:
  2479                           ; Name         Instructions Cycles
  2480                           ; simple_byte            7     4 (average)
  2481                           ;	Chosen strategy is simple_byte
  2482  000A30  0A00               	xorlw	0	; case 0
  2483  000A32  B4D8               	btfsc	status,2,c
  2484  000A34  0012               	return	
  2485  000A36  0A78               	xorlw	120	; case 120
  2486  000A38  A4D8               	btfss	status,2,c
  2487  000A3A  D7DD               	goto	l269
  2488                           
  2489                           ;doprnt.c: 1273: {
  2490                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2491                           
  2492                           ; BSR set to: 0
  2493  000A3C  C0AB  FFD9         	movff	printf@ap,fsr2l
  2494  000A40  C0AC  FFDA         	movff	printf@ap+1,fsr2h
  2495  000A44  CFDE F0AE          	movff	postinc2,printf@val
  2496  000A48  CFDD F0AF          	movff	postdec2,printf@val+1
  2497  000A4C  0E02               	movlw	2
  2498  000A4E  0100               	movlb	0	; () banked
  2499  000A50  27AB               	addwf	printf@ap& (0+255),f,b
  2500  000A52  0E00               	movlw	0
  2501  000A54  23AC               	addwfc	(printf@ap+1)& (0+255),f,b
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;doprnt.c: 1287: }
  2505                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2506  000A56  0E01               	movlw	1
  2507  000A58  6FB1               	movwf	printf@c& (0+255),b
  2508  000A5A  D014               	goto	l1487
  2509  000A5C                     
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2512                           
  2513                           ; BSR set to: 0
  2514  000A5C  51B1               	movf	printf@c& (0+255),w,b
  2515  000A5E  0D02               	mullw	2
  2516  000A60  0E01               	movlw	low _hexpowers
  2517  000A62  24F3               	addwf	prodl,w,c
  2518  000A64  6EF6               	movwf	tblptrl,c
  2519  000A66  0E08               	movlw	high _hexpowers
  2520  000A68  20F4               	addwfc	prodh,w,c
  2521  000A6A  6EF7               	movwf	tblptrh,c
  2522  000A6C                     	if	1	;There are 3 active tblptr bytes
  2523  000A6C  6AF8               	clrf	tblptru,c
  2524  000A6E  0E00               	movlw	low (__mediumconst shr (0+16))
  2525  000A70  22F8               	addwfc	tblptru,f,c
  2526  000A72                     	endif
  2527  000A72  0009               	tblrd		*+
  2528  000A74  50F5               	movf	tablat,w,c
  2529  000A76  5DAE               	subwf	printf@val& (0+255),w,b
  2530  000A78  0009               	tblrd		*+
  2531  000A7A  50F5               	movf	tablat,w,c
  2532  000A7C  59AF               	subwfb	(printf@val+1)& (0+255),w,b
  2533  000A7E  A0D8               	btfss	status,0,c
  2534  000A80  D005               	goto	u850
  2535                           
  2536                           ; BSR set to: 0
  2537                           
  2538                           ; BSR set to: 0
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;doprnt.c: 1318: break;
  2542  000A82  2BB1               	incf	printf@c& (0+255),f,b
  2543  000A84                     l1487:
  2544                           
  2545                           ; BSR set to: 0
  2546  000A84  0E04               	movlw	4
  2547  000A86  19B1               	xorwf	printf@c& (0+255),w,b
  2548  000A88  A4D8               	btfss	status,2,c
  2549  000A8A  D7E8               	goto	l270
  2550  000A8C                     u850:
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;doprnt.c: 1422: {
  2554                           ;doprnt.c: 1469: }
  2555                           ;doprnt.c: 1472: prec = c;
  2556  000A8C  C0B1  F0B0         	movff	printf@c,printf@prec
  2557                           
  2558                           ;doprnt.c: 1474: while(prec--) {
  2559  000A90  D02C               	goto	l273
  2560  000A92                     
  2561                           ; BSR set to: 0
  2562                           ;doprnt.c: 1478: {
  2563                           ;doprnt.c: 1499: {
  2564                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2565                           
  2566                           ; BSR set to: 0
  2567  000A92  C0AE  F0A0         	movff	printf@val,___lwdiv@dividend
  2568  000A96  C0AF  F0A1         	movff	printf@val+1,___lwdiv@dividend+1
  2569  000A9A  51B0               	movf	printf@prec& (0+255),w,b
  2570  000A9C  0D02               	mullw	2
  2571  000A9E  0E01               	movlw	low _hexpowers
  2572  000AA0  24F3               	addwf	prodl,w,c
  2573  000AA2  6EF6               	movwf	tblptrl,c
  2574  000AA4  0E08               	movlw	high _hexpowers
  2575  000AA6  20F4               	addwfc	prodh,w,c
  2576  000AA8  6EF7               	movwf	tblptrh,c
  2577  000AAA                     	if	1	;There are 3 active tblptr bytes
  2578  000AAA  6AF8               	clrf	tblptru,c
  2579  000AAC  0E00               	movlw	low (__mediumconst shr (0+16))
  2580  000AAE  22F8               	addwfc	tblptru,f,c
  2581  000AB0                     	endif
  2582  000AB0  0009               	tblrd		*+
  2583  000AB2  CFF5 F0A2          	movff	tablat,___lwdiv@divisor
  2584  000AB6  000A               	tblrd		*-
  2585  000AB8  CFF5 F0A3          	movff	tablat,___lwdiv@divisor+1
  2586  000ABC  ECA3  F009         	call	___lwdiv	;wreg free
  2587  000AC0  0100               	movlb	0	; () banked
  2588  000AC2  51A0               	movf	?___lwdiv& (0+255),w,b
  2589  000AC4  0B0F               	andlw	15
  2590  000AC6  6FAD               	movwf	printf@idx& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2594  000AC8  51AD               	movf	printf@idx& (0+255),w,b
  2595  000ACA  0D01               	mullw	1
  2596  000ACC  0E09               	movlw	low STR_13
  2597  000ACE  24F3               	addwf	prodl,w,c
  2598  000AD0  6EF6               	movwf	tblptrl,c
  2599  000AD2  0E08               	movlw	high STR_13
  2600  000AD4  20F4               	addwfc	prodh,w,c
  2601  000AD6  6EF7               	movwf	tblptrh,c
  2602  000AD8                     	if	1	;There are 3 active tblptr bytes
  2603  000AD8  6AF8               	clrf	tblptru,c
  2604  000ADA  0E00               	movlw	low (__mediumconst shr (0+16))
  2605  000ADC  22F8               	addwfc	tblptru,f,c
  2606  000ADE                     	endif
  2607  000ADE  0008               	tblrd		*
  2608  000AE0  CFF5 F0B1          	movff	tablat,printf@c
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;doprnt.c: 1508: }
  2612                           ;doprnt.c: 1523: }
  2613                           ;doprnt.c: 1524: (putch(c) );
  2614  000AE4  51B1               	movf	printf@c& (0+255),w,b
  2615  000AE6  ECA0  F00A         	call	_putch
  2616  000AEA                     l273:
  2617  000AEA  0100               	movlb	0	; () banked
  2618  000AEC  07B0               	decf	printf@prec& (0+255),f,b
  2619  000AEE  29B0               	incf	printf@prec& (0+255),w,b
  2620  000AF0  A4D8               	btfss	status,2,c
  2621  000AF2  D7CF               	goto	l274
  2622  000AF4                     u860:
  2623                           
  2624                           ; BSR set to: 0
  2625                           
  2626                           ; BSR set to: 0
  2627  000AF4  C0A7  FFF6         	movff	printf@f,tblptrl
  2628  000AF8  C0A8  FFF7         	movff	printf@f+1,tblptrh
  2629  000AFC  C0A9  FFF8         	movff	printf@f+2,tblptru
  2630  000B00  0E01               	movlw	1
  2631  000B02  0100               	movlb	0	; () banked
  2632  000B04  27A7               	addwf	printf@f& (0+255),f,b
  2633  000B06  0E00               	movlw	0
  2634  000B08  23A8               	addwfc	(printf@f+1)& (0+255),f,b
  2635  000B0A  23A9               	addwfc	(printf@f+2)& (0+255),f,b
  2636  000B0C  BAF8               	btfsc	tblptru,5,c
  2637  000B0E  D003               	bra	u877
  2638  000B10  0008               	tblrd		*
  2639  000B12  50F5               	movf	tablat,w,c
  2640  000B14  D005               	bra	u870
  2641  000B16                     u877:
  2642  000B16  CFF6 FFE9          	movff	tblptrl,fsr0l
  2643  000B1A  CFF7 FFEA          	movff	tblptrh,fsr0h
  2644  000B1E  50EF               	movf	indf0,w,c
  2645  000B20                     u870:
  2646  000B20  0100               	movlb	0	; () banked
  2647  000B22  6FB1               	movwf	printf@c& (0+255),b
  2648  000B24  51B1               	movf	printf@c& (0+255),w,b
  2649  000B26  B4D8               	btfsc	status,2,c
  2650  000B28  0012               	return	
  2651  000B2A  D759               	goto	l262
  2652  000B2C                     __end_of_printf:
  2653                           	opt stack 0
  2654                           tblptru	equ	0xFF8
  2655                           tblptrh	equ	0xFF7
  2656                           tblptrl	equ	0xFF6
  2657                           tablat	equ	0xFF5
  2658                           prodh	equ	0xFF4
  2659                           prodl	equ	0xFF3
  2660                           intcon	equ	0xFF2
  2661                           intcon2	equ	0xFF1
  2662                           indf0	equ	0xFEF
  2663                           postinc0	equ	0xFEE
  2664                           plusw0	equ	0xFEB
  2665                           fsr0h	equ	0xFEA
  2666                           fsr0l	equ	0xFE9
  2667                           wreg	equ	0xFE8
  2668                           indf1	equ	0xFE7
  2669                           postinc1	equ	0xFE6
  2670                           postdec1	equ	0xFE5
  2671                           fsr1h	equ	0xFE2
  2672                           fsr1l	equ	0xFE1
  2673                           indf2	equ	0xFDF
  2674                           postinc2	equ	0xFDE
  2675                           postdec2	equ	0xFDD
  2676                           plusw2	equ	0xFDB
  2677                           fsr2h	equ	0xFDA
  2678                           fsr2l	equ	0xFD9
  2679                           status	equ	0xFD8
  2680                           
  2681 ;; *************** function _putch *****************
  2682 ;; Defined at:
  2683 ;;		line 260 in file "Drivers/UART_Driver.c"
  2684 ;; Parameters:    Size  Location     Type
  2685 ;;  data            1    wreg     unsigned char 
  2686 ;; Auto vars:     Size  Location     Type
  2687 ;;  data            1    1[BANK0 ] unsigned char 
  2688 ;; Return value:  Size  Location     Type
  2689 ;;                  1    wreg      void 
  2690 ;; Registers used:
  2691 ;;		wreg, status,2, cstack
  2692 ;; Tracked objects:
  2693 ;;		On entry : 0/0
  2694 ;;		On exit  : 0/0
  2695 ;;		Unchanged: 0/0
  2696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2697 ;;      Params:         0       0       0       0       0       0       0       0       0
  2698 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2700 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2701 ;;Total ram usage:        1 bytes
  2702 ;; Hardware stack levels used:    1
  2703 ;; Hardware stack levels required when called:    8
  2704 ;; This function calls:
  2705 ;;		_writeByte
  2706 ;; This function is called by:
  2707 ;;		_printf
  2708 ;; This function uses a non-reentrant model
  2709 ;;
  2710                           
  2711                           	psect	text14
  2712  001540                     __ptext14:
  2713                           	opt stack 0
  2714  001540                     _putch:
  2715                           	opt stack 20
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;incstack = 0
  2719                           ;putch@data stored from wreg
  2720  001540  0100               	movlb	0	; () banked
  2721  001542  6FA1               	movwf	putch@data& (0+255),b
  2722                           
  2723                           ;UART_Driver.c: 261: writeByte(data);
  2724  001544  0100               	movlb	0	; () banked
  2725  001546  51A1               	movf	putch@data& (0+255),w,b
  2726  001548  ECA7  F00A         	call	_writeByte
  2727  00154C  0012               	return		;funcret
  2728  00154E                     __end_of_putch:
  2729                           	opt stack 0
  2730                           tblptru	equ	0xFF8
  2731                           tblptrh	equ	0xFF7
  2732                           tblptrl	equ	0xFF6
  2733                           tablat	equ	0xFF5
  2734                           prodh	equ	0xFF4
  2735                           prodl	equ	0xFF3
  2736                           intcon	equ	0xFF2
  2737                           intcon2	equ	0xFF1
  2738                           indf0	equ	0xFEF
  2739                           postinc0	equ	0xFEE
  2740                           plusw0	equ	0xFEB
  2741                           fsr0h	equ	0xFEA
  2742                           fsr0l	equ	0xFE9
  2743                           wreg	equ	0xFE8
  2744                           indf1	equ	0xFE7
  2745                           postinc1	equ	0xFE6
  2746                           postdec1	equ	0xFE5
  2747                           fsr1h	equ	0xFE2
  2748                           fsr1l	equ	0xFE1
  2749                           indf2	equ	0xFDF
  2750                           postinc2	equ	0xFDE
  2751                           postdec2	equ	0xFDD
  2752                           plusw2	equ	0xFDB
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _writeByte *****************
  2758 ;; Defined at:
  2759 ;;		line 69 in file "Drivers/UART_Driver.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  data            1    wreg     unsigned char 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  data            1    0[BANK0 ] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2773 ;;      Params:         0       0       0       0       0       0       0       0       0
  2774 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2776 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2777 ;;Total ram usage:        1 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    7
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_putch
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text15
  2788  00154E                     __ptext15:
  2789                           	opt stack 0
  2790  00154E                     _writeByte:
  2791                           	opt stack 20
  2792                           
  2793                           ;incstack = 0
  2794                           ;writeByte@data stored from wreg
  2795  00154E  0100               	movlb	0	; () banked
  2796  001550  6FA0               	movwf	writeByte@data& (0+255),b
  2797  001552                     
  2798                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  2799  001552  A2AC               	btfss	4012,1,c	;volatile
  2800  001554  D7FE               	goto	l1401
  2801                           
  2802                           ;UART_Driver.c: 71: TXREG = data;
  2803  001556  C0A0  FFAD         	movff	writeByte@data,4013	;volatile
  2804  00155A  0012               	return		;funcret
  2805  00155C                     __end_of_writeByte:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           prodh	equ	0xFF4
  2812                           prodl	equ	0xFF3
  2813                           intcon	equ	0xFF2
  2814                           intcon2	equ	0xFF1
  2815                           indf0	equ	0xFEF
  2816                           postinc0	equ	0xFEE
  2817                           plusw0	equ	0xFEB
  2818                           fsr0h	equ	0xFEA
  2819                           fsr0l	equ	0xFE9
  2820                           wreg	equ	0xFE8
  2821                           indf1	equ	0xFE7
  2822                           postinc1	equ	0xFE6
  2823                           postdec1	equ	0xFE5
  2824                           fsr1h	equ	0xFE2
  2825                           fsr1l	equ	0xFE1
  2826                           indf2	equ	0xFDF
  2827                           postinc2	equ	0xFDE
  2828                           postdec2	equ	0xFDD
  2829                           plusw2	equ	0xFDB
  2830                           fsr2h	equ	0xFDA
  2831                           fsr2l	equ	0xFD9
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function ___lwdiv *****************
  2835 ;; Defined at:
  2836 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;  dividend        2    0[BANK0 ] unsigned int 
  2839 ;;  divisor         2    2[BANK0 ] unsigned int 
  2840 ;; Auto vars:     Size  Location     Type
  2841 ;;  quotient        2    4[BANK0 ] unsigned int 
  2842 ;;  counter         1    6[BANK0 ] unsigned char 
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  2    0[BANK0 ] unsigned int 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, status,0
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2852 ;;      Params:         0       4       0       0       0       0       0       0       0
  2853 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2855 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2856 ;;Total ram usage:        7 bytes
  2857 ;; Hardware stack levels used:    1
  2858 ;; Hardware stack levels required when called:    7
  2859 ;; This function calls:
  2860 ;;		Nothing
  2861 ;; This function is called by:
  2862 ;;		_printf
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text16
  2867  001346                     __ptext16:
  2868                           	opt stack 0
  2869  001346                     ___lwdiv:
  2870                           	opt stack 21
  2871                           
  2872                           ;incstack = 0
  2873  001346  0E00               	movlw	0
  2874  001348  0100               	movlb	0	; () banked
  2875  00134A  6FA5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2876  00134C  0E00               	movlw	0
  2877  00134E  6FA4               	movwf	___lwdiv@quotient& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880  001350  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2881  001352  11A3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2882  001354  B4D8               	btfsc	status,2,c
  2883  001356  D01C               	goto	l686
  2884                           
  2885                           ; BSR set to: 0
  2886  001358  0E01               	movlw	1
  2887  00135A  6FA6               	movwf	___lwdiv@counter& (0+255),b
  2888  00135C  D004               	goto	l681
  2889  00135E                     
  2890                           ; BSR set to: 0
  2891                           
  2892                           ; BSR set to: 0
  2893  00135E  90D8               	bcf	status,0,c
  2894  001360  37A2               	rlcf	___lwdiv@divisor& (0+255),f,b
  2895  001362  37A3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2896  001364  2BA6               	incf	___lwdiv@counter& (0+255),f,b
  2897  001366                     l681:
  2898                           
  2899                           ; BSR set to: 0
  2900                           
  2901                           ; BSR set to: 0
  2902  001366  AFA3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2903  001368  D7FA               	goto	l682
  2904  00136A                     u760:
  2905                           
  2906                           ; BSR set to: 0
  2907                           
  2908                           ; BSR set to: 0
  2909                           
  2910                           ; BSR set to: 0
  2911  00136A  90D8               	bcf	status,0,c
  2912  00136C  37A4               	rlcf	___lwdiv@quotient& (0+255),f,b
  2913  00136E  37A5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2914                           
  2915                           ; BSR set to: 0
  2916  001370  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2917  001372  5DA0               	subwf	___lwdiv@dividend& (0+255),w,b
  2918  001374  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2919  001376  59A1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2920  001378  A0D8               	btfss	status,0,c
  2921  00137A  D005               	goto	l685
  2922                           
  2923                           ; BSR set to: 0
  2924  00137C  51A2               	movf	___lwdiv@divisor& (0+255),w,b
  2925  00137E  5FA0               	subwf	___lwdiv@dividend& (0+255),f,b
  2926  001380  51A3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2927  001382  5BA1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2928                           
  2929                           ; BSR set to: 0
  2930  001384  81A4               	bsf	___lwdiv@quotient& (0+255),0,b
  2931  001386                     l685:
  2932                           
  2933                           ; BSR set to: 0
  2934                           
  2935                           ; BSR set to: 0
  2936  001386  90D8               	bcf	status,0,c
  2937  001388  33A3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2938  00138A  33A2               	rrcf	___lwdiv@divisor& (0+255),f,b
  2939                           
  2940                           ; BSR set to: 0
  2941  00138C  2FA6               	decfsz	___lwdiv@counter& (0+255),f,b
  2942  00138E  D7ED               	goto	u760
  2943  001390                     l686:
  2944                           
  2945                           ; BSR set to: 0
  2946                           
  2947                           ; BSR set to: 0
  2948  001390  C0A4  F0A0         	movff	___lwdiv@quotient,?___lwdiv
  2949  001394  C0A5  F0A1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2950                           
  2951                           ; BSR set to: 0
  2952  001398  0012               	return		;funcret
  2953  00139A                     __end_of___lwdiv:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodh	equ	0xFF4
  2960                           prodl	equ	0xFF3
  2961                           intcon	equ	0xFF2
  2962                           intcon2	equ	0xFF1
  2963                           indf0	equ	0xFEF
  2964                           postinc0	equ	0xFEE
  2965                           plusw0	equ	0xFEB
  2966                           fsr0h	equ	0xFEA
  2967                           fsr0l	equ	0xFE9
  2968                           wreg	equ	0xFE8
  2969                           indf1	equ	0xFE7
  2970                           postinc1	equ	0xFE6
  2971                           postdec1	equ	0xFE5
  2972                           fsr1h	equ	0xFE2
  2973                           fsr1l	equ	0xFE1
  2974                           indf2	equ	0xFDF
  2975                           postinc2	equ	0xFDE
  2976                           postdec2	equ	0xFDD
  2977                           plusw2	equ	0xFDB
  2978                           fsr2h	equ	0xFDA
  2979                           fsr2l	equ	0xFD9
  2980                           status	equ	0xFD8
  2981                           
  2982 ;; *************** function _C_DOOR_ReadSensors *****************
  2983 ;; Defined at:
  2984 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;		None
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  d               1    4[BANK0 ] unsigned char 
  2989 ;; Return value:  Size  Location     Type
  2990 ;;                  1    wreg      void 
  2991 ;; Registers used:
  2992 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2993 ;; Tracked objects:
  2994 ;;		On entry : 0/0
  2995 ;;		On exit  : 0/0
  2996 ;;		Unchanged: 0/0
  2997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2998 ;;      Params:         0       0       0       0       0       0       0       0       0
  2999 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3000 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3001 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3002 ;;Total ram usage:        5 bytes
  3003 ;; Hardware stack levels used:    1
  3004 ;; Hardware stack levels required when called:    7
  3005 ;; This function calls:
  3006 ;;		Nothing
  3007 ;; This function is called by:
  3008 ;;		_main
  3009 ;; This function uses a non-reentrant model
  3010 ;;
  3011                           
  3012                           	psect	text17
  3013  001204                     __ptext17:
  3014                           	opt stack 0
  3015  001204                     _C_DOOR_ReadSensors:
  3016                           	opt stack 23
  3017                           
  3018                           ;DOOR_Controller.c: 96: uint8_t d;
  3019                           ;DOOR_Controller.c: 97: for (d = 0; d < 5; d++) {
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;incstack = 0
  3023  001204  0E00               	movlw	0
  3024  001206  0100               	movlb	0	; () banked
  3025  001208  6FA4               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3026  00120A                     l1629:
  3027                           
  3028                           ; BSR set to: 0
  3029  00120A  0E04               	movlw	4
  3030  00120C  65A4               	cpfsgt	C_DOOR_ReadSensors@d& (0+255),b
  3031  00120E  D001               	goto	l37
  3032  001210  0012               	return	
  3033  001212                     l37:
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;DOOR_Controller.c: 98: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pin
      +                          ) & 0x01;
  3037                           
  3038                           ; BSR set to: 0
  3039  001212  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3040  001214  0D0A               	mullw	10
  3041  001216  0E06               	movlw	6
  3042  001218  26F3               	addwf	prodl,f,c
  3043  00121A  0E00               	movlw	0
  3044  00121C  22F4               	addwfc	prodh,f,c
  3045  00121E  0E60               	movlw	low _doors
  3046  001220  24F3               	addwf	prodl,w,c
  3047  001222  6ED9               	movwf	fsr2l,c
  3048  001224  0E00               	movlw	high _doors
  3049  001226  20F4               	addwfc	prodh,w,c
  3050  001228  6EDA               	movwf	fsr2h,c
  3051  00122A  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3052  00122C  0D0A               	mullw	10
  3053  00122E  0E09               	movlw	9
  3054  001230  26F3               	addwf	prodl,f,c
  3055  001232  0E00               	movlw	0
  3056  001234  22F4               	addwfc	prodh,f,c
  3057  001236  0E60               	movlw	low _doors
  3058  001238  24F3               	addwf	prodl,w,c
  3059  00123A  6EE1               	movwf	fsr1l,c
  3060  00123C  0E00               	movlw	high _doors
  3061  00123E  20F4               	addwfc	prodh,w,c
  3062  001240  6EE2               	movwf	fsr1h,c
  3063  001242  50E7               	movf	indf1,w,c
  3064  001244  6FA0               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3065  001246  51A4               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3066  001248  0D0A               	mullw	10
  3067  00124A  0E07               	movlw	7
  3068  00124C  26F3               	addwf	prodl,f,c
  3069  00124E  0E00               	movlw	0
  3070  001250  22F4               	addwfc	prodh,f,c
  3071  001252  0E60               	movlw	low _doors
  3072  001254  24F3               	addwf	prodl,w,c
  3073  001256  6EE1               	movwf	fsr1l,c
  3074  001258  0E00               	movlw	high _doors
  3075  00125A  20F4               	addwfc	prodh,w,c
  3076  00125C  6EE2               	movwf	fsr1h,c
  3077  00125E  CFE6 F0A1          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3078  001262  CFE5 F0A2          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3079  001266  C0A1  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3080  00126A  C0A2  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3081  00126E  50E7               	movf	indf1,w,c
  3082  001270  6FA3               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3083  001272  2BA0               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3084  001274  D002               	goto	u1104
  3085  001276                     u1105:
  3086  001276  90D8               	bcf	status,0,c
  3087  001278  33A3               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3088  00127A                     u1104:
  3089  00127A  2FA0               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3090  00127C  D7FC               	goto	u1105
  3091  00127E  0100               	movlb	0	; () banked
  3092  001280  51A3               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3093  001282  0B01               	andlw	1
  3094  001284  6EDF               	movwf	indf2,c
  3095                           
  3096                           ; BSR set to: 0
  3097  001286  2BA4               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3098  001288  D7C0               	goto	l1629
  3099  00128A                     __end_of_C_DOOR_ReadSensors:
  3100                           	opt stack 0
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           prodh	equ	0xFF4
  3106                           prodl	equ	0xFF3
  3107                           intcon	equ	0xFF2
  3108                           intcon2	equ	0xFF1
  3109                           indf0	equ	0xFEF
  3110                           postinc0	equ	0xFEE
  3111                           plusw0	equ	0xFEB
  3112                           fsr0h	equ	0xFEA
  3113                           fsr0l	equ	0xFE9
  3114                           wreg	equ	0xFE8
  3115                           indf1	equ	0xFE7
  3116                           postinc1	equ	0xFE6
  3117                           postdec1	equ	0xFE5
  3118                           fsr1h	equ	0xFE2
  3119                           fsr1l	equ	0xFE1
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           postdec2	equ	0xFDD
  3123                           plusw2	equ	0xFDB
  3124                           fsr2h	equ	0xFDA
  3125                           fsr2l	equ	0xFD9
  3126                           status	equ	0xFD8
  3127                           
  3128 ;; *************** function _C_DOOR_LockAll *****************
  3129 ;; Defined at:
  3130 ;;		line 70 in file "Controllers/DOOR_Controller.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      void 
  3137 ;; Registers used:
  3138 ;;		wreg, fsr2l, fsr2h
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3144 ;;      Params:         0       0       0       0       0       0       0       0       0
  3145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3147 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3148 ;;Total ram usage:        0 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    7
  3151 ;; This function calls:
  3152 ;;		Nothing
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text18
  3159  00155C                     __ptext18:
  3160                           	opt stack 0
  3161  00155C                     _C_DOOR_LockAll:
  3162                           	opt stack 23
  3163                           
  3164                           ;DOOR_Controller.c: 75: *doors[0].lock_port |= 0xC0;
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;incstack = 0
  3168  00155C  C062  FFD9         	movff	_doors+2,fsr2l
  3169  001560  C063  FFDA         	movff	_doors+3,fsr2h
  3170  001564  0EC0               	movlw	192
  3171  001566  12DF               	iorwf	indf2,f,c
  3172  001568  0012               	return		;funcret
  3173  00156A                     __end_of_C_DOOR_LockAll:
  3174                           	opt stack 0
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           intcon	equ	0xFF2
  3182                           intcon2	equ	0xFF1
  3183                           indf0	equ	0xFEF
  3184                           postinc0	equ	0xFEE
  3185                           plusw0	equ	0xFEB
  3186                           fsr0h	equ	0xFEA
  3187                           fsr0l	equ	0xFE9
  3188                           wreg	equ	0xFE8
  3189                           indf1	equ	0xFE7
  3190                           postinc1	equ	0xFE6
  3191                           postdec1	equ	0xFE5
  3192                           fsr1h	equ	0xFE2
  3193                           fsr1l	equ	0xFE1
  3194                           indf2	equ	0xFDF
  3195                           postinc2	equ	0xFDE
  3196                           postdec2	equ	0xFDD
  3197                           plusw2	equ	0xFDB
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _C_DOOR_Init *****************
  3203 ;; Defined at:
  3204 ;;		line 40 in file "Controllers/DOOR_Controller.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;  d               1    0[BANK0 ] unsigned char 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0
  3219 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3221 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3222 ;;Total ram usage:        1 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    7
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_main
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text19
  3233  000C74                     __ptext19:
  3234                           	opt stack 0
  3235  000C74                     _C_DOOR_Init:
  3236                           	opt stack 23
  3237                           
  3238                           ;DOOR_Controller.c: 42: TRISB &= 0x3F;
  3239                           
  3240                           ;incstack = 0
  3241  000C74  0E3F               	movlw	63
  3242  000C76  1693               	andwf	3987,f,c	;volatile
  3243                           
  3244                           ;DOOR_Controller.c: 43: TRISB |= 0x3F;
  3245  000C78  0E3F               	movlw	63
  3246  000C7A  1293               	iorwf	3987,f,c	;volatile
  3247                           
  3248                           ;DOOR_Controller.c: 46: uint8_t d;
  3249                           ;DOOR_Controller.c: 47: for (d = 0; d < 5; d++) {
  3250  000C7C  0E00               	movlw	0
  3251  000C7E  0100               	movlb	0	; () banked
  3252  000C80  6FA0               	movwf	C_DOOR_Init@d& (0+255),b
  3253  000C82                     l1613:
  3254                           
  3255                           ; BSR set to: 0
  3256  000C82  0E04               	movlw	4
  3257  000C84  65A0               	cpfsgt	C_DOOR_Init@d& (0+255),b
  3258  000C86  D001               	goto	l14
  3259  000C88  0012               	return	
  3260  000C8A                     l14:
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;DOOR_Controller.c: 48: doors[d].id = d;
  3264                           
  3265                           ; BSR set to: 0
  3266  000C8A  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3267  000C8C  0D0A               	mullw	10
  3268  000C8E  0E60               	movlw	low _doors
  3269  000C90  24F3               	addwf	prodl,w,c
  3270  000C92  6ED9               	movwf	fsr2l,c
  3271  000C94  0E00               	movlw	high _doors
  3272  000C96  20F4               	addwfc	prodh,w,c
  3273  000C98  6EDA               	movwf	fsr2h,c
  3274  000C9A  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  3275                           
  3276                           ;DOOR_Controller.c: 50: doors[d].locked = 1;
  3277  000C9E  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3278  000CA0  0D0A               	mullw	10
  3279  000CA2  0E01               	movlw	1
  3280  000CA4  26F3               	addwf	prodl,f,c
  3281  000CA6  0E00               	movlw	0
  3282  000CA8  22F4               	addwfc	prodh,f,c
  3283  000CAA  0E60               	movlw	low _doors
  3284  000CAC  24F3               	addwf	prodl,w,c
  3285  000CAE  6ED9               	movwf	fsr2l,c
  3286  000CB0  0E00               	movlw	high _doors
  3287  000CB2  20F4               	addwfc	prodh,w,c
  3288  000CB4  6EDA               	movwf	fsr2h,c
  3289  000CB6  0E01               	movlw	1
  3290  000CB8  6EDF               	movwf	indf2,c
  3291                           
  3292                           ;DOOR_Controller.c: 51: doors[d].lock_port = &PORTB;
  3293  000CBA  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3294  000CBC  0D0A               	mullw	10
  3295  000CBE  0E02               	movlw	2
  3296  000CC0  26F3               	addwf	prodl,f,c
  3297  000CC2  0E00               	movlw	0
  3298  000CC4  22F4               	addwfc	prodh,f,c
  3299  000CC6  0E60               	movlw	low _doors
  3300  000CC8  24F3               	addwf	prodl,w,c
  3301  000CCA  6ED9               	movwf	fsr2l,c
  3302  000CCC  0E00               	movlw	high _doors
  3303  000CCE  20F4               	addwfc	prodh,w,c
  3304  000CD0  6EDA               	movwf	fsr2h,c
  3305  000CD2  0E81               	movlw	129
  3306  000CD4  6EDE               	movwf	postinc2,c
  3307  000CD6  0E0F               	movlw	15
  3308  000CD8  6EDD               	movwf	postdec2,c
  3309                           
  3310                           ;DOOR_Controller.c: 52: doors[d].lock_pin = 7;
  3311  000CDA  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3312  000CDC  0D0A               	mullw	10
  3313  000CDE  0E04               	movlw	4
  3314  000CE0  26F3               	addwf	prodl,f,c
  3315  000CE2  0E00               	movlw	0
  3316  000CE4  22F4               	addwfc	prodh,f,c
  3317  000CE6  0E60               	movlw	low _doors
  3318  000CE8  24F3               	addwf	prodl,w,c
  3319  000CEA  6ED9               	movwf	fsr2l,c
  3320  000CEC  0E00               	movlw	high _doors
  3321  000CEE  20F4               	addwfc	prodh,w,c
  3322  000CF0  6EDA               	movwf	fsr2h,c
  3323  000CF2  0E07               	movlw	7
  3324  000CF4  6EDF               	movwf	indf2,c
  3325                           
  3326                           ;DOOR_Controller.c: 54: doors[d].is_open = 0;
  3327  000CF6  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3328  000CF8  0D0A               	mullw	10
  3329  000CFA  0E06               	movlw	6
  3330  000CFC  26F3               	addwf	prodl,f,c
  3331  000CFE  0E00               	movlw	0
  3332  000D00  22F4               	addwfc	prodh,f,c
  3333  000D02  0E60               	movlw	low _doors
  3334  000D04  24F3               	addwf	prodl,w,c
  3335  000D06  6ED9               	movwf	fsr2l,c
  3336  000D08  0E00               	movlw	high _doors
  3337  000D0A  20F4               	addwfc	prodh,w,c
  3338  000D0C  6EDA               	movwf	fsr2h,c
  3339  000D0E  0E00               	movlw	0
  3340  000D10  6EDF               	movwf	indf2,c
  3341                           
  3342                           ;DOOR_Controller.c: 55: doors[d].was_open = 0;
  3343  000D12  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3344  000D14  0D0A               	mullw	10
  3345  000D16  0E05               	movlw	5
  3346  000D18  26F3               	addwf	prodl,f,c
  3347  000D1A  0E00               	movlw	0
  3348  000D1C  22F4               	addwfc	prodh,f,c
  3349  000D1E  0E60               	movlw	low _doors
  3350  000D20  24F3               	addwf	prodl,w,c
  3351  000D22  6ED9               	movwf	fsr2l,c
  3352  000D24  0E00               	movlw	high _doors
  3353  000D26  20F4               	addwfc	prodh,w,c
  3354  000D28  6EDA               	movwf	fsr2h,c
  3355  000D2A  0E00               	movlw	0
  3356  000D2C  6EDF               	movwf	indf2,c
  3357                           
  3358                           ;DOOR_Controller.c: 56: doors[d].sensor_port = &PORTB;
  3359  000D2E  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3360  000D30  0D0A               	mullw	10
  3361  000D32  0E07               	movlw	7
  3362  000D34  26F3               	addwf	prodl,f,c
  3363  000D36  0E00               	movlw	0
  3364  000D38  22F4               	addwfc	prodh,f,c
  3365  000D3A  0E60               	movlw	low _doors
  3366  000D3C  24F3               	addwf	prodl,w,c
  3367  000D3E  6ED9               	movwf	fsr2l,c
  3368  000D40  0E00               	movlw	high _doors
  3369  000D42  20F4               	addwfc	prodh,w,c
  3370  000D44  6EDA               	movwf	fsr2h,c
  3371  000D46  0E81               	movlw	129
  3372  000D48  6EDE               	movwf	postinc2,c
  3373  000D4A  0E0F               	movlw	15
  3374  000D4C  6EDD               	movwf	postdec2,c
  3375                           
  3376                           ;DOOR_Controller.c: 57: doors[d].sensor_pin = d;
  3377  000D4E  51A0               	movf	C_DOOR_Init@d& (0+255),w,b
  3378  000D50  0D0A               	mullw	10
  3379  000D52  0E09               	movlw	9
  3380  000D54  26F3               	addwf	prodl,f,c
  3381  000D56  0E00               	movlw	0
  3382  000D58  22F4               	addwfc	prodh,f,c
  3383  000D5A  0E60               	movlw	low _doors
  3384  000D5C  24F3               	addwf	prodl,w,c
  3385  000D5E  6ED9               	movwf	fsr2l,c
  3386  000D60  0E00               	movlw	high _doors
  3387  000D62  20F4               	addwfc	prodh,w,c
  3388  000D64  6EDA               	movwf	fsr2h,c
  3389  000D66  C0A0  FFDF         	movff	C_DOOR_Init@d,indf2
  3390                           
  3391                           ; BSR set to: 0
  3392  000D6A  2BA0               	incf	C_DOOR_Init@d& (0+255),f,b
  3393  000D6C  D78A               	goto	l1613
  3394  000D6E                     __end_of_C_DOOR_Init:
  3395                           	opt stack 0
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           prodh	equ	0xFF4
  3401                           prodl	equ	0xFF3
  3402                           intcon	equ	0xFF2
  3403                           intcon2	equ	0xFF1
  3404                           indf0	equ	0xFEF
  3405                           postinc0	equ	0xFEE
  3406                           plusw0	equ	0xFEB
  3407                           fsr0h	equ	0xFEA
  3408                           fsr0l	equ	0xFE9
  3409                           wreg	equ	0xFE8
  3410                           indf1	equ	0xFE7
  3411                           postinc1	equ	0xFE6
  3412                           postdec1	equ	0xFE5
  3413                           fsr1h	equ	0xFE2
  3414                           fsr1l	equ	0xFE1
  3415                           indf2	equ	0xFDF
  3416                           postinc2	equ	0xFDE
  3417                           postdec2	equ	0xFDD
  3418                           plusw2	equ	0xFDB
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _LowISR *****************
  3424 ;; Defined at:
  3425 ;;		line 264 in file "Drivers/UART_Driver.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;                  1    wreg      void 
  3432 ;; Registers used:
  3433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0
  3440 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3441 ;;      Temps:         21       0       0       0       0       0       0       0       0
  3442 ;;      Totals:        21       0       0       0       0       0       0       0       0
  3443 ;;Total ram usage:       21 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    6
  3446 ;; This function calls:
  3447 ;;		_fillDataBuffer
  3448 ;;		_readByte
  3449 ;; This function is called by:
  3450 ;;		Interrupt level 1
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	intcodelo
  3455  000018                     __pintcodelo:
  3456                           	opt stack 0
  3457  000018                     _LowISR:
  3458                           	opt stack 19
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;incstack = 0
  3462  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  3463  00001A  CFD8 F028          	movff	status,??_LowISR
  3464  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  3465  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  3466  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  3467  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  3468  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  3469  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  3470  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  3471  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  3472  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  3473  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  3474  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  3475  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  3476  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  3477  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  3478  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  3479  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  3480  00005E  C044  F039         	movff	btemp,??_LowISR+17
  3481  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  3482  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  3483  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  3484                           
  3485                           ;UART_Driver.c: 265: if (PIR1bits.RC1IF) {
  3486  00006E  AA9E               	btfss	3998,5,c	;volatile
  3487  000070  D005               	goto	i1l177
  3488                           
  3489                           ;UART_Driver.c: 266: fillDataBuffer(readByte());
  3490  000072  ECC0  F00A         	call	_readByte	;wreg free
  3491  000076  EC1D  F004         	call	_fillDataBuffer
  3492                           
  3493                           ;UART_Driver.c: 267: PIR1bits.RC1IF = 0;
  3494  00007A  9A9E               	bcf	3998,5,c	;volatile
  3495  00007C                     i1l177:
  3496  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  3497  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  3498  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  3499  000088  C039  F044         	movff	??_LowISR+17,btemp
  3500  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  3501  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  3502  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  3503  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  3504  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  3505  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  3506  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  3507  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  3508  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  3509  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  3510  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  3511  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  3512  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  3513  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  3514  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  3515  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  3516  0000CC  C028  FFD8         	movff	??_LowISR,status
  3517  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  3518  0000D2  0010               	retfie	
  3519  0000D4                     __end_of_LowISR:
  3520                           	opt stack 0
  3521                           pclatu	equ	0xFFB
  3522                           pclath	equ	0xFFA
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           prodh	equ	0xFF4
  3528                           prodl	equ	0xFF3
  3529                           intcon	equ	0xFF2
  3530                           intcon2	equ	0xFF1
  3531                           indf0	equ	0xFEF
  3532                           postinc0	equ	0xFEE
  3533                           plusw0	equ	0xFEB
  3534                           fsr0h	equ	0xFEA
  3535                           fsr0l	equ	0xFE9
  3536                           wreg	equ	0xFE8
  3537                           indf1	equ	0xFE7
  3538                           postinc1	equ	0xFE6
  3539                           postdec1	equ	0xFE5
  3540                           fsr1h	equ	0xFE2
  3541                           fsr1l	equ	0xFE1
  3542                           bsr	equ	0xFE0
  3543                           indf2	equ	0xFDF
  3544                           postinc2	equ	0xFDE
  3545                           postdec2	equ	0xFDD
  3546                           plusw2	equ	0xFDB
  3547                           fsr2h	equ	0xFDA
  3548                           fsr2l	equ	0xFD9
  3549                           status	equ	0xFD8
  3550                           
  3551 ;; *************** function _readByte *****************
  3552 ;; Defined at:
  3553 ;;		line 74 in file "Drivers/UART_Driver.c"
  3554 ;; Parameters:    Size  Location     Type
  3555 ;;		None
  3556 ;; Auto vars:     Size  Location     Type
  3557 ;;		None
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      unsigned char 
  3560 ;; Registers used:
  3561 ;;		wreg, status,2
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0
  3568 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3570 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3571 ;;Total ram usage:        0 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    1
  3574 ;; This function calls:
  3575 ;;		Nothing
  3576 ;; This function is called by:
  3577 ;;		_LowISR
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           	psect	text21
  3582  001580                     __ptext21:
  3583                           	opt stack 0
  3584  001580                     _readByte:
  3585                           	opt stack 23
  3586                           
  3587                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  3588                           
  3589                           ;incstack = 0
  3590  001580  50AB               	movf	4011,w,c	;volatile
  3591                           
  3592                           ;UART_Driver.c: 77: }
  3593                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  3594  001582  50AB               	movf	4011,w,c	;volatile
  3595                           
  3596                           ;UART_Driver.c: 80: }
  3597                           ;UART_Driver.c: 81: return RCREG;
  3598  001584  50AE               	movf	4014,w,c	;volatile
  3599  001586  0012               	return	
  3600  001588                     __end_of_readByte:
  3601                           	opt stack 0
  3602                           pclatu	equ	0xFFB
  3603                           pclath	equ	0xFFA
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           intcon	equ	0xFF2
  3611                           intcon2	equ	0xFF1
  3612                           indf0	equ	0xFEF
  3613                           postinc0	equ	0xFEE
  3614                           plusw0	equ	0xFEB
  3615                           fsr0h	equ	0xFEA
  3616                           fsr0l	equ	0xFE9
  3617                           wreg	equ	0xFE8
  3618                           indf1	equ	0xFE7
  3619                           postinc1	equ	0xFE6
  3620                           postdec1	equ	0xFE5
  3621                           fsr1h	equ	0xFE2
  3622                           fsr1l	equ	0xFE1
  3623                           bsr	equ	0xFE0
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           postdec2	equ	0xFDD
  3627                           plusw2	equ	0xFDB
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _fillDataBuffer *****************
  3633 ;; Defined at:
  3634 ;;		line 84 in file "Drivers/UART_Driver.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  data            1    wreg     unsigned char 
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;  data            1   38[COMRAM] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      void 
  3641 ;; Registers used:
  3642 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3648 ;;      Params:         0       0       0       0       0       0       0       0       0
  3649 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3650 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3651 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3652 ;;Total ram usage:        1 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    5
  3655 ;; This function calls:
  3656 ;;		_acknowledge
  3657 ;; This function is called by:
  3658 ;;		_LowISR
  3659 ;; This function uses a non-reentrant model
  3660 ;;
  3661                           
  3662                           	psect	text22
  3663  00083A                     __ptext22:
  3664                           	opt stack 0
  3665  00083A                     _fillDataBuffer:
  3666                           	opt stack 19
  3667                           
  3668                           ;incstack = 0
  3669                           ;fillDataBuffer@data stored from wreg
  3670  00083A  6E27               	movwf	fillDataBuffer@data,c
  3671                           
  3672                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  3673  00083C  D0B5               	goto	i1l126
  3674  00083E                     
  3675                           ;UART_Driver.c: 87: if(data == 0x26) {
  3676  00083E  0E26               	movlw	38
  3677  000840  1827               	xorwf	fillDataBuffer@data,w,c
  3678  000842  A4D8               	btfss	status,2,c
  3679  000844  D010               	goto	i1l128
  3680                           
  3681                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  3682  000846  0E00               	movlw	0
  3683  000848  0101               	movlb	1	; () banked
  3684  00084A  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3685                           
  3686                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  3687  00084C  0E00               	movlw	0
  3688  00084E  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3689                           
  3690                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  3691  000850  0E00               	movlw	0
  3692  000852  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3693                           
  3694                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  3695  000854  0E00               	movlw	0
  3696  000856  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3697                           
  3698                           ;UART_Driver.c: 92: readReady = 0;
  3699  000858  0E00               	movlw	0
  3700  00085A  0100               	movlb	0	; () banked
  3701  00085C  6F9F               	movwf	_readReady& (0+255),b
  3702                           
  3703                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  3704  00085E  0E01               	movlw	1
  3705  000860  0101               	movlb	1	; () banked
  3706  000862  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3707                           
  3708                           ;UART_Driver.c: 94: } else {
  3709  000864  0012               	return	
  3710  000866                     i1l128:
  3711                           
  3712                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  3713                           
  3714                           ; BSR set to: 1
  3715  000866  0E00               	movlw	0
  3716  000868  0101               	movlb	1	; () banked
  3717  00086A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3718                           
  3719                           ; BSR set to: 1
  3720                           ;UART_Driver.c: 97: }
  3721                           ;UART_Driver.c: 98: break;
  3722                           
  3723                           ; BSR set to: 1
  3724                           ;UART_Driver.c: 96: return;
  3725  00086C  0012               	return	
  3726  00086E                     
  3727                           ; BSR set to: 1
  3728                           ;UART_Driver.c: 101: if (data == 0x3A) {
  3729                           
  3730                           ; BSR set to: 1
  3731  00086E  0E3A               	movlw	58
  3732  000870  1827               	xorwf	fillDataBuffer@data,w,c
  3733  000872  A4D8               	btfss	status,2,c
  3734  000874  D00D               	goto	i1l133
  3735                           
  3736                           ; BSR set to: 1
  3737                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  3738  000876  0E02               	movlw	2
  3739  000878  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3740                           
  3741                           ; BSR set to: 1
  3742                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  3743  00087A  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3744  00087C  0D01               	mullw	1
  3745  00087E  0E00               	movlw	low _readBuffer
  3746  000880  24F3               	addwf	prodl,w,c
  3747  000882  6ED9               	movwf	fsr2l,c
  3748  000884  0E01               	movlw	high _readBuffer
  3749  000886  20F4               	addwfc	prodh,w,c
  3750  000888  6EDA               	movwf	fsr2h,c
  3751  00088A  0E00               	movlw	0
  3752  00088C  6EDF               	movwf	indf2,c
  3753                           
  3754                           ;UART_Driver.c: 104: } else {
  3755  00088E  0012               	return	
  3756  000890                     i1l133:
  3757                           
  3758                           ; BSR set to: 1
  3759                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  3760                           
  3761                           ; BSR set to: 1
  3762  000890  510A               	movf	(_readBuffer+10)& (0+255),w,b
  3763  000892  0D01               	mullw	1
  3764  000894  0E00               	movlw	low _readBuffer
  3765  000896  24F3               	addwf	prodl,w,c
  3766  000898  6ED9               	movwf	fsr2l,c
  3767  00089A  0E01               	movlw	high _readBuffer
  3768  00089C  20F4               	addwfc	prodh,w,c
  3769  00089E  6EDA               	movwf	fsr2h,c
  3770  0008A0  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3771                           
  3772                           ; BSR set to: 1
  3773                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  3774  0008A4  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  3775                           
  3776                           ; BSR set to: 1
  3777                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  3778  0008A6  0E0A               	movlw	10
  3779  0008A8  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  3780  0008AA  0012               	return	
  3781                           
  3782                           ; BSR set to: 1
  3783                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  3784  0008AC  0E00               	movlw	0
  3785  0008AE  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;UART_Driver.c: 109: }
  3789                           ;UART_Driver.c: 110: }
  3790                           ;UART_Driver.c: 111: break;
  3791                           
  3792                           ; BSR set to: 1
  3793  0008B0  0012               	return	
  3794  0008B2                     
  3795                           ; BSR set to: 1
  3796                           ;UART_Driver.c: 114: if (data == 0x3A) {
  3797                           
  3798                           ; BSR set to: 1
  3799  0008B2  0E3A               	movlw	58
  3800  0008B4  1827               	xorwf	fillDataBuffer@data,w,c
  3801  0008B6  A4D8               	btfss	status,2,c
  3802  0008B8  D00D               	goto	i1l137
  3803                           
  3804                           ; BSR set to: 1
  3805                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  3806  0008BA  0E03               	movlw	3
  3807  0008BC  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3808                           
  3809                           ; BSR set to: 1
  3810                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  3811  0008BE  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3812  0008C0  0D01               	mullw	1
  3813  0008C2  0E0B               	movlw	low (_readBuffer+11)
  3814  0008C4  24F3               	addwf	prodl,w,c
  3815  0008C6  6ED9               	movwf	fsr2l,c
  3816  0008C8  0E01               	movlw	high (_readBuffer+11)
  3817  0008CA  20F4               	addwfc	prodh,w,c
  3818  0008CC  6EDA               	movwf	fsr2h,c
  3819  0008CE  0E00               	movlw	0
  3820  0008D0  6EDF               	movwf	indf2,c
  3821                           
  3822                           ;UART_Driver.c: 117: } else {
  3823  0008D2  0012               	return	
  3824  0008D4                     i1l137:
  3825                           
  3826                           ; BSR set to: 1
  3827                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  3828                           
  3829                           ; BSR set to: 1
  3830  0008D4  513D               	movf	(_readBuffer+61)& (0+255),w,b
  3831  0008D6  0D01               	mullw	1
  3832  0008D8  0E0B               	movlw	low (_readBuffer+11)
  3833  0008DA  24F3               	addwf	prodl,w,c
  3834  0008DC  6ED9               	movwf	fsr2l,c
  3835  0008DE  0E01               	movlw	high (_readBuffer+11)
  3836  0008E0  20F4               	addwfc	prodh,w,c
  3837  0008E2  6EDA               	movwf	fsr2h,c
  3838  0008E4  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3839                           
  3840                           ; BSR set to: 1
  3841                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  3842  0008E8  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  3843                           
  3844                           ; BSR set to: 1
  3845                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  3846  0008EA  0E32               	movlw	50
  3847  0008EC  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  3848  0008EE  0012               	return	
  3849                           
  3850                           ; BSR set to: 1
  3851                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  3852  0008F0  0E00               	movlw	0
  3853  0008F2  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  3854                           
  3855                           ; BSR set to: 1
  3856                           ;UART_Driver.c: 122: }
  3857                           ;UART_Driver.c: 123: }
  3858                           ;UART_Driver.c: 124: break;
  3859                           
  3860                           ; BSR set to: 1
  3861  0008F4  0012               	return	
  3862  0008F6                     
  3863                           ; BSR set to: 1
  3864                           ;UART_Driver.c: 127: if (data == 0x3A) {
  3865                           
  3866                           ; BSR set to: 1
  3867  0008F6  0E3A               	movlw	58
  3868  0008F8  1827               	xorwf	fillDataBuffer@data,w,c
  3869  0008FA  A4D8               	btfss	status,2,c
  3870  0008FC  D00D               	goto	i1l141
  3871                           
  3872                           ; BSR set to: 1
  3873                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  3874  0008FE  0E04               	movlw	4
  3875  000900  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3876                           
  3877                           ; BSR set to: 1
  3878                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  3879  000902  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3880  000904  0D01               	mullw	1
  3881  000906  0E3E               	movlw	low (_readBuffer+62)
  3882  000908  24F3               	addwf	prodl,w,c
  3883  00090A  6ED9               	movwf	fsr2l,c
  3884  00090C  0E01               	movlw	high (_readBuffer+62)
  3885  00090E  20F4               	addwfc	prodh,w,c
  3886  000910  6EDA               	movwf	fsr2h,c
  3887  000912  0E00               	movlw	0
  3888  000914  6EDF               	movwf	indf2,c
  3889                           
  3890                           ;UART_Driver.c: 130: } else {
  3891  000916  0012               	return	
  3892  000918                     i1l141:
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  3896                           
  3897                           ; BSR set to: 1
  3898  000918  5170               	movf	(_readBuffer+112)& (0+255),w,b
  3899  00091A  0D01               	mullw	1
  3900  00091C  0E3E               	movlw	low (_readBuffer+62)
  3901  00091E  24F3               	addwf	prodl,w,c
  3902  000920  6ED9               	movwf	fsr2l,c
  3903  000922  0E01               	movlw	high (_readBuffer+62)
  3904  000924  20F4               	addwfc	prodh,w,c
  3905  000926  6EDA               	movwf	fsr2h,c
  3906  000928  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3907                           
  3908                           ; BSR set to: 1
  3909                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  3910  00092C  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  3914  00092E  0E32               	movlw	50
  3915  000930  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  3916  000932  0012               	return	
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  3920  000934  0E00               	movlw	0
  3921  000936  6F70               	movwf	(_readBuffer+112)& (0+255),b
  3922                           
  3923                           ; BSR set to: 1
  3924                           ;UART_Driver.c: 135: }
  3925                           ;UART_Driver.c: 136: }
  3926                           ;UART_Driver.c: 137: break;
  3927                           
  3928                           ; BSR set to: 1
  3929  000938  0012               	return	
  3930  00093A                     
  3931                           ; BSR set to: 1
  3932                           ;UART_Driver.c: 140: if (data == 0x3A) {
  3933                           
  3934                           ; BSR set to: 1
  3935  00093A  0E3A               	movlw	58
  3936  00093C  1827               	xorwf	fillDataBuffer@data,w,c
  3937  00093E  A4D8               	btfss	status,2,c
  3938  000940  D00D               	goto	i1l145
  3939                           
  3940                           ; BSR set to: 1
  3941                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  3942  000942  0E05               	movlw	5
  3943  000944  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  3944                           
  3945                           ; BSR set to: 1
  3946                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  3947  000946  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  3948  000948  0D01               	mullw	1
  3949  00094A  0E71               	movlw	low (_readBuffer+113)
  3950  00094C  24F3               	addwf	prodl,w,c
  3951  00094E  6ED9               	movwf	fsr2l,c
  3952  000950  0E01               	movlw	high (_readBuffer+113)
  3953  000952  20F4               	addwfc	prodh,w,c
  3954  000954  6EDA               	movwf	fsr2h,c
  3955  000956  0E00               	movlw	0
  3956  000958  6EDF               	movwf	indf2,c
  3957                           
  3958                           ;UART_Driver.c: 143: } else {
  3959  00095A  0012               	return	
  3960  00095C                     i1l145:
  3961                           
  3962                           ; BSR set to: 1
  3963                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  3964                           
  3965                           ; BSR set to: 1
  3966  00095C  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  3967  00095E  0D01               	mullw	1
  3968  000960  0E71               	movlw	low (_readBuffer+113)
  3969  000962  24F3               	addwf	prodl,w,c
  3970  000964  6ED9               	movwf	fsr2l,c
  3971  000966  0E01               	movlw	high (_readBuffer+113)
  3972  000968  20F4               	addwfc	prodh,w,c
  3973  00096A  6EDA               	movwf	fsr2h,c
  3974  00096C  C027  FFDF         	movff	fillDataBuffer@data,indf2
  3975                           
  3976                           ; BSR set to: 1
  3977                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  3978  000970  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  3979                           
  3980                           ; BSR set to: 1
  3981                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  3982  000972  0E32               	movlw	50
  3983  000974  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  3984  000976  0012               	return	
  3985                           
  3986                           ; BSR set to: 1
  3987                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  3988  000978  0E00               	movlw	0
  3989  00097A  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  3990                           
  3991                           ; BSR set to: 1
  3992                           ;UART_Driver.c: 148: }
  3993                           ;UART_Driver.c: 149: }
  3994                           ;UART_Driver.c: 150: break;
  3995                           
  3996                           ; BSR set to: 1
  3997  00097C  0012               	return	
  3998  00097E                     
  3999                           ; BSR set to: 1
  4000                           ;UART_Driver.c: 153: if (data == 0x24) {
  4001                           
  4002                           ; BSR set to: 1
  4003  00097E  0E24               	movlw	36
  4004  000980  1827               	xorwf	fillDataBuffer@data,w,c
  4005  000982  A4D8               	btfss	status,2,c
  4006  000984  D009               	goto	i1l149
  4007                           
  4008                           ; BSR set to: 1
  4009                           ;UART_Driver.c: 154: acknowledge();
  4010  000986  EC45  F009         	call	_acknowledge	;wreg free
  4011                           
  4012                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4013  00098A  0E00               	movlw	0
  4014  00098C  0101               	movlb	1	; () banked
  4015  00098E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;UART_Driver.c: 156: readReady = 1;
  4019  000990  0E01               	movlw	1
  4020  000992  0100               	movlb	0	; () banked
  4021  000994  6F9F               	movwf	_readReady& (0+255),b
  4022                           
  4023                           ;UART_Driver.c: 157: } else {
  4024  000996  0012               	return	
  4025  000998                     i1l149:
  4026                           
  4027                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4028                           
  4029                           ; BSR set to: 0
  4030  000998  5027               	movf	fillDataBuffer@data,w,c
  4031  00099A  0FD0               	addlw	208
  4032  00099C  0101               	movlb	1	; () banked
  4033  00099E  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4034                           
  4035                           ; BSR set to: 1
  4036                           ;UART_Driver.c: 160: }
  4037                           ;UART_Driver.c: 161: break;
  4038  0009A0  0012               	return	
  4039  0009A2                     
  4040                           ; BSR set to: 1
  4041                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4042                           
  4043                           ; BSR set to: 1
  4044  0009A2  0E00               	movlw	0
  4045  0009A4  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4046                           
  4047                           ; BSR set to: 1
  4048                           ;UART_Driver.c: 166: }
  4049                           
  4050                           ;UART_Driver.c: 165: break;
  4051  0009A6  0012               	return	
  4052  0009A8                     i1l126:
  4053                           
  4054                           ; BSR set to: 1
  4055  0009A8  0101               	movlb	1	; () banked
  4056  0009AA  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4057                           
  4058                           ; Switch size 1, requested type "space"
  4059                           ; Number of cases is 6, Range of values is 0 to 5
  4060                           ; switch strategies available:
  4061                           ; Name         Instructions Cycles
  4062                           ; simple_byte           19    10 (average)
  4063                           ;	Chosen strategy is simple_byte
  4064  0009AC  0A00               	xorlw	0	; case 0
  4065  0009AE  B4D8               	btfsc	status,2,c
  4066  0009B0  D746               	goto	i1l127
  4067  0009B2  0A01               	xorlw	1	; case 1
  4068  0009B4  B4D8               	btfsc	status,2,c
  4069  0009B6  D75B               	goto	i1l132
  4070  0009B8  0A03               	xorlw	3	; case 2
  4071  0009BA  B4D8               	btfsc	status,2,c
  4072  0009BC  D77A               	goto	i1l136
  4073  0009BE  0A01               	xorlw	1	; case 3
  4074  0009C0  B4D8               	btfsc	status,2,c
  4075  0009C2  D799               	goto	i1l140
  4076  0009C4  0A07               	xorlw	7	; case 4
  4077  0009C6  B4D8               	btfsc	status,2,c
  4078  0009C8  D7B8               	goto	i1l144
  4079  0009CA  0A01               	xorlw	1	; case 5
  4080  0009CC  B4D8               	btfsc	status,2,c
  4081  0009CE  D7D7               	goto	i1l148
  4082  0009D0  D7E8               	goto	i1l151
  4083  0009D2                     __end_of_fillDataBuffer:
  4084                           	opt stack 0
  4085                           pclatu	equ	0xFFB
  4086                           pclath	equ	0xFFA
  4087                           tblptru	equ	0xFF8
  4088                           tblptrh	equ	0xFF7
  4089                           tblptrl	equ	0xFF6
  4090                           tablat	equ	0xFF5
  4091                           prodh	equ	0xFF4
  4092                           prodl	equ	0xFF3
  4093                           intcon	equ	0xFF2
  4094                           intcon2	equ	0xFF1
  4095                           indf0	equ	0xFEF
  4096                           postinc0	equ	0xFEE
  4097                           plusw0	equ	0xFEB
  4098                           fsr0h	equ	0xFEA
  4099                           fsr0l	equ	0xFE9
  4100                           wreg	equ	0xFE8
  4101                           indf1	equ	0xFE7
  4102                           postinc1	equ	0xFE6
  4103                           postdec1	equ	0xFE5
  4104                           fsr1h	equ	0xFE2
  4105                           fsr1l	equ	0xFE1
  4106                           bsr	equ	0xFE0
  4107                           indf2	equ	0xFDF
  4108                           postinc2	equ	0xFDE
  4109                           postdec2	equ	0xFDD
  4110                           plusw2	equ	0xFDB
  4111                           fsr2h	equ	0xFDA
  4112                           fsr2l	equ	0xFD9
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function _acknowledge *****************
  4116 ;; Defined at:
  4117 ;;		line 169 in file "Drivers/UART_Driver.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4135 ;;Total ram usage:        0 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    4
  4138 ;; This function calls:
  4139 ;;		i1_printf
  4140 ;; This function is called by:
  4141 ;;		_fillDataBuffer
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text23
  4146  00128A                     __ptext23:
  4147                           	opt stack 0
  4148  00128A                     _acknowledge:
  4149                           	opt stack 19
  4150                           
  4151                           ;UART_Driver.c: 170: printf(startCharacter);
  4152                           
  4153                           ;incstack = 0
  4154  00128A  C041  F01A         	movff	_startCharacter,i1printf@f
  4155  00128E  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4156  001292  501A               	movf	i1printf@f,w,c
  4157  001294  101B               	iorwf	i1printf@f+1,w,c
  4158  001296  A4D8               	btfss	status,2,c
  4159  001298  0E00               	movlw	low (__mediumconst shr (0+16))
  4160  00129A  6E1C               	movwf	i1printf@f+2,c
  4161  00129C  EC96  F005         	call	i1_printf	;wreg free
  4162                           
  4163                           ;UART_Driver.c: 172: printf(ackCharacter);
  4164  0012A0  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4165  0012A4  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4166  0012A8  501A               	movf	i1printf@f,w,c
  4167  0012AA  101B               	iorwf	i1printf@f+1,w,c
  4168  0012AC  A4D8               	btfss	status,2,c
  4169  0012AE  0E00               	movlw	low (__mediumconst shr (0+16))
  4170  0012B0  6E1C               	movwf	i1printf@f+2,c
  4171  0012B2  EC96  F005         	call	i1_printf	;wreg free
  4172                           
  4173                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4174  0012B6  0E28               	movlw	low STR_5
  4175  0012B8  6E1A               	movwf	i1printf@f,c
  4176  0012BA  0E08               	movlw	high STR_5
  4177  0012BC  6E1B               	movwf	i1printf@f+1,c
  4178  0012BE  501A               	movf	i1printf@f,w,c
  4179  0012C0  101B               	iorwf	i1printf@f+1,w,c
  4180  0012C2  A4D8               	btfss	status,2,c
  4181  0012C4  0E00               	movlw	low (__mediumconst shr (0+16))
  4182  0012C6  6E1C               	movwf	i1printf@f+2,c
  4183  0012C8  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4184  0012CC  6A1E               	clrf	?i1_printf+4,c
  4185  0012CE  EC96  F005         	call	i1_printf	;wreg free
  4186                           
  4187                           ;UART_Driver.c: 176: printf(stopCharacter);
  4188  0012D2  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4189  0012D6  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4190  0012DA  501A               	movf	i1printf@f,w,c
  4191  0012DC  101B               	iorwf	i1printf@f+1,w,c
  4192  0012DE  A4D8               	btfss	status,2,c
  4193  0012E0  0E00               	movlw	low (__mediumconst shr (0+16))
  4194  0012E2  6E1C               	movwf	i1printf@f+2,c
  4195  0012E4  EC96  F005         	call	i1_printf	;wreg free
  4196  0012E8  0012               	return		;funcret
  4197  0012EA                     __end_of_acknowledge:
  4198                           	opt stack 0
  4199                           pclatu	equ	0xFFB
  4200                           pclath	equ	0xFFA
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           prodh	equ	0xFF4
  4206                           prodl	equ	0xFF3
  4207                           intcon	equ	0xFF2
  4208                           intcon2	equ	0xFF1
  4209                           indf0	equ	0xFEF
  4210                           postinc0	equ	0xFEE
  4211                           plusw0	equ	0xFEB
  4212                           fsr0h	equ	0xFEA
  4213                           fsr0l	equ	0xFE9
  4214                           wreg	equ	0xFE8
  4215                           indf1	equ	0xFE7
  4216                           postinc1	equ	0xFE6
  4217                           postdec1	equ	0xFE5
  4218                           fsr1h	equ	0xFE2
  4219                           fsr1l	equ	0xFE1
  4220                           bsr	equ	0xFE0
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           plusw2	equ	0xFDB
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function i1_printf *****************
  4230 ;; Defined at:
  4231 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4234 ;;		 -> STR_10(6), STR_9(2), STR_8(2), STR_7(2), 
  4235 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  4236 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  4237 ;;		 -> C_DOOR_SendStates@com(3), 
  4238 ;; Auto vars:     Size  Location     Type
  4239 ;;  printf          4    0        struct .
  4240 ;;  printf          3    0        PTR const unsigned char 
  4241 ;;  printf          2   34[COMRAM] unsigned int 
  4242 ;;  printf          2   31[COMRAM] PTR void [1]
  4243 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4244 ;;  printf          2    0        unsigned int 
  4245 ;;  printf          1   37[COMRAM] char 
  4246 ;;  printf          1   36[COMRAM] char 
  4247 ;;  printf          1   33[COMRAM] unsigned char 
  4248 ;;  printf          1   30[COMRAM] unsigned char 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  2   25[COMRAM] int 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4258 ;;      Params:         5       0       0       0       0       0       0       0       0
  4259 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4261 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4262 ;;Total ram usage:       13 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    3
  4265 ;; This function calls:
  4266 ;;		i1___lwdiv
  4267 ;;		i1_putch
  4268 ;; This function is called by:
  4269 ;;		_acknowledge
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text24
  4274  000B2C                     __ptext24:
  4275                           	opt stack 0
  4276  000B2C                     i1_printf:
  4277                           	opt stack 19
  4278                           
  4279                           ;doprnt.c: 466: va_list ap;
  4280                           ;doprnt.c: 499: signed char c;
  4281                           ;doprnt.c: 506: signed char prec;
  4282                           ;doprnt.c: 508: unsigned char flag;
  4283                           ;doprnt.c: 523: union {
  4284                           ;doprnt.c: 524: unsigned long vd;
  4285                           ;doprnt.c: 525: double integ;
  4286                           ;doprnt.c: 526: } tmpval;
  4287                           ;doprnt.c: 528: unsigned int val;
  4288                           ;doprnt.c: 529: unsigned len;
  4289                           ;doprnt.c: 530: const char * cp;
  4290                           ;doprnt.c: 533: *ap = __va_start();
  4291                           
  4292                           ;incstack = 0
  4293  000B2C  0E1D               	movlw	low (?i1_printf+3)
  4294  000B2E  6E20               	movwf	i1printf@ap,c
  4295  000B30  0E00               	movlw	high (?i1_printf+3)
  4296  000B32  6E21               	movwf	i1printf@ap+1,c
  4297                           
  4298                           ;doprnt.c: 536: while(c = *f++) {
  4299  000B34  D085               	goto	i1u94_20
  4300  000B36                     
  4301                           ;doprnt.c: 538: if(c != '%')
  4302  000B36  0E25               	movlw	37
  4303  000B38  1826               	xorwf	i1printf@c,w,c
  4304  000B3A  B4D8               	btfsc	status,2,c
  4305  000B3C  D004               	goto	i1l263
  4306                           
  4307                           ;doprnt.c: 540: {
  4308                           ;doprnt.c: 541: (putch(c) );
  4309  000B3E  5026               	movf	i1printf@c,w,c
  4310  000B40  ECBB  F00A         	call	i1_putch
  4311                           
  4312                           ;doprnt.c: 542: continue;
  4313  000B44  D07D               	goto	i1u94_20
  4314  000B46                     i1l263:
  4315                           
  4316                           ;doprnt.c: 543: }
  4317                           ;doprnt.c: 548: flag = 0;
  4318  000B46  0E00               	movlw	0
  4319  000B48  6E1F               	movwf	i1printf@flag,c
  4320                           
  4321                           ;doprnt.c: 635: switch(c = *f++) {
  4322  000B4A  D004               	goto	i1l264
  4323  000B4C                     
  4324                           ;doprnt.c: 809: (putch(c) );
  4325  000B4C  5026               	movf	i1printf@c,w,c
  4326  000B4E  ECBB  F00A         	call	i1_putch
  4327                           
  4328                           ;doprnt.c: 810: continue;
  4329  000B52  D076               	goto	i1u94_20
  4330  000B54                     i1l264:
  4331  000B54  C01A  FFF6         	movff	i1printf@f,tblptrl
  4332  000B58  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4333  000B5C  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4334  000B60  0E01               	movlw	1
  4335  000B62  261A               	addwf	i1printf@f,f,c
  4336  000B64  0E00               	movlw	0
  4337  000B66  221B               	addwfc	i1printf@f+1,f,c
  4338  000B68  221C               	addwfc	i1printf@f+2,f,c
  4339  000B6A  BAF8               	btfsc	tblptru,5,c
  4340  000B6C  D003               	bra	i1u90_27
  4341  000B6E  0008               	tblrd		*
  4342  000B70  50F5               	movf	tablat,w,c
  4343  000B72  D005               	bra	i1u90_20
  4344  000B74                     i1u90_27:
  4345  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
  4346  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
  4347  000B7C  50EF               	movf	indf0,w,c
  4348  000B7E                     i1u90_20:
  4349  000B7E  6E26               	movwf	i1printf@c,c
  4350  000B80  5026               	movf	i1printf@c,w,c
  4351                           
  4352                           ; Switch size 1, requested type "space"
  4353                           ; Number of cases is 2, Range of values is 0 to 120
  4354                           ; switch strategies available:
  4355                           ; Name         Instructions Cycles
  4356                           ; simple_byte            7     4 (average)
  4357                           ;	Chosen strategy is simple_byte
  4358  000B82  0A00               	xorlw	0	; case 0
  4359  000B84  B4D8               	btfsc	status,2,c
  4360  000B86  0012               	return	
  4361  000B88  0A78               	xorlw	120	; case 120
  4362  000B8A  A4D8               	btfss	status,2,c
  4363  000B8C  D7DF               	goto	i1l269
  4364                           
  4365                           ;doprnt.c: 1273: {
  4366                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4367  000B8E  C020  FFD9         	movff	i1printf@ap,fsr2l
  4368  000B92  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4369  000B96  CFDE F023          	movff	postinc2,i1printf@val
  4370  000B9A  CFDD F024          	movff	postdec2,i1printf@val+1
  4371  000B9E  0E02               	movlw	2
  4372  000BA0  2620               	addwf	i1printf@ap,f,c
  4373  000BA2  0E00               	movlw	0
  4374  000BA4  2221               	addwfc	i1printf@ap+1,f,c
  4375                           
  4376                           ;doprnt.c: 1287: }
  4377                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4378  000BA6  0E01               	movlw	1
  4379  000BA8  6E26               	movwf	i1printf@c,c
  4380  000BAA  D014               	goto	i1l1529
  4381  000BAC                     
  4382                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4383  000BAC  5026               	movf	i1printf@c,w,c
  4384  000BAE  0D02               	mullw	2
  4385  000BB0  0E01               	movlw	low _hexpowers
  4386  000BB2  24F3               	addwf	prodl,w,c
  4387  000BB4  6EF6               	movwf	tblptrl,c
  4388  000BB6  0E08               	movlw	high _hexpowers
  4389  000BB8  20F4               	addwfc	prodh,w,c
  4390  000BBA  6EF7               	movwf	tblptrh,c
  4391  000BBC                     	if	1	;There are 3 active tblptr bytes
  4392  000BBC  6AF8               	clrf	tblptru,c
  4393  000BBE  0E00               	movlw	low (__mediumconst shr (0+16))
  4394  000BC0  22F8               	addwfc	tblptru,f,c
  4395  000BC2                     	endif
  4396  000BC2  0009               	tblrd		*+
  4397  000BC4  50F5               	movf	tablat,w,c
  4398  000BC6  5C23               	subwf	i1printf@val,w,c
  4399  000BC8  0009               	tblrd		*+
  4400  000BCA  50F5               	movf	tablat,w,c
  4401  000BCC  5824               	subwfb	i1printf@val+1,w,c
  4402  000BCE  A0D8               	btfss	status,0,c
  4403  000BD0  D005               	goto	i1u93_20
  4404                           
  4405                           ;doprnt.c: 1318: break;
  4406  000BD2  2A26               	incf	i1printf@c,f,c
  4407  000BD4                     i1l1529:
  4408  000BD4  0E04               	movlw	4
  4409  000BD6  1826               	xorwf	i1printf@c,w,c
  4410  000BD8  A4D8               	btfss	status,2,c
  4411  000BDA  D7E8               	goto	i1l270
  4412  000BDC                     i1u93_20:
  4413                           
  4414                           ;doprnt.c: 1422: {
  4415                           ;doprnt.c: 1469: }
  4416                           ;doprnt.c: 1472: prec = c;
  4417  000BDC  C026  F025         	movff	i1printf@c,i1printf@prec
  4418                           
  4419                           ;doprnt.c: 1474: while(prec--) {
  4420  000BE0  D02B               	goto	i1l273
  4421  000BE2                     
  4422                           ;doprnt.c: 1478: {
  4423                           ;doprnt.c: 1499: {
  4424                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4425  000BE2  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  4426  000BE6  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  4427  000BEA  5025               	movf	i1printf@prec,w,c
  4428  000BEC  0D02               	mullw	2
  4429  000BEE  0E01               	movlw	low _hexpowers
  4430  000BF0  24F3               	addwf	prodl,w,c
  4431  000BF2  6EF6               	movwf	tblptrl,c
  4432  000BF4  0E08               	movlw	high _hexpowers
  4433  000BF6  20F4               	addwfc	prodh,w,c
  4434  000BF8  6EF7               	movwf	tblptrh,c
  4435  000BFA                     	if	1	;There are 3 active tblptr bytes
  4436  000BFA  6AF8               	clrf	tblptru,c
  4437  000BFC  0E00               	movlw	low (__mediumconst shr (0+16))
  4438  000BFE  22F8               	addwfc	tblptru,f,c
  4439  000C00                     	endif
  4440  000C00  0009               	tblrd		*+
  4441  000C02  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  4442  000C06  000A               	tblrd		*-
  4443  000C08  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  4444  000C0C  ECCD  F009         	call	i1___lwdiv	;wreg free
  4445  000C10  5013               	movf	?i1___lwdiv,w,c
  4446  000C12  0B0F               	andlw	15
  4447  000C14  6E22               	movwf	i1printf@idx,c
  4448                           
  4449                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4450  000C16  5022               	movf	i1printf@idx,w,c
  4451  000C18  0D01               	mullw	1
  4452  000C1A  0E09               	movlw	low STR_13
  4453  000C1C  24F3               	addwf	prodl,w,c
  4454  000C1E  6EF6               	movwf	tblptrl,c
  4455  000C20  0E08               	movlw	high STR_13
  4456  000C22  20F4               	addwfc	prodh,w,c
  4457  000C24  6EF7               	movwf	tblptrh,c
  4458  000C26                     	if	1	;There are 3 active tblptr bytes
  4459  000C26  6AF8               	clrf	tblptru,c
  4460  000C28  0E00               	movlw	low (__mediumconst shr (0+16))
  4461  000C2A  22F8               	addwfc	tblptru,f,c
  4462  000C2C                     	endif
  4463  000C2C  0008               	tblrd		*
  4464  000C2E  CFF5 F026          	movff	tablat,i1printf@c
  4465                           
  4466                           ;doprnt.c: 1508: }
  4467                           ;doprnt.c: 1523: }
  4468                           ;doprnt.c: 1524: (putch(c) );
  4469  000C32  5026               	movf	i1printf@c,w,c
  4470  000C34  ECBB  F00A         	call	i1_putch
  4471  000C38                     i1l273:
  4472  000C38  0625               	decf	i1printf@prec,f,c
  4473  000C3A  2825               	incf	i1printf@prec,w,c
  4474  000C3C  A4D8               	btfss	status,2,c
  4475  000C3E  D7D1               	goto	i1l274
  4476  000C40                     i1u94_20:
  4477  000C40  C01A  FFF6         	movff	i1printf@f,tblptrl
  4478  000C44  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4479  000C48  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4480  000C4C  0E01               	movlw	1
  4481  000C4E  261A               	addwf	i1printf@f,f,c
  4482  000C50  0E00               	movlw	0
  4483  000C52  221B               	addwfc	i1printf@f+1,f,c
  4484  000C54  221C               	addwfc	i1printf@f+2,f,c
  4485  000C56  BAF8               	btfsc	tblptru,5,c
  4486  000C58  D003               	bra	i1u95_27
  4487  000C5A  0008               	tblrd		*
  4488  000C5C  50F5               	movf	tablat,w,c
  4489  000C5E  D005               	bra	i1u95_20
  4490  000C60                     i1u95_27:
  4491  000C60  CFF6 FFE9          	movff	tblptrl,fsr0l
  4492  000C64  CFF7 FFEA          	movff	tblptrh,fsr0h
  4493  000C68  50EF               	movf	indf0,w,c
  4494  000C6A                     i1u95_20:
  4495  000C6A  6E26               	movwf	i1printf@c,c
  4496  000C6C  5026               	movf	i1printf@c,w,c
  4497  000C6E  B4D8               	btfsc	status,2,c
  4498  000C70  0012               	return	
  4499  000C72  D761               	goto	i1l262
  4500  000C74                     __end_ofi1_printf:
  4501                           	opt stack 0
  4502                           pclatu	equ	0xFFB
  4503                           pclath	equ	0xFFA
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           intcon2	equ	0xFF1
  4512                           indf0	equ	0xFEF
  4513                           postinc0	equ	0xFEE
  4514                           plusw0	equ	0xFEB
  4515                           fsr0h	equ	0xFEA
  4516                           fsr0l	equ	0xFE9
  4517                           wreg	equ	0xFE8
  4518                           indf1	equ	0xFE7
  4519                           postinc1	equ	0xFE6
  4520                           postdec1	equ	0xFE5
  4521                           fsr1h	equ	0xFE2
  4522                           fsr1l	equ	0xFE1
  4523                           bsr	equ	0xFE0
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           plusw2	equ	0xFDB
  4528                           fsr2h	equ	0xFDA
  4529                           fsr2l	equ	0xFD9
  4530                           status	equ	0xFD8
  4531                           
  4532 ;; *************** function i1_putch *****************
  4533 ;; Defined at:
  4534 ;;		line 260 in file "Drivers/UART_Driver.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  data            1    wreg     unsigned char 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;  data            1   19[COMRAM] unsigned char 
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  1    wreg      void 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4548 ;;      Params:         0       0       0       0       0       0       0       0       0
  4549 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4550 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4551 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4552 ;;Total ram usage:        1 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    2
  4555 ;; This function calls:
  4556 ;;		i1_writeByte
  4557 ;; This function is called by:
  4558 ;;		i1_printf
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text25
  4563  001576                     __ptext25:
  4564                           	opt stack 0
  4565  001576                     i1_putch:
  4566                           	opt stack 19
  4567                           
  4568                           ;incstack = 0
  4569                           ;i1putch@data stored from wreg
  4570  001576  6E14               	movwf	i1putch@data,c
  4571                           
  4572                           ;UART_Driver.c: 261: writeByte(data);
  4573  001578  5014               	movf	i1putch@data,w,c
  4574  00157A  ECB5  F00A         	call	i1_writeByte
  4575  00157E  0012               	return		;funcret
  4576  001580                     __end_ofi1_putch:
  4577                           	opt stack 0
  4578                           pclatu	equ	0xFFB
  4579                           pclath	equ	0xFFA
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           intcon2	equ	0xFF1
  4588                           indf0	equ	0xFEF
  4589                           postinc0	equ	0xFEE
  4590                           plusw0	equ	0xFEB
  4591                           fsr0h	equ	0xFEA
  4592                           fsr0l	equ	0xFE9
  4593                           wreg	equ	0xFE8
  4594                           indf1	equ	0xFE7
  4595                           postinc1	equ	0xFE6
  4596                           postdec1	equ	0xFE5
  4597                           fsr1h	equ	0xFE2
  4598                           fsr1l	equ	0xFE1
  4599                           bsr	equ	0xFE0
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           plusw2	equ	0xFDB
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function i1_writeByte *****************
  4609 ;; Defined at:
  4610 ;;		line 69 in file "Drivers/UART_Driver.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  data            1    wreg     unsigned char 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  data            1   18[COMRAM] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  1    wreg      void 
  4617 ;; Registers used:
  4618 ;;		wreg
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4624 ;;      Params:         0       0       0       0       0       0       0       0       0
  4625 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4627 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4628 ;;Total ram usage:        1 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    1
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		i1_putch
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text26
  4639  00156A                     __ptext26:
  4640                           	opt stack 0
  4641  00156A                     i1_writeByte:
  4642                           	opt stack 19
  4643                           
  4644                           ;incstack = 0
  4645                           ;i1writeByte@data stored from wreg
  4646  00156A  6E13               	movwf	i1writeByte@data,c
  4647  00156C                     
  4648                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  4649  00156C  A2AC               	btfss	4012,1,c	;volatile
  4650  00156E  D7FE               	goto	i1l1405
  4651                           
  4652                           ;UART_Driver.c: 71: TXREG = data;
  4653  001570  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  4654  001574  0012               	return		;funcret
  4655  001576                     __end_ofi1_writeByte:
  4656                           	opt stack 0
  4657                           pclatu	equ	0xFFB
  4658                           pclath	equ	0xFFA
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           intcon	equ	0xFF2
  4666                           intcon2	equ	0xFF1
  4667                           indf0	equ	0xFEF
  4668                           postinc0	equ	0xFEE
  4669                           plusw0	equ	0xFEB
  4670                           fsr0h	equ	0xFEA
  4671                           fsr0l	equ	0xFE9
  4672                           wreg	equ	0xFE8
  4673                           indf1	equ	0xFE7
  4674                           postinc1	equ	0xFE6
  4675                           postdec1	equ	0xFE5
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           bsr	equ	0xFE0
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           plusw2	equ	0xFDB
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function i1___lwdiv *****************
  4688 ;; Defined at:
  4689 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  dividend        2   18[COMRAM] unsigned int 
  4692 ;;  divisor         2   20[COMRAM] unsigned int 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  4695 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  2   18[COMRAM] unsigned int 
  4698 ;; Registers used:
  4699 ;;		wreg, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4705 ;;      Params:         4       0       0       0       0       0       0       0       0
  4706 ;;      Locals:         3       0       0       0       0       0       0       0       0
  4707 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4708 ;;      Totals:         7       0       0       0       0       0       0       0       0
  4709 ;;Total ram usage:        7 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; Hardware stack levels required when called:    1
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		i1_printf
  4716 ;; This function uses a non-reentrant model
  4717 ;;
  4718                           
  4719                           	psect	text27
  4720  00139A                     __ptext27:
  4721                           	opt stack 0
  4722  00139A                     i1___lwdiv:
  4723                           	opt stack 20
  4724                           
  4725                           ;incstack = 0
  4726  00139A  0E00               	movlw	0
  4727  00139C  6E18               	movwf	i1___lwdiv@quotient+1,c
  4728  00139E  0E00               	movlw	0
  4729  0013A0  6E17               	movwf	i1___lwdiv@quotient,c
  4730  0013A2  5015               	movf	i1___lwdiv@divisor,w,c
  4731  0013A4  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  4732  0013A6  B4D8               	btfsc	status,2,c
  4733  0013A8  D01C               	goto	i1l686
  4734  0013AA  0E01               	movlw	1
  4735  0013AC  6E19               	movwf	i1___lwdiv@counter,c
  4736  0013AE  D004               	goto	i1l681
  4737  0013B0  90D8               	bcf	status,0,c
  4738  0013B2  3615               	rlcf	i1___lwdiv@divisor,f,c
  4739  0013B4  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  4740  0013B6  2A19               	incf	i1___lwdiv@counter,f,c
  4741  0013B8                     i1l681:
  4742  0013B8  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  4743  0013BA  D7FA               	goto	i1l682
  4744  0013BC                     i1u79_20:
  4745  0013BC  90D8               	bcf	status,0,c
  4746  0013BE  3617               	rlcf	i1___lwdiv@quotient,f,c
  4747  0013C0  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  4748  0013C2  5015               	movf	i1___lwdiv@divisor,w,c
  4749  0013C4  5C13               	subwf	i1___lwdiv@dividend,w,c
  4750  0013C6  5016               	movf	i1___lwdiv@divisor+1,w,c
  4751  0013C8  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  4752  0013CA  A0D8               	btfss	status,0,c
  4753  0013CC  D005               	goto	i1l685
  4754  0013CE  5015               	movf	i1___lwdiv@divisor,w,c
  4755  0013D0  5E13               	subwf	i1___lwdiv@dividend,f,c
  4756  0013D2  5016               	movf	i1___lwdiv@divisor+1,w,c
  4757  0013D4  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  4758  0013D6  8017               	bsf	i1___lwdiv@quotient,0,c
  4759  0013D8                     i1l685:
  4760  0013D8  90D8               	bcf	status,0,c
  4761  0013DA  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  4762  0013DC  3215               	rrcf	i1___lwdiv@divisor,f,c
  4763  0013DE  2E19               	decfsz	i1___lwdiv@counter,f,c
  4764  0013E0  D7ED               	goto	i1u79_20
  4765  0013E2                     i1l686:
  4766  0013E2  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  4767  0013E6  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  4768  0013EA  0012               	return		;funcret
  4769  0013EC                     __end_ofi1___lwdiv:
  4770                           	opt stack 0
  4771                           pclatu	equ	0xFFB
  4772                           pclath	equ	0xFFA
  4773                           tblptru	equ	0xFF8
  4774                           tblptrh	equ	0xFF7
  4775                           tblptrl	equ	0xFF6
  4776                           tablat	equ	0xFF5
  4777                           prodh	equ	0xFF4
  4778                           prodl	equ	0xFF3
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           indf0	equ	0xFEF
  4782                           postinc0	equ	0xFEE
  4783                           plusw0	equ	0xFEB
  4784                           fsr0h	equ	0xFEA
  4785                           fsr0l	equ	0xFE9
  4786                           wreg	equ	0xFE8
  4787                           indf1	equ	0xFE7
  4788                           postinc1	equ	0xFE6
  4789                           postdec1	equ	0xFE5
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           bsr	equ	0xFE0
  4793                           indf2	equ	0xFDF
  4794                           postinc2	equ	0xFDE
  4795                           postdec2	equ	0xFDD
  4796                           plusw2	equ	0xFDB
  4797                           fsr2h	equ	0xFDA
  4798                           fsr2l	equ	0xFD9
  4799                           status	equ	0xFD8
  4800                           
  4801 ;; *************** function _HighISR *****************
  4802 ;; Defined at:
  4803 ;;		line 65 in file "main.c"
  4804 ;; Parameters:    Size  Location     Type
  4805 ;;		None
  4806 ;; Auto vars:     Size  Location     Type
  4807 ;;		None
  4808 ;; Return value:  Size  Location     Type
  4809 ;;                  1    wreg      void 
  4810 ;; Registers used:
  4811 ;;		wreg, status,2
  4812 ;; Tracked objects:
  4813 ;;		On entry : 0/0
  4814 ;;		On exit  : 0/0
  4815 ;;		Unchanged: 0/0
  4816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4817 ;;      Params:         0       0       0       0       0       0       0       0       0
  4818 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4819 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4820 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4821 ;;Total ram usage:       18 bytes
  4822 ;; Hardware stack levels used:    1
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		Interrupt level 2
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	intcode
  4831  000008                     __pintcode:
  4832                           	opt stack 0
  4833  000008                     _HighISR:
  4834                           	opt stack 19
  4835                           
  4836                           ;incstack = 0
  4837  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4838  00000A  EDB1  F008         	call	int_func,f	;refresh shadow registers
  4839                           pclatu	equ	0xFFB
  4840                           pclath	equ	0xFFA
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           intcon2	equ	0xFF1
  4849                           indf0	equ	0xFEF
  4850                           postinc0	equ	0xFEE
  4851                           plusw0	equ	0xFEB
  4852                           fsr0h	equ	0xFEA
  4853                           fsr0l	equ	0xFE9
  4854                           wreg	equ	0xFE8
  4855                           indf1	equ	0xFE7
  4856                           postinc1	equ	0xFE6
  4857                           postdec1	equ	0xFE5
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           bsr	equ	0xFE0
  4861                           indf2	equ	0xFDF
  4862                           postinc2	equ	0xFDE
  4863                           postdec2	equ	0xFDD
  4864                           plusw2	equ	0xFDB
  4865                           fsr2h	equ	0xFDA
  4866                           fsr2l	equ	0xFD9
  4867                           status	equ	0xFD8
  4868                           
  4869                           	psect	intcode_body
  4870  001162                     __pintcode_body:
  4871                           	opt stack 19
  4872  001162                     int_func:
  4873                           	opt stack 19
  4874  001162  0006               	pop		; remove dummy address from shadow register refresh
  4875  001164  CFFA F001          	movff	pclath,??_HighISR
  4876  001168  CFFB F002          	movff	pclatu,??_HighISR+1
  4877  00116C  CFE9 F003          	movff	fsr0l,??_HighISR+2
  4878  001170  CFEA F004          	movff	fsr0h,??_HighISR+3
  4879  001174  CFE1 F005          	movff	fsr1l,??_HighISR+4
  4880  001178  CFE2 F006          	movff	fsr1h,??_HighISR+5
  4881  00117C  CFD9 F007          	movff	fsr2l,??_HighISR+6
  4882  001180  CFDA F008          	movff	fsr2h,??_HighISR+7
  4883  001184  CFF3 F009          	movff	prodl,??_HighISR+8
  4884  001188  CFF4 F00A          	movff	prodh,??_HighISR+9
  4885  00118C  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  4886  001190  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  4887  001194  CFF8 F00D          	movff	tblptru,??_HighISR+12
  4888  001198  CFF5 F00E          	movff	tablat,??_HighISR+13
  4889  00119C  C044  F00F         	movff	btemp,??_HighISR+14
  4890  0011A0  C045  F010         	movff	btemp+1,??_HighISR+15
  4891  0011A4  C046  F011         	movff	btemp+2,??_HighISR+16
  4892  0011A8  C047  F012         	movff	btemp+3,??_HighISR+17
  4893                           
  4894                           ;main.c: 66: if (INTCONbits.TMR0IF) {
  4895  0011AC  A4F2               	btfss	intcon,2,c	;volatile
  4896  0011AE  D004               	goto	i2l249
  4897                           
  4898                           ;main.c: 67: tick = 1;
  4899  0011B0  0E01               	movlw	1
  4900  0011B2  0100               	movlb	0	; () banked
  4901  0011B4  6F9E               	movwf	_tick& (0+255),b
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;main.c: 68: INTCONbits.TMR0IF = 0;
  4905  0011B6  94F2               	bcf	intcon,2,c	;volatile
  4906  0011B8                     i2l249:
  4907                           
  4908                           ; BSR set to: 0
  4909  0011B8  C012  F047         	movff	??_HighISR+17,btemp+3
  4910  0011BC  C011  F046         	movff	??_HighISR+16,btemp+2
  4911  0011C0  C010  F045         	movff	??_HighISR+15,btemp+1
  4912  0011C4  C00F  F044         	movff	??_HighISR+14,btemp
  4913  0011C8  C00E  FFF5         	movff	??_HighISR+13,tablat
  4914  0011CC  C00D  FFF8         	movff	??_HighISR+12,tblptru
  4915  0011D0  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  4916  0011D4  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  4917  0011D8  C00A  FFF4         	movff	??_HighISR+9,prodh
  4918  0011DC  C009  FFF3         	movff	??_HighISR+8,prodl
  4919  0011E0  C008  FFDA         	movff	??_HighISR+7,fsr2h
  4920  0011E4  C007  FFD9         	movff	??_HighISR+6,fsr2l
  4921  0011E8  C006  FFE2         	movff	??_HighISR+5,fsr1h
  4922  0011EC  C005  FFE1         	movff	??_HighISR+4,fsr1l
  4923  0011F0  C004  FFEA         	movff	??_HighISR+3,fsr0h
  4924  0011F4  C003  FFE9         	movff	??_HighISR+2,fsr0l
  4925  0011F8  C002  FFFB         	movff	??_HighISR+1,pclatu
  4926  0011FC  C001  FFFA         	movff	??_HighISR,pclath
  4927  001200  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4928  001202  0011               	retfie		f
  4929  001204                     __end_of_HighISR:
  4930                           	opt stack 0
  4931                           pclatu	equ	0xFFB
  4932                           pclath	equ	0xFFA
  4933                           tblptru	equ	0xFF8
  4934                           tblptrh	equ	0xFF7
  4935                           tblptrl	equ	0xFF6
  4936                           tablat	equ	0xFF5
  4937                           prodh	equ	0xFF4
  4938                           prodl	equ	0xFF3
  4939                           intcon	equ	0xFF2
  4940                           intcon2	equ	0xFF1
  4941                           indf0	equ	0xFEF
  4942                           postinc0	equ	0xFEE
  4943                           plusw0	equ	0xFEB
  4944                           fsr0h	equ	0xFEA
  4945                           fsr0l	equ	0xFE9
  4946                           wreg	equ	0xFE8
  4947                           indf1	equ	0xFE7
  4948                           postinc1	equ	0xFE6
  4949                           postdec1	equ	0xFE5
  4950                           fsr1h	equ	0xFE2
  4951                           fsr1l	equ	0xFE1
  4952                           bsr	equ	0xFE0
  4953                           indf2	equ	0xFDF
  4954                           postinc2	equ	0xFDE
  4955                           postdec2	equ	0xFDD
  4956                           plusw2	equ	0xFDB
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           pclatu	equ	0xFFB
  4961                           pclath	equ	0xFFA
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           intcon	equ	0xFF2
  4969                           intcon2	equ	0xFF1
  4970                           indf0	equ	0xFEF
  4971                           postinc0	equ	0xFEE
  4972                           plusw0	equ	0xFEB
  4973                           fsr0h	equ	0xFEA
  4974                           fsr0l	equ	0xFE9
  4975                           wreg	equ	0xFE8
  4976                           indf1	equ	0xFE7
  4977                           postinc1	equ	0xFE6
  4978                           postdec1	equ	0xFE5
  4979                           fsr1h	equ	0xFE2
  4980                           fsr1l	equ	0xFE1
  4981                           bsr	equ	0xFE0
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           plusw2	equ	0xFDB
  4986                           fsr2h	equ	0xFDA
  4987                           fsr2l	equ	0xFD9
  4988                           status	equ	0xFD8
  4989                           
  4990                           	psect	rparam
  4991  0000                     pclatu	equ	0xFFB
  4992                           pclath	equ	0xFFA
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           intcon2	equ	0xFF1
  5001                           indf0	equ	0xFEF
  5002                           postinc0	equ	0xFEE
  5003                           plusw0	equ	0xFEB
  5004                           fsr0h	equ	0xFEA
  5005                           fsr0l	equ	0xFE9
  5006                           wreg	equ	0xFE8
  5007                           indf1	equ	0xFE7
  5008                           postinc1	equ	0xFE6
  5009                           postdec1	equ	0xFE5
  5010                           fsr1h	equ	0xFE2
  5011                           fsr1l	equ	0xFE1
  5012                           bsr	equ	0xFE0
  5013                           indf2	equ	0xFDF
  5014                           postinc2	equ	0xFDE
  5015                           postdec2	equ	0xFDD
  5016                           plusw2	equ	0xFDB
  5017                           fsr2h	equ	0xFDA
  5018                           fsr2l	equ	0xFD9
  5019                           status	equ	0xFD8
  5020                           
  5021                           	psect	temp
  5022  000044                     btemp:
  5023                           	opt stack 0
  5024  000044                     	ds	1
  5025  0000                     int$flags	set	btemp
  5026  0000                     wtemp6	set	btemp+1
  5027                           pclatu	equ	0xFFB
  5028                           pclath	equ	0xFFA
  5029                           tblptru	equ	0xFF8
  5030                           tblptrh	equ	0xFF7
  5031                           tblptrl	equ	0xFF6
  5032                           tablat	equ	0xFF5
  5033                           prodh	equ	0xFF4
  5034                           prodl	equ	0xFF3
  5035                           intcon	equ	0xFF2
  5036                           intcon2	equ	0xFF1
  5037                           indf0	equ	0xFEF
  5038                           postinc0	equ	0xFEE
  5039                           plusw0	equ	0xFEB
  5040                           fsr0h	equ	0xFEA
  5041                           fsr0l	equ	0xFE9
  5042                           wreg	equ	0xFE8
  5043                           indf1	equ	0xFE7
  5044                           postinc1	equ	0xFE6
  5045                           postdec1	equ	0xFE5
  5046                           fsr1h	equ	0xFE2
  5047                           fsr1l	equ	0xFE1
  5048                           bsr	equ	0xFE0
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           plusw2	equ	0xFDB
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    8
    Data        8
    BSS         231
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     33     102
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_12(CODE[2]), STR_11(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_10(CODE[6]), STR_9(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_10(CODE[6]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_9(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6181
                                             31 BANK0      2     2      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                      _D_TMR0_Enable
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4     395
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    8     8      0    2522
                                             23 BANK0      8     8      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     383
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1877
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_Init                                          1     1      0     266
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_Init
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_TMR0_Enable
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     21      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     14F      20        0.0%
DATA                 0      0     14F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Nov 25 18:46:00 2017

                         l14 0C8A                           l42 1006                           l44 10BC  
                         l37 1212                  __CFG_BOR$ON 000000                           bsr 000FE0  
                __CFG_BORV$3 000000                 _ackCharacter 003D                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l240 0F14                          l340 0FC2                          l341 0FD0  
                        l333 0F48                          l237 0EB2                          l270 0A5C  
                        l262 09DE                          l342 0FE6                          l334 0F60  
                        l263 09EE                          l167 14D0                          l264 09FE  
                        l336 0F8E                          l273 0AEA                          l337 0F82  
                        l274 0A92                          l194 152E                          l269 09F6  
                        l681 1366                          l825 1448                          l682 135E  
                        l826 143E                          l685 1386                          l686 1390  
               __CFG_CPB$OFF 000000                 __CFG_CPD$OFF 000000                          u820 0A2A  
                        u760 136A                          u850 0A8C                          u827 0A20  
                        u860 0AF4                          u870 0B20                          u971 0DE4  
                        u877 0B16                          u981 0E1E                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000          __end_ofi1_writeByte 1576  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1401 1552  
                       l1613 0C82                         l1641 0FFE                         l1629 120A  
                       l1487 0A84                         STR_1 0835                         STR_2 0833  
                       STR_3 0824                         STR_4 0820                         STR_5 0828  
                       STR_6 0837                         STR_7 0837                         STR_8 082F  
                       STR_9 082B                         u1104 127A                         u1040 0F92  
                       u1105 1276                         u1141 1054                         u1401 0EC8  
                       u1271 14AE                         u1290 147E                         u1457 0E8A  
                       u1467 0E42                         u9711 0DE2                         u9811 0E1C  
               ?_C_DOOR_Init 0001                         _baud 0043                         _main 0E4E  
                       _read 0092                         _tick 009E                         fsr0h 000FEA  
                       fsr1h 000FE2                         indf0 000FEF                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf1 000FE7                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 0044  
                       prodh 000FF4                         prodl 000FF3                         start 00D4  
              __CFG_IESO$OFF 000000              __end_ofi1_putch 1580              __end_of_HighISR 1204  
              __CFG_MCLRE$ON 000000                 ___param_bank 000000               _startCharacter 0041  
              __CFG_PLLDIV$5 000000         commandAndMessage@com 00AA      __size_of_C_DOOR_LockAll 000E  
       commandAndMessage@mes 00AC              __end_of___aldiv 0FF8                        ?_main 0001  
                      STR_10 081A                        STR_11 082D                        STR_12 0831  
                      STR_13 0809              __end_of___lwdiv 139A                        i1l140 08F6  
                      i1l132 086E                        i1l141 0918                        i1l133 0890  
                      i1l126 09A8                        i1l151 09A2                        i1l127 083E  
                      i1l144 093A                        i1l136 08B2                        i1l128 0866  
                      i1l145 095C                        i1l137 08D4                        i1l148 097E  
                      i1l149 0998                        i1l270 0BAC                        i1l262 0B36  
                      i1l263 0B46                        i1l264 0B54                        i1l273 0C38  
                      i1l177 007C                        i1l274 0BE2                        i1l269 0B4C  
                      i2l249 11B8                        i1l681 13B8                        i1l682 13B0  
                      i1l685 13D8                        i1l686 13E2                        _RCREG 000FAE  
       __size_of_acknowledge 0060                        _SPBRG 000FAF                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                __CFG_USBDIV$1 000000  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TXREG 000FAD                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0050  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
              __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 1540  
            i1writeByte@data 0013                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00AE                 ?_D_UART_Read 00A0                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                        plusw2 000FDB                        status 000FD8  
                      wtemp6 0045                 ?_D_PORT_Init 0001           __size_ofi1___lwdiv 0052  
              _stopCharacter 003F             __end_ofi1_printf 0C74                   i1printf@ap 0020  
            __initialization 12EA             _D_UART_Init$1494 00B3                 __end_of_main 0F2A  
                     ??_main 00BF                  i1_writeByte 156A                __activetblptr 000003  
            __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00A0                       _ADCON1 000FC1  
                     ?_putch 0001                       i1l1405 156C                       i1l1529 0BD4  
                  ??i1_putch 0014             _C_DOOR_UnlockAll 1532                    ??_HighISR 0001  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___aldiv 00A8  
                  ??___lwdiv 00A4             __end_of_readByte 1588                       clear_0 1328  
                     clear_1 1334                       _printf 09D2                       _strcmp 143C  
          __end_ofi1___lwdiv 13EC                 __pdataCOMRAM 003D        D_UART_Init@interrupts 00B2  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 00B2              D_UART_Init@baud 00B0  
            D_UART_Init@name 00AE   __end_of_C_DOOR_ReadSensors 128A                   __accesstop 0060  
    __end_of__initialization 133C              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 00FA                  i1printf@idx 0022                  i1printf@val 0023  
             __pcstackCOMRAM 0001                 __pidataBANK0 158E                 C_DOOR_Init@d 00A0  
                i1putch@data 0014                __end_of_putch 154E             _messageCharacter 00C4  
             _C_DOOR_LockAll 155C       __size_of_D_UART_Enable 0024               ??_D_UART_Write 00B6  
                  ?i1_printf 001A       __size_of_D_TMR0_Enable 0014            _C_DOOR_SendStates 0FF8  
                    ??_putch 00A1           ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060  
                 __pbssBANK1 0100         __size_of_D_UART_Init 00A2         __size_of_D_UART_Read 002E  
       __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00B7                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E       __end_of_C_DOOR_LockAll 156A                   _deviceName 00C1  
                    ?_printf 00A7                      ?_strcmp 00A0    __end_of_C_DOOR_SendStates 10C0  
                 ??i1_printf 001F      __size_of_fillDataBuffer 0198                      i1u90_20 0B7E  
                    i1u90_27 0B74                      i1u93_20 0BDC                      i1u94_20 0C40  
        D_UART_Enable@enable 00A0                      i1u79_20 13BC                      i1u95_20 0C6A  
                    i1u95_27 0C60              __CFG_VREGEN$OFF 000000                      i1_putch 1576  
                    _HighISR 0008                    ?_readByte 0001           __size_of_writeByte 000E  
              _D_UART_Enable 14B8                      __Hparam 0000                      __Lparam 0000  
            __size_of_LowISR 00BC                _D_TMR0_Enable 151E                   _readBuffer 0100  
                    ___aldiv 0F2A              ?_C_DOOR_LockAll 0001                      ___lwdiv 1346  
               __psmallconst 0800          C_DOOR_ReadSensors@d 00A4              __CFG_STVREN$OFF 000000  
              ??_acknowledge 0027                      __pcinit 12EA                      __ramtop 0800  
   __end_of_C_DOOR_UnlockAll 1540                      __ptext0 0E4E                      __ptext1 143C  
                    __ptext2 148A                      __ptext3 10C0                      __ptext4 0F2A  
                    __ptext5 14B8                      __ptext6 14DC                      __ptext7 151E  
                    __ptext8 1500                      __ptext9 1532              __size_of_printf 015A  
                  _T0CONbits 000FD5                 ?i1_writeByte 0001              __size_of_strcmp 004E  
          __end_of_hexpowers 0809            i1___lwdiv@divisor 0015            i1___lwdiv@counter 0019  
       C_DOOR_SendStates@com 00B9         C_DOOR_SendStates@mes 00BC             ___aldiv@dividend 00A0  
             __pintcode_body 1162         end_of_initialization 133C                   ??_readByte 0013  
        D_TMR0_Enable@enable 00A0                      int_func 1162               ?_D_UART_Enable 0001  
             ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 0E4E                    _RCSTAbits 000FAB  
                    printf@c 00B1                      printf@f 00A7             ___aldiv@quotient 00AA  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc1 000FE6                      postinc2 000FDE                      strcmp@r 00A5  
          __end_of_writeByte 155C   __size_of_C_DOOR_SendStates 00C8                    _TRISCbits 000F94  
        __end_of_acknowledge 12EA                    i1___lwdiv 139A                    _TXSTAbits 000FAC  
               i1printf@flag 001F                 i1printf@prec 0025           _C_DOOR_ReadSensors 1204  
             __end_of_LowISR 00D4                  _BAUDCONbits 000FB8          ?_C_DOOR_ReadSensors 0001  
              __pidataCOMRAM 1588               __end_of_printf 0B2C               __end_of_strcmp 148A  
        start_initialization 12EA               _fillDataBuffer 083A                    i1printf@c 0026  
                  i1printf@f 001A                   ?i1___lwdiv 0013            __size_ofi1_printf 0148  
       ??_C_DOOR_ReadSensors 00A0              ??_D_UART_Enable 00A0                ??_C_DOOR_Init 00A0  
            ??_D_TMR0_Enable 00A0                     ??_LowISR 0028                  __pdataBANK0 00C4  
           __CFG_LPT1OSC$OFF 000000                  _acknowledge 128A             D_UART_Write@data 00B4  
                   ??_printf 00AA                     ??_strcmp 00A4       __end_of_fillDataBuffer 09D2  
                __pbssCOMRAM 0043         __size_ofi1_writeByte 000C                __pcstackBANK0 00A0  
              ??_D_UART_Init 00B3                ??_D_UART_Read 00A6                ??_D_TMR0_Init 00A1  
                   ?i1_putch 0001                     ?_HighISR 0001        __size_of_D_UART_Write 00E0  
              ??_D_PORT_Init 00A0                    __pnvBANK0 00C1             ??_C_DOOR_LockAll 00A0  
          __size_of_readByte 0008             ___lwdiv@dividend 00A0          __end_of_C_DOOR_Init 0D6E  
                  __pintcode 0008                     ?___aldiv 00A0                     ?___lwdiv 00A0  
                __pintcodelo 0018           fillDataBuffer@data 0027            ?_C_DOOR_UnlockAll 0001  
            ?_fillDataBuffer 0001                  __smallconst 0800           ??_C_DOOR_UnlockAll 00A0  
               _D_UART_Write 0D6E                    _hexpowers 0801                    _readReady 009F  
           ___lwdiv@quotient 00A4                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00A4              ___aldiv@counter 00A8                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 1162          __end_of_D_UART_Read 14B8  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 1500                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 151E                   printf@flag 00AA  
                 printf@prec 00B0                     i1_printf 0B2C                    _writeByte 154E  
                _INTCON2bits 000FF1                    copy_data0 1316                  _C_DOOR_Init 0C74  
           __size_ofi1_putch 000A             __size_of_HighISR 11FC                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___aldiv 00CE             __size_of___lwdiv 0054  
            ___lwdiv@divisor 00A2              ___lwdiv@counter 00A6                     __ptext10 0FF8  
                   __ptext11 13EC                     __ptext12 0D6E                     __ptext21 1580  
                   __ptext13 09D2                     __ptext22 083A                     __ptext14 1540  
                   __ptext23 128A                     __ptext15 154E                     __ptext24 0B2C  
                   __ptext16 1346                     __ptext25 1576                     __ptext17 1204  
                   __ptext26 156A                     __ptext18 155C                     __ptext27 139A  
                   __ptext19 0C74                   ?_writeByte 0001           i1___lwdiv@dividend 0013  
                _D_UART_Init 10C0                  _D_UART_Read 148A                     _readData 0098  
                _D_TMR0_Init 14DC                     _readByte 1580                __size_of_main 00DC  
         C_DOOR_SendStates@d 00BE                  _D_PORT_Init 1500                     int$flags 0044  
                  printf@idx 00AD                    printf@val 00AE                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000           i1___lwdiv@quotient 0017                    putch@data 00A1  
                 _INTCONbits 000FF2            _commandAndMessage 13EC                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 0086           ?_commandAndMessage 00A0  
      __end_of_D_UART_Enable 14DC        __end_of_D_TMR0_Enable 1532          ??_commandAndMessage 00AE  
                   printf@ap 00AB             ??_fillDataBuffer 0027          D_UART_Write@command 00B2  
              ??i1_writeByte 0013                     strcmp@s1 00A0                     strcmp@s2 00A2  
              writeByte@data 00A0    __end_of_commandAndMessage 143C                 ___aldiv@sign 00A9  
                ??_writeByte 00A0    __size_of_C_DOOR_UnlockAll 000E  
