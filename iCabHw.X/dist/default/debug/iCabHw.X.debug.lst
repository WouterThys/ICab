

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Mar 12 20:52:17 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.44
    55                           ; Generated 14/09/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F2550 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  001752                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for _ackCharacter
    94  001752  1A                 	db	low STR_4
    95  001753  08                 	db	high STR_4
    96                           
    97                           ;initializer for _stopCharacter
    98  001754  33                 	db	low STR_2
    99  001755  08                 	db	high STR_2
   100                           
   101                           ;initializer for _startCharacter
   102  001756  35                 	db	low STR_1
   103  001757  08                 	db	high STR_1
   104                           
   105                           	psect	idataBANK0
   106  001758                     __pidataBANK0:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _messageCharacter
   110  001758  1E                 	db	low STR_3
   111  001759  08                 	db	high STR_3
   112                           
   113                           	psect	smallconst
   114  000800                     __psmallconst:
   115                           	opt stack 0
   116  000800  00                 	db	0
   117  000801                     _hexpowers:
   118                           	opt stack 0
   119  000801  0001               	dw	1
   120  000803  0010               	dw	16
   121  000805  0100               	dw	256
   122  000807  1000               	dw	4096
   123  000809                     __end_of_hexpowers:
   124                           	opt stack 0
   125  0000                     _PORTCbits	set	3970
   126  0000                     _TRISCbits	set	3988
   127  0000                     _PORTC	set	3970
   128  0000                     _TRISC	set	3988
   129  0000                     _PORTA	set	3968
   130  0000                     _TRISA	set	3986
   131  0000                     _TRISB	set	3987
   132  0000                     _PORTB	set	3969
   133  0000                     _CCP1CONbits	set	4029
   134  0000                     _CCPR1L	set	4030
   135  0000                     _T2CONbits	set	4042
   136  0000                     _PR2	set	4043
   137  0000                     _PIE1bits	set	3997
   138  0000                     _IPR1bits	set	3999
   139  0000                     _PIR1bits	set	3998
   140  0000                     _RCONbits	set	4048
   141  0000                     _SPBRG	set	4015
   142  0000                     _BAUDCONbits	set	4024
   143  0000                     _RCREG	set	4014
   144  0000                     _RCSTAbits	set	4011
   145  0000                     _TXREG	set	4013
   146  0000                     _TXSTAbits	set	4012
   147  0000                     _ADCON1	set	4033
   148  0000                     _T0CONbits	set	4053
   149  0000                     _INTCON2bits	set	4081
   150  0000                     _INTCONbits	set	4082
   151  000809                     STR_17:
   152  000809  30                 	db	48	;'0'
   153  00080A  31                 	db	49	;'1'
   154  00080B  32                 	db	50	;'2'
   155  00080C  33                 	db	51	;'3'
   156  00080D  34                 	db	52	;'4'
   157  00080E  35                 	db	53	;'5'
   158  00080F  36                 	db	54	;'6'
   159  000810  37                 	db	55	;'7'
   160  000811  38                 	db	56	;'8'
   161  000812  39                 	db	57	;'9'
   162  000813  61                 	db	97	;'a'
   163  000814  62                 	db	98	;'b'
   164  000815  63                 	db	99	;'c'
   165  000816  64                 	db	100	;'d'
   166  000817  65                 	db	101	;'e'
   167  000818  66                 	db	102	;'f'
   168  000819  00                 	db	0
   169  00081A                     STR_4:
   170  00081A  5B                 	db	91	;'['
   171  00081B  41                 	db	65	;'A'
   172  00081C  5D                 	db	93	;']'
   173  00081D  00                 	db	0
   174  00081E                     STR_3:
   175  00081E  5B                 	db	91	;'['
   176  00081F  4D                 	db	77	;'M'
   177  000820  5D                 	db	93	;']'
   178  000821  00                 	db	0
   179  000822                     STR_5:
   180  000822  25                 	db	37
   181  000823  78                 	db	120	;'x'
   182  000824  00                 	db	0
   183  000825                     STR_14:
   184  000825  41                 	db	65	;'A'
   185  000826  00                 	db	0
   186  000827                     STR_15:
   187  000827  45                 	db	69	;'E'
   188  000828  00                 	db	0
   189  000829                     STR_11:
   190  000829  49                 	db	73	;'I'
   191  00082A  00                 	db	0
   192  00082B                     STR_9:
   193  00082B  4C                 	db	76	;'L'
   194  00082C  00                 	db	0
   195  00082D                     STR_8:
   196  00082D  50                 	db	80	;'P'
   197  00082E  00                 	db	0
   198  00082F                     STR_12:
   199  00082F  52                 	db	82	;'R'
   200  000830  00                 	db	0
   201  000831                     STR_10:
   202  000831  55                 	db	85	;'U'
   203  000832  00                 	db	0
   204  000833                     STR_2:
   205  000833  24                 	db	36
   206  000834  00                 	db	0
   207  000835                     STR_1:
   208  000835  26                 	db	38
   209  000836  00                 	db	0
   210  000837                     STR_6:
   211  000837  3A                 	db	58	;':'
   212  000838  00                 	db	0
   213  0000                     
   214                           ; #config settings
   215  000839  00                 	db	0	; dummy byte at the end
   216  0000                     
   217                           	psect	cinit
   218  00146E                     __pcinit:
   219                           	opt stack 0
   220  00146E                     start_initialization:
   221                           	opt stack 0
   222  00146E                     __initialization:
   223                           	opt stack 0
   224                           
   225                           ; Initialize objects allocated to BANK0 (2 bytes)
   226                           ; load TBLPTR registers with __pidataBANK0
   227  00146E  0E58               	movlw	low __pidataBANK0
   228  001470  6EF6               	movwf	tblptrl,c
   229  001472  0E17               	movlw	high __pidataBANK0
   230  001474  6EF7               	movwf	tblptrh,c
   231  001476  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   232  001478  6EF8               	movwf	tblptru,c
   233  00147A  0009               	tblrd		*+	;fetch initializer
   234  00147C  CFF5 F0FA          	movff	tablat,__pdataBANK0
   235  001480  0009               	tblrd		*+	;fetch initializer
   236  001482  CFF5 F0FB          	movff	tablat,__pdataBANK0+1
   237                           
   238                           ; Initialize objects allocated to COMRAM (6 bytes)
   239                           ; load TBLPTR registers with __pidataCOMRAM
   240  001486  0E52               	movlw	low __pidataCOMRAM
   241  001488  6EF6               	movwf	tblptrl,c
   242  00148A  0E17               	movlw	high __pidataCOMRAM
   243  00148C  6EF7               	movwf	tblptrh,c
   244  00148E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   245  001490  6EF8               	movwf	tblptru,c
   246  001492  EE00  F03D         	lfsr	0,__pdataCOMRAM
   247  001496  EE10 F006          	lfsr	1,6
   248  00149A                     copy_data0:
   249  00149A  0009               	tblrd		*+
   250  00149C  CFF5 FFEE          	movff	tablat,postinc0
   251  0014A0  50E5               	movf	postdec1,w,c
   252  0014A2  50E1               	movf	fsr1l,w,c
   253  0014A4  E1FA               	bnz	copy_data0
   254                           
   255                           ; Clear objects allocated to BANK1 (166 bytes)
   256  0014A6  EE01  F000         	lfsr	0,__pbssBANK1
   257  0014AA  0EA6               	movlw	166
   258  0014AC                     clear_0:
   259  0014AC  6AEE               	clrf	postinc0,c
   260  0014AE  06E8               	decf	wreg,f,c
   261  0014B0  E1FD               	bnz	clear_0
   262                           
   263                           ; Clear objects allocated to BANK0 (120 bytes)
   264  0014B2  EE00  F060         	lfsr	0,__pbssBANK0
   265  0014B6  0E78               	movlw	120
   266  0014B8                     clear_1:
   267  0014B8  6AEE               	clrf	postinc0,c
   268  0014BA  06E8               	decf	wreg,f,c
   269  0014BC  E1FD               	bnz	clear_1
   270                           
   271                           ; Clear objects allocated to COMRAM (1 bytes)
   272  0014BE  6A43               	clrf	__pbssCOMRAM& (0+255),c
   273  0014C0                     end_of_initialization:
   274                           	opt stack 0
   275  0014C0                     __end_of__initialization:
   276                           	opt stack 0
   277  0014C0  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   278  0014C2  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   279  0014C4  0100               	movlb	0
   280  0014C6  EF1D  F004         	goto	_main	;jump to C main() function
   281                           tblptru	equ	0xFF8
   282                           tblptrh	equ	0xFF7
   283                           tblptrl	equ	0xFF6
   284                           tablat	equ	0xFF5
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1l	equ	0xFE1
   289                           
   290                           	psect	bssCOMRAM
   291  000043                     __pbssCOMRAM:
   292                           	opt stack 0
   293  000043                     _baud:
   294                           	opt stack 0
   295  000043                     	ds	1
   296                           tblptru	equ	0xFF8
   297                           tblptrh	equ	0xFF7
   298                           tblptrl	equ	0xFF6
   299                           tablat	equ	0xFF5
   300                           postinc0	equ	0xFEE
   301                           wreg	equ	0xFE8
   302                           postdec1	equ	0xFE5
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	dataCOMRAM
   306  00003D                     __pdataCOMRAM:
   307                           	opt stack 0
   308  00003D                     _ackCharacter:
   309                           	opt stack 0
   310  00003D                     	ds	2
   311  00003F                     _stopCharacter:
   312                           	opt stack 0
   313  00003F                     	ds	2
   314  000041                     _startCharacter:
   315                           	opt stack 0
   316  000041                     	ds	2
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1l	equ	0xFE1
   325                           
   326                           	psect	bssBANK0
   327  000060                     __pbssBANK0:
   328                           	opt stack 0
   329  000060                     _doors:
   330                           	opt stack 0
   331  000060                     	ds	100
   332  0000C4                     _read:
   333                           	opt stack 0
   334  0000C4                     	ds	6
   335  0000CA                     _readData:
   336                           	opt stack 0
   337  0000CA                     	ds	6
   338  0000D0                     _deviceName:
   339                           	opt stack 0
   340  0000D0                     	ds	3
   341  0000D3                     _door_cnt:
   342                           	opt stack 0
   343  0000D3                     	ds	2
   344  0000D5                     _pwm:
   345                           	opt stack 0
   346  0000D5                     	ds	1
   347  0000D6                     _tick:
   348                           	opt stack 0
   349  0000D6                     	ds	1
   350  0000D7                     _readReady:
   351                           	opt stack 0
   352  0000D7                     	ds	1
   353                           tblptru	equ	0xFF8
   354                           tblptrh	equ	0xFF7
   355                           tblptrl	equ	0xFF6
   356                           tablat	equ	0xFF5
   357                           postinc0	equ	0xFEE
   358                           wreg	equ	0xFE8
   359                           postdec1	equ	0xFE5
   360                           fsr1l	equ	0xFE1
   361                           
   362                           	psect	dataBANK0
   363  0000FA                     __pdataBANK0:
   364                           	opt stack 0
   365  0000FA                     _messageCharacter:
   366                           	opt stack 0
   367  0000FA                     	ds	2
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           postdec1	equ	0xFE5
   375                           fsr1l	equ	0xFE1
   376                           
   377                           	psect	bssBANK1
   378  000100                     __pbssBANK1:
   379                           	opt stack 0
   380  000100                     _readBuffer:
   381                           	opt stack 0
   382  000100                     	ds	166
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           postdec1	equ	0xFE5
   390                           fsr1l	equ	0xFE1
   391                           
   392                           	psect	cstackBANK0
   393  0000D8                     __pcstackBANK0:
   394                           	opt stack 0
   395  0000D8                     ??_C_DOOR_Init:
   396  0000D8                     ??_C_DOOR_ReadSensors:
   397  0000D8                     ?_strcmp:
   398                           	opt stack 0
   399  0000D8                     ?___lwdiv:
   400                           	opt stack 0
   401  0000D8                     ?___aldiv:
   402                           	opt stack 0
   403  0000D8                     ?_D_UART_Read:
   404                           	opt stack 0
   405  0000D8                     writeByte@data:
   406                           	opt stack 0
   407  0000D8                     D_UART_Enable@enable:
   408                           	opt stack 0
   409  0000D8                     D_TMR0_Enable@enable:
   410                           	opt stack 0
   411  0000D8                     setAlarm@alarm:
   412                           	opt stack 0
   413  0000D8                     D_PWM_SetPwm@pwm:
   414                           	opt stack 0
   415  0000D8                     ___lwdiv@dividend:
   416                           	opt stack 0
   417  0000D8                     strcmp@s1:
   418                           	opt stack 0
   419  0000D8                     ___aldiv@dividend:
   420                           	opt stack 0
   421  0000D8                     commandAndMessage@door:
   422                           	opt stack 0
   423                           
   424                           ; 10 bytes @ 0x0
   425  0000D8                     	ds	1
   426  0000D9                     putch@data:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x1
   430  0000D9                     	ds	1
   431  0000DA                     ___lwdiv@divisor:
   432                           	opt stack 0
   433  0000DA                     strcmp@s2:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437  0000DA                     	ds	1
   438  0000DB                     C_DOOR_Init@cnt:
   439                           	opt stack 0
   440                           
   441                           ; 1 bytes @ 0x3
   442  0000DB                     	ds	1
   443  0000DC                     ??_strcmp:
   444  0000DC                     C_DOOR_Init@d:
   445                           	opt stack 0
   446  0000DC                     C_DOOR_ReadSensors@d:
   447                           	opt stack 0
   448  0000DC                     ___lwdiv@quotient:
   449                           	opt stack 0
   450  0000DC                     ___aldiv@divisor:
   451                           	opt stack 0
   452                           
   453                           ; 4 bytes @ 0x4
   454  0000DC                     	ds	1
   455  0000DD                     initDoors@door_cnt:
   456                           	opt stack 0
   457  0000DD                     strcmp@r:
   458                           	opt stack 0
   459                           
   460                           ; 1 bytes @ 0x5
   461  0000DD                     	ds	1
   462  0000DE                     ___lwdiv@counter:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x6
   466  0000DE                     	ds	1
   467  0000DF                     ?_printf:
   468                           	opt stack 0
   469  0000DF                     printf@f:
   470                           	opt stack 0
   471                           
   472                           ; 3 bytes @ 0x7
   473  0000DF                     	ds	1
   474  0000E0                     ___aldiv@counter:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0x8
   478  0000E0                     	ds	1
   479  0000E1                     ___aldiv@sign:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x9
   483  0000E1                     	ds	1
   484  0000E2                     printf@flag:
   485                           	opt stack 0
   486  0000E2                     commandAndMessage@com:
   487                           	opt stack 0
   488  0000E2                     ___aldiv@quotient:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0xA
   492  0000E2                     	ds	1
   493  0000E3                     printf@ap:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0xB
   497  0000E3                     	ds	1
   498  0000E4                     commandAndMessage@mes:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0xC
   502  0000E4                     	ds	1
   503  0000E5                     printf@idx:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0xD
   507  0000E5                     	ds	1
   508  0000E6                     D_UART_Init@name:
   509                           	opt stack 0
   510  0000E6                     printf@val:
   511                           	opt stack 0
   512                           
   513                           ; 2 bytes @ 0xE
   514  0000E6                     	ds	2
   515  0000E8                     printf@prec:
   516                           	opt stack 0
   517  0000E8                     D_UART_Init@baud:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x10
   521  0000E8                     	ds	1
   522  0000E9                     printf@c:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x11
   526  0000E9                     	ds	1
   527  0000EA                     D_UART_Init@interrupts:
   528                           	opt stack 0
   529  0000EA                     D_UART_Write@command:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x12
   533  0000EA                     	ds	1
   534  0000EB                     _D_UART_Init$1670:
   535                           	opt stack 0
   536                           
   537                           ; 4 bytes @ 0x13
   538  0000EB                     	ds	1
   539  0000EC                     D_UART_Write@data:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x14
   543  0000EC                     	ds	2
   544  0000EE                     ??_D_UART_Write:
   545                           
   546                           ; 1 bytes @ 0x16
   547  0000EE                     	ds	1
   548  0000EF                     ??_C_DOOR_SendStates:
   549                           
   550                           ; 1 bytes @ 0x17
   551  0000EF                     	ds	3
   552  0000F2                     C_DOOR_SendStates@com:
   553                           	opt stack 0
   554                           
   555                           ; 3 bytes @ 0x1A
   556  0000F2                     	ds	3
   557  0000F5                     C_DOOR_SendStates@mes:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x1D
   561  0000F5                     	ds	2
   562  0000F7                     C_DOOR_SendStates@d:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0x1F
   566  0000F7                     	ds	1
   567  0000F8                     ??_main:
   568                           
   569                           ; 1 bytes @ 0x20
   570  0000F8                     	ds	2
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580                           	psect	cstackCOMRAM
   581  000001                     __pcstackCOMRAM:
   582                           	opt stack 0
   583  000001                     ??_HighISR:
   584  000001                     
   585                           ; 1 bytes @ 0x0
   586  000001                     	ds	18
   587  000013                     ?i1___lwdiv:
   588                           	opt stack 0
   589  000013                     i1writeByte@data:
   590                           	opt stack 0
   591  000013                     i1___lwdiv@dividend:
   592                           	opt stack 0
   593                           
   594                           ; 2 bytes @ 0x12
   595  000013                     	ds	1
   596  000014                     i1putch@data:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x13
   600  000014                     	ds	1
   601  000015                     i1___lwdiv@divisor:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x14
   605  000015                     	ds	2
   606  000017                     i1___lwdiv@quotient:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x16
   610  000017                     	ds	2
   611  000019                     i1___lwdiv@counter:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x18
   615  000019                     	ds	1
   616  00001A                     ?i1_printf:
   617                           	opt stack 0
   618  00001A                     i1printf@f:
   619                           	opt stack 0
   620                           
   621                           ; 3 bytes @ 0x19
   622  00001A                     	ds	5
   623  00001F                     i1printf@flag:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x1E
   627  00001F                     	ds	1
   628  000020                     i1printf@ap:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x1F
   632  000020                     	ds	2
   633  000022                     i1printf@idx:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x21
   637  000022                     	ds	1
   638  000023                     i1printf@val:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x22
   642  000023                     	ds	2
   643  000025                     i1printf@prec:
   644                           	opt stack 0
   645                           
   646                           ; 1 bytes @ 0x24
   647  000025                     	ds	1
   648  000026                     i1printf@c:
   649                           	opt stack 0
   650                           
   651                           ; 1 bytes @ 0x25
   652  000026                     	ds	1
   653  000027                     fillDataBuffer@data:
   654                           	opt stack 0
   655                           
   656                           ; 1 bytes @ 0x26
   657  000027                     	ds	1
   658  000028                     ??_LowISR:
   659                           
   660                           ; 1 bytes @ 0x27
   661  000028                     	ds	21
   662                           tblptru	equ	0xFF8
   663                           tblptrh	equ	0xFF7
   664                           tblptrl	equ	0xFF6
   665                           tablat	equ	0xFF5
   666                           postinc0	equ	0xFEE
   667                           wreg	equ	0xFE8
   668                           postdec1	equ	0xFE5
   669                           fsr1l	equ	0xFE1
   670                           
   671 ;;
   672 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   673 ;;
   674 ;; *************** function _main *****************
   675 ;; Defined at:
   676 ;;		line 56 in file "main.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;		None
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   690 ;;      Params:         0       0       0       0       0       0       0       0       0
   691 ;;      Locals:         0       0       0       0       0       0       0       0       0
   692 ;;      Temps:          0       2       0       0       0       0       0       0       0
   693 ;;      Totals:         0       2       0       0       0       0       0       0       0
   694 ;;Total ram usage:        2 bytes
   695 ;; Hardware stack levels required when called:   12
   696 ;; This function calls:
   697 ;;		_C_DOOR_LockAll
   698 ;;		_C_DOOR_ReadSensors
   699 ;;		_C_DOOR_SendStates
   700 ;;		_C_DOOR_UnlockAll
   701 ;;		_D_PORT_Init
   702 ;;		_D_PWM_Init
   703 ;;		_D_PWM_SetPwm
   704 ;;		_D_TMR0_Init
   705 ;;		_D_UART_Enable
   706 ;;		_D_UART_Init
   707 ;;		_D_UART_Read
   708 ;;		_D_UART_Write
   709 ;;		_initDoors
   710 ;;		_setAlarm
   711 ;;		_strcmp
   712 ;; This function is called by:
   713 ;;		Startup code after reset
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text0
   718  00083A                     __ptext0:
   719                           	opt stack 0
   720  00083A                     _main:
   721                           	opt stack 19
   722                           
   723                           ;main.c: 57: _delay((unsigned long)((200)*(16000000/4000.0)));
   724                           
   725                           ;incstack = 0
   726  00083A  0E05               	movlw	5
   727  00083C  0100               	movlb	0	; () banked
   728  00083E  6FF9               	movwf	(??_main+1)& (0+255),b
   729  000840  0E0F               	movlw	15
   730  000842  6FF8               	movwf	??_main& (0+255),b
   731  000844  0EF1               	movlw	241
   732  000846                     u1517:
   733  000846  2EE8               	decfsz	wreg,f,c
   734  000848  D7FE               	bra	u1517
   735  00084A  2FF8               	decfsz	??_main& (0+255),f,b
   736  00084C  D7FC               	bra	u1517
   737  00084E  2FF9               	decfsz	(??_main+1)& (0+255),f,b
   738  000850  D7FA               	bra	u1517
   739                           
   740                           ;main.c: 59: D_PORT_Init();
   741  000852  EC57  F00B         	call	_D_PORT_Init	;wreg free
   742                           
   743                           ;main.c: 63: D_UART_Init("P", 9600, 1);
   744  000856  0E2D               	movlw	low STR_8
   745  000858  0100               	movlb	0	; () banked
   746  00085A  6FE6               	movwf	D_UART_Init@name& (0+255),b
   747  00085C  0E08               	movlw	high STR_8
   748  00085E  6FE7               	movwf	(D_UART_Init@name+1)& (0+255),b
   749  000860  0E25               	movlw	37
   750  000862  6FE9               	movwf	(D_UART_Init@baud+1)& (0+255),b
   751  000864  0E80               	movlw	128
   752  000866  6FE8               	movwf	D_UART_Init@baud& (0+255),b
   753  000868  0E01               	movlw	1
   754  00086A  6FEA               	movwf	D_UART_Init@interrupts& (0+255),b
   755  00086C  ECE4  F008         	call	_D_UART_Init	;wreg free
   756                           
   757                           ;main.c: 64: D_UART_Enable(1);
   758  000870  0E01               	movlw	1
   759  000872  EC22  F00B         	call	_D_UART_Enable
   760                           
   761                           ;main.c: 67: D_TMR0_Init();
   762  000876  EC34  F00B         	call	_D_TMR0_Init	;wreg free
   763                           
   764                           ;main.c: 70: D_PWM_Init();
   765  00087A  EC0F  F00B         	call	_D_PWM_Init	;wreg free
   766                           
   767                           ;main.c: 72: _delay((unsigned long)((200)*(16000000/4000.0)));
   768  00087E  0E05               	movlw	5
   769  000880  0100               	movlb	0	; () banked
   770  000882  6FF9               	movwf	(??_main+1)& (0+255),b
   771  000884  0E0F               	movlw	15
   772  000886  6FF8               	movwf	??_main& (0+255),b
   773  000888  0EF1               	movlw	241
   774  00088A                     u1527:
   775  00088A  2EE8               	decfsz	wreg,f,c
   776  00088C  D7FE               	bra	u1527
   777  00088E  2FF8               	decfsz	??_main& (0+255),f,b
   778  000890  D7FC               	bra	u1527
   779  000892  2FF9               	decfsz	(??_main+1)& (0+255),f,b
   780  000894  D7FA               	bra	u1527
   781  000896                     
   782                           ;main.c: 77: if (readReady) {
   783  000896  0100               	movlb	0	; () banked
   784  000898  51D7               	movf	_readReady& (0+255),w,b
   785  00089A  B4D8               	btfsc	status,2,c
   786  00089C  D098               	goto	l278
   787                           
   788                           ; BSR set to: 0
   789                           ;main.c: 78: readReady = 0;
   790  00089E  0E00               	movlw	0
   791  0008A0  6FD7               	movwf	_readReady& (0+255),b
   792                           
   793                           ; BSR set to: 0
   794                           ;main.c: 79: read = D_UART_Read();
   795  0008A2  ECF8  F00A         	call	_D_UART_Read	;wreg free
   796  0008A6  EE20  F0C4         	lfsr	2,_read
   797  0008AA  0E05               	movlw	5
   798  0008AC                     u1421:
   799  0008AC  CFEB FFDB          	movff	plusw0,plusw2
   800  0008B0  06E8               	decf	wreg,f,c
   801  0008B2  E2FC               	bc	u1421
   802                           
   803                           ;main.c: 80: if (strcmp(read.command, "L") == 0) {
   804  0008B4  C0C6  F0D8         	movff	_read+2,strcmp@s1
   805  0008B8  C0C7  F0D9         	movff	_read+3,strcmp@s1+1
   806  0008BC  0E2B               	movlw	low STR_9
   807  0008BE  0100               	movlb	0	; () banked
   808  0008C0  6FDA               	movwf	strcmp@s2& (0+255),b
   809  0008C2  0E08               	movlw	high STR_9
   810  0008C4  6FDB               	movwf	(strcmp@s2+1)& (0+255),b
   811  0008C6  ECB8  F00A         	call	_strcmp	;wreg free
   812  0008CA  0100               	movlb	0	; () banked
   813  0008CC  51D8               	movf	?_strcmp& (0+255),w,b
   814  0008CE  11D9               	iorwf	(?_strcmp+1)& (0+255),w,b
   815  0008D0  A4D8               	btfss	status,2,c
   816  0008D2  D003               	goto	l267
   817                           
   818                           ; BSR set to: 0
   819                           ;main.c: 81: C_DOOR_LockAll();
   820  0008D4  EC7E  F00B         	call	_C_DOOR_LockAll	;wreg free
   821                           
   822                           ;main.c: 82: } else if (strcmp(read.command, "U") == 0) {
   823  0008D8  D07A               	goto	l278
   824  0008DA                     l267:
   825  0008DA  C0C6  F0D8         	movff	_read+2,strcmp@s1
   826  0008DE  C0C7  F0D9         	movff	_read+3,strcmp@s1+1
   827  0008E2  0E31               	movlw	low STR_10
   828  0008E4  0100               	movlb	0	; () banked
   829  0008E6  6FDA               	movwf	strcmp@s2& (0+255),b
   830  0008E8  0E08               	movlw	high STR_10
   831  0008EA  6FDB               	movwf	(strcmp@s2+1)& (0+255),b
   832  0008EC  ECB8  F00A         	call	_strcmp	;wreg free
   833  0008F0  0100               	movlb	0	; () banked
   834  0008F2  51D8               	movf	?_strcmp& (0+255),w,b
   835  0008F4  11D9               	iorwf	(?_strcmp+1)& (0+255),w,b
   836  0008F6  A4D8               	btfss	status,2,c
   837  0008F8  D003               	goto	l269
   838                           
   839                           ; BSR set to: 0
   840                           ;main.c: 83: C_DOOR_UnlockAll();
   841  0008FA  EC85  F00B         	call	_C_DOOR_UnlockAll	;wreg free
   842                           
   843                           ;main.c: 84: } else if (strcmp(read.command, "I") == 0) {
   844  0008FE  D067               	goto	l278
   845  000900                     l269:
   846  000900  C0C6  F0D8         	movff	_read+2,strcmp@s1
   847  000904  C0C7  F0D9         	movff	_read+3,strcmp@s1+1
   848  000908  0E29               	movlw	low STR_11
   849  00090A  0100               	movlb	0	; () banked
   850  00090C  6FDA               	movwf	strcmp@s2& (0+255),b
   851  00090E  0E08               	movlw	high STR_11
   852  000910  6FDB               	movwf	(strcmp@s2+1)& (0+255),b
   853  000912  ECB8  F00A         	call	_strcmp	;wreg free
   854  000916  0100               	movlb	0	; () banked
   855  000918  51D8               	movf	?_strcmp& (0+255),w,b
   856  00091A  11D9               	iorwf	(?_strcmp+1)& (0+255),w,b
   857  00091C  A4D8               	btfss	status,2,c
   858  00091E  D009               	goto	l271
   859                           
   860                           ; BSR set to: 0
   861                           ;main.c: 85: initDoors((uint8_t)(*read.message - 0x30));
   862  000920  C0C8  FFD9         	movff	_read+4,fsr2l
   863  000924  C0C9  FFDA         	movff	_read+5,fsr2h
   864  000928  50DF               	movf	indf2,w,c
   865  00092A  0FD0               	addlw	208
   866  00092C  EC46  F00B         	call	_initDoors
   867                           
   868                           ;main.c: 86: } else if (strcmp(read.command, "R") == 0) {
   869  000930  D04E               	goto	l278
   870  000932                     l271:
   871  000932  C0C6  F0D8         	movff	_read+2,strcmp@s1
   872  000936  C0C7  F0D9         	movff	_read+3,strcmp@s1+1
   873  00093A  0E2F               	movlw	low STR_12
   874  00093C  0100               	movlb	0	; () banked
   875  00093E  6FDA               	movwf	strcmp@s2& (0+255),b
   876  000940  0E08               	movlw	high STR_12
   877  000942  6FDB               	movwf	(strcmp@s2+1)& (0+255),b
   878  000944  ECB8  F00A         	call	_strcmp	;wreg free
   879  000948  0100               	movlb	0	; () banked
   880  00094A  51D8               	movf	?_strcmp& (0+255),w,b
   881  00094C  11D9               	iorwf	(?_strcmp+1)& (0+255),w,b
   882  00094E  A4D8               	btfss	status,2,c
   883  000950  D00B               	goto	l273
   884                           
   885                           ; BSR set to: 0
   886                           ;main.c: 87: _delay((unsigned long)((20)*(16000000/4000.0)));
   887  000952  0E68               	movlw	104
   888  000954  0100               	movlb	0	; () banked
   889  000956  6FF8               	movwf	??_main& (0+255),b
   890  000958  0EE4               	movlw	228
   891  00095A                     u1537:
   892  00095A  2EE8               	decfsz	wreg,f,c
   893  00095C  D7FE               	bra	u1537
   894  00095E  2FF8               	decfsz	??_main& (0+255),f,b
   895  000960  D7FC               	bra	u1537
   896  000962  F000               	nop	
   897  000964  00FF               	reset		;# 
   898                           
   899                           ;main.c: 89: } else if (strcmp(read.command, "P") == 0) {
   900  000966  D033               	goto	l278
   901  000968                     l273:
   902  000968  C0C6  F0D8         	movff	_read+2,strcmp@s1
   903  00096C  C0C7  F0D9         	movff	_read+3,strcmp@s1+1
   904  000970  0E2D               	movlw	low STR_8
   905  000972  0100               	movlb	0	; () banked
   906  000974  6FDA               	movwf	strcmp@s2& (0+255),b
   907  000976  0E08               	movlw	high STR_8
   908  000978  6FDB               	movwf	(strcmp@s2+1)& (0+255),b
   909  00097A  ECB8  F00A         	call	_strcmp	;wreg free
   910  00097E  0100               	movlb	0	; () banked
   911  000980  51D8               	movf	?_strcmp& (0+255),w,b
   912  000982  11D9               	iorwf	(?_strcmp+1)& (0+255),w,b
   913  000984  B4D8               	btfsc	status,2,c
   914  000986  D023               	goto	l278
   915                           
   916                           ; BSR set to: 0
   917                           
   918                           ; BSR set to: 0
   919                           
   920                           ; BSR set to: 0
   921                           ;main.c: 91: } else if (strcmp(read.command, "A") == 0) {
   922  000988  C0C6  F0D8         	movff	_read+2,strcmp@s1
   923  00098C  C0C7  F0D9         	movff	_read+3,strcmp@s1+1
   924  000990  0E25               	movlw	low STR_14
   925  000992  6FDA               	movwf	strcmp@s2& (0+255),b
   926  000994  0E08               	movlw	high STR_14
   927  000996  6FDB               	movwf	(strcmp@s2+1)& (0+255),b
   928  000998  ECB8  F00A         	call	_strcmp	;wreg free
   929  00099C  0100               	movlb	0	; () banked
   930  00099E  51D8               	movf	?_strcmp& (0+255),w,b
   931  0009A0  11D9               	iorwf	(?_strcmp+1)& (0+255),w,b
   932  0009A2  A4D8               	btfss	status,2,c
   933  0009A4  D009               	goto	l277
   934                           
   935                           ; BSR set to: 0
   936                           ;main.c: 92: setAlarm((uint8_t)(*read.message - 0x30));
   937  0009A6  C0C8  FFD9         	movff	_read+4,fsr2l
   938  0009AA  C0C9  FFDA         	movff	_read+5,fsr2h
   939  0009AE  50DF               	movf	indf2,w,c
   940  0009B0  0FD0               	addlw	208
   941  0009B2  ECDF  F00A         	call	_setAlarm
   942                           
   943                           ;main.c: 93: } else {
   944  0009B6  D00B               	goto	l278
   945  0009B8                     l277:
   946                           
   947                           ;main.c: 94: D_UART_Write("E", "U");
   948  0009B8  0E27               	movlw	low STR_15
   949  0009BA  0100               	movlb	0	; () banked
   950  0009BC  6FEA               	movwf	D_UART_Write@command& (0+255),b
   951  0009BE  0E08               	movlw	high STR_15
   952  0009C0  6FEB               	movwf	(D_UART_Write@command+1)& (0+255),b
   953  0009C2  0E31               	movlw	low STR_10
   954  0009C4  6FEC               	movwf	D_UART_Write@data& (0+255),b
   955  0009C6  0E08               	movlw	high STR_10
   956  0009C8  6FED               	movwf	(D_UART_Write@data+1)& (0+255),b
   957  0009CA  EC9F  F007         	call	_D_UART_Write	;wreg free
   958  0009CE                     l278:
   959                           
   960                           ;main.c: 95: }
   961                           ;main.c: 96: }
   962                           ;main.c: 99: if (tick) {
   963  0009CE  0100               	movlb	0	; () banked
   964  0009D0  51D6               	movf	_tick& (0+255),w,b
   965  0009D2  B4D8               	btfsc	status,2,c
   966  0009D4  D760               	goto	l265
   967                           
   968                           ; BSR set to: 0
   969                           ;main.c: 100: tick = 0;
   970  0009D6  0E00               	movlw	0
   971  0009D8  6FD6               	movwf	_tick& (0+255),b
   972                           
   973                           ; BSR set to: 0
   974                           ;main.c: 103: C_DOOR_ReadSensors();
   975  0009DA  EC8A  F009         	call	_C_DOOR_ReadSensors	;wreg free
   976                           
   977                           ;main.c: 106: C_DOOR_SendStates();
   978  0009DE  EC0F  F008         	call	_C_DOOR_SendStates	;wreg free
   979                           
   980                           ;main.c: 109: D_PWM_SetPwm(pwm);
   981  0009E2  0100               	movlb	0	; () banked
   982  0009E4  51D5               	movf	_pwm& (0+255),w,b
   983  0009E6  EC66  F00B         	call	_D_PWM_SetPwm
   984  0009EA  D755               	goto	l265
   985  0009EC                     __end_of_main:
   986                           	opt stack 0
   987                           tblptru	equ	0xFF8
   988                           tblptrh	equ	0xFF7
   989                           tblptrl	equ	0xFF6
   990                           tablat	equ	0xFF5
   991                           postinc0	equ	0xFEE
   992                           plusw0	equ	0xFEB
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           indf2	equ	0xFDF
   997                           plusw2	equ	0xFDB
   998                           fsr2h	equ	0xFDA
   999                           fsr2l	equ	0xFD9
  1000                           status	equ	0xFD8
  1001                           
  1002 ;; *************** function _strcmp *****************
  1003 ;; Defined at:
  1004 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  1007 ;;		 -> readBuffer(166), 
  1008 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  1009 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
  1010 ;;		 -> STR_10(2), STR_9(2), 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  r               1    5[BANK0 ] char 
  1013 ;; Return value:  Size  Location     Type
  1014 ;;                  2    0[BANK0 ] int 
  1015 ;; Registers used:
  1016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1017 ;; Tracked objects:
  1018 ;;		On entry : 0/0
  1019 ;;		On exit  : 0/0
  1020 ;;		Unchanged: 0/0
  1021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1022 ;;      Params:         0       4       0       0       0       0       0       0       0
  1023 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1024 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1025 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1026 ;;Total ram usage:        6 bytes
  1027 ;; Hardware stack levels used:    1
  1028 ;; Hardware stack levels required when called:    7
  1029 ;; This function calls:
  1030 ;;		Nothing
  1031 ;; This function is called by:
  1032 ;;		_main
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035                           
  1036                           	psect	text1
  1037  001570                     __ptext1:
  1038                           	opt stack 0
  1039  001570                     _strcmp:
  1040                           	opt stack 23
  1041                           
  1042                           ;incstack = 0
  1043  001570  D005               	goto	l882
  1044  001572  0100               	movlb	0	; () banked
  1045  001574  4BD8               	infsnz	strcmp@s1& (0+255),f,b
  1046  001576  2BD9               	incf	(strcmp@s1+1)& (0+255),f,b
  1047  001578  4BDA               	infsnz	strcmp@s2& (0+255),f,b
  1048  00157A  2BDB               	incf	(strcmp@s2+1)& (0+255),f,b
  1049  00157C                     l882:
  1050                           
  1051                           ; BSR set to: 0
  1052  00157C  C0D8  FFD9         	movff	strcmp@s1,fsr2l
  1053  001580  C0D9  FFDA         	movff	strcmp@s1+1,fsr2h
  1054  001584  50DF               	movf	indf2,w,c
  1055  001586  0100               	movlb	0	; () banked
  1056  001588  6FDC               	movwf	??_strcmp& (0+255),b
  1057  00158A  C0DA  FFF6         	movff	strcmp@s2,tblptrl
  1058  00158E  C0DB  FFF7         	movff	strcmp@s2+1,tblptrh
  1059  001592                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1060  001592  6AF8               	clrf	tblptru,c
  1061  001594                     	endif
  1062  001594                     	if	0	;tblptru may be non-zero
  1063  001594                     	endif
  1064  001594  0008               	tblrd		*
  1065  001596  50F5               	movf	tablat,w,c
  1066  001598  0800               	sublw	0
  1067  00159A  25DC               	addwf	??_strcmp& (0+255),w,b
  1068  00159C  6FDD               	movwf	strcmp@r& (0+255),b
  1069  00159E  51DD               	movf	strcmp@r& (0+255),w,b
  1070  0015A0  A4D8               	btfss	status,2,c
  1071  0015A2  D007               	goto	u1310
  1072                           
  1073                           ; BSR set to: 0
  1074  0015A4  C0D8  FFD9         	movff	strcmp@s1,fsr2l
  1075  0015A8  C0D9  FFDA         	movff	strcmp@s1+1,fsr2h
  1076  0015AC  50DF               	movf	indf2,w,c
  1077  0015AE  A4D8               	btfss	status,2,c
  1078  0015B0  D7E0               	goto	l883
  1079  0015B2                     u1310:
  1080                           
  1081                           ; BSR set to: 0
  1082                           
  1083                           ; BSR set to: 0
  1084                           
  1085                           ; BSR set to: 0
  1086  0015B2  51DD               	movf	strcmp@r& (0+255),w,b
  1087  0015B4  6FD8               	movwf	?_strcmp& (0+255),b
  1088  0015B6  6BD9               	clrf	(?_strcmp+1)& (0+255),b
  1089  0015B8  BFD8               	btfsc	?_strcmp& (0+255),7,b
  1090  0015BA  07D9               	decf	(?_strcmp+1)& (0+255),f,b
  1091  0015BC  0012               	return	
  1092  0015BE                     __end_of_strcmp:
  1093                           	opt stack 0
  1094                           tblptru	equ	0xFF8
  1095                           tblptrh	equ	0xFF7
  1096                           tblptrl	equ	0xFF6
  1097                           tablat	equ	0xFF5
  1098                           postinc0	equ	0xFEE
  1099                           plusw0	equ	0xFEB
  1100                           wreg	equ	0xFE8
  1101                           postdec1	equ	0xFE5
  1102                           fsr1l	equ	0xFE1
  1103                           indf2	equ	0xFDF
  1104                           plusw2	equ	0xFDB
  1105                           fsr2h	equ	0xFDA
  1106                           fsr2l	equ	0xFD9
  1107                           status	equ	0xFD8
  1108                           
  1109 ;; *************** function _setAlarm *****************
  1110 ;; Defined at:
  1111 ;;		line 47 in file "main.c"
  1112 ;; Parameters:    Size  Location     Type
  1113 ;;  alarm           1    wreg     unsigned char 
  1114 ;; Auto vars:     Size  Location     Type
  1115 ;;  alarm           1    0[BANK0 ] unsigned char 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      void 
  1118 ;; Registers used:
  1119 ;;		wreg, status,2, status,0
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1125 ;;      Params:         0       0       0       0       0       0       0       0       0
  1126 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1128 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1129 ;;Total ram usage:        1 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    7
  1132 ;; This function calls:
  1133 ;;		Nothing
  1134 ;; This function is called by:
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text2
  1140  0015BE                     __ptext2:
  1141                           	opt stack 0
  1142  0015BE                     _setAlarm:
  1143                           	opt stack 23
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;incstack = 0
  1147                           ;setAlarm@alarm stored from wreg
  1148  0015BE  0100               	movlb	0	; () banked
  1149  0015C0  6FD8               	movwf	setAlarm@alarm& (0+255),b
  1150                           
  1151                           ;main.c: 48: switch (alarm) {
  1152  0015C2  D00A               	goto	l254
  1153  0015C4                     
  1154                           ;main.c: 50: case 0: pwm = 0x00; break;
  1155  0015C4  0E00               	movlw	0
  1156  0015C6  0100               	movlb	0	; () banked
  1157  0015C8  6FD5               	movwf	_pwm& (0+255),b
  1158  0015CA  0012               	return	
  1159  0015CC                     
  1160                           ; BSR set to: 0
  1161                           
  1162                           ; BSR set to: 0
  1163  0015CC  0E0F               	movlw	15
  1164  0015CE  6FD5               	movwf	_pwm& (0+255),b
  1165  0015D0  0012               	return	
  1166  0015D2                     
  1167                           ; BSR set to: 0
  1168                           
  1169                           ; BSR set to: 0
  1170  0015D2  0E7F               	movlw	127
  1171  0015D4  6FD5               	movwf	_pwm& (0+255),b
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;main.c: 53: }
  1175  0015D6  0012               	return	
  1176  0015D8                     l254:
  1177                           
  1178                           ; BSR set to: 0
  1179  0015D8  0100               	movlb	0	; () banked
  1180  0015DA  51D8               	movf	setAlarm@alarm& (0+255),w,b
  1181                           
  1182                           ; Switch size 1, requested type "space"
  1183                           ; Number of cases is 3, Range of values is 0 to 2
  1184                           ; switch strategies available:
  1185                           ; Name         Instructions Cycles
  1186                           ; simple_byte           10     6 (average)
  1187                           ;	Chosen strategy is simple_byte
  1188  0015DC  0A00               	xorlw	0	; case 0
  1189  0015DE  B4D8               	btfsc	status,2,c
  1190  0015E0  D7F1               	goto	l255
  1191  0015E2  0A01               	xorlw	1	; case 1
  1192  0015E4  B4D8               	btfsc	status,2,c
  1193  0015E6  D7F2               	goto	l258
  1194  0015E8  0A03               	xorlw	3	; case 2
  1195  0015EA  B4D8               	btfsc	status,2,c
  1196  0015EC  D7F2               	goto	l259
  1197  0015EE  D7EA               	goto	l255
  1198  0015F0                     __end_of_setAlarm:
  1199                           	opt stack 0
  1200                           tblptru	equ	0xFF8
  1201                           tblptrh	equ	0xFF7
  1202                           tblptrl	equ	0xFF6
  1203                           tablat	equ	0xFF5
  1204                           postinc0	equ	0xFEE
  1205                           plusw0	equ	0xFEB
  1206                           wreg	equ	0xFE8
  1207                           postdec1	equ	0xFE5
  1208                           fsr1l	equ	0xFE1
  1209                           indf2	equ	0xFDF
  1210                           plusw2	equ	0xFDB
  1211                           fsr2h	equ	0xFDA
  1212                           fsr2l	equ	0xFD9
  1213                           status	equ	0xFD8
  1214                           
  1215 ;; *************** function _initDoors *****************
  1216 ;; Defined at:
  1217 ;;		line 35 in file "main.c"
  1218 ;; Parameters:    Size  Location     Type
  1219 ;;  door_cnt        1    wreg     unsigned char 
  1220 ;; Auto vars:     Size  Location     Type
  1221 ;;  door_cnt        1    5[BANK0 ] unsigned char 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  1    wreg      void 
  1224 ;; Registers used:
  1225 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1231 ;;      Params:         0       0       0       0       0       0       0       0       0
  1232 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1234 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1235 ;;Total ram usage:        1 bytes
  1236 ;; Hardware stack levels used:    1
  1237 ;; Hardware stack levels required when called:    8
  1238 ;; This function calls:
  1239 ;;		_C_DOOR_Init
  1240 ;;		_C_DOOR_LockAll
  1241 ;;		_D_TMR0_Enable
  1242 ;; This function is called by:
  1243 ;;		_main
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247                           	psect	text3
  1248  00168C                     __ptext3:
  1249                           	opt stack 0
  1250  00168C                     _initDoors:
  1251                           	opt stack 22
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;incstack = 0
  1255                           ;initDoors@door_cnt stored from wreg
  1256  00168C  0100               	movlb	0	; () banked
  1257  00168E  6FDD               	movwf	initDoors@door_cnt& (0+255),b
  1258                           
  1259                           ;main.c: 36: if (door_cnt < 1) {
  1260  001690  0100               	movlb	0	; () banked
  1261  001692  51DD               	movf	initDoors@door_cnt& (0+255),w,b
  1262  001694  A4D8               	btfss	status,2,c
  1263  001696  D002               	goto	l250
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 37: door_cnt = 1;
  1267  001698  0E01               	movlw	1
  1268  00169A  6FDD               	movwf	initDoors@door_cnt& (0+255),b
  1269  00169C                     l250:
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 38: }
  1273                           ;main.c: 40: C_DOOR_Init(door_cnt);
  1274                           
  1275                           ; BSR set to: 0
  1276  00169C  51DD               	movf	initDoors@door_cnt& (0+255),w,b
  1277  00169E  EC13  F007         	call	_C_DOOR_Init
  1278                           
  1279                           ;main.c: 41: C_DOOR_LockAll();
  1280  0016A2  EC7E  F00B         	call	_C_DOOR_LockAll	;wreg free
  1281                           
  1282                           ;main.c: 44: D_TMR0_Enable(1);
  1283  0016A6  0E01               	movlw	1
  1284  0016A8  EC74  F00B         	call	_D_TMR0_Enable
  1285  0016AC  0012               	return		;funcret
  1286  0016AE                     __end_of_initDoors:
  1287                           	opt stack 0
  1288                           tblptru	equ	0xFF8
  1289                           tblptrh	equ	0xFF7
  1290                           tblptrl	equ	0xFF6
  1291                           tablat	equ	0xFF5
  1292                           postinc0	equ	0xFEE
  1293                           plusw0	equ	0xFEB
  1294                           wreg	equ	0xFE8
  1295                           postdec1	equ	0xFE5
  1296                           fsr1l	equ	0xFE1
  1297                           indf2	equ	0xFDF
  1298                           plusw2	equ	0xFDB
  1299                           fsr2h	equ	0xFDA
  1300                           fsr2l	equ	0xFD9
  1301                           status	equ	0xFD8
  1302                           
  1303 ;; *************** function _C_DOOR_LockAll *****************
  1304 ;; Defined at:
  1305 ;;		line 76 in file "Controllers/DOOR_Controller.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;		None
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;		None
  1310 ;; Return value:  Size  Location     Type
  1311 ;;                  1    wreg      void 
  1312 ;; Registers used:
  1313 ;;		wreg, fsr2l, fsr2h
  1314 ;; Tracked objects:
  1315 ;;		On entry : 0/0
  1316 ;;		On exit  : 0/0
  1317 ;;		Unchanged: 0/0
  1318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1319 ;;      Params:         0       0       0       0       0       0       0       0       0
  1320 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1322 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1323 ;;Total ram usage:        0 bytes
  1324 ;; Hardware stack levels used:    1
  1325 ;; Hardware stack levels required when called:    7
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		_initDoors
  1330 ;;		_main
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text4
  1335  0016FC                     __ptext4:
  1336                           	opt stack 0
  1337  0016FC                     _C_DOOR_LockAll:
  1338                           	opt stack 22
  1339                           
  1340                           ;DOOR_Controller.c: 81: *doors[0].lock_port |= 0xC0;
  1341                           
  1342                           ;incstack = 0
  1343  0016FC  C062  FFD9         	movff	_doors+2,fsr2l
  1344  001700  C063  FFDA         	movff	_doors+3,fsr2h
  1345  001704  0EC0               	movlw	192
  1346  001706  12DF               	iorwf	indf2,f,c
  1347  001708  0012               	return		;funcret
  1348  00170A                     __end_of_C_DOOR_LockAll:
  1349                           	opt stack 0
  1350                           tblptru	equ	0xFF8
  1351                           tblptrh	equ	0xFF7
  1352                           tblptrl	equ	0xFF6
  1353                           tablat	equ	0xFF5
  1354                           postinc0	equ	0xFEE
  1355                           plusw0	equ	0xFEB
  1356                           wreg	equ	0xFE8
  1357                           postdec1	equ	0xFE5
  1358                           fsr1l	equ	0xFE1
  1359                           indf2	equ	0xFDF
  1360                           plusw2	equ	0xFDB
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _C_DOOR_Init *****************
  1366 ;; Defined at:
  1367 ;;		line 45 in file "Controllers/DOOR_Controller.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  cnt             1    wreg     unsigned char 
  1370 ;; Auto vars:     Size  Location     Type
  1371 ;;  cnt             1    3[BANK0 ] unsigned char 
  1372 ;;  d               1    4[BANK0 ] unsigned char 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1382 ;;      Params:         0       0       0       0       0       0       0       0       0
  1383 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1384 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1385 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1386 ;;Total ram usage:        5 bytes
  1387 ;; Hardware stack levels used:    1
  1388 ;; Hardware stack levels required when called:    7
  1389 ;; This function calls:
  1390 ;;		Nothing
  1391 ;; This function is called by:
  1392 ;;		_initDoors
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text5
  1397  000E26                     __ptext5:
  1398                           	opt stack 0
  1399  000E26                     _C_DOOR_Init:
  1400                           	opt stack 22
  1401                           
  1402                           ;incstack = 0
  1403                           ;C_DOOR_Init@cnt stored from wreg
  1404  000E26  0100               	movlb	0	; () banked
  1405  000E28  6FDB               	movwf	C_DOOR_Init@cnt& (0+255),b
  1406                           
  1407                           ;DOOR_Controller.c: 47: TRISB &= 0x3F;
  1408  000E2A  0E3F               	movlw	63
  1409  000E2C  1693               	andwf	3987,f,c	;volatile
  1410                           
  1411                           ;DOOR_Controller.c: 48: TRISB |= 0x3F;
  1412  000E2E  0E3F               	movlw	63
  1413  000E30  1293               	iorwf	3987,f,c	;volatile
  1414                           
  1415                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1416  000E32  C0DB  F0D3         	movff	C_DOOR_Init@cnt,_door_cnt
  1417  000E36  0100               	movlb	0	; () banked
  1418  000E38  6BD4               	clrf	(_door_cnt+1)& (0+255),b
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;DOOR_Controller.c: 52: uint8_t d;
  1422                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1423  000E3A  0E00               	movlw	0
  1424  000E3C  6FDC               	movwf	C_DOOR_Init@d& (0+255),b
  1425  000E3E  D071               	goto	l18
  1426  000E40                     
  1427                           ; BSR set to: 0
  1428                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1429                           
  1430                           ; BSR set to: 0
  1431  000E40  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1432  000E42  0D0A               	mullw	10
  1433  000E44  0E60               	movlw	low _doors
  1434  000E46  24F3               	addwf	prodl,w,c
  1435  000E48  6ED9               	movwf	fsr2l,c
  1436  000E4A  0E00               	movlw	high _doors
  1437  000E4C  20F4               	addwfc	prodh,w,c
  1438  000E4E  6EDA               	movwf	fsr2h,c
  1439  000E50  C0DC  FFDF         	movff	C_DOOR_Init@d,indf2
  1440                           
  1441                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1442  000E54  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1443  000E56  0D0A               	mullw	10
  1444  000E58  0E01               	movlw	1
  1445  000E5A  26F3               	addwf	prodl,f,c
  1446  000E5C  0E00               	movlw	0
  1447  000E5E  22F4               	addwfc	prodh,f,c
  1448  000E60  0E60               	movlw	low _doors
  1449  000E62  24F3               	addwf	prodl,w,c
  1450  000E64  6ED9               	movwf	fsr2l,c
  1451  000E66  0E00               	movlw	high _doors
  1452  000E68  20F4               	addwfc	prodh,w,c
  1453  000E6A  6EDA               	movwf	fsr2h,c
  1454  000E6C  0E01               	movlw	1
  1455  000E6E  6EDF               	movwf	indf2,c
  1456                           
  1457                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1458  000E70  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1459  000E72  0D0A               	mullw	10
  1460  000E74  0E02               	movlw	2
  1461  000E76  26F3               	addwf	prodl,f,c
  1462  000E78  0E00               	movlw	0
  1463  000E7A  22F4               	addwfc	prodh,f,c
  1464  000E7C  0E60               	movlw	low _doors
  1465  000E7E  24F3               	addwf	prodl,w,c
  1466  000E80  6ED9               	movwf	fsr2l,c
  1467  000E82  0E00               	movlw	high _doors
  1468  000E84  20F4               	addwfc	prodh,w,c
  1469  000E86  6EDA               	movwf	fsr2h,c
  1470  000E88  0E81               	movlw	129
  1471  000E8A  6EDE               	movwf	postinc2,c
  1472  000E8C  0E0F               	movlw	15
  1473  000E8E  6EDD               	movwf	postdec2,c
  1474                           
  1475                           ;DOOR_Controller.c: 58: doors[d].lock_pin = 7;
  1476  000E90  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1477  000E92  0D0A               	mullw	10
  1478  000E94  0E04               	movlw	4
  1479  000E96  26F3               	addwf	prodl,f,c
  1480  000E98  0E00               	movlw	0
  1481  000E9A  22F4               	addwfc	prodh,f,c
  1482  000E9C  0E60               	movlw	low _doors
  1483  000E9E  24F3               	addwf	prodl,w,c
  1484  000EA0  6ED9               	movwf	fsr2l,c
  1485  000EA2  0E00               	movlw	high _doors
  1486  000EA4  20F4               	addwfc	prodh,w,c
  1487  000EA6  6EDA               	movwf	fsr2h,c
  1488  000EA8  0E07               	movlw	7
  1489  000EAA  6EDF               	movwf	indf2,c
  1490                           
  1491                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1492  000EAC  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1493  000EAE  0D0A               	mullw	10
  1494  000EB0  0E06               	movlw	6
  1495  000EB2  26F3               	addwf	prodl,f,c
  1496  000EB4  0E00               	movlw	0
  1497  000EB6  22F4               	addwfc	prodh,f,c
  1498  000EB8  0E60               	movlw	low _doors
  1499  000EBA  24F3               	addwf	prodl,w,c
  1500  000EBC  6ED9               	movwf	fsr2l,c
  1501  000EBE  0E00               	movlw	high _doors
  1502  000EC0  20F4               	addwfc	prodh,w,c
  1503  000EC2  6EDA               	movwf	fsr2h,c
  1504  000EC4  0E00               	movlw	0
  1505  000EC6  6EDF               	movwf	indf2,c
  1506                           
  1507                           ;DOOR_Controller.c: 61: doors[d].was_open = 1;
  1508  000EC8  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1509  000ECA  0D0A               	mullw	10
  1510  000ECC  0E05               	movlw	5
  1511  000ECE  26F3               	addwf	prodl,f,c
  1512  000ED0  0E00               	movlw	0
  1513  000ED2  22F4               	addwfc	prodh,f,c
  1514  000ED4  0E60               	movlw	low _doors
  1515  000ED6  24F3               	addwf	prodl,w,c
  1516  000ED8  6ED9               	movwf	fsr2l,c
  1517  000EDA  0E00               	movlw	high _doors
  1518  000EDC  20F4               	addwfc	prodh,w,c
  1519  000EDE  6EDA               	movwf	fsr2h,c
  1520  000EE0  0E01               	movlw	1
  1521  000EE2  6EDF               	movwf	indf2,c
  1522                           
  1523                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTB;
  1524  000EE4  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1525  000EE6  0D0A               	mullw	10
  1526  000EE8  0E07               	movlw	7
  1527  000EEA  26F3               	addwf	prodl,f,c
  1528  000EEC  0E00               	movlw	0
  1529  000EEE  22F4               	addwfc	prodh,f,c
  1530  000EF0  0E60               	movlw	low _doors
  1531  000EF2  24F3               	addwf	prodl,w,c
  1532  000EF4  6ED9               	movwf	fsr2l,c
  1533  000EF6  0E00               	movlw	high _doors
  1534  000EF8  20F4               	addwfc	prodh,w,c
  1535  000EFA  6EDA               	movwf	fsr2h,c
  1536  000EFC  0E81               	movlw	129
  1537  000EFE  6EDE               	movwf	postinc2,c
  1538  000F00  0E0F               	movlw	15
  1539  000F02  6EDD               	movwf	postdec2,c
  1540                           
  1541                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = d;
  1542  000F04  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1543  000F06  0D0A               	mullw	10
  1544  000F08  0E09               	movlw	9
  1545  000F0A  26F3               	addwf	prodl,f,c
  1546  000F0C  0E00               	movlw	0
  1547  000F0E  22F4               	addwfc	prodh,f,c
  1548  000F10  0E60               	movlw	low _doors
  1549  000F12  24F3               	addwf	prodl,w,c
  1550  000F14  6ED9               	movwf	fsr2l,c
  1551  000F16  0E00               	movlw	high _doors
  1552  000F18  20F4               	addwfc	prodh,w,c
  1553  000F1A  6EDA               	movwf	fsr2h,c
  1554  000F1C  C0DC  FFDF         	movff	C_DOOR_Init@d,indf2
  1555                           
  1556                           ; BSR set to: 0
  1557  000F20  2BDC               	incf	C_DOOR_Init@d& (0+255),f,b
  1558  000F22                     l18:
  1559                           
  1560                           ; BSR set to: 0
  1561                           
  1562                           ; BSR set to: 0
  1563  000F22  51DC               	movf	C_DOOR_Init@d& (0+255),w,b
  1564  000F24  6FD8               	movwf	??_C_DOOR_Init& (0+255),b
  1565  000F26  6BD9               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1566  000F28  51D3               	movf	_door_cnt& (0+255),w,b
  1567  000F2A  5DD8               	subwf	??_C_DOOR_Init& (0+255),w,b
  1568  000F2C  51D9               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1569  000F2E  0A80               	xorlw	128
  1570  000F30  6FDA               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1571  000F32  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  1572  000F34  0A80               	xorlw	128
  1573  000F36  59DA               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1574  000F38  B0D8               	btfsc	status,0,c
  1575  000F3A  0012               	return	
  1576  000F3C  D781               	goto	l19
  1577  000F3E                     __end_of_C_DOOR_Init:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           postinc0	equ	0xFEE
  1586                           plusw0	equ	0xFEB
  1587                           wreg	equ	0xFE8
  1588                           postdec1	equ	0xFE5
  1589                           fsr1l	equ	0xFE1
  1590                           indf2	equ	0xFDF
  1591                           postinc2	equ	0xFDE
  1592                           postdec2	equ	0xFDD
  1593                           plusw2	equ	0xFDB
  1594                           fsr2h	equ	0xFDA
  1595                           fsr2l	equ	0xFD9
  1596                           status	equ	0xFD8
  1597                           
  1598 ;; *************** function _D_UART_Read *****************
  1599 ;; Defined at:
  1600 ;;		line 240 in file "Drivers/UART_Driver.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;		None
  1603 ;; Auto vars:     Size  Location     Type
  1604 ;;		None
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  6    0[BANK0 ] struct .
  1607 ;; Registers used:
  1608 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1614 ;;      Params:         0       6       0       0       0       0       0       0       0
  1615 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1616 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1617 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1618 ;;Total ram usage:        6 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    7
  1621 ;; This function calls:
  1622 ;;		Nothing
  1623 ;; This function is called by:
  1624 ;;		_main
  1625 ;; This function uses a non-reentrant model
  1626 ;;
  1627                           
  1628                           	psect	text6
  1629  0015F0                     __ptext6:
  1630                           	opt stack 0
  1631  0015F0                     _D_UART_Read:
  1632                           	opt stack 23
  1633                           
  1634                           ;UART_Driver.c: 241: readData.sender = readBuffer.sender;
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;incstack = 0
  1638  0015F0  0E0B               	movlw	low (_readBuffer+11)
  1639  0015F2  0100               	movlb	0	; () banked
  1640  0015F4  6FCA               	movwf	_readData& (0+255),b
  1641  0015F6  0E01               	movlw	high (_readBuffer+11)
  1642  0015F8  6FCB               	movwf	(_readData+1)& (0+255),b
  1643                           
  1644                           ;UART_Driver.c: 242: readData.command = readBuffer.command;
  1645  0015FA  0E3E               	movlw	low (_readBuffer+62)
  1646  0015FC  6FCC               	movwf	(_readData+2)& (0+255),b
  1647  0015FE  0E01               	movlw	high (_readBuffer+62)
  1648  001600  6FCD               	movwf	(_readData+3)& (0+255),b
  1649                           
  1650                           ;UART_Driver.c: 243: readData.message = readBuffer.message;
  1651  001602  0E71               	movlw	low (_readBuffer+113)
  1652  001604  6FCE               	movwf	(_readData+4)& (0+255),b
  1653  001606  0E01               	movlw	high (_readBuffer+113)
  1654  001608  6FCF               	movwf	(_readData+5)& (0+255),b
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;UART_Driver.c: 244: return readData;
  1658  00160A  EE20  F0CA         	lfsr	2,_readData
  1659  00160E  EE00  F0D8         	lfsr	0,?_D_UART_Read
  1660  001612  0E05               	movlw	5
  1661  001614                     u1281:
  1662  001614  CFDB FFEB          	movff	plusw2,plusw0
  1663  001618  06E8               	decf	wreg,f,c
  1664  00161A  E2FC               	bc	u1281
  1665  00161C  0012               	return	
  1666  00161E                     __end_of_D_UART_Read:
  1667                           	opt stack 0
  1668                           tblptru	equ	0xFF8
  1669                           tblptrh	equ	0xFF7
  1670                           tblptrl	equ	0xFF6
  1671                           tablat	equ	0xFF5
  1672                           prodh	equ	0xFF4
  1673                           prodl	equ	0xFF3
  1674                           postinc0	equ	0xFEE
  1675                           plusw0	equ	0xFEB
  1676                           wreg	equ	0xFE8
  1677                           postdec1	equ	0xFE5
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           postinc2	equ	0xFDE
  1681                           postdec2	equ	0xFDD
  1682                           plusw2	equ	0xFDB
  1683                           fsr2h	equ	0xFDA
  1684                           fsr2l	equ	0xFD9
  1685                           status	equ	0xFD8
  1686                           
  1687 ;; *************** function _D_UART_Init *****************
  1688 ;; Defined at:
  1689 ;;		line 182 in file "Drivers/UART_Driver.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;  name            2   14[BANK0 ] PTR const unsigned char 
  1692 ;;		 -> STR_8(2), 
  1693 ;;  baud            2   16[BANK0 ] unsigned int 
  1694 ;;  interrupts      1   18[BANK0 ] unsigned char 
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1706 ;;      Params:         0       5       0       0       0       0       0       0       0
  1707 ;;      Locals:         0       4       0       0       0       0       0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1709 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1710 ;;Total ram usage:        9 bytes
  1711 ;; Hardware stack levels used:    1
  1712 ;; Hardware stack levels required when called:    8
  1713 ;; This function calls:
  1714 ;;		_D_UART_Enable
  1715 ;;		___aldiv
  1716 ;; This function is called by:
  1717 ;;		_main
  1718 ;; This function uses a non-reentrant model
  1719 ;;
  1720                           
  1721                           	psect	text7
  1722  0011C8                     __ptext7:
  1723                           	opt stack 0
  1724  0011C8                     _D_UART_Init:
  1725                           	opt stack 22
  1726                           
  1727                           ;UART_Driver.c: 184: TRISCbits.TRISC7 = 0;
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;incstack = 0
  1731  0011C8  9E94               	bcf	3988,7,c	;volatile
  1732                           
  1733                           ;UART_Driver.c: 185: TRISCbits.TRISC6 = 1;
  1734  0011CA  8C94               	bsf	3988,6,c	;volatile
  1735                           
  1736                           ;UART_Driver.c: 188: deviceName = name;
  1737  0011CC  C0E6  F0D0         	movff	D_UART_Init@name,_deviceName
  1738  0011D0  C0E7  F0D1         	movff	D_UART_Init@name+1,_deviceName+1
  1739  0011D4  0100               	movlb	0	; () banked
  1740  0011D6  51D0               	movf	_deviceName& (0+255),w,b
  1741  0011D8  11D1               	iorwf	(_deviceName+1)& (0+255),w,b
  1742  0011DA  A4D8               	btfss	status,2,c
  1743  0011DC  0E00               	movlw	low (__mediumconst shr (0+16))
  1744  0011DE  6FD2               	movwf	(_deviceName+2)& (0+255),b
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;UART_Driver.c: 189: readReady = 0;
  1748  0011E0  0E00               	movlw	0
  1749  0011E2  6FD7               	movwf	_readReady& (0+255),b
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;UART_Driver.c: 192: D_UART_Enable(0);
  1753  0011E4  0E00               	movlw	0
  1754  0011E6  EC22  F00B         	call	_D_UART_Enable
  1755                           
  1756                           ;UART_Driver.c: 195: TXSTAbits.TX9 = 0;
  1757  0011EA  9CAC               	bcf	4012,6,c	;volatile
  1758                           
  1759                           ;UART_Driver.c: 196: TXSTAbits.SYNC = 0;
  1760  0011EC  98AC               	bcf	4012,4,c	;volatile
  1761                           
  1762                           ;UART_Driver.c: 197: TXSTAbits.BRGH = 0;
  1763  0011EE  94AC               	bcf	4012,2,c	;volatile
  1764                           
  1765                           ;UART_Driver.c: 200: RCSTAbits.RX9 = 0;
  1766  0011F0  9CAB               	bcf	4011,6,c	;volatile
  1767                           
  1768                           ;UART_Driver.c: 203: BAUDCONbits.RXDTP = 0;
  1769  0011F2  9AB8               	bcf	4024,5,c	;volatile
  1770                           
  1771                           ;UART_Driver.c: 204: BAUDCONbits.TXCKP = 0;
  1772  0011F4  98B8               	bcf	4024,4,c	;volatile
  1773                           
  1774                           ;UART_Driver.c: 205: BAUDCONbits.BRG16 = 0;
  1775  0011F6  96B8               	bcf	4024,3,c	;volatile
  1776                           
  1777                           ;UART_Driver.c: 208: RCSTAbits.FERR = 0;
  1778  0011F8  94AB               	bcf	4011,2,c	;volatile
  1779                           
  1780                           ;UART_Driver.c: 209: RCSTAbits.OERR = 0;
  1781  0011FA  92AB               	bcf	4011,1,c	;volatile
  1782                           
  1783                           ;UART_Driver.c: 210: RCREG = 0x00;
  1784  0011FC  0E00               	movlw	0
  1785  0011FE  6EAE               	movwf	4014,c	;volatile
  1786                           
  1787                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1788  001200  C0E8  F0DC         	movff	D_UART_Init@baud,___aldiv@divisor
  1789  001204  C0E9  F0DD         	movff	D_UART_Init@baud+1,___aldiv@divisor+1
  1790  001208  0100               	movlb	0	; () banked
  1791  00120A  6BDE               	clrf	(___aldiv@divisor+2)& (0+255),b
  1792  00120C  6BDF               	clrf	(___aldiv@divisor+3)& (0+255),b
  1793  00120E  0E00               	movlw	0
  1794  001210  6FD8               	movwf	___aldiv@dividend& (0+255),b
  1795  001212  0E24               	movlw	36
  1796  001214  6FD9               	movwf	(___aldiv@dividend+1)& (0+255),b
  1797  001216  0EF4               	movlw	244
  1798  001218  6FDA               	movwf	(___aldiv@dividend+2)& (0+255),b
  1799  00121A  0E00               	movlw	0
  1800  00121C  6FDB               	movwf	(___aldiv@dividend+3)& (0+255),b
  1801  00121E  EC7D  F008         	call	___aldiv	;wreg free
  1802  001222  C0D8  F0EB         	movff	?___aldiv,_D_UART_Init$1670
  1803  001226  C0D9  F0EC         	movff	?___aldiv+1,_D_UART_Init$1670+1
  1804  00122A  C0DA  F0ED         	movff	?___aldiv+2,_D_UART_Init$1670+2
  1805  00122E  C0DB  F0EE         	movff	?___aldiv+3,_D_UART_Init$1670+3
  1806                           
  1807                           ;UART_Driver.c: 213: SPBRG = (uint8_t)((16000000/baud)/64)-1;
  1808  001232  C0EB  F0D8         	movff	_D_UART_Init$1670,___aldiv@dividend
  1809  001236  C0EC  F0D9         	movff	_D_UART_Init$1670+1,___aldiv@dividend+1
  1810  00123A  C0ED  F0DA         	movff	_D_UART_Init$1670+2,___aldiv@dividend+2
  1811  00123E  C0EE  F0DB         	movff	_D_UART_Init$1670+3,___aldiv@dividend+3
  1812  001242  0E40               	movlw	64
  1813  001244  0100               	movlb	0	; () banked
  1814  001246  6FDC               	movwf	___aldiv@divisor& (0+255),b
  1815  001248  0E00               	movlw	0
  1816  00124A  6FDD               	movwf	(___aldiv@divisor+1)& (0+255),b
  1817  00124C  0E00               	movlw	0
  1818  00124E  6FDE               	movwf	(___aldiv@divisor+2)& (0+255),b
  1819  001250  0E00               	movlw	0
  1820  001252  6FDF               	movwf	(___aldiv@divisor+3)& (0+255),b
  1821  001254  EC7D  F008         	call	___aldiv	;wreg free
  1822  001258  0100               	movlb	0	; () banked
  1823  00125A  05D8               	decf	?___aldiv& (0+255),w,b
  1824  00125C  6EAF               	movwf	4015,c	;volatile
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;UART_Driver.c: 216: if (interrupts) {
  1828  00125E  51EA               	movf	D_UART_Init@interrupts& (0+255),w,b
  1829  001260  B4D8               	btfsc	status,2,c
  1830  001262  0012               	return	
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;UART_Driver.c: 217: RCONbits.IPEN = 1;
  1834  001264  8ED0               	bsf	4048,7,c	;volatile
  1835                           
  1836                           ;UART_Driver.c: 218: INTCONbits.GIEH = 1;
  1837  001266  8EF2               	bsf	intcon,7,c	;volatile
  1838                           
  1839                           ;UART_Driver.c: 219: INTCONbits.GIEL = 1;
  1840  001268  8CF2               	bsf	intcon,6,c	;volatile
  1841                           
  1842                           ;UART_Driver.c: 220: PIR1bits.RCIF = 0;
  1843  00126A  9A9E               	bcf	3998,5,c	;volatile
  1844                           
  1845                           ;UART_Driver.c: 221: IPR1bits.RCIP = 0;
  1846  00126C  9A9F               	bcf	3999,5,c	;volatile
  1847                           
  1848                           ;UART_Driver.c: 222: PIE1bits.RCIE = 1;
  1849  00126E  8A9D               	bsf	3997,5,c	;volatile
  1850  001270  0012               	return	
  1851  001272                     __end_of_D_UART_Init:
  1852                           	opt stack 0
  1853                           tblptru	equ	0xFF8
  1854                           tblptrh	equ	0xFF7
  1855                           tblptrl	equ	0xFF6
  1856                           tablat	equ	0xFF5
  1857                           prodh	equ	0xFF4
  1858                           prodl	equ	0xFF3
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           plusw0	equ	0xFEB
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1l	equ	0xFE1
  1865                           indf2	equ	0xFDF
  1866                           postinc2	equ	0xFDE
  1867                           postdec2	equ	0xFDD
  1868                           plusw2	equ	0xFDB
  1869                           fsr2h	equ	0xFDA
  1870                           fsr2l	equ	0xFD9
  1871                           status	equ	0xFD8
  1872                           
  1873 ;; *************** function ___aldiv *****************
  1874 ;; Defined at:
  1875 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  dividend        4    0[BANK0 ] long 
  1878 ;;  divisor         4    4[BANK0 ] long 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;  quotient        4   10[BANK0 ] long 
  1881 ;;  sign            1    9[BANK0 ] unsigned char 
  1882 ;;  counter         1    8[BANK0 ] unsigned char 
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  4    0[BANK0 ] long 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2, status,0
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1892 ;;      Params:         0       8       0       0       0       0       0       0       0
  1893 ;;      Locals:         0       6       0       0       0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1895 ;;      Totals:         0      14       0       0       0       0       0       0       0
  1896 ;;Total ram usage:       14 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    7
  1899 ;; This function calls:
  1900 ;;		Nothing
  1901 ;; This function is called by:
  1902 ;;		_D_UART_Init
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text8
  1907  0010FA                     __ptext8:
  1908                           	opt stack 0
  1909  0010FA                     ___aldiv:
  1910                           	opt stack 22
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;incstack = 0
  1914  0010FA  0E00               	movlw	0
  1915  0010FC  0100               	movlb	0	; () banked
  1916  0010FE  6FE1               	movwf	___aldiv@sign& (0+255),b
  1917                           
  1918                           ; BSR set to: 0
  1919  001100  AFDF               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1920  001102  D00A               	goto	l390
  1921                           
  1922                           ; BSR set to: 0
  1923  001104  1FDF               	comf	(___aldiv@divisor+3)& (0+255),f,b
  1924  001106  1FDE               	comf	(___aldiv@divisor+2)& (0+255),f,b
  1925  001108  1FDD               	comf	(___aldiv@divisor+1)& (0+255),f,b
  1926  00110A  6DDC               	negf	___aldiv@divisor& (0+255),b
  1927  00110C  0E00               	movlw	0
  1928  00110E  23DD               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
  1929  001110  23DE               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
  1930  001112  23DF               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
  1931                           
  1932                           ; BSR set to: 0
  1933  001114  0E01               	movlw	1
  1934  001116  6FE1               	movwf	___aldiv@sign& (0+255),b
  1935  001118                     l390:
  1936                           
  1937                           ; BSR set to: 0
  1938                           
  1939                           ; BSR set to: 0
  1940  001118  AFDB               	btfss	(___aldiv@dividend+3)& (0+255),7,b
  1941  00111A  D00A               	goto	l391
  1942                           
  1943                           ; BSR set to: 0
  1944  00111C  1FDB               	comf	(___aldiv@dividend+3)& (0+255),f,b
  1945  00111E  1FDA               	comf	(___aldiv@dividend+2)& (0+255),f,b
  1946  001120  1FD9               	comf	(___aldiv@dividend+1)& (0+255),f,b
  1947  001122  6DD8               	negf	___aldiv@dividend& (0+255),b
  1948  001124  0E00               	movlw	0
  1949  001126  23D9               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
  1950  001128  23DA               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
  1951  00112A  23DB               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
  1952                           
  1953                           ; BSR set to: 0
  1954  00112C  0E01               	movlw	1
  1955  00112E  1BE1               	xorwf	___aldiv@sign& (0+255),f,b
  1956  001130                     l391:
  1957                           
  1958                           ; BSR set to: 0
  1959                           
  1960                           ; BSR set to: 0
  1961  001130  0E00               	movlw	0
  1962  001132  6FE2               	movwf	___aldiv@quotient& (0+255),b
  1963  001134  0E00               	movlw	0
  1964  001136  6FE3               	movwf	(___aldiv@quotient+1)& (0+255),b
  1965  001138  0E00               	movlw	0
  1966  00113A  6FE4               	movwf	(___aldiv@quotient+2)& (0+255),b
  1967  00113C  0E00               	movlw	0
  1968  00113E  6FE5               	movwf	(___aldiv@quotient+3)& (0+255),b
  1969                           
  1970                           ; BSR set to: 0
  1971  001140  51DC               	movf	___aldiv@divisor& (0+255),w,b
  1972  001142  11DD               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
  1973  001144  11DE               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
  1974  001146  11DF               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
  1975  001148  B4D8               	btfsc	status,2,c
  1976  00114A  D02A               	goto	l398
  1977                           
  1978                           ; BSR set to: 0
  1979  00114C  0E01               	movlw	1
  1980  00114E  6FE0               	movwf	___aldiv@counter& (0+255),b
  1981  001150  D006               	goto	l393
  1982  001152                     
  1983                           ; BSR set to: 0
  1984                           
  1985                           ; BSR set to: 0
  1986  001152  90D8               	bcf	status,0,c
  1987  001154  37DC               	rlcf	___aldiv@divisor& (0+255),f,b
  1988  001156  37DD               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
  1989  001158  37DE               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
  1990  00115A  37DF               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
  1991  00115C  2BE0               	incf	___aldiv@counter& (0+255),f,b
  1992  00115E                     l393:
  1993                           
  1994                           ; BSR set to: 0
  1995                           
  1996                           ; BSR set to: 0
  1997  00115E  AFDF               	btfss	(___aldiv@divisor+3)& (0+255),7,b
  1998  001160  D7F8               	goto	l394
  1999  001162                     u1090:
  2000                           
  2001                           ; BSR set to: 0
  2002                           
  2003                           ; BSR set to: 0
  2004                           
  2005                           ; BSR set to: 0
  2006  001162  90D8               	bcf	status,0,c
  2007  001164  37E2               	rlcf	___aldiv@quotient& (0+255),f,b
  2008  001166  37E3               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  2009  001168  37E4               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  2010  00116A  37E5               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  2011                           
  2012                           ; BSR set to: 0
  2013  00116C  51DC               	movf	___aldiv@divisor& (0+255),w,b
  2014  00116E  5DD8               	subwf	___aldiv@dividend& (0+255),w,b
  2015  001170  51DD               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2016  001172  59D9               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
  2017  001174  51DE               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2018  001176  59DA               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
  2019  001178  51DF               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2020  00117A  59DB               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
  2021  00117C  A0D8               	btfss	status,0,c
  2022  00117E  D009               	goto	l397
  2023                           
  2024                           ; BSR set to: 0
  2025  001180  51DC               	movf	___aldiv@divisor& (0+255),w,b
  2026  001182  5FD8               	subwf	___aldiv@dividend& (0+255),f,b
  2027  001184  51DD               	movf	(___aldiv@divisor+1)& (0+255),w,b
  2028  001186  5BD9               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
  2029  001188  51DE               	movf	(___aldiv@divisor+2)& (0+255),w,b
  2030  00118A  5BDA               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
  2031  00118C  51DF               	movf	(___aldiv@divisor+3)& (0+255),w,b
  2032  00118E  5BDB               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
  2033                           
  2034                           ; BSR set to: 0
  2035  001190  81E2               	bsf	___aldiv@quotient& (0+255),0,b
  2036  001192                     l397:
  2037                           
  2038                           ; BSR set to: 0
  2039                           
  2040                           ; BSR set to: 0
  2041  001192  90D8               	bcf	status,0,c
  2042  001194  33DF               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
  2043  001196  33DE               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
  2044  001198  33DD               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
  2045  00119A  33DC               	rrcf	___aldiv@divisor& (0+255),f,b
  2046                           
  2047                           ; BSR set to: 0
  2048  00119C  2FE0               	decfsz	___aldiv@counter& (0+255),f,b
  2049  00119E  D7E1               	goto	u1090
  2050  0011A0                     l398:
  2051                           
  2052                           ; BSR set to: 0
  2053                           
  2054                           ; BSR set to: 0
  2055                           
  2056                           ; BSR set to: 0
  2057  0011A0  51E1               	movf	___aldiv@sign& (0+255),w,b
  2058  0011A2  B4D8               	btfsc	status,2,c
  2059  0011A4  D008               	goto	l399
  2060                           
  2061                           ; BSR set to: 0
  2062  0011A6  1FE5               	comf	(___aldiv@quotient+3)& (0+255),f,b
  2063  0011A8  1FE4               	comf	(___aldiv@quotient+2)& (0+255),f,b
  2064  0011AA  1FE3               	comf	(___aldiv@quotient+1)& (0+255),f,b
  2065  0011AC  6DE2               	negf	___aldiv@quotient& (0+255),b
  2066  0011AE  0E00               	movlw	0
  2067  0011B0  23E3               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  2068  0011B2  23E4               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  2069  0011B4  23E5               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  2070  0011B6                     l399:
  2071                           
  2072                           ; BSR set to: 0
  2073                           
  2074                           ; BSR set to: 0
  2075  0011B6  C0E2  F0D8         	movff	___aldiv@quotient,?___aldiv
  2076  0011BA  C0E3  F0D9         	movff	___aldiv@quotient+1,?___aldiv+1
  2077  0011BE  C0E4  F0DA         	movff	___aldiv@quotient+2,?___aldiv+2
  2078  0011C2  C0E5  F0DB         	movff	___aldiv@quotient+3,?___aldiv+3
  2079  0011C6  0012               	return	
  2080  0011C8                     __end_of___aldiv:
  2081                           	opt stack 0
  2082                           tblptru	equ	0xFF8
  2083                           tblptrh	equ	0xFF7
  2084                           tblptrl	equ	0xFF6
  2085                           tablat	equ	0xFF5
  2086                           prodh	equ	0xFF4
  2087                           prodl	equ	0xFF3
  2088                           intcon	equ	0xFF2
  2089                           postinc0	equ	0xFEE
  2090                           plusw0	equ	0xFEB
  2091                           wreg	equ	0xFE8
  2092                           postdec1	equ	0xFE5
  2093                           fsr1l	equ	0xFE1
  2094                           indf2	equ	0xFDF
  2095                           postinc2	equ	0xFDE
  2096                           postdec2	equ	0xFDD
  2097                           plusw2	equ	0xFDB
  2098                           fsr2h	equ	0xFDA
  2099                           fsr2l	equ	0xFD9
  2100                           status	equ	0xFD8
  2101                           
  2102 ;; *************** function _D_UART_Enable *****************
  2103 ;; Defined at:
  2104 ;;		line 247 in file "Drivers/UART_Driver.c"
  2105 ;; Parameters:    Size  Location     Type
  2106 ;;  enable          1    wreg     unsigned char 
  2107 ;; Auto vars:     Size  Location     Type
  2108 ;;  enable          1    0[BANK0 ] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, status,2
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2118 ;;      Params:         0       0       0       0       0       0       0       0       0
  2119 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2121 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2122 ;;Total ram usage:        1 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    7
  2125 ;; This function calls:
  2126 ;;		Nothing
  2127 ;; This function is called by:
  2128 ;;		_D_UART_Init
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text9
  2134  001644                     __ptext9:
  2135                           	opt stack 0
  2136  001644                     _D_UART_Enable:
  2137                           	opt stack 22
  2138                           
  2139                           ; BSR set to: 0
  2140                           ;incstack = 0
  2141                           ;D_UART_Enable@enable stored from wreg
  2142  001644  0100               	movlb	0	; () banked
  2143  001646  6FD8               	movwf	D_UART_Enable@enable& (0+255),b
  2144                           
  2145                           ;UART_Driver.c: 248: if(enable) {
  2146  001648  0100               	movlb	0	; () banked
  2147  00164A  51D8               	movf	D_UART_Enable@enable& (0+255),w,b
  2148  00164C  B4D8               	btfsc	status,2,c
  2149  00164E  D006               	goto	l176
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;UART_Driver.c: 249: TRISCbits.TRISC7 = 0;
  2153  001650  9E94               	bcf	3988,7,c	;volatile
  2154                           
  2155                           ;UART_Driver.c: 250: TRISCbits.TRISC6 = 1;
  2156  001652  8C94               	bsf	3988,6,c	;volatile
  2157                           
  2158                           ;UART_Driver.c: 251: TXSTAbits.TXEN = 1;
  2159  001654  8AAC               	bsf	4012,5,c	;volatile
  2160                           
  2161                           ;UART_Driver.c: 252: RCSTAbits.CREN = 1;
  2162  001656  88AB               	bsf	4011,4,c	;volatile
  2163                           
  2164                           ;UART_Driver.c: 253: RCSTAbits.SPEN = 1;
  2165  001658  8EAB               	bsf	4011,7,c	;volatile
  2166                           
  2167                           ;UART_Driver.c: 254: } else {
  2168  00165A  0012               	return	
  2169  00165C                     l176:
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;UART_Driver.c: 255: TRISCbits.TRISC7 = 0;
  2173  00165C  9E94               	bcf	3988,7,c	;volatile
  2174                           
  2175                           ;UART_Driver.c: 256: TRISCbits.TRISC6 = 0;
  2176  00165E  9C94               	bcf	3988,6,c	;volatile
  2177                           
  2178                           ;UART_Driver.c: 257: TXSTAbits.TXEN = 0;
  2179  001660  9AAC               	bcf	4012,5,c	;volatile
  2180                           
  2181                           ;UART_Driver.c: 258: RCSTAbits.CREN = 0;
  2182  001662  98AB               	bcf	4011,4,c	;volatile
  2183                           
  2184                           ;UART_Driver.c: 259: RCSTAbits.SPEN = 0;
  2185  001664  9EAB               	bcf	4011,7,c	;volatile
  2186  001666  0012               	return	
  2187  001668                     __end_of_D_UART_Enable:
  2188                           	opt stack 0
  2189                           tblptru	equ	0xFF8
  2190                           tblptrh	equ	0xFF7
  2191                           tblptrl	equ	0xFF6
  2192                           tablat	equ	0xFF5
  2193                           prodh	equ	0xFF4
  2194                           prodl	equ	0xFF3
  2195                           intcon	equ	0xFF2
  2196                           postinc0	equ	0xFEE
  2197                           plusw0	equ	0xFEB
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1l	equ	0xFE1
  2201                           indf2	equ	0xFDF
  2202                           postinc2	equ	0xFDE
  2203                           postdec2	equ	0xFDD
  2204                           plusw2	equ	0xFDB
  2205                           fsr2h	equ	0xFDA
  2206                           fsr2l	equ	0xFD9
  2207                           status	equ	0xFD8
  2208                           
  2209 ;; *************** function _D_TMR0_Init *****************
  2210 ;; Defined at:
  2211 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2212 ;; Parameters:    Size  Location     Type
  2213 ;;		None
  2214 ;; Auto vars:     Size  Location     Type
  2215 ;;		None
  2216 ;; Return value:  Size  Location     Type
  2217 ;;                  1    wreg      void 
  2218 ;; Registers used:
  2219 ;;		wreg, status,2, cstack
  2220 ;; Tracked objects:
  2221 ;;		On entry : 0/0
  2222 ;;		On exit  : 0/0
  2223 ;;		Unchanged: 0/0
  2224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2225 ;;      Params:         0       0       0       0       0       0       0       0       0
  2226 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2228 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2229 ;;Total ram usage:        0 bytes
  2230 ;; Hardware stack levels used:    1
  2231 ;; Hardware stack levels required when called:    8
  2232 ;; This function calls:
  2233 ;;		_D_TMR0_Enable
  2234 ;; This function is called by:
  2235 ;;		_main
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text10
  2240  001668                     __ptext10:
  2241                           	opt stack 0
  2242  001668                     _D_TMR0_Init:
  2243                           	opt stack 22
  2244                           
  2245                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;incstack = 0
  2249  001668  0E00               	movlw	0
  2250  00166A  EC74  F00B         	call	_D_TMR0_Enable
  2251                           
  2252                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2253  00166E  9CD5               	bcf	4053,6,c	;volatile
  2254                           
  2255                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2256  001670  9AD5               	bcf	4053,5,c	;volatile
  2257                           
  2258                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2259  001672  98D5               	bcf	4053,4,c	;volatile
  2260                           
  2261                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2262  001674  96D5               	bcf	4053,3,c	;volatile
  2263                           
  2264                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2265  001676  50D5               	movf	4053,w,c	;volatile
  2266  001678  0BF8               	andlw	-8
  2267  00167A  0902               	iorlw	2
  2268  00167C  6ED5               	movwf	4053,c	;volatile
  2269                           
  2270                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2271  00167E  8ED0               	bsf	4048,7,c	;volatile
  2272                           
  2273                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2274  001680  8EF2               	bsf	intcon,7,c	;volatile
  2275                           
  2276                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2277  001682  8CF2               	bsf	intcon,6,c	;volatile
  2278                           
  2279                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2280  001684  94F2               	bcf	intcon,2,c	;volatile
  2281                           
  2282                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 1;
  2283  001686  84F1               	bsf	intcon2,2,c	;volatile
  2284                           
  2285                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2286  001688  8AF2               	bsf	intcon,5,c	;volatile
  2287  00168A  0012               	return		;funcret
  2288  00168C                     __end_of_D_TMR0_Init:
  2289                           	opt stack 0
  2290                           tblptru	equ	0xFF8
  2291                           tblptrh	equ	0xFF7
  2292                           tblptrl	equ	0xFF6
  2293                           tablat	equ	0xFF5
  2294                           prodh	equ	0xFF4
  2295                           prodl	equ	0xFF3
  2296                           intcon	equ	0xFF2
  2297                           intcon2	equ	0xFF1
  2298                           postinc0	equ	0xFEE
  2299                           plusw0	equ	0xFEB
  2300                           wreg	equ	0xFE8
  2301                           postdec1	equ	0xFE5
  2302                           fsr1l	equ	0xFE1
  2303                           indf2	equ	0xFDF
  2304                           postinc2	equ	0xFDE
  2305                           postdec2	equ	0xFDD
  2306                           plusw2	equ	0xFDB
  2307                           fsr2h	equ	0xFDA
  2308                           fsr2l	equ	0xFD9
  2309                           status	equ	0xFD8
  2310                           
  2311 ;; *************** function _D_TMR0_Enable *****************
  2312 ;; Defined at:
  2313 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  2314 ;; Parameters:    Size  Location     Type
  2315 ;;  enable          1    wreg     unsigned char 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  enable          1    0[BANK0 ] unsigned char 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, status,2
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2327 ;;      Params:         0       0       0       0       0       0       0       0       0
  2328 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2329 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2330 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2331 ;;Total ram usage:        1 bytes
  2332 ;; Hardware stack levels used:    1
  2333 ;; Hardware stack levels required when called:    7
  2334 ;; This function calls:
  2335 ;;		Nothing
  2336 ;; This function is called by:
  2337 ;;		_D_TMR0_Init
  2338 ;;		_initDoors
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text11
  2343  0016E8                     __ptext11:
  2344                           	opt stack 0
  2345  0016E8                     _D_TMR0_Enable:
  2346                           	opt stack 22
  2347                           
  2348                           ;incstack = 0
  2349                           ;D_TMR0_Enable@enable stored from wreg
  2350  0016E8  0100               	movlb	0	; () banked
  2351  0016EA  6FD8               	movwf	D_TMR0_Enable@enable& (0+255),b
  2352                           
  2353                           ;TMR0_Driver.c: 54: if (enable) {
  2354  0016EC  0100               	movlb	0	; () banked
  2355  0016EE  51D8               	movf	D_TMR0_Enable@enable& (0+255),w,b
  2356  0016F0  B4D8               	btfsc	status,2,c
  2357  0016F2  D002               	goto	l203
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  2361  0016F4  8ED5               	bsf	4053,7,c	;volatile
  2362                           
  2363                           ;TMR0_Driver.c: 56: } else {
  2364  0016F6  0012               	return	
  2365  0016F8                     l203:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  2369  0016F8  9ED5               	bcf	4053,7,c	;volatile
  2370  0016FA  0012               	return	
  2371  0016FC                     __end_of_D_TMR0_Enable:
  2372                           	opt stack 0
  2373                           tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           prodh	equ	0xFF4
  2378                           prodl	equ	0xFF3
  2379                           intcon	equ	0xFF2
  2380                           intcon2	equ	0xFF1
  2381                           postinc0	equ	0xFEE
  2382                           plusw0	equ	0xFEB
  2383                           wreg	equ	0xFE8
  2384                           postdec1	equ	0xFE5
  2385                           fsr1l	equ	0xFE1
  2386                           indf2	equ	0xFDF
  2387                           postinc2	equ	0xFDE
  2388                           postdec2	equ	0xFDD
  2389                           plusw2	equ	0xFDB
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394 ;; *************** function _D_PWM_SetPwm *****************
  2395 ;; Defined at:
  2396 ;;		line 48 in file "Drivers/PWM_Driver.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  pwm             1    wreg     unsigned char 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  pwm             1    0[BANK0 ] unsigned char 
  2401 ;; Return value:  Size  Location     Type
  2402 ;;                  1    wreg      void 
  2403 ;; Registers used:
  2404 ;;		wreg, status,2
  2405 ;; Tracked objects:
  2406 ;;		On entry : 0/0
  2407 ;;		On exit  : 0/0
  2408 ;;		Unchanged: 0/0
  2409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2410 ;;      Params:         0       0       0       0       0       0       0       0       0
  2411 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2413 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2414 ;;Total ram usage:        1 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    7
  2417 ;; This function calls:
  2418 ;;		Nothing
  2419 ;; This function is called by:
  2420 ;;		_main
  2421 ;; This function uses a non-reentrant model
  2422 ;;
  2423                           
  2424                           	psect	text12
  2425  0016CC                     __ptext12:
  2426                           	opt stack 0
  2427  0016CC                     _D_PWM_SetPwm:
  2428                           	opt stack 23
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;incstack = 0
  2432                           ;D_PWM_SetPwm@pwm stored from wreg
  2433  0016CC  0100               	movlb	0	; () banked
  2434  0016CE  6FD8               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2435                           
  2436                           ;PWM_Driver.c: 49: if (pwm > 0) {
  2437  0016D0  0100               	movlb	0	; () banked
  2438  0016D2  51D8               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2439  0016D4  B4D8               	btfsc	status,2,c
  2440  0016D6  D005               	goto	l304
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;PWM_Driver.c: 50: if (T2CONbits.TMR2ON == 0) {
  2444  0016D8  A4CA               	btfss	4042,2,c	;volatile
  2445                           
  2446                           ; BSR set to: 0
  2447                           ;PWM_Driver.c: 51: T2CONbits.TMR2ON = 1;
  2448  0016DA  84CA               	bsf	4042,2,c	;volatile
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;PWM_Driver.c: 52: }
  2452                           ;PWM_Driver.c: 53: CCPR1L = pwm;
  2453                           
  2454                           ; BSR set to: 0
  2455  0016DC  C0D8  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2456                           
  2457                           ;PWM_Driver.c: 54: } else {
  2458  0016E0  0012               	return	
  2459  0016E2                     l304:
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;PWM_Driver.c: 55: T2CONbits.TMR2ON = 0;
  2463  0016E2  94CA               	bcf	4042,2,c	;volatile
  2464                           
  2465                           ;PWM_Driver.c: 56: PORTCbits.RC2 = 0;
  2466  0016E4  9482               	bcf	3970,2,c	;volatile
  2467  0016E6  0012               	return	
  2468  0016E8                     __end_of_D_PWM_SetPwm:
  2469                           	opt stack 0
  2470                           tblptru	equ	0xFF8
  2471                           tblptrh	equ	0xFF7
  2472                           tblptrl	equ	0xFF6
  2473                           tablat	equ	0xFF5
  2474                           prodh	equ	0xFF4
  2475                           prodl	equ	0xFF3
  2476                           intcon	equ	0xFF2
  2477                           intcon2	equ	0xFF1
  2478                           postinc0	equ	0xFEE
  2479                           plusw0	equ	0xFEB
  2480                           wreg	equ	0xFE8
  2481                           postdec1	equ	0xFE5
  2482                           fsr1l	equ	0xFE1
  2483                           indf2	equ	0xFDF
  2484                           postinc2	equ	0xFDE
  2485                           postdec2	equ	0xFDD
  2486                           plusw2	equ	0xFDB
  2487                           fsr2h	equ	0xFDA
  2488                           fsr2l	equ	0xFD9
  2489                           status	equ	0xFD8
  2490                           
  2491 ;; *************** function _D_PWM_Init *****************
  2492 ;; Defined at:
  2493 ;;		line 31 in file "Drivers/PWM_Driver.c"
  2494 ;; Parameters:    Size  Location     Type
  2495 ;;		None
  2496 ;; Auto vars:     Size  Location     Type
  2497 ;;		None
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  1    wreg      void 
  2500 ;; Registers used:
  2501 ;;		wreg, status,2
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2507 ;;      Params:         0       0       0       0       0       0       0       0       0
  2508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2511 ;;Total ram usage:        0 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    7
  2514 ;; This function calls:
  2515 ;;		Nothing
  2516 ;; This function is called by:
  2517 ;;		_main
  2518 ;; This function uses a non-reentrant model
  2519 ;;
  2520                           
  2521                           	psect	text13
  2522  00161E                     __ptext13:
  2523                           	opt stack 0
  2524  00161E                     _D_PWM_Init:
  2525                           	opt stack 23
  2526                           
  2527                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;incstack = 0
  2531  00161E  68CB               	setf	4043,c	;volatile
  2532                           
  2533                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  2534  001620  94CA               	bcf	4042,2,c	;volatile
  2535                           
  2536                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  2537  001622  50CA               	movf	4042,w,c	;volatile
  2538  001624  0BFC               	andlw	-4
  2539  001626  0901               	iorlw	1
  2540  001628  6ECA               	movwf	4042,c	;volatile
  2541                           
  2542                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  2543  00162A  96CA               	bcf	4042,3,c	;volatile
  2544  00162C  98CA               	bcf	4042,4,c	;volatile
  2545  00162E  9ACA               	bcf	4042,5,c	;volatile
  2546  001630  9CCA               	bcf	4042,6,c	;volatile
  2547                           
  2548                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  2549  001632  0E1F               	movlw	31
  2550  001634  6EBE               	movwf	4030,c	;volatile
  2551                           
  2552                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  2553  001636  0ECF               	movlw	-49
  2554  001638  16BD               	andwf	4029,f,c	;volatile
  2555                           
  2556                           ;PWM_Driver.c: 44: CCP1CONbits.CCP1M = 0b1100;
  2557  00163A  50BD               	movf	4029,w,c	;volatile
  2558  00163C  0BF0               	andlw	-16
  2559  00163E  090C               	iorlw	12
  2560  001640  6EBD               	movwf	4029,c	;volatile
  2561  001642  0012               	return		;funcret
  2562  001644                     __end_of_D_PWM_Init:
  2563                           	opt stack 0
  2564                           tblptru	equ	0xFF8
  2565                           tblptrh	equ	0xFF7
  2566                           tblptrl	equ	0xFF6
  2567                           tablat	equ	0xFF5
  2568                           prodh	equ	0xFF4
  2569                           prodl	equ	0xFF3
  2570                           intcon	equ	0xFF2
  2571                           intcon2	equ	0xFF1
  2572                           postinc0	equ	0xFEE
  2573                           plusw0	equ	0xFEB
  2574                           wreg	equ	0xFE8
  2575                           postdec1	equ	0xFE5
  2576                           fsr1l	equ	0xFE1
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           plusw2	equ	0xFDB
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function _D_PORT_Init *****************
  2586 ;; Defined at:
  2587 ;;		line 32 in file "Drivers/PORT_Driver.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;                  1    wreg      void 
  2594 ;; Registers used:
  2595 ;;		wreg, status,2
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2601 ;;      Params:         0       0       0       0       0       0       0       0       0
  2602 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2603 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2604 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2605 ;;Total ram usage:        0 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    7
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text14
  2616  0016AE                     __ptext14:
  2617                           	opt stack 0
  2618  0016AE                     _D_PORT_Init:
  2619                           	opt stack 23
  2620                           
  2621                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  2622                           
  2623                           ;incstack = 0
  2624  0016AE  0E00               	movlw	0
  2625  0016B0  6E92               	movwf	3986,c	;volatile
  2626  0016B2  0E00               	movlw	0
  2627  0016B4  6E80               	movwf	3968,c	;volatile
  2628                           
  2629                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  2630  0016B6  0E00               	movlw	0
  2631  0016B8  6E93               	movwf	3987,c	;volatile
  2632  0016BA  0E00               	movlw	0
  2633  0016BC  6E81               	movwf	3969,c	;volatile
  2634                           
  2635                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  2636  0016BE  0E00               	movlw	0
  2637  0016C0  6E94               	movwf	3988,c	;volatile
  2638  0016C2  0E00               	movlw	0
  2639  0016C4  6E82               	movwf	3970,c	;volatile
  2640                           
  2641                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  2642  0016C6  0E0F               	movlw	15
  2643  0016C8  6EC1               	movwf	4033,c	;volatile
  2644  0016CA  0012               	return		;funcret
  2645  0016CC                     __end_of_D_PORT_Init:
  2646                           	opt stack 0
  2647                           tblptru	equ	0xFF8
  2648                           tblptrh	equ	0xFF7
  2649                           tblptrl	equ	0xFF6
  2650                           tablat	equ	0xFF5
  2651                           prodh	equ	0xFF4
  2652                           prodl	equ	0xFF3
  2653                           intcon	equ	0xFF2
  2654                           intcon2	equ	0xFF1
  2655                           postinc0	equ	0xFEE
  2656                           plusw0	equ	0xFEB
  2657                           wreg	equ	0xFE8
  2658                           postdec1	equ	0xFE5
  2659                           fsr1l	equ	0xFE1
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           postdec2	equ	0xFDD
  2663                           plusw2	equ	0xFDB
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _C_DOOR_UnlockAll *****************
  2669 ;; Defined at:
  2670 ;;		line 93 in file "Controllers/DOOR_Controller.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;		None
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;		None
  2675 ;; Return value:  Size  Location     Type
  2676 ;;                  1    wreg      void 
  2677 ;; Registers used:
  2678 ;;		wreg, fsr2l, fsr2h
  2679 ;; Tracked objects:
  2680 ;;		On entry : 0/0
  2681 ;;		On exit  : 0/0
  2682 ;;		Unchanged: 0/0
  2683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2684 ;;      Params:         0       0       0       0       0       0       0       0       0
  2685 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2686 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2687 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2688 ;;Total ram usage:        0 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    7
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text15
  2699  00170A                     __ptext15:
  2700                           	opt stack 0
  2701  00170A                     _C_DOOR_UnlockAll:
  2702                           	opt stack 23
  2703                           
  2704                           ;DOOR_Controller.c: 98: *doors[0].lock_port &= 0x3F;
  2705                           
  2706                           ;incstack = 0
  2707  00170A  C062  FFD9         	movff	_doors+2,fsr2l
  2708  00170E  C063  FFDA         	movff	_doors+3,fsr2h
  2709  001712  0E3F               	movlw	63
  2710  001714  16DF               	andwf	indf2,f,c
  2711  001716  0012               	return		;funcret
  2712  001718                     __end_of_C_DOOR_UnlockAll:
  2713                           	opt stack 0
  2714                           tblptru	equ	0xFF8
  2715                           tblptrh	equ	0xFF7
  2716                           tblptrl	equ	0xFF6
  2717                           tablat	equ	0xFF5
  2718                           prodh	equ	0xFF4
  2719                           prodl	equ	0xFF3
  2720                           intcon	equ	0xFF2
  2721                           intcon2	equ	0xFF1
  2722                           postinc0	equ	0xFEE
  2723                           plusw0	equ	0xFEB
  2724                           wreg	equ	0xFE8
  2725                           postdec1	equ	0xFE5
  2726                           fsr1l	equ	0xFE1
  2727                           indf2	equ	0xFDF
  2728                           postinc2	equ	0xFDE
  2729                           postdec2	equ	0xFDD
  2730                           plusw2	equ	0xFDB
  2731                           fsr2h	equ	0xFDA
  2732                           fsr2l	equ	0xFD9
  2733                           status	equ	0xFD8
  2734                           
  2735 ;; *************** function _C_DOOR_SendStates *****************
  2736 ;; Defined at:
  2737 ;;		line 108 in file "Controllers/DOOR_Controller.c"
  2738 ;; Parameters:    Size  Location     Type
  2739 ;;		None
  2740 ;; Auto vars:     Size  Location     Type
  2741 ;;  com             3   26[BANK0 ] unsigned char [3]
  2742 ;;  mes             2   29[BANK0 ] unsigned char [2]
  2743 ;;  d               1   31[BANK0 ] unsigned char 
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      void 
  2746 ;; Registers used:
  2747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2753 ;;      Params:         0       0       0       0       0       0       0       0       0
  2754 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2755 ;;      Temps:          0       3       0       0       0       0       0       0       0
  2756 ;;      Totals:         0       9       0       0       0       0       0       0       0
  2757 ;;Total ram usage:        9 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:   11
  2760 ;; This function calls:
  2761 ;;		_D_UART_Write
  2762 ;;		_commandAndMessage
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text16
  2769  00101E                     __ptext16:
  2770                           	opt stack 0
  2771  00101E                     _C_DOOR_SendStates:
  2772                           	opt stack 19
  2773                           
  2774                           ;DOOR_Controller.c: 109: uint8_t d;
  2775                           ;DOOR_Controller.c: 110: for (d = 0; d < door_cnt; d++) {
  2776                           
  2777                           ;incstack = 0
  2778  00101E  0E00               	movlw	0
  2779  001020  0100               	movlb	0	; () banked
  2780  001022  6FF7               	movwf	C_DOOR_SendStates@d& (0+255),b
  2781  001024  D05C               	goto	l50
  2782  001026                     
  2783                           ; BSR set to: 0
  2784                           ;DOOR_Controller.c: 111: if (doors[d].was_open != doors[d].is_open) {
  2785                           
  2786                           ; BSR set to: 0
  2787  001026  51F7               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2788  001028  0D0A               	mullw	10
  2789  00102A  0E06               	movlw	6
  2790  00102C  26F3               	addwf	prodl,f,c
  2791  00102E  0E00               	movlw	0
  2792  001030  22F4               	addwfc	prodh,f,c
  2793  001032  0E60               	movlw	low _doors
  2794  001034  24F3               	addwf	prodl,w,c
  2795  001036  6ED9               	movwf	fsr2l,c
  2796  001038  0E00               	movlw	high _doors
  2797  00103A  20F4               	addwfc	prodh,w,c
  2798  00103C  6EDA               	movwf	fsr2h,c
  2799  00103E  51F7               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2800  001040  0D0A               	mullw	10
  2801  001042  0E05               	movlw	5
  2802  001044  26F3               	addwf	prodl,f,c
  2803  001046  0E00               	movlw	0
  2804  001048  22F4               	addwfc	prodh,f,c
  2805  00104A  0E60               	movlw	low _doors
  2806  00104C  24F3               	addwf	prodl,w,c
  2807  00104E  6EE1               	movwf	fsr1l,c
  2808  001050  0E00               	movlw	high _doors
  2809  001052  20F4               	addwfc	prodh,w,c
  2810  001054  6EE2               	movwf	fsr1h,c
  2811  001056  50DE               	movf	postinc2,w,c
  2812  001058  18E6               	xorwf	postinc1,w,c
  2813  00105A  B4D8               	btfsc	status,2,c
  2814  00105C  D03F               	goto	l52
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;DOOR_Controller.c: 113: char com[3];
  2818                           ;DOOR_Controller.c: 114: char mes[2];
  2819                           ;DOOR_Controller.c: 115: commandAndMessage(doors[d], com, mes);
  2820  00105E  51F7               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2821  001060  0D0A               	mullw	10
  2822  001062  0E60               	movlw	low _doors
  2823  001064  24F3               	addwf	prodl,w,c
  2824  001066  6ED9               	movwf	fsr2l,c
  2825  001068  0E00               	movlw	high _doors
  2826  00106A  20F4               	addwfc	prodh,w,c
  2827  00106C  6EDA               	movwf	fsr2h,c
  2828  00106E  EE00  F0D8         	lfsr	0,commandAndMessage@door
  2829  001072  0E09               	movlw	9
  2830  001074                     u1151:
  2831  001074  CFDB FFEB          	movff	plusw2,plusw0
  2832  001078  06E8               	decf	wreg,f,c
  2833  00107A  E2FC               	bc	u1151
  2834  00107C  0EF2               	movlw	low C_DOOR_SendStates@com
  2835  00107E  6FE2               	movwf	commandAndMessage@com& (0+255),b
  2836  001080  0E00               	movlw	high C_DOOR_SendStates@com
  2837  001082  6FE3               	movwf	(commandAndMessage@com+1)& (0+255),b
  2838  001084  0EF5               	movlw	low C_DOOR_SendStates@mes
  2839  001086  6FE4               	movwf	commandAndMessage@mes& (0+255),b
  2840  001088  0E00               	movlw	high C_DOOR_SendStates@mes
  2841  00108A  6FE5               	movwf	(commandAndMessage@mes+1)& (0+255),b
  2842  00108C  ECD7  F009         	call	_commandAndMessage	;wreg free
  2843                           
  2844                           ;DOOR_Controller.c: 118: D_UART_Write(com, mes);
  2845  001090  0EF2               	movlw	low C_DOOR_SendStates@com
  2846  001092  0100               	movlb	0	; () banked
  2847  001094  6FEA               	movwf	D_UART_Write@command& (0+255),b
  2848  001096  0E00               	movlw	high C_DOOR_SendStates@com
  2849  001098  6FEB               	movwf	(D_UART_Write@command+1)& (0+255),b
  2850  00109A  0EF5               	movlw	low C_DOOR_SendStates@mes
  2851  00109C  6FEC               	movwf	D_UART_Write@data& (0+255),b
  2852  00109E  0E00               	movlw	high C_DOOR_SendStates@mes
  2853  0010A0  6FED               	movwf	(D_UART_Write@data+1)& (0+255),b
  2854  0010A2  EC9F  F007         	call	_D_UART_Write	;wreg free
  2855                           
  2856                           ;DOOR_Controller.c: 120: doors[d].was_open = doors[d].is_open;
  2857  0010A6  0100               	movlb	0	; () banked
  2858  0010A8  51F7               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2859  0010AA  0D0A               	mullw	10
  2860  0010AC  0E06               	movlw	6
  2861  0010AE  26F3               	addwf	prodl,f,c
  2862  0010B0  0E00               	movlw	0
  2863  0010B2  22F4               	addwfc	prodh,f,c
  2864  0010B4  0E60               	movlw	low _doors
  2865  0010B6  24F3               	addwf	prodl,w,c
  2866  0010B8  6ED9               	movwf	fsr2l,c
  2867  0010BA  0E00               	movlw	high _doors
  2868  0010BC  20F4               	addwfc	prodh,w,c
  2869  0010BE  6EDA               	movwf	fsr2h,c
  2870  0010C0  51F7               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2871  0010C2  0D0A               	mullw	10
  2872  0010C4  0E05               	movlw	5
  2873  0010C6  26F3               	addwf	prodl,f,c
  2874  0010C8  0E00               	movlw	0
  2875  0010CA  22F4               	addwfc	prodh,f,c
  2876  0010CC  0E60               	movlw	low _doors
  2877  0010CE  24F3               	addwf	prodl,w,c
  2878  0010D0  6EE1               	movwf	fsr1l,c
  2879  0010D2  0E00               	movlw	high _doors
  2880  0010D4  20F4               	addwfc	prodh,w,c
  2881  0010D6  6EE2               	movwf	fsr1h,c
  2882  0010D8  CFDF FFE7          	movff	indf2,indf1
  2883  0010DC                     l52:
  2884                           
  2885                           ; BSR set to: 0
  2886                           
  2887                           ; BSR set to: 0
  2888  0010DC  2BF7               	incf	C_DOOR_SendStates@d& (0+255),f,b
  2889  0010DE                     l50:
  2890                           
  2891                           ; BSR set to: 0
  2892                           
  2893                           ; BSR set to: 0
  2894  0010DE  51F7               	movf	C_DOOR_SendStates@d& (0+255),w,b
  2895  0010E0  6FEF               	movwf	??_C_DOOR_SendStates& (0+255),b
  2896  0010E2  6BF0               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  2897  0010E4  51D3               	movf	_door_cnt& (0+255),w,b
  2898  0010E6  5DEF               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  2899  0010E8  51F0               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  2900  0010EA  0A80               	xorlw	128
  2901  0010EC  6FF1               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  2902  0010EE  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  2903  0010F0  0A80               	xorlw	128
  2904  0010F2  59F1               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  2905  0010F4  B0D8               	btfsc	status,0,c
  2906  0010F6  0012               	return	
  2907  0010F8  D796               	goto	l51
  2908  0010FA                     __end_of_C_DOOR_SendStates:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           tblptrh	equ	0xFF7
  2912                           tblptrl	equ	0xFF6
  2913                           tablat	equ	0xFF5
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           intcon	equ	0xFF2
  2917                           intcon2	equ	0xFF1
  2918                           postinc0	equ	0xFEE
  2919                           plusw0	equ	0xFEB
  2920                           wreg	equ	0xFE8
  2921                           indf1	equ	0xFE7
  2922                           postinc1	equ	0xFE6
  2923                           postdec1	equ	0xFE5
  2924                           fsr1h	equ	0xFE2
  2925                           fsr1l	equ	0xFE1
  2926                           indf2	equ	0xFDF
  2927                           postinc2	equ	0xFDE
  2928                           postdec2	equ	0xFDD
  2929                           plusw2	equ	0xFDB
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934 ;; *************** function _commandAndMessage *****************
  2935 ;; Defined at:
  2936 ;;		line 27 in file "Controllers/DOOR_Controller.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  door           10    0[BANK0 ] struct .
  2939 ;;  com             2   10[BANK0 ] PTR unsigned char 
  2940 ;;		 -> C_DOOR_SendStates@com(3), 
  2941 ;;  mes             2   12[BANK0 ] PTR unsigned char 
  2942 ;;		 -> C_DOOR_SendStates@mes(2), 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;		None
  2945 ;; Return value:  Size  Location     Type
  2946 ;;                  1    wreg      void 
  2947 ;; Registers used:
  2948 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2949 ;; Tracked objects:
  2950 ;;		On entry : 0/0
  2951 ;;		On exit  : 0/0
  2952 ;;		Unchanged: 0/0
  2953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2954 ;;      Params:         0      14       0       0       0       0       0       0       0
  2955 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2957 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2958 ;;Total ram usage:       14 bytes
  2959 ;; Hardware stack levels used:    1
  2960 ;; Hardware stack levels required when called:    7
  2961 ;; This function calls:
  2962 ;;		Nothing
  2963 ;; This function is called by:
  2964 ;;		_C_DOOR_SendStates
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text17
  2969  0013AE                     __ptext17:
  2970                           	opt stack 0
  2971  0013AE                     _commandAndMessage:
  2972                           	opt stack 22
  2973                           
  2974                           ;DOOR_Controller.c: 29: com[0] = 'D';
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;incstack = 0
  2978  0013AE  C0E2  FFD9         	movff	commandAndMessage@com,fsr2l
  2979  0013B2  C0E3  FFDA         	movff	commandAndMessage@com+1,fsr2h
  2980  0013B6  0E44               	movlw	68
  2981  0013B8  6EDF               	movwf	indf2,c
  2982                           
  2983                           ;DOOR_Controller.c: 30: com[1] = (uint8_t)(door.id + 0x30);
  2984  0013BA  0100               	movlb	0	; () banked
  2985  0013BC  EE20 F001          	lfsr	2,1
  2986  0013C0  51E2               	movf	commandAndMessage@com& (0+255),w,b
  2987  0013C2  26D9               	addwf	fsr2l,f,c
  2988  0013C4  51E3               	movf	(commandAndMessage@com+1)& (0+255),w,b
  2989  0013C6  22DA               	addwfc	fsr2h,f,c
  2990  0013C8  51D8               	movf	commandAndMessage@door& (0+255),w,b
  2991  0013CA  0F30               	addlw	48
  2992  0013CC  6EDF               	movwf	indf2,c
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;DOOR_Controller.c: 31: com[2] = '\0';
  2996  0013CE  EE20 F002          	lfsr	2,2
  2997  0013D2  51E2               	movf	commandAndMessage@com& (0+255),w,b
  2998  0013D4  26D9               	addwf	fsr2l,f,c
  2999  0013D6  51E3               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3000  0013D8  22DA               	addwfc	fsr2h,f,c
  3001  0013DA  0E00               	movlw	0
  3002  0013DC  6EDF               	movwf	indf2,c
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;DOOR_Controller.c: 34: if (door.is_open) {
  3006  0013DE  51DE               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3007  0013E0  B4D8               	btfsc	status,2,c
  3008  0013E2  D006               	goto	l13
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;DOOR_Controller.c: 35: mes[0] = 'C';
  3012  0013E4  C0E4  FFD9         	movff	commandAndMessage@mes,fsr2l
  3013  0013E8  C0E5  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3014  0013EC  0E43               	movlw	67
  3015  0013EE  D005               	goto	L1
  3016  0013F0                     l13:
  3017                           
  3018                           ; BSR set to: 0
  3019                           ;DOOR_Controller.c: 37: mes[0] = 'O';
  3020                           
  3021                           ; BSR set to: 0
  3022  0013F0  C0E4  FFD9         	movff	commandAndMessage@mes,fsr2l
  3023  0013F4  C0E5  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3024  0013F8  0E4F               	movlw	79
  3025  0013FA                     L1:
  3026  0013FA  6EDF               	movwf	indf2,c
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;DOOR_Controller.c: 38: }
  3030                           ;DOOR_Controller.c: 39: mes[1] = '\0';
  3031                           
  3032                           ; BSR set to: 0
  3033  0013FC  EE20 F001          	lfsr	2,1
  3034  001400  51E4               	movf	commandAndMessage@mes& (0+255),w,b
  3035  001402  26D9               	addwf	fsr2l,f,c
  3036  001404  51E5               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3037  001406  22DA               	addwfc	fsr2h,f,c
  3038  001408  0E00               	movlw	0
  3039  00140A  6EDF               	movwf	indf2,c
  3040                           
  3041                           ; BSR set to: 0
  3042  00140C  0012               	return		;funcret
  3043  00140E                     __end_of_commandAndMessage:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           intcon	equ	0xFF2
  3052                           intcon2	equ	0xFF1
  3053                           postinc0	equ	0xFEE
  3054                           plusw0	equ	0xFEB
  3055                           wreg	equ	0xFE8
  3056                           indf1	equ	0xFE7
  3057                           postinc1	equ	0xFE6
  3058                           postdec1	equ	0xFE5
  3059                           fsr1h	equ	0xFE2
  3060                           fsr1l	equ	0xFE1
  3061                           indf2	equ	0xFDF
  3062                           postinc2	equ	0xFDE
  3063                           postdec2	equ	0xFDD
  3064                           plusw2	equ	0xFDB
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function _D_UART_Write *****************
  3070 ;; Defined at:
  3071 ;;		line 226 in file "Drivers/UART_Driver.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  command         2   18[BANK0 ] PTR const unsigned char 
  3074 ;;		 -> STR_15(2), C_DOOR_SendStates@com(3), 
  3075 ;;  data            2   20[BANK0 ] PTR const unsigned char 
  3076 ;;		 -> STR_16(2), C_DOOR_SendStates@mes(2), 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;		None
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      void 
  3081 ;; Registers used:
  3082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3088 ;;      Params:         0       4       0       0       0       0       0       0       0
  3089 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3090 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3091 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3092 ;;Total ram usage:        5 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:   10
  3095 ;; This function calls:
  3096 ;;		_printf
  3097 ;; This function is called by:
  3098 ;;		_C_DOOR_SendStates
  3099 ;;		_main
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text18
  3104  000F3E                     __ptext18:
  3105                           	opt stack 0
  3106  000F3E                     _D_UART_Write:
  3107                           	opt stack 20
  3108                           
  3109                           ;UART_Driver.c: 227: printf(startCharacter);
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;incstack = 0
  3113  000F3E  C041  F0DF         	movff	_startCharacter,printf@f
  3114  000F42  C042  F0E0         	movff	_startCharacter+1,printf@f+1
  3115  000F46  0100               	movlb	0	; () banked
  3116  000F48  51DF               	movf	printf@f& (0+255),w,b
  3117  000F4A  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3118  000F4C  A4D8               	btfss	status,2,c
  3119  000F4E  0E00               	movlw	low (__mediumconst shr (0+16))
  3120  000F50  6FE1               	movwf	(printf@f+2)& (0+255),b
  3121  000F52  ECC2  F005         	call	_printf	;wreg free
  3122                           
  3123                           ;UART_Driver.c: 229: printf(messageCharacter);
  3124  000F56  C0FA  F0DF         	movff	_messageCharacter,printf@f
  3125  000F5A  C0FB  F0E0         	movff	_messageCharacter+1,printf@f+1
  3126  000F5E  0100               	movlb	0	; () banked
  3127  000F60  51DF               	movf	printf@f& (0+255),w,b
  3128  000F62  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3129  000F64  A4D8               	btfss	status,2,c
  3130  000F66  0E00               	movlw	low (__mediumconst shr (0+16))
  3131  000F68  6FE1               	movwf	(printf@f+2)& (0+255),b
  3132  000F6A  ECC2  F005         	call	_printf	;wreg free
  3133                           
  3134                           ;UART_Driver.c: 230: printf(deviceName);
  3135  000F6E  C0D0  F0DF         	movff	_deviceName,printf@f
  3136  000F72  C0D1  F0E0         	movff	_deviceName+1,printf@f+1
  3137  000F76  C0D2  F0E1         	movff	_deviceName+2,printf@f+2
  3138  000F7A  ECC2  F005         	call	_printf	;wreg free
  3139                           
  3140                           ;UART_Driver.c: 232: printf(":");printf(command);
  3141  000F7E  0E37               	movlw	low STR_6
  3142  000F80  0100               	movlb	0	; () banked
  3143  000F82  6FDF               	movwf	printf@f& (0+255),b
  3144  000F84  0E08               	movlw	high STR_6
  3145  000F86  6FE0               	movwf	(printf@f+1)& (0+255),b
  3146  000F88  51DF               	movf	printf@f& (0+255),w,b
  3147  000F8A  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3148  000F8C  A4D8               	btfss	status,2,c
  3149  000F8E  0E00               	movlw	low (__mediumconst shr (0+16))
  3150  000F90  6FE1               	movwf	(printf@f+2)& (0+255),b
  3151  000F92  ECC2  F005         	call	_printf	;wreg free
  3152  000F96  C0EA  F0DF         	movff	D_UART_Write@command,printf@f
  3153  000F9A  C0EB  F0E0         	movff	D_UART_Write@command+1,printf@f+1
  3154  000F9E  0100               	movlb	0	; () banked
  3155  000FA0  6BE1               	clrf	(printf@f+2)& (0+255),b
  3156  000FA2  51DF               	movf	printf@f& (0+255),w,b
  3157  000FA4  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3158  000FA6  B4D8               	btfsc	status,2,c
  3159  000FA8  D005               	goto	u1021
  3160  000FAA  0E07               	movlw	(high __ramtop+-1)
  3161  000FAC  65EB               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3162  000FAE  D001               	goto	u10211
  3163  000FB0  D001               	goto	u1021
  3164  000FB2                     u10211:
  3165  000FB2  8BE1               	bsf	(printf@f+2)& (0+255),5,b
  3166  000FB4                     u1021:
  3167  000FB4  ECC2  F005         	call	_printf	;wreg free
  3168                           
  3169                           ;UART_Driver.c: 234: printf(":");printf(data);
  3170  000FB8  0E37               	movlw	low STR_6
  3171  000FBA  0100               	movlb	0	; () banked
  3172  000FBC  6FDF               	movwf	printf@f& (0+255),b
  3173  000FBE  0E08               	movlw	high STR_6
  3174  000FC0  6FE0               	movwf	(printf@f+1)& (0+255),b
  3175  000FC2  51DF               	movf	printf@f& (0+255),w,b
  3176  000FC4  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3177  000FC6  A4D8               	btfss	status,2,c
  3178  000FC8  0E00               	movlw	low (__mediumconst shr (0+16))
  3179  000FCA  6FE1               	movwf	(printf@f+2)& (0+255),b
  3180  000FCC  ECC2  F005         	call	_printf	;wreg free
  3181  000FD0  C0EC  F0DF         	movff	D_UART_Write@data,printf@f
  3182  000FD4  C0ED  F0E0         	movff	D_UART_Write@data+1,printf@f+1
  3183  000FD8  0100               	movlb	0	; () banked
  3184  000FDA  6BE1               	clrf	(printf@f+2)& (0+255),b
  3185  000FDC  51DF               	movf	printf@f& (0+255),w,b
  3186  000FDE  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3187  000FE0  B4D8               	btfsc	status,2,c
  3188  000FE2  D005               	goto	u1031
  3189  000FE4  0E07               	movlw	(high __ramtop+-1)
  3190  000FE6  65ED               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3191  000FE8  D001               	goto	u10311
  3192  000FEA  D001               	goto	u1031
  3193  000FEC                     u10311:
  3194  000FEC  8BE1               	bsf	(printf@f+2)& (0+255),5,b
  3195  000FEE                     u1031:
  3196  000FEE  ECC2  F005         	call	_printf	;wreg free
  3197                           
  3198                           ;UART_Driver.c: 236: printf(stopCharacter);
  3199  000FF2  C03F  F0DF         	movff	_stopCharacter,printf@f
  3200  000FF6  C040  F0E0         	movff	_stopCharacter+1,printf@f+1
  3201  000FFA  0100               	movlb	0	; () banked
  3202  000FFC  51DF               	movf	printf@f& (0+255),w,b
  3203  000FFE  11E0               	iorwf	(printf@f+1)& (0+255),w,b
  3204  001000  A4D8               	btfss	status,2,c
  3205  001002  0E00               	movlw	low (__mediumconst shr (0+16))
  3206  001004  6FE1               	movwf	(printf@f+2)& (0+255),b
  3207  001006  ECC2  F005         	call	_printf	;wreg free
  3208                           
  3209                           ;UART_Driver.c: 237: _delay((unsigned long)((1)*(16000000/4000.0)));
  3210  00100A  0E06               	movlw	6
  3211  00100C  0100               	movlb	0	; () banked
  3212  00100E  6FEE               	movwf	??_D_UART_Write& (0+255),b
  3213  001010  0E30               	movlw	48
  3214  001012                     u1547:
  3215  001012  2EE8               	decfsz	wreg,f,c
  3216  001014  D7FE               	bra	u1547
  3217  001016  2FEE               	decfsz	??_D_UART_Write& (0+255),f,b
  3218  001018  D7FC               	bra	u1547
  3219  00101A  F000               	nop	
  3220  00101C  0012               	return		;funcret
  3221  00101E                     __end_of_D_UART_Write:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           intcon	equ	0xFF2
  3230                           intcon2	equ	0xFF1
  3231                           postinc0	equ	0xFEE
  3232                           plusw0	equ	0xFEB
  3233                           wreg	equ	0xFE8
  3234                           indf1	equ	0xFE7
  3235                           postinc1	equ	0xFE6
  3236                           postdec1	equ	0xFE5
  3237                           fsr1h	equ	0xFE2
  3238                           fsr1l	equ	0xFE1
  3239                           indf2	equ	0xFDF
  3240                           postinc2	equ	0xFDE
  3241                           postdec2	equ	0xFDD
  3242                           plusw2	equ	0xFDB
  3243                           fsr2h	equ	0xFDA
  3244                           fsr2l	equ	0xFD9
  3245                           status	equ	0xFD8
  3246                           
  3247 ;; *************** function _printf *****************
  3248 ;; Defined at:
  3249 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3250 ;; Parameters:    Size  Location     Type
  3251 ;;  f               3    7[BANK0 ] PTR const unsigned char 
  3252 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  3253 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3254 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3255 ;;		 -> C_DOOR_SendStates@com(3), 
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;  idx             1   13[BANK0 ] unsigned char 
  3258 ;;  tmpval          4    0        struct .
  3259 ;;  cp              3    0        PTR const unsigned char 
  3260 ;;  val             2   14[BANK0 ] unsigned int 
  3261 ;;  ap              2   11[BANK0 ] PTR void [1]
  3262 ;;		 -> ?i1_printf(2), ?_printf(2), 
  3263 ;;  len             2    0        unsigned int 
  3264 ;;  c               1   17[BANK0 ] char 
  3265 ;;  prec            1   16[BANK0 ] char 
  3266 ;;  flag            1   10[BANK0 ] unsigned char 
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  2    7[BANK0 ] int 
  3269 ;; Registers used:
  3270 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3271 ;; Tracked objects:
  3272 ;;		On entry : 0/0
  3273 ;;		On exit  : 0/0
  3274 ;;		Unchanged: 0/0
  3275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3276 ;;      Params:         0       3       0       0       0       0       0       0       0
  3277 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3278 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3279 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3280 ;;Total ram usage:       11 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    9
  3283 ;; This function calls:
  3284 ;;		___lwdiv
  3285 ;;		_putch
  3286 ;; This function is called by:
  3287 ;;		_D_UART_Write
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text19
  3292  000B84                     __ptext19:
  3293                           	opt stack 0
  3294  000B84                     _printf:
  3295                           	opt stack 20
  3296                           
  3297                           ;doprnt.c: 466: va_list ap;
  3298                           ;doprnt.c: 499: signed char c;
  3299                           ;doprnt.c: 506: signed char prec;
  3300                           ;doprnt.c: 508: unsigned char flag;
  3301                           ;doprnt.c: 523: union {
  3302                           ;doprnt.c: 524: unsigned long vd;
  3303                           ;doprnt.c: 525: double integ;
  3304                           ;doprnt.c: 526: } tmpval;
  3305                           ;doprnt.c: 528: unsigned int val;
  3306                           ;doprnt.c: 529: unsigned len;
  3307                           ;doprnt.c: 530: const char * cp;
  3308                           ;doprnt.c: 533: *ap = __va_start();
  3309                           
  3310                           ;incstack = 0
  3311  000B84  0EE2               	movlw	low (?_printf+3)
  3312  000B86  0100               	movlb	0	; () banked
  3313  000B88  6FE3               	movwf	printf@ap& (0+255),b
  3314  000B8A  0E00               	movlw	high (?_printf+3)
  3315  000B8C  6FE4               	movwf	(printf@ap+1)& (0+255),b
  3316                           
  3317                           ;doprnt.c: 536: while(c = *f++) {
  3318  000B8E  D08B               	goto	u890
  3319  000B90                     
  3320                           ; BSR set to: 0
  3321                           ;doprnt.c: 538: if(c != '%')
  3322                           
  3323                           ; BSR set to: 0
  3324  000B90  0E25               	movlw	37
  3325  000B92  19E9               	xorwf	printf@c& (0+255),w,b
  3326  000B94  B4D8               	btfsc	status,2,c
  3327  000B96  D004               	goto	l320
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;doprnt.c: 540: {
  3331                           ;doprnt.c: 541: (putch(c) );
  3332  000B98  51E9               	movf	printf@c& (0+255),w,b
  3333  000B9A  EC8C  F00B         	call	_putch
  3334                           
  3335                           ;doprnt.c: 542: continue;
  3336  000B9E  D083               	goto	u890
  3337  000BA0                     l320:
  3338                           
  3339                           ;doprnt.c: 543: }
  3340                           ;doprnt.c: 548: flag = 0;
  3341  000BA0  0E00               	movlw	0
  3342  000BA2  0100               	movlb	0	; () banked
  3343  000BA4  6FE2               	movwf	printf@flag& (0+255),b
  3344                           
  3345                           ;doprnt.c: 635: switch(c = *f++) {
  3346  000BA6  D004               	goto	l321
  3347  000BA8                     
  3348                           ; BSR set to: 0
  3349                           ;doprnt.c: 809: (putch(c) );
  3350                           
  3351                           ; BSR set to: 0
  3352  000BA8  51E9               	movf	printf@c& (0+255),w,b
  3353  000BAA  EC8C  F00B         	call	_putch
  3354                           
  3355                           ;doprnt.c: 810: continue;
  3356  000BAE  D07B               	goto	u890
  3357  000BB0                     l321:
  3358  000BB0  C0DF  FFF6         	movff	printf@f,tblptrl
  3359  000BB4  C0E0  FFF7         	movff	printf@f+1,tblptrh
  3360  000BB8  C0E1  FFF8         	movff	printf@f+2,tblptru
  3361  000BBC  0E01               	movlw	1
  3362  000BBE  0100               	movlb	0	; () banked
  3363  000BC0  27DF               	addwf	printf@f& (0+255),f,b
  3364  000BC2  0E00               	movlw	0
  3365  000BC4  23E0               	addwfc	(printf@f+1)& (0+255),f,b
  3366  000BC6  23E1               	addwfc	(printf@f+2)& (0+255),f,b
  3367  000BC8  BAF8               	btfsc	tblptru,5,c
  3368  000BCA  D003               	bra	u857
  3369  000BCC  0008               	tblrd		*
  3370  000BCE  50F5               	movf	tablat,w,c
  3371  000BD0  D005               	bra	u850
  3372  000BD2                     u857:
  3373  000BD2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3374  000BD6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3375  000BDA  50EF               	movf	indf0,w,c
  3376  000BDC                     u850:
  3377  000BDC  0100               	movlb	0	; () banked
  3378  000BDE  6FE9               	movwf	printf@c& (0+255),b
  3379  000BE0  51E9               	movf	printf@c& (0+255),w,b
  3380                           
  3381                           ; Switch size 1, requested type "space"
  3382                           ; Number of cases is 2, Range of values is 0 to 120
  3383                           ; switch strategies available:
  3384                           ; Name         Instructions Cycles
  3385                           ; simple_byte            7     4 (average)
  3386                           ;	Chosen strategy is simple_byte
  3387  000BE2  0A00               	xorlw	0	; case 0
  3388  000BE4  B4D8               	btfsc	status,2,c
  3389  000BE6  0012               	return	
  3390  000BE8  0A78               	xorlw	120	; case 120
  3391  000BEA  A4D8               	btfss	status,2,c
  3392  000BEC  D7DD               	goto	l326
  3393                           
  3394                           ;doprnt.c: 1273: {
  3395                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3396                           
  3397                           ; BSR set to: 0
  3398  000BEE  C0E3  FFD9         	movff	printf@ap,fsr2l
  3399  000BF2  C0E4  FFDA         	movff	printf@ap+1,fsr2h
  3400  000BF6  CFDE F0E6          	movff	postinc2,printf@val
  3401  000BFA  CFDD F0E7          	movff	postdec2,printf@val+1
  3402  000BFE  0E02               	movlw	2
  3403  000C00  0100               	movlb	0	; () banked
  3404  000C02  27E3               	addwf	printf@ap& (0+255),f,b
  3405  000C04  0E00               	movlw	0
  3406  000C06  23E4               	addwfc	(printf@ap+1)& (0+255),f,b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;doprnt.c: 1287: }
  3410                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3411  000C08  0E01               	movlw	1
  3412  000C0A  6FE9               	movwf	printf@c& (0+255),b
  3413  000C0C  D014               	goto	l1592
  3414  000C0E                     
  3415                           ; BSR set to: 0
  3416                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3417                           
  3418                           ; BSR set to: 0
  3419  000C0E  51E9               	movf	printf@c& (0+255),w,b
  3420  000C10  0D02               	mullw	2
  3421  000C12  0E01               	movlw	low _hexpowers
  3422  000C14  24F3               	addwf	prodl,w,c
  3423  000C16  6EF6               	movwf	tblptrl,c
  3424  000C18  0E08               	movlw	high _hexpowers
  3425  000C1A  20F4               	addwfc	prodh,w,c
  3426  000C1C  6EF7               	movwf	tblptrh,c
  3427  000C1E                     	if	1	;There are 3 active tblptr bytes
  3428  000C1E  6AF8               	clrf	tblptru,c
  3429  000C20  0E00               	movlw	low (__mediumconst shr (0+16))
  3430  000C22  22F8               	addwfc	tblptru,f,c
  3431  000C24                     	endif
  3432  000C24  0009               	tblrd		*+
  3433  000C26  50F5               	movf	tablat,w,c
  3434  000C28  5DE6               	subwf	printf@val& (0+255),w,b
  3435  000C2A  0009               	tblrd		*+
  3436  000C2C  50F5               	movf	tablat,w,c
  3437  000C2E  59E7               	subwfb	(printf@val+1)& (0+255),w,b
  3438  000C30  A0D8               	btfss	status,0,c
  3439  000C32  D005               	goto	u880
  3440                           
  3441                           ; BSR set to: 0
  3442                           
  3443                           ; BSR set to: 0
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;doprnt.c: 1318: break;
  3447  000C34  2BE9               	incf	printf@c& (0+255),f,b
  3448  000C36                     l1592:
  3449                           
  3450                           ; BSR set to: 0
  3451  000C36  0E04               	movlw	4
  3452  000C38  19E9               	xorwf	printf@c& (0+255),w,b
  3453  000C3A  A4D8               	btfss	status,2,c
  3454  000C3C  D7E8               	goto	l327
  3455  000C3E                     u880:
  3456                           
  3457                           ; BSR set to: 0
  3458                           ;doprnt.c: 1422: {
  3459                           ;doprnt.c: 1469: }
  3460                           ;doprnt.c: 1472: prec = c;
  3461  000C3E  C0E9  F0E8         	movff	printf@c,printf@prec
  3462                           
  3463                           ;doprnt.c: 1474: while(prec--) {
  3464  000C42  D02C               	goto	l330
  3465  000C44                     
  3466                           ; BSR set to: 0
  3467                           ;doprnt.c: 1478: {
  3468                           ;doprnt.c: 1499: {
  3469                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3470                           
  3471                           ; BSR set to: 0
  3472  000C44  C0E6  F0D8         	movff	printf@val,___lwdiv@dividend
  3473  000C48  C0E7  F0D9         	movff	printf@val+1,___lwdiv@dividend+1
  3474  000C4C  51E8               	movf	printf@prec& (0+255),w,b
  3475  000C4E  0D02               	mullw	2
  3476  000C50  0E01               	movlw	low _hexpowers
  3477  000C52  24F3               	addwf	prodl,w,c
  3478  000C54  6EF6               	movwf	tblptrl,c
  3479  000C56  0E08               	movlw	high _hexpowers
  3480  000C58  20F4               	addwfc	prodh,w,c
  3481  000C5A  6EF7               	movwf	tblptrh,c
  3482  000C5C                     	if	1	;There are 3 active tblptr bytes
  3483  000C5C  6AF8               	clrf	tblptru,c
  3484  000C5E  0E00               	movlw	low (__mediumconst shr (0+16))
  3485  000C60  22F8               	addwfc	tblptru,f,c
  3486  000C62                     	endif
  3487  000C62  0009               	tblrd		*+
  3488  000C64  CFF5 F0DA          	movff	tablat,___lwdiv@divisor
  3489  000C68  000A               	tblrd		*-
  3490  000C6A  CFF5 F0DB          	movff	tablat,___lwdiv@divisor+1
  3491  000C6E  EC65  F00A         	call	___lwdiv	;wreg free
  3492  000C72  0100               	movlb	0	; () banked
  3493  000C74  51D8               	movf	?___lwdiv& (0+255),w,b
  3494  000C76  0B0F               	andlw	15
  3495  000C78  6FE5               	movwf	printf@idx& (0+255),b
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  3499  000C7A  51E5               	movf	printf@idx& (0+255),w,b
  3500  000C7C  0D01               	mullw	1
  3501  000C7E  0E09               	movlw	low STR_17
  3502  000C80  24F3               	addwf	prodl,w,c
  3503  000C82  6EF6               	movwf	tblptrl,c
  3504  000C84  0E08               	movlw	high STR_17
  3505  000C86  20F4               	addwfc	prodh,w,c
  3506  000C88  6EF7               	movwf	tblptrh,c
  3507  000C8A                     	if	1	;There are 3 active tblptr bytes
  3508  000C8A  6AF8               	clrf	tblptru,c
  3509  000C8C  0E00               	movlw	low (__mediumconst shr (0+16))
  3510  000C8E  22F8               	addwfc	tblptru,f,c
  3511  000C90                     	endif
  3512  000C90  0008               	tblrd		*
  3513  000C92  CFF5 F0E9          	movff	tablat,printf@c
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;doprnt.c: 1508: }
  3517                           ;doprnt.c: 1523: }
  3518                           ;doprnt.c: 1524: (putch(c) );
  3519  000C96  51E9               	movf	printf@c& (0+255),w,b
  3520  000C98  EC8C  F00B         	call	_putch
  3521  000C9C                     l330:
  3522  000C9C  0100               	movlb	0	; () banked
  3523  000C9E  07E8               	decf	printf@prec& (0+255),f,b
  3524  000CA0  29E8               	incf	printf@prec& (0+255),w,b
  3525  000CA2  A4D8               	btfss	status,2,c
  3526  000CA4  D7CF               	goto	l331
  3527  000CA6                     u890:
  3528                           
  3529                           ; BSR set to: 0
  3530                           
  3531                           ; BSR set to: 0
  3532  000CA6  C0DF  FFF6         	movff	printf@f,tblptrl
  3533  000CAA  C0E0  FFF7         	movff	printf@f+1,tblptrh
  3534  000CAE  C0E1  FFF8         	movff	printf@f+2,tblptru
  3535  000CB2  0E01               	movlw	1
  3536  000CB4  0100               	movlb	0	; () banked
  3537  000CB6  27DF               	addwf	printf@f& (0+255),f,b
  3538  000CB8  0E00               	movlw	0
  3539  000CBA  23E0               	addwfc	(printf@f+1)& (0+255),f,b
  3540  000CBC  23E1               	addwfc	(printf@f+2)& (0+255),f,b
  3541  000CBE  BAF8               	btfsc	tblptru,5,c
  3542  000CC0  D003               	bra	u907
  3543  000CC2  0008               	tblrd		*
  3544  000CC4  50F5               	movf	tablat,w,c
  3545  000CC6  D005               	bra	u900
  3546  000CC8                     u907:
  3547  000CC8  CFF6 FFE9          	movff	tblptrl,fsr0l
  3548  000CCC  CFF7 FFEA          	movff	tblptrh,fsr0h
  3549  000CD0  50EF               	movf	indf0,w,c
  3550  000CD2                     u900:
  3551  000CD2  0100               	movlb	0	; () banked
  3552  000CD4  6FE9               	movwf	printf@c& (0+255),b
  3553  000CD6  51E9               	movf	printf@c& (0+255),w,b
  3554  000CD8  B4D8               	btfsc	status,2,c
  3555  000CDA  0012               	return	
  3556  000CDC  D759               	goto	l319
  3557  000CDE                     __end_of_printf:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           intcon2	equ	0xFF1
  3567                           indf0	equ	0xFEF
  3568                           postinc0	equ	0xFEE
  3569                           plusw0	equ	0xFEB
  3570                           fsr0h	equ	0xFEA
  3571                           fsr0l	equ	0xFE9
  3572                           wreg	equ	0xFE8
  3573                           indf1	equ	0xFE7
  3574                           postinc1	equ	0xFE6
  3575                           postdec1	equ	0xFE5
  3576                           fsr1h	equ	0xFE2
  3577                           fsr1l	equ	0xFE1
  3578                           indf2	equ	0xFDF
  3579                           postinc2	equ	0xFDE
  3580                           postdec2	equ	0xFDD
  3581                           plusw2	equ	0xFDB
  3582                           fsr2h	equ	0xFDA
  3583                           fsr2l	equ	0xFD9
  3584                           status	equ	0xFD8
  3585                           
  3586 ;; *************** function _putch *****************
  3587 ;; Defined at:
  3588 ;;		line 263 in file "Drivers/UART_Driver.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  data            1    wreg     unsigned char 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;  data            1    1[BANK0 ] unsigned char 
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, status,2, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3602 ;;      Params:         0       0       0       0       0       0       0       0       0
  3603 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3605 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3606 ;;Total ram usage:        1 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    8
  3609 ;; This function calls:
  3610 ;;		_writeByte
  3611 ;; This function is called by:
  3612 ;;		_printf
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text20
  3617  001718                     __ptext20:
  3618                           	opt stack 0
  3619  001718                     _putch:
  3620                           	opt stack 20
  3621                           
  3622                           ; BSR set to: 0
  3623                           ;incstack = 0
  3624                           ;putch@data stored from wreg
  3625  001718  0100               	movlb	0	; () banked
  3626  00171A  6FD9               	movwf	putch@data& (0+255),b
  3627                           
  3628                           ;UART_Driver.c: 264: writeByte(data);
  3629  00171C  0100               	movlb	0	; () banked
  3630  00171E  51D9               	movf	putch@data& (0+255),w,b
  3631  001720  EC93  F00B         	call	_writeByte
  3632  001724  0012               	return		;funcret
  3633  001726                     __end_of_putch:
  3634                           	opt stack 0
  3635                           tblptru	equ	0xFF8
  3636                           tblptrh	equ	0xFF7
  3637                           tblptrl	equ	0xFF6
  3638                           tablat	equ	0xFF5
  3639                           prodh	equ	0xFF4
  3640                           prodl	equ	0xFF3
  3641                           intcon	equ	0xFF2
  3642                           intcon2	equ	0xFF1
  3643                           indf0	equ	0xFEF
  3644                           postinc0	equ	0xFEE
  3645                           plusw0	equ	0xFEB
  3646                           fsr0h	equ	0xFEA
  3647                           fsr0l	equ	0xFE9
  3648                           wreg	equ	0xFE8
  3649                           indf1	equ	0xFE7
  3650                           postinc1	equ	0xFE6
  3651                           postdec1	equ	0xFE5
  3652                           fsr1h	equ	0xFE2
  3653                           fsr1l	equ	0xFE1
  3654                           indf2	equ	0xFDF
  3655                           postinc2	equ	0xFDE
  3656                           postdec2	equ	0xFDD
  3657                           plusw2	equ	0xFDB
  3658                           fsr2h	equ	0xFDA
  3659                           fsr2l	equ	0xFD9
  3660                           status	equ	0xFD8
  3661                           
  3662 ;; *************** function _writeByte *****************
  3663 ;; Defined at:
  3664 ;;		line 69 in file "Drivers/UART_Driver.c"
  3665 ;; Parameters:    Size  Location     Type
  3666 ;;  data            1    wreg     unsigned char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  data            1    0[BANK0 ] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3678 ;;      Params:         0       0       0       0       0       0       0       0       0
  3679 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3681 ;;      Totals:         0       1       0       0       0       0       0       0       0
  3682 ;;Total ram usage:        1 bytes
  3683 ;; Hardware stack levels used:    1
  3684 ;; Hardware stack levels required when called:    7
  3685 ;; This function calls:
  3686 ;;		Nothing
  3687 ;; This function is called by:
  3688 ;;		_putch
  3689 ;; This function uses a non-reentrant model
  3690 ;;
  3691                           
  3692                           	psect	text21
  3693  001726                     __ptext21:
  3694                           	opt stack 0
  3695  001726                     _writeByte:
  3696                           	opt stack 20
  3697                           
  3698                           ;incstack = 0
  3699                           ;writeByte@data stored from wreg
  3700  001726  0100               	movlb	0	; () banked
  3701  001728  6FD8               	movwf	writeByte@data& (0+255),b
  3702  00172A                     
  3703                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  3704  00172A  A2AC               	btfss	4012,1,c	;volatile
  3705  00172C  D7FE               	goto	l1506
  3706                           
  3707                           ;UART_Driver.c: 71: TXREG = data;
  3708  00172E  C0D8  FFAD         	movff	writeByte@data,4013	;volatile
  3709  001732  0012               	return		;funcret
  3710  001734                     __end_of_writeByte:
  3711                           	opt stack 0
  3712                           tblptru	equ	0xFF8
  3713                           tblptrh	equ	0xFF7
  3714                           tblptrl	equ	0xFF6
  3715                           tablat	equ	0xFF5
  3716                           prodh	equ	0xFF4
  3717                           prodl	equ	0xFF3
  3718                           intcon	equ	0xFF2
  3719                           intcon2	equ	0xFF1
  3720                           indf0	equ	0xFEF
  3721                           postinc0	equ	0xFEE
  3722                           plusw0	equ	0xFEB
  3723                           fsr0h	equ	0xFEA
  3724                           fsr0l	equ	0xFE9
  3725                           wreg	equ	0xFE8
  3726                           indf1	equ	0xFE7
  3727                           postinc1	equ	0xFE6
  3728                           postdec1	equ	0xFE5
  3729                           fsr1h	equ	0xFE2
  3730                           fsr1l	equ	0xFE1
  3731                           indf2	equ	0xFDF
  3732                           postinc2	equ	0xFDE
  3733                           postdec2	equ	0xFDD
  3734                           plusw2	equ	0xFDB
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function ___lwdiv *****************
  3740 ;; Defined at:
  3741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;  dividend        2    0[BANK0 ] unsigned int 
  3744 ;;  divisor         2    2[BANK0 ] unsigned int 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;  quotient        2    4[BANK0 ] unsigned int 
  3747 ;;  counter         1    6[BANK0 ] unsigned char 
  3748 ;; Return value:  Size  Location     Type
  3749 ;;                  2    0[BANK0 ] unsigned int 
  3750 ;; Registers used:
  3751 ;;		wreg, status,2, status,0
  3752 ;; Tracked objects:
  3753 ;;		On entry : 0/0
  3754 ;;		On exit  : 0/0
  3755 ;;		Unchanged: 0/0
  3756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3757 ;;      Params:         0       4       0       0       0       0       0       0       0
  3758 ;;      Locals:         0       3       0       0       0       0       0       0       0
  3759 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3760 ;;      Totals:         0       7       0       0       0       0       0       0       0
  3761 ;;Total ram usage:        7 bytes
  3762 ;; Hardware stack levels used:    1
  3763 ;; Hardware stack levels required when called:    7
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_printf
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text22
  3772  0014CA                     __ptext22:
  3773                           	opt stack 0
  3774  0014CA                     ___lwdiv:
  3775                           	opt stack 21
  3776                           
  3777                           ;incstack = 0
  3778  0014CA  0E00               	movlw	0
  3779  0014CC  0100               	movlb	0	; () banked
  3780  0014CE  6FDD               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3781  0014D0  0E00               	movlw	0
  3782  0014D2  6FDC               	movwf	___lwdiv@quotient& (0+255),b
  3783                           
  3784                           ; BSR set to: 0
  3785  0014D4  51DA               	movf	___lwdiv@divisor& (0+255),w,b
  3786  0014D6  11DB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3787  0014D8  B4D8               	btfsc	status,2,c
  3788  0014DA  D01C               	goto	l743
  3789                           
  3790                           ; BSR set to: 0
  3791  0014DC  0E01               	movlw	1
  3792  0014DE  6FDE               	movwf	___lwdiv@counter& (0+255),b
  3793  0014E0  D004               	goto	l738
  3794  0014E2                     
  3795                           ; BSR set to: 0
  3796                           
  3797                           ; BSR set to: 0
  3798  0014E2  90D8               	bcf	status,0,c
  3799  0014E4  37DA               	rlcf	___lwdiv@divisor& (0+255),f,b
  3800  0014E6  37DB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3801  0014E8  2BDE               	incf	___lwdiv@counter& (0+255),f,b
  3802  0014EA                     l738:
  3803                           
  3804                           ; BSR set to: 0
  3805                           
  3806                           ; BSR set to: 0
  3807  0014EA  AFDB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3808  0014EC  D7FA               	goto	l739
  3809  0014EE                     u790:
  3810                           
  3811                           ; BSR set to: 0
  3812                           
  3813                           ; BSR set to: 0
  3814                           
  3815                           ; BSR set to: 0
  3816  0014EE  90D8               	bcf	status,0,c
  3817  0014F0  37DC               	rlcf	___lwdiv@quotient& (0+255),f,b
  3818  0014F2  37DD               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3819                           
  3820                           ; BSR set to: 0
  3821  0014F4  51DA               	movf	___lwdiv@divisor& (0+255),w,b
  3822  0014F6  5DD8               	subwf	___lwdiv@dividend& (0+255),w,b
  3823  0014F8  51DB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3824  0014FA  59D9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3825  0014FC  A0D8               	btfss	status,0,c
  3826  0014FE  D005               	goto	l742
  3827                           
  3828                           ; BSR set to: 0
  3829  001500  51DA               	movf	___lwdiv@divisor& (0+255),w,b
  3830  001502  5FD8               	subwf	___lwdiv@dividend& (0+255),f,b
  3831  001504  51DB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3832  001506  5BD9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3833                           
  3834                           ; BSR set to: 0
  3835  001508  81DC               	bsf	___lwdiv@quotient& (0+255),0,b
  3836  00150A                     l742:
  3837                           
  3838                           ; BSR set to: 0
  3839                           
  3840                           ; BSR set to: 0
  3841  00150A  90D8               	bcf	status,0,c
  3842  00150C  33DB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3843  00150E  33DA               	rrcf	___lwdiv@divisor& (0+255),f,b
  3844                           
  3845                           ; BSR set to: 0
  3846  001510  2FDE               	decfsz	___lwdiv@counter& (0+255),f,b
  3847  001512  D7ED               	goto	u790
  3848  001514                     l743:
  3849                           
  3850                           ; BSR set to: 0
  3851                           
  3852                           ; BSR set to: 0
  3853  001514  C0DC  F0D8         	movff	___lwdiv@quotient,?___lwdiv
  3854  001518  C0DD  F0D9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3855                           
  3856                           ; BSR set to: 0
  3857  00151C  0012               	return		;funcret
  3858  00151E                     __end_of___lwdiv:
  3859                           	opt stack 0
  3860                           tblptru	equ	0xFF8
  3861                           tblptrh	equ	0xFF7
  3862                           tblptrl	equ	0xFF6
  3863                           tablat	equ	0xFF5
  3864                           prodh	equ	0xFF4
  3865                           prodl	equ	0xFF3
  3866                           intcon	equ	0xFF2
  3867                           intcon2	equ	0xFF1
  3868                           indf0	equ	0xFEF
  3869                           postinc0	equ	0xFEE
  3870                           plusw0	equ	0xFEB
  3871                           fsr0h	equ	0xFEA
  3872                           fsr0l	equ	0xFE9
  3873                           wreg	equ	0xFE8
  3874                           indf1	equ	0xFE7
  3875                           postinc1	equ	0xFE6
  3876                           postdec1	equ	0xFE5
  3877                           fsr1h	equ	0xFE2
  3878                           fsr1l	equ	0xFE1
  3879                           indf2	equ	0xFDF
  3880                           postinc2	equ	0xFDE
  3881                           postdec2	equ	0xFDD
  3882                           plusw2	equ	0xFDB
  3883                           fsr2h	equ	0xFDA
  3884                           fsr2l	equ	0xFD9
  3885                           status	equ	0xFD8
  3886                           
  3887 ;; *************** function _C_DOOR_ReadSensors *****************
  3888 ;; Defined at:
  3889 ;;		line 101 in file "Controllers/DOOR_Controller.c"
  3890 ;; Parameters:    Size  Location     Type
  3891 ;;		None
  3892 ;; Auto vars:     Size  Location     Type
  3893 ;;  d               1    4[BANK0 ] unsigned char 
  3894 ;; Return value:  Size  Location     Type
  3895 ;;                  1    wreg      void 
  3896 ;; Registers used:
  3897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3898 ;; Tracked objects:
  3899 ;;		On entry : 0/0
  3900 ;;		On exit  : 0/0
  3901 ;;		Unchanged: 0/0
  3902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3903 ;;      Params:         0       0       0       0       0       0       0       0       0
  3904 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3905 ;;      Temps:          0       4       0       0       0       0       0       0       0
  3906 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3907 ;;Total ram usage:        5 bytes
  3908 ;; Hardware stack levels used:    1
  3909 ;; Hardware stack levels required when called:    7
  3910 ;; This function calls:
  3911 ;;		Nothing
  3912 ;; This function is called by:
  3913 ;;		_main
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text23
  3918  001314                     __ptext23:
  3919                           	opt stack 0
  3920  001314                     _C_DOOR_ReadSensors:
  3921                           	opt stack 23
  3922                           
  3923                           ;DOOR_Controller.c: 102: uint8_t d;
  3924                           ;DOOR_Controller.c: 103: for (d = 0; d < door_cnt; d++) {
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;incstack = 0
  3928  001314  0E00               	movlw	0
  3929  001316  0100               	movlb	0	; () banked
  3930  001318  6FDC               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  3931  00131A  D03B               	goto	l44
  3932  00131C                     
  3933                           ; BSR set to: 0
  3934                           ;DOOR_Controller.c: 104: doors[d].is_open = (*doors[d].sensor_port >> doors[d].sensor_pi
      +                          n) & 0x01;
  3935                           
  3936                           ; BSR set to: 0
  3937  00131C  51DC               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3938  00131E  0D0A               	mullw	10
  3939  001320  0E06               	movlw	6
  3940  001322  26F3               	addwf	prodl,f,c
  3941  001324  0E00               	movlw	0
  3942  001326  22F4               	addwfc	prodh,f,c
  3943  001328  0E60               	movlw	low _doors
  3944  00132A  24F3               	addwf	prodl,w,c
  3945  00132C  6ED9               	movwf	fsr2l,c
  3946  00132E  0E00               	movlw	high _doors
  3947  001330  20F4               	addwfc	prodh,w,c
  3948  001332  6EDA               	movwf	fsr2h,c
  3949  001334  51DC               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3950  001336  0D0A               	mullw	10
  3951  001338  0E09               	movlw	9
  3952  00133A  26F3               	addwf	prodl,f,c
  3953  00133C  0E00               	movlw	0
  3954  00133E  22F4               	addwfc	prodh,f,c
  3955  001340  0E60               	movlw	low _doors
  3956  001342  24F3               	addwf	prodl,w,c
  3957  001344  6EE1               	movwf	fsr1l,c
  3958  001346  0E00               	movlw	high _doors
  3959  001348  20F4               	addwfc	prodh,w,c
  3960  00134A  6EE2               	movwf	fsr1h,c
  3961  00134C  50E7               	movf	indf1,w,c
  3962  00134E  6FD8               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  3963  001350  51DC               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  3964  001352  0D0A               	mullw	10
  3965  001354  0E07               	movlw	7
  3966  001356  26F3               	addwf	prodl,f,c
  3967  001358  0E00               	movlw	0
  3968  00135A  22F4               	addwfc	prodh,f,c
  3969  00135C  0E60               	movlw	low _doors
  3970  00135E  24F3               	addwf	prodl,w,c
  3971  001360  6EE1               	movwf	fsr1l,c
  3972  001362  0E00               	movlw	high _doors
  3973  001364  20F4               	addwfc	prodh,w,c
  3974  001366  6EE2               	movwf	fsr1h,c
  3975  001368  CFE6 F0D9          	movff	postinc1,??_C_DOOR_ReadSensors+1
  3976  00136C  CFE5 F0DA          	movff	postdec1,??_C_DOOR_ReadSensors+2
  3977  001370  C0D9  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  3978  001374  C0DA  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  3979  001378  50E7               	movf	indf1,w,c
  3980  00137A  6FDB               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  3981  00137C  2BD8               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  3982  00137E  D002               	goto	u1124
  3983  001380                     u1125:
  3984  001380  90D8               	bcf	status,0,c
  3985  001382  33DB               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  3986  001384                     u1124:
  3987  001384  2FD8               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  3988  001386  D7FC               	goto	u1125
  3989  001388  0100               	movlb	0	; () banked
  3990  00138A  51DB               	movf	(??_C_DOOR_ReadSensors+3)& (0+255),w,b
  3991  00138C  0B01               	andlw	1
  3992  00138E  6EDF               	movwf	indf2,c
  3993                           
  3994                           ; BSR set to: 0
  3995  001390  2BDC               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  3996  001392                     l44:
  3997                           
  3998                           ; BSR set to: 0
  3999                           
  4000                           ; BSR set to: 0
  4001  001392  51DC               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4002  001394  6FD8               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4003  001396  6BD9               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4004  001398  51D3               	movf	_door_cnt& (0+255),w,b
  4005  00139A  5DD8               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4006  00139C  51D9               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4007  00139E  0A80               	xorlw	128
  4008  0013A0  6FDA               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4009  0013A2  51D4               	movf	(_door_cnt+1)& (0+255),w,b
  4010  0013A4  0A80               	xorlw	128
  4011  0013A6  59DA               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4012  0013A8  B0D8               	btfsc	status,0,c
  4013  0013AA  0012               	return	
  4014  0013AC  D7B7               	goto	l45
  4015  0013AE                     __end_of_C_DOOR_ReadSensors:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           intcon2	equ	0xFF1
  4025                           indf0	equ	0xFEF
  4026                           postinc0	equ	0xFEE
  4027                           plusw0	equ	0xFEB
  4028                           fsr0h	equ	0xFEA
  4029                           fsr0l	equ	0xFE9
  4030                           wreg	equ	0xFE8
  4031                           indf1	equ	0xFE7
  4032                           postinc1	equ	0xFE6
  4033                           postdec1	equ	0xFE5
  4034                           fsr1h	equ	0xFE2
  4035                           fsr1l	equ	0xFE1
  4036                           indf2	equ	0xFDF
  4037                           postinc2	equ	0xFDE
  4038                           postdec2	equ	0xFDD
  4039                           plusw2	equ	0xFDB
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _LowISR *****************
  4045 ;; Defined at:
  4046 ;;		line 267 in file "Drivers/UART_Driver.c"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4060 ;;      Params:         0       0       0       0       0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4062 ;;      Temps:         21       0       0       0       0       0       0       0       0
  4063 ;;      Totals:        21       0       0       0       0       0       0       0       0
  4064 ;;Total ram usage:       21 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    6
  4067 ;; This function calls:
  4068 ;;		_fillDataBuffer
  4069 ;;		_readByte
  4070 ;; This function is called by:
  4071 ;;		Interrupt level 1
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	intcodelo
  4076  000018                     __pintcodelo:
  4077                           	opt stack 0
  4078  000018                     _LowISR:
  4079                           	opt stack 19
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;incstack = 0
  4083  000018  8044               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4084  00001A  CFD8 F028          	movff	status,??_LowISR
  4085  00001E  CFE8 F029          	movff	wreg,??_LowISR+1
  4086  000022  CFE0 F02A          	movff	bsr,??_LowISR+2
  4087  000026  CFFA F02B          	movff	pclath,??_LowISR+3
  4088  00002A  CFFB F02C          	movff	pclatu,??_LowISR+4
  4089  00002E  CFE9 F02D          	movff	fsr0l,??_LowISR+5
  4090  000032  CFEA F02E          	movff	fsr0h,??_LowISR+6
  4091  000036  CFE1 F02F          	movff	fsr1l,??_LowISR+7
  4092  00003A  CFE2 F030          	movff	fsr1h,??_LowISR+8
  4093  00003E  CFD9 F031          	movff	fsr2l,??_LowISR+9
  4094  000042  CFDA F032          	movff	fsr2h,??_LowISR+10
  4095  000046  CFF3 F033          	movff	prodl,??_LowISR+11
  4096  00004A  CFF4 F034          	movff	prodh,??_LowISR+12
  4097  00004E  CFF6 F035          	movff	tblptrl,??_LowISR+13
  4098  000052  CFF7 F036          	movff	tblptrh,??_LowISR+14
  4099  000056  CFF8 F037          	movff	tblptru,??_LowISR+15
  4100  00005A  CFF5 F038          	movff	tablat,??_LowISR+16
  4101  00005E  C044  F039         	movff	btemp,??_LowISR+17
  4102  000062  C045  F03A         	movff	btemp+1,??_LowISR+18
  4103  000066  C046  F03B         	movff	btemp+2,??_LowISR+19
  4104  00006A  C047  F03C         	movff	btemp+3,??_LowISR+20
  4105                           
  4106                           ;UART_Driver.c: 268: if (PIR1bits.RC1IF) {
  4107  00006E  AA9E               	btfss	3998,5,c	;volatile
  4108  000070  D005               	goto	i1l186
  4109                           
  4110                           ;UART_Driver.c: 269: fillDataBuffer(readByte());
  4111  000072  ECA5  F00B         	call	_readByte	;wreg free
  4112  000076  ECF6  F004         	call	_fillDataBuffer
  4113                           
  4114                           ;UART_Driver.c: 270: PIR1bits.RC1IF = 0;
  4115  00007A  9A9E               	bcf	3998,5,c	;volatile
  4116  00007C                     i1l186:
  4117  00007C  C03C  F047         	movff	??_LowISR+20,btemp+3
  4118  000080  C03B  F046         	movff	??_LowISR+19,btemp+2
  4119  000084  C03A  F045         	movff	??_LowISR+18,btemp+1
  4120  000088  C039  F044         	movff	??_LowISR+17,btemp
  4121  00008C  C038  FFF5         	movff	??_LowISR+16,tablat
  4122  000090  C037  FFF8         	movff	??_LowISR+15,tblptru
  4123  000094  C036  FFF7         	movff	??_LowISR+14,tblptrh
  4124  000098  C035  FFF6         	movff	??_LowISR+13,tblptrl
  4125  00009C  C034  FFF4         	movff	??_LowISR+12,prodh
  4126  0000A0  C033  FFF3         	movff	??_LowISR+11,prodl
  4127  0000A4  C032  FFDA         	movff	??_LowISR+10,fsr2h
  4128  0000A8  C031  FFD9         	movff	??_LowISR+9,fsr2l
  4129  0000AC  C030  FFE2         	movff	??_LowISR+8,fsr1h
  4130  0000B0  C02F  FFE1         	movff	??_LowISR+7,fsr1l
  4131  0000B4  C02E  FFEA         	movff	??_LowISR+6,fsr0h
  4132  0000B8  C02D  FFE9         	movff	??_LowISR+5,fsr0l
  4133  0000BC  C02C  FFFB         	movff	??_LowISR+4,pclatu
  4134  0000C0  C02B  FFFA         	movff	??_LowISR+3,pclath
  4135  0000C4  C02A  FFE0         	movff	??_LowISR+2,bsr
  4136  0000C8  C029  FFE8         	movff	??_LowISR+1,wreg
  4137  0000CC  C028  FFD8         	movff	??_LowISR,status
  4138  0000D0  9044               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4139  0000D2  0010               	retfie	
  4140  0000D4                     __end_of_LowISR:
  4141                           	opt stack 0
  4142                           pclatu	equ	0xFFB
  4143                           pclath	equ	0xFFA
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           intcon2	equ	0xFF1
  4152                           indf0	equ	0xFEF
  4153                           postinc0	equ	0xFEE
  4154                           plusw0	equ	0xFEB
  4155                           fsr0h	equ	0xFEA
  4156                           fsr0l	equ	0xFE9
  4157                           wreg	equ	0xFE8
  4158                           indf1	equ	0xFE7
  4159                           postinc1	equ	0xFE6
  4160                           postdec1	equ	0xFE5
  4161                           fsr1h	equ	0xFE2
  4162                           fsr1l	equ	0xFE1
  4163                           bsr	equ	0xFE0
  4164                           indf2	equ	0xFDF
  4165                           postinc2	equ	0xFDE
  4166                           postdec2	equ	0xFDD
  4167                           plusw2	equ	0xFDB
  4168                           fsr2h	equ	0xFDA
  4169                           fsr2l	equ	0xFD9
  4170                           status	equ	0xFD8
  4171                           
  4172 ;; *************** function _readByte *****************
  4173 ;; Defined at:
  4174 ;;		line 74 in file "Drivers/UART_Driver.c"
  4175 ;; Parameters:    Size  Location     Type
  4176 ;;		None
  4177 ;; Auto vars:     Size  Location     Type
  4178 ;;		None
  4179 ;; Return value:  Size  Location     Type
  4180 ;;                  1    wreg      unsigned char 
  4181 ;; Registers used:
  4182 ;;		wreg, status,2
  4183 ;; Tracked objects:
  4184 ;;		On entry : 0/0
  4185 ;;		On exit  : 0/0
  4186 ;;		Unchanged: 0/0
  4187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4188 ;;      Params:         0       0       0       0       0       0       0       0       0
  4189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4192 ;;Total ram usage:        0 bytes
  4193 ;; Hardware stack levels used:    1
  4194 ;; Hardware stack levels required when called:    1
  4195 ;; This function calls:
  4196 ;;		Nothing
  4197 ;; This function is called by:
  4198 ;;		_LowISR
  4199 ;; This function uses a non-reentrant model
  4200 ;;
  4201                           
  4202                           	psect	text25
  4203  00174A                     __ptext25:
  4204                           	opt stack 0
  4205  00174A                     _readByte:
  4206                           	opt stack 23
  4207                           
  4208                           ;UART_Driver.c: 75: if(RCSTAbits.FERR == 1) {
  4209                           
  4210                           ;incstack = 0
  4211  00174A  50AB               	movf	4011,w,c	;volatile
  4212                           
  4213                           ;UART_Driver.c: 77: }
  4214                           ;UART_Driver.c: 78: if(RCSTAbits.OERR == 1) {
  4215  00174C  50AB               	movf	4011,w,c	;volatile
  4216                           
  4217                           ;UART_Driver.c: 80: }
  4218                           ;UART_Driver.c: 81: return RCREG;
  4219  00174E  50AE               	movf	4014,w,c	;volatile
  4220  001750  0012               	return	
  4221  001752                     __end_of_readByte:
  4222                           	opt stack 0
  4223                           pclatu	equ	0xFFB
  4224                           pclath	equ	0xFFA
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           intcon2	equ	0xFF1
  4233                           indf0	equ	0xFEF
  4234                           postinc0	equ	0xFEE
  4235                           plusw0	equ	0xFEB
  4236                           fsr0h	equ	0xFEA
  4237                           fsr0l	equ	0xFE9
  4238                           wreg	equ	0xFE8
  4239                           indf1	equ	0xFE7
  4240                           postinc1	equ	0xFE6
  4241                           postdec1	equ	0xFE5
  4242                           fsr1h	equ	0xFE2
  4243                           fsr1l	equ	0xFE1
  4244                           bsr	equ	0xFE0
  4245                           indf2	equ	0xFDF
  4246                           postinc2	equ	0xFDE
  4247                           postdec2	equ	0xFDD
  4248                           plusw2	equ	0xFDB
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function _fillDataBuffer *****************
  4254 ;; Defined at:
  4255 ;;		line 84 in file "Drivers/UART_Driver.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  data            1    wreg     unsigned char 
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  data            1   38[COMRAM] unsigned char 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      void 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4269 ;;      Params:         0       0       0       0       0       0       0       0       0
  4270 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4272 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4273 ;;Total ram usage:        1 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    5
  4276 ;; This function calls:
  4277 ;;		_acknowledge
  4278 ;; This function is called by:
  4279 ;;		_LowISR
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text26
  4284  0009EC                     __ptext26:
  4285                           	opt stack 0
  4286  0009EC                     _fillDataBuffer:
  4287                           	opt stack 19
  4288                           
  4289                           ;incstack = 0
  4290                           ;fillDataBuffer@data stored from wreg
  4291  0009EC  6E27               	movwf	fillDataBuffer@data,c
  4292                           
  4293                           ;UART_Driver.c: 85: switch(readBuffer.state) {
  4294  0009EE  D0B5               	goto	i1l135
  4295  0009F0                     
  4296                           ;UART_Driver.c: 87: if(data == 0x26) {
  4297  0009F0  0E26               	movlw	38
  4298  0009F2  1827               	xorwf	fillDataBuffer@data,w,c
  4299  0009F4  A4D8               	btfss	status,2,c
  4300  0009F6  D010               	goto	i1l137
  4301                           
  4302                           ;UART_Driver.c: 88: readBuffer.typeCnt = 0;
  4303  0009F8  0E00               	movlw	0
  4304  0009FA  0101               	movlb	1	; () banked
  4305  0009FC  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4306                           
  4307                           ;UART_Driver.c: 89: readBuffer.senderCnt = 0;
  4308  0009FE  0E00               	movlw	0
  4309  000A00  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4310                           
  4311                           ;UART_Driver.c: 90: readBuffer.commandCnt = 0;
  4312  000A02  0E00               	movlw	0
  4313  000A04  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4314                           
  4315                           ;UART_Driver.c: 91: readBuffer.messageCnt = 0;
  4316  000A06  0E00               	movlw	0
  4317  000A08  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4318                           
  4319                           ;UART_Driver.c: 92: readReady = 0;
  4320  000A0A  0E00               	movlw	0
  4321  000A0C  0100               	movlb	0	; () banked
  4322  000A0E  6FD7               	movwf	_readReady& (0+255),b
  4323                           
  4324                           ;UART_Driver.c: 93: readBuffer.state = 0x01;
  4325  000A10  0E01               	movlw	1
  4326  000A12  0101               	movlb	1	; () banked
  4327  000A14  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4328                           
  4329                           ;UART_Driver.c: 94: } else {
  4330  000A16  0012               	return	
  4331  000A18                     i1l137:
  4332                           
  4333                           ;UART_Driver.c: 95: readBuffer.state = 0x00;
  4334                           
  4335                           ; BSR set to: 1
  4336  000A18  0E00               	movlw	0
  4337  000A1A  0101               	movlb	1	; () banked
  4338  000A1C  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4339                           
  4340                           ; BSR set to: 1
  4341                           ;UART_Driver.c: 97: }
  4342                           ;UART_Driver.c: 98: break;
  4343                           
  4344                           ; BSR set to: 1
  4345                           ;UART_Driver.c: 96: return;
  4346  000A1E  0012               	return	
  4347  000A20                     
  4348                           ; BSR set to: 1
  4349                           ;UART_Driver.c: 101: if (data == 0x3A) {
  4350                           
  4351                           ; BSR set to: 1
  4352  000A20  0E3A               	movlw	58
  4353  000A22  1827               	xorwf	fillDataBuffer@data,w,c
  4354  000A24  A4D8               	btfss	status,2,c
  4355  000A26  D00D               	goto	i1l142
  4356                           
  4357                           ; BSR set to: 1
  4358                           ;UART_Driver.c: 102: readBuffer.state = 0x02;
  4359  000A28  0E02               	movlw	2
  4360  000A2A  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4361                           
  4362                           ; BSR set to: 1
  4363                           ;UART_Driver.c: 103: readBuffer.type[readBuffer.typeCnt] = '\0';
  4364  000A2C  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4365  000A2E  0D01               	mullw	1
  4366  000A30  0E00               	movlw	low _readBuffer
  4367  000A32  24F3               	addwf	prodl,w,c
  4368  000A34  6ED9               	movwf	fsr2l,c
  4369  000A36  0E01               	movlw	high _readBuffer
  4370  000A38  20F4               	addwfc	prodh,w,c
  4371  000A3A  6EDA               	movwf	fsr2h,c
  4372  000A3C  0E00               	movlw	0
  4373  000A3E  6EDF               	movwf	indf2,c
  4374                           
  4375                           ;UART_Driver.c: 104: } else {
  4376  000A40  0012               	return	
  4377  000A42                     i1l142:
  4378                           
  4379                           ; BSR set to: 1
  4380                           ;UART_Driver.c: 105: readBuffer.type[readBuffer.typeCnt] = data;
  4381                           
  4382                           ; BSR set to: 1
  4383  000A42  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4384  000A44  0D01               	mullw	1
  4385  000A46  0E00               	movlw	low _readBuffer
  4386  000A48  24F3               	addwf	prodl,w,c
  4387  000A4A  6ED9               	movwf	fsr2l,c
  4388  000A4C  0E01               	movlw	high _readBuffer
  4389  000A4E  20F4               	addwfc	prodh,w,c
  4390  000A50  6EDA               	movwf	fsr2h,c
  4391  000A52  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4392                           
  4393                           ; BSR set to: 1
  4394                           ;UART_Driver.c: 106: readBuffer.typeCnt++;
  4395  000A56  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  4396                           
  4397                           ; BSR set to: 1
  4398                           ;UART_Driver.c: 107: if(readBuffer.typeCnt > 10) {
  4399  000A58  0E0A               	movlw	10
  4400  000A5A  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  4401  000A5C  0012               	return	
  4402                           
  4403                           ; BSR set to: 1
  4404                           ;UART_Driver.c: 108: readBuffer.typeCnt = 0;
  4405  000A5E  0E00               	movlw	0
  4406  000A60  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4407                           
  4408                           ; BSR set to: 1
  4409                           ;UART_Driver.c: 109: }
  4410                           ;UART_Driver.c: 110: }
  4411                           ;UART_Driver.c: 111: break;
  4412                           
  4413                           ; BSR set to: 1
  4414  000A62  0012               	return	
  4415  000A64                     
  4416                           ; BSR set to: 1
  4417                           ;UART_Driver.c: 114: if (data == 0x3A) {
  4418                           
  4419                           ; BSR set to: 1
  4420  000A64  0E3A               	movlw	58
  4421  000A66  1827               	xorwf	fillDataBuffer@data,w,c
  4422  000A68  A4D8               	btfss	status,2,c
  4423  000A6A  D00D               	goto	i1l146
  4424                           
  4425                           ; BSR set to: 1
  4426                           ;UART_Driver.c: 115: readBuffer.state = 0x03;
  4427  000A6C  0E03               	movlw	3
  4428  000A6E  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4429                           
  4430                           ; BSR set to: 1
  4431                           ;UART_Driver.c: 116: readBuffer.sender[readBuffer.senderCnt] = '\0';
  4432  000A70  513D               	movf	(_readBuffer+61)& (0+255),w,b
  4433  000A72  0D01               	mullw	1
  4434  000A74  0E0B               	movlw	low (_readBuffer+11)
  4435  000A76  24F3               	addwf	prodl,w,c
  4436  000A78  6ED9               	movwf	fsr2l,c
  4437  000A7A  0E01               	movlw	high (_readBuffer+11)
  4438  000A7C  20F4               	addwfc	prodh,w,c
  4439  000A7E  6EDA               	movwf	fsr2h,c
  4440  000A80  0E00               	movlw	0
  4441  000A82  6EDF               	movwf	indf2,c
  4442                           
  4443                           ;UART_Driver.c: 117: } else {
  4444  000A84  0012               	return	
  4445  000A86                     i1l146:
  4446                           
  4447                           ; BSR set to: 1
  4448                           ;UART_Driver.c: 118: readBuffer.sender[readBuffer.senderCnt] = data;
  4449                           
  4450                           ; BSR set to: 1
  4451  000A86  513D               	movf	(_readBuffer+61)& (0+255),w,b
  4452  000A88  0D01               	mullw	1
  4453  000A8A  0E0B               	movlw	low (_readBuffer+11)
  4454  000A8C  24F3               	addwf	prodl,w,c
  4455  000A8E  6ED9               	movwf	fsr2l,c
  4456  000A90  0E01               	movlw	high (_readBuffer+11)
  4457  000A92  20F4               	addwfc	prodh,w,c
  4458  000A94  6EDA               	movwf	fsr2h,c
  4459  000A96  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4460                           
  4461                           ; BSR set to: 1
  4462                           ;UART_Driver.c: 119: readBuffer.senderCnt++;
  4463  000A9A  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  4464                           
  4465                           ; BSR set to: 1
  4466                           ;UART_Driver.c: 120: if(readBuffer.senderCnt > 50) {
  4467  000A9C  0E32               	movlw	50
  4468  000A9E  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  4469  000AA0  0012               	return	
  4470                           
  4471                           ; BSR set to: 1
  4472                           ;UART_Driver.c: 121: readBuffer.senderCnt = 0;
  4473  000AA2  0E00               	movlw	0
  4474  000AA4  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4475                           
  4476                           ; BSR set to: 1
  4477                           ;UART_Driver.c: 122: }
  4478                           ;UART_Driver.c: 123: }
  4479                           ;UART_Driver.c: 124: break;
  4480                           
  4481                           ; BSR set to: 1
  4482  000AA6  0012               	return	
  4483  000AA8                     
  4484                           ; BSR set to: 1
  4485                           ;UART_Driver.c: 127: if (data == 0x3A) {
  4486                           
  4487                           ; BSR set to: 1
  4488  000AA8  0E3A               	movlw	58
  4489  000AAA  1827               	xorwf	fillDataBuffer@data,w,c
  4490  000AAC  A4D8               	btfss	status,2,c
  4491  000AAE  D00D               	goto	i1l150
  4492                           
  4493                           ; BSR set to: 1
  4494                           ;UART_Driver.c: 128: readBuffer.state = 0x04;
  4495  000AB0  0E04               	movlw	4
  4496  000AB2  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4497                           
  4498                           ; BSR set to: 1
  4499                           ;UART_Driver.c: 129: readBuffer.command[readBuffer.commandCnt] = '\0';
  4500  000AB4  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4501  000AB6  0D01               	mullw	1
  4502  000AB8  0E3E               	movlw	low (_readBuffer+62)
  4503  000ABA  24F3               	addwf	prodl,w,c
  4504  000ABC  6ED9               	movwf	fsr2l,c
  4505  000ABE  0E01               	movlw	high (_readBuffer+62)
  4506  000AC0  20F4               	addwfc	prodh,w,c
  4507  000AC2  6EDA               	movwf	fsr2h,c
  4508  000AC4  0E00               	movlw	0
  4509  000AC6  6EDF               	movwf	indf2,c
  4510                           
  4511                           ;UART_Driver.c: 130: } else {
  4512  000AC8  0012               	return	
  4513  000ACA                     i1l150:
  4514                           
  4515                           ; BSR set to: 1
  4516                           ;UART_Driver.c: 131: readBuffer.command[readBuffer.commandCnt] = data;
  4517                           
  4518                           ; BSR set to: 1
  4519  000ACA  5170               	movf	(_readBuffer+112)& (0+255),w,b
  4520  000ACC  0D01               	mullw	1
  4521  000ACE  0E3E               	movlw	low (_readBuffer+62)
  4522  000AD0  24F3               	addwf	prodl,w,c
  4523  000AD2  6ED9               	movwf	fsr2l,c
  4524  000AD4  0E01               	movlw	high (_readBuffer+62)
  4525  000AD6  20F4               	addwfc	prodh,w,c
  4526  000AD8  6EDA               	movwf	fsr2h,c
  4527  000ADA  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4528                           
  4529                           ; BSR set to: 1
  4530                           ;UART_Driver.c: 132: readBuffer.commandCnt++;
  4531  000ADE  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  4532                           
  4533                           ; BSR set to: 1
  4534                           ;UART_Driver.c: 133: if(readBuffer.commandCnt > 50) {
  4535  000AE0  0E32               	movlw	50
  4536  000AE2  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  4537  000AE4  0012               	return	
  4538                           
  4539                           ; BSR set to: 1
  4540                           ;UART_Driver.c: 134: readBuffer.commandCnt = 0;
  4541  000AE6  0E00               	movlw	0
  4542  000AE8  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4543                           
  4544                           ; BSR set to: 1
  4545                           ;UART_Driver.c: 135: }
  4546                           ;UART_Driver.c: 136: }
  4547                           ;UART_Driver.c: 137: break;
  4548                           
  4549                           ; BSR set to: 1
  4550  000AEA  0012               	return	
  4551  000AEC                     
  4552                           ; BSR set to: 1
  4553                           ;UART_Driver.c: 140: if (data == 0x3A) {
  4554                           
  4555                           ; BSR set to: 1
  4556  000AEC  0E3A               	movlw	58
  4557  000AEE  1827               	xorwf	fillDataBuffer@data,w,c
  4558  000AF0  A4D8               	btfss	status,2,c
  4559  000AF2  D00D               	goto	i1l154
  4560                           
  4561                           ; BSR set to: 1
  4562                           ;UART_Driver.c: 141: readBuffer.state = 0x05;
  4563  000AF4  0E05               	movlw	5
  4564  000AF6  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4565                           
  4566                           ; BSR set to: 1
  4567                           ;UART_Driver.c: 142: readBuffer.message[readBuffer.messageCnt] = '\0';
  4568  000AF8  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4569  000AFA  0D01               	mullw	1
  4570  000AFC  0E71               	movlw	low (_readBuffer+113)
  4571  000AFE  24F3               	addwf	prodl,w,c
  4572  000B00  6ED9               	movwf	fsr2l,c
  4573  000B02  0E01               	movlw	high (_readBuffer+113)
  4574  000B04  20F4               	addwfc	prodh,w,c
  4575  000B06  6EDA               	movwf	fsr2h,c
  4576  000B08  0E00               	movlw	0
  4577  000B0A  6EDF               	movwf	indf2,c
  4578                           
  4579                           ;UART_Driver.c: 143: } else {
  4580  000B0C  0012               	return	
  4581  000B0E                     i1l154:
  4582                           
  4583                           ; BSR set to: 1
  4584                           ;UART_Driver.c: 144: readBuffer.message[readBuffer.messageCnt] = data;
  4585                           
  4586                           ; BSR set to: 1
  4587  000B0E  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  4588  000B10  0D01               	mullw	1
  4589  000B12  0E71               	movlw	low (_readBuffer+113)
  4590  000B14  24F3               	addwf	prodl,w,c
  4591  000B16  6ED9               	movwf	fsr2l,c
  4592  000B18  0E01               	movlw	high (_readBuffer+113)
  4593  000B1A  20F4               	addwfc	prodh,w,c
  4594  000B1C  6EDA               	movwf	fsr2h,c
  4595  000B1E  C027  FFDF         	movff	fillDataBuffer@data,indf2
  4596                           
  4597                           ; BSR set to: 1
  4598                           ;UART_Driver.c: 145: readBuffer.messageCnt++;
  4599  000B22  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  4600                           
  4601                           ; BSR set to: 1
  4602                           ;UART_Driver.c: 146: if(readBuffer.messageCnt > 50) {
  4603  000B24  0E32               	movlw	50
  4604  000B26  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  4605  000B28  0012               	return	
  4606                           
  4607                           ; BSR set to: 1
  4608                           ;UART_Driver.c: 147: readBuffer.messageCnt = 0;
  4609  000B2A  0E00               	movlw	0
  4610  000B2C  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4611                           
  4612                           ; BSR set to: 1
  4613                           ;UART_Driver.c: 148: }
  4614                           ;UART_Driver.c: 149: }
  4615                           ;UART_Driver.c: 150: break;
  4616                           
  4617                           ; BSR set to: 1
  4618  000B2E  0012               	return	
  4619  000B30                     
  4620                           ; BSR set to: 1
  4621                           ;UART_Driver.c: 153: if (data == 0x24) {
  4622                           
  4623                           ; BSR set to: 1
  4624  000B30  0E24               	movlw	36
  4625  000B32  1827               	xorwf	fillDataBuffer@data,w,c
  4626  000B34  A4D8               	btfss	status,2,c
  4627  000B36  D009               	goto	i1l158
  4628                           
  4629                           ; BSR set to: 1
  4630                           ;UART_Driver.c: 154: acknowledge();
  4631  000B38  EC07  F00A         	call	_acknowledge	;wreg free
  4632                           
  4633                           ;UART_Driver.c: 155: readBuffer.state = 0x00;
  4634  000B3C  0E00               	movlw	0
  4635  000B3E  0101               	movlb	1	; () banked
  4636  000B40  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4637                           
  4638                           ; BSR set to: 1
  4639                           ;UART_Driver.c: 156: readReady = 1;
  4640  000B42  0E01               	movlw	1
  4641  000B44  0100               	movlb	0	; () banked
  4642  000B46  6FD7               	movwf	_readReady& (0+255),b
  4643                           
  4644                           ;UART_Driver.c: 157: } else {
  4645  000B48  0012               	return	
  4646  000B4A                     i1l158:
  4647                           
  4648                           ;UART_Driver.c: 159: readBuffer.readId = (uint8_t)(data - 0x30);
  4649                           
  4650                           ; BSR set to: 0
  4651  000B4A  5027               	movf	fillDataBuffer@data,w,c
  4652  000B4C  0FD0               	addlw	208
  4653  000B4E  0101               	movlb	1	; () banked
  4654  000B50  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  4655                           
  4656                           ; BSR set to: 1
  4657                           ;UART_Driver.c: 160: }
  4658                           ;UART_Driver.c: 161: break;
  4659  000B52  0012               	return	
  4660  000B54                     
  4661                           ; BSR set to: 1
  4662                           ;UART_Driver.c: 164: readBuffer.state = 0x00;
  4663                           
  4664                           ; BSR set to: 1
  4665  000B54  0E00               	movlw	0
  4666  000B56  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4667                           
  4668                           ; BSR set to: 1
  4669                           ;UART_Driver.c: 166: }
  4670                           
  4671                           ;UART_Driver.c: 165: break;
  4672  000B58  0012               	return	
  4673  000B5A                     i1l135:
  4674                           
  4675                           ; BSR set to: 1
  4676  000B5A  0101               	movlb	1	; () banked
  4677  000B5C  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  4678                           
  4679                           ; Switch size 1, requested type "space"
  4680                           ; Number of cases is 6, Range of values is 0 to 5
  4681                           ; switch strategies available:
  4682                           ; Name         Instructions Cycles
  4683                           ; simple_byte           19    10 (average)
  4684                           ;	Chosen strategy is simple_byte
  4685  000B5E  0A00               	xorlw	0	; case 0
  4686  000B60  B4D8               	btfsc	status,2,c
  4687  000B62  D746               	goto	i1l136
  4688  000B64  0A01               	xorlw	1	; case 1
  4689  000B66  B4D8               	btfsc	status,2,c
  4690  000B68  D75B               	goto	i1l141
  4691  000B6A  0A03               	xorlw	3	; case 2
  4692  000B6C  B4D8               	btfsc	status,2,c
  4693  000B6E  D77A               	goto	i1l145
  4694  000B70  0A01               	xorlw	1	; case 3
  4695  000B72  B4D8               	btfsc	status,2,c
  4696  000B74  D799               	goto	i1l149
  4697  000B76  0A07               	xorlw	7	; case 4
  4698  000B78  B4D8               	btfsc	status,2,c
  4699  000B7A  D7B8               	goto	i1l153
  4700  000B7C  0A01               	xorlw	1	; case 5
  4701  000B7E  B4D8               	btfsc	status,2,c
  4702  000B80  D7D7               	goto	i1l157
  4703  000B82  D7E8               	goto	i1l160
  4704  000B84                     __end_of_fillDataBuffer:
  4705                           	opt stack 0
  4706                           pclatu	equ	0xFFB
  4707                           pclath	equ	0xFFA
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           intcon2	equ	0xFF1
  4716                           indf0	equ	0xFEF
  4717                           postinc0	equ	0xFEE
  4718                           plusw0	equ	0xFEB
  4719                           fsr0h	equ	0xFEA
  4720                           fsr0l	equ	0xFE9
  4721                           wreg	equ	0xFE8
  4722                           indf1	equ	0xFE7
  4723                           postinc1	equ	0xFE6
  4724                           postdec1	equ	0xFE5
  4725                           fsr1h	equ	0xFE2
  4726                           fsr1l	equ	0xFE1
  4727                           bsr	equ	0xFE0
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           plusw2	equ	0xFDB
  4732                           fsr2h	equ	0xFDA
  4733                           fsr2l	equ	0xFD9
  4734                           status	equ	0xFD8
  4735                           
  4736 ;; *************** function _acknowledge *****************
  4737 ;; Defined at:
  4738 ;;		line 169 in file "Drivers/UART_Driver.c"
  4739 ;; Parameters:    Size  Location     Type
  4740 ;;		None
  4741 ;; Auto vars:     Size  Location     Type
  4742 ;;		None
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  1    wreg      void 
  4745 ;; Registers used:
  4746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4752 ;;      Params:         0       0       0       0       0       0       0       0       0
  4753 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4755 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4756 ;;Total ram usage:        0 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    4
  4759 ;; This function calls:
  4760 ;;		i1_printf
  4761 ;; This function is called by:
  4762 ;;		_fillDataBuffer
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text27
  4767  00140E                     __ptext27:
  4768                           	opt stack 0
  4769  00140E                     _acknowledge:
  4770                           	opt stack 19
  4771                           
  4772                           ;UART_Driver.c: 170: printf(startCharacter);
  4773                           
  4774                           ;incstack = 0
  4775  00140E  C041  F01A         	movff	_startCharacter,i1printf@f
  4776  001412  C042  F01B         	movff	_startCharacter+1,i1printf@f+1
  4777  001416  501A               	movf	i1printf@f,w,c
  4778  001418  101B               	iorwf	i1printf@f+1,w,c
  4779  00141A  A4D8               	btfss	status,2,c
  4780  00141C  0E00               	movlw	low (__mediumconst shr (0+16))
  4781  00141E  6E1C               	movwf	i1printf@f+2,c
  4782  001420  EC6F  F006         	call	i1_printf	;wreg free
  4783                           
  4784                           ;UART_Driver.c: 172: printf(ackCharacter);
  4785  001424  C03D  F01A         	movff	_ackCharacter,i1printf@f
  4786  001428  C03E  F01B         	movff	_ackCharacter+1,i1printf@f+1
  4787  00142C  501A               	movf	i1printf@f,w,c
  4788  00142E  101B               	iorwf	i1printf@f+1,w,c
  4789  001430  A4D8               	btfss	status,2,c
  4790  001432  0E00               	movlw	low (__mediumconst shr (0+16))
  4791  001434  6E1C               	movwf	i1printf@f+2,c
  4792  001436  EC6F  F006         	call	i1_printf	;wreg free
  4793                           
  4794                           ;UART_Driver.c: 174: printf("%x",readBuffer.readId);
  4795  00143A  0E22               	movlw	low STR_5
  4796  00143C  6E1A               	movwf	i1printf@f,c
  4797  00143E  0E08               	movlw	high STR_5
  4798  001440  6E1B               	movwf	i1printf@f+1,c
  4799  001442  501A               	movf	i1printf@f,w,c
  4800  001444  101B               	iorwf	i1printf@f+1,w,c
  4801  001446  A4D8               	btfss	status,2,c
  4802  001448  0E00               	movlw	low (__mediumconst shr (0+16))
  4803  00144A  6E1C               	movwf	i1printf@f+2,c
  4804  00144C  C1A4  F01D         	movff	_readBuffer+164,?i1_printf+3
  4805  001450  6A1E               	clrf	?i1_printf+4,c
  4806  001452  EC6F  F006         	call	i1_printf	;wreg free
  4807                           
  4808                           ;UART_Driver.c: 176: printf(stopCharacter);
  4809  001456  C03F  F01A         	movff	_stopCharacter,i1printf@f
  4810  00145A  C040  F01B         	movff	_stopCharacter+1,i1printf@f+1
  4811  00145E  501A               	movf	i1printf@f,w,c
  4812  001460  101B               	iorwf	i1printf@f+1,w,c
  4813  001462  A4D8               	btfss	status,2,c
  4814  001464  0E00               	movlw	low (__mediumconst shr (0+16))
  4815  001466  6E1C               	movwf	i1printf@f+2,c
  4816  001468  EC6F  F006         	call	i1_printf	;wreg free
  4817  00146C  0012               	return		;funcret
  4818  00146E                     __end_of_acknowledge:
  4819                           	opt stack 0
  4820                           pclatu	equ	0xFFB
  4821                           pclath	equ	0xFFA
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           intcon2	equ	0xFF1
  4830                           indf0	equ	0xFEF
  4831                           postinc0	equ	0xFEE
  4832                           plusw0	equ	0xFEB
  4833                           fsr0h	equ	0xFEA
  4834                           fsr0l	equ	0xFE9
  4835                           wreg	equ	0xFE8
  4836                           indf1	equ	0xFE7
  4837                           postinc1	equ	0xFE6
  4838                           postdec1	equ	0xFE5
  4839                           fsr1h	equ	0xFE2
  4840                           fsr1l	equ	0xFE1
  4841                           bsr	equ	0xFE0
  4842                           indf2	equ	0xFDF
  4843                           postinc2	equ	0xFDE
  4844                           postdec2	equ	0xFDD
  4845                           plusw2	equ	0xFDB
  4846                           fsr2h	equ	0xFDA
  4847                           fsr2l	equ	0xFD9
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function i1_printf *****************
  4851 ;; Defined at:
  4852 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  f               3   25[COMRAM] PTR const unsigned char 
  4855 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  4856 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  4857 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  4858 ;;		 -> C_DOOR_SendStates@com(3), 
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;  printf          4    0        struct .
  4861 ;;  printf          3    0        PTR const unsigned char 
  4862 ;;  printf          2   34[COMRAM] unsigned int 
  4863 ;;  printf          2   31[COMRAM] PTR void [1]
  4864 ;;		 -> ?i1_printf(2), ?_printf(2), 
  4865 ;;  printf          2    0        unsigned int 
  4866 ;;  printf          1   37[COMRAM] char 
  4867 ;;  printf          1   36[COMRAM] char 
  4868 ;;  printf          1   33[COMRAM] unsigned char 
  4869 ;;  printf          1   30[COMRAM] unsigned char 
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  2   25[COMRAM] int 
  4872 ;; Registers used:
  4873 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4879 ;;      Params:         5       0       0       0       0       0       0       0       0
  4880 ;;      Locals:         8       0       0       0       0       0       0       0       0
  4881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4882 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4883 ;;Total ram usage:       13 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    3
  4886 ;; This function calls:
  4887 ;;		i1___lwdiv
  4888 ;;		i1_putch
  4889 ;; This function is called by:
  4890 ;;		_acknowledge
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           	psect	text28
  4895  000CDE                     __ptext28:
  4896                           	opt stack 0
  4897  000CDE                     i1_printf:
  4898                           	opt stack 19
  4899                           
  4900                           ;doprnt.c: 466: va_list ap;
  4901                           ;doprnt.c: 499: signed char c;
  4902                           ;doprnt.c: 506: signed char prec;
  4903                           ;doprnt.c: 508: unsigned char flag;
  4904                           ;doprnt.c: 523: union {
  4905                           ;doprnt.c: 524: unsigned long vd;
  4906                           ;doprnt.c: 525: double integ;
  4907                           ;doprnt.c: 526: } tmpval;
  4908                           ;doprnt.c: 528: unsigned int val;
  4909                           ;doprnt.c: 529: unsigned len;
  4910                           ;doprnt.c: 530: const char * cp;
  4911                           ;doprnt.c: 533: *ap = __va_start();
  4912                           
  4913                           ;incstack = 0
  4914  000CDE  0E1D               	movlw	low (?i1_printf+3)
  4915  000CE0  6E20               	movwf	i1printf@ap,c
  4916  000CE2  0E00               	movlw	high (?i1_printf+3)
  4917  000CE4  6E21               	movwf	i1printf@ap+1,c
  4918                           
  4919                           ;doprnt.c: 536: while(c = *f++) {
  4920  000CE6  D085               	goto	i1u97_20
  4921  000CE8                     
  4922                           ;doprnt.c: 538: if(c != '%')
  4923  000CE8  0E25               	movlw	37
  4924  000CEA  1826               	xorwf	i1printf@c,w,c
  4925  000CEC  B4D8               	btfsc	status,2,c
  4926  000CEE  D004               	goto	i1l320
  4927                           
  4928                           ;doprnt.c: 540: {
  4929                           ;doprnt.c: 541: (putch(c) );
  4930  000CF0  5026               	movf	i1printf@c,w,c
  4931  000CF2  ECA0  F00B         	call	i1_putch
  4932                           
  4933                           ;doprnt.c: 542: continue;
  4934  000CF6  D07D               	goto	i1u97_20
  4935  000CF8                     i1l320:
  4936                           
  4937                           ;doprnt.c: 543: }
  4938                           ;doprnt.c: 548: flag = 0;
  4939  000CF8  0E00               	movlw	0
  4940  000CFA  6E1F               	movwf	i1printf@flag,c
  4941                           
  4942                           ;doprnt.c: 635: switch(c = *f++) {
  4943  000CFC  D004               	goto	i1l321
  4944  000CFE                     
  4945                           ;doprnt.c: 809: (putch(c) );
  4946  000CFE  5026               	movf	i1printf@c,w,c
  4947  000D00  ECA0  F00B         	call	i1_putch
  4948                           
  4949                           ;doprnt.c: 810: continue;
  4950  000D04  D076               	goto	i1u97_20
  4951  000D06                     i1l321:
  4952  000D06  C01A  FFF6         	movff	i1printf@f,tblptrl
  4953  000D0A  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  4954  000D0E  C01C  FFF8         	movff	i1printf@f+2,tblptru
  4955  000D12  0E01               	movlw	1
  4956  000D14  261A               	addwf	i1printf@f,f,c
  4957  000D16  0E00               	movlw	0
  4958  000D18  221B               	addwfc	i1printf@f+1,f,c
  4959  000D1A  221C               	addwfc	i1printf@f+2,f,c
  4960  000D1C  BAF8               	btfsc	tblptru,5,c
  4961  000D1E  D003               	bra	i1u93_27
  4962  000D20  0008               	tblrd		*
  4963  000D22  50F5               	movf	tablat,w,c
  4964  000D24  D005               	bra	i1u93_20
  4965  000D26                     i1u93_27:
  4966  000D26  CFF6 FFE9          	movff	tblptrl,fsr0l
  4967  000D2A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4968  000D2E  50EF               	movf	indf0,w,c
  4969  000D30                     i1u93_20:
  4970  000D30  6E26               	movwf	i1printf@c,c
  4971  000D32  5026               	movf	i1printf@c,w,c
  4972                           
  4973                           ; Switch size 1, requested type "space"
  4974                           ; Number of cases is 2, Range of values is 0 to 120
  4975                           ; switch strategies available:
  4976                           ; Name         Instructions Cycles
  4977                           ; simple_byte            7     4 (average)
  4978                           ;	Chosen strategy is simple_byte
  4979  000D34  0A00               	xorlw	0	; case 0
  4980  000D36  B4D8               	btfsc	status,2,c
  4981  000D38  0012               	return	
  4982  000D3A  0A78               	xorlw	120	; case 120
  4983  000D3C  A4D8               	btfss	status,2,c
  4984  000D3E  D7DF               	goto	i1l326
  4985                           
  4986                           ;doprnt.c: 1273: {
  4987                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4988  000D40  C020  FFD9         	movff	i1printf@ap,fsr2l
  4989  000D44  C021  FFDA         	movff	i1printf@ap+1,fsr2h
  4990  000D48  CFDE F023          	movff	postinc2,i1printf@val
  4991  000D4C  CFDD F024          	movff	postdec2,i1printf@val+1
  4992  000D50  0E02               	movlw	2
  4993  000D52  2620               	addwf	i1printf@ap,f,c
  4994  000D54  0E00               	movlw	0
  4995  000D56  2221               	addwfc	i1printf@ap+1,f,c
  4996                           
  4997                           ;doprnt.c: 1287: }
  4998                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4999  000D58  0E01               	movlw	1
  5000  000D5A  6E26               	movwf	i1printf@c,c
  5001  000D5C  D014               	goto	i1l1634
  5002  000D5E                     
  5003                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5004  000D5E  5026               	movf	i1printf@c,w,c
  5005  000D60  0D02               	mullw	2
  5006  000D62  0E01               	movlw	low _hexpowers
  5007  000D64  24F3               	addwf	prodl,w,c
  5008  000D66  6EF6               	movwf	tblptrl,c
  5009  000D68  0E08               	movlw	high _hexpowers
  5010  000D6A  20F4               	addwfc	prodh,w,c
  5011  000D6C  6EF7               	movwf	tblptrh,c
  5012  000D6E                     	if	1	;There are 3 active tblptr bytes
  5013  000D6E  6AF8               	clrf	tblptru,c
  5014  000D70  0E00               	movlw	low (__mediumconst shr (0+16))
  5015  000D72  22F8               	addwfc	tblptru,f,c
  5016  000D74                     	endif
  5017  000D74  0009               	tblrd		*+
  5018  000D76  50F5               	movf	tablat,w,c
  5019  000D78  5C23               	subwf	i1printf@val,w,c
  5020  000D7A  0009               	tblrd		*+
  5021  000D7C  50F5               	movf	tablat,w,c
  5022  000D7E  5824               	subwfb	i1printf@val+1,w,c
  5023  000D80  A0D8               	btfss	status,0,c
  5024  000D82  D005               	goto	i1u96_20
  5025                           
  5026                           ;doprnt.c: 1318: break;
  5027  000D84  2A26               	incf	i1printf@c,f,c
  5028  000D86                     i1l1634:
  5029  000D86  0E04               	movlw	4
  5030  000D88  1826               	xorwf	i1printf@c,w,c
  5031  000D8A  A4D8               	btfss	status,2,c
  5032  000D8C  D7E8               	goto	i1l327
  5033  000D8E                     i1u96_20:
  5034                           
  5035                           ;doprnt.c: 1422: {
  5036                           ;doprnt.c: 1469: }
  5037                           ;doprnt.c: 1472: prec = c;
  5038  000D8E  C026  F025         	movff	i1printf@c,i1printf@prec
  5039                           
  5040                           ;doprnt.c: 1474: while(prec--) {
  5041  000D92  D02B               	goto	i1l330
  5042  000D94                     
  5043                           ;doprnt.c: 1478: {
  5044                           ;doprnt.c: 1499: {
  5045                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5046  000D94  C023  F013         	movff	i1printf@val,i1___lwdiv@dividend
  5047  000D98  C024  F014         	movff	i1printf@val+1,i1___lwdiv@dividend+1
  5048  000D9C  5025               	movf	i1printf@prec,w,c
  5049  000D9E  0D02               	mullw	2
  5050  000DA0  0E01               	movlw	low _hexpowers
  5051  000DA2  24F3               	addwf	prodl,w,c
  5052  000DA4  6EF6               	movwf	tblptrl,c
  5053  000DA6  0E08               	movlw	high _hexpowers
  5054  000DA8  20F4               	addwfc	prodh,w,c
  5055  000DAA  6EF7               	movwf	tblptrh,c
  5056  000DAC                     	if	1	;There are 3 active tblptr bytes
  5057  000DAC  6AF8               	clrf	tblptru,c
  5058  000DAE  0E00               	movlw	low (__mediumconst shr (0+16))
  5059  000DB0  22F8               	addwfc	tblptru,f,c
  5060  000DB2                     	endif
  5061  000DB2  0009               	tblrd		*+
  5062  000DB4  CFF5 F015          	movff	tablat,i1___lwdiv@divisor
  5063  000DB8  000A               	tblrd		*-
  5064  000DBA  CFF5 F016          	movff	tablat,i1___lwdiv@divisor+1
  5065  000DBE  EC8F  F00A         	call	i1___lwdiv	;wreg free
  5066  000DC2  5013               	movf	?i1___lwdiv,w,c
  5067  000DC4  0B0F               	andlw	15
  5068  000DC6  6E22               	movwf	i1printf@idx,c
  5069                           
  5070                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5071  000DC8  5022               	movf	i1printf@idx,w,c
  5072  000DCA  0D01               	mullw	1
  5073  000DCC  0E09               	movlw	low STR_17
  5074  000DCE  24F3               	addwf	prodl,w,c
  5075  000DD0  6EF6               	movwf	tblptrl,c
  5076  000DD2  0E08               	movlw	high STR_17
  5077  000DD4  20F4               	addwfc	prodh,w,c
  5078  000DD6  6EF7               	movwf	tblptrh,c
  5079  000DD8                     	if	1	;There are 3 active tblptr bytes
  5080  000DD8  6AF8               	clrf	tblptru,c
  5081  000DDA  0E00               	movlw	low (__mediumconst shr (0+16))
  5082  000DDC  22F8               	addwfc	tblptru,f,c
  5083  000DDE                     	endif
  5084  000DDE  0008               	tblrd		*
  5085  000DE0  CFF5 F026          	movff	tablat,i1printf@c
  5086                           
  5087                           ;doprnt.c: 1508: }
  5088                           ;doprnt.c: 1523: }
  5089                           ;doprnt.c: 1524: (putch(c) );
  5090  000DE4  5026               	movf	i1printf@c,w,c
  5091  000DE6  ECA0  F00B         	call	i1_putch
  5092  000DEA                     i1l330:
  5093  000DEA  0625               	decf	i1printf@prec,f,c
  5094  000DEC  2825               	incf	i1printf@prec,w,c
  5095  000DEE  A4D8               	btfss	status,2,c
  5096  000DF0  D7D1               	goto	i1l331
  5097  000DF2                     i1u97_20:
  5098  000DF2  C01A  FFF6         	movff	i1printf@f,tblptrl
  5099  000DF6  C01B  FFF7         	movff	i1printf@f+1,tblptrh
  5100  000DFA  C01C  FFF8         	movff	i1printf@f+2,tblptru
  5101  000DFE  0E01               	movlw	1
  5102  000E00  261A               	addwf	i1printf@f,f,c
  5103  000E02  0E00               	movlw	0
  5104  000E04  221B               	addwfc	i1printf@f+1,f,c
  5105  000E06  221C               	addwfc	i1printf@f+2,f,c
  5106  000E08  BAF8               	btfsc	tblptru,5,c
  5107  000E0A  D003               	bra	i1u98_27
  5108  000E0C  0008               	tblrd		*
  5109  000E0E  50F5               	movf	tablat,w,c
  5110  000E10  D005               	bra	i1u98_20
  5111  000E12                     i1u98_27:
  5112  000E12  CFF6 FFE9          	movff	tblptrl,fsr0l
  5113  000E16  CFF7 FFEA          	movff	tblptrh,fsr0h
  5114  000E1A  50EF               	movf	indf0,w,c
  5115  000E1C                     i1u98_20:
  5116  000E1C  6E26               	movwf	i1printf@c,c
  5117  000E1E  5026               	movf	i1printf@c,w,c
  5118  000E20  B4D8               	btfsc	status,2,c
  5119  000E22  0012               	return	
  5120  000E24  D761               	goto	i1l319
  5121  000E26                     __end_ofi1_printf:
  5122                           	opt stack 0
  5123                           pclatu	equ	0xFFB
  5124                           pclath	equ	0xFFA
  5125                           tblptru	equ	0xFF8
  5126                           tblptrh	equ	0xFF7
  5127                           tblptrl	equ	0xFF6
  5128                           tablat	equ	0xFF5
  5129                           prodh	equ	0xFF4
  5130                           prodl	equ	0xFF3
  5131                           intcon	equ	0xFF2
  5132                           intcon2	equ	0xFF1
  5133                           indf0	equ	0xFEF
  5134                           postinc0	equ	0xFEE
  5135                           plusw0	equ	0xFEB
  5136                           fsr0h	equ	0xFEA
  5137                           fsr0l	equ	0xFE9
  5138                           wreg	equ	0xFE8
  5139                           indf1	equ	0xFE7
  5140                           postinc1	equ	0xFE6
  5141                           postdec1	equ	0xFE5
  5142                           fsr1h	equ	0xFE2
  5143                           fsr1l	equ	0xFE1
  5144                           bsr	equ	0xFE0
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           plusw2	equ	0xFDB
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function i1_putch *****************
  5154 ;; Defined at:
  5155 ;;		line 263 in file "Drivers/UART_Driver.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  data            1    wreg     unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  data            1   19[COMRAM] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;                  1    wreg      void 
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5169 ;;      Params:         0       0       0       0       0       0       0       0       0
  5170 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5172 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5173 ;;Total ram usage:        1 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    2
  5176 ;; This function calls:
  5177 ;;		i1_writeByte
  5178 ;; This function is called by:
  5179 ;;		i1_printf
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text29
  5184  001740                     __ptext29:
  5185                           	opt stack 0
  5186  001740                     i1_putch:
  5187                           	opt stack 19
  5188                           
  5189                           ;incstack = 0
  5190                           ;i1putch@data stored from wreg
  5191  001740  6E14               	movwf	i1putch@data,c
  5192                           
  5193                           ;UART_Driver.c: 264: writeByte(data);
  5194  001742  5014               	movf	i1putch@data,w,c
  5195  001744  EC9A  F00B         	call	i1_writeByte
  5196  001748  0012               	return		;funcret
  5197  00174A                     __end_ofi1_putch:
  5198                           	opt stack 0
  5199                           pclatu	equ	0xFFB
  5200                           pclath	equ	0xFFA
  5201                           tblptru	equ	0xFF8
  5202                           tblptrh	equ	0xFF7
  5203                           tblptrl	equ	0xFF6
  5204                           tablat	equ	0xFF5
  5205                           prodh	equ	0xFF4
  5206                           prodl	equ	0xFF3
  5207                           intcon	equ	0xFF2
  5208                           intcon2	equ	0xFF1
  5209                           indf0	equ	0xFEF
  5210                           postinc0	equ	0xFEE
  5211                           plusw0	equ	0xFEB
  5212                           fsr0h	equ	0xFEA
  5213                           fsr0l	equ	0xFE9
  5214                           wreg	equ	0xFE8
  5215                           indf1	equ	0xFE7
  5216                           postinc1	equ	0xFE6
  5217                           postdec1	equ	0xFE5
  5218                           fsr1h	equ	0xFE2
  5219                           fsr1l	equ	0xFE1
  5220                           bsr	equ	0xFE0
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           plusw2	equ	0xFDB
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function i1_writeByte *****************
  5230 ;; Defined at:
  5231 ;;		line 69 in file "Drivers/UART_Driver.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;  data            1    wreg     unsigned char 
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;  data            1   18[COMRAM] unsigned char 
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5245 ;;      Params:         0       0       0       0       0       0       0       0       0
  5246 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5248 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5249 ;;Total ram usage:        1 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    1
  5252 ;; This function calls:
  5253 ;;		Nothing
  5254 ;; This function is called by:
  5255 ;;		i1_putch
  5256 ;; This function uses a non-reentrant model
  5257 ;;
  5258                           
  5259                           	psect	text30
  5260  001734                     __ptext30:
  5261                           	opt stack 0
  5262  001734                     i1_writeByte:
  5263                           	opt stack 19
  5264                           
  5265                           ;incstack = 0
  5266                           ;i1writeByte@data stored from wreg
  5267  001734  6E13               	movwf	i1writeByte@data,c
  5268  001736                     
  5269                           ;UART_Driver.c: 70: while(TXSTAbits.TRMT == 0);
  5270  001736  A2AC               	btfss	4012,1,c	;volatile
  5271  001738  D7FE               	goto	i1l1510
  5272                           
  5273                           ;UART_Driver.c: 71: TXREG = data;
  5274  00173A  C013  FFAD         	movff	i1writeByte@data,4013	;volatile
  5275  00173E  0012               	return		;funcret
  5276  001740                     __end_ofi1_writeByte:
  5277                           	opt stack 0
  5278                           pclatu	equ	0xFFB
  5279                           pclath	equ	0xFFA
  5280                           tblptru	equ	0xFF8
  5281                           tblptrh	equ	0xFF7
  5282                           tblptrl	equ	0xFF6
  5283                           tablat	equ	0xFF5
  5284                           prodh	equ	0xFF4
  5285                           prodl	equ	0xFF3
  5286                           intcon	equ	0xFF2
  5287                           intcon2	equ	0xFF1
  5288                           indf0	equ	0xFEF
  5289                           postinc0	equ	0xFEE
  5290                           plusw0	equ	0xFEB
  5291                           fsr0h	equ	0xFEA
  5292                           fsr0l	equ	0xFE9
  5293                           wreg	equ	0xFE8
  5294                           indf1	equ	0xFE7
  5295                           postinc1	equ	0xFE6
  5296                           postdec1	equ	0xFE5
  5297                           fsr1h	equ	0xFE2
  5298                           fsr1l	equ	0xFE1
  5299                           bsr	equ	0xFE0
  5300                           indf2	equ	0xFDF
  5301                           postinc2	equ	0xFDE
  5302                           postdec2	equ	0xFDD
  5303                           plusw2	equ	0xFDB
  5304                           fsr2h	equ	0xFDA
  5305                           fsr2l	equ	0xFD9
  5306                           status	equ	0xFD8
  5307                           
  5308 ;; *************** function i1___lwdiv *****************
  5309 ;; Defined at:
  5310 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;  dividend        2   18[COMRAM] unsigned int 
  5313 ;;  divisor         2   20[COMRAM] unsigned int 
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  __lwdiv         2   22[COMRAM] unsigned int 
  5316 ;;  __lwdiv         1   24[COMRAM] unsigned char 
  5317 ;; Return value:  Size  Location     Type
  5318 ;;                  2   18[COMRAM] unsigned int 
  5319 ;; Registers used:
  5320 ;;		wreg, status,2, status,0
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5326 ;;      Params:         4       0       0       0       0       0       0       0       0
  5327 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5329 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5330 ;;Total ram usage:        7 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    1
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		i1_printf
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           	psect	text31
  5341  00151E                     __ptext31:
  5342                           	opt stack 0
  5343  00151E                     i1___lwdiv:
  5344                           	opt stack 20
  5345                           
  5346                           ;incstack = 0
  5347  00151E  0E00               	movlw	0
  5348  001520  6E18               	movwf	i1___lwdiv@quotient+1,c
  5349  001522  0E00               	movlw	0
  5350  001524  6E17               	movwf	i1___lwdiv@quotient,c
  5351  001526  5015               	movf	i1___lwdiv@divisor,w,c
  5352  001528  1016               	iorwf	i1___lwdiv@divisor+1,w,c
  5353  00152A  B4D8               	btfsc	status,2,c
  5354  00152C  D01C               	goto	i1l743
  5355  00152E  0E01               	movlw	1
  5356  001530  6E19               	movwf	i1___lwdiv@counter,c
  5357  001532  D004               	goto	i1l738
  5358  001534  90D8               	bcf	status,0,c
  5359  001536  3615               	rlcf	i1___lwdiv@divisor,f,c
  5360  001538  3616               	rlcf	i1___lwdiv@divisor+1,f,c
  5361  00153A  2A19               	incf	i1___lwdiv@counter,f,c
  5362  00153C                     i1l738:
  5363  00153C  AE16               	btfss	i1___lwdiv@divisor+1,7,c
  5364  00153E  D7FA               	goto	i1l739
  5365  001540                     i1u82_20:
  5366  001540  90D8               	bcf	status,0,c
  5367  001542  3617               	rlcf	i1___lwdiv@quotient,f,c
  5368  001544  3618               	rlcf	i1___lwdiv@quotient+1,f,c
  5369  001546  5015               	movf	i1___lwdiv@divisor,w,c
  5370  001548  5C13               	subwf	i1___lwdiv@dividend,w,c
  5371  00154A  5016               	movf	i1___lwdiv@divisor+1,w,c
  5372  00154C  5814               	subwfb	i1___lwdiv@dividend+1,w,c
  5373  00154E  A0D8               	btfss	status,0,c
  5374  001550  D005               	goto	i1l742
  5375  001552  5015               	movf	i1___lwdiv@divisor,w,c
  5376  001554  5E13               	subwf	i1___lwdiv@dividend,f,c
  5377  001556  5016               	movf	i1___lwdiv@divisor+1,w,c
  5378  001558  5A14               	subwfb	i1___lwdiv@dividend+1,f,c
  5379  00155A  8017               	bsf	i1___lwdiv@quotient,0,c
  5380  00155C                     i1l742:
  5381  00155C  90D8               	bcf	status,0,c
  5382  00155E  3216               	rrcf	i1___lwdiv@divisor+1,f,c
  5383  001560  3215               	rrcf	i1___lwdiv@divisor,f,c
  5384  001562  2E19               	decfsz	i1___lwdiv@counter,f,c
  5385  001564  D7ED               	goto	i1u82_20
  5386  001566                     i1l743:
  5387  001566  C017  F013         	movff	i1___lwdiv@quotient,?i1___lwdiv
  5388  00156A  C018  F014         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  5389  00156E  0012               	return		;funcret
  5390  001570                     __end_ofi1___lwdiv:
  5391                           	opt stack 0
  5392                           pclatu	equ	0xFFB
  5393                           pclath	equ	0xFFA
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           intcon2	equ	0xFF1
  5402                           indf0	equ	0xFEF
  5403                           postinc0	equ	0xFEE
  5404                           plusw0	equ	0xFEB
  5405                           fsr0h	equ	0xFEA
  5406                           fsr0l	equ	0xFE9
  5407                           wreg	equ	0xFE8
  5408                           indf1	equ	0xFE7
  5409                           postinc1	equ	0xFE6
  5410                           postdec1	equ	0xFE5
  5411                           fsr1h	equ	0xFE2
  5412                           fsr1l	equ	0xFE1
  5413                           bsr	equ	0xFE0
  5414                           indf2	equ	0xFDF
  5415                           postinc2	equ	0xFDE
  5416                           postdec2	equ	0xFDD
  5417                           plusw2	equ	0xFDB
  5418                           fsr2h	equ	0xFDA
  5419                           fsr2l	equ	0xFD9
  5420                           status	equ	0xFD8
  5421                           
  5422 ;; *************** function _HighISR *****************
  5423 ;; Defined at:
  5424 ;;		line 115 in file "main.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  1    wreg      void 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5438 ;;      Params:         0       0       0       0       0       0       0       0       0
  5439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5440 ;;      Temps:         18       0       0       0       0       0       0       0       0
  5441 ;;      Totals:        18       0       0       0       0       0       0       0       0
  5442 ;;Total ram usage:       18 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; This function calls:
  5445 ;;		Nothing
  5446 ;; This function is called by:
  5447 ;;		Interrupt level 2
  5448 ;; This function uses a non-reentrant model
  5449 ;;
  5450                           
  5451                           	psect	intcode
  5452  000008                     __pintcode:
  5453                           	opt stack 0
  5454  000008                     _HighISR:
  5455                           	opt stack 19
  5456                           
  5457                           ;incstack = 0
  5458  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5459  00000A  ED39  F009         	call	int_func,f	;refresh shadow registers
  5460                           pclatu	equ	0xFFB
  5461                           pclath	equ	0xFFA
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           intcon2	equ	0xFF1
  5470                           indf0	equ	0xFEF
  5471                           postinc0	equ	0xFEE
  5472                           plusw0	equ	0xFEB
  5473                           fsr0h	equ	0xFEA
  5474                           fsr0l	equ	0xFE9
  5475                           wreg	equ	0xFE8
  5476                           indf1	equ	0xFE7
  5477                           postinc1	equ	0xFE6
  5478                           postdec1	equ	0xFE5
  5479                           fsr1h	equ	0xFE2
  5480                           fsr1l	equ	0xFE1
  5481                           bsr	equ	0xFE0
  5482                           indf2	equ	0xFDF
  5483                           postinc2	equ	0xFDE
  5484                           postdec2	equ	0xFDD
  5485                           plusw2	equ	0xFDB
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           
  5490                           	psect	intcode_body
  5491  001272                     __pintcode_body:
  5492                           	opt stack 19
  5493  001272                     int_func:
  5494                           	opt stack 19
  5495  001272  0006               	pop		; remove dummy address from shadow register refresh
  5496  001274  CFFA F001          	movff	pclath,??_HighISR
  5497  001278  CFFB F002          	movff	pclatu,??_HighISR+1
  5498  00127C  CFE9 F003          	movff	fsr0l,??_HighISR+2
  5499  001280  CFEA F004          	movff	fsr0h,??_HighISR+3
  5500  001284  CFE1 F005          	movff	fsr1l,??_HighISR+4
  5501  001288  CFE2 F006          	movff	fsr1h,??_HighISR+5
  5502  00128C  CFD9 F007          	movff	fsr2l,??_HighISR+6
  5503  001290  CFDA F008          	movff	fsr2h,??_HighISR+7
  5504  001294  CFF3 F009          	movff	prodl,??_HighISR+8
  5505  001298  CFF4 F00A          	movff	prodh,??_HighISR+9
  5506  00129C  CFF6 F00B          	movff	tblptrl,??_HighISR+10
  5507  0012A0  CFF7 F00C          	movff	tblptrh,??_HighISR+11
  5508  0012A4  CFF8 F00D          	movff	tblptru,??_HighISR+12
  5509  0012A8  CFF5 F00E          	movff	tablat,??_HighISR+13
  5510  0012AC  C044  F00F         	movff	btemp,??_HighISR+14
  5511  0012B0  C045  F010         	movff	btemp+1,??_HighISR+15
  5512  0012B4  C046  F011         	movff	btemp+2,??_HighISR+16
  5513  0012B8  C047  F012         	movff	btemp+3,??_HighISR+17
  5514                           
  5515                           ;main.c: 116: if (INTCONbits.TMR0IF) {
  5516  0012BC  A4F2               	btfss	intcon,2,c	;volatile
  5517  0012BE  D004               	goto	i2l287
  5518                           
  5519                           ;main.c: 117: tick = 1;
  5520  0012C0  0E01               	movlw	1
  5521  0012C2  0100               	movlb	0	; () banked
  5522  0012C4  6FD6               	movwf	_tick& (0+255),b
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;main.c: 118: INTCONbits.TMR0IF = 0;
  5526  0012C6  94F2               	bcf	intcon,2,c	;volatile
  5527  0012C8                     i2l287:
  5528                           
  5529                           ; BSR set to: 0
  5530  0012C8  C012  F047         	movff	??_HighISR+17,btemp+3
  5531  0012CC  C011  F046         	movff	??_HighISR+16,btemp+2
  5532  0012D0  C010  F045         	movff	??_HighISR+15,btemp+1
  5533  0012D4  C00F  F044         	movff	??_HighISR+14,btemp
  5534  0012D8  C00E  FFF5         	movff	??_HighISR+13,tablat
  5535  0012DC  C00D  FFF8         	movff	??_HighISR+12,tblptru
  5536  0012E0  C00C  FFF7         	movff	??_HighISR+11,tblptrh
  5537  0012E4  C00B  FFF6         	movff	??_HighISR+10,tblptrl
  5538  0012E8  C00A  FFF4         	movff	??_HighISR+9,prodh
  5539  0012EC  C009  FFF3         	movff	??_HighISR+8,prodl
  5540  0012F0  C008  FFDA         	movff	??_HighISR+7,fsr2h
  5541  0012F4  C007  FFD9         	movff	??_HighISR+6,fsr2l
  5542  0012F8  C006  FFE2         	movff	??_HighISR+5,fsr1h
  5543  0012FC  C005  FFE1         	movff	??_HighISR+4,fsr1l
  5544  001300  C004  FFEA         	movff	??_HighISR+3,fsr0h
  5545  001304  C003  FFE9         	movff	??_HighISR+2,fsr0l
  5546  001308  C002  FFFB         	movff	??_HighISR+1,pclatu
  5547  00130C  C001  FFFA         	movff	??_HighISR,pclath
  5548  001310  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5549  001312  0011               	retfie		f
  5550  001314                     __end_of_HighISR:
  5551                           	opt stack 0
  5552                           pclatu	equ	0xFFB
  5553                           pclath	equ	0xFFA
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           intcon2	equ	0xFF1
  5562                           indf0	equ	0xFEF
  5563                           postinc0	equ	0xFEE
  5564                           plusw0	equ	0xFEB
  5565                           fsr0h	equ	0xFEA
  5566                           fsr0l	equ	0xFE9
  5567                           wreg	equ	0xFE8
  5568                           indf1	equ	0xFE7
  5569                           postinc1	equ	0xFE6
  5570                           postdec1	equ	0xFE5
  5571                           fsr1h	equ	0xFE2
  5572                           fsr1l	equ	0xFE1
  5573                           bsr	equ	0xFE0
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           plusw2	equ	0xFDB
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           pclatu	equ	0xFFB
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           intcon2	equ	0xFF1
  5591                           indf0	equ	0xFEF
  5592                           postinc0	equ	0xFEE
  5593                           plusw0	equ	0xFEB
  5594                           fsr0h	equ	0xFEA
  5595                           fsr0l	equ	0xFE9
  5596                           wreg	equ	0xFE8
  5597                           indf1	equ	0xFE7
  5598                           postinc1	equ	0xFE6
  5599                           postdec1	equ	0xFE5
  5600                           fsr1h	equ	0xFE2
  5601                           fsr1l	equ	0xFE1
  5602                           bsr	equ	0xFE0
  5603                           indf2	equ	0xFDF
  5604                           postinc2	equ	0xFDE
  5605                           postdec2	equ	0xFDD
  5606                           plusw2	equ	0xFDB
  5607                           fsr2h	equ	0xFDA
  5608                           fsr2l	equ	0xFD9
  5609                           status	equ	0xFD8
  5610                           
  5611                           	psect	rparam
  5612  0000                     pclatu	equ	0xFFB
  5613                           pclath	equ	0xFFA
  5614                           tblptru	equ	0xFF8
  5615                           tblptrh	equ	0xFF7
  5616                           tblptrl	equ	0xFF6
  5617                           tablat	equ	0xFF5
  5618                           prodh	equ	0xFF4
  5619                           prodl	equ	0xFF3
  5620                           intcon	equ	0xFF2
  5621                           intcon2	equ	0xFF1
  5622                           indf0	equ	0xFEF
  5623                           postinc0	equ	0xFEE
  5624                           plusw0	equ	0xFEB
  5625                           fsr0h	equ	0xFEA
  5626                           fsr0l	equ	0xFE9
  5627                           wreg	equ	0xFE8
  5628                           indf1	equ	0xFE7
  5629                           postinc1	equ	0xFE6
  5630                           postdec1	equ	0xFE5
  5631                           fsr1h	equ	0xFE2
  5632                           fsr1l	equ	0xFE1
  5633                           bsr	equ	0xFE0
  5634                           indf2	equ	0xFDF
  5635                           postinc2	equ	0xFDE
  5636                           postdec2	equ	0xFDD
  5637                           plusw2	equ	0xFDB
  5638                           fsr2h	equ	0xFDA
  5639                           fsr2l	equ	0xFD9
  5640                           status	equ	0xFD8
  5641                           
  5642                           	psect	temp
  5643  000044                     btemp:
  5644                           	opt stack 0
  5645  000044                     	ds	1
  5646  0000                     int$flags	set	btemp
  5647  0000                     wtemp6	set	btemp+1
  5648                           pclatu	equ	0xFFB
  5649                           pclath	equ	0xFFA
  5650                           tblptru	equ	0xFF8
  5651                           tblptrh	equ	0xFF7
  5652                           tblptrl	equ	0xFF6
  5653                           tablat	equ	0xFF5
  5654                           prodh	equ	0xFF4
  5655                           prodl	equ	0xFF3
  5656                           intcon	equ	0xFF2
  5657                           intcon2	equ	0xFF1
  5658                           indf0	equ	0xFEF
  5659                           postinc0	equ	0xFEE
  5660                           plusw0	equ	0xFEB
  5661                           fsr0h	equ	0xFEA
  5662                           fsr0l	equ	0xFE9
  5663                           wreg	equ	0xFE8
  5664                           indf1	equ	0xFE7
  5665                           postinc1	equ	0xFE6
  5666                           postdec1	equ	0xFE5
  5667                           fsr1h	equ	0xFE2
  5668                           fsr1l	equ	0xFE1
  5669                           bsr	equ	0xFE0
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           plusw2	equ	0xFDB
  5674                           fsr2h	equ	0xFDA
  5675                           fsr2l	equ	0xFD9
  5676                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    8
    Data        8
    BSS         287
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     60      67
    BANK0           160     34     156
    BANK1           256      0     166
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i1_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), C_DOOR_SendStates@mes(BANK0[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), C_DOOR_SendStates@com(BANK0[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S97$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S97$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S97$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    doors.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK0[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK0[3]), 

    S21$sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.sensor_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    S21$lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    _LowISR->_fillDataBuffer
    _acknowledge->i1_printf
    i1_printf->i1___lwdiv
    i1_putch->i1_writeByte

Critical Paths under _HighISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_C_DOOR_SendStates
    _initDoors->_C_DOOR_Init
    _D_UART_Init->___aldiv
    _D_TMR0_Init->_D_TMR0_Enable
    _C_DOOR_SendStates->_D_UART_Write
    _D_UART_Write->_printf
    _printf->___lwdiv
    _putch->_writeByte

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6880
                                             32 BANK0      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1003
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     333
                                              5 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     266
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          9     4      5     943
                                             14 BANK0      9     4      5
                      _D_UART_Enable
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    2524
                                             23 BANK0      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     405
                                              0 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    1877
                                             18 BANK0      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1529
                                              7 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _LowISR                                              21    21      0     967
                                             39 COMRAM    21    21      0
                     _fillDataBuffer
                           _readByte
 ---------------------------------------------------------------------------------
 (7) _readByte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0     967
                                             38 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0     725
                           i1_printf
 ---------------------------------------------------------------------------------
 (9) i1_printf                                            22    17      5     725
                                             25 COMRAM    13     8      5
                          i1___lwdiv
                            i1_putch
 ---------------------------------------------------------------------------------
 (10) i1_putch                                             1     1      0      44
                                             19 COMRAM     1     1      0
                        i1_writeByte
 ---------------------------------------------------------------------------------
 (11) i1_writeByte                                         1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i1___lwdiv                                           7     3      4     214
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _HighISR                                            18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
           _writeByte
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___aldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
         _writeByte
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i1_printf
         i1___lwdiv
         i1_putch
           i1_writeByte
   _readByte

 _HighISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A6       7       64.8%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     22      9C       5       97.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3C      43       1       71.3%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     185      11        0.0%
DATA                 0      0     185       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Mar 12 20:52:17 2018

                         l13 13F0                           l50 10DE                           l18 0F22  
                         l51 1026                           l19 0E40                           l44 1392  
                         l52 10DC                           l45 131C                  __CFG_BOR$ON 000000  
                         bsr 000FE0                  __CFG_BORV$3 000000                 _ackCharacter 003D  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l203 16F8                          l320 0BA0  
                        l304 16E2                          l321 0BB0                          l330 0C9C  
                        l250 169C                          l331 0C44                          l326 0BA8  
                        l254 15D8                          l327 0C0E                          l319 0B90  
                        l255 15C4                          l271 0932                          l176 165C  
                        l273 0968                          l265 0896                          l258 15CC  
                        l259 15D2                          l267 08DA                          l277 09B8  
                        l269 0900                          l390 1118                          l278 09CE  
                        l391 1130                          l393 115E                          l394 1152  
                        l397 1192                          l742 150A                          l398 11A0  
                        l743 1514                          l399 11B6                          l738 14EA  
                        l739 14E2                          l882 157C                          l883 1572  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        u900 0CD2                          u850 0BDC                          u907 0CC8  
                        u790 14EE                          u880 0C3E                          u857 0BD2  
                        u890 0CA6                          _pwm 00D5                          prod 000FF3  
                        wreg 000FE8                 __CFG_FOSC$HS 000000          __end_ofi1_writeByte 1740  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1506 172A  
                       l1592 0C36                         STR_1 0835                         STR_2 0833  
                       STR_3 081E                         STR_4 081A                         STR_5 0822  
                       STR_6 0837                         STR_7 0837                         STR_8 082D  
                       STR_9 082B                         u1021 0FB4                         u1031 0FEE  
                       u1124 1384                         u1125 1380                         u1310 15B2  
                       u1151 1074                         u1090 1162                         u1421 08AC  
                       u1281 1614                         u1517 0846                         u1527 088A  
                       u1537 095A                         u1547 1012                 ?_C_DOOR_Init 0001  
                       _baud 0043                         _main 083A                         _read 00C4  
                       _tick 00D6                         fsr0h 000FEA                         fsr1h 000FE2  
                       indf0 000FEF                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf1 000FE7                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 0044                         prodh 000FF4  
                       prodl 000FF3                         start 00D4                __CFG_IESO$OFF 000000  
            __end_ofi1_putch 174A              __end_of_HighISR 1314                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  ?_D_PWM_Init 0001            initDoors@door_cnt 00DD  
             _startCharacter 0041              D_PWM_SetPwm@pwm 00D8                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 00E2      __size_of_C_DOOR_LockAll 000E         commandAndMessage@mes 00E4  
            __end_of___aldiv 11C8                        ?_main 0001                        STR_10 0831  
                      STR_11 0829                        STR_12 082F                        STR_13 082D  
                      STR_14 0825                        STR_15 0827                        STR_16 0831  
                      STR_17 0809                        u10211 0FB2                        u10311 0FEC  
            __end_of___lwdiv 151E                        i1l141 0A20                        i1l150 0ACA  
                      i1l142 0A42                        i1l135 0B5A                        i1l320 0CF8  
                      i1l160 0B54                        i1l136 09F0                        i1l321 0D06  
                      i1l153 0AEC                        i1l145 0A64                        i1l137 0A18  
                      i1l330 0DEA                        i1l154 0B0E                        i1l146 0A86  
                      i1l331 0D94                        i1l157 0B30                        i1l149 0AA8  
                      i1l326 0CFE                        i1l158 0B4A                        i1l327 0D5E  
                      i1l319 0CE8                        i1l186 007C                        i1l742 155C  
                      i1l743 1566                        i1l738 153C                        i1l739 1534  
                      i2l287 12C8                        _RCREG 000FAE         __size_of_acknowledge 0060  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               C_DOOR_Init@cnt 00DB  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 1718  
            i1writeByte@data 0013                        pclath 000FFA                        tablat 000FF5  
               ?_D_UART_Init 00E6                 ?_D_UART_Read 00D8                 ?_D_TMR0_Init 0001  
                      plusw0 000FEB                        plusw2 000FDB                        status 000FD8  
                      wtemp6 0045                 ?_D_PORT_Init 0001           __size_ofi1___lwdiv 0052  
              _stopCharacter 003F             __end_ofi1_printf 0E26                   i1printf@ap 0020  
            __initialization 146E             _D_UART_Init$1670 00EB                 __end_of_main 09EC  
                     ??_main 00F8                  i1_writeByte 1734                __activetblptr 000003  
            __CFG_CCP2MX$OFF 000000        commandAndMessage@door 00D8                       _ADCON1 000FC1  
                     _CCPR1L 000FBE          __size_of_D_PWM_Init 0026                       ?_putch 0001  
                     i1l1510 1736                       i1l1634 0D86                    ??i1_putch 0014  
           _C_DOOR_UnlockAll 170A                    ??_HighISR 0001                       _LowISR 0018  
             __CFG_XINST$OFF 000000                    ??___aldiv 00E0                setAlarm@alarm 00D8  
                  ??___lwdiv 00DC             __end_of_readByte 1752                       clear_0 14AC  
                     clear_1 14B8                       _printf 0B84             __end_of_setAlarm 15F0  
                     _strcmp 1570            __end_ofi1___lwdiv 1570                 __pdataCOMRAM 003D  
      D_UART_Init@interrupts 00EA                 __mediumconst 0000                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                ?_D_UART_Write 00EA  
            D_UART_Init@baud 00E8              D_UART_Init@name 00E6   __end_of_C_DOOR_ReadSensors 13AE  
                 __accesstop 0060      __end_of__initialization 14C0              __CFG_PBADEN$OFF 000000  
              ___rparam_used 000001         __size_of_C_DOOR_Init 0118                  i1printf@idx 0022  
                i1printf@val 0023               __pcstackCOMRAM 0001                 __pidataBANK0 1758  
               C_DOOR_Init@d 00DC                  i1putch@data 0014                __end_of_putch 1726  
           _messageCharacter 00FA                ?_D_PWM_SetPwm 0001               _C_DOOR_LockAll 16FC  
     __size_of_D_UART_Enable 0024               ??_D_UART_Write 00EE                    ?i1_printf 001A  
     __size_of_D_TMR0_Enable 0014            _C_DOOR_SendStates 101E                      ??_putch 00D9  
         ?_C_DOOR_SendStates 0001                   __pbssBANK0 0060                   __pbssBANK1 0100  
         __size_of_initDoors 0022         __size_of_D_UART_Init 00AA         __size_of_D_UART_Read 002E  
       __size_of_D_TMR0_Init 0024          ??_C_DOOR_SendStates 00EF                      ?_LowISR 0001  
       __size_of_D_PORT_Init 001E                 ??_D_PWM_Init 00D8       __end_of_C_DOOR_LockAll 170A  
             ??_D_PWM_SetPwm 00D8                   _deviceName 00D0                      ?_printf 00DF  
                    ?_strcmp 00D8    __end_of_C_DOOR_SendStates 10FA                   ??i1_printf 001F  
    __size_of_fillDataBuffer 0198                      i1u82_20 1540                      i1u93_20 0D30  
                    i1u93_27 0D26          D_UART_Enable@enable 00D8                      i1u96_20 0D8E  
                    i1u97_20 0DF2                      i1u98_20 0E1C                      i1u98_27 0E12  
         __end_of_D_PWM_Init 1644              __CFG_VREGEN$OFF 000000                      i1_putch 1740  
                    _HighISR 0008                    ?_readByte 0001           __size_of_writeByte 000E  
              _D_UART_Enable 1644                    ?_setAlarm 0001                      __Hparam 0000  
                    __Lparam 0000              __size_of_LowISR 00BC                _D_TMR0_Enable 16E8  
                 _readBuffer 0100                      ___aldiv 10FA              ?_C_DOOR_LockAll 0001  
                    ___lwdiv 14CA                 __psmallconst 0800          C_DOOR_ReadSensors@d 00DC  
            __CFG_STVREN$OFF 000000                ??_acknowledge 0027                      __pcinit 146E  
                    __ramtop 0800     __end_of_C_DOOR_UnlockAll 1718                      __ptext0 083A  
                    __ptext1 1570                      __ptext2 15BE                      __ptext3 168C  
                    __ptext4 16FC                      __ptext5 0E26                      __ptext6 15F0  
                    __ptext7 11C8                      __ptext8 10FA                      __ptext9 1644  
            __size_of_printf 015A            __end_of_initDoors 16AE                    _T0CONbits 000FD5  
               ?i1_writeByte 0001              __size_of_strcmp 004E            __end_of_hexpowers 0809  
          i1___lwdiv@divisor 0015                    _T2CONbits 000FCA            i1___lwdiv@counter 0019  
       C_DOOR_SendStates@com 00F2         C_DOOR_SendStates@mes 00F5             ___aldiv@dividend 00D8  
             __pintcode_body 1272         end_of_initialization 14C0                   ??_readByte 0013  
        D_TMR0_Enable@enable 00D8                      int_func 1272               ?_D_UART_Enable 0001  
                 ??_setAlarm 00D8               ?_D_TMR0_Enable 0001         __end_of_D_UART_Write 101E  
                  _RCSTAbits 000FAB                      printf@c 00E9                      printf@f 00DF  
           ___aldiv@quotient 00E2                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00DD                    _PORTCbits 000F82            __end_of_writeByte 1734  
 __size_of_C_DOOR_SendStates 00DC                    _TRISCbits 000F94          __end_of_acknowledge 146E  
                  i1___lwdiv 151E         __end_of_D_PWM_SetPwm 16E8                  _CCP1CONbits 000FBD  
                  _TXSTAbits 000FAC                 i1printf@flag 001F                 i1printf@prec 0025  
         _C_DOOR_ReadSensors 1314               __end_of_LowISR 00D4                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 1752               __end_of_printf 0CDE  
             __end_of_strcmp 15BE          start_initialization 146E               _fillDataBuffer 09EC  
                  i1printf@c 0026                    i1printf@f 001A                   ?i1___lwdiv 0013  
          __size_ofi1_printf 0148         ??_C_DOOR_ReadSensors 00D8              ??_D_UART_Enable 00D8  
              ??_C_DOOR_Init 00D8              ??_D_TMR0_Enable 00D8                     ??_LowISR 0028  
                __pdataBANK0 00FA             __CFG_LPT1OSC$OFF 000000                  _acknowledge 140E  
           D_UART_Write@data 00EC                     ??_printf 00E2                     ??_strcmp 00DC  
     __end_of_fillDataBuffer 0B84                  __pbssCOMRAM 0043         __size_ofi1_writeByte 000C  
              __pcstackBANK0 00D8                ??_D_UART_Init 00EB                ??_D_UART_Read 00DE  
              ??_D_TMR0_Init 00D9                     ?i1_putch 0001                     ?_HighISR 0001  
      __size_of_D_UART_Write 00E0                ??_D_PORT_Init 00D8             ??_C_DOOR_LockAll 00D8  
          __size_of_readByte 0008             ___lwdiv@dividend 00D8          __end_of_C_DOOR_Init 0F3E  
          __size_of_setAlarm 0032                    __pintcode 0008                     ?___aldiv 00D8  
                   ?___lwdiv 00D8                  __pintcodelo 0018           fillDataBuffer@data 0027  
          ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001                  __smallconst 0800  
         ??_C_DOOR_UnlockAll 00D8        __size_of_D_PWM_SetPwm 001C                    _initDoors 168C  
               _D_UART_Write 0F3E                    _hexpowers 0801                    _readReady 00D7  
           ___lwdiv@quotient 00DC                  ??i1___lwdiv 0017               __size_of_putch 000E  
            ___aldiv@divisor 00DC              ___aldiv@counter 00E0                     _IPR1bits 000F9F  
                   _PIE1bits 000F9D          __end_of_D_UART_Init 1272          __end_of_D_UART_Read 161E  
                   _PIR1bits 000F9E          __end_of_D_TMR0_Init 168C                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 16CC                 _D_PWM_SetPwm 16CC  
                 printf@flag 00E2                   printf@prec 00E8                     i1_printf 0CDE  
                 ?_initDoors 0001                    _writeByte 1726                  _INTCON2bits 000FF1  
                  copy_data0 149A                  _C_DOOR_Init 0E26             __size_ofi1_putch 000A  
           __size_of_HighISR 130C                     __Hrparam 0000                     __Lrparam 0000  
           __size_of___aldiv 00CE             __size_of___lwdiv 0054              ___lwdiv@divisor 00DA  
            ___lwdiv@counter 00DE                     __ptext10 1668                     __ptext11 16E8  
                   __ptext20 1718                     __ptext12 16CC                     __ptext21 1726  
                   __ptext13 161E                     __ptext30 1734                     __ptext22 14CA  
                   __ptext14 16AE                     __ptext31 151E                     __ptext23 1314  
                   __ptext15 170A                     __ptext16 101E                     __ptext25 174A  
                   __ptext17 13AE                     __ptext26 09EC                     __ptext18 0F3E  
                   __ptext27 140E                     __ptext19 0B84                     __ptext28 0CDE  
                   __ptext29 1740                   ?_writeByte 0001                     _door_cnt 00D3  
         i1___lwdiv@dividend 0013                  _D_UART_Init 11C8                  _D_UART_Read 15F0  
                   _readData 00CA                  _D_TMR0_Init 1668                     _readByte 174A  
              __size_of_main 01B2           C_DOOR_SendStates@d 00F7                  _D_PORT_Init 16AE  
                   _setAlarm 15BE                     int$flags 0044                    printf@idx 00E5  
                  printf@val 00E6                 ?_acknowledge 0001        __CFG_CPUDIV$OSC1_PLL2 000000  
         i1___lwdiv@quotient 0017                    putch@data 00D9                   _INTCONbits 000FF2  
                ??_initDoors 00DD            _commandAndMessage 13AE                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 009A           ?_commandAndMessage 00D8  
      __end_of_D_UART_Enable 1668        __end_of_D_TMR0_Enable 16FC          ??_commandAndMessage 00E6  
                 _D_PWM_Init 161E                     printf@ap 00E3             ??_fillDataBuffer 0027  
        D_UART_Write@command 00EA                ??i1_writeByte 0013                     strcmp@s1 00D8  
                   strcmp@s2 00DA                writeByte@data 00D8    __end_of_commandAndMessage 140E  
               ___aldiv@sign 00E1                  ??_writeByte 00D8    __size_of_C_DOOR_UnlockAll 000E  
