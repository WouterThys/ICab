

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Apr 01 16:10:35 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    49                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    50                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    51  0000                     
    52                           ; Version 1.44
    53                           ; Generated 14/09/2017 GMT
    54                           ; 
    55                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution.
    69                           ; 
    70                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    71                           ;        software without specific prior written permission.
    72                           ; 
    73                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    74                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    75                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    76                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    77                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    78                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    79                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    80                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    81                           ; 
    82                           ; 
    83                           ; Code-generator required, PIC18F2550 Definitions
    84                           ; 
    85                           ; SFR Addresses
    86  0000                     
    87                           	psect	idataCOMRAM
    88  00197E                     __pidataCOMRAM:
    89                           	opt stack 0
    90                           
    91                           ;initializer for _ackCharacter
    92  00197E  1A                 	db	low STR_4
    93  00197F  08                 	db	high STR_4
    94                           
    95                           ;initializer for _messageCharacter
    96  001980  1E                 	db	low STR_3
    97  001981  08                 	db	high STR_3
    98                           
    99                           ;initializer for _stopCharacter
   100  001982  33                 	db	low STR_2
   101  001983  08                 	db	high STR_2
   102                           
   103                           ;initializer for _startCharacter
   104  001984  35                 	db	low STR_1
   105  001985  08                 	db	high STR_1
   106                           
   107                           	psect	smallconst
   108  000800                     __psmallconst:
   109                           	opt stack 0
   110  000800  00                 	db	0
   111  000801                     _hexpowers:
   112                           	opt stack 0
   113  000801  0001               	dw	1
   114  000803  0010               	dw	16
   115  000805  0100               	dw	256
   116  000807  1000               	dw	4096
   117  000809                     __end_of_hexpowers:
   118                           	opt stack 0
   119  0000                     _PORTBbits	set	3969
   120  0000                     _PORTCbits	set	3970
   121  0000                     _TRISCbits	set	3988
   122  0000                     _PORTC	set	3970
   123  0000                     _TRISC	set	3988
   124  0000                     _TRISA	set	3986
   125  0000                     _TRISB	set	3987
   126  0000                     _PORTA	set	3968
   127  0000                     _PORTB	set	3969
   128  0000                     _TMR1L	set	4046
   129  0000                     _TMR1H	set	4047
   130  0000                     _T1CONbits	set	4045
   131  0000                     _CCP1CONbits	set	4029
   132  0000                     _CCPR1L	set	4030
   133  0000                     _T2CONbits	set	4042
   134  0000                     _PR2	set	4043
   135  0000                     _TXREG	set	4013
   136  0000                     _PIE1bits	set	3997
   137  0000                     _IPR1bits	set	3999
   138  0000                     _PIR1bits	set	3998
   139  0000                     _RCONbits	set	4048
   140  0000                     _SPBRG	set	4015
   141  0000                     _BAUDCONbits	set	4024
   142  0000                     _TXSTAbits	set	4012
   143  0000                     _RCREG	set	4014
   144  0000                     _RCSTAbits	set	4011
   145  0000                     _ADCON1	set	4033
   146  0000                     _T0CONbits	set	4053
   147  0000                     _INTCON2bits	set	4081
   148  0000                     _INTCONbits	set	4082
   149  000809                     STR_17:
   150  000809  30                 	db	48	;'0'
   151  00080A  31                 	db	49	;'1'
   152  00080B  32                 	db	50	;'2'
   153  00080C  33                 	db	51	;'3'
   154  00080D  34                 	db	52	;'4'
   155  00080E  35                 	db	53	;'5'
   156  00080F  36                 	db	54	;'6'
   157  000810  37                 	db	55	;'7'
   158  000811  38                 	db	56	;'8'
   159  000812  39                 	db	57	;'9'
   160  000813  61                 	db	97	;'a'
   161  000814  62                 	db	98	;'b'
   162  000815  63                 	db	99	;'c'
   163  000816  64                 	db	100	;'d'
   164  000817  65                 	db	101	;'e'
   165  000818  66                 	db	102	;'f'
   166  000819  00                 	db	0
   167  00081A                     STR_4:
   168  00081A  5B                 	db	91	;'['
   169  00081B  41                 	db	65	;'A'
   170  00081C  5D                 	db	93	;']'
   171  00081D  00                 	db	0
   172  00081E                     STR_3:
   173  00081E  5B                 	db	91	;'['
   174  00081F  4D                 	db	77	;'M'
   175  000820  5D                 	db	93	;']'
   176  000821  00                 	db	0
   177  000822                     STR_5:
   178  000822  25                 	db	37
   179  000823  78                 	db	120	;'x'
   180  000824  00                 	db	0
   181  000825                     STR_14:
   182  000825  41                 	db	65	;'A'
   183  000826  00                 	db	0
   184  000827                     STR_15:
   185  000827  45                 	db	69	;'E'
   186  000828  00                 	db	0
   187  000829                     STR_11:
   188  000829  49                 	db	73	;'I'
   189  00082A  00                 	db	0
   190  00082B                     STR_9:
   191  00082B  4C                 	db	76	;'L'
   192  00082C  00                 	db	0
   193  00082D                     STR_8:
   194  00082D  50                 	db	80	;'P'
   195  00082E  00                 	db	0
   196  00082F                     STR_12:
   197  00082F  52                 	db	82	;'R'
   198  000830  00                 	db	0
   199  000831                     STR_10:
   200  000831  55                 	db	85	;'U'
   201  000832  00                 	db	0
   202  000833                     STR_2:
   203  000833  24                 	db	36
   204  000834  00                 	db	0
   205  000835                     STR_1:
   206  000835  26                 	db	38
   207  000836  00                 	db	0
   208  000837                     STR_6:
   209  000837  3A                 	db	58	;':'
   210  000838  00                 	db	0
   211  0000                     
   212                           ; #config settings
   213  000839  00                 	db	0	; dummy byte at the end
   214  0000                     
   215                           	psect	cinit
   216  001746                     __pcinit:
   217                           	opt stack 0
   218  001746                     start_initialization:
   219                           	opt stack 0
   220  001746                     __initialization:
   221                           	opt stack 0
   222                           
   223                           ; Initialize objects allocated to COMRAM (8 bytes)
   224                           ; load TBLPTR registers with __pidataCOMRAM
   225  001746  0E7E               	movlw	low __pidataCOMRAM
   226  001748  6EF6               	movwf	tblptrl,c
   227  00174A  0E19               	movlw	high __pidataCOMRAM
   228  00174C  6EF7               	movwf	tblptrh,c
   229  00174E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   230  001750  6EF8               	movwf	tblptru,c
   231  001752  EE00  F042         	lfsr	0,__pdataCOMRAM
   232  001756  EE10 F008          	lfsr	1,8
   233  00175A                     copy_data0:
   234  00175A  0009               	tblrd		*+
   235  00175C  CFF5 FFEE          	movff	tablat,postinc0
   236  001760  50E5               	movf	postdec1,w,c
   237  001762  50E1               	movf	fsr1l,w,c
   238  001764  E1FA               	bnz	copy_data0
   239                           
   240                           ; Clear objects allocated to BANK1 (166 bytes)
   241  001766  EE01  F000         	lfsr	0,__pbssBANK1
   242  00176A  0EA6               	movlw	166
   243  00176C                     clear_0:
   244  00176C  6AEE               	clrf	postinc0,c
   245  00176E  06E8               	decf	wreg,f,c
   246  001770  E1FD               	bnz	clear_0
   247                           
   248                           ; Clear objects allocated to BANK0 (100 bytes)
   249  001772  EE00  F060         	lfsr	0,__pbssBANK0
   250  001776  0E64               	movlw	100
   251  001778                     clear_1:
   252  001778  6AEE               	clrf	postinc0,c
   253  00177A  06E8               	decf	wreg,f,c
   254  00177C  E1FD               	bnz	clear_1
   255                           
   256                           ; Clear objects allocated to COMRAM (26 bytes)
   257  00177E  EE00  F028         	lfsr	0,__pbssCOMRAM
   258  001782  0E1A               	movlw	26
   259  001784                     clear_2:
   260  001784  6AEE               	clrf	postinc0,c
   261  001786  06E8               	decf	wreg,f,c
   262  001788  E1FD               	bnz	clear_2
   263  00178A                     end_of_initialization:
   264                           	opt stack 0
   265  00178A                     __end_of__initialization:
   266                           	opt stack 0
   267  00178A  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   268  00178C  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   269  00178E  0100               	movlb	0
   270  001790  EF1D  F004         	goto	_main	;jump to C main() function
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssCOMRAM
   281  000028                     __pbssCOMRAM:
   282                           	opt stack 0
   283  000028                     _read:
   284                           	opt stack 0
   285  000028                     	ds	6
   286  00002E                     _readData:
   287                           	opt stack 0
   288  00002E                     	ds	6
   289  000034                     _deviceName:
   290                           	opt stack 0
   291  000034                     	ds	3
   292  000037                     _door_cnt:
   293                           	opt stack 0
   294  000037                     	ds	2
   295  000039                     _oldAlarm:
   296                           	opt stack 0
   297  000039                     	ds	1
   298  00003A                     _newAlarm:
   299                           	opt stack 0
   300  00003A                     	ds	1
   301  00003B                     _pwm:
   302                           	opt stack 0
   303  00003B                     	ds	1
   304  00003C                     _lock:
   305                           	opt stack 0
   306  00003C                     	ds	1
   307  00003D                     _tick:
   308                           	opt stack 0
   309  00003D                     	ds	1
   310  00003E                     _communicationCnt:
   311                           	opt stack 0
   312  00003E                     	ds	1
   313  00003F                     _lockDelayCnt:
   314                           	opt stack 0
   315  00003F                     	ds	1
   316  000040                     _readReady:
   317                           	opt stack 0
   318  000040                     	ds	1
   319  000041                     _baud:
   320                           	opt stack 0
   321  000041                     	ds	1
   322                           tblptru	equ	0xFF8
   323                           tblptrh	equ	0xFF7
   324                           tblptrl	equ	0xFF6
   325                           tablat	equ	0xFF5
   326                           postinc0	equ	0xFEE
   327                           wreg	equ	0xFE8
   328                           postdec1	equ	0xFE5
   329                           fsr1l	equ	0xFE1
   330                           
   331                           	psect	dataCOMRAM
   332  000042                     __pdataCOMRAM:
   333                           	opt stack 0
   334  000042                     _ackCharacter:
   335                           	opt stack 0
   336  000042                     	ds	2
   337  000044                     _messageCharacter:
   338                           	opt stack 0
   339  000044                     	ds	2
   340  000046                     _stopCharacter:
   341                           	opt stack 0
   342  000046                     	ds	2
   343  000048                     _startCharacter:
   344                           	opt stack 0
   345  000048                     	ds	2
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	bssBANK0
   356  000060                     __pbssBANK0:
   357                           	opt stack 0
   358  000060                     _doors:
   359                           	opt stack 0
   360  000060                     	ds	100
   361                           tblptru	equ	0xFF8
   362                           tblptrh	equ	0xFF7
   363                           tblptrl	equ	0xFF6
   364                           tablat	equ	0xFF5
   365                           postinc0	equ	0xFEE
   366                           wreg	equ	0xFE8
   367                           postdec1	equ	0xFE5
   368                           fsr1l	equ	0xFE1
   369                           
   370                           	psect	bssBANK1
   371  000100                     __pbssBANK1:
   372                           	opt stack 0
   373  000100                     _readBuffer:
   374                           	opt stack 0
   375  000100                     	ds	166
   376                           tblptru	equ	0xFF8
   377                           tblptrh	equ	0xFF7
   378                           tblptrl	equ	0xFF6
   379                           tablat	equ	0xFF5
   380                           postinc0	equ	0xFEE
   381                           wreg	equ	0xFE8
   382                           postdec1	equ	0xFE5
   383                           fsr1l	equ	0xFE1
   384                           
   385                           	psect	cstackBANK1
   386  0001A6                     __pcstackBANK1:
   387                           	opt stack 0
   388  0001A6                     D_UART_Write@command:
   389                           	opt stack 0
   390                           
   391                           ; 2 bytes @ 0x0
   392  0001A6                     	ds	2
   393  0001A8                     D_UART_Write@data:
   394                           	opt stack 0
   395                           
   396                           ; 2 bytes @ 0x2
   397  0001A8                     	ds	2
   398  0001AA                     ??_D_UART_Write:
   399                           
   400                           ; 1 bytes @ 0x4
   401  0001AA                     	ds	1
   402  0001AB                     ??_C_DOOR_SendStates:
   403                           
   404                           ; 1 bytes @ 0x5
   405  0001AB                     	ds	3
   406  0001AE                     C_DOOR_SendStates@com:
   407                           	opt stack 0
   408                           
   409                           ; 3 bytes @ 0x8
   410  0001AE                     	ds	3
   411  0001B1                     C_DOOR_SendStates@mes:
   412                           	opt stack 0
   413                           
   414                           ; 2 bytes @ 0xB
   415  0001B1                     	ds	2
   416  0001B3                     C_DOOR_SendStates@d:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0xD
   420  0001B3                     	ds	1
   421  0001B4                     ??_main:
   422                           
   423                           ; 1 bytes @ 0xE
   424  0001B4                     	ds	2
   425                           tblptru	equ	0xFF8
   426                           tblptrh	equ	0xFF7
   427                           tblptrl	equ	0xFF6
   428                           tablat	equ	0xFF5
   429                           postinc0	equ	0xFEE
   430                           wreg	equ	0xFE8
   431                           postdec1	equ	0xFE5
   432                           fsr1l	equ	0xFE1
   433                           
   434                           	psect	cstackBANK0
   435  0000C4                     __pcstackBANK0:
   436                           	opt stack 0
   437  0000C4                     ??_LowISR:
   438                           
   439                           ; 1 bytes @ 0x0
   440  0000C4                     	ds	21
   441  0000D9                     ??_C_DOOR_Init:
   442  0000D9                     ??_C_DOOR_LockAll:
   443  0000D9                     ??_C_DOOR_UnlockAll:
   444  0000D9                     ??_C_DOOR_ReadSensors:
   445  0000D9                     ?_strcmp:
   446                           	opt stack 0
   447  0000D9                     ?___lwdiv:
   448                           	opt stack 0
   449  0000D9                     ?___lldiv:
   450                           	opt stack 0
   451  0000D9                     ?_D_UART_Read:
   452                           	opt stack 0
   453  0000D9                     D_UART_Enable@enable:
   454                           	opt stack 0
   455  0000D9                     putch@data:
   456                           	opt stack 0
   457  0000D9                     D_TMR0_Enable@enable:
   458                           	opt stack 0
   459  0000D9                     D_PWM_SetPwm@pwm:
   460                           	opt stack 0
   461  0000D9                     D_TMR1_Enable@enable:
   462                           	opt stack 0
   463  0000D9                     setAlarm@alarm:
   464                           	opt stack 0
   465  0000D9                     ___lwdiv@dividend:
   466                           	opt stack 0
   467  0000D9                     strcmp@s1:
   468                           	opt stack 0
   469  0000D9                     ___lldiv@dividend:
   470                           	opt stack 0
   471  0000D9                     commandAndMessage@door:
   472                           	opt stack 0
   473                           
   474                           ; 10 bytes @ 0x15
   475  0000D9                     	ds	1
   476  0000DA                     putch@max:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x16
   480  0000DA                     	ds	1
   481  0000DB                     ___lwdiv@divisor:
   482                           	opt stack 0
   483  0000DB                     strcmp@s2:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x17
   487  0000DB                     	ds	1
   488  0000DC                     C_DOOR_Init@cnt:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x18
   492  0000DC                     	ds	1
   493  0000DD                     ??_strcmp:
   494  0000DD                     C_DOOR_Init@d:
   495                           	opt stack 0
   496  0000DD                     C_DOOR_ReadSensors@d:
   497                           	opt stack 0
   498  0000DD                     ___lwdiv@counter:
   499                           	opt stack 0
   500  0000DD                     ___lldiv@divisor:
   501                           	opt stack 0
   502                           
   503                           ; 4 bytes @ 0x19
   504  0000DD                     	ds	1
   505  0000DE                     strcmp@r:
   506                           	opt stack 0
   507  0000DE                     ___lwdiv@quotient:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x1A
   511  0000DE                     	ds	1
   512  0000DF                     
   513                           ; 1 bytes @ 0x1B
   514  0000DF                     	ds	1
   515  0000E0                     ?_printf:
   516                           	opt stack 0
   517  0000E0                     printf@f:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x1C
   521  0000E0                     	ds	1
   522  0000E1                     C_DOOR_LockAll@d:
   523                           	opt stack 0
   524  0000E1                     C_DOOR_UnlockAll@d:
   525                           	opt stack 0
   526  0000E1                     ___lldiv@quotient:
   527                           	opt stack 0
   528                           
   529                           ; 4 bytes @ 0x1D
   530  0000E1                     	ds	1
   531  0000E2                     initDoors@door_cnt:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x1E
   535  0000E2                     	ds	1
   536  0000E3                     printf@flag:
   537                           	opt stack 0
   538  0000E3                     commandAndMessage@com:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x1F
   542  0000E3                     	ds	1
   543  0000E4                     printf@idx:
   544                           	opt stack 0
   545                           
   546                           ; 1 bytes @ 0x20
   547  0000E4                     	ds	1
   548  0000E5                     ___lldiv@counter:
   549                           	opt stack 0
   550  0000E5                     commandAndMessage@mes:
   551                           	opt stack 0
   552  0000E5                     printf@ap:
   553                           	opt stack 0
   554                           
   555                           ; 2 bytes @ 0x21
   556  0000E5                     	ds	1
   557  0000E6                     D_UART_Init@name:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x22
   561  0000E6                     	ds	1
   562  0000E7                     printf@val:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x23
   566  0000E7                     	ds	1
   567  0000E8                     D_UART_Init@baud:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x24
   571  0000E8                     	ds	1
   572  0000E9                     printf@prec:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x25
   576  0000E9                     	ds	1
   577  0000EA                     D_UART_Init@interrupts:
   578                           	opt stack 0
   579  0000EA                     printf@c:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x26
   583  0000EA                     	ds	1
   584  0000EB                     tblptru	equ	0xFF8
   585                           tblptrh	equ	0xFF7
   586                           tblptrl	equ	0xFF6
   587                           tablat	equ	0xFF5
   588                           postinc0	equ	0xFEE
   589                           wreg	equ	0xFE8
   590                           postdec1	equ	0xFE5
   591                           fsr1l	equ	0xFE1
   592                           
   593                           ; 1 bytes @ 0x27
   594                           
   595                           	psect	cstackCOMRAM
   596  000001                     __pcstackCOMRAM:
   597                           	opt stack 0
   598  000001                     ?i2___lwdiv:
   599                           	opt stack 0
   600  000001                     i2putch@data:
   601                           	opt stack 0
   602  000001                     i2___lwdiv@dividend:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x0
   606  000001                     	ds	1
   607  000002                     i2putch@max:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x1
   611  000002                     	ds	1
   612  000003                     i2___lwdiv@divisor:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x2
   616  000003                     	ds	2
   617  000005                     i2___lwdiv@counter:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x4
   621  000005                     	ds	1
   622  000006                     i2___lwdiv@quotient:
   623                           	opt stack 0
   624                           
   625                           ; 2 bytes @ 0x5
   626  000006                     	ds	2
   627  000008                     ?i2_printf:
   628                           	opt stack 0
   629  000008                     i2printf@f:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x7
   633  000008                     	ds	5
   634  00000D                     i2printf@flag:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0xC
   638  00000D                     	ds	1
   639  00000E                     i2printf@idx:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0xD
   643  00000E                     	ds	1
   644  00000F                     i2printf@ap:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0xE
   648  00000F                     	ds	2
   649  000011                     i2printf@val:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x10
   653  000011                     	ds	2
   654  000013                     i2printf@prec:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x12
   658  000013                     	ds	1
   659  000014                     i2printf@c:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x13
   663  000014                     	ds	1
   664  000015                     fillDataBuffer@data:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x14
   668  000015                     	ds	1
   669  000016                     ??_HighISR:
   670                           
   671                           ; 1 bytes @ 0x15
   672  000016                     	ds	18
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           postinc0	equ	0xFEE
   678                           wreg	equ	0xFE8
   679                           postdec1	equ	0xFE5
   680                           fsr1l	equ	0xFE1
   681                           
   682 ;;
   683 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   684 ;;
   685 ;; *************** function _main *****************
   686 ;; Defined at:
   687 ;;		line 61 in file "main.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         0       0       0       0       0       0       0       0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0
   703 ;;      Temps:          0       0       2       0       0       0       0       0       0
   704 ;;      Totals:         0       0       2       0       0       0       0       0       0
   705 ;;Total ram usage:        2 bytes
   706 ;; Hardware stack levels required when called:   10
   707 ;; This function calls:
   708 ;;		_C_DOOR_LockAll
   709 ;;		_C_DOOR_ReadSensors
   710 ;;		_C_DOOR_SendStates
   711 ;;		_C_DOOR_UnlockAll
   712 ;;		_D_PORT_Init
   713 ;;		_D_PWM_Init
   714 ;;		_D_PWM_SetPwm
   715 ;;		_D_TMR0_Init
   716 ;;		_D_TMR1_Enable
   717 ;;		_D_TMR1_Init
   718 ;;		_D_UART_Enable
   719 ;;		_D_UART_Init
   720 ;;		_D_UART_Read
   721 ;;		_D_UART_Write
   722 ;;		_initDoors
   723 ;;		_setAlarm
   724 ;;		_strcmp
   725 ;; This function is called by:
   726 ;;		Startup code after reset
   727 ;; This function uses a non-reentrant model
   728 ;;
   729                           
   730                           	psect	text0
   731  00083A                     __ptext0:
   732                           	opt stack 0
   733  00083A                     _main:
   734                           	opt stack 21
   735                           
   736                           ;main.c: 62: _delay((unsigned long)((200)*(16000000/4000.0)));
   737                           
   738                           ;incstack = 0
   739  00083A  0E05               	movlw	5
   740  00083C  0101               	movlb	1	; () banked
   741  00083E  6FB5               	movwf	(??_main+1)& (0+255),b
   742  000840  0E0F               	movlw	15
   743  000842  6FB4               	movwf	??_main& (0+255),b
   744  000844  0EF1               	movlw	241
   745  000846                     u2577:
   746  000846  2EE8               	decfsz	wreg,f,c
   747  000848  D7FE               	bra	u2577
   748  00084A  2FB4               	decfsz	??_main& (0+255),f,b
   749  00084C  D7FC               	bra	u2577
   750  00084E  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   751  000850  D7FA               	bra	u2577
   752                           
   753                           ;main.c: 64: D_PORT_Init();
   754  000852  EC97  F00C         	call	_D_PORT_Init	;wreg free
   755                           
   756                           ;main.c: 68: D_UART_Init("P", 9600, 1);
   757  000856  0E2D               	movlw	low STR_8
   758  000858  0100               	movlb	0	; () banked
   759  00085A  6FE6               	movwf	D_UART_Init@name& (0+255),b
   760  00085C  0E08               	movlw	high STR_8
   761  00085E  6FE7               	movwf	(D_UART_Init@name+1)& (0+255),b
   762  000860  0E25               	movlw	37
   763  000862  6FE9               	movwf	(D_UART_Init@baud+1)& (0+255),b
   764  000864  0E80               	movlw	128
   765  000866  6FE8               	movwf	D_UART_Init@baud& (0+255),b
   766  000868  0E01               	movlw	1
   767  00086A  6FEA               	movwf	D_UART_Init@interrupts& (0+255),b
   768  00086C  ECB0  F00A         	call	_D_UART_Init	;wreg free
   769                           
   770                           ;main.c: 69: D_UART_Enable(1);
   771  000870  0E01               	movlw	1
   772  000872  EC32  F00C         	call	_D_UART_Enable
   773                           
   774                           ;main.c: 72: D_TMR0_Init();
   775  000876  EC44  F00C         	call	_D_TMR0_Init	;wreg free
   776                           
   777                           ;main.c: 73: D_TMR1_Init();
   778  00087A  EC78  F00C         	call	_D_TMR1_Init	;wreg free
   779                           
   780                           ;main.c: 76: D_PWM_Init();
   781  00087E  EC88  F00C         	call	_D_PWM_Init	;wreg free
   782                           
   783                           ;main.c: 78: _delay((unsigned long)((200)*(16000000/4000.0)));
   784  000882  0E05               	movlw	5
   785  000884  0101               	movlb	1	; () banked
   786  000886  6FB5               	movwf	(??_main+1)& (0+255),b
   787  000888  0E0F               	movlw	15
   788  00088A  6FB4               	movwf	??_main& (0+255),b
   789  00088C  0EF1               	movlw	241
   790  00088E                     u2587:
   791  00088E  2EE8               	decfsz	wreg,f,c
   792  000890  D7FE               	bra	u2587
   793  000892  2FB4               	decfsz	??_main& (0+255),f,b
   794  000894  D7FC               	bra	u2587
   795  000896  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   796  000898  D7FA               	bra	u2587
   797                           
   798                           ;main.c: 80: newAlarm = 0;
   799  00089A  0E00               	movlw	0
   800  00089C  6E3A               	movwf	_newAlarm,c
   801                           
   802                           ;main.c: 81: oldAlarm = 0;
   803  00089E  0E00               	movlw	0
   804  0008A0  6E39               	movwf	_oldAlarm,c
   805                           
   806                           ;main.c: 82: lock = 0;
   807  0008A2  0E00               	movlw	0
   808  0008A4  6E3C               	movwf	_lock,c
   809                           
   810                           ;main.c: 83: tick = 0;
   811  0008A6  0E00               	movlw	0
   812  0008A8  6E3D               	movwf	_tick,c
   813                           
   814                           ;main.c: 85: _delay((unsigned long)((200)*(16000000/4000.0)));
   815  0008AA  0E05               	movlw	5
   816  0008AC  0101               	movlb	1	; () banked
   817  0008AE  6FB5               	movwf	(??_main+1)& (0+255),b
   818  0008B0  0E0F               	movlw	15
   819  0008B2  6FB4               	movwf	??_main& (0+255),b
   820  0008B4  0EF1               	movlw	241
   821  0008B6                     u2597:
   822  0008B6  2EE8               	decfsz	wreg,f,c
   823  0008B8  D7FE               	bra	u2597
   824  0008BA  2FB4               	decfsz	??_main& (0+255),f,b
   825  0008BC  D7FC               	bra	u2597
   826  0008BE  2FB5               	decfsz	(??_main+1)& (0+255),f,b
   827  0008C0  D7FA               	bra	u2597
   828  0008C2                     
   829                           ;main.c: 89: if (lock) {
   830  0008C2  503C               	movf	_lock,w,c
   831  0008C4  B4D8               	btfsc	status,2,c
   832  0008C6  D009               	goto	l315
   833                           
   834                           ;main.c: 90: D_TMR1_Enable(0);
   835  0008C8  0E00               	movlw	0
   836  0008CA  ECA6  F00C         	call	_D_TMR1_Enable
   837                           
   838                           ;main.c: 91: lockDelayCnt = 0;
   839  0008CE  0E00               	movlw	0
   840  0008D0  6E3F               	movwf	_lockDelayCnt,c
   841                           
   842                           ;main.c: 92: C_DOOR_LockAll();
   843  0008D2  ECC5  F009         	call	_C_DOOR_LockAll	;wreg free
   844                           
   845                           ;main.c: 93: lock = 0;
   846  0008D6  0E00               	movlw	0
   847  0008D8  6E3C               	movwf	_lock,c
   848  0008DA                     l315:
   849                           
   850                           ;main.c: 94: }
   851                           ;main.c: 97: if (readReady) {
   852  0008DA  5040               	movf	_readReady,w,c
   853  0008DC  B4D8               	btfsc	status,2,c
   854  0008DE  D0B9               	goto	l329
   855                           
   856                           ;main.c: 98: readReady = 0;
   857  0008E0  0E00               	movlw	0
   858  0008E2  6E40               	movwf	_readReady,c
   859                           
   860                           ;main.c: 99: read = D_UART_Read();
   861  0008E4  EC08  F00C         	call	_D_UART_Read	;wreg free
   862  0008E8  EE20  F028         	lfsr	2,_read
   863  0008EC  0E05               	movlw	5
   864  0008EE                     u2401:
   865  0008EE  CFEB FFDB          	movff	plusw0,plusw2
   866  0008F2  06E8               	decf	wreg,f,c
   867  0008F4  E2FC               	bc	u2401
   868                           
   869                           ;main.c: 100: PORTBbits.RB5 = !PORTBbits.RB5;
   870  0008F6  BA81               	btfsc	3969,5,c	;volatile
   871  0008F8  D004               	goto	u2410
   872  0008FA  0101               	movlb	1	; () banked
   873  0008FC  6BB4               	clrf	??_main& (0+255),b
   874  0008FE  2BB4               	incf	??_main& (0+255),f,b
   875  000900  D002               	goto	u2428
   876  000902                     u2410:
   877  000902  0101               	movlb	1	; () banked
   878  000904  6BB4               	clrf	??_main& (0+255),b
   879  000906                     u2428:
   880  000906  3BB4               	swapf	??_main& (0+255),f,b
   881  000908  47B4               	rlncf	??_main& (0+255),f,b
   882  00090A  5081               	movf	3969,w,c	;volatile
   883  00090C  19B4               	xorwf	??_main& (0+255),w,b
   884  00090E  0BDF               	andlw	-33
   885  000910  19B4               	xorwf	??_main& (0+255),w,b
   886  000912  6E81               	movwf	3969,c	;volatile
   887                           
   888                           ; BSR set to: 1
   889                           ;main.c: 103: communicationCnt = 0;
   890  000914  0E00               	movlw	0
   891  000916  6E3E               	movwf	_communicationCnt,c
   892                           
   893                           ; BSR set to: 1
   894                           ;main.c: 104: if (oldAlarm == 3) {
   895  000918  0E03               	movlw	3
   896  00091A  1839               	xorwf	_oldAlarm,w,c
   897  00091C  A4D8               	btfss	status,2,c
   898  00091E  D002               	goto	l317
   899                           
   900                           ; BSR set to: 1
   901                           ;main.c: 105: newAlarm = 0;
   902  000920  0E00               	movlw	0
   903  000922  6E3A               	movwf	_newAlarm,c
   904  000924                     l317:
   905                           
   906                           ; BSR set to: 1
   907                           ;main.c: 106: }
   908                           ;main.c: 109: if (strcmp(read.command, "L") == 0) {
   909                           
   910                           ; BSR set to: 1
   911  000924  C02A  F0D9         	movff	_read+2,strcmp@s1
   912  000928  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   913  00092C  0E2B               	movlw	low STR_9
   914  00092E  0100               	movlb	0	; () banked
   915  000930  6FDB               	movwf	strcmp@s2& (0+255),b
   916  000932  0E08               	movlw	high STR_9
   917  000934  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   918  000936  ECCA  F00B         	call	_strcmp	;wreg free
   919  00093A  0100               	movlb	0	; () banked
   920  00093C  51D9               	movf	?_strcmp& (0+255),w,b
   921  00093E  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   922  000940  A4D8               	btfss	status,2,c
   923  000942  D006               	goto	l318
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 110: lockDelayCnt = 0;
   927  000944  0E00               	movlw	0
   928  000946  6E3F               	movwf	_lockDelayCnt,c
   929                           
   930                           ; BSR set to: 0
   931                           ;main.c: 111: D_TMR1_Enable(1);
   932  000948  0E01               	movlw	1
   933  00094A  ECA6  F00C         	call	_D_TMR1_Enable
   934                           
   935                           ;main.c: 114: } else if (strcmp(read.command, "U") == 0) {
   936  00094E  D081               	goto	l329
   937  000950                     l318:
   938  000950  C02A  F0D9         	movff	_read+2,strcmp@s1
   939  000954  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   940  000958  0E31               	movlw	low STR_10
   941  00095A  0100               	movlb	0	; () banked
   942  00095C  6FDB               	movwf	strcmp@s2& (0+255),b
   943  00095E  0E08               	movlw	high STR_10
   944  000960  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   945  000962  ECCA  F00B         	call	_strcmp	;wreg free
   946  000966  0100               	movlb	0	; () banked
   947  000968  51D9               	movf	?_strcmp& (0+255),w,b
   948  00096A  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   949  00096C  A4D8               	btfss	status,2,c
   950  00096E  D008               	goto	l320
   951                           
   952                           ; BSR set to: 0
   953                           ;main.c: 115: lockDelayCnt = 0;
   954  000970  0E00               	movlw	0
   955  000972  6E3F               	movwf	_lockDelayCnt,c
   956                           
   957                           ; BSR set to: 0
   958                           ;main.c: 116: D_TMR1_Enable(0);
   959  000974  0E00               	movlw	0
   960  000976  ECA6  F00C         	call	_D_TMR1_Enable
   961                           
   962                           ;main.c: 117: C_DOOR_UnlockAll();
   963  00097A  EC6B  F009         	call	_C_DOOR_UnlockAll	;wreg free
   964                           
   965                           ;main.c: 120: } else if (strcmp(read.command, "I") == 0) {
   966  00097E  D069               	goto	l329
   967  000980                     l320:
   968  000980  C02A  F0D9         	movff	_read+2,strcmp@s1
   969  000984  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   970  000988  0E29               	movlw	low STR_11
   971  00098A  0100               	movlb	0	; () banked
   972  00098C  6FDB               	movwf	strcmp@s2& (0+255),b
   973  00098E  0E08               	movlw	high STR_11
   974  000990  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
   975  000992  ECCA  F00B         	call	_strcmp	;wreg free
   976  000996  0100               	movlb	0	; () banked
   977  000998  51D9               	movf	?_strcmp& (0+255),w,b
   978  00099A  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
   979  00099C  A4D8               	btfss	status,2,c
   980  00099E  D009               	goto	l322
   981                           
   982                           ; BSR set to: 0
   983                           ;main.c: 121: initDoors((uint8_t)(*read.message - 0x30));
   984  0009A0  C02C  FFD9         	movff	_read+4,fsr2l
   985  0009A4  C02D  FFDA         	movff	_read+5,fsr2h
   986  0009A8  50DF               	movf	indf2,w,c
   987  0009AA  0FD0               	addlw	208
   988  0009AC  EC56  F00C         	call	_initDoors
   989                           
   990                           ;main.c: 124: } else if (strcmp(read.command, "R") == 0) {
   991  0009B0  D050               	goto	l329
   992  0009B2                     l322:
   993  0009B2  C02A  F0D9         	movff	_read+2,strcmp@s1
   994  0009B6  C02B  F0DA         	movff	_read+3,strcmp@s1+1
   995  0009BA  0E2F               	movlw	low STR_12
   996  0009BC  0100               	movlb	0	; () banked
   997  0009BE  6FDB               	movwf	strcmp@s2& (0+255),b
   998  0009C0  0E08               	movlw	high STR_12
   999  0009C2  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1000  0009C4  ECCA  F00B         	call	_strcmp	;wreg free
  1001  0009C8  0100               	movlb	0	; () banked
  1002  0009CA  51D9               	movf	?_strcmp& (0+255),w,b
  1003  0009CC  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1004  0009CE  A4D8               	btfss	status,2,c
  1005  0009D0  D00D               	goto	l324
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;main.c: 125: C_DOOR_UnlockAll();
  1009  0009D2  EC6B  F009         	call	_C_DOOR_UnlockAll	;wreg free
  1010                           
  1011                           ;main.c: 126: _delay((unsigned long)((20)*(16000000/4000.0)));
  1012  0009D6  0E68               	movlw	104
  1013  0009D8  0101               	movlb	1	; () banked
  1014  0009DA  6FB4               	movwf	??_main& (0+255),b
  1015  0009DC  0EE4               	movlw	228
  1016  0009DE                     u2607:
  1017  0009DE  2EE8               	decfsz	wreg,f,c
  1018  0009E0  D7FE               	bra	u2607
  1019  0009E2  2FB4               	decfsz	??_main& (0+255),f,b
  1020  0009E4  D7FC               	bra	u2607
  1021  0009E6  F000               	nop	
  1022  0009E8  00FF               	reset		;# 
  1023                           
  1024                           ;main.c: 130: } else if (strcmp(read.command, "P") == 0) {
  1025  0009EA  D033               	goto	l329
  1026  0009EC                     l324:
  1027  0009EC  C02A  F0D9         	movff	_read+2,strcmp@s1
  1028  0009F0  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1029  0009F4  0E2D               	movlw	low STR_8
  1030  0009F6  0100               	movlb	0	; () banked
  1031  0009F8  6FDB               	movwf	strcmp@s2& (0+255),b
  1032  0009FA  0E08               	movlw	high STR_8
  1033  0009FC  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1034  0009FE  ECCA  F00B         	call	_strcmp	;wreg free
  1035  000A02  0100               	movlb	0	; () banked
  1036  000A04  51D9               	movf	?_strcmp& (0+255),w,b
  1037  000A06  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1038  000A08  B4D8               	btfsc	status,2,c
  1039  000A0A  D023               	goto	l329
  1040                           
  1041                           ; BSR set to: 0
  1042                           
  1043                           ; BSR set to: 0
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;main.c: 134: } else if (strcmp(read.command, "A") == 0) {
  1047  000A0C  C02A  F0D9         	movff	_read+2,strcmp@s1
  1048  000A10  C02B  F0DA         	movff	_read+3,strcmp@s1+1
  1049  000A14  0E25               	movlw	low STR_14
  1050  000A16  6FDB               	movwf	strcmp@s2& (0+255),b
  1051  000A18  0E08               	movlw	high STR_14
  1052  000A1A  6FDC               	movwf	(strcmp@s2+1)& (0+255),b
  1053  000A1C  ECCA  F00B         	call	_strcmp	;wreg free
  1054  000A20  0100               	movlb	0	; () banked
  1055  000A22  51D9               	movf	?_strcmp& (0+255),w,b
  1056  000A24  11DA               	iorwf	(?_strcmp+1)& (0+255),w,b
  1057  000A26  A4D8               	btfss	status,2,c
  1058  000A28  D009               	goto	l328
  1059                           
  1060                           ; BSR set to: 0
  1061                           ;main.c: 135: setAlarm((uint8_t)(*read.message - 0x30));
  1062  000A2A  C02C  FFD9         	movff	_read+4,fsr2l
  1063  000A2E  C02D  FFDA         	movff	_read+5,fsr2h
  1064  000A32  50DF               	movf	indf2,w,c
  1065  000A34  0FD0               	addlw	208
  1066  000A36  ECBA  F00C         	call	_setAlarm
  1067                           
  1068                           ;main.c: 137: } else {
  1069  000A3A  D00B               	goto	l329
  1070  000A3C                     l328:
  1071                           
  1072                           ;main.c: 138: D_UART_Write("E", "U");
  1073  000A3C  0E27               	movlw	low STR_15
  1074  000A3E  0101               	movlb	1	; () banked
  1075  000A40  6FA6               	movwf	D_UART_Write@command& (0+255),b
  1076  000A42  0E08               	movlw	high STR_15
  1077  000A44  6FA7               	movwf	(D_UART_Write@command+1)& (0+255),b
  1078  000A46  0E31               	movlw	low STR_10
  1079  000A48  6FA8               	movwf	D_UART_Write@data& (0+255),b
  1080  000A4A  0E08               	movlw	high STR_10
  1081  000A4C  6FA9               	movwf	(D_UART_Write@data+1)& (0+255),b
  1082  000A4E  EC2D  F008         	call	_D_UART_Write	;wreg free
  1083  000A52                     l329:
  1084                           
  1085                           ;main.c: 140: }
  1086                           ;main.c: 141: }
  1087                           ;main.c: 144: if (tick) {
  1088  000A52  503D               	movf	_tick,w,c
  1089  000A54  B4D8               	btfsc	status,2,c
  1090  000A56  D735               	goto	l314
  1091                           
  1092                           ;main.c: 145: tick = 0;
  1093  000A58  0E00               	movlw	0
  1094  000A5A  6E3D               	movwf	_tick,c
  1095                           
  1096                           ;main.c: 148: C_DOOR_ReadSensors();
  1097  000A5C  EC1E  F00A         	call	_C_DOOR_ReadSensors	;wreg free
  1098                           
  1099                           ;main.c: 151: C_DOOR_SendStates();
  1100  000A60  ECA1  F008         	call	_C_DOOR_SendStates	;wreg free
  1101                           
  1102                           ;main.c: 154: if (communicationCnt < 60) {
  1103  000A64  0E3C               	movlw	60
  1104  000A66  603E               	cpfslt	_communicationCnt,c
  1105  000A68  D002               	goto	l331
  1106                           
  1107                           ;main.c: 155: communicationCnt++;
  1108  000A6A  2A3E               	incf	_communicationCnt,f,c
  1109                           
  1110                           ;main.c: 156: } else {
  1111  000A6C  D005               	goto	l333
  1112  000A6E                     l331:
  1113                           
  1114                           ;main.c: 157: if (oldAlarm == 0) {
  1115  000A6E  5039               	movf	_oldAlarm,w,c
  1116  000A70  A4D8               	btfss	status,2,c
  1117  000A72  D002               	goto	l333
  1118                           
  1119                           ;main.c: 158: newAlarm = 3;
  1120  000A74  0E03               	movlw	3
  1121  000A76  6E3A               	movwf	_newAlarm,c
  1122  000A78                     l333:
  1123                           
  1124                           ;main.c: 159: }
  1125                           ;main.c: 160: }
  1126                           ;main.c: 163: if (newAlarm != oldAlarm || newAlarm == 1 || newAlarm == 3) {
  1127  000A78  5039               	movf	_oldAlarm,w,c
  1128  000A7A  183A               	xorwf	_newAlarm,w,c
  1129  000A7C  A4D8               	btfss	status,2,c
  1130  000A7E  D017               	goto	l337
  1131  000A80  043A               	decf	_newAlarm,w,c
  1132  000A82  B4D8               	btfsc	status,2,c
  1133  000A84  D014               	goto	l337
  1134  000A86  0E03               	movlw	3
  1135  000A88  183A               	xorwf	_newAlarm,w,c
  1136  000A8A  B4D8               	btfsc	status,2,c
  1137  000A8C  D010               	goto	l337
  1138  000A8E  D719               	goto	l314
  1139  000A90                     
  1140                           ;main.c: 167: pwm = 0x00;
  1141                           
  1142                           ;main.c: 166: case 0:
  1143  000A90  0E00               	movlw	0
  1144  000A92  D00B               	goto	L1
  1145  000A94                     
  1146                           ;main.c: 171: case 1:
  1147                           ;main.c: 172: if (pwm == 0) {
  1148  000A94  503B               	movf	_pwm,w,c
  1149  000A96  A4D8               	btfss	status,2,c
  1150  000A98  D002               	goto	l343
  1151                           
  1152                           ;main.c: 173: pwm = 1;
  1153  000A9A  0E01               	movlw	1
  1154  000A9C  6E3B               	movwf	_pwm,c
  1155  000A9E                     l343:
  1156                           
  1157                           ;main.c: 174: }
  1158                           ;main.c: 175: pwm = (uint8_t)(pwm * 0x02);
  1159  000A9E  503B               	movf	_pwm,w,c
  1160  000AA0  0D02               	mullw	2
  1161  000AA2  CFF3 F03B          	movff	prodl,_pwm
  1162                           
  1163                           ;main.c: 176: break;
  1164  000AA6  D011               	goto	l340
  1165  000AA8                     
  1166                           ;main.c: 179: pwm = 0x7F;
  1167  000AA8  0E7F               	movlw	127
  1168  000AAA                     L1:
  1169  000AAA  6E3B               	movwf	_pwm,c
  1170                           
  1171                           ;main.c: 181: }
  1172                           
  1173                           ;main.c: 180: break;
  1174  000AAC  D00E               	goto	l340
  1175  000AAE                     l337:
  1176  000AAE  503A               	movf	_newAlarm,w,c
  1177                           
  1178                           ; Switch size 1, requested type "space"
  1179                           ; Number of cases is 4, Range of values is 0 to 3
  1180                           ; switch strategies available:
  1181                           ; Name         Instructions Cycles
  1182                           ; simple_byte           13     7 (average)
  1183                           ;	Chosen strategy is simple_byte
  1184  000AB0  0A00               	xorlw	0	; case 0
  1185  000AB2  B4D8               	btfsc	status,2,c
  1186  000AB4  D7ED               	goto	l338
  1187  000AB6  0A01               	xorlw	1	; case 1
  1188  000AB8  B4D8               	btfsc	status,2,c
  1189  000ABA  D7EC               	goto	l341
  1190  000ABC  0A03               	xorlw	3	; case 2
  1191  000ABE  B4D8               	btfsc	status,2,c
  1192  000AC0  D7F3               	goto	l344
  1193  000AC2  0A01               	xorlw	1	; case 3
  1194  000AC4  B4D8               	btfsc	status,2,c
  1195  000AC6  D7E6               	goto	l341
  1196  000AC8  D7E3               	goto	l338
  1197  000ACA                     l340:
  1198                           
  1199                           ;main.c: 182: D_PWM_SetPwm(pwm);
  1200  000ACA  503B               	movf	_pwm,w,c
  1201  000ACC  ECF1  F00B         	call	_D_PWM_SetPwm
  1202                           
  1203                           ;main.c: 183: oldAlarm = newAlarm;
  1204  000AD0  C03A  F039         	movff	_newAlarm,_oldAlarm
  1205  000AD4  D6F6               	goto	l314
  1206  000AD6                     __end_of_main:
  1207                           	opt stack 0
  1208                           tblptru	equ	0xFF8
  1209                           tblptrh	equ	0xFF7
  1210                           tblptrl	equ	0xFF6
  1211                           tablat	equ	0xFF5
  1212                           prodl	equ	0xFF3
  1213                           postinc0	equ	0xFEE
  1214                           plusw0	equ	0xFEB
  1215                           wreg	equ	0xFE8
  1216                           postdec1	equ	0xFE5
  1217                           fsr1l	equ	0xFE1
  1218                           indf2	equ	0xFDF
  1219                           plusw2	equ	0xFDB
  1220                           fsr2h	equ	0xFDA
  1221                           fsr2l	equ	0xFD9
  1222                           status	equ	0xFD8
  1223                           
  1224 ;; *************** function _strcmp *****************
  1225 ;; Defined at:
  1226 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\strcmp.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  s1              2   21[BANK0 ] PTR const unsigned char 
  1229 ;;		 -> readBuffer(166), 
  1230 ;;  s2              2   23[BANK0 ] PTR const unsigned char 
  1231 ;;		 -> STR_14(2), STR_13(2), STR_12(2), STR_11(2), 
  1232 ;;		 -> STR_10(2), STR_9(2), 
  1233 ;; Auto vars:     Size  Location     Type
  1234 ;;  r               1   26[BANK0 ] char 
  1235 ;; Return value:  Size  Location     Type
  1236 ;;                  2   21[BANK0 ] int 
  1237 ;; Registers used:
  1238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1239 ;; Tracked objects:
  1240 ;;		On entry : 0/0
  1241 ;;		On exit  : 0/0
  1242 ;;		Unchanged: 0/0
  1243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1244 ;;      Params:         0       4       0       0       0       0       0       0       0
  1245 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1246 ;;      Temps:          0       1       0       0       0       0       0       0       0
  1247 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1248 ;;Total ram usage:        6 bytes
  1249 ;; Hardware stack levels used:    1
  1250 ;; Hardware stack levels required when called:    6
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           	psect	text1
  1259  001794                     __ptext1:
  1260                           	opt stack 0
  1261  001794                     _strcmp:
  1262                           	opt stack 24
  1263                           
  1264                           ;incstack = 0
  1265  001794  D005               	goto	l931
  1266  001796  0100               	movlb	0	; () banked
  1267  001798  4BD9               	infsnz	strcmp@s1& (0+255),f,b
  1268  00179A  2BDA               	incf	(strcmp@s1+1)& (0+255),f,b
  1269  00179C  4BDB               	infsnz	strcmp@s2& (0+255),f,b
  1270  00179E  2BDC               	incf	(strcmp@s2+1)& (0+255),f,b
  1271  0017A0                     l931:
  1272                           
  1273                           ; BSR set to: 0
  1274  0017A0  C0D9  FFD9         	movff	strcmp@s1,fsr2l
  1275  0017A4  C0DA  FFDA         	movff	strcmp@s1+1,fsr2h
  1276  0017A8  50DF               	movf	indf2,w,c
  1277  0017AA  0100               	movlb	0	; () banked
  1278  0017AC  6FDD               	movwf	??_strcmp& (0+255),b
  1279  0017AE  C0DB  FFF6         	movff	strcmp@s2,tblptrl
  1280  0017B2  C0DC  FFF7         	movff	strcmp@s2+1,tblptrh
  1281  0017B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1282  0017B6  6AF8               	clrf	tblptru,c
  1283  0017B8                     	endif
  1284  0017B8                     	if	0	;tblptru may be non-zero
  1285  0017B8                     	endif
  1286  0017B8  0008               	tblrd		*
  1287  0017BA  50F5               	movf	tablat,w,c
  1288  0017BC  0800               	sublw	0
  1289  0017BE  25DD               	addwf	??_strcmp& (0+255),w,b
  1290  0017C0  6FDE               	movwf	strcmp@r& (0+255),b
  1291  0017C2  51DE               	movf	strcmp@r& (0+255),w,b
  1292  0017C4  A4D8               	btfss	status,2,c
  1293  0017C6  D007               	goto	u2340
  1294                           
  1295                           ; BSR set to: 0
  1296  0017C8  C0D9  FFD9         	movff	strcmp@s1,fsr2l
  1297  0017CC  C0DA  FFDA         	movff	strcmp@s1+1,fsr2h
  1298  0017D0  50DF               	movf	indf2,w,c
  1299  0017D2  A4D8               	btfss	status,2,c
  1300  0017D4  D7E0               	goto	l932
  1301  0017D6                     u2340:
  1302                           
  1303                           ; BSR set to: 0
  1304                           
  1305                           ; BSR set to: 0
  1306                           
  1307                           ; BSR set to: 0
  1308  0017D6  51DE               	movf	strcmp@r& (0+255),w,b
  1309  0017D8  6FD9               	movwf	?_strcmp& (0+255),b
  1310  0017DA  6BDA               	clrf	(?_strcmp+1)& (0+255),b
  1311  0017DC  BFD9               	btfsc	?_strcmp& (0+255),7,b
  1312  0017DE  07DA               	decf	(?_strcmp+1)& (0+255),f,b
  1313  0017E0  0012               	return	
  1314  0017E2                     __end_of_strcmp:
  1315                           	opt stack 0
  1316                           tblptru	equ	0xFF8
  1317                           tblptrh	equ	0xFF7
  1318                           tblptrl	equ	0xFF6
  1319                           tablat	equ	0xFF5
  1320                           prodl	equ	0xFF3
  1321                           postinc0	equ	0xFEE
  1322                           plusw0	equ	0xFEB
  1323                           wreg	equ	0xFE8
  1324                           postdec1	equ	0xFE5
  1325                           fsr1l	equ	0xFE1
  1326                           indf2	equ	0xFDF
  1327                           plusw2	equ	0xFDB
  1328                           fsr2h	equ	0xFDA
  1329                           fsr2l	equ	0xFD9
  1330                           status	equ	0xFD8
  1331                           
  1332 ;; *************** function _setAlarm *****************
  1333 ;; Defined at:
  1334 ;;		line 57 in file "main.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;  alarm           1    wreg     unsigned char 
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  alarm           1   21[BANK0 ] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  1    wreg      void 
  1341 ;; Registers used:
  1342 ;;		wreg
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1348 ;;      Params:         0       0       0       0       0       0       0       0       0
  1349 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1350 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1351 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1352 ;;Total ram usage:        1 bytes
  1353 ;; Hardware stack levels used:    1
  1354 ;; Hardware stack levels required when called:    6
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text2
  1363  001974                     __ptext2:
  1364                           	opt stack 0
  1365  001974                     _setAlarm:
  1366                           	opt stack 24
  1367                           
  1368                           ; BSR set to: 0
  1369                           ;incstack = 0
  1370                           ;setAlarm@alarm stored from wreg
  1371  001974  0100               	movlb	0	; () banked
  1372  001976  6FD9               	movwf	setAlarm@alarm& (0+255),b
  1373                           
  1374                           ;main.c: 58: newAlarm = alarm;
  1375  001978  C0D9  F03A         	movff	setAlarm@alarm,_newAlarm
  1376  00197C  0012               	return		;funcret
  1377  00197E                     __end_of_setAlarm:
  1378                           	opt stack 0
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           prodl	equ	0xFF3
  1384                           postinc0	equ	0xFEE
  1385                           plusw0	equ	0xFEB
  1386                           wreg	equ	0xFE8
  1387                           postdec1	equ	0xFE5
  1388                           fsr1l	equ	0xFE1
  1389                           indf2	equ	0xFDF
  1390                           plusw2	equ	0xFDB
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _initDoors *****************
  1396 ;; Defined at:
  1397 ;;		line 45 in file "main.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  door_cnt        1    wreg     unsigned char 
  1400 ;; Auto vars:     Size  Location     Type
  1401 ;;  door_cnt        1   30[BANK0 ] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      void 
  1404 ;; Registers used:
  1405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1411 ;;      Params:         0       0       0       0       0       0       0       0       0
  1412 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1414 ;;      Totals:         0       1       0       0       0       0       0       0       0
  1415 ;;Total ram usage:        1 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:    7
  1418 ;; This function calls:
  1419 ;;		_C_DOOR_Init
  1420 ;;		_C_DOOR_LockAll
  1421 ;;		_D_TMR0_Enable
  1422 ;; This function is called by:
  1423 ;;		_main
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text3
  1428  0018AC                     __ptext3:
  1429                           	opt stack 0
  1430  0018AC                     _initDoors:
  1431                           	opt stack 23
  1432                           
  1433                           ;incstack = 0
  1434                           ;initDoors@door_cnt stored from wreg
  1435  0018AC  0100               	movlb	0	; () banked
  1436  0018AE  6FE2               	movwf	initDoors@door_cnt& (0+255),b
  1437                           
  1438                           ;main.c: 46: if (door_cnt < 1) {
  1439  0018B0  0100               	movlb	0	; () banked
  1440  0018B2  51E2               	movf	initDoors@door_cnt& (0+255),w,b
  1441  0018B4  A4D8               	btfss	status,2,c
  1442  0018B6  D002               	goto	l305
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 47: door_cnt = 1;
  1446  0018B8  0E01               	movlw	1
  1447  0018BA  6FE2               	movwf	initDoors@door_cnt& (0+255),b
  1448  0018BC                     l305:
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;main.c: 48: }
  1452                           ;main.c: 50: C_DOOR_Init(door_cnt);
  1453                           
  1454                           ; BSR set to: 0
  1455  0018BC  51E2               	movf	initDoors@door_cnt& (0+255),w,b
  1456  0018BE  ECE0  F006         	call	_C_DOOR_Init
  1457                           
  1458                           ;main.c: 51: C_DOOR_LockAll();
  1459  0018C2  ECC5  F009         	call	_C_DOOR_LockAll	;wreg free
  1460                           
  1461                           ;main.c: 54: D_TMR0_Enable(1);
  1462  0018C6  0E01               	movlw	1
  1463  0018C8  ECB0  F00C         	call	_D_TMR0_Enable
  1464  0018CC  0012               	return		;funcret
  1465  0018CE                     __end_of_initDoors:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           prodl	equ	0xFF3
  1472                           postinc0	equ	0xFEE
  1473                           plusw0	equ	0xFEB
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1l	equ	0xFE1
  1477                           indf2	equ	0xFDF
  1478                           plusw2	equ	0xFDB
  1479                           fsr2h	equ	0xFDA
  1480                           fsr2l	equ	0xFD9
  1481                           status	equ	0xFD8
  1482                           
  1483 ;; *************** function _C_DOOR_LockAll *****************
  1484 ;; Defined at:
  1485 ;;		line 79 in file "Controllers/DOOR_Controller.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;		None
  1488 ;; Auto vars:     Size  Location     Type
  1489 ;;  d               1   29[BANK0 ] unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  1    wreg      void 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1499 ;;      Params:         0       0       0       0       0       0       0       0       0
  1500 ;;      Locals:         0       1       0       0       0       0       0       0       0
  1501 ;;      Temps:          0       8       0       0       0       0       0       0       0
  1502 ;;      Totals:         0       9       0       0       0       0       0       0       0
  1503 ;;Total ram usage:        9 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    6
  1506 ;; This function calls:
  1507 ;;		Nothing
  1508 ;; This function is called by:
  1509 ;;		_initDoors
  1510 ;;		_main
  1511 ;; This function uses a non-reentrant model
  1512 ;;
  1513                           
  1514                           	psect	text4
  1515  00138A                     __ptext4:
  1516                           	opt stack 0
  1517  00138A                     _C_DOOR_LockAll:
  1518                           	opt stack 23
  1519                           
  1520                           ;DOOR_Controller.c: 80: uint8_t d;
  1521                           ;DOOR_Controller.c: 81: for (d = 0; d < door_cnt; d++) {
  1522                           
  1523                           ;incstack = 0
  1524  00138A  0E00               	movlw	0
  1525  00138C  0100               	movlb	0	; () banked
  1526  00138E  6FE1               	movwf	C_DOOR_LockAll@d& (0+255),b
  1527  001390  D047               	goto	l28
  1528  001392                     
  1529                           ; BSR set to: 0
  1530                           ;DOOR_Controller.c: 82: *doors[d].lock_port ^= (uint8_t)((-0 ^ *doors[d].lock_port) & (1
      +                           << doors[d].lock_pin));
  1531                           
  1532                           ; BSR set to: 0
  1533  001392  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1534  001394  0D0A               	mullw	10
  1535  001396  0E02               	movlw	2
  1536  001398  26F3               	addwf	prodl,f,c
  1537  00139A  0E00               	movlw	0
  1538  00139C  22F4               	addwfc	prodh,f,c
  1539  00139E  0E60               	movlw	low _doors
  1540  0013A0  24F3               	addwf	prodl,w,c
  1541  0013A2  6ED9               	movwf	fsr2l,c
  1542  0013A4  0E00               	movlw	high _doors
  1543  0013A6  20F4               	addwfc	prodh,w,c
  1544  0013A8  6EDA               	movwf	fsr2h,c
  1545  0013AA  CFDE F0D9          	movff	postinc2,??_C_DOOR_LockAll
  1546  0013AE  CFDD F0DA          	movff	postdec2,??_C_DOOR_LockAll+1
  1547  0013B2  C0D9  FFD9         	movff	??_C_DOOR_LockAll,fsr2l
  1548  0013B6  C0DA  FFDA         	movff	??_C_DOOR_LockAll+1,fsr2h
  1549  0013BA  50DF               	movf	indf2,w,c
  1550  0013BC  6FDB               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1551  0013BE  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1552  0013C0  0D0A               	mullw	10
  1553  0013C2  0E04               	movlw	4
  1554  0013C4  26F3               	addwf	prodl,f,c
  1555  0013C6  0E00               	movlw	0
  1556  0013C8  22F4               	addwfc	prodh,f,c
  1557  0013CA  0E60               	movlw	low _doors
  1558  0013CC  24F3               	addwf	prodl,w,c
  1559  0013CE  6ED9               	movwf	fsr2l,c
  1560  0013D0  0E00               	movlw	high _doors
  1561  0013D2  20F4               	addwfc	prodh,w,c
  1562  0013D4  6EDA               	movwf	fsr2h,c
  1563  0013D6  50DF               	movf	indf2,w,c
  1564  0013D8  6FDC               	movwf	(??_C_DOOR_LockAll+3)& (0+255),b
  1565  0013DA  0E01               	movlw	1
  1566  0013DC  6FDD               	movwf	(??_C_DOOR_LockAll+4)& (0+255),b
  1567  0013DE  2BDC               	incf	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1568  0013E0  D002               	goto	u1984
  1569  0013E2                     u1985:
  1570  0013E2  90D8               	bcf	status,0,c
  1571  0013E4  37DD               	rlcf	(??_C_DOOR_LockAll+4)& (0+255),f,b
  1572  0013E6                     u1984:
  1573  0013E6  2FDC               	decfsz	(??_C_DOOR_LockAll+3)& (0+255),f,b
  1574  0013E8  D7FC               	goto	u1985
  1575  0013EA  0100               	movlb	0	; () banked
  1576  0013EC  51DD               	movf	(??_C_DOOR_LockAll+4)& (0+255),w,b
  1577  0013EE  15DB               	andwf	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1578  0013F0  6FDE               	movwf	(??_C_DOOR_LockAll+5)& (0+255),b
  1579  0013F2  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1580  0013F4  0D0A               	mullw	10
  1581  0013F6  0E02               	movlw	2
  1582  0013F8  26F3               	addwf	prodl,f,c
  1583  0013FA  0E00               	movlw	0
  1584  0013FC  22F4               	addwfc	prodh,f,c
  1585  0013FE  0E60               	movlw	low _doors
  1586  001400  24F3               	addwf	prodl,w,c
  1587  001402  6ED9               	movwf	fsr2l,c
  1588  001404  0E00               	movlw	high _doors
  1589  001406  20F4               	addwfc	prodh,w,c
  1590  001408  6EDA               	movwf	fsr2h,c
  1591  00140A  CFDE F0DF          	movff	postinc2,??_C_DOOR_LockAll+6
  1592  00140E  CFDD F0E0          	movff	postdec2,??_C_DOOR_LockAll+7
  1593  001412  C0DF  FFD9         	movff	??_C_DOOR_LockAll+6,fsr2l
  1594  001416  C0E0  FFDA         	movff	??_C_DOOR_LockAll+7,fsr2h
  1595  00141A  51DE               	movf	(??_C_DOOR_LockAll+5)& (0+255),w,b
  1596  00141C  1ADF               	xorwf	indf2,f,c
  1597                           
  1598                           ; BSR set to: 0
  1599  00141E  2BE1               	incf	C_DOOR_LockAll@d& (0+255),f,b
  1600  001420                     l28:
  1601                           
  1602                           ; BSR set to: 0
  1603                           
  1604                           ; BSR set to: 0
  1605  001420  51E1               	movf	C_DOOR_LockAll@d& (0+255),w,b
  1606  001422  6FD9               	movwf	??_C_DOOR_LockAll& (0+255),b
  1607  001424  6BDA               	clrf	(??_C_DOOR_LockAll+1)& (0+255),b
  1608  001426  5037               	movf	_door_cnt,w,c
  1609  001428  5DD9               	subwf	??_C_DOOR_LockAll& (0+255),w,b
  1610  00142A  51DA               	movf	(??_C_DOOR_LockAll+1)& (0+255),w,b
  1611  00142C  0A80               	xorlw	128
  1612  00142E  6FDB               	movwf	(??_C_DOOR_LockAll+2)& (0+255),b
  1613  001430  5038               	movf	_door_cnt+1,w,c
  1614  001432  0A80               	xorlw	128
  1615  001434  59DB               	subwfb	(??_C_DOOR_LockAll+2)& (0+255),w,b
  1616  001436  B0D8               	btfsc	status,0,c
  1617  001438  0012               	return	
  1618  00143A  D7AB               	goto	l29
  1619  00143C                     __end_of_C_DOOR_LockAll:
  1620                           	opt stack 0
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           prodh	equ	0xFF4
  1626                           prodl	equ	0xFF3
  1627                           postinc0	equ	0xFEE
  1628                           plusw0	equ	0xFEB
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1l	equ	0xFE1
  1632                           indf2	equ	0xFDF
  1633                           postinc2	equ	0xFDE
  1634                           postdec2	equ	0xFDD
  1635                           plusw2	equ	0xFDB
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _C_DOOR_Init *****************
  1641 ;; Defined at:
  1642 ;;		line 49 in file "Controllers/DOOR_Controller.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  cnt             1    wreg     unsigned char 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  cnt             1   24[BANK0 ] unsigned char 
  1647 ;;  d               1   25[BANK0 ] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0
  1658 ;;      Locals:         0       2       0       0       0       0       0       0       0
  1659 ;;      Temps:          0       3       0       0       0       0       0       0       0
  1660 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1661 ;;Total ram usage:        5 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    6
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_initDoors
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text5
  1672  000DC0                     __ptext5:
  1673                           	opt stack 0
  1674  000DC0                     _C_DOOR_Init:
  1675                           	opt stack 23
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;incstack = 0
  1679                           ;C_DOOR_Init@cnt stored from wreg
  1680  000DC0  0100               	movlb	0	; () banked
  1681  000DC2  6FDC               	movwf	C_DOOR_Init@cnt& (0+255),b
  1682                           
  1683                           ;DOOR_Controller.c: 51: door_cnt = cnt;
  1684  000DC4  C0DC  F037         	movff	C_DOOR_Init@cnt,_door_cnt
  1685  000DC8  6A38               	clrf	_door_cnt+1,c
  1686                           
  1687                           ;DOOR_Controller.c: 52: uint8_t d;
  1688                           ;DOOR_Controller.c: 53: for (d = 0; d < door_cnt; d++) {
  1689  000DCA  0E00               	movlw	0
  1690  000DCC  0100               	movlb	0	; () banked
  1691  000DCE  6FDD               	movwf	C_DOOR_Init@d& (0+255),b
  1692  000DD0  D092               	goto	l22
  1693  000DD2                     
  1694                           ; BSR set to: 0
  1695                           ;DOOR_Controller.c: 54: doors[d].id = d;
  1696                           
  1697                           ; BSR set to: 0
  1698  000DD2  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1699  000DD4  0D0A               	mullw	10
  1700  000DD6  0E60               	movlw	low _doors
  1701  000DD8  24F3               	addwf	prodl,w,c
  1702  000DDA  6ED9               	movwf	fsr2l,c
  1703  000DDC  0E00               	movlw	high _doors
  1704  000DDE  20F4               	addwfc	prodh,w,c
  1705  000DE0  6EDA               	movwf	fsr2h,c
  1706  000DE2  C0DD  FFDF         	movff	C_DOOR_Init@d,indf2
  1707                           
  1708                           ;DOOR_Controller.c: 56: doors[d].locked = 1;
  1709  000DE6  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1710  000DE8  0D0A               	mullw	10
  1711  000DEA  0E01               	movlw	1
  1712  000DEC  26F3               	addwf	prodl,f,c
  1713  000DEE  0E00               	movlw	0
  1714  000DF0  22F4               	addwfc	prodh,f,c
  1715  000DF2  0E60               	movlw	low _doors
  1716  000DF4  24F3               	addwf	prodl,w,c
  1717  000DF6  6ED9               	movwf	fsr2l,c
  1718  000DF8  0E00               	movlw	high _doors
  1719  000DFA  20F4               	addwfc	prodh,w,c
  1720  000DFC  6EDA               	movwf	fsr2h,c
  1721  000DFE  0E01               	movlw	1
  1722  000E00  6EDF               	movwf	indf2,c
  1723                           
  1724                           ;DOOR_Controller.c: 57: doors[d].lock_port = &PORTB;
  1725  000E02  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1726  000E04  0D0A               	mullw	10
  1727  000E06  0E02               	movlw	2
  1728  000E08  26F3               	addwf	prodl,f,c
  1729  000E0A  0E00               	movlw	0
  1730  000E0C  22F4               	addwfc	prodh,f,c
  1731  000E0E  0E60               	movlw	low _doors
  1732  000E10  24F3               	addwf	prodl,w,c
  1733  000E12  6ED9               	movwf	fsr2l,c
  1734  000E14  0E00               	movlw	high _doors
  1735  000E16  20F4               	addwfc	prodh,w,c
  1736  000E18  6EDA               	movwf	fsr2h,c
  1737  000E1A  0E81               	movlw	129
  1738  000E1C  6EDE               	movwf	postinc2,c
  1739  000E1E  0E0F               	movlw	15
  1740  000E20  6EDD               	movwf	postdec2,c
  1741                           
  1742                           ;DOOR_Controller.c: 58: doors[d].lock_pin = (uint8_t)(0 + d);
  1743  000E22  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1744  000E24  0D0A               	mullw	10
  1745  000E26  0E04               	movlw	4
  1746  000E28  26F3               	addwf	prodl,f,c
  1747  000E2A  0E00               	movlw	0
  1748  000E2C  22F4               	addwfc	prodh,f,c
  1749  000E2E  0E60               	movlw	low _doors
  1750  000E30  24F3               	addwf	prodl,w,c
  1751  000E32  6ED9               	movwf	fsr2l,c
  1752  000E34  0E00               	movlw	high _doors
  1753  000E36  20F4               	addwfc	prodh,w,c
  1754  000E38  6EDA               	movwf	fsr2h,c
  1755  000E3A  C0DD  FFDF         	movff	C_DOOR_Init@d,indf2
  1756                           
  1757                           ;DOOR_Controller.c: 60: doors[d].is_open = 0;
  1758  000E3E  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1759  000E40  0D0A               	mullw	10
  1760  000E42  0E06               	movlw	6
  1761  000E44  26F3               	addwf	prodl,f,c
  1762  000E46  0E00               	movlw	0
  1763  000E48  22F4               	addwfc	prodh,f,c
  1764  000E4A  0E60               	movlw	low _doors
  1765  000E4C  24F3               	addwf	prodl,w,c
  1766  000E4E  6ED9               	movwf	fsr2l,c
  1767  000E50  0E00               	movlw	high _doors
  1768  000E52  20F4               	addwfc	prodh,w,c
  1769  000E54  6EDA               	movwf	fsr2h,c
  1770  000E56  0E00               	movlw	0
  1771  000E58  6EDF               	movwf	indf2,c
  1772                           
  1773                           ;DOOR_Controller.c: 61: doors[d].was_open = 1;
  1774  000E5A  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1775  000E5C  0D0A               	mullw	10
  1776  000E5E  0E05               	movlw	5
  1777  000E60  26F3               	addwf	prodl,f,c
  1778  000E62  0E00               	movlw	0
  1779  000E64  22F4               	addwfc	prodh,f,c
  1780  000E66  0E60               	movlw	low _doors
  1781  000E68  24F3               	addwf	prodl,w,c
  1782  000E6A  6ED9               	movwf	fsr2l,c
  1783  000E6C  0E00               	movlw	high _doors
  1784  000E6E  20F4               	addwfc	prodh,w,c
  1785  000E70  6EDA               	movwf	fsr2h,c
  1786  000E72  0E01               	movlw	1
  1787  000E74  6EDF               	movwf	indf2,c
  1788                           
  1789                           ;DOOR_Controller.c: 62: doors[d].sensor_port = &PORTA;
  1790  000E76  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1791  000E78  0D0A               	mullw	10
  1792  000E7A  0E07               	movlw	7
  1793  000E7C  26F3               	addwf	prodl,f,c
  1794  000E7E  0E00               	movlw	0
  1795  000E80  22F4               	addwfc	prodh,f,c
  1796  000E82  0E60               	movlw	low _doors
  1797  000E84  24F3               	addwf	prodl,w,c
  1798  000E86  6ED9               	movwf	fsr2l,c
  1799  000E88  0E00               	movlw	high _doors
  1800  000E8A  20F4               	addwfc	prodh,w,c
  1801  000E8C  6EDA               	movwf	fsr2h,c
  1802  000E8E  0E80               	movlw	128
  1803  000E90  6EDE               	movwf	postinc2,c
  1804  000E92  0E0F               	movlw	15
  1805  000E94  6EDD               	movwf	postdec2,c
  1806                           
  1807                           ;DOOR_Controller.c: 63: doors[d].sensor_pin = (uint8_t) (1 + d);
  1808  000E96  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1809  000E98  0D0A               	mullw	10
  1810  000E9A  0E09               	movlw	9
  1811  000E9C  26F3               	addwf	prodl,f,c
  1812  000E9E  0E00               	movlw	0
  1813  000EA0  22F4               	addwfc	prodh,f,c
  1814  000EA2  0E60               	movlw	low _doors
  1815  000EA4  24F3               	addwf	prodl,w,c
  1816  000EA6  6ED9               	movwf	fsr2l,c
  1817  000EA8  0E00               	movlw	high _doors
  1818  000EAA  20F4               	addwfc	prodh,w,c
  1819  000EAC  6EDA               	movwf	fsr2h,c
  1820  000EAE  29DD               	incf	C_DOOR_Init@d& (0+255),w,b
  1821  000EB0  6EDF               	movwf	indf2,c
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;DOOR_Controller.c: 65: TRISB ^= (uint8_t)((-0 ^ TRISB) & (1 << (0 + d)));
  1825  000EB2  C0DD  F0D9         	movff	C_DOOR_Init@d,??_C_DOOR_Init
  1826  000EB6  0E01               	movlw	1
  1827  000EB8  6FDA               	movwf	(??_C_DOOR_Init+1)& (0+255),b
  1828  000EBA  2BD9               	incf	??_C_DOOR_Init& (0+255),f,b
  1829  000EBC  D002               	goto	u1954
  1830  000EBE                     u1955:
  1831  000EBE  90D8               	bcf	status,0,c
  1832  000EC0  37DA               	rlcf	(??_C_DOOR_Init+1)& (0+255),f,b
  1833  000EC2                     u1954:
  1834  000EC2  2FD9               	decfsz	??_C_DOOR_Init& (0+255),f,b
  1835  000EC4  D7FC               	goto	u1955
  1836  000EC6  0100               	movlb	0	; () banked
  1837  000EC8  51DA               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1838  000ECA  1493               	andwf	3987,w,c	;volatile
  1839  000ECC  1A93               	xorwf	3987,f,c	;volatile
  1840                           
  1841                           ; BSR set to: 0
  1842                           ;DOOR_Controller.c: 66: TRISA ^= (uint8_t)((-1 ^ TRISA) & (1 << (1 + d)));
  1843  000ECE  5092               	movf	3986,w,c	;volatile
  1844  000ED0  0AFF               	xorlw	255
  1845  000ED2  6FD9               	movwf	??_C_DOOR_Init& (0+255),b
  1846  000ED4  C0DD  F0DA         	movff	C_DOOR_Init@d,??_C_DOOR_Init+1
  1847  000ED8  0E01               	movlw	1
  1848  000EDA  27DA               	addwf	(??_C_DOOR_Init+1)& (0+255),f,b
  1849  000EDC  0E01               	movlw	1
  1850  000EDE  6FDB               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1851  000EE0  2BDA               	incf	(??_C_DOOR_Init+1)& (0+255),f,b
  1852  000EE2  D002               	goto	u1964
  1853  000EE4                     u1965:
  1854  000EE4  90D8               	bcf	status,0,c
  1855  000EE6  37DB               	rlcf	(??_C_DOOR_Init+2)& (0+255),f,b
  1856  000EE8                     u1964:
  1857  000EE8  2FDA               	decfsz	(??_C_DOOR_Init+1)& (0+255),f,b
  1858  000EEA  D7FC               	goto	u1965
  1859  000EEC  0100               	movlb	0	; () banked
  1860  000EEE  51DB               	movf	(??_C_DOOR_Init+2)& (0+255),w,b
  1861  000EF0  15D9               	andwf	??_C_DOOR_Init& (0+255),w,b
  1862  000EF2  1A92               	xorwf	3986,f,c	;volatile
  1863                           
  1864                           ; BSR set to: 0
  1865  000EF4  2BDD               	incf	C_DOOR_Init@d& (0+255),f,b
  1866  000EF6                     l22:
  1867                           
  1868                           ; BSR set to: 0
  1869                           
  1870                           ; BSR set to: 0
  1871  000EF6  51DD               	movf	C_DOOR_Init@d& (0+255),w,b
  1872  000EF8  6FD9               	movwf	??_C_DOOR_Init& (0+255),b
  1873  000EFA  6BDA               	clrf	(??_C_DOOR_Init+1)& (0+255),b
  1874  000EFC  5037               	movf	_door_cnt,w,c
  1875  000EFE  5DD9               	subwf	??_C_DOOR_Init& (0+255),w,b
  1876  000F00  51DA               	movf	(??_C_DOOR_Init+1)& (0+255),w,b
  1877  000F02  0A80               	xorlw	128
  1878  000F04  6FDB               	movwf	(??_C_DOOR_Init+2)& (0+255),b
  1879  000F06  5038               	movf	_door_cnt+1,w,c
  1880  000F08  0A80               	xorlw	128
  1881  000F0A  59DB               	subwfb	(??_C_DOOR_Init+2)& (0+255),w,b
  1882  000F0C  B0D8               	btfsc	status,0,c
  1883  000F0E  0012               	return	
  1884  000F10  D760               	goto	l23
  1885  000F12                     __end_of_C_DOOR_Init:
  1886                           	opt stack 0
  1887                           tblptru	equ	0xFF8
  1888                           tblptrh	equ	0xFF7
  1889                           tblptrl	equ	0xFF6
  1890                           tablat	equ	0xFF5
  1891                           prodh	equ	0xFF4
  1892                           prodl	equ	0xFF3
  1893                           postinc0	equ	0xFEE
  1894                           plusw0	equ	0xFEB
  1895                           wreg	equ	0xFE8
  1896                           postdec1	equ	0xFE5
  1897                           fsr1l	equ	0xFE1
  1898                           indf2	equ	0xFDF
  1899                           postinc2	equ	0xFDE
  1900                           postdec2	equ	0xFDD
  1901                           plusw2	equ	0xFDB
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _D_UART_Read *****************
  1907 ;; Defined at:
  1908 ;;		line 220 in file "Drivers/UART_Driver.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;		None
  1911 ;; Auto vars:     Size  Location     Type
  1912 ;;		None
  1913 ;; Return value:  Size  Location     Type
  1914 ;;                  6   21[BANK0 ] struct .
  1915 ;; Registers used:
  1916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  1917 ;; Tracked objects:
  1918 ;;		On entry : 0/0
  1919 ;;		On exit  : 0/0
  1920 ;;		Unchanged: 0/0
  1921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1922 ;;      Params:         0       6       0       0       0       0       0       0       0
  1923 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1924 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1925 ;;      Totals:         0       6       0       0       0       0       0       0       0
  1926 ;;Total ram usage:        6 bytes
  1927 ;; Hardware stack levels used:    1
  1928 ;; Hardware stack levels required when called:    6
  1929 ;; This function calls:
  1930 ;;		Nothing
  1931 ;; This function is called by:
  1932 ;;		_main
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text6
  1937  001810                     __ptext6:
  1938                           	opt stack 0
  1939  001810                     _D_UART_Read:
  1940                           	opt stack 24
  1941                           
  1942                           ;UART_Driver.c: 221: readData.sender = readBuffer.sender;
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;incstack = 0
  1946  001810  0E0B               	movlw	low (_readBuffer+11)
  1947  001812  6E2E               	movwf	_readData,c
  1948  001814  0E01               	movlw	high (_readBuffer+11)
  1949  001816  6E2F               	movwf	_readData+1,c
  1950                           
  1951                           ;UART_Driver.c: 222: readData.command = readBuffer.command;
  1952  001818  0E3E               	movlw	low (_readBuffer+62)
  1953  00181A  6E30               	movwf	_readData+2,c
  1954  00181C  0E01               	movlw	high (_readBuffer+62)
  1955  00181E  6E31               	movwf	_readData+3,c
  1956                           
  1957                           ;UART_Driver.c: 223: readData.message = readBuffer.message;
  1958  001820  0E71               	movlw	low (_readBuffer+113)
  1959  001822  6E32               	movwf	_readData+4,c
  1960  001824  0E01               	movlw	high (_readBuffer+113)
  1961  001826  6E33               	movwf	_readData+5,c
  1962                           
  1963                           ;UART_Driver.c: 224: return readData;
  1964  001828  EE20  F02E         	lfsr	2,_readData
  1965  00182C  EE00  F0D9         	lfsr	0,?_D_UART_Read
  1966  001830  0E05               	movlw	5
  1967  001832                     u2291:
  1968  001832  CFDB FFEB          	movff	plusw2,plusw0
  1969  001836  06E8               	decf	wreg,f,c
  1970  001838  E2FC               	bc	u2291
  1971  00183A  0012               	return	
  1972  00183C                     __end_of_D_UART_Read:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           prodh	equ	0xFF4
  1979                           prodl	equ	0xFF3
  1980                           postinc0	equ	0xFEE
  1981                           plusw0	equ	0xFEB
  1982                           wreg	equ	0xFE8
  1983                           postdec1	equ	0xFE5
  1984                           fsr1l	equ	0xFE1
  1985                           indf2	equ	0xFDF
  1986                           postinc2	equ	0xFDE
  1987                           postdec2	equ	0xFDD
  1988                           plusw2	equ	0xFDB
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _D_UART_Init *****************
  1994 ;; Defined at:
  1995 ;;		line 166 in file "Drivers/UART_Driver.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  name            2   34[BANK0 ] PTR const unsigned char 
  1998 ;;		 -> STR_8(2), 
  1999 ;;  baud            2   36[BANK0 ] unsigned int 
  2000 ;;  interrupts      1   38[BANK0 ] unsigned char 
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;		None
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      void 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2012 ;;      Params:         0       5       0       0       0       0       0       0       0
  2013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2015 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2016 ;;Total ram usage:        5 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    7
  2019 ;; This function calls:
  2020 ;;		_D_UART_Enable
  2021 ;;		___lldiv
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text7
  2028  001560                     __ptext7:
  2029                           	opt stack 0
  2030  001560                     _D_UART_Init:
  2031                           	opt stack 23
  2032                           
  2033                           ;UART_Driver.c: 168: deviceName = name;
  2034                           
  2035                           ;incstack = 0
  2036  001560  C0E6  F034         	movff	D_UART_Init@name,_deviceName
  2037  001564  C0E7  F035         	movff	D_UART_Init@name+1,_deviceName+1
  2038  001568  5034               	movf	_deviceName,w,c
  2039  00156A  1035               	iorwf	_deviceName+1,w,c
  2040  00156C  A4D8               	btfss	status,2,c
  2041  00156E  0E00               	movlw	low (__mediumconst shr (0+16))
  2042  001570  6E36               	movwf	_deviceName+2,c
  2043                           
  2044                           ;UART_Driver.c: 169: readReady = 0;
  2045  001572  0E00               	movlw	0
  2046  001574  6E40               	movwf	_readReady,c
  2047                           
  2048                           ;UART_Driver.c: 172: D_UART_Enable(0);
  2049  001576  0E00               	movlw	0
  2050  001578  EC32  F00C         	call	_D_UART_Enable
  2051                           
  2052                           ;UART_Driver.c: 175: RCSTAbits.FERR = 0;
  2053  00157C  94AB               	bcf	4011,2,c	;volatile
  2054                           
  2055                           ;UART_Driver.c: 176: RCSTAbits.OERR = 0;
  2056  00157E  92AB               	bcf	4011,1,c	;volatile
  2057                           
  2058                           ;UART_Driver.c: 177: RCREG = 0x00;
  2059  001580  0E00               	movlw	0
  2060  001582  6EAE               	movwf	4014,c	;volatile
  2061                           
  2062                           ;UART_Driver.c: 180: TXSTAbits.TX9 = 0;
  2063  001584  9CAC               	bcf	4012,6,c	;volatile
  2064                           
  2065                           ;UART_Driver.c: 181: TXSTAbits.SYNC = 0;
  2066  001586  98AC               	bcf	4012,4,c	;volatile
  2067                           
  2068                           ;UART_Driver.c: 182: TXSTAbits.BRGH = 0;
  2069  001588  94AC               	bcf	4012,2,c	;volatile
  2070                           
  2071                           ;UART_Driver.c: 185: RCSTAbits.RX9 = 0;
  2072  00158A  9CAB               	bcf	4011,6,c	;volatile
  2073                           
  2074                           ;UART_Driver.c: 188: BAUDCONbits.RXDTP = 0;
  2075  00158C  9AB8               	bcf	4024,5,c	;volatile
  2076                           
  2077                           ;UART_Driver.c: 189: BAUDCONbits.TXCKP = 0;
  2078  00158E  98B8               	bcf	4024,4,c	;volatile
  2079                           
  2080                           ;UART_Driver.c: 190: BAUDCONbits.BRG16 = 0;
  2081  001590  96B8               	bcf	4024,3,c	;volatile
  2082                           
  2083                           ;UART_Driver.c: 193: SPBRG = ((16000000UL/baud)/64)-1;
  2084  001592  0E00               	movlw	0
  2085  001594  0100               	movlb	0	; () banked
  2086  001596  6FD9               	movwf	___lldiv@dividend& (0+255),b
  2087  001598  0E24               	movlw	36
  2088  00159A  6FDA               	movwf	(___lldiv@dividend+1)& (0+255),b
  2089  00159C  0EF4               	movlw	244
  2090  00159E  6FDB               	movwf	(___lldiv@dividend+2)& (0+255),b
  2091  0015A0  0E00               	movlw	0
  2092  0015A2  6FDC               	movwf	(___lldiv@dividend+3)& (0+255),b
  2093  0015A4  C0E8  F0DD         	movff	D_UART_Init@baud,___lldiv@divisor
  2094  0015A8  C0E9  F0DE         	movff	D_UART_Init@baud+1,___lldiv@divisor+1
  2095  0015AC  6BDF               	clrf	(___lldiv@divisor+2)& (0+255),b
  2096  0015AE  6BE0               	clrf	(___lldiv@divisor+3)& (0+255),b
  2097  0015B0  EC6E  F00A         	call	___lldiv	;wreg free
  2098  0015B4  0E07               	movlw	7
  2099  0015B6  D006               	goto	u2270
  2100  0015B8                     u2275:
  2101  0015B8  0100               	movlb	0	; () banked
  2102  0015BA  90D8               	bcf	status,0,c
  2103  0015BC  33DC               	rrcf	(?___lldiv+3)& (0+255),f,b
  2104  0015BE  33DB               	rrcf	(?___lldiv+2)& (0+255),f,b
  2105  0015C0  33DA               	rrcf	(?___lldiv+1)& (0+255),f,b
  2106  0015C2  33D9               	rrcf	?___lldiv& (0+255),f,b
  2107  0015C4                     u2270:
  2108  0015C4  2EE8               	decfsz	wreg,f,c
  2109  0015C6  D7F8               	goto	u2275
  2110  0015C8  05D9               	decf	?___lldiv& (0+255),w,b
  2111  0015CA  6EAF               	movwf	4015,c	;volatile
  2112                           
  2113                           ;UART_Driver.c: 196: if (interrupts) {
  2114  0015CC  51EA               	movf	D_UART_Init@interrupts& (0+255),w,b
  2115  0015CE  B4D8               	btfsc	status,2,c
  2116  0015D0  0012               	return	
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;UART_Driver.c: 197: RCONbits.IPEN = 1;
  2120  0015D2  8ED0               	bsf	4048,7,c	;volatile
  2121                           
  2122                           ;UART_Driver.c: 198: INTCONbits.GIEH = 1;
  2123  0015D4  8EF2               	bsf	intcon,7,c	;volatile
  2124                           
  2125                           ;UART_Driver.c: 199: INTCONbits.GIEL = 1;
  2126  0015D6  8CF2               	bsf	intcon,6,c	;volatile
  2127                           
  2128                           ;UART_Driver.c: 200: PIR1bits.RCIF = 0;
  2129  0015D8  9A9E               	bcf	3998,5,c	;volatile
  2130                           
  2131                           ;UART_Driver.c: 201: IPR1bits.RCIP = 1;
  2132  0015DA  8A9F               	bsf	3999,5,c	;volatile
  2133                           
  2134                           ;UART_Driver.c: 202: PIE1bits.RCIE = 1;
  2135  0015DC  8A9D               	bsf	3997,5,c	;volatile
  2136  0015DE  0012               	return	
  2137  0015E0                     __end_of_D_UART_Init:
  2138                           	opt stack 0
  2139                           tblptru	equ	0xFF8
  2140                           tblptrh	equ	0xFF7
  2141                           tblptrl	equ	0xFF6
  2142                           tablat	equ	0xFF5
  2143                           prodh	equ	0xFF4
  2144                           prodl	equ	0xFF3
  2145                           intcon	equ	0xFF2
  2146                           postinc0	equ	0xFEE
  2147                           plusw0	equ	0xFEB
  2148                           wreg	equ	0xFE8
  2149                           postdec1	equ	0xFE5
  2150                           fsr1l	equ	0xFE1
  2151                           indf2	equ	0xFDF
  2152                           postinc2	equ	0xFDE
  2153                           postdec2	equ	0xFDD
  2154                           plusw2	equ	0xFDB
  2155                           fsr2h	equ	0xFDA
  2156                           fsr2l	equ	0xFD9
  2157                           status	equ	0xFD8
  2158                           
  2159 ;; *************** function ___lldiv *****************
  2160 ;; Defined at:
  2161 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  2162 ;; Parameters:    Size  Location     Type
  2163 ;;  dividend        4   21[BANK0 ] unsigned long 
  2164 ;;  divisor         4   25[BANK0 ] unsigned long 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  quotient        4   29[BANK0 ] unsigned long 
  2167 ;;  counter         1   33[BANK0 ] unsigned char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  4   21[BANK0 ] unsigned long 
  2170 ;; Registers used:
  2171 ;;		wreg, status,2, status,0
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2177 ;;      Params:         0       8       0       0       0       0       0       0       0
  2178 ;;      Locals:         0       5       0       0       0       0       0       0       0
  2179 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2180 ;;      Totals:         0      13       0       0       0       0       0       0       0
  2181 ;;Total ram usage:       13 bytes
  2182 ;; Hardware stack levels used:    1
  2183 ;; Hardware stack levels required when called:    6
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_D_UART_Init
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           	psect	text8
  2192  0014DC                     __ptext8:
  2193                           	opt stack 0
  2194  0014DC                     ___lldiv:
  2195                           	opt stack 23
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;incstack = 0
  2199  0014DC  0E00               	movlw	0
  2200  0014DE  0100               	movlb	0	; () banked
  2201  0014E0  6FE1               	movwf	___lldiv@quotient& (0+255),b
  2202  0014E2  0E00               	movlw	0
  2203  0014E4  6FE2               	movwf	(___lldiv@quotient+1)& (0+255),b
  2204  0014E6  0E00               	movlw	0
  2205  0014E8  6FE3               	movwf	(___lldiv@quotient+2)& (0+255),b
  2206  0014EA  0E00               	movlw	0
  2207  0014EC  6FE4               	movwf	(___lldiv@quotient+3)& (0+255),b
  2208                           
  2209                           ; BSR set to: 0
  2210  0014EE  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2211  0014F0  11DE               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2212  0014F2  11DF               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2213  0014F4  11E0               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2214  0014F6  B4D8               	btfsc	status,2,c
  2215  0014F8  D02A               	goto	l739
  2216                           
  2217                           ; BSR set to: 0
  2218  0014FA  0E01               	movlw	1
  2219  0014FC  6FE5               	movwf	___lldiv@counter& (0+255),b
  2220  0014FE  D006               	goto	l734
  2221  001500                     
  2222                           ; BSR set to: 0
  2223                           
  2224                           ; BSR set to: 0
  2225  001500  90D8               	bcf	status,0,c
  2226  001502  37DD               	rlcf	___lldiv@divisor& (0+255),f,b
  2227  001504  37DE               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2228  001506  37DF               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2229  001508  37E0               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2230  00150A  2BE5               	incf	___lldiv@counter& (0+255),f,b
  2231  00150C                     l734:
  2232                           
  2233                           ; BSR set to: 0
  2234                           
  2235                           ; BSR set to: 0
  2236  00150C  AFE0               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2237  00150E  D7F8               	goto	l735
  2238  001510                     u2060:
  2239                           
  2240                           ; BSR set to: 0
  2241                           
  2242                           ; BSR set to: 0
  2243                           
  2244                           ; BSR set to: 0
  2245  001510  90D8               	bcf	status,0,c
  2246  001512  37E1               	rlcf	___lldiv@quotient& (0+255),f,b
  2247  001514  37E2               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2248  001516  37E3               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2249  001518  37E4               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2250                           
  2251                           ; BSR set to: 0
  2252  00151A  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2253  00151C  5DD9               	subwf	___lldiv@dividend& (0+255),w,b
  2254  00151E  51DE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2255  001520  59DA               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2256  001522  51DF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2257  001524  59DB               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2258  001526  51E0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2259  001528  59DC               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2260  00152A  A0D8               	btfss	status,0,c
  2261  00152C  D009               	goto	l738
  2262                           
  2263                           ; BSR set to: 0
  2264  00152E  51DD               	movf	___lldiv@divisor& (0+255),w,b
  2265  001530  5FD9               	subwf	___lldiv@dividend& (0+255),f,b
  2266  001532  51DE               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2267  001534  5BDA               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2268  001536  51DF               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2269  001538  5BDB               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2270  00153A  51E0               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2271  00153C  5BDC               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2272                           
  2273                           ; BSR set to: 0
  2274  00153E  81E1               	bsf	___lldiv@quotient& (0+255),0,b
  2275  001540                     l738:
  2276                           
  2277                           ; BSR set to: 0
  2278                           
  2279                           ; BSR set to: 0
  2280  001540  90D8               	bcf	status,0,c
  2281  001542  33E0               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2282  001544  33DF               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2283  001546  33DE               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2284  001548  33DD               	rrcf	___lldiv@divisor& (0+255),f,b
  2285                           
  2286                           ; BSR set to: 0
  2287  00154A  2FE5               	decfsz	___lldiv@counter& (0+255),f,b
  2288  00154C  D7E1               	goto	u2060
  2289  00154E                     l739:
  2290                           
  2291                           ; BSR set to: 0
  2292                           
  2293                           ; BSR set to: 0
  2294  00154E  C0E1  F0D9         	movff	___lldiv@quotient,?___lldiv
  2295  001552  C0E2  F0DA         	movff	___lldiv@quotient+1,?___lldiv+1
  2296  001556  C0E3  F0DB         	movff	___lldiv@quotient+2,?___lldiv+2
  2297  00155A  C0E4  F0DC         	movff	___lldiv@quotient+3,?___lldiv+3
  2298                           
  2299                           ; BSR set to: 0
  2300  00155E  0012               	return		;funcret
  2301  001560                     __end_of___lldiv:
  2302                           	opt stack 0
  2303                           tblptru	equ	0xFF8
  2304                           tblptrh	equ	0xFF7
  2305                           tblptrl	equ	0xFF6
  2306                           tablat	equ	0xFF5
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           intcon	equ	0xFF2
  2310                           postinc0	equ	0xFEE
  2311                           plusw0	equ	0xFEB
  2312                           wreg	equ	0xFE8
  2313                           postdec1	equ	0xFE5
  2314                           fsr1l	equ	0xFE1
  2315                           indf2	equ	0xFDF
  2316                           postinc2	equ	0xFDE
  2317                           postdec2	equ	0xFDD
  2318                           plusw2	equ	0xFDB
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _D_UART_Enable *****************
  2324 ;; Defined at:
  2325 ;;		line 227 in file "Drivers/UART_Driver.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;  enable          1    wreg     unsigned char 
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;  enable          1   21[BANK0 ] unsigned char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, status,2
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2339 ;;      Params:         0       0       0       0       0       0       0       0       0
  2340 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2342 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2343 ;;Total ram usage:        1 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    6
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_D_UART_Init
  2350 ;;		_main
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	text9
  2355  001864                     __ptext9:
  2356                           	opt stack 0
  2357  001864                     _D_UART_Enable:
  2358                           	opt stack 23
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;incstack = 0
  2362                           ;D_UART_Enable@enable stored from wreg
  2363  001864  0100               	movlb	0	; () banked
  2364  001866  6FD9               	movwf	D_UART_Enable@enable& (0+255),b
  2365                           
  2366                           ;UART_Driver.c: 228: if(enable) {
  2367  001868  0100               	movlb	0	; () banked
  2368  00186A  51D9               	movf	D_UART_Enable@enable& (0+255),w,b
  2369  00186C  B4D8               	btfsc	status,2,c
  2370  00186E  D006               	goto	l161
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;UART_Driver.c: 229: TRISCbits.TRISC7 = 0;
  2374  001870  9E94               	bcf	3988,7,c	;volatile
  2375                           
  2376                           ;UART_Driver.c: 230: TRISCbits.TRISC6 = 1;
  2377  001872  8C94               	bsf	3988,6,c	;volatile
  2378                           
  2379                           ;UART_Driver.c: 231: TXSTAbits.TXEN = 1;
  2380  001874  8AAC               	bsf	4012,5,c	;volatile
  2381                           
  2382                           ;UART_Driver.c: 232: RCSTAbits.CREN = 1;
  2383  001876  88AB               	bsf	4011,4,c	;volatile
  2384                           
  2385                           ;UART_Driver.c: 233: RCSTAbits.SPEN = 1;
  2386  001878  8EAB               	bsf	4011,7,c	;volatile
  2387                           
  2388                           ;UART_Driver.c: 234: } else {
  2389  00187A  0012               	return	
  2390  00187C                     l161:
  2391                           
  2392                           ; BSR set to: 0
  2393                           ;UART_Driver.c: 235: TRISCbits.TRISC7 = 0;
  2394  00187C  9E94               	bcf	3988,7,c	;volatile
  2395                           
  2396                           ;UART_Driver.c: 236: TRISCbits.TRISC6 = 0;
  2397  00187E  9C94               	bcf	3988,6,c	;volatile
  2398                           
  2399                           ;UART_Driver.c: 237: TXSTAbits.TXEN = 0;
  2400  001880  9AAC               	bcf	4012,5,c	;volatile
  2401                           
  2402                           ;UART_Driver.c: 238: RCSTAbits.CREN = 0;
  2403  001882  98AB               	bcf	4011,4,c	;volatile
  2404                           
  2405                           ;UART_Driver.c: 239: RCSTAbits.SPEN = 0;
  2406  001884  9EAB               	bcf	4011,7,c	;volatile
  2407  001886  0012               	return	
  2408  001888                     __end_of_D_UART_Enable:
  2409                           	opt stack 0
  2410                           tblptru	equ	0xFF8
  2411                           tblptrh	equ	0xFF7
  2412                           tblptrl	equ	0xFF6
  2413                           tablat	equ	0xFF5
  2414                           prodh	equ	0xFF4
  2415                           prodl	equ	0xFF3
  2416                           intcon	equ	0xFF2
  2417                           postinc0	equ	0xFEE
  2418                           plusw0	equ	0xFEB
  2419                           wreg	equ	0xFE8
  2420                           postdec1	equ	0xFE5
  2421                           fsr1l	equ	0xFE1
  2422                           indf2	equ	0xFDF
  2423                           postinc2	equ	0xFDE
  2424                           postdec2	equ	0xFDD
  2425                           plusw2	equ	0xFDB
  2426                           fsr2h	equ	0xFDA
  2427                           fsr2l	equ	0xFD9
  2428                           status	equ	0xFD8
  2429                           
  2430 ;; *************** function _D_TMR1_Init *****************
  2431 ;; Defined at:
  2432 ;;		line 31 in file "Drivers/TMR1_Driver.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;		None
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;		None
  2437 ;; Return value:  Size  Location     Type
  2438 ;;                  1    wreg      void 
  2439 ;; Registers used:
  2440 ;;		wreg, status,2, cstack
  2441 ;; Tracked objects:
  2442 ;;		On entry : 0/0
  2443 ;;		On exit  : 0/0
  2444 ;;		Unchanged: 0/0
  2445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2446 ;;      Params:         0       0       0       0       0       0       0       0       0
  2447 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2448 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2449 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2450 ;;Total ram usage:        0 bytes
  2451 ;; Hardware stack levels used:    1
  2452 ;; Hardware stack levels required when called:    7
  2453 ;; This function calls:
  2454 ;;		_D_TMR1_Enable
  2455 ;; This function is called by:
  2456 ;;		_main
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text10
  2461  0018F0                     __ptext10:
  2462                           	opt stack 0
  2463  0018F0                     _D_TMR1_Init:
  2464                           	opt stack 23
  2465                           
  2466                           ;TMR1_Driver.c: 33: D_TMR1_Enable(0);
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;incstack = 0
  2470  0018F0  0E00               	movlw	0
  2471  0018F2  ECA6  F00C         	call	_D_TMR1_Enable
  2472                           
  2473                           ;TMR1_Driver.c: 36: T1CONbits.RD16 = 1;
  2474  0018F6  8ECD               	bsf	4045,7,c	;volatile
  2475                           
  2476                           ;TMR1_Driver.c: 37: T1CONbits.T1RUN = 0;
  2477  0018F8  9CCD               	bcf	4045,6,c	;volatile
  2478                           
  2479                           ;TMR1_Driver.c: 38: T1CONbits.T1CKPS = 0b00;
  2480  0018FA  0ECF               	movlw	-49
  2481  0018FC  16CD               	andwf	4045,f,c	;volatile
  2482                           
  2483                           ;TMR1_Driver.c: 39: T1CONbits.T1OSCEN = 0;
  2484  0018FE  96CD               	bcf	4045,3,c	;volatile
  2485                           
  2486                           ;TMR1_Driver.c: 40: T1CONbits.TMR1CS = 0;
  2487  001900  92CD               	bcf	4045,1,c	;volatile
  2488                           
  2489                           ;TMR1_Driver.c: 43: RCONbits.IPEN = 1;
  2490  001902  8ED0               	bsf	4048,7,c	;volatile
  2491                           
  2492                           ;TMR1_Driver.c: 44: INTCONbits.GIEH = 1;
  2493  001904  8EF2               	bsf	intcon,7,c	;volatile
  2494                           
  2495                           ;TMR1_Driver.c: 45: INTCONbits.GIEL = 1;
  2496  001906  8CF2               	bsf	intcon,6,c	;volatile
  2497                           
  2498                           ;TMR1_Driver.c: 47: PIR1bits.TMR1IF = 0;
  2499  001908  909E               	bcf	3998,0,c	;volatile
  2500                           
  2501                           ;TMR1_Driver.c: 48: IPR1bits.TMR1IP = 0;
  2502  00190A  909F               	bcf	3999,0,c	;volatile
  2503                           
  2504                           ;TMR1_Driver.c: 49: PIE1bits.TMR1IE = 1;
  2505  00190C  809D               	bsf	3997,0,c	;volatile
  2506  00190E  0012               	return		;funcret
  2507  001910                     __end_of_D_TMR1_Init:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           intcon	equ	0xFF2
  2516                           postinc0	equ	0xFEE
  2517                           plusw0	equ	0xFEB
  2518                           wreg	equ	0xFE8
  2519                           postdec1	equ	0xFE5
  2520                           fsr1l	equ	0xFE1
  2521                           indf2	equ	0xFDF
  2522                           postinc2	equ	0xFDE
  2523                           postdec2	equ	0xFDD
  2524                           plusw2	equ	0xFDB
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _D_TMR1_Enable *****************
  2530 ;; Defined at:
  2531 ;;		line 52 in file "Drivers/TMR1_Driver.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  enable          1    wreg     unsigned char 
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;  enable          1   21[BANK0 ] unsigned char 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0
  2546 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2548 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2549 ;;Total ram usage:        1 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    6
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_D_TMR1_Init
  2556 ;;		_main
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text11
  2561  00194C                     __ptext11:
  2562                           	opt stack 0
  2563  00194C                     _D_TMR1_Enable:
  2564                           	opt stack 23
  2565                           
  2566                           ;incstack = 0
  2567                           ;D_TMR1_Enable@enable stored from wreg
  2568  00194C  0100               	movlb	0	; () banked
  2569  00194E  6FD9               	movwf	D_TMR1_Enable@enable& (0+255),b
  2570                           
  2571                           ;TMR1_Driver.c: 53: if (enable) {
  2572  001950  0100               	movlb	0	; () banked
  2573  001952  51D9               	movf	D_TMR1_Enable@enable& (0+255),w,b
  2574  001954  B4D8               	btfsc	status,2,c
  2575  001956  D002               	goto	l236
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;TMR1_Driver.c: 54: T1CONbits.TMR1ON = 1;
  2579  001958  80CD               	bsf	4045,0,c	;volatile
  2580                           
  2581                           ;TMR1_Driver.c: 55: } else {
  2582  00195A  0012               	return	
  2583  00195C                     l236:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;TMR1_Driver.c: 56: T1CONbits.TMR1ON = 0;
  2587  00195C  90CD               	bcf	4045,0,c	;volatile
  2588  00195E  0012               	return	
  2589  001960                     __end_of_D_TMR1_Enable:
  2590                           	opt stack 0
  2591                           tblptru	equ	0xFF8
  2592                           tblptrh	equ	0xFF7
  2593                           tblptrl	equ	0xFF6
  2594                           tablat	equ	0xFF5
  2595                           prodh	equ	0xFF4
  2596                           prodl	equ	0xFF3
  2597                           intcon	equ	0xFF2
  2598                           postinc0	equ	0xFEE
  2599                           plusw0	equ	0xFEB
  2600                           wreg	equ	0xFE8
  2601                           postdec1	equ	0xFE5
  2602                           fsr1l	equ	0xFE1
  2603                           indf2	equ	0xFDF
  2604                           postinc2	equ	0xFDE
  2605                           postdec2	equ	0xFDD
  2606                           plusw2	equ	0xFDB
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _D_TMR0_Init *****************
  2612 ;; Defined at:
  2613 ;;		line 31 in file "Drivers/TMR0_Driver.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;                  1    wreg      void 
  2620 ;; Registers used:
  2621 ;;		wreg, status,2, cstack
  2622 ;; Tracked objects:
  2623 ;;		On entry : 0/0
  2624 ;;		On exit  : 0/0
  2625 ;;		Unchanged: 0/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2627 ;;      Params:         0       0       0       0       0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2630 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2631 ;;Total ram usage:        0 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:    7
  2634 ;; This function calls:
  2635 ;;		_D_TMR0_Enable
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text12
  2642  001888                     __ptext12:
  2643                           	opt stack 0
  2644  001888                     _D_TMR0_Init:
  2645                           	opt stack 23
  2646                           
  2647                           ;TMR0_Driver.c: 33: D_TMR0_Enable(0);
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;incstack = 0
  2651  001888  0E00               	movlw	0
  2652  00188A  ECB0  F00C         	call	_D_TMR0_Enable
  2653                           
  2654                           ;TMR0_Driver.c: 36: T0CONbits.T08BIT = 0;
  2655  00188E  9CD5               	bcf	4053,6,c	;volatile
  2656                           
  2657                           ;TMR0_Driver.c: 37: T0CONbits.T0CS = 0;
  2658  001890  9AD5               	bcf	4053,5,c	;volatile
  2659                           
  2660                           ;TMR0_Driver.c: 38: T0CONbits.T0SE = 0;
  2661  001892  98D5               	bcf	4053,4,c	;volatile
  2662                           
  2663                           ;TMR0_Driver.c: 39: T0CONbits.PSA = 0;
  2664  001894  96D5               	bcf	4053,3,c	;volatile
  2665                           
  2666                           ;TMR0_Driver.c: 40: T0CONbits.T0PS = 2;
  2667  001896  50D5               	movf	4053,w,c	;volatile
  2668  001898  0BF8               	andlw	-8
  2669  00189A  0902               	iorlw	2
  2670  00189C  6ED5               	movwf	4053,c	;volatile
  2671                           
  2672                           ;TMR0_Driver.c: 44: RCONbits.IPEN = 1;
  2673  00189E  8ED0               	bsf	4048,7,c	;volatile
  2674                           
  2675                           ;TMR0_Driver.c: 45: INTCONbits.GIEH = 1;
  2676  0018A0  8EF2               	bsf	intcon,7,c	;volatile
  2677                           
  2678                           ;TMR0_Driver.c: 46: INTCONbits.GIEL = 1;
  2679  0018A2  8CF2               	bsf	intcon,6,c	;volatile
  2680                           
  2681                           ;TMR0_Driver.c: 48: INTCONbits.TMR0IF = 0;
  2682  0018A4  94F2               	bcf	intcon,2,c	;volatile
  2683                           
  2684                           ;TMR0_Driver.c: 49: INTCON2bits.TMR0IP = 0;
  2685  0018A6  94F1               	bcf	intcon2,2,c	;volatile
  2686                           
  2687                           ;TMR0_Driver.c: 50: INTCONbits.TMR0IE = 1;
  2688  0018A8  8AF2               	bsf	intcon,5,c	;volatile
  2689  0018AA  0012               	return		;funcret
  2690  0018AC                     __end_of_D_TMR0_Init:
  2691                           	opt stack 0
  2692                           tblptru	equ	0xFF8
  2693                           tblptrh	equ	0xFF7
  2694                           tblptrl	equ	0xFF6
  2695                           tablat	equ	0xFF5
  2696                           prodh	equ	0xFF4
  2697                           prodl	equ	0xFF3
  2698                           intcon	equ	0xFF2
  2699                           intcon2	equ	0xFF1
  2700                           postinc0	equ	0xFEE
  2701                           plusw0	equ	0xFEB
  2702                           wreg	equ	0xFE8
  2703                           postdec1	equ	0xFE5
  2704                           fsr1l	equ	0xFE1
  2705                           indf2	equ	0xFDF
  2706                           postinc2	equ	0xFDE
  2707                           postdec2	equ	0xFDD
  2708                           plusw2	equ	0xFDB
  2709                           fsr2h	equ	0xFDA
  2710                           fsr2l	equ	0xFD9
  2711                           status	equ	0xFD8
  2712                           
  2713 ;; *************** function _D_TMR0_Enable *****************
  2714 ;; Defined at:
  2715 ;;		line 53 in file "Drivers/TMR0_Driver.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;  enable          1    wreg     unsigned char 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  enable          1   21[BANK0 ] unsigned char 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2729 ;;      Params:         0       0       0       0       0       0       0       0       0
  2730 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2731 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2732 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2733 ;;Total ram usage:        1 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    6
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_D_TMR0_Init
  2740 ;;		_initDoors
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text13
  2745  001960                     __ptext13:
  2746                           	opt stack 0
  2747  001960                     _D_TMR0_Enable:
  2748                           	opt stack 23
  2749                           
  2750                           ;incstack = 0
  2751                           ;D_TMR0_Enable@enable stored from wreg
  2752  001960  0100               	movlb	0	; () banked
  2753  001962  6FD9               	movwf	D_TMR0_Enable@enable& (0+255),b
  2754                           
  2755                           ;TMR0_Driver.c: 54: if (enable) {
  2756  001964  0100               	movlb	0	; () banked
  2757  001966  51D9               	movf	D_TMR0_Enable@enable& (0+255),w,b
  2758  001968  B4D8               	btfsc	status,2,c
  2759  00196A  D002               	goto	l195
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;TMR0_Driver.c: 55: T0CONbits.TMR0ON = 1;
  2763  00196C  8ED5               	bsf	4053,7,c	;volatile
  2764                           
  2765                           ;TMR0_Driver.c: 56: } else {
  2766  00196E  0012               	return	
  2767  001970                     l195:
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;TMR0_Driver.c: 57: T0CONbits.TMR0ON = 0;
  2771  001970  9ED5               	bcf	4053,7,c	;volatile
  2772  001972  0012               	return	
  2773  001974                     __end_of_D_TMR0_Enable:
  2774                           	opt stack 0
  2775                           tblptru	equ	0xFF8
  2776                           tblptrh	equ	0xFF7
  2777                           tblptrl	equ	0xFF6
  2778                           tablat	equ	0xFF5
  2779                           prodh	equ	0xFF4
  2780                           prodl	equ	0xFF3
  2781                           intcon	equ	0xFF2
  2782                           intcon2	equ	0xFF1
  2783                           postinc0	equ	0xFEE
  2784                           plusw0	equ	0xFEB
  2785                           wreg	equ	0xFE8
  2786                           postdec1	equ	0xFE5
  2787                           fsr1l	equ	0xFE1
  2788                           indf2	equ	0xFDF
  2789                           postinc2	equ	0xFDE
  2790                           postdec2	equ	0xFDD
  2791                           plusw2	equ	0xFDB
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _D_PWM_SetPwm *****************
  2797 ;; Defined at:
  2798 ;;		line 44 in file "Drivers/PWM_Driver.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  pwm             1    wreg     unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  pwm             1   21[BANK0 ] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2812 ;;      Params:         0       0       0       0       0       0       0       0       0
  2813 ;;      Locals:         0       1       0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2815 ;;      Totals:         0       1       0       0       0       0       0       0       0
  2816 ;;Total ram usage:        1 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    6
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_main
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           	psect	text14
  2827  0017E2                     __ptext14:
  2828                           	opt stack 0
  2829  0017E2                     _D_PWM_SetPwm:
  2830                           	opt stack 24
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;incstack = 0
  2834                           ;D_PWM_SetPwm@pwm stored from wreg
  2835  0017E2  0100               	movlb	0	; () banked
  2836  0017E4  6FD9               	movwf	D_PWM_SetPwm@pwm& (0+255),b
  2837                           
  2838                           ;PWM_Driver.c: 45: if (pwm > 0) {
  2839  0017E6  0100               	movlb	0	; () banked
  2840  0017E8  51D9               	movf	D_PWM_SetPwm@pwm& (0+255),w,b
  2841  0017EA  B4D8               	btfsc	status,2,c
  2842  0017EC  D00A               	goto	l213
  2843                           
  2844                           ; BSR set to: 0
  2845                           ;PWM_Driver.c: 46: if (T2CONbits.TMR2ON == 0) {
  2846  0017EE  B4CA               	btfsc	4042,2,c	;volatile
  2847  0017F0  D005               	goto	l214
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;PWM_Driver.c: 47: CCP1CONbits.CCP1M = 0b1100;
  2851  0017F2  50BD               	movf	4029,w,c	;volatile
  2852  0017F4  0BF0               	andlw	-16
  2853  0017F6  090C               	iorlw	12
  2854  0017F8  6EBD               	movwf	4029,c	;volatile
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;PWM_Driver.c: 48: T2CONbits.TMR2ON = 1;
  2858  0017FA  84CA               	bsf	4042,2,c	;volatile
  2859  0017FC                     l214:
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;PWM_Driver.c: 49: }
  2863                           ;PWM_Driver.c: 50: CCPR1L = pwm;
  2864                           
  2865                           ; BSR set to: 0
  2866  0017FC  C0D9  FFBE         	movff	D_PWM_SetPwm@pwm,4030	;volatile
  2867                           
  2868                           ;PWM_Driver.c: 51: } else {
  2869  001800  0012               	return	
  2870  001802                     l213:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;PWM_Driver.c: 52: CCP1CONbits.CCP1M = 0b0000;
  2874  001802  90BD               	bcf	4029,0,c	;volatile
  2875  001804  92BD               	bcf	4029,1,c	;volatile
  2876  001806  94BD               	bcf	4029,2,c	;volatile
  2877  001808  96BD               	bcf	4029,3,c	;volatile
  2878                           
  2879                           ;PWM_Driver.c: 53: T2CONbits.TMR2ON = 0;
  2880  00180A  94CA               	bcf	4042,2,c	;volatile
  2881                           
  2882                           ;PWM_Driver.c: 54: PORTCbits.RC2 = 0;
  2883  00180C  9482               	bcf	3970,2,c	;volatile
  2884  00180E  0012               	return	
  2885  001810                     __end_of_D_PWM_SetPwm:
  2886                           	opt stack 0
  2887                           tblptru	equ	0xFF8
  2888                           tblptrh	equ	0xFF7
  2889                           tblptrl	equ	0xFF6
  2890                           tablat	equ	0xFF5
  2891                           prodh	equ	0xFF4
  2892                           prodl	equ	0xFF3
  2893                           intcon	equ	0xFF2
  2894                           intcon2	equ	0xFF1
  2895                           postinc0	equ	0xFEE
  2896                           plusw0	equ	0xFEB
  2897                           wreg	equ	0xFE8
  2898                           postdec1	equ	0xFE5
  2899                           fsr1l	equ	0xFE1
  2900                           indf2	equ	0xFDF
  2901                           postinc2	equ	0xFDE
  2902                           postdec2	equ	0xFDD
  2903                           plusw2	equ	0xFDB
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _D_PWM_Init *****************
  2909 ;; Defined at:
  2910 ;;		line 31 in file "Drivers/PWM_Driver.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;		None
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;		None
  2915 ;; Return value:  Size  Location     Type
  2916 ;;                  1    wreg      void 
  2917 ;; Registers used:
  2918 ;;		wreg, status,2
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2924 ;;      Params:         0       0       0       0       0       0       0       0       0
  2925 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2926 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2927 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2928 ;;Total ram usage:        0 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    6
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text15
  2939  001910                     __ptext15:
  2940                           	opt stack 0
  2941  001910                     _D_PWM_Init:
  2942                           	opt stack 24
  2943                           
  2944                           ;PWM_Driver.c: 34: PR2 = 0xFF;
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;incstack = 0
  2948  001910  68CB               	setf	4043,c	;volatile
  2949                           
  2950                           ;PWM_Driver.c: 35: T2CONbits.TMR2ON = 0;
  2951  001912  94CA               	bcf	4042,2,c	;volatile
  2952                           
  2953                           ;PWM_Driver.c: 36: T2CONbits.T2CKPS = 0b01;
  2954  001914  50CA               	movf	4042,w,c	;volatile
  2955  001916  0BFC               	andlw	-4
  2956  001918  0901               	iorlw	1
  2957  00191A  6ECA               	movwf	4042,c	;volatile
  2958                           
  2959                           ;PWM_Driver.c: 37: T2CONbits.TOUTPS = 0;
  2960  00191C  96CA               	bcf	4042,3,c	;volatile
  2961  00191E  98CA               	bcf	4042,4,c	;volatile
  2962  001920  9ACA               	bcf	4042,5,c	;volatile
  2963  001922  9CCA               	bcf	4042,6,c	;volatile
  2964                           
  2965                           ;PWM_Driver.c: 40: CCPR1L = 0x1F;
  2966  001924  0E1F               	movlw	31
  2967  001926  6EBE               	movwf	4030,c	;volatile
  2968                           
  2969                           ;PWM_Driver.c: 41: CCP1CONbits.DC1B = 0b00;
  2970  001928  0ECF               	movlw	-49
  2971  00192A  16BD               	andwf	4029,f,c	;volatile
  2972  00192C  0012               	return		;funcret
  2973  00192E                     __end_of_D_PWM_Init:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           tblptrh	equ	0xFF7
  2977                           tblptrl	equ	0xFF6
  2978                           tablat	equ	0xFF5
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           intcon2	equ	0xFF1
  2983                           postinc0	equ	0xFEE
  2984                           plusw0	equ	0xFEB
  2985                           wreg	equ	0xFE8
  2986                           postdec1	equ	0xFE5
  2987                           fsr1l	equ	0xFE1
  2988                           indf2	equ	0xFDF
  2989                           postinc2	equ	0xFDE
  2990                           postdec2	equ	0xFDD
  2991                           plusw2	equ	0xFDB
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function _D_PORT_Init *****************
  2997 ;; Defined at:
  2998 ;;		line 32 in file "Drivers/PORT_Driver.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;		None
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;		None
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  1    wreg      void 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3012 ;;      Params:         0       0       0       0       0       0       0       0       0
  3013 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3015 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3016 ;;Total ram usage:        0 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    6
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_main
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text16
  3027  00192E                     __ptext16:
  3028                           	opt stack 0
  3029  00192E                     _D_PORT_Init:
  3030                           	opt stack 24
  3031                           
  3032                           ;PORT_Driver.c: 33: TRISA = 0x00; PORTA = 0x00;
  3033                           
  3034                           ;incstack = 0
  3035  00192E  0E00               	movlw	0
  3036  001930  6E92               	movwf	3986,c	;volatile
  3037  001932  0E00               	movlw	0
  3038  001934  6E80               	movwf	3968,c	;volatile
  3039                           
  3040                           ;PORT_Driver.c: 34: TRISB = 0x00; PORTB = 0x00;
  3041  001936  0E00               	movlw	0
  3042  001938  6E93               	movwf	3987,c	;volatile
  3043  00193A  0E00               	movlw	0
  3044  00193C  6E81               	movwf	3969,c	;volatile
  3045                           
  3046                           ;PORT_Driver.c: 35: TRISC = 0x00; PORTC = 0x00;
  3047  00193E  0E00               	movlw	0
  3048  001940  6E94               	movwf	3988,c	;volatile
  3049  001942  0E00               	movlw	0
  3050  001944  6E82               	movwf	3970,c	;volatile
  3051                           
  3052                           ;PORT_Driver.c: 36: ADCON1 = 0x0F;
  3053  001946  0E0F               	movlw	15
  3054  001948  6EC1               	movwf	4033,c	;volatile
  3055  00194A  0012               	return		;funcret
  3056  00194C                     __end_of_D_PORT_Init:
  3057                           	opt stack 0
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodh	equ	0xFF4
  3063                           prodl	equ	0xFF3
  3064                           intcon	equ	0xFF2
  3065                           intcon2	equ	0xFF1
  3066                           postinc0	equ	0xFEE
  3067                           plusw0	equ	0xFEB
  3068                           wreg	equ	0xFE8
  3069                           postdec1	equ	0xFE5
  3070                           fsr1l	equ	0xFE1
  3071                           indf2	equ	0xFDF
  3072                           postinc2	equ	0xFDE
  3073                           postdec2	equ	0xFDD
  3074                           plusw2	equ	0xFDB
  3075                           fsr2h	equ	0xFDA
  3076                           fsr2l	equ	0xFD9
  3077                           status	equ	0xFD8
  3078                           
  3079 ;; *************** function _C_DOOR_UnlockAll *****************
  3080 ;; Defined at:
  3081 ;;		line 95 in file "Controllers/DOOR_Controller.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;		None
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  d               1   29[BANK0 ] unsigned char 
  3086 ;; Return value:  Size  Location     Type
  3087 ;;                  1    wreg      void 
  3088 ;; Registers used:
  3089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3090 ;; Tracked objects:
  3091 ;;		On entry : 0/0
  3092 ;;		On exit  : 0/0
  3093 ;;		Unchanged: 0/0
  3094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3095 ;;      Params:         0       0       0       0       0       0       0       0       0
  3096 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3097 ;;      Temps:          0       8       0       0       0       0       0       0       0
  3098 ;;      Totals:         0       9       0       0       0       0       0       0       0
  3099 ;;Total ram usage:        9 bytes
  3100 ;; Hardware stack levels used:    1
  3101 ;; Hardware stack levels required when called:    6
  3102 ;; This function calls:
  3103 ;;		Nothing
  3104 ;; This function is called by:
  3105 ;;		_main
  3106 ;; This function uses a non-reentrant model
  3107 ;;
  3108                           
  3109                           	psect	text17
  3110  0012D6                     __ptext17:
  3111                           	opt stack 0
  3112  0012D6                     _C_DOOR_UnlockAll:
  3113                           	opt stack 24
  3114                           
  3115                           ;DOOR_Controller.c: 96: uint8_t d;
  3116                           ;DOOR_Controller.c: 97: for (d = 0; d < door_cnt; d++) {
  3117                           
  3118                           ;incstack = 0
  3119  0012D6  0E00               	movlw	0
  3120  0012D8  0100               	movlb	0	; () banked
  3121  0012DA  6FE1               	movwf	C_DOOR_UnlockAll@d& (0+255),b
  3122  0012DC  D048               	goto	l34
  3123  0012DE                     
  3124                           ; BSR set to: 0
  3125                           ;DOOR_Controller.c: 98: *doors[d].lock_port ^= (uint8_t)((-!0 ^ *doors[d].lock_port) & (
      +                          1 << doors[d].lock_pin));
  3126                           
  3127                           ; BSR set to: 0
  3128  0012DE  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3129  0012E0  0D0A               	mullw	10
  3130  0012E2  0E02               	movlw	2
  3131  0012E4  26F3               	addwf	prodl,f,c
  3132  0012E6  0E00               	movlw	0
  3133  0012E8  22F4               	addwfc	prodh,f,c
  3134  0012EA  0E60               	movlw	low _doors
  3135  0012EC  24F3               	addwf	prodl,w,c
  3136  0012EE  6ED9               	movwf	fsr2l,c
  3137  0012F0  0E00               	movlw	high _doors
  3138  0012F2  20F4               	addwfc	prodh,w,c
  3139  0012F4  6EDA               	movwf	fsr2h,c
  3140  0012F6  CFDE F0D9          	movff	postinc2,??_C_DOOR_UnlockAll
  3141  0012FA  CFDD F0DA          	movff	postdec2,??_C_DOOR_UnlockAll+1
  3142  0012FE  C0D9  FFD9         	movff	??_C_DOOR_UnlockAll,fsr2l
  3143  001302  C0DA  FFDA         	movff	??_C_DOOR_UnlockAll+1,fsr2h
  3144  001306  50DF               	movf	indf2,w,c
  3145  001308  0AFF               	xorlw	255
  3146  00130A  6FDB               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3147  00130C  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3148  00130E  0D0A               	mullw	10
  3149  001310  0E04               	movlw	4
  3150  001312  26F3               	addwf	prodl,f,c
  3151  001314  0E00               	movlw	0
  3152  001316  22F4               	addwfc	prodh,f,c
  3153  001318  0E60               	movlw	low _doors
  3154  00131A  24F3               	addwf	prodl,w,c
  3155  00131C  6ED9               	movwf	fsr2l,c
  3156  00131E  0E00               	movlw	high _doors
  3157  001320  20F4               	addwfc	prodh,w,c
  3158  001322  6EDA               	movwf	fsr2h,c
  3159  001324  50DF               	movf	indf2,w,c
  3160  001326  6FDC               	movwf	(??_C_DOOR_UnlockAll+3)& (0+255),b
  3161  001328  0E01               	movlw	1
  3162  00132A  6FDD               	movwf	(??_C_DOOR_UnlockAll+4)& (0+255),b
  3163  00132C  2BDC               	incf	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3164  00132E  D002               	goto	u2084
  3165  001330                     u2085:
  3166  001330  90D8               	bcf	status,0,c
  3167  001332  37DD               	rlcf	(??_C_DOOR_UnlockAll+4)& (0+255),f,b
  3168  001334                     u2084:
  3169  001334  2FDC               	decfsz	(??_C_DOOR_UnlockAll+3)& (0+255),f,b
  3170  001336  D7FC               	goto	u2085
  3171  001338  0100               	movlb	0	; () banked
  3172  00133A  51DD               	movf	(??_C_DOOR_UnlockAll+4)& (0+255),w,b
  3173  00133C  15DB               	andwf	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3174  00133E  6FDE               	movwf	(??_C_DOOR_UnlockAll+5)& (0+255),b
  3175  001340  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3176  001342  0D0A               	mullw	10
  3177  001344  0E02               	movlw	2
  3178  001346  26F3               	addwf	prodl,f,c
  3179  001348  0E00               	movlw	0
  3180  00134A  22F4               	addwfc	prodh,f,c
  3181  00134C  0E60               	movlw	low _doors
  3182  00134E  24F3               	addwf	prodl,w,c
  3183  001350  6ED9               	movwf	fsr2l,c
  3184  001352  0E00               	movlw	high _doors
  3185  001354  20F4               	addwfc	prodh,w,c
  3186  001356  6EDA               	movwf	fsr2h,c
  3187  001358  CFDE F0DF          	movff	postinc2,??_C_DOOR_UnlockAll+6
  3188  00135C  CFDD F0E0          	movff	postdec2,??_C_DOOR_UnlockAll+7
  3189  001360  C0DF  FFD9         	movff	??_C_DOOR_UnlockAll+6,fsr2l
  3190  001364  C0E0  FFDA         	movff	??_C_DOOR_UnlockAll+7,fsr2h
  3191  001368  51DE               	movf	(??_C_DOOR_UnlockAll+5)& (0+255),w,b
  3192  00136A  1ADF               	xorwf	indf2,f,c
  3193                           
  3194                           ; BSR set to: 0
  3195  00136C  2BE1               	incf	C_DOOR_UnlockAll@d& (0+255),f,b
  3196  00136E                     l34:
  3197                           
  3198                           ; BSR set to: 0
  3199                           
  3200                           ; BSR set to: 0
  3201  00136E  51E1               	movf	C_DOOR_UnlockAll@d& (0+255),w,b
  3202  001370  6FD9               	movwf	??_C_DOOR_UnlockAll& (0+255),b
  3203  001372  6BDA               	clrf	(??_C_DOOR_UnlockAll+1)& (0+255),b
  3204  001374  5037               	movf	_door_cnt,w,c
  3205  001376  5DD9               	subwf	??_C_DOOR_UnlockAll& (0+255),w,b
  3206  001378  51DA               	movf	(??_C_DOOR_UnlockAll+1)& (0+255),w,b
  3207  00137A  0A80               	xorlw	128
  3208  00137C  6FDB               	movwf	(??_C_DOOR_UnlockAll+2)& (0+255),b
  3209  00137E  5038               	movf	_door_cnt+1,w,c
  3210  001380  0A80               	xorlw	128
  3211  001382  59DB               	subwfb	(??_C_DOOR_UnlockAll+2)& (0+255),w,b
  3212  001384  B0D8               	btfsc	status,0,c
  3213  001386  0012               	return	
  3214  001388  D7AA               	goto	l35
  3215  00138A                     __end_of_C_DOOR_UnlockAll:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           prodh	equ	0xFF4
  3222                           prodl	equ	0xFF3
  3223                           intcon	equ	0xFF2
  3224                           intcon2	equ	0xFF1
  3225                           postinc0	equ	0xFEE
  3226                           plusw0	equ	0xFEB
  3227                           wreg	equ	0xFE8
  3228                           postdec1	equ	0xFE5
  3229                           fsr1l	equ	0xFE1
  3230                           indf2	equ	0xFDF
  3231                           postinc2	equ	0xFDE
  3232                           postdec2	equ	0xFDD
  3233                           plusw2	equ	0xFDB
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _C_DOOR_SendStates *****************
  3239 ;; Defined at:
  3240 ;;		line 109 in file "Controllers/DOOR_Controller.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  com             3    8[BANK1 ] unsigned char [3]
  3245 ;;  mes             2   11[BANK1 ] unsigned char [2]
  3246 ;;  d               1   13[BANK1 ] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0
  3257 ;;      Locals:         0       0       6       0       0       0       0       0       0
  3258 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3259 ;;      Totals:         0       0       9       0       0       0       0       0       0
  3260 ;;Total ram usage:        9 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    9
  3263 ;; This function calls:
  3264 ;;		_D_UART_Write
  3265 ;;		_commandAndMessage
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text18
  3272  001142                     __ptext18:
  3273                           	opt stack 0
  3274  001142                     _C_DOOR_SendStates:
  3275                           	opt stack 21
  3276                           
  3277                           ;DOOR_Controller.c: 110: uint8_t d;
  3278                           ;DOOR_Controller.c: 111: for (d = 0; d < door_cnt; d++) {
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;incstack = 0
  3282  001142  0E00               	movlw	0
  3283  001144  0101               	movlb	1	; () banked
  3284  001146  6FB3               	movwf	C_DOOR_SendStates@d& (0+255),b
  3285  001148  D05D               	goto	l46
  3286  00114A                     
  3287                           ; BSR set to: 1
  3288                           ;DOOR_Controller.c: 112: if (doors[d].was_open != doors[d].is_open) {
  3289                           
  3290                           ; BSR set to: 1
  3291  00114A  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3292  00114C  0D0A               	mullw	10
  3293  00114E  0E06               	movlw	6
  3294  001150  26F3               	addwf	prodl,f,c
  3295  001152  0E00               	movlw	0
  3296  001154  22F4               	addwfc	prodh,f,c
  3297  001156  0E60               	movlw	low _doors
  3298  001158  24F3               	addwf	prodl,w,c
  3299  00115A  6ED9               	movwf	fsr2l,c
  3300  00115C  0E00               	movlw	high _doors
  3301  00115E  20F4               	addwfc	prodh,w,c
  3302  001160  6EDA               	movwf	fsr2h,c
  3303  001162  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3304  001164  0D0A               	mullw	10
  3305  001166  0E05               	movlw	5
  3306  001168  26F3               	addwf	prodl,f,c
  3307  00116A  0E00               	movlw	0
  3308  00116C  22F4               	addwfc	prodh,f,c
  3309  00116E  0E60               	movlw	low _doors
  3310  001170  24F3               	addwf	prodl,w,c
  3311  001172  6EE1               	movwf	fsr1l,c
  3312  001174  0E00               	movlw	high _doors
  3313  001176  20F4               	addwfc	prodh,w,c
  3314  001178  6EE2               	movwf	fsr1h,c
  3315  00117A  50DE               	movf	postinc2,w,c
  3316  00117C  18E6               	xorwf	postinc1,w,c
  3317  00117E  B4D8               	btfsc	status,2,c
  3318  001180  D040               	goto	l48
  3319                           
  3320                           ; BSR set to: 1
  3321                           ;DOOR_Controller.c: 114: char com[3];
  3322                           ;DOOR_Controller.c: 115: char mes[2];
  3323                           ;DOOR_Controller.c: 116: commandAndMessage(doors[d], com, mes);
  3324  001182  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3325  001184  0D0A               	mullw	10
  3326  001186  0E60               	movlw	low _doors
  3327  001188  24F3               	addwf	prodl,w,c
  3328  00118A  6ED9               	movwf	fsr2l,c
  3329  00118C  0E00               	movlw	high _doors
  3330  00118E  20F4               	addwfc	prodh,w,c
  3331  001190  6EDA               	movwf	fsr2h,c
  3332  001192  EE00  F0D9         	lfsr	0,commandAndMessage@door
  3333  001196  0E09               	movlw	9
  3334  001198                     u2151:
  3335  001198  CFDB FFEB          	movff	plusw2,plusw0
  3336  00119C  06E8               	decf	wreg,f,c
  3337  00119E  E2FC               	bc	u2151
  3338  0011A0  0EAE               	movlw	low C_DOOR_SendStates@com
  3339  0011A2  0100               	movlb	0	; () banked
  3340  0011A4  6FE3               	movwf	commandAndMessage@com& (0+255),b
  3341  0011A6  0E01               	movlw	high C_DOOR_SendStates@com
  3342  0011A8  6FE4               	movwf	(commandAndMessage@com+1)& (0+255),b
  3343  0011AA  0EB1               	movlw	low C_DOOR_SendStates@mes
  3344  0011AC  6FE5               	movwf	commandAndMessage@mes& (0+255),b
  3345  0011AE  0E01               	movlw	high C_DOOR_SendStates@mes
  3346  0011B0  6FE6               	movwf	(commandAndMessage@mes+1)& (0+255),b
  3347  0011B2  ECF0  F00A         	call	_commandAndMessage	;wreg free
  3348                           
  3349                           ;DOOR_Controller.c: 119: D_UART_Write(com, mes);
  3350  0011B6  0EAE               	movlw	low C_DOOR_SendStates@com
  3351  0011B8  0101               	movlb	1	; () banked
  3352  0011BA  6FA6               	movwf	D_UART_Write@command& (0+255),b
  3353  0011BC  0E01               	movlw	high C_DOOR_SendStates@com
  3354  0011BE  6FA7               	movwf	(D_UART_Write@command+1)& (0+255),b
  3355  0011C0  0EB1               	movlw	low C_DOOR_SendStates@mes
  3356  0011C2  6FA8               	movwf	D_UART_Write@data& (0+255),b
  3357  0011C4  0E01               	movlw	high C_DOOR_SendStates@mes
  3358  0011C6  6FA9               	movwf	(D_UART_Write@data+1)& (0+255),b
  3359  0011C8  EC2D  F008         	call	_D_UART_Write	;wreg free
  3360                           
  3361                           ;DOOR_Controller.c: 121: doors[d].was_open = doors[d].is_open;
  3362  0011CC  0101               	movlb	1	; () banked
  3363  0011CE  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3364  0011D0  0D0A               	mullw	10
  3365  0011D2  0E06               	movlw	6
  3366  0011D4  26F3               	addwf	prodl,f,c
  3367  0011D6  0E00               	movlw	0
  3368  0011D8  22F4               	addwfc	prodh,f,c
  3369  0011DA  0E60               	movlw	low _doors
  3370  0011DC  24F3               	addwf	prodl,w,c
  3371  0011DE  6ED9               	movwf	fsr2l,c
  3372  0011E0  0E00               	movlw	high _doors
  3373  0011E2  20F4               	addwfc	prodh,w,c
  3374  0011E4  6EDA               	movwf	fsr2h,c
  3375  0011E6  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3376  0011E8  0D0A               	mullw	10
  3377  0011EA  0E05               	movlw	5
  3378  0011EC  26F3               	addwf	prodl,f,c
  3379  0011EE  0E00               	movlw	0
  3380  0011F0  22F4               	addwfc	prodh,f,c
  3381  0011F2  0E60               	movlw	low _doors
  3382  0011F4  24F3               	addwf	prodl,w,c
  3383  0011F6  6EE1               	movwf	fsr1l,c
  3384  0011F8  0E00               	movlw	high _doors
  3385  0011FA  20F4               	addwfc	prodh,w,c
  3386  0011FC  6EE2               	movwf	fsr1h,c
  3387  0011FE  CFDF FFE7          	movff	indf2,indf1
  3388  001202                     l48:
  3389                           
  3390                           ; BSR set to: 1
  3391                           
  3392                           ; BSR set to: 1
  3393  001202  2BB3               	incf	C_DOOR_SendStates@d& (0+255),f,b
  3394  001204                     l46:
  3395                           
  3396                           ; BSR set to: 1
  3397                           
  3398                           ; BSR set to: 1
  3399  001204  51B3               	movf	C_DOOR_SendStates@d& (0+255),w,b
  3400  001206  6FAB               	movwf	??_C_DOOR_SendStates& (0+255),b
  3401  001208  6BAC               	clrf	(??_C_DOOR_SendStates+1)& (0+255),b
  3402  00120A  5037               	movf	_door_cnt,w,c
  3403  00120C  5DAB               	subwf	??_C_DOOR_SendStates& (0+255),w,b
  3404  00120E  51AC               	movf	(??_C_DOOR_SendStates+1)& (0+255),w,b
  3405  001210  0A80               	xorlw	128
  3406  001212  6FAD               	movwf	(??_C_DOOR_SendStates+2)& (0+255),b
  3407  001214  5038               	movf	_door_cnt+1,w,c
  3408  001216  0A80               	xorlw	128
  3409  001218  59AD               	subwfb	(??_C_DOOR_SendStates+2)& (0+255),w,b
  3410  00121A  B0D8               	btfsc	status,0,c
  3411  00121C  0012               	return	
  3412  00121E  D795               	goto	l47
  3413  001220                     __end_of_C_DOOR_SendStates:
  3414                           	opt stack 0
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           prodh	equ	0xFF4
  3420                           prodl	equ	0xFF3
  3421                           intcon	equ	0xFF2
  3422                           intcon2	equ	0xFF1
  3423                           postinc0	equ	0xFEE
  3424                           plusw0	equ	0xFEB
  3425                           wreg	equ	0xFE8
  3426                           indf1	equ	0xFE7
  3427                           postinc1	equ	0xFE6
  3428                           postdec1	equ	0xFE5
  3429                           fsr1h	equ	0xFE2
  3430                           fsr1l	equ	0xFE1
  3431                           indf2	equ	0xFDF
  3432                           postinc2	equ	0xFDE
  3433                           postdec2	equ	0xFDD
  3434                           plusw2	equ	0xFDB
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _commandAndMessage *****************
  3440 ;; Defined at:
  3441 ;;		line 31 in file "Controllers/DOOR_Controller.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;  door           10   21[BANK0 ] struct .
  3444 ;;  com             2   31[BANK0 ] PTR unsigned char 
  3445 ;;		 -> C_DOOR_SendStates@com(3), 
  3446 ;;  mes             2   33[BANK0 ] PTR unsigned char 
  3447 ;;		 -> C_DOOR_SendStates@mes(2), 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3459 ;;      Params:         0      14       0       0       0       0       0       0       0
  3460 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3462 ;;      Totals:         0      14       0       0       0       0       0       0       0
  3463 ;;Total ram usage:       14 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    6
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_C_DOOR_SendStates
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text19
  3474  0015E0                     __ptext19:
  3475                           	opt stack 0
  3476  0015E0                     _commandAndMessage:
  3477                           	opt stack 23
  3478                           
  3479                           ;DOOR_Controller.c: 33: com[0] = 'D';
  3480                           
  3481                           ; BSR set to: 1
  3482                           ;incstack = 0
  3483  0015E0  C0E3  FFD9         	movff	commandAndMessage@com,fsr2l
  3484  0015E4  C0E4  FFDA         	movff	commandAndMessage@com+1,fsr2h
  3485  0015E8  0E44               	movlw	68
  3486  0015EA  6EDF               	movwf	indf2,c
  3487                           
  3488                           ;DOOR_Controller.c: 34: com[1] = (uint8_t)(door.id + 0x30);
  3489  0015EC  0100               	movlb	0	; () banked
  3490  0015EE  EE20 F001          	lfsr	2,1
  3491  0015F2  51E3               	movf	commandAndMessage@com& (0+255),w,b
  3492  0015F4  26D9               	addwf	fsr2l,f,c
  3493  0015F6  51E4               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3494  0015F8  22DA               	addwfc	fsr2h,f,c
  3495  0015FA  51D9               	movf	commandAndMessage@door& (0+255),w,b
  3496  0015FC  0F30               	addlw	48
  3497  0015FE  6EDF               	movwf	indf2,c
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;DOOR_Controller.c: 35: com[2] = '\0';
  3501  001600  EE20 F002          	lfsr	2,2
  3502  001604  51E3               	movf	commandAndMessage@com& (0+255),w,b
  3503  001606  26D9               	addwf	fsr2l,f,c
  3504  001608  51E4               	movf	(commandAndMessage@com+1)& (0+255),w,b
  3505  00160A  22DA               	addwfc	fsr2h,f,c
  3506  00160C  0E00               	movlw	0
  3507  00160E  6EDF               	movwf	indf2,c
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;DOOR_Controller.c: 38: if (door.is_open) {
  3511  001610  51DF               	movf	(commandAndMessage@door+6)& (0+255),w,b
  3512  001612  B4D8               	btfsc	status,2,c
  3513  001614  D006               	goto	l17
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;DOOR_Controller.c: 39: mes[0] = 'C';
  3517  001616  C0E5  FFD9         	movff	commandAndMessage@mes,fsr2l
  3518  00161A  C0E6  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3519  00161E  0E43               	movlw	67
  3520  001620  D005               	goto	L2
  3521  001622                     l17:
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;DOOR_Controller.c: 41: mes[0] = 'O';
  3525                           
  3526                           ; BSR set to: 0
  3527  001622  C0E5  FFD9         	movff	commandAndMessage@mes,fsr2l
  3528  001626  C0E6  FFDA         	movff	commandAndMessage@mes+1,fsr2h
  3529  00162A  0E4F               	movlw	79
  3530  00162C                     L2:
  3531  00162C  6EDF               	movwf	indf2,c
  3532                           
  3533                           ; BSR set to: 0
  3534                           ;DOOR_Controller.c: 42: }
  3535                           ;DOOR_Controller.c: 43: mes[1] = '\0';
  3536                           
  3537                           ; BSR set to: 0
  3538  00162E  EE20 F001          	lfsr	2,1
  3539  001632  51E5               	movf	commandAndMessage@mes& (0+255),w,b
  3540  001634  26D9               	addwf	fsr2l,f,c
  3541  001636  51E6               	movf	(commandAndMessage@mes+1)& (0+255),w,b
  3542  001638  22DA               	addwfc	fsr2h,f,c
  3543  00163A  0E00               	movlw	0
  3544  00163C  6EDF               	movwf	indf2,c
  3545                           
  3546                           ; BSR set to: 0
  3547  00163E  0012               	return		;funcret
  3548  001640                     __end_of_commandAndMessage:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           intcon	equ	0xFF2
  3557                           intcon2	equ	0xFF1
  3558                           postinc0	equ	0xFEE
  3559                           plusw0	equ	0xFEB
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postinc1	equ	0xFE6
  3563                           postdec1	equ	0xFE5
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           plusw2	equ	0xFDB
  3570                           fsr2h	equ	0xFDA
  3571                           fsr2l	equ	0xFD9
  3572                           status	equ	0xFD8
  3573                           
  3574 ;; *************** function _D_UART_Write *****************
  3575 ;; Defined at:
  3576 ;;		line 206 in file "Drivers/UART_Driver.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  command         2    0[BANK1 ] PTR const unsigned char 
  3579 ;;		 -> STR_15(2), C_DOOR_SendStates@com(3), 
  3580 ;;  data            2    2[BANK1 ] PTR const unsigned char 
  3581 ;;		 -> STR_16(2), C_DOOR_SendStates@mes(2), 
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3593 ;;      Params:         0       0       4       0       0       0       0       0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3595 ;;      Temps:          0       0       1       0       0       0       0       0       0
  3596 ;;      Totals:         0       0       5       0       0       0       0       0       0
  3597 ;;Total ram usage:        5 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    8
  3600 ;; This function calls:
  3601 ;;		_printf
  3602 ;; This function is called by:
  3603 ;;		_C_DOOR_SendStates
  3604 ;;		_main
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text20
  3609  00105A                     __ptext20:
  3610                           	opt stack 0
  3611  00105A                     _D_UART_Write:
  3612                           	opt stack 22
  3613                           
  3614                           ;UART_Driver.c: 207: printf(startCharacter);
  3615                           
  3616                           ; BSR set to: 0
  3617                           ;incstack = 0
  3618  00105A  C048  F0E0         	movff	_startCharacter,printf@f
  3619  00105E  C049  F0E1         	movff	_startCharacter+1,printf@f+1
  3620  001062  0100               	movlb	0	; () banked
  3621  001064  51E0               	movf	printf@f& (0+255),w,b
  3622  001066  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3623  001068  A4D8               	btfss	status,2,c
  3624  00106A  0E00               	movlw	low (__mediumconst shr (0+16))
  3625  00106C  6FE2               	movwf	(printf@f+2)& (0+255),b
  3626  00106E  EC33  F006         	call	_printf	;wreg free
  3627                           
  3628                           ;UART_Driver.c: 209: printf(messageCharacter);
  3629  001072  C044  F0E0         	movff	_messageCharacter,printf@f
  3630  001076  C045  F0E1         	movff	_messageCharacter+1,printf@f+1
  3631  00107A  0100               	movlb	0	; () banked
  3632  00107C  51E0               	movf	printf@f& (0+255),w,b
  3633  00107E  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3634  001080  A4D8               	btfss	status,2,c
  3635  001082  0E00               	movlw	low (__mediumconst shr (0+16))
  3636  001084  6FE2               	movwf	(printf@f+2)& (0+255),b
  3637  001086  EC33  F006         	call	_printf	;wreg free
  3638                           
  3639                           ;UART_Driver.c: 210: printf(deviceName);
  3640  00108A  C034  F0E0         	movff	_deviceName,printf@f
  3641  00108E  C035  F0E1         	movff	_deviceName+1,printf@f+1
  3642  001092  C036  F0E2         	movff	_deviceName+2,printf@f+2
  3643  001096  EC33  F006         	call	_printf	;wreg free
  3644                           
  3645                           ;UART_Driver.c: 212: printf(":");printf(command);
  3646  00109A  0E37               	movlw	low STR_6
  3647  00109C  0100               	movlb	0	; () banked
  3648  00109E  6FE0               	movwf	printf@f& (0+255),b
  3649  0010A0  0E08               	movlw	high STR_6
  3650  0010A2  6FE1               	movwf	(printf@f+1)& (0+255),b
  3651  0010A4  51E0               	movf	printf@f& (0+255),w,b
  3652  0010A6  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3653  0010A8  A4D8               	btfss	status,2,c
  3654  0010AA  0E00               	movlw	low (__mediumconst shr (0+16))
  3655  0010AC  6FE2               	movwf	(printf@f+2)& (0+255),b
  3656  0010AE  EC33  F006         	call	_printf	;wreg free
  3657  0010B2  C1A6  F0E0         	movff	D_UART_Write@command,printf@f
  3658  0010B6  C1A7  F0E1         	movff	D_UART_Write@command+1,printf@f+1
  3659  0010BA  0100               	movlb	0	; () banked
  3660  0010BC  6BE2               	clrf	(printf@f+2)& (0+255),b
  3661  0010BE  51E0               	movf	printf@f& (0+255),w,b
  3662  0010C0  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3663  0010C2  B4D8               	btfsc	status,2,c
  3664  0010C4  D007               	goto	u2001
  3665  0010C6  0E07               	movlw	(high __ramtop+-1)
  3666  0010C8  0101               	movlb	1	; () banked
  3667  0010CA  65A7               	cpfsgt	(D_UART_Write@command+1)& (0+255),b
  3668  0010CC  D001               	goto	u20011
  3669  0010CE  D002               	goto	u2001
  3670  0010D0                     u20011:
  3671  0010D0  0100               	movlb	0	; () banked
  3672  0010D2  8BE2               	bsf	(printf@f+2)& (0+255),5,b
  3673  0010D4                     u2001:
  3674  0010D4  EC33  F006         	call	_printf	;wreg free
  3675                           
  3676                           ;UART_Driver.c: 214: printf(":");printf(data);
  3677  0010D8  0E37               	movlw	low STR_6
  3678  0010DA  0100               	movlb	0	; () banked
  3679  0010DC  6FE0               	movwf	printf@f& (0+255),b
  3680  0010DE  0E08               	movlw	high STR_6
  3681  0010E0  6FE1               	movwf	(printf@f+1)& (0+255),b
  3682  0010E2  51E0               	movf	printf@f& (0+255),w,b
  3683  0010E4  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3684  0010E6  A4D8               	btfss	status,2,c
  3685  0010E8  0E00               	movlw	low (__mediumconst shr (0+16))
  3686  0010EA  6FE2               	movwf	(printf@f+2)& (0+255),b
  3687  0010EC  EC33  F006         	call	_printf	;wreg free
  3688  0010F0  C1A8  F0E0         	movff	D_UART_Write@data,printf@f
  3689  0010F4  C1A9  F0E1         	movff	D_UART_Write@data+1,printf@f+1
  3690  0010F8  0100               	movlb	0	; () banked
  3691  0010FA  6BE2               	clrf	(printf@f+2)& (0+255),b
  3692  0010FC  51E0               	movf	printf@f& (0+255),w,b
  3693  0010FE  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3694  001100  B4D8               	btfsc	status,2,c
  3695  001102  D007               	goto	u2011
  3696  001104  0E07               	movlw	(high __ramtop+-1)
  3697  001106  0101               	movlb	1	; () banked
  3698  001108  65A9               	cpfsgt	(D_UART_Write@data+1)& (0+255),b
  3699  00110A  D001               	goto	u20111
  3700  00110C  D002               	goto	u2011
  3701  00110E                     u20111:
  3702  00110E  0100               	movlb	0	; () banked
  3703  001110  8BE2               	bsf	(printf@f+2)& (0+255),5,b
  3704  001112                     u2011:
  3705  001112  EC33  F006         	call	_printf	;wreg free
  3706                           
  3707                           ;UART_Driver.c: 216: printf(stopCharacter);
  3708  001116  C046  F0E0         	movff	_stopCharacter,printf@f
  3709  00111A  C047  F0E1         	movff	_stopCharacter+1,printf@f+1
  3710  00111E  0100               	movlb	0	; () banked
  3711  001120  51E0               	movf	printf@f& (0+255),w,b
  3712  001122  11E1               	iorwf	(printf@f+1)& (0+255),w,b
  3713  001124  A4D8               	btfss	status,2,c
  3714  001126  0E00               	movlw	low (__mediumconst shr (0+16))
  3715  001128  6FE2               	movwf	(printf@f+2)& (0+255),b
  3716  00112A  EC33  F006         	call	_printf	;wreg free
  3717                           
  3718                           ;UART_Driver.c: 217: _delay((unsigned long)((1)*(16000000UL/4000.0)));
  3719  00112E  0E06               	movlw	6
  3720  001130  0101               	movlb	1	; () banked
  3721  001132  6FAA               	movwf	??_D_UART_Write& (0+255),b
  3722  001134  0E30               	movlw	48
  3723  001136                     u2617:
  3724  001136  2EE8               	decfsz	wreg,f,c
  3725  001138  D7FE               	bra	u2617
  3726  00113A  2FAA               	decfsz	??_D_UART_Write& (0+255),f,b
  3727  00113C  D7FC               	bra	u2617
  3728  00113E  F000               	nop	
  3729  001140  0012               	return		;funcret
  3730  001142                     __end_of_D_UART_Write:
  3731                           	opt stack 0
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           prodh	equ	0xFF4
  3737                           prodl	equ	0xFF3
  3738                           intcon	equ	0xFF2
  3739                           intcon2	equ	0xFF1
  3740                           postinc0	equ	0xFEE
  3741                           plusw0	equ	0xFEB
  3742                           wreg	equ	0xFE8
  3743                           indf1	equ	0xFE7
  3744                           postinc1	equ	0xFE6
  3745                           postdec1	equ	0xFE5
  3746                           fsr1h	equ	0xFE2
  3747                           fsr1l	equ	0xFE1
  3748                           indf2	equ	0xFDF
  3749                           postinc2	equ	0xFDE
  3750                           postdec2	equ	0xFDD
  3751                           plusw2	equ	0xFDB
  3752                           fsr2h	equ	0xFDA
  3753                           fsr2l	equ	0xFD9
  3754                           status	equ	0xFD8
  3755                           
  3756 ;; *************** function _printf *****************
  3757 ;; Defined at:
  3758 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;  f               3   28[BANK0 ] PTR const unsigned char 
  3761 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  3762 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  3763 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  3764 ;;		 -> C_DOOR_SendStates@com(3), 
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;  idx             1   32[BANK0 ] unsigned char 
  3767 ;;  tmpval          4    0        struct .
  3768 ;;  cp              3    0        PTR const unsigned char 
  3769 ;;  val             2   35[BANK0 ] unsigned int 
  3770 ;;  ap              2   33[BANK0 ] PTR void [1]
  3771 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3772 ;;  len             2    0        unsigned int 
  3773 ;;  c               1   38[BANK0 ] char 
  3774 ;;  prec            1   37[BANK0 ] char 
  3775 ;;  flag            1   31[BANK0 ] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  2   28[BANK0 ] int 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3785 ;;      Params:         0       3       0       0       0       0       0       0       0
  3786 ;;      Locals:         0       8       0       0       0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3788 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3789 ;;Total ram usage:       11 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    7
  3792 ;; This function calls:
  3793 ;;		___lwdiv
  3794 ;;		_putch
  3795 ;; This function is called by:
  3796 ;;		_D_UART_Write
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           	psect	text21
  3801  000C66                     __ptext21:
  3802                           	opt stack 0
  3803  000C66                     _printf:
  3804                           	opt stack 22
  3805                           
  3806                           ;doprnt.c: 466: va_list ap;
  3807                           ;doprnt.c: 499: signed char c;
  3808                           ;doprnt.c: 506: signed char prec;
  3809                           ;doprnt.c: 508: unsigned char flag;
  3810                           ;doprnt.c: 523: union {
  3811                           ;doprnt.c: 524: unsigned long vd;
  3812                           ;doprnt.c: 525: double integ;
  3813                           ;doprnt.c: 526: } tmpval;
  3814                           ;doprnt.c: 528: unsigned int val;
  3815                           ;doprnt.c: 529: unsigned len;
  3816                           ;doprnt.c: 530: const char * cp;
  3817                           ;doprnt.c: 533: *ap = __va_start();
  3818                           
  3819                           ;incstack = 0
  3820  000C66  0EE3               	movlw	low (?_printf+3)
  3821  000C68  0100               	movlb	0	; () banked
  3822  000C6A  6FE5               	movwf	printf@ap& (0+255),b
  3823  000C6C  0E00               	movlw	high (?_printf+3)
  3824  000C6E  6FE6               	movwf	(printf@ap+1)& (0+255),b
  3825                           
  3826                           ;doprnt.c: 536: while(c = *f++) {
  3827  000C70  D08B               	goto	u1830
  3828  000C72                     
  3829                           ; BSR set to: 0
  3830                           ;doprnt.c: 538: if(c != '%')
  3831                           
  3832                           ; BSR set to: 0
  3833  000C72  0E25               	movlw	37
  3834  000C74  19EA               	xorwf	printf@c& (0+255),w,b
  3835  000C76  B4D8               	btfsc	status,2,c
  3836  000C78  D004               	goto	l369
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;doprnt.c: 540: {
  3840                           ;doprnt.c: 541: (putch(c) );
  3841  000C7A  51EA               	movf	printf@c& (0+255),w,b
  3842  000C7C  EC1E  F00C         	call	_putch
  3843                           
  3844                           ;doprnt.c: 542: continue;
  3845  000C80  D083               	goto	u1830
  3846  000C82                     l369:
  3847                           
  3848                           ;doprnt.c: 543: }
  3849                           ;doprnt.c: 548: flag = 0;
  3850  000C82  0E00               	movlw	0
  3851  000C84  0100               	movlb	0	; () banked
  3852  000C86  6FE3               	movwf	printf@flag& (0+255),b
  3853                           
  3854                           ;doprnt.c: 635: switch(c = *f++) {
  3855  000C88  D004               	goto	l370
  3856  000C8A                     
  3857                           ; BSR set to: 0
  3858                           ;doprnt.c: 809: (putch(c) );
  3859                           
  3860                           ; BSR set to: 0
  3861  000C8A  51EA               	movf	printf@c& (0+255),w,b
  3862  000C8C  EC1E  F00C         	call	_putch
  3863                           
  3864                           ;doprnt.c: 810: continue;
  3865  000C90  D07B               	goto	u1830
  3866  000C92                     l370:
  3867  000C92  C0E0  FFF6         	movff	printf@f,tblptrl
  3868  000C96  C0E1  FFF7         	movff	printf@f+1,tblptrh
  3869  000C9A  C0E2  FFF8         	movff	printf@f+2,tblptru
  3870  000C9E  0E01               	movlw	1
  3871  000CA0  0100               	movlb	0	; () banked
  3872  000CA2  27E0               	addwf	printf@f& (0+255),f,b
  3873  000CA4  0E00               	movlw	0
  3874  000CA6  23E1               	addwfc	(printf@f+1)& (0+255),f,b
  3875  000CA8  23E2               	addwfc	(printf@f+2)& (0+255),f,b
  3876  000CAA  BAF8               	btfsc	tblptru,5,c
  3877  000CAC  D003               	bra	u1797
  3878  000CAE  0008               	tblrd		*
  3879  000CB0  50F5               	movf	tablat,w,c
  3880  000CB2  D005               	bra	u1790
  3881  000CB4                     u1797:
  3882  000CB4  CFF6 FFE9          	movff	tblptrl,fsr0l
  3883  000CB8  CFF7 FFEA          	movff	tblptrh,fsr0h
  3884  000CBC  50EF               	movf	indf0,w,c
  3885  000CBE                     u1790:
  3886  000CBE  0100               	movlb	0	; () banked
  3887  000CC0  6FEA               	movwf	printf@c& (0+255),b
  3888  000CC2  51EA               	movf	printf@c& (0+255),w,b
  3889                           
  3890                           ; Switch size 1, requested type "space"
  3891                           ; Number of cases is 2, Range of values is 0 to 120
  3892                           ; switch strategies available:
  3893                           ; Name         Instructions Cycles
  3894                           ; simple_byte            7     4 (average)
  3895                           ;	Chosen strategy is simple_byte
  3896  000CC4  0A00               	xorlw	0	; case 0
  3897  000CC6  B4D8               	btfsc	status,2,c
  3898  000CC8  0012               	return	
  3899  000CCA  0A78               	xorlw	120	; case 120
  3900  000CCC  A4D8               	btfss	status,2,c
  3901  000CCE  D7DD               	goto	l375
  3902                           
  3903                           ;doprnt.c: 1273: {
  3904                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3905                           
  3906                           ; BSR set to: 0
  3907  000CD0  C0E5  FFD9         	movff	printf@ap,fsr2l
  3908  000CD4  C0E6  FFDA         	movff	printf@ap+1,fsr2h
  3909  000CD8  CFDE F0E7          	movff	postinc2,printf@val
  3910  000CDC  CFDD F0E8          	movff	postdec2,printf@val+1
  3911  000CE0  0E02               	movlw	2
  3912  000CE2  0100               	movlb	0	; () banked
  3913  000CE4  27E5               	addwf	printf@ap& (0+255),f,b
  3914  000CE6  0E00               	movlw	0
  3915  000CE8  23E6               	addwfc	(printf@ap+1)& (0+255),f,b
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;doprnt.c: 1287: }
  3919                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  3920  000CEA  0E01               	movlw	1
  3921  000CEC  6FEA               	movwf	printf@c& (0+255),b
  3922  000CEE  D014               	goto	l2203
  3923  000CF0                     
  3924                           ; BSR set to: 0
  3925                           ;doprnt.c: 1317: if(val < hexpowers[c])
  3926                           
  3927                           ; BSR set to: 0
  3928  000CF0  51EA               	movf	printf@c& (0+255),w,b
  3929  000CF2  0D02               	mullw	2
  3930  000CF4  0E01               	movlw	low _hexpowers
  3931  000CF6  24F3               	addwf	prodl,w,c
  3932  000CF8  6EF6               	movwf	tblptrl,c
  3933  000CFA  0E08               	movlw	high _hexpowers
  3934  000CFC  20F4               	addwfc	prodh,w,c
  3935  000CFE  6EF7               	movwf	tblptrh,c
  3936  000D00                     	if	1	;There are 3 active tblptr bytes
  3937  000D00  6AF8               	clrf	tblptru,c
  3938  000D02  0E00               	movlw	low (__mediumconst shr (0+16))
  3939  000D04  22F8               	addwfc	tblptru,f,c
  3940  000D06                     	endif
  3941  000D06  0009               	tblrd		*+
  3942  000D08  50F5               	movf	tablat,w,c
  3943  000D0A  5DE7               	subwf	printf@val& (0+255),w,b
  3944  000D0C  0009               	tblrd		*+
  3945  000D0E  50F5               	movf	tablat,w,c
  3946  000D10  59E8               	subwfb	(printf@val+1)& (0+255),w,b
  3947  000D12  A0D8               	btfss	status,0,c
  3948  000D14  D005               	goto	u1820
  3949                           
  3950                           ; BSR set to: 0
  3951                           
  3952                           ; BSR set to: 0
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;doprnt.c: 1318: break;
  3956  000D16  2BEA               	incf	printf@c& (0+255),f,b
  3957  000D18                     l2203:
  3958                           
  3959                           ; BSR set to: 0
  3960  000D18  0E04               	movlw	4
  3961  000D1A  19EA               	xorwf	printf@c& (0+255),w,b
  3962  000D1C  A4D8               	btfss	status,2,c
  3963  000D1E  D7E8               	goto	l376
  3964  000D20                     u1820:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;doprnt.c: 1422: {
  3968                           ;doprnt.c: 1469: }
  3969                           ;doprnt.c: 1472: prec = c;
  3970  000D20  C0EA  F0E9         	movff	printf@c,printf@prec
  3971                           
  3972                           ;doprnt.c: 1474: while(prec--) {
  3973  000D24  D02C               	goto	l379
  3974  000D26                     
  3975                           ; BSR set to: 0
  3976                           ;doprnt.c: 1478: {
  3977                           ;doprnt.c: 1499: {
  3978                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  3979                           
  3980                           ; BSR set to: 0
  3981  000D26  C0E7  F0D9         	movff	printf@val,___lwdiv@dividend
  3982  000D2A  C0E8  F0DA         	movff	printf@val+1,___lwdiv@dividend+1
  3983  000D2E  51E9               	movf	printf@prec& (0+255),w,b
  3984  000D30  0D02               	mullw	2
  3985  000D32  0E01               	movlw	low _hexpowers
  3986  000D34  24F3               	addwf	prodl,w,c
  3987  000D36  6EF6               	movwf	tblptrl,c
  3988  000D38  0E08               	movlw	high _hexpowers
  3989  000D3A  20F4               	addwfc	prodh,w,c
  3990  000D3C  6EF7               	movwf	tblptrh,c
  3991  000D3E                     	if	1	;There are 3 active tblptr bytes
  3992  000D3E  6AF8               	clrf	tblptru,c
  3993  000D40  0E00               	movlw	low (__mediumconst shr (0+16))
  3994  000D42  22F8               	addwfc	tblptru,f,c
  3995  000D44                     	endif
  3996  000D44  0009               	tblrd		*+
  3997  000D46  CFF5 F0DB          	movff	tablat,___lwdiv@divisor
  3998  000D4A  000A               	tblrd		*-
  3999  000D4C  CFF5 F0DC          	movff	tablat,___lwdiv@divisor+1
  4000  000D50  EC50  F00B         	call	___lwdiv	;wreg free
  4001  000D54  0100               	movlb	0	; () banked
  4002  000D56  51D9               	movf	?___lwdiv& (0+255),w,b
  4003  000D58  0B0F               	andlw	15
  4004  000D5A  6FE4               	movwf	printf@idx& (0+255),b
  4005                           
  4006                           ; BSR set to: 0
  4007                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4008  000D5C  51E4               	movf	printf@idx& (0+255),w,b
  4009  000D5E  0D01               	mullw	1
  4010  000D60  0E09               	movlw	low STR_17
  4011  000D62  24F3               	addwf	prodl,w,c
  4012  000D64  6EF6               	movwf	tblptrl,c
  4013  000D66  0E08               	movlw	high STR_17
  4014  000D68  20F4               	addwfc	prodh,w,c
  4015  000D6A  6EF7               	movwf	tblptrh,c
  4016  000D6C                     	if	1	;There are 3 active tblptr bytes
  4017  000D6C  6AF8               	clrf	tblptru,c
  4018  000D6E  0E00               	movlw	low (__mediumconst shr (0+16))
  4019  000D70  22F8               	addwfc	tblptru,f,c
  4020  000D72                     	endif
  4021  000D72  0008               	tblrd		*
  4022  000D74  CFF5 F0EA          	movff	tablat,printf@c
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;doprnt.c: 1508: }
  4026                           ;doprnt.c: 1523: }
  4027                           ;doprnt.c: 1524: (putch(c) );
  4028  000D78  51EA               	movf	printf@c& (0+255),w,b
  4029  000D7A  EC1E  F00C         	call	_putch
  4030  000D7E                     l379:
  4031  000D7E  0100               	movlb	0	; () banked
  4032  000D80  07E9               	decf	printf@prec& (0+255),f,b
  4033  000D82  29E9               	incf	printf@prec& (0+255),w,b
  4034  000D84  A4D8               	btfss	status,2,c
  4035  000D86  D7CF               	goto	l380
  4036  000D88                     u1830:
  4037                           
  4038                           ; BSR set to: 0
  4039                           
  4040                           ; BSR set to: 0
  4041  000D88  C0E0  FFF6         	movff	printf@f,tblptrl
  4042  000D8C  C0E1  FFF7         	movff	printf@f+1,tblptrh
  4043  000D90  C0E2  FFF8         	movff	printf@f+2,tblptru
  4044  000D94  0E01               	movlw	1
  4045  000D96  0100               	movlb	0	; () banked
  4046  000D98  27E0               	addwf	printf@f& (0+255),f,b
  4047  000D9A  0E00               	movlw	0
  4048  000D9C  23E1               	addwfc	(printf@f+1)& (0+255),f,b
  4049  000D9E  23E2               	addwfc	(printf@f+2)& (0+255),f,b
  4050  000DA0  BAF8               	btfsc	tblptru,5,c
  4051  000DA2  D003               	bra	u1847
  4052  000DA4  0008               	tblrd		*
  4053  000DA6  50F5               	movf	tablat,w,c
  4054  000DA8  D005               	bra	u1840
  4055  000DAA                     u1847:
  4056  000DAA  CFF6 FFE9          	movff	tblptrl,fsr0l
  4057  000DAE  CFF7 FFEA          	movff	tblptrh,fsr0h
  4058  000DB2  50EF               	movf	indf0,w,c
  4059  000DB4                     u1840:
  4060  000DB4  0100               	movlb	0	; () banked
  4061  000DB6  6FEA               	movwf	printf@c& (0+255),b
  4062  000DB8  51EA               	movf	printf@c& (0+255),w,b
  4063  000DBA  B4D8               	btfsc	status,2,c
  4064  000DBC  0012               	return	
  4065  000DBE  D759               	goto	l368
  4066  000DC0                     __end_of_printf:
  4067                           	opt stack 0
  4068                           tblptru	equ	0xFF8
  4069                           tblptrh	equ	0xFF7
  4070                           tblptrl	equ	0xFF6
  4071                           tablat	equ	0xFF5
  4072                           prodh	equ	0xFF4
  4073                           prodl	equ	0xFF3
  4074                           intcon	equ	0xFF2
  4075                           intcon2	equ	0xFF1
  4076                           indf0	equ	0xFEF
  4077                           postinc0	equ	0xFEE
  4078                           plusw0	equ	0xFEB
  4079                           fsr0h	equ	0xFEA
  4080                           fsr0l	equ	0xFE9
  4081                           wreg	equ	0xFE8
  4082                           indf1	equ	0xFE7
  4083                           postinc1	equ	0xFE6
  4084                           postdec1	equ	0xFE5
  4085                           fsr1h	equ	0xFE2
  4086                           fsr1l	equ	0xFE1
  4087                           indf2	equ	0xFDF
  4088                           postinc2	equ	0xFDE
  4089                           postdec2	equ	0xFDD
  4090                           plusw2	equ	0xFDB
  4091                           fsr2h	equ	0xFDA
  4092                           fsr2l	equ	0xFD9
  4093                           status	equ	0xFD8
  4094                           
  4095 ;; *************** function _putch *****************
  4096 ;; Defined at:
  4097 ;;		line 243 in file "Drivers/UART_Driver.c"
  4098 ;; Parameters:    Size  Location     Type
  4099 ;;  data            1    wreg     unsigned char 
  4100 ;; Auto vars:     Size  Location     Type
  4101 ;;  data            1   21[BANK0 ] unsigned char 
  4102 ;;  max             1   22[BANK0 ] unsigned char 
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0, cstack
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4112 ;;      Params:         0       0       0       0       0       0       0       0       0
  4113 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4115 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4116 ;;Total ram usage:        2 bytes
  4117 ;; Hardware stack levels used:    1
  4118 ;; Hardware stack levels required when called:    6
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_printf
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           	psect	text22
  4127  00183C                     __ptext22:
  4128                           	opt stack 0
  4129  00183C                     _putch:
  4130                           	opt stack 22
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;incstack = 0
  4134                           ;putch@data stored from wreg
  4135  00183C  0100               	movlb	0	; () banked
  4136  00183E  6FD9               	movwf	putch@data& (0+255),b
  4137                           
  4138                           ;UART_Driver.c: 244: uint8_t max = 0;
  4139  001840  0E00               	movlw	0
  4140  001842  0100               	movlb	0	; () banked
  4141  001844  6FDA               	movwf	putch@max& (0+255),b
  4142                           
  4143                           ;UART_Driver.c: 246: while(TXSTAbits.TRMT == 0 && max < 200) {
  4144  001846  D005               	goto	l166
  4145  001848                     
  4146                           ; BSR set to: 0
  4147                           ;UART_Driver.c: 247: max++;
  4148                           
  4149                           ; BSR set to: 0
  4150  001848  2BDA               	incf	putch@max& (0+255),f,b
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;UART_Driver.c: 248: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  4154  00184A  0E06               	movlw	6
  4155  00184C                     u2627:
  4156  00184C  2EE8               	decfsz	wreg,f,c
  4157  00184E  D7FE               	bra	u2627
  4158  001850  D000               	nop2	
  4159  001852                     l166:
  4160  001852  B2AC               	btfsc	4012,1,c	;volatile
  4161  001854  D004               	goto	u1690
  4162  001856  0EC7               	movlw	199
  4163  001858  0100               	movlb	0	; () banked
  4164  00185A  65DA               	cpfsgt	putch@max& (0+255),b
  4165  00185C  D7F5               	goto	l167
  4166  00185E                     u1690:
  4167                           
  4168                           ;UART_Driver.c: 249: }
  4169                           ;UART_Driver.c: 250: TXREG = data;
  4170                           
  4171                           ; BSR set to: 0
  4172  00185E  C0D9  FFAD         	movff	putch@data,4013	;volatile
  4173  001862  0012               	return		;funcret
  4174  001864                     __end_of_putch:
  4175                           	opt stack 0
  4176                           tblptru	equ	0xFF8
  4177                           tblptrh	equ	0xFF7
  4178                           tblptrl	equ	0xFF6
  4179                           tablat	equ	0xFF5
  4180                           prodh	equ	0xFF4
  4181                           prodl	equ	0xFF3
  4182                           intcon	equ	0xFF2
  4183                           intcon2	equ	0xFF1
  4184                           indf0	equ	0xFEF
  4185                           postinc0	equ	0xFEE
  4186                           plusw0	equ	0xFEB
  4187                           fsr0h	equ	0xFEA
  4188                           fsr0l	equ	0xFE9
  4189                           wreg	equ	0xFE8
  4190                           indf1	equ	0xFE7
  4191                           postinc1	equ	0xFE6
  4192                           postdec1	equ	0xFE5
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           postinc2	equ	0xFDE
  4197                           postdec2	equ	0xFDD
  4198                           plusw2	equ	0xFDB
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function ___lwdiv *****************
  4204 ;; Defined at:
  4205 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  dividend        2   21[BANK0 ] unsigned int 
  4208 ;;  divisor         2   23[BANK0 ] unsigned int 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  quotient        2   26[BANK0 ] unsigned int 
  4211 ;;  counter         1   25[BANK0 ] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  2   21[BANK0 ] unsigned int 
  4214 ;; Registers used:
  4215 ;;		wreg, status,2, status,0
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4221 ;;      Params:         0       4       0       0       0       0       0       0       0
  4222 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4224 ;;      Totals:         0       7       0       0       0       0       0       0       0
  4225 ;;Total ram usage:        7 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    6
  4228 ;; This function calls:
  4229 ;;		Nothing
  4230 ;; This function is called by:
  4231 ;;		_printf
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text23
  4236  0016A0                     __ptext23:
  4237                           	opt stack 0
  4238  0016A0                     ___lwdiv:
  4239                           	opt stack 22
  4240                           
  4241                           ;incstack = 0
  4242  0016A0  0E00               	movlw	0
  4243  0016A2  0100               	movlb	0	; () banked
  4244  0016A4  6FDF               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4245  0016A6  0E00               	movlw	0
  4246  0016A8  6FDE               	movwf	___lwdiv@quotient& (0+255),b
  4247                           
  4248                           ; BSR set to: 0
  4249  0016AA  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4250  0016AC  11DC               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4251  0016AE  B4D8               	btfsc	status,2,c
  4252  0016B0  D01C               	goto	l792
  4253                           
  4254                           ; BSR set to: 0
  4255  0016B2  0E01               	movlw	1
  4256  0016B4  6FDD               	movwf	___lwdiv@counter& (0+255),b
  4257  0016B6  D004               	goto	l787
  4258  0016B8                     
  4259                           ; BSR set to: 0
  4260                           
  4261                           ; BSR set to: 0
  4262  0016B8  90D8               	bcf	status,0,c
  4263  0016BA  37DB               	rlcf	___lwdiv@divisor& (0+255),f,b
  4264  0016BC  37DC               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4265  0016BE  2BDD               	incf	___lwdiv@counter& (0+255),f,b
  4266  0016C0                     l787:
  4267                           
  4268                           ; BSR set to: 0
  4269                           
  4270                           ; BSR set to: 0
  4271  0016C0  AFDC               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4272  0016C2  D7FA               	goto	l788
  4273  0016C4                     u1710:
  4274                           
  4275                           ; BSR set to: 0
  4276                           
  4277                           ; BSR set to: 0
  4278                           
  4279                           ; BSR set to: 0
  4280  0016C4  90D8               	bcf	status,0,c
  4281  0016C6  37DE               	rlcf	___lwdiv@quotient& (0+255),f,b
  4282  0016C8  37DF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4283                           
  4284                           ; BSR set to: 0
  4285  0016CA  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4286  0016CC  5DD9               	subwf	___lwdiv@dividend& (0+255),w,b
  4287  0016CE  51DC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4288  0016D0  59DA               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4289  0016D2  A0D8               	btfss	status,0,c
  4290  0016D4  D005               	goto	l791
  4291                           
  4292                           ; BSR set to: 0
  4293  0016D6  51DB               	movf	___lwdiv@divisor& (0+255),w,b
  4294  0016D8  5FD9               	subwf	___lwdiv@dividend& (0+255),f,b
  4295  0016DA  51DC               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4296  0016DC  5BDA               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4297                           
  4298                           ; BSR set to: 0
  4299  0016DE  81DE               	bsf	___lwdiv@quotient& (0+255),0,b
  4300  0016E0                     l791:
  4301                           
  4302                           ; BSR set to: 0
  4303                           
  4304                           ; BSR set to: 0
  4305  0016E0  90D8               	bcf	status,0,c
  4306  0016E2  33DC               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4307  0016E4  33DB               	rrcf	___lwdiv@divisor& (0+255),f,b
  4308                           
  4309                           ; BSR set to: 0
  4310  0016E6  2FDD               	decfsz	___lwdiv@counter& (0+255),f,b
  4311  0016E8  D7ED               	goto	u1710
  4312  0016EA                     l792:
  4313                           
  4314                           ; BSR set to: 0
  4315                           
  4316                           ; BSR set to: 0
  4317  0016EA  C0DE  F0D9         	movff	___lwdiv@quotient,?___lwdiv
  4318  0016EE  C0DF  F0DA         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4319                           
  4320                           ; BSR set to: 0
  4321  0016F2  0012               	return		;funcret
  4322  0016F4                     __end_of___lwdiv:
  4323                           	opt stack 0
  4324                           tblptru	equ	0xFF8
  4325                           tblptrh	equ	0xFF7
  4326                           tblptrl	equ	0xFF6
  4327                           tablat	equ	0xFF5
  4328                           prodh	equ	0xFF4
  4329                           prodl	equ	0xFF3
  4330                           intcon	equ	0xFF2
  4331                           intcon2	equ	0xFF1
  4332                           indf0	equ	0xFEF
  4333                           postinc0	equ	0xFEE
  4334                           plusw0	equ	0xFEB
  4335                           fsr0h	equ	0xFEA
  4336                           fsr0l	equ	0xFE9
  4337                           wreg	equ	0xFE8
  4338                           indf1	equ	0xFE7
  4339                           postinc1	equ	0xFE6
  4340                           postdec1	equ	0xFE5
  4341                           fsr1h	equ	0xFE2
  4342                           fsr1l	equ	0xFE1
  4343                           indf2	equ	0xFDF
  4344                           postinc2	equ	0xFDE
  4345                           postdec2	equ	0xFDD
  4346                           plusw2	equ	0xFDB
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function _C_DOOR_ReadSensors *****************
  4352 ;; Defined at:
  4353 ;;		line 102 in file "Controllers/DOOR_Controller.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  d               1   25[BANK0 ] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4367 ;;      Params:         0       0       0       0       0       0       0       0       0
  4368 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4369 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4370 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4371 ;;Total ram usage:        5 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    6
  4374 ;; This function calls:
  4375 ;;		Nothing
  4376 ;; This function is called by:
  4377 ;;		_main
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text24
  4382  00143C                     __ptext24:
  4383                           	opt stack 0
  4384  00143C                     _C_DOOR_ReadSensors:
  4385                           	opt stack 24
  4386                           
  4387                           ;DOOR_Controller.c: 103: uint8_t d;
  4388                           ;DOOR_Controller.c: 104: for (d = 0; d < door_cnt; d++) {
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;incstack = 0
  4392  00143C  0E00               	movlw	0
  4393  00143E  0100               	movlb	0	; () banked
  4394  001440  6FDD               	movwf	C_DOOR_ReadSensors@d& (0+255),b
  4395  001442  D03E               	goto	l40
  4396  001444                     
  4397                           ; BSR set to: 0
  4398                           ;DOOR_Controller.c: 105: doors[d].is_open = (uint8_t)(((*doors[d].sensor_port >> doors[d
      +                          ].sensor_pin) & 1) == 1);
  4399                           
  4400                           ; BSR set to: 0
  4401  001444  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4402  001446  0D0A               	mullw	10
  4403  001448  0E06               	movlw	6
  4404  00144A  26F3               	addwf	prodl,f,c
  4405  00144C  0E00               	movlw	0
  4406  00144E  22F4               	addwfc	prodh,f,c
  4407  001450  0E60               	movlw	low _doors
  4408  001452  24F3               	addwf	prodl,w,c
  4409  001454  6ED9               	movwf	fsr2l,c
  4410  001456  0E00               	movlw	high _doors
  4411  001458  20F4               	addwfc	prodh,w,c
  4412  00145A  6EDA               	movwf	fsr2h,c
  4413  00145C  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4414  00145E  0D0A               	mullw	10
  4415  001460  0E09               	movlw	9
  4416  001462  26F3               	addwf	prodl,f,c
  4417  001464  0E00               	movlw	0
  4418  001466  22F4               	addwfc	prodh,f,c
  4419  001468  0E60               	movlw	low _doors
  4420  00146A  24F3               	addwf	prodl,w,c
  4421  00146C  6EE1               	movwf	fsr1l,c
  4422  00146E  0E00               	movlw	high _doors
  4423  001470  20F4               	addwfc	prodh,w,c
  4424  001472  6EE2               	movwf	fsr1h,c
  4425  001474  50E7               	movf	indf1,w,c
  4426  001476  6FD9               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4427  001478  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4428  00147A  0D0A               	mullw	10
  4429  00147C  0E07               	movlw	7
  4430  00147E  26F3               	addwf	prodl,f,c
  4431  001480  0E00               	movlw	0
  4432  001482  22F4               	addwfc	prodh,f,c
  4433  001484  0E60               	movlw	low _doors
  4434  001486  24F3               	addwf	prodl,w,c
  4435  001488  6EE1               	movwf	fsr1l,c
  4436  00148A  0E00               	movlw	high _doors
  4437  00148C  20F4               	addwfc	prodh,w,c
  4438  00148E  6EE2               	movwf	fsr1h,c
  4439  001490  CFE6 F0DA          	movff	postinc1,??_C_DOOR_ReadSensors+1
  4440  001494  CFE5 F0DB          	movff	postdec1,??_C_DOOR_ReadSensors+2
  4441  001498  C0DA  FFE1         	movff	??_C_DOOR_ReadSensors+1,fsr1l
  4442  00149C  C0DB  FFE2         	movff	??_C_DOOR_ReadSensors+2,fsr1h
  4443  0014A0  50E7               	movf	indf1,w,c
  4444  0014A2  6FDC               	movwf	(??_C_DOOR_ReadSensors+3)& (0+255),b
  4445  0014A4  2BD9               	incf	??_C_DOOR_ReadSensors& (0+255),f,b
  4446  0014A6  D002               	goto	u2104
  4447  0014A8                     u2105:
  4448  0014A8  90D8               	bcf	status,0,c
  4449  0014AA  33DC               	rrcf	(??_C_DOOR_ReadSensors+3)& (0+255),f,b
  4450  0014AC                     u2104:
  4451  0014AC  2FD9               	decfsz	??_C_DOOR_ReadSensors& (0+255),f,b
  4452  0014AE  D7FC               	goto	u2105
  4453  0014B0  0100               	movlb	0	; () banked
  4454  0014B2  A1DC               	btfss	(??_C_DOOR_ReadSensors+3)& (0+255),0,b
  4455  0014B4  D002               	goto	u2110
  4456  0014B6  0E01               	movlw	1
  4457  0014B8  D001               	goto	u2120
  4458  0014BA                     u2110:
  4459  0014BA  0E00               	movlw	0
  4460  0014BC                     u2120:
  4461  0014BC  6EDF               	movwf	indf2,c
  4462                           
  4463                           ; BSR set to: 0
  4464  0014BE  2BDD               	incf	C_DOOR_ReadSensors@d& (0+255),f,b
  4465  0014C0                     l40:
  4466                           
  4467                           ; BSR set to: 0
  4468                           
  4469                           ; BSR set to: 0
  4470  0014C0  51DD               	movf	C_DOOR_ReadSensors@d& (0+255),w,b
  4471  0014C2  6FD9               	movwf	??_C_DOOR_ReadSensors& (0+255),b
  4472  0014C4  6BDA               	clrf	(??_C_DOOR_ReadSensors+1)& (0+255),b
  4473  0014C6  5037               	movf	_door_cnt,w,c
  4474  0014C8  5DD9               	subwf	??_C_DOOR_ReadSensors& (0+255),w,b
  4475  0014CA  51DA               	movf	(??_C_DOOR_ReadSensors+1)& (0+255),w,b
  4476  0014CC  0A80               	xorlw	128
  4477  0014CE  6FDB               	movwf	(??_C_DOOR_ReadSensors+2)& (0+255),b
  4478  0014D0  5038               	movf	_door_cnt+1,w,c
  4479  0014D2  0A80               	xorlw	128
  4480  0014D4  59DB               	subwfb	(??_C_DOOR_ReadSensors+2)& (0+255),w,b
  4481  0014D6  B0D8               	btfsc	status,0,c
  4482  0014D8  0012               	return	
  4483  0014DA  D7B4               	goto	l41
  4484  0014DC                     __end_of_C_DOOR_ReadSensors:
  4485                           	opt stack 0
  4486                           tblptru	equ	0xFF8
  4487                           tblptrh	equ	0xFF7
  4488                           tblptrl	equ	0xFF6
  4489                           tablat	equ	0xFF5
  4490                           prodh	equ	0xFF4
  4491                           prodl	equ	0xFF3
  4492                           intcon	equ	0xFF2
  4493                           intcon2	equ	0xFF1
  4494                           indf0	equ	0xFEF
  4495                           postinc0	equ	0xFEE
  4496                           plusw0	equ	0xFEB
  4497                           fsr0h	equ	0xFEA
  4498                           fsr0l	equ	0xFE9
  4499                           wreg	equ	0xFE8
  4500                           indf1	equ	0xFE7
  4501                           postinc1	equ	0xFE6
  4502                           postdec1	equ	0xFE5
  4503                           fsr1h	equ	0xFE2
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           postinc2	equ	0xFDE
  4507                           postdec2	equ	0xFDD
  4508                           plusw2	equ	0xFDB
  4509                           fsr2h	equ	0xFDA
  4510                           fsr2l	equ	0xFD9
  4511                           status	equ	0xFD8
  4512                           
  4513 ;; *************** function _LowISR *****************
  4514 ;; Defined at:
  4515 ;;		line 189 in file "main.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;		None
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;		None
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  1    wreg      void 
  4522 ;; Registers used:
  4523 ;;		wreg, status,2, status,0
  4524 ;; Tracked objects:
  4525 ;;		On entry : 0/0
  4526 ;;		On exit  : 0/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4529 ;;      Params:         0       0       0       0       0       0       0       0       0
  4530 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4531 ;;      Temps:          0      21       0       0       0       0       0       0       0
  4532 ;;      Totals:         0      21       0       0       0       0       0       0       0
  4533 ;;Total ram usage:       21 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    5
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		Interrupt level 1
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           	psect	intcodelo
  4544  000018                     __pintcodelo:
  4545                           	opt stack 0
  4546  000018                     _LowISR:
  4547                           	opt stack 21
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;incstack = 0
  4551  000018  804A               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  4552  00001A  CFD8 F0C4          	movff	status,??_LowISR
  4553  00001E  CFE8 F0C5          	movff	wreg,??_LowISR+1
  4554  000022  CFE0 F0C6          	movff	bsr,??_LowISR+2
  4555  000026  CFFA F0C7          	movff	pclath,??_LowISR+3
  4556  00002A  CFFB F0C8          	movff	pclatu,??_LowISR+4
  4557  00002E  CFE9 F0C9          	movff	fsr0l,??_LowISR+5
  4558  000032  CFEA F0CA          	movff	fsr0h,??_LowISR+6
  4559  000036  CFE1 F0CB          	movff	fsr1l,??_LowISR+7
  4560  00003A  CFE2 F0CC          	movff	fsr1h,??_LowISR+8
  4561  00003E  CFD9 F0CD          	movff	fsr2l,??_LowISR+9
  4562  000042  CFDA F0CE          	movff	fsr2h,??_LowISR+10
  4563  000046  CFF3 F0CF          	movff	prodl,??_LowISR+11
  4564  00004A  CFF4 F0D0          	movff	prodh,??_LowISR+12
  4565  00004E  CFF6 F0D1          	movff	tblptrl,??_LowISR+13
  4566  000052  CFF7 F0D2          	movff	tblptrh,??_LowISR+14
  4567  000056  CFF8 F0D3          	movff	tblptru,??_LowISR+15
  4568  00005A  CFF5 F0D4          	movff	tablat,??_LowISR+16
  4569  00005E  C04A  F0D5         	movff	btemp,??_LowISR+17
  4570  000062  C04B  F0D6         	movff	btemp+1,??_LowISR+18
  4571  000066  C04C  F0D7         	movff	btemp+2,??_LowISR+19
  4572  00006A  C04D  F0D8         	movff	btemp+3,??_LowISR+20
  4573                           
  4574                           ;main.c: 191: if (INTCONbits.TMR0IF) {
  4575  00006E  A4F2               	btfss	intcon,2,c	;volatile
  4576  000070  D003               	goto	i1l352
  4577                           
  4578                           ;main.c: 192: INTCONbits.TMR0IF = 0;
  4579  000072  94F2               	bcf	intcon,2,c	;volatile
  4580                           
  4581                           ;main.c: 193: tick = 1;
  4582  000074  0E01               	movlw	1
  4583  000076  6E3D               	movwf	_tick,c
  4584  000078                     i1l352:
  4585                           
  4586                           ;main.c: 194: }
  4587                           ;main.c: 197: if (PIR1bits.TMR1IF) {
  4588  000078  A09E               	btfss	3998,0,c	;volatile
  4589  00007A  D00C               	goto	i1l353
  4590                           
  4591                           ;main.c: 198: TMR1H = 0x5E;
  4592  00007C  0E5E               	movlw	94
  4593  00007E  6ECF               	movwf	4047,c	;volatile
  4594                           
  4595                           ;main.c: 199: TMR1L = 0x00;
  4596  000080  0E00               	movlw	0
  4597  000082  6ECE               	movwf	4046,c	;volatile
  4598                           
  4599                           ;main.c: 201: if (lockDelayCnt < 100-1) {
  4600  000084  0E63               	movlw	99
  4601  000086  603F               	cpfslt	_lockDelayCnt,c
  4602  000088  D002               	goto	i1l354
  4603                           
  4604                           ;main.c: 202: lockDelayCnt++;
  4605  00008A  2A3F               	incf	_lockDelayCnt,f,c
  4606                           
  4607                           ;main.c: 203: } else {
  4608  00008C  D002               	goto	i1l355
  4609  00008E                     i1l354:
  4610                           
  4611                           ;main.c: 204: lock = 1;
  4612  00008E  0E01               	movlw	1
  4613  000090  6E3C               	movwf	_lock,c
  4614  000092                     i1l355:
  4615                           
  4616                           ;main.c: 205: }
  4617                           ;main.c: 207: PIR1bits.TMR1IF = 0;
  4618  000092  909E               	bcf	3998,0,c	;volatile
  4619  000094                     i1l353:
  4620  000094  C0D8  F04D         	movff	??_LowISR+20,btemp+3
  4621  000098  C0D7  F04C         	movff	??_LowISR+19,btemp+2
  4622  00009C  C0D6  F04B         	movff	??_LowISR+18,btemp+1
  4623  0000A0  C0D5  F04A         	movff	??_LowISR+17,btemp
  4624  0000A4  C0D4  FFF5         	movff	??_LowISR+16,tablat
  4625  0000A8  C0D3  FFF8         	movff	??_LowISR+15,tblptru
  4626  0000AC  C0D2  FFF7         	movff	??_LowISR+14,tblptrh
  4627  0000B0  C0D1  FFF6         	movff	??_LowISR+13,tblptrl
  4628  0000B4  C0D0  FFF4         	movff	??_LowISR+12,prodh
  4629  0000B8  C0CF  FFF3         	movff	??_LowISR+11,prodl
  4630  0000BC  C0CE  FFDA         	movff	??_LowISR+10,fsr2h
  4631  0000C0  C0CD  FFD9         	movff	??_LowISR+9,fsr2l
  4632  0000C4  C0CC  FFE2         	movff	??_LowISR+8,fsr1h
  4633  0000C8  C0CB  FFE1         	movff	??_LowISR+7,fsr1l
  4634  0000CC  C0CA  FFEA         	movff	??_LowISR+6,fsr0h
  4635  0000D0  C0C9  FFE9         	movff	??_LowISR+5,fsr0l
  4636  0000D4  C0C8  FFFB         	movff	??_LowISR+4,pclatu
  4637  0000D8  C0C7  FFFA         	movff	??_LowISR+3,pclath
  4638  0000DC  C0C6  FFE0         	movff	??_LowISR+2,bsr
  4639  0000E0  C0C5  FFE8         	movff	??_LowISR+1,wreg
  4640  0000E4  C0C4  FFD8         	movff	??_LowISR,status
  4641  0000E8  904A               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  4642  0000EA  0010               	retfie	
  4643  0000EC                     __end_of_LowISR:
  4644                           	opt stack 0
  4645                           pclatu	equ	0xFFB
  4646                           pclath	equ	0xFFA
  4647                           tblptru	equ	0xFF8
  4648                           tblptrh	equ	0xFF7
  4649                           tblptrl	equ	0xFF6
  4650                           tablat	equ	0xFF5
  4651                           prodh	equ	0xFF4
  4652                           prodl	equ	0xFF3
  4653                           intcon	equ	0xFF2
  4654                           intcon2	equ	0xFF1
  4655                           indf0	equ	0xFEF
  4656                           postinc0	equ	0xFEE
  4657                           plusw0	equ	0xFEB
  4658                           fsr0h	equ	0xFEA
  4659                           fsr0l	equ	0xFE9
  4660                           wreg	equ	0xFE8
  4661                           indf1	equ	0xFE7
  4662                           postinc1	equ	0xFE6
  4663                           postdec1	equ	0xFE5
  4664                           fsr1h	equ	0xFE2
  4665                           fsr1l	equ	0xFE1
  4666                           bsr	equ	0xFE0
  4667                           indf2	equ	0xFDF
  4668                           postinc2	equ	0xFDE
  4669                           postdec2	equ	0xFDD
  4670                           plusw2	equ	0xFDB
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675 ;; *************** function _HighISR *****************
  4676 ;; Defined at:
  4677 ;;		line 255 in file "Drivers/UART_Driver.c"
  4678 ;; Parameters:    Size  Location     Type
  4679 ;;		None
  4680 ;; Auto vars:     Size  Location     Type
  4681 ;;		None
  4682 ;; Return value:  Size  Location     Type
  4683 ;;                  1    wreg      void 
  4684 ;; Registers used:
  4685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4686 ;; Tracked objects:
  4687 ;;		On entry : 0/0
  4688 ;;		On exit  : 0/0
  4689 ;;		Unchanged: 0/0
  4690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4691 ;;      Params:         0       0       0       0       0       0       0       0       0
  4692 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4693 ;;      Temps:         18       0       0       0       0       0       0       0       0
  4694 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4695 ;;Total ram usage:       18 bytes
  4696 ;; Hardware stack levels used:    1
  4697 ;; Hardware stack levels required when called:    4
  4698 ;; This function calls:
  4699 ;;		_fillDataBuffer
  4700 ;; This function is called by:
  4701 ;;		Interrupt level 2
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	intcode
  4706  000008                     __pintcode:
  4707                           	opt stack 0
  4708  000008                     _HighISR:
  4709                           	opt stack 21
  4710                           
  4711                           ;incstack = 0
  4712  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4713  00000A  ED10  F009         	call	int_func,f	;refresh shadow registers
  4714                           pclatu	equ	0xFFB
  4715                           pclath	equ	0xFFA
  4716                           tblptru	equ	0xFF8
  4717                           tblptrh	equ	0xFF7
  4718                           tblptrl	equ	0xFF6
  4719                           tablat	equ	0xFF5
  4720                           prodh	equ	0xFF4
  4721                           prodl	equ	0xFF3
  4722                           intcon	equ	0xFF2
  4723                           intcon2	equ	0xFF1
  4724                           indf0	equ	0xFEF
  4725                           postinc0	equ	0xFEE
  4726                           plusw0	equ	0xFEB
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           bsr	equ	0xFE0
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           plusw2	equ	0xFDB
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744                           	psect	intcode_body
  4745  001220                     __pintcode_body:
  4746                           	opt stack 21
  4747  001220                     int_func:
  4748                           	opt stack 21
  4749  001220  0006               	pop		; remove dummy address from shadow register refresh
  4750  001222  CFFA F016          	movff	pclath,??_HighISR
  4751  001226  CFFB F017          	movff	pclatu,??_HighISR+1
  4752  00122A  CFE9 F018          	movff	fsr0l,??_HighISR+2
  4753  00122E  CFEA F019          	movff	fsr0h,??_HighISR+3
  4754  001232  CFE1 F01A          	movff	fsr1l,??_HighISR+4
  4755  001236  CFE2 F01B          	movff	fsr1h,??_HighISR+5
  4756  00123A  CFD9 F01C          	movff	fsr2l,??_HighISR+6
  4757  00123E  CFDA F01D          	movff	fsr2h,??_HighISR+7
  4758  001242  CFF3 F01E          	movff	prodl,??_HighISR+8
  4759  001246  CFF4 F01F          	movff	prodh,??_HighISR+9
  4760  00124A  CFF6 F020          	movff	tblptrl,??_HighISR+10
  4761  00124E  CFF7 F021          	movff	tblptrh,??_HighISR+11
  4762  001252  CFF8 F022          	movff	tblptru,??_HighISR+12
  4763  001256  CFF5 F023          	movff	tablat,??_HighISR+13
  4764  00125A  C04A  F024         	movff	btemp,??_HighISR+14
  4765  00125E  C04B  F025         	movff	btemp+1,??_HighISR+15
  4766  001262  C04C  F026         	movff	btemp+2,??_HighISR+16
  4767  001266  C04D  F027         	movff	btemp+3,??_HighISR+17
  4768                           
  4769                           ;UART_Driver.c: 256: if (PIR1bits.RC1IF) {
  4770  00126A  AA9E               	btfss	3998,5,c	;volatile
  4771  00126C  D00E               	goto	i2l176
  4772                           
  4773                           ;UART_Driver.c: 257: PIR1bits.RC1IF = 0;
  4774  00126E  9A9E               	bcf	3998,5,c	;volatile
  4775                           
  4776                           ;UART_Driver.c: 260: if(RCSTAbits.FERR == 1) {
  4777  001270  A4AB               	btfss	4011,2,c	;volatile
  4778  001272  D003               	goto	i2l177
  4779                           
  4780                           ;UART_Driver.c: 261: RCREG = 0x00;
  4781  001274  0E00               	movlw	0
  4782  001276  6EAE               	movwf	4014,c	;volatile
  4783                           
  4784                           ;UART_Driver.c: 262: return;
  4785  001278  D008               	goto	i2l176
  4786  00127A                     i2l177:
  4787                           
  4788                           ;UART_Driver.c: 263: }
  4789                           ;UART_Driver.c: 265: if(RCSTAbits.OERR == 1) {
  4790  00127A  A2AB               	btfss	4011,1,c	;volatile
  4791  00127C  D003               	goto	i2l179
  4792                           
  4793                           ;UART_Driver.c: 266: RCSTAbits.CREN = 0;
  4794  00127E  98AB               	bcf	4011,4,c	;volatile
  4795                           
  4796                           ;UART_Driver.c: 267: RCSTAbits.CREN = 1;
  4797  001280  88AB               	bsf	4011,4,c	;volatile
  4798                           
  4799                           ;UART_Driver.c: 268: return;
  4800  001282  D003               	goto	i2l176
  4801  001284                     i2l179:
  4802                           
  4803                           ;UART_Driver.c: 269: }
  4804                           ;UART_Driver.c: 270: fillDataBuffer(RCREG);
  4805  001284  50AE               	movf	4014,w,c	;volatile
  4806  001286  EC6B  F005         	call	_fillDataBuffer
  4807  00128A                     i2l176:
  4808  00128A  C027  F04D         	movff	??_HighISR+17,btemp+3
  4809  00128E  C026  F04C         	movff	??_HighISR+16,btemp+2
  4810  001292  C025  F04B         	movff	??_HighISR+15,btemp+1
  4811  001296  C024  F04A         	movff	??_HighISR+14,btemp
  4812  00129A  C023  FFF5         	movff	??_HighISR+13,tablat
  4813  00129E  C022  FFF8         	movff	??_HighISR+12,tblptru
  4814  0012A2  C021  FFF7         	movff	??_HighISR+11,tblptrh
  4815  0012A6  C020  FFF6         	movff	??_HighISR+10,tblptrl
  4816  0012AA  C01F  FFF4         	movff	??_HighISR+9,prodh
  4817  0012AE  C01E  FFF3         	movff	??_HighISR+8,prodl
  4818  0012B2  C01D  FFDA         	movff	??_HighISR+7,fsr2h
  4819  0012B6  C01C  FFD9         	movff	??_HighISR+6,fsr2l
  4820  0012BA  C01B  FFE2         	movff	??_HighISR+5,fsr1h
  4821  0012BE  C01A  FFE1         	movff	??_HighISR+4,fsr1l
  4822  0012C2  C019  FFEA         	movff	??_HighISR+3,fsr0h
  4823  0012C6  C018  FFE9         	movff	??_HighISR+2,fsr0l
  4824  0012CA  C017  FFFB         	movff	??_HighISR+1,pclatu
  4825  0012CE  C016  FFFA         	movff	??_HighISR,pclath
  4826  0012D2  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4827  0012D4  0011               	retfie		f
  4828  0012D6                     __end_of_HighISR:
  4829                           	opt stack 0
  4830                           pclatu	equ	0xFFB
  4831                           pclath	equ	0xFFA
  4832                           tblptru	equ	0xFF8
  4833                           tblptrh	equ	0xFF7
  4834                           tblptrl	equ	0xFF6
  4835                           tablat	equ	0xFF5
  4836                           prodh	equ	0xFF4
  4837                           prodl	equ	0xFF3
  4838                           intcon	equ	0xFF2
  4839                           intcon2	equ	0xFF1
  4840                           indf0	equ	0xFEF
  4841                           postinc0	equ	0xFEE
  4842                           plusw0	equ	0xFEB
  4843                           fsr0h	equ	0xFEA
  4844                           fsr0l	equ	0xFE9
  4845                           wreg	equ	0xFE8
  4846                           indf1	equ	0xFE7
  4847                           postinc1	equ	0xFE6
  4848                           postdec1	equ	0xFE5
  4849                           fsr1h	equ	0xFE2
  4850                           fsr1l	equ	0xFE1
  4851                           bsr	equ	0xFE0
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           plusw2	equ	0xFDB
  4856                           fsr2h	equ	0xFDA
  4857                           fsr2l	equ	0xFD9
  4858                           status	equ	0xFD8
  4859                           
  4860 ;; *************** function _fillDataBuffer *****************
  4861 ;; Defined at:
  4862 ;;		line 68 in file "Drivers/UART_Driver.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  data            1    wreg     unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  data            1   20[COMRAM] unsigned char 
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4876 ;;      Params:         0       0       0       0       0       0       0       0       0
  4877 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4879 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4880 ;;Total ram usage:        1 bytes
  4881 ;; Hardware stack levels used:    1
  4882 ;; Hardware stack levels required when called:    3
  4883 ;; This function calls:
  4884 ;;		_acknowledge
  4885 ;; This function is called by:
  4886 ;;		_HighISR
  4887 ;; This function uses a non-reentrant model
  4888 ;;
  4889                           
  4890                           	psect	text27
  4891  000AD6                     __ptext27:
  4892                           	opt stack 0
  4893  000AD6                     _fillDataBuffer:
  4894                           	opt stack 21
  4895                           
  4896                           ;incstack = 0
  4897                           ;fillDataBuffer@data stored from wreg
  4898  000AD6  6E15               	movwf	fillDataBuffer@data,c
  4899                           
  4900                           ;UART_Driver.c: 69: switch(readBuffer.state) {
  4901  000AD8  D0B1               	goto	i2l120
  4902  000ADA                     
  4903                           ;UART_Driver.c: 71: if(data == 0x26) {
  4904  000ADA  0E26               	movlw	38
  4905  000ADC  1815               	xorwf	fillDataBuffer@data,w,c
  4906  000ADE  A4D8               	btfss	status,2,c
  4907  000AE0  D00E               	goto	i2l122
  4908                           
  4909                           ;UART_Driver.c: 72: readBuffer.typeCnt = 0;
  4910  000AE2  0E00               	movlw	0
  4911  000AE4  0101               	movlb	1	; () banked
  4912  000AE6  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  4913                           
  4914                           ;UART_Driver.c: 73: readBuffer.senderCnt = 0;
  4915  000AE8  0E00               	movlw	0
  4916  000AEA  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  4917                           
  4918                           ;UART_Driver.c: 74: readBuffer.commandCnt = 0;
  4919  000AEC  0E00               	movlw	0
  4920  000AEE  6F70               	movwf	(_readBuffer+112)& (0+255),b
  4921                           
  4922                           ;UART_Driver.c: 75: readBuffer.messageCnt = 0;
  4923  000AF0  0E00               	movlw	0
  4924  000AF2  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  4925                           
  4926                           ;UART_Driver.c: 76: readReady = 0;
  4927  000AF4  0E00               	movlw	0
  4928  000AF6  6E40               	movwf	_readReady,c
  4929                           
  4930                           ;UART_Driver.c: 77: readBuffer.state = 0x01;
  4931  000AF8  0E01               	movlw	1
  4932  000AFA  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4933                           
  4934                           ;UART_Driver.c: 78: } else {
  4935  000AFC  0012               	return	
  4936  000AFE                     i2l122:
  4937                           
  4938                           ;UART_Driver.c: 79: readBuffer.state = 0x00;
  4939                           
  4940                           ; BSR set to: 1
  4941  000AFE  0E00               	movlw	0
  4942  000B00  0101               	movlb	1	; () banked
  4943  000B02  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4944                           
  4945                           ; BSR set to: 1
  4946                           ;UART_Driver.c: 81: }
  4947                           ;UART_Driver.c: 82: break;
  4948                           
  4949                           ; BSR set to: 1
  4950                           ;UART_Driver.c: 80: return;
  4951  000B04  0012               	return	
  4952  000B06                     
  4953                           ; BSR set to: 1
  4954                           ;UART_Driver.c: 85: if (data == 0x3A) {
  4955                           
  4956                           ; BSR set to: 1
  4957  000B06  0E3A               	movlw	58
  4958  000B08  1815               	xorwf	fillDataBuffer@data,w,c
  4959  000B0A  A4D8               	btfss	status,2,c
  4960  000B0C  D00D               	goto	i2l127
  4961                           
  4962                           ; BSR set to: 1
  4963                           ;UART_Driver.c: 86: readBuffer.state = 0x02;
  4964  000B0E  0E02               	movlw	2
  4965  000B10  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  4966                           
  4967                           ; BSR set to: 1
  4968                           ;UART_Driver.c: 87: readBuffer.type[readBuffer.typeCnt] = '\0';
  4969  000B12  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4970  000B14  0D01               	mullw	1
  4971  000B16  0E00               	movlw	low _readBuffer
  4972  000B18  24F3               	addwf	prodl,w,c
  4973  000B1A  6ED9               	movwf	fsr2l,c
  4974  000B1C  0E01               	movlw	high _readBuffer
  4975  000B1E  20F4               	addwfc	prodh,w,c
  4976  000B20  6EDA               	movwf	fsr2h,c
  4977  000B22  0E00               	movlw	0
  4978  000B24  6EDF               	movwf	indf2,c
  4979                           
  4980                           ;UART_Driver.c: 88: } else {
  4981  000B26  0012               	return	
  4982  000B28                     i2l127:
  4983                           
  4984                           ; BSR set to: 1
  4985                           ;UART_Driver.c: 89: readBuffer.type[readBuffer.typeCnt] = data;
  4986                           
  4987                           ; BSR set to: 1
  4988  000B28  510A               	movf	(_readBuffer+10)& (0+255),w,b
  4989  000B2A  0D01               	mullw	1
  4990  000B2C  0E00               	movlw	low _readBuffer
  4991  000B2E  24F3               	addwf	prodl,w,c
  4992  000B30  6ED9               	movwf	fsr2l,c
  4993  000B32  0E01               	movlw	high _readBuffer
  4994  000B34  20F4               	addwfc	prodh,w,c
  4995  000B36  6EDA               	movwf	fsr2h,c
  4996  000B38  C015  FFDF         	movff	fillDataBuffer@data,indf2
  4997                           
  4998                           ; BSR set to: 1
  4999                           ;UART_Driver.c: 90: readBuffer.typeCnt++;
  5000  000B3C  2B0A               	incf	(_readBuffer+10)& (0+255),f,b
  5001                           
  5002                           ; BSR set to: 1
  5003                           ;UART_Driver.c: 91: if(readBuffer.typeCnt > 10) {
  5004  000B3E  0E0A               	movlw	10
  5005  000B40  650A               	cpfsgt	(_readBuffer+10)& (0+255),b
  5006  000B42  0012               	return	
  5007                           
  5008                           ; BSR set to: 1
  5009                           ;UART_Driver.c: 92: readBuffer.typeCnt = 0;
  5010  000B44  0E00               	movlw	0
  5011  000B46  6F0A               	movwf	(_readBuffer+10)& (0+255),b
  5012                           
  5013                           ; BSR set to: 1
  5014                           ;UART_Driver.c: 93: }
  5015                           ;UART_Driver.c: 94: }
  5016                           ;UART_Driver.c: 95: break;
  5017                           
  5018                           ; BSR set to: 1
  5019  000B48  0012               	return	
  5020  000B4A                     
  5021                           ; BSR set to: 1
  5022                           ;UART_Driver.c: 98: if (data == 0x3A) {
  5023                           
  5024                           ; BSR set to: 1
  5025  000B4A  0E3A               	movlw	58
  5026  000B4C  1815               	xorwf	fillDataBuffer@data,w,c
  5027  000B4E  A4D8               	btfss	status,2,c
  5028  000B50  D00D               	goto	i2l131
  5029                           
  5030                           ; BSR set to: 1
  5031                           ;UART_Driver.c: 99: readBuffer.state = 0x03;
  5032  000B52  0E03               	movlw	3
  5033  000B54  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5034                           
  5035                           ; BSR set to: 1
  5036                           ;UART_Driver.c: 100: readBuffer.sender[readBuffer.senderCnt] = '\0';
  5037  000B56  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5038  000B58  0D01               	mullw	1
  5039  000B5A  0E0B               	movlw	low (_readBuffer+11)
  5040  000B5C  24F3               	addwf	prodl,w,c
  5041  000B5E  6ED9               	movwf	fsr2l,c
  5042  000B60  0E01               	movlw	high (_readBuffer+11)
  5043  000B62  20F4               	addwfc	prodh,w,c
  5044  000B64  6EDA               	movwf	fsr2h,c
  5045  000B66  0E00               	movlw	0
  5046  000B68  6EDF               	movwf	indf2,c
  5047                           
  5048                           ;UART_Driver.c: 101: } else {
  5049  000B6A  0012               	return	
  5050  000B6C                     i2l131:
  5051                           
  5052                           ; BSR set to: 1
  5053                           ;UART_Driver.c: 102: readBuffer.sender[readBuffer.senderCnt] = data;
  5054                           
  5055                           ; BSR set to: 1
  5056  000B6C  513D               	movf	(_readBuffer+61)& (0+255),w,b
  5057  000B6E  0D01               	mullw	1
  5058  000B70  0E0B               	movlw	low (_readBuffer+11)
  5059  000B72  24F3               	addwf	prodl,w,c
  5060  000B74  6ED9               	movwf	fsr2l,c
  5061  000B76  0E01               	movlw	high (_readBuffer+11)
  5062  000B78  20F4               	addwfc	prodh,w,c
  5063  000B7A  6EDA               	movwf	fsr2h,c
  5064  000B7C  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5065                           
  5066                           ; BSR set to: 1
  5067                           ;UART_Driver.c: 103: readBuffer.senderCnt++;
  5068  000B80  2B3D               	incf	(_readBuffer+61)& (0+255),f,b
  5069                           
  5070                           ; BSR set to: 1
  5071                           ;UART_Driver.c: 104: if(readBuffer.senderCnt > 50) {
  5072  000B82  0E32               	movlw	50
  5073  000B84  653D               	cpfsgt	(_readBuffer+61)& (0+255),b
  5074  000B86  0012               	return	
  5075                           
  5076                           ; BSR set to: 1
  5077                           ;UART_Driver.c: 105: readBuffer.senderCnt = 0;
  5078  000B88  0E00               	movlw	0
  5079  000B8A  6F3D               	movwf	(_readBuffer+61)& (0+255),b
  5080                           
  5081                           ; BSR set to: 1
  5082                           ;UART_Driver.c: 106: }
  5083                           ;UART_Driver.c: 107: }
  5084                           ;UART_Driver.c: 108: break;
  5085                           
  5086                           ; BSR set to: 1
  5087  000B8C  0012               	return	
  5088  000B8E                     
  5089                           ; BSR set to: 1
  5090                           ;UART_Driver.c: 111: if (data == 0x3A) {
  5091                           
  5092                           ; BSR set to: 1
  5093  000B8E  0E3A               	movlw	58
  5094  000B90  1815               	xorwf	fillDataBuffer@data,w,c
  5095  000B92  A4D8               	btfss	status,2,c
  5096  000B94  D00D               	goto	i2l135
  5097                           
  5098                           ; BSR set to: 1
  5099                           ;UART_Driver.c: 112: readBuffer.state = 0x04;
  5100  000B96  0E04               	movlw	4
  5101  000B98  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5102                           
  5103                           ; BSR set to: 1
  5104                           ;UART_Driver.c: 113: readBuffer.command[readBuffer.commandCnt] = '\0';
  5105  000B9A  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5106  000B9C  0D01               	mullw	1
  5107  000B9E  0E3E               	movlw	low (_readBuffer+62)
  5108  000BA0  24F3               	addwf	prodl,w,c
  5109  000BA2  6ED9               	movwf	fsr2l,c
  5110  000BA4  0E01               	movlw	high (_readBuffer+62)
  5111  000BA6  20F4               	addwfc	prodh,w,c
  5112  000BA8  6EDA               	movwf	fsr2h,c
  5113  000BAA  0E00               	movlw	0
  5114  000BAC  6EDF               	movwf	indf2,c
  5115                           
  5116                           ;UART_Driver.c: 114: } else {
  5117  000BAE  0012               	return	
  5118  000BB0                     i2l135:
  5119                           
  5120                           ; BSR set to: 1
  5121                           ;UART_Driver.c: 115: readBuffer.command[readBuffer.commandCnt] = data;
  5122                           
  5123                           ; BSR set to: 1
  5124  000BB0  5170               	movf	(_readBuffer+112)& (0+255),w,b
  5125  000BB2  0D01               	mullw	1
  5126  000BB4  0E3E               	movlw	low (_readBuffer+62)
  5127  000BB6  24F3               	addwf	prodl,w,c
  5128  000BB8  6ED9               	movwf	fsr2l,c
  5129  000BBA  0E01               	movlw	high (_readBuffer+62)
  5130  000BBC  20F4               	addwfc	prodh,w,c
  5131  000BBE  6EDA               	movwf	fsr2h,c
  5132  000BC0  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5133                           
  5134                           ; BSR set to: 1
  5135                           ;UART_Driver.c: 116: readBuffer.commandCnt++;
  5136  000BC4  2B70               	incf	(_readBuffer+112)& (0+255),f,b
  5137                           
  5138                           ; BSR set to: 1
  5139                           ;UART_Driver.c: 117: if(readBuffer.commandCnt > 50) {
  5140  000BC6  0E32               	movlw	50
  5141  000BC8  6570               	cpfsgt	(_readBuffer+112)& (0+255),b
  5142  000BCA  0012               	return	
  5143                           
  5144                           ; BSR set to: 1
  5145                           ;UART_Driver.c: 118: readBuffer.commandCnt = 0;
  5146  000BCC  0E00               	movlw	0
  5147  000BCE  6F70               	movwf	(_readBuffer+112)& (0+255),b
  5148                           
  5149                           ; BSR set to: 1
  5150                           ;UART_Driver.c: 119: }
  5151                           ;UART_Driver.c: 120: }
  5152                           ;UART_Driver.c: 121: break;
  5153                           
  5154                           ; BSR set to: 1
  5155  000BD0  0012               	return	
  5156  000BD2                     
  5157                           ; BSR set to: 1
  5158                           ;UART_Driver.c: 124: if (data == 0x3A) {
  5159                           
  5160                           ; BSR set to: 1
  5161  000BD2  0E3A               	movlw	58
  5162  000BD4  1815               	xorwf	fillDataBuffer@data,w,c
  5163  000BD6  A4D8               	btfss	status,2,c
  5164  000BD8  D00D               	goto	i2l139
  5165                           
  5166                           ; BSR set to: 1
  5167                           ;UART_Driver.c: 125: readBuffer.state = 0x05;
  5168  000BDA  0E05               	movlw	5
  5169  000BDC  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5170                           
  5171                           ; BSR set to: 1
  5172                           ;UART_Driver.c: 126: readBuffer.message[readBuffer.messageCnt] = '\0';
  5173  000BDE  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5174  000BE0  0D01               	mullw	1
  5175  000BE2  0E71               	movlw	low (_readBuffer+113)
  5176  000BE4  24F3               	addwf	prodl,w,c
  5177  000BE6  6ED9               	movwf	fsr2l,c
  5178  000BE8  0E01               	movlw	high (_readBuffer+113)
  5179  000BEA  20F4               	addwfc	prodh,w,c
  5180  000BEC  6EDA               	movwf	fsr2h,c
  5181  000BEE  0E00               	movlw	0
  5182  000BF0  6EDF               	movwf	indf2,c
  5183                           
  5184                           ;UART_Driver.c: 127: } else {
  5185  000BF2  0012               	return	
  5186  000BF4                     i2l139:
  5187                           
  5188                           ; BSR set to: 1
  5189                           ;UART_Driver.c: 128: readBuffer.message[readBuffer.messageCnt] = data;
  5190                           
  5191                           ; BSR set to: 1
  5192  000BF4  51A3               	movf	(_readBuffer+163)& (0+255),w,b
  5193  000BF6  0D01               	mullw	1
  5194  000BF8  0E71               	movlw	low (_readBuffer+113)
  5195  000BFA  24F3               	addwf	prodl,w,c
  5196  000BFC  6ED9               	movwf	fsr2l,c
  5197  000BFE  0E01               	movlw	high (_readBuffer+113)
  5198  000C00  20F4               	addwfc	prodh,w,c
  5199  000C02  6EDA               	movwf	fsr2h,c
  5200  000C04  C015  FFDF         	movff	fillDataBuffer@data,indf2
  5201                           
  5202                           ; BSR set to: 1
  5203                           ;UART_Driver.c: 129: readBuffer.messageCnt++;
  5204  000C08  2BA3               	incf	(_readBuffer+163)& (0+255),f,b
  5205                           
  5206                           ; BSR set to: 1
  5207                           ;UART_Driver.c: 130: if(readBuffer.messageCnt > 50) {
  5208  000C0A  0E32               	movlw	50
  5209  000C0C  65A3               	cpfsgt	(_readBuffer+163)& (0+255),b
  5210  000C0E  0012               	return	
  5211                           
  5212                           ; BSR set to: 1
  5213                           ;UART_Driver.c: 131: readBuffer.messageCnt = 0;
  5214  000C10  0E00               	movlw	0
  5215  000C12  6FA3               	movwf	(_readBuffer+163)& (0+255),b
  5216                           
  5217                           ; BSR set to: 1
  5218                           ;UART_Driver.c: 132: }
  5219                           ;UART_Driver.c: 133: }
  5220                           ;UART_Driver.c: 134: break;
  5221                           
  5222                           ; BSR set to: 1
  5223  000C14  0012               	return	
  5224  000C16                     
  5225                           ; BSR set to: 1
  5226                           ;UART_Driver.c: 137: if (data == 0x24) {
  5227                           
  5228                           ; BSR set to: 1
  5229  000C16  0E24               	movlw	36
  5230  000C18  1815               	xorwf	fillDataBuffer@data,w,c
  5231  000C1A  A4D8               	btfss	status,2,c
  5232  000C1C  D008               	goto	i2l143
  5233                           
  5234                           ; BSR set to: 1
  5235                           ;UART_Driver.c: 138: acknowledge();
  5236  000C1E  EC20  F00B         	call	_acknowledge	;wreg free
  5237                           
  5238                           ;UART_Driver.c: 139: readBuffer.state = 0x00;
  5239  000C22  0E00               	movlw	0
  5240  000C24  0101               	movlb	1	; () banked
  5241  000C26  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5242                           
  5243                           ; BSR set to: 1
  5244                           ;UART_Driver.c: 140: readReady = 1;
  5245  000C28  0E01               	movlw	1
  5246  000C2A  6E40               	movwf	_readReady,c
  5247                           
  5248                           ;UART_Driver.c: 141: } else {
  5249  000C2C  0012               	return	
  5250  000C2E                     i2l143:
  5251                           
  5252                           ; BSR set to: 1
  5253                           ;UART_Driver.c: 143: readBuffer.readId = (uint8_t)(data - 0x30);
  5254                           
  5255                           ; BSR set to: 1
  5256  000C2E  5015               	movf	fillDataBuffer@data,w,c
  5257  000C30  0FD0               	addlw	208
  5258  000C32  6FA4               	movwf	(_readBuffer+164)& (0+255),b
  5259                           
  5260                           ; BSR set to: 1
  5261                           ;UART_Driver.c: 144: }
  5262                           ;UART_Driver.c: 145: break;
  5263  000C34  0012               	return	
  5264  000C36                     
  5265                           ; BSR set to: 1
  5266                           ;UART_Driver.c: 148: readBuffer.state = 0x00;
  5267                           
  5268                           ; BSR set to: 1
  5269  000C36  0E00               	movlw	0
  5270  000C38  6FA5               	movwf	(_readBuffer+165)& (0+255),b
  5271                           
  5272                           ; BSR set to: 1
  5273                           ;UART_Driver.c: 150: }
  5274                           
  5275                           ;UART_Driver.c: 149: break;
  5276  000C3A  0012               	return	
  5277  000C3C                     i2l120:
  5278                           
  5279                           ; BSR set to: 1
  5280  000C3C  0101               	movlb	1	; () banked
  5281  000C3E  51A5               	movf	(_readBuffer+165)& (0+255),w,b
  5282                           
  5283                           ; Switch size 1, requested type "space"
  5284                           ; Number of cases is 6, Range of values is 0 to 5
  5285                           ; switch strategies available:
  5286                           ; Name         Instructions Cycles
  5287                           ; simple_byte           19    10 (average)
  5288                           ;	Chosen strategy is simple_byte
  5289  000C40  0A00               	xorlw	0	; case 0
  5290  000C42  B4D8               	btfsc	status,2,c
  5291  000C44  D74A               	goto	i2l121
  5292  000C46  0A01               	xorlw	1	; case 1
  5293  000C48  B4D8               	btfsc	status,2,c
  5294  000C4A  D75D               	goto	i2l126
  5295  000C4C  0A03               	xorlw	3	; case 2
  5296  000C4E  B4D8               	btfsc	status,2,c
  5297  000C50  D77C               	goto	i2l130
  5298  000C52  0A01               	xorlw	1	; case 3
  5299  000C54  B4D8               	btfsc	status,2,c
  5300  000C56  D79B               	goto	i2l134
  5301  000C58  0A07               	xorlw	7	; case 4
  5302  000C5A  B4D8               	btfsc	status,2,c
  5303  000C5C  D7BA               	goto	i2l138
  5304  000C5E  0A01               	xorlw	1	; case 5
  5305  000C60  B4D8               	btfsc	status,2,c
  5306  000C62  D7D9               	goto	i2l142
  5307  000C64  D7E8               	goto	i2l145
  5308  000C66                     __end_of_fillDataBuffer:
  5309                           	opt stack 0
  5310                           pclatu	equ	0xFFB
  5311                           pclath	equ	0xFFA
  5312                           tblptru	equ	0xFF8
  5313                           tblptrh	equ	0xFF7
  5314                           tblptrl	equ	0xFF6
  5315                           tablat	equ	0xFF5
  5316                           prodh	equ	0xFF4
  5317                           prodl	equ	0xFF3
  5318                           intcon	equ	0xFF2
  5319                           intcon2	equ	0xFF1
  5320                           indf0	equ	0xFEF
  5321                           postinc0	equ	0xFEE
  5322                           plusw0	equ	0xFEB
  5323                           fsr0h	equ	0xFEA
  5324                           fsr0l	equ	0xFE9
  5325                           wreg	equ	0xFE8
  5326                           indf1	equ	0xFE7
  5327                           postinc1	equ	0xFE6
  5328                           postdec1	equ	0xFE5
  5329                           fsr1h	equ	0xFE2
  5330                           fsr1l	equ	0xFE1
  5331                           bsr	equ	0xFE0
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           plusw2	equ	0xFDB
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _acknowledge *****************
  5341 ;; Defined at:
  5342 ;;		line 153 in file "Drivers/UART_Driver.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      void 
  5349 ;; Registers used:
  5350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0
  5357 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5358 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5359 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    2
  5363 ;; This function calls:
  5364 ;;		i2_printf
  5365 ;; This function is called by:
  5366 ;;		_fillDataBuffer
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           	psect	text28
  5371  001640                     __ptext28:
  5372                           	opt stack 0
  5373  001640                     _acknowledge:
  5374                           	opt stack 21
  5375                           
  5376                           ;UART_Driver.c: 154: printf(startCharacter);
  5377                           
  5378                           ; BSR set to: 1
  5379                           ;incstack = 0
  5380  001640  C048  F008         	movff	_startCharacter,i2printf@f
  5381  001644  C049  F009         	movff	_startCharacter+1,i2printf@f+1
  5382  001648  5008               	movf	i2printf@f,w,c
  5383  00164A  1009               	iorwf	i2printf@f+1,w,c
  5384  00164C  A4D8               	btfss	status,2,c
  5385  00164E  0E00               	movlw	low (__mediumconst shr (0+16))
  5386  001650  6E0A               	movwf	i2printf@f+2,c
  5387  001652  EC89  F007         	call	i2_printf	;wreg free
  5388                           
  5389                           ;UART_Driver.c: 156: printf(ackCharacter);
  5390  001656  C042  F008         	movff	_ackCharacter,i2printf@f
  5391  00165A  C043  F009         	movff	_ackCharacter+1,i2printf@f+1
  5392  00165E  5008               	movf	i2printf@f,w,c
  5393  001660  1009               	iorwf	i2printf@f+1,w,c
  5394  001662  A4D8               	btfss	status,2,c
  5395  001664  0E00               	movlw	low (__mediumconst shr (0+16))
  5396  001666  6E0A               	movwf	i2printf@f+2,c
  5397  001668  EC89  F007         	call	i2_printf	;wreg free
  5398                           
  5399                           ;UART_Driver.c: 158: printf("%x",readBuffer.readId);
  5400  00166C  0E22               	movlw	low STR_5
  5401  00166E  6E08               	movwf	i2printf@f,c
  5402  001670  0E08               	movlw	high STR_5
  5403  001672  6E09               	movwf	i2printf@f+1,c
  5404  001674  5008               	movf	i2printf@f,w,c
  5405  001676  1009               	iorwf	i2printf@f+1,w,c
  5406  001678  A4D8               	btfss	status,2,c
  5407  00167A  0E00               	movlw	low (__mediumconst shr (0+16))
  5408  00167C  6E0A               	movwf	i2printf@f+2,c
  5409  00167E  C1A4  F00B         	movff	_readBuffer+164,?i2_printf+3
  5410  001682  6A0C               	clrf	?i2_printf+4,c
  5411  001684  EC89  F007         	call	i2_printf	;wreg free
  5412                           
  5413                           ;UART_Driver.c: 160: printf(stopCharacter);
  5414  001688  C046  F008         	movff	_stopCharacter,i2printf@f
  5415  00168C  C047  F009         	movff	_stopCharacter+1,i2printf@f+1
  5416  001690  5008               	movf	i2printf@f,w,c
  5417  001692  1009               	iorwf	i2printf@f+1,w,c
  5418  001694  A4D8               	btfss	status,2,c
  5419  001696  0E00               	movlw	low (__mediumconst shr (0+16))
  5420  001698  6E0A               	movwf	i2printf@f+2,c
  5421  00169A  EC89  F007         	call	i2_printf	;wreg free
  5422  00169E  0012               	return		;funcret
  5423  0016A0                     __end_of_acknowledge:
  5424                           	opt stack 0
  5425                           pclatu	equ	0xFFB
  5426                           pclath	equ	0xFFA
  5427                           tblptru	equ	0xFF8
  5428                           tblptrh	equ	0xFF7
  5429                           tblptrl	equ	0xFF6
  5430                           tablat	equ	0xFF5
  5431                           prodh	equ	0xFF4
  5432                           prodl	equ	0xFF3
  5433                           intcon	equ	0xFF2
  5434                           intcon2	equ	0xFF1
  5435                           indf0	equ	0xFEF
  5436                           postinc0	equ	0xFEE
  5437                           plusw0	equ	0xFEB
  5438                           fsr0h	equ	0xFEA
  5439                           fsr0l	equ	0xFE9
  5440                           wreg	equ	0xFE8
  5441                           indf1	equ	0xFE7
  5442                           postinc1	equ	0xFE6
  5443                           postdec1	equ	0xFE5
  5444                           fsr1h	equ	0xFE2
  5445                           fsr1l	equ	0xFE1
  5446                           bsr	equ	0xFE0
  5447                           indf2	equ	0xFDF
  5448                           postinc2	equ	0xFDE
  5449                           postdec2	equ	0xFDD
  5450                           plusw2	equ	0xFDB
  5451                           fsr2h	equ	0xFDA
  5452                           fsr2l	equ	0xFD9
  5453                           status	equ	0xFD8
  5454                           
  5455 ;; *************** function i2_printf *****************
  5456 ;; Defined at:
  5457 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;  f               3    7[COMRAM] PTR const unsigned char 
  5460 ;;		 -> STR_16(2), STR_15(2), STR_8(2), STR_7(2), 
  5461 ;;		 -> STR_6(2), STR_5(3), STR_4(4), STR_3(4), 
  5462 ;;		 -> ROM(32767), STR_2(2), STR_1(2), C_DOOR_SendStates@mes(2), 
  5463 ;;		 -> C_DOOR_SendStates@com(3), 
  5464 ;; Auto vars:     Size  Location     Type
  5465 ;;  printf          4    0        struct .
  5466 ;;  printf          3    0        PTR const unsigned char 
  5467 ;;  printf          2   16[COMRAM] unsigned int 
  5468 ;;  printf          2   14[COMRAM] PTR void [1]
  5469 ;;		 -> ?i2_printf(2), ?_printf(2), 
  5470 ;;  printf          2    0        unsigned int 
  5471 ;;  printf          1   19[COMRAM] char 
  5472 ;;  printf          1   18[COMRAM] char 
  5473 ;;  printf          1   13[COMRAM] unsigned char 
  5474 ;;  printf          1   12[COMRAM] unsigned char 
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  2    7[COMRAM] int 
  5477 ;; Registers used:
  5478 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5484 ;;      Params:         5       0       0       0       0       0       0       0       0
  5485 ;;      Locals:         8       0       0       0       0       0       0       0       0
  5486 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5487 ;;      Totals:        13       0       0       0       0       0       0       0       0
  5488 ;;Total ram usage:       13 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    1
  5491 ;; This function calls:
  5492 ;;		i2___lwdiv
  5493 ;;		i2_putch
  5494 ;; This function is called by:
  5495 ;;		_acknowledge
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text29
  5500  000F12                     __ptext29:
  5501                           	opt stack 0
  5502  000F12                     i2_printf:
  5503                           	opt stack 21
  5504                           
  5505                           ;doprnt.c: 466: va_list ap;
  5506                           ;doprnt.c: 499: signed char c;
  5507                           ;doprnt.c: 506: signed char prec;
  5508                           ;doprnt.c: 508: unsigned char flag;
  5509                           ;doprnt.c: 523: union {
  5510                           ;doprnt.c: 524: unsigned long vd;
  5511                           ;doprnt.c: 525: double integ;
  5512                           ;doprnt.c: 526: } tmpval;
  5513                           ;doprnt.c: 528: unsigned int val;
  5514                           ;doprnt.c: 529: unsigned len;
  5515                           ;doprnt.c: 530: const char * cp;
  5516                           ;doprnt.c: 533: *ap = __va_start();
  5517                           
  5518                           ;incstack = 0
  5519  000F12  0E0B               	movlw	low (?i2_printf+3)
  5520  000F14  6E0F               	movwf	i2printf@ap,c
  5521  000F16  0E00               	movlw	high (?i2_printf+3)
  5522  000F18  6E10               	movwf	i2printf@ap+1,c
  5523                           
  5524                           ;doprnt.c: 536: while(c = *f++) {
  5525  000F1A  D085               	goto	i2u191_40
  5526  000F1C                     
  5527                           ;doprnt.c: 538: if(c != '%')
  5528  000F1C  0E25               	movlw	37
  5529  000F1E  1814               	xorwf	i2printf@c,w,c
  5530  000F20  B4D8               	btfsc	status,2,c
  5531  000F22  D004               	goto	i2l369
  5532                           
  5533                           ;doprnt.c: 540: {
  5534                           ;doprnt.c: 541: (putch(c) );
  5535  000F24  5014               	movf	i2printf@c,w,c
  5536  000F26  EC67  F00C         	call	i2_putch
  5537                           
  5538                           ;doprnt.c: 542: continue;
  5539  000F2A  D07D               	goto	i2u191_40
  5540  000F2C                     i2l369:
  5541                           
  5542                           ;doprnt.c: 543: }
  5543                           ;doprnt.c: 548: flag = 0;
  5544  000F2C  0E00               	movlw	0
  5545  000F2E  6E0D               	movwf	i2printf@flag,c
  5546                           
  5547                           ;doprnt.c: 635: switch(c = *f++) {
  5548  000F30  D004               	goto	i2l370
  5549  000F32                     
  5550                           ;doprnt.c: 809: (putch(c) );
  5551  000F32  5014               	movf	i2printf@c,w,c
  5552  000F34  EC67  F00C         	call	i2_putch
  5553                           
  5554                           ;doprnt.c: 810: continue;
  5555  000F38  D076               	goto	i2u191_40
  5556  000F3A                     i2l370:
  5557  000F3A  C008  FFF6         	movff	i2printf@f,tblptrl
  5558  000F3E  C009  FFF7         	movff	i2printf@f+1,tblptrh
  5559  000F42  C00A  FFF8         	movff	i2printf@f+2,tblptru
  5560  000F46  0E01               	movlw	1
  5561  000F48  2608               	addwf	i2printf@f,f,c
  5562  000F4A  0E00               	movlw	0
  5563  000F4C  2209               	addwfc	i2printf@f+1,f,c
  5564  000F4E  220A               	addwfc	i2printf@f+2,f,c
  5565  000F50  BAF8               	btfsc	tblptru,5,c
  5566  000F52  D003               	bra	i2u187_47
  5567  000F54  0008               	tblrd		*
  5568  000F56  50F5               	movf	tablat,w,c
  5569  000F58  D005               	bra	i2u187_40
  5570  000F5A                     i2u187_47:
  5571  000F5A  CFF6 FFE9          	movff	tblptrl,fsr0l
  5572  000F5E  CFF7 FFEA          	movff	tblptrh,fsr0h
  5573  000F62  50EF               	movf	indf0,w,c
  5574  000F64                     i2u187_40:
  5575  000F64  6E14               	movwf	i2printf@c,c
  5576  000F66  5014               	movf	i2printf@c,w,c
  5577                           
  5578                           ; Switch size 1, requested type "space"
  5579                           ; Number of cases is 2, Range of values is 0 to 120
  5580                           ; switch strategies available:
  5581                           ; Name         Instructions Cycles
  5582                           ; simple_byte            7     4 (average)
  5583                           ;	Chosen strategy is simple_byte
  5584  000F68  0A00               	xorlw	0	; case 0
  5585  000F6A  B4D8               	btfsc	status,2,c
  5586  000F6C  0012               	return	
  5587  000F6E  0A78               	xorlw	120	; case 120
  5588  000F70  A4D8               	btfss	status,2,c
  5589  000F72  D7DF               	goto	i2l375
  5590                           
  5591                           ;doprnt.c: 1273: {
  5592                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5593  000F74  C00F  FFD9         	movff	i2printf@ap,fsr2l
  5594  000F78  C010  FFDA         	movff	i2printf@ap+1,fsr2h
  5595  000F7C  CFDE F011          	movff	postinc2,i2printf@val
  5596  000F80  CFDD F012          	movff	postdec2,i2printf@val+1
  5597  000F84  0E02               	movlw	2
  5598  000F86  260F               	addwf	i2printf@ap,f,c
  5599  000F88  0E00               	movlw	0
  5600  000F8A  2210               	addwfc	i2printf@ap+1,f,c
  5601                           
  5602                           ;doprnt.c: 1287: }
  5603                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5604  000F8C  0E01               	movlw	1
  5605  000F8E  6E14               	movwf	i2printf@c,c
  5606  000F90  D014               	goto	i2l2243
  5607  000F92                     
  5608                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5609  000F92  5014               	movf	i2printf@c,w,c
  5610  000F94  0D02               	mullw	2
  5611  000F96  0E01               	movlw	low _hexpowers
  5612  000F98  24F3               	addwf	prodl,w,c
  5613  000F9A  6EF6               	movwf	tblptrl,c
  5614  000F9C  0E08               	movlw	high _hexpowers
  5615  000F9E  20F4               	addwfc	prodh,w,c
  5616  000FA0  6EF7               	movwf	tblptrh,c
  5617  000FA2                     	if	1	;There are 3 active tblptr bytes
  5618  000FA2  6AF8               	clrf	tblptru,c
  5619  000FA4  0E00               	movlw	low (__mediumconst shr (0+16))
  5620  000FA6  22F8               	addwfc	tblptru,f,c
  5621  000FA8                     	endif
  5622  000FA8  0009               	tblrd		*+
  5623  000FAA  50F5               	movf	tablat,w,c
  5624  000FAC  5C11               	subwf	i2printf@val,w,c
  5625  000FAE  0009               	tblrd		*+
  5626  000FB0  50F5               	movf	tablat,w,c
  5627  000FB2  5812               	subwfb	i2printf@val+1,w,c
  5628  000FB4  A0D8               	btfss	status,0,c
  5629  000FB6  D005               	goto	i2u190_40
  5630                           
  5631                           ;doprnt.c: 1318: break;
  5632  000FB8  2A14               	incf	i2printf@c,f,c
  5633  000FBA                     i2l2243:
  5634  000FBA  0E04               	movlw	4
  5635  000FBC  1814               	xorwf	i2printf@c,w,c
  5636  000FBE  A4D8               	btfss	status,2,c
  5637  000FC0  D7E8               	goto	i2l376
  5638  000FC2                     i2u190_40:
  5639                           
  5640                           ;doprnt.c: 1422: {
  5641                           ;doprnt.c: 1469: }
  5642                           ;doprnt.c: 1472: prec = c;
  5643  000FC2  C014  F013         	movff	i2printf@c,i2printf@prec
  5644                           
  5645                           ;doprnt.c: 1474: while(prec--) {
  5646  000FC6  D02B               	goto	i2l379
  5647  000FC8                     
  5648                           ;doprnt.c: 1478: {
  5649                           ;doprnt.c: 1499: {
  5650                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5651  000FC8  C011  F001         	movff	i2printf@val,i2___lwdiv@dividend
  5652  000FCC  C012  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  5653  000FD0  5013               	movf	i2printf@prec,w,c
  5654  000FD2  0D02               	mullw	2
  5655  000FD4  0E01               	movlw	low _hexpowers
  5656  000FD6  24F3               	addwf	prodl,w,c
  5657  000FD8  6EF6               	movwf	tblptrl,c
  5658  000FDA  0E08               	movlw	high _hexpowers
  5659  000FDC  20F4               	addwfc	prodh,w,c
  5660  000FDE  6EF7               	movwf	tblptrh,c
  5661  000FE0                     	if	1	;There are 3 active tblptr bytes
  5662  000FE0  6AF8               	clrf	tblptru,c
  5663  000FE2  0E00               	movlw	low (__mediumconst shr (0+16))
  5664  000FE4  22F8               	addwfc	tblptru,f,c
  5665  000FE6                     	endif
  5666  000FE6  0009               	tblrd		*+
  5667  000FE8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  5668  000FEC  000A               	tblrd		*-
  5669  000FEE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  5670  000FF2  EC7A  F00B         	call	i2___lwdiv	;wreg free
  5671  000FF6  5001               	movf	?i2___lwdiv,w,c
  5672  000FF8  0B0F               	andlw	15
  5673  000FFA  6E0E               	movwf	i2printf@idx,c
  5674                           
  5675                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5676  000FFC  500E               	movf	i2printf@idx,w,c
  5677  000FFE  0D01               	mullw	1
  5678  001000  0E09               	movlw	low STR_17
  5679  001002  24F3               	addwf	prodl,w,c
  5680  001004  6EF6               	movwf	tblptrl,c
  5681  001006  0E08               	movlw	high STR_17
  5682  001008  20F4               	addwfc	prodh,w,c
  5683  00100A  6EF7               	movwf	tblptrh,c
  5684  00100C                     	if	1	;There are 3 active tblptr bytes
  5685  00100C  6AF8               	clrf	tblptru,c
  5686  00100E  0E00               	movlw	low (__mediumconst shr (0+16))
  5687  001010  22F8               	addwfc	tblptru,f,c
  5688  001012                     	endif
  5689  001012  0008               	tblrd		*
  5690  001014  CFF5 F014          	movff	tablat,i2printf@c
  5691                           
  5692                           ;doprnt.c: 1508: }
  5693                           ;doprnt.c: 1523: }
  5694                           ;doprnt.c: 1524: (putch(c) );
  5695  001018  5014               	movf	i2printf@c,w,c
  5696  00101A  EC67  F00C         	call	i2_putch
  5697  00101E                     i2l379:
  5698  00101E  0613               	decf	i2printf@prec,f,c
  5699  001020  2813               	incf	i2printf@prec,w,c
  5700  001022  A4D8               	btfss	status,2,c
  5701  001024  D7D1               	goto	i2l380
  5702  001026                     i2u191_40:
  5703  001026  C008  FFF6         	movff	i2printf@f,tblptrl
  5704  00102A  C009  FFF7         	movff	i2printf@f+1,tblptrh
  5705  00102E  C00A  FFF8         	movff	i2printf@f+2,tblptru
  5706  001032  0E01               	movlw	1
  5707  001034  2608               	addwf	i2printf@f,f,c
  5708  001036  0E00               	movlw	0
  5709  001038  2209               	addwfc	i2printf@f+1,f,c
  5710  00103A  220A               	addwfc	i2printf@f+2,f,c
  5711  00103C  BAF8               	btfsc	tblptru,5,c
  5712  00103E  D003               	bra	i2u192_47
  5713  001040  0008               	tblrd		*
  5714  001042  50F5               	movf	tablat,w,c
  5715  001044  D005               	bra	i2u192_40
  5716  001046                     i2u192_47:
  5717  001046  CFF6 FFE9          	movff	tblptrl,fsr0l
  5718  00104A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5719  00104E  50EF               	movf	indf0,w,c
  5720  001050                     i2u192_40:
  5721  001050  6E14               	movwf	i2printf@c,c
  5722  001052  5014               	movf	i2printf@c,w,c
  5723  001054  B4D8               	btfsc	status,2,c
  5724  001056  0012               	return	
  5725  001058  D761               	goto	i2l368
  5726  00105A                     __end_ofi2_printf:
  5727                           	opt stack 0
  5728                           pclatu	equ	0xFFB
  5729                           pclath	equ	0xFFA
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           intcon2	equ	0xFF1
  5738                           indf0	equ	0xFEF
  5739                           postinc0	equ	0xFEE
  5740                           plusw0	equ	0xFEB
  5741                           fsr0h	equ	0xFEA
  5742                           fsr0l	equ	0xFE9
  5743                           wreg	equ	0xFE8
  5744                           indf1	equ	0xFE7
  5745                           postinc1	equ	0xFE6
  5746                           postdec1	equ	0xFE5
  5747                           fsr1h	equ	0xFE2
  5748                           fsr1l	equ	0xFE1
  5749                           bsr	equ	0xFE0
  5750                           indf2	equ	0xFDF
  5751                           postinc2	equ	0xFDE
  5752                           postdec2	equ	0xFDD
  5753                           plusw2	equ	0xFDB
  5754                           fsr2h	equ	0xFDA
  5755                           fsr2l	equ	0xFD9
  5756                           status	equ	0xFD8
  5757                           
  5758 ;; *************** function i2_putch *****************
  5759 ;; Defined at:
  5760 ;;		line 243 in file "Drivers/UART_Driver.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  data            1    wreg     unsigned char 
  5763 ;; Auto vars:     Size  Location     Type
  5764 ;;  data            1    0[COMRAM] unsigned char 
  5765 ;;  putch           1    1[COMRAM] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg, status,2, status,0, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5775 ;;      Params:         0       0       0       0       0       0       0       0       0
  5776 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5778 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5779 ;;Total ram usage:        2 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		i2_printf
  5785 ;; This function uses a non-reentrant model
  5786 ;;
  5787                           
  5788                           	psect	text30
  5789  0018CE                     __ptext30:
  5790                           	opt stack 0
  5791  0018CE                     i2_putch:
  5792                           	opt stack 21
  5793                           
  5794                           ;incstack = 0
  5795                           ;i2putch@data stored from wreg
  5796  0018CE  6E01               	movwf	i2putch@data,c
  5797                           
  5798                           ;UART_Driver.c: 244: uint8_t max = 0;
  5799  0018D0  0E00               	movlw	0
  5800  0018D2  6E02               	movwf	i2putch@max,c
  5801                           
  5802                           ;UART_Driver.c: 246: while(TXSTAbits.TRMT == 0 && max < 200) {
  5803  0018D4  D005               	goto	i2l166
  5804  0018D6                     
  5805                           ;UART_Driver.c: 247: max++;
  5806  0018D6  2A02               	incf	i2putch@max,f,c
  5807                           
  5808                           ;UART_Driver.c: 248: _delay((unsigned long)((5)*(16000000UL/4000000.0)));
  5809  0018D8  0E06               	movlw	6
  5810  0018DA                     i2u263_47:
  5811  0018DA  2EE8               	decfsz	wreg,f,c
  5812  0018DC  D7FE               	bra	i2u263_47
  5813  0018DE  D000               	nop2	
  5814  0018E0                     i2l166:
  5815  0018E0  B2AC               	btfsc	4012,1,c	;volatile
  5816  0018E2  D003               	goto	i2u174_40
  5817  0018E4  0EC7               	movlw	199
  5818  0018E6  6402               	cpfsgt	i2putch@max,c
  5819  0018E8  D7F6               	goto	i2l167
  5820  0018EA                     i2u174_40:
  5821                           
  5822                           ;UART_Driver.c: 249: }
  5823                           ;UART_Driver.c: 250: TXREG = data;
  5824  0018EA  C001  FFAD         	movff	i2putch@data,4013	;volatile
  5825  0018EE  0012               	return		;funcret
  5826  0018F0                     __end_ofi2_putch:
  5827                           	opt stack 0
  5828                           pclatu	equ	0xFFB
  5829                           pclath	equ	0xFFA
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           intcon	equ	0xFF2
  5837                           intcon2	equ	0xFF1
  5838                           indf0	equ	0xFEF
  5839                           postinc0	equ	0xFEE
  5840                           plusw0	equ	0xFEB
  5841                           fsr0h	equ	0xFEA
  5842                           fsr0l	equ	0xFE9
  5843                           wreg	equ	0xFE8
  5844                           indf1	equ	0xFE7
  5845                           postinc1	equ	0xFE6
  5846                           postdec1	equ	0xFE5
  5847                           fsr1h	equ	0xFE2
  5848                           fsr1l	equ	0xFE1
  5849                           bsr	equ	0xFE0
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           plusw2	equ	0xFDB
  5854                           fsr2h	equ	0xFDA
  5855                           fsr2l	equ	0xFD9
  5856                           status	equ	0xFD8
  5857                           
  5858 ;; *************** function i2___lwdiv *****************
  5859 ;; Defined at:
  5860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;  dividend        2    0[COMRAM] unsigned int 
  5863 ;;  divisor         2    2[COMRAM] unsigned int 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  __lwdiv         2    5[COMRAM] unsigned int 
  5866 ;;  __lwdiv         1    4[COMRAM] unsigned char 
  5867 ;; Return value:  Size  Location     Type
  5868 ;;                  2    0[COMRAM] unsigned int 
  5869 ;; Registers used:
  5870 ;;		wreg, status,2, status,0
  5871 ;; Tracked objects:
  5872 ;;		On entry : 0/0
  5873 ;;		On exit  : 0/0
  5874 ;;		Unchanged: 0/0
  5875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5876 ;;      Params:         4       0       0       0       0       0       0       0       0
  5877 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5878 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5879 ;;      Totals:         7       0       0       0       0       0       0       0       0
  5880 ;;Total ram usage:        7 bytes
  5881 ;; Hardware stack levels used:    1
  5882 ;; This function calls:
  5883 ;;		Nothing
  5884 ;; This function is called by:
  5885 ;;		i2_printf
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text31
  5890  0016F4                     __ptext31:
  5891                           	opt stack 0
  5892  0016F4                     i2___lwdiv:
  5893                           	opt stack 21
  5894                           
  5895                           ;incstack = 0
  5896  0016F4  0E00               	movlw	0
  5897  0016F6  6E07               	movwf	i2___lwdiv@quotient+1,c
  5898  0016F8  0E00               	movlw	0
  5899  0016FA  6E06               	movwf	i2___lwdiv@quotient,c
  5900  0016FC  5003               	movf	i2___lwdiv@divisor,w,c
  5901  0016FE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5902  001700  B4D8               	btfsc	status,2,c
  5903  001702  D01C               	goto	i2l792
  5904  001704  0E01               	movlw	1
  5905  001706  6E05               	movwf	i2___lwdiv@counter,c
  5906  001708  D004               	goto	i2l787
  5907  00170A  90D8               	bcf	status,0,c
  5908  00170C  3603               	rlcf	i2___lwdiv@divisor,f,c
  5909  00170E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5910  001710  2A05               	incf	i2___lwdiv@counter,f,c
  5911  001712                     i2l787:
  5912  001712  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5913  001714  D7FA               	goto	i2l788
  5914  001716                     i2u176_40:
  5915  001716  90D8               	bcf	status,0,c
  5916  001718  3606               	rlcf	i2___lwdiv@quotient,f,c
  5917  00171A  3607               	rlcf	i2___lwdiv@quotient+1,f,c
  5918  00171C  5003               	movf	i2___lwdiv@divisor,w,c
  5919  00171E  5C01               	subwf	i2___lwdiv@dividend,w,c
  5920  001720  5004               	movf	i2___lwdiv@divisor+1,w,c
  5921  001722  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5922  001724  A0D8               	btfss	status,0,c
  5923  001726  D005               	goto	i2l791
  5924  001728  5003               	movf	i2___lwdiv@divisor,w,c
  5925  00172A  5E01               	subwf	i2___lwdiv@dividend,f,c
  5926  00172C  5004               	movf	i2___lwdiv@divisor+1,w,c
  5927  00172E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5928  001730  8006               	bsf	i2___lwdiv@quotient,0,c
  5929  001732                     i2l791:
  5930  001732  90D8               	bcf	status,0,c
  5931  001734  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5932  001736  3203               	rrcf	i2___lwdiv@divisor,f,c
  5933  001738  2E05               	decfsz	i2___lwdiv@counter,f,c
  5934  00173A  D7ED               	goto	i2u176_40
  5935  00173C                     i2l792:
  5936  00173C  C006  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5937  001740  C007  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5938  001744  0012               	return		;funcret
  5939  001746                     __end_ofi2___lwdiv:
  5940                           	opt stack 0
  5941                           pclatu	equ	0xFFB
  5942                           pclath	equ	0xFFA
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           intcon2	equ	0xFF1
  5951                           indf0	equ	0xFEF
  5952                           postinc0	equ	0xFEE
  5953                           plusw0	equ	0xFEB
  5954                           fsr0h	equ	0xFEA
  5955                           fsr0l	equ	0xFE9
  5956                           wreg	equ	0xFE8
  5957                           indf1	equ	0xFE7
  5958                           postinc1	equ	0xFE6
  5959                           postdec1	equ	0xFE5
  5960                           fsr1h	equ	0xFE2
  5961                           fsr1l	equ	0xFE1
  5962                           bsr	equ	0xFE0
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           plusw2	equ	0xFDB
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           pclatu	equ	0xFFB
  5971                           pclath	equ	0xFFA
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           intcon	equ	0xFF2
  5979                           intcon2	equ	0xFF1
  5980                           indf0	equ	0xFEF
  5981                           postinc0	equ	0xFEE
  5982                           plusw0	equ	0xFEB
  5983                           fsr0h	equ	0xFEA
  5984                           fsr0l	equ	0xFE9
  5985                           wreg	equ	0xFE8
  5986                           indf1	equ	0xFE7
  5987                           postinc1	equ	0xFE6
  5988                           postdec1	equ	0xFE5
  5989                           fsr1h	equ	0xFE2
  5990                           fsr1l	equ	0xFE1
  5991                           bsr	equ	0xFE0
  5992                           indf2	equ	0xFDF
  5993                           postinc2	equ	0xFDE
  5994                           postdec2	equ	0xFDD
  5995                           plusw2	equ	0xFDB
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000                           	psect	rparam
  6001  0000                     pclatu	equ	0xFFB
  6002                           pclath	equ	0xFFA
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           intcon2	equ	0xFF1
  6011                           indf0	equ	0xFEF
  6012                           postinc0	equ	0xFEE
  6013                           plusw0	equ	0xFEB
  6014                           fsr0h	equ	0xFEA
  6015                           fsr0l	equ	0xFE9
  6016                           wreg	equ	0xFE8
  6017                           indf1	equ	0xFE7
  6018                           postinc1	equ	0xFE6
  6019                           postdec1	equ	0xFE5
  6020                           fsr1h	equ	0xFE2
  6021                           fsr1l	equ	0xFE1
  6022                           bsr	equ	0xFE0
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           postdec2	equ	0xFDD
  6026                           plusw2	equ	0xFDB
  6027                           fsr2h	equ	0xFDA
  6028                           fsr2l	equ	0xFD9
  6029                           status	equ	0xFD8
  6030                           
  6031                           	psect	temp
  6032  00004A                     btemp:
  6033                           	opt stack 0
  6034  00004A                     	ds	1
  6035  0000                     int$flags	set	btemp
  6036  0000                     wtemp6	set	btemp+1
  6037                           pclatu	equ	0xFFB
  6038                           pclath	equ	0xFFA
  6039                           tblptru	equ	0xFF8
  6040                           tblptrh	equ	0xFF7
  6041                           tblptrl	equ	0xFF6
  6042                           tablat	equ	0xFF5
  6043                           prodh	equ	0xFF4
  6044                           prodl	equ	0xFF3
  6045                           intcon	equ	0xFF2
  6046                           intcon2	equ	0xFF1
  6047                           indf0	equ	0xFEF
  6048                           postinc0	equ	0xFEE
  6049                           plusw0	equ	0xFEB
  6050                           fsr0h	equ	0xFEA
  6051                           fsr0l	equ	0xFE9
  6052                           wreg	equ	0xFE8
  6053                           indf1	equ	0xFE7
  6054                           postinc1	equ	0xFE6
  6055                           postdec1	equ	0xFE5
  6056                           fsr1h	equ	0xFE2
  6057                           fsr1l	equ	0xFE1
  6058                           bsr	equ	0xFE0
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           postdec2	equ	0xFDD
  6062                           plusw2	equ	0xFDB
  6063                           fsr2h	equ	0xFDA
  6064                           fsr2l	equ	0xFD9
  6065                           status	equ	0xFD8


Data Sizes:
    Strings     48
    Constant    8
    Data        8
    BSS         292
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      73
    BANK0           160     39     139
    BANK1           256     16     182
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?_D_UART_Read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    ?_D_UART_Read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_14(CODE[2]), STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[2]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    printf@f	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_16(CODE[2]), STR_15(CODE[2]), STR_8(CODE[2]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[4]), 
		 -> ROM(CODE[32767]), STR_2(CODE[2]), STR_1(CODE[2]), C_DOOR_SendStates@mes(BANK1[2]), 
		 -> C_DOOR_SendStates@com(BANK1[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    read.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    read.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    D_UART_Write@data	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_16(CODE[2]), C_DOOR_SendStates@mes(BANK1[2]), 

    D_UART_Write@command	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_15(CODE[2]), C_DOOR_SendStates@com(BANK1[3]), 

    D_UART_Init@name	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_8(CODE[2]), 

    deviceName	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[2]), ROM(CODE[32767]), 

    S95$message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.message	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.message(BANK1[50]), readBuffer(BANK1[166]), 

    S95$command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.command	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.command(BANK1[50]), readBuffer(BANK1[166]), 

    S95$sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer(BANK1[166]), 

    readData.sender	PTR const unsigned char  size(2) Largest target is 166
		 -> readBuffer.sender(BANK1[50]), readBuffer(BANK1[166]), 

    ackCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_4(CODE[4]), 

    messageCharacter	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    stopCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    startCharacter	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    doors.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    doors.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    commandAndMessage@mes	PTR unsigned char  size(2) Largest target is 2
		 -> C_DOOR_SendStates@mes(BANK1[2]), 

    commandAndMessage@com	PTR unsigned char  size(2) Largest target is 3
		 -> C_DOOR_SendStates@com(BANK1[3]), 

    S21$sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    door.sensor_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    S21$lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 

    door.lock_port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _LowISR in COMRAM

    None.

Critical Paths under _HighISR in COMRAM

    _HighISR->_fillDataBuffer
    _acknowledge->i2_printf
    i2_printf->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_D_UART_Init
    _initDoors->_C_DOOR_LockAll
    _D_UART_Init->___lldiv
    _D_TMR1_Init->_D_TMR1_Enable
    _D_TMR0_Init->_D_TMR0_Enable
    _D_UART_Write->_printf
    _printf->___lwdiv

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _HighISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_C_DOOR_SendStates
    _C_DOOR_SendStates->_D_UART_Write

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _HighISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _HighISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _HighISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _HighISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _HighISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _HighISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _HighISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    8589
                                             14 BANK1      2     2      0
                     _C_DOOR_LockAll
                 _C_DOOR_ReadSensors
                  _C_DOOR_SendStates
                   _C_DOOR_UnlockAll
                        _D_PORT_Init
                         _D_PWM_Init
                       _D_PWM_SetPwm
                        _D_TMR0_Init
                      _D_TMR1_Enable
                        _D_TMR1_Init
                      _D_UART_Enable
                        _D_UART_Init
                        _D_UART_Read
                       _D_UART_Write
                          _initDoors
                           _setAlarm
                             _strcmp
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4    1213
                                             21 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _setAlarm                                             1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initDoors                                            1     1      0     489
                                             30 BANK0      1     1      0
                        _C_DOOR_Init
                     _C_DOOR_LockAll
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_LockAll                                       9     9      0      90
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (2) _C_DOOR_Init                                          5     5      0     332
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _D_UART_Read                                          6     0      6       0
                                             21 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (1) _D_UART_Init                                          5     0      5     806
                                             34 BANK0      5     0      5
                      _D_UART_Enable
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             21 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _D_UART_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR1_Init                                          0     0      0      22
                      _D_TMR1_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR1_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_TMR0_Init                                          0     0      0      22
                      _D_TMR0_Enable
 ---------------------------------------------------------------------------------
 (2) _D_TMR0_Enable                                        1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_SetPwm                                         1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _D_PWM_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_PORT_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_UnlockAll                                     9     9      0      90
                                             21 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_SendStates                                    9     9      0    3277
                                              5 BANK1      9     9      0
                       _D_UART_Write
                  _commandAndMessage
 ---------------------------------------------------------------------------------
 (2) _commandAndMessage                                   14     0     14     521
                                             21 BANK0     14     0     14
 ---------------------------------------------------------------------------------
 (1) _D_UART_Write                                         5     1      4    2380
                                              0 BANK1      5     1      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    17      3    1958
                                             28 BANK0     11     8      3
                            ___lwdiv
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                2     2      0      68
                                             21 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             21 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _C_DOOR_ReadSensors                                   5     5      0      90
                                             21 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _HighISR                                             18    18      0    1389
                                             21 COMRAM    18    18      0
                     _fillDataBuffer
 ---------------------------------------------------------------------------------
 (7) _fillDataBuffer                                       1     1      0    1389
                                             20 COMRAM     1     1      0
                        _acknowledge
 ---------------------------------------------------------------------------------
 (8) _acknowledge                                          0     0      0    1048
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            22    17      5    1048
                                              7 COMRAM    13     8      5
                          i2___lwdiv
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     311
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _C_DOOR_LockAll
   _C_DOOR_ReadSensors
   _C_DOOR_SendStates
     _D_UART_Write
       _printf
         ___lwdiv
         _putch
     _commandAndMessage
   _C_DOOR_UnlockAll
   _D_PORT_Init
   _D_PWM_Init
   _D_PWM_SetPwm
   _D_TMR0_Init
     _D_TMR0_Enable
   _D_TMR1_Enable
   _D_TMR1_Init
     _D_TMR1_Enable
   _D_UART_Enable
   _D_UART_Init
     _D_UART_Enable
     ___lldiv
   _D_UART_Read
   _D_UART_Write
     _printf
       ___lwdiv
       _putch
   _initDoors
     _C_DOOR_Init
     _C_DOOR_LockAll
     _D_TMR0_Enable
   _setAlarm
   _strcmp

 _LowISR (ROOT)

 _HighISR (ROOT)
   _fillDataBuffer
     _acknowledge
       i2_printf
         i2___lwdiv
         i2_putch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      21        0.0%
BIGRAM             3EE      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      B6       7       71.1%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      8B       5       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      49       1       77.7%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     18A      11        0.0%
DATA                 0      0     18A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Apr 01 16:10:35 2018

                         l22 0EF6                           l23 0DD2                           l40 14C0  
                         l41 1444                           l17 1622                           l34 136E  
                         l35 12DE                           l28 1420                           l29 1392  
                         l46 1204                           l47 114A                           l48 1202  
                __CFG_BOR$ON 000000                           bsr 000FE0           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 _ackCharacter 0042                 __CFG_CP0$OFF 000000  
               __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000  
                        l213 1802                          l214 17FC                          l320 0980  
                        l161 187C                          l305 18BC                          l322 09B2  
                        l314 08C2                          l331 0A6E                          l315 08DA  
                        l236 195C                          l340 0ACA                          l324 09EC  
                        l341 0A94                          l333 0A78                          l317 0924  
                        l166 1852                          l318 0950                          l167 1848  
                        l343 0A9E                          l344 0AA8                          l328 0A3C  
                        l337 0AAE                          l329 0A52                          l370 0C92  
                        l338 0A90                          l195 1970                          l380 0D26  
                        l375 0C8A                          l376 0CF0                          l368 0C72  
                        l369 0C82                          l379 0D7E                          l734 150C  
                        l735 1500                          l738 1540                          l739 154E  
                        l931 17A0                          l932 1796                          l791 16E0  
                        l792 16EA                          l787 16C0                          l788 16B8  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _pwm 003B                          prod 000FF3                          wreg 000FE8  
               __CFG_FOSC$HS 000000                 __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000  
                       l2203 0D18                         STR_1 0835                         STR_2 0833  
                       STR_3 081E                         STR_4 081A                         STR_5 0822  
                       STR_6 0837                         STR_7 0837                         STR_8 082D  
                       STR_9 082B                         u2001 10D4                         u2011 1112  
                       u2110 14BA                         u2120 14BC                         u2104 14AC  
                       u2105 14A8                         u2060 1510                         u2151 1198  
                       u2401 08EE                         u2410 0902                         u2084 1334  
                       u2340 17D6                         u2085 1330                         u1710 16C4  
                       u2270 15C4                         u2275 15B8                         u2291 1832  
                       u1820 0D20                         u2428 0906                         u1830 0D88  
                       u2607 09DE                         u1840 0DB4                         u2617 1136  
                       u1690 185E                         u2627 184C                         u1790 0CBE  
                       u1847 0DAA                         u2577 0846                         u1954 0EC2  
                       u1955 0EBE                         u2587 088E                         u1964 0EE8  
                       u1797 0CB4                         u1965 0EE4                         u2597 08B6  
                       u1984 13E6                         u1985 13E2                 ?_C_DOOR_Init 0001  
                       _baud 0041                         _main 083A                         _read 0028  
                       _lock 003C                         _tick 003D                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0006                         indf0 000FEF  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf1 000FE7  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 004A            C_DOOR_UnlockAll@d 00E1                         prodh 000FF4  
                       prodl 000FF3                         start 00EC                __CFG_IESO$OFF 000000  
            __end_of_HighISR 12D6              __end_ofi2_putch 18F0                __CFG_MCLRE$ON 000000  
               ___param_bank 000000                  ?_D_PWM_Init 0001            initDoors@door_cnt 00E2  
             _startCharacter 0048              D_PWM_SetPwm@pwm 00D9                __CFG_PLLDIV$5 000000  
       commandAndMessage@com 00E3      __size_of_C_DOOR_LockAll 00B2         commandAndMessage@mes 00E5  
                      ?_main 0001                        STR_10 0831                        STR_11 0829  
                      STR_12 082F                        STR_13 082D                        STR_14 0825  
                      STR_15 0827                        STR_16 0831                        STR_17 0809  
            __end_of___lldiv 1560                        u20011 10D0                        u20111 110E  
            __end_of___lwdiv 16F4                        i2l120 0C3C                        i1l352 0078  
                      i2l121 0ADA                        i1l353 0094                        i2l130 0B4A  
                      i2l122 0AFE                        i1l354 008E                        i2l131 0B6C  
                      i1l355 0092                        i2l142 0C16                        i2l134 0B8E  
                      i2l126 0B06                        i2l143 0C2E                        i2l135 0BB0  
                      i2l127 0B28                        i2l145 0C36                        i2l138 0BD2  
                      i2l139 0BF4                        i2l166 18E0                        i2l167 18D6  
                      i2l176 128A                        i2l177 127A                        i2l370 0F3A  
                      i2l179 1284                        i2l380 0FC8                        i2l375 0F32  
                      i2l376 0F92                        i2l368 0F1C                        i2l369 0F2C  
                      i2l379 101E                        i2l791 1732                        i2l792 173C  
                      i2l787 1712                        i2l788 170A                        _RCREG 000FAE  
                      _TMR1H 000FCF                        _TMR1L 000FCE         __size_of_acknowledge 0060  
                      _SPBRG 000FAF                        _PORTA 000F80                        _PORTB 000F81  
                      _PORTC 000F82                __CFG_USBDIV$1 000000                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TXREG 000FAD  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000   __size_of_commandAndMessage 0060               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               C_DOOR_Init@cnt 00DC  
             __CFG_EBTRB$OFF 000000                        _doors 0060                        _putch 183C  
                      pclath 000FFA                        tablat 000FF5                 ?_D_UART_Init 00E6  
               ?_D_UART_Read 00D9                 ?_D_TMR0_Init 0001                        plusw0 000FEB  
               ?_D_TMR1_Init 0001                        plusw2 000FDB                        status 000FD8  
                      wtemp6 004B                 ?_D_PORT_Init 0001                _stopCharacter 0046  
           __end_ofi2_printf 105A           __size_ofi2___lwdiv 0052              __initialization 1746  
               __end_of_main 0AD6                   i2printf@ap 000F                   i2putch@max 0002  
                     ??_main 01B4                __activetblptr 000003              __CFG_CCP2MX$OFF 000000  
      commandAndMessage@door 00D9                       _ADCON1 000FC1                       _CCPR1L 000FBE  
        __size_of_D_PWM_Init 001E                       ?_putch 0001                       i2l2243 0FBA  
           _C_DOOR_UnlockAll 12D6                    ??_HighISR 0016                    ??i2_putch 0001  
                     _LowISR 0018               __CFG_XINST$OFF 000000                    ??___lldiv 00E1  
              setAlarm@alarm 00D9              C_DOOR_LockAll@d 00E1                    ??___lwdiv 00DD  
                     clear_0 176C                       clear_1 1778                       clear_2 1784  
                     _printf 0C66             __end_of_setAlarm 197E                       _strcmp 1794  
               __pdataCOMRAM 0042        D_UART_Init@interrupts 00EA            __end_ofi2___lwdiv 1746  
               __mediumconst 0000                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                ?_D_UART_Write 01A6              D_UART_Init@baud 00E8  
            D_UART_Init@name 00E6   __end_of_C_DOOR_ReadSensors 14DC                   __accesstop 0060  
    __end_of__initialization 178A              __CFG_PBADEN$OFF 000000                ___rparam_used 000001  
       __size_of_C_DOOR_Init 0152               __pcstackCOMRAM 0001                 C_DOOR_Init@d 00DD  
              __end_of_putch 1864             _messageCharacter 0044                  i2printf@idx 000E  
                i2printf@val 0011                ?_D_PWM_SetPwm 0001               _C_DOOR_LockAll 138A  
     __size_of_D_UART_Enable 0024                  i2putch@data 0001               ??_D_UART_Write 01AA  
     __size_of_D_TMR0_Enable 0014                    ?i2_printf 0008       __size_of_D_TMR1_Enable 0014  
          _C_DOOR_SendStates 1142                      ??_putch 00D9           ?_C_DOOR_SendStates 0001  
                 __pbssBANK0 0060                   __pbssBANK1 0100           __size_of_initDoors 0022  
           _communicationCnt 003E         __size_of_D_UART_Init 0080         __size_of_D_UART_Read 002C  
       __size_of_D_TMR0_Init 0024         __size_of_D_TMR1_Init 0020          ??_C_DOOR_SendStates 01AB  
                    ?_LowISR 0001         __size_of_D_PORT_Init 001E                 ??_D_PWM_Init 00D9  
     __end_of_C_DOOR_LockAll 143C               ??_D_PWM_SetPwm 00D9                   _deviceName 0034  
                    ?_printf 00E0                      ?_strcmp 00D9    __end_of_C_DOOR_SendStates 1220  
    __size_of_fillDataBuffer 0190                   ??i2_printf 000D          D_UART_Enable@enable 00D9  
         __end_of_D_PWM_Init 192E              __CFG_VREGEN$OFF 000000                      _HighISR 0008  
                    i2_putch 18CE                _D_UART_Enable 1864                    ?_setAlarm 0001  
                    __Hparam 0000                      __Lparam 0000              __size_of_LowISR 00D4  
              _D_TMR0_Enable 1960                _D_TMR1_Enable 194C                   _readBuffer 0100  
                    ___lldiv 14DC              ?_C_DOOR_LockAll 0001                      ___lwdiv 16A0  
               __psmallconst 0800          C_DOOR_ReadSensors@d 00DD              __CFG_STVREN$OFF 000000  
              ??_acknowledge 0015                      __pcinit 1746                      __ramtop 0800  
   __end_of_C_DOOR_UnlockAll 138A                      __ptext0 083A                      __ptext1 1794  
                    __ptext2 1974                      __ptext3 18AC                      __ptext4 138A  
                    __ptext5 0DC0                      __ptext6 1810                      __ptext7 1560  
                    __ptext8 14DC                      __ptext9 1864              __size_of_printf 015A  
          __end_of_initDoors 18CE                    _T0CONbits 000FD5              __size_of_strcmp 004E  
          __end_of_hexpowers 0809                    _T1CONbits 000FCD                    _T2CONbits 000FCA  
       C_DOOR_SendStates@com 01AE         C_DOOR_SendStates@mes 01B1               __pintcode_body 1220  
       end_of_initialization 178A          D_TMR0_Enable@enable 00D9                      int_func 1220  
             ?_D_UART_Enable 0001                   ??_setAlarm 00D9              ___lldiv@divisor 00DD  
             ?_D_TMR0_Enable 0001              ___lldiv@counter 00E5               ?_D_TMR1_Enable 0001  
       __end_of_D_UART_Write 1142                    _RCSTAbits 000FAB                      printf@c 00EA  
                    printf@f 00E0                      postdec1 000FE5                      postdec2 000FDD  
                    postinc0 000FEE                      postinc1 000FE6                      postinc2 000FDE  
                    strcmp@r 00DE                    _PORTBbits 000F81                    _PORTCbits 000F82  
 __size_of_C_DOOR_SendStates 00DE                    _TRISCbits 000F94          __end_of_acknowledge 16A0  
          i2___lwdiv@divisor 0003                    i2___lwdiv 16F4            i2___lwdiv@counter 0005  
       __end_of_D_PWM_SetPwm 1810                  _CCP1CONbits 000FBD                    _TXSTAbits 000FAC  
         _C_DOOR_ReadSensors 143C               __end_of_LowISR 00EC                  _BAUDCONbits 000FB8  
        ?_C_DOOR_ReadSensors 0001                __pidataCOMRAM 197E               __end_of_printf 0DC0  
             __end_of_strcmp 17E2                 i2printf@flag 000D                 i2printf@prec 0013  
        start_initialization 1746               _fillDataBuffer 0AD6                    i2printf@c 0014  
                  i2printf@f 0008                   ?i2___lwdiv 0001            __size_ofi2_printf 0148  
       ??_C_DOOR_ReadSensors 00D9              ??_D_UART_Enable 00D9                ??_C_DOOR_Init 00D9  
            ??_D_TMR0_Enable 00D9              ??_D_TMR1_Enable 00D9                     ??_LowISR 00C4  
           __CFG_LPT1OSC$OFF 000000                  _acknowledge 1640             D_UART_Write@data 01A8  
                   ??_printf 00E3                 _lockDelayCnt 003F                     ??_strcmp 00DD  
     __end_of_fillDataBuffer 0C66                  __pbssCOMRAM 0028                __pcstackBANK0 00C4  
              __pcstackBANK1 01A6                ??_D_UART_Init 00EB                ??_D_UART_Read 00DF  
              ??_D_TMR0_Init 00DA                ??_D_TMR1_Init 00DA                     ?_HighISR 0001  
                   ?i2_putch 0001        __size_of_D_UART_Write 00E8                ??_D_PORT_Init 00D9  
           ??_C_DOOR_LockAll 00D9             ___lwdiv@dividend 00D9          __end_of_C_DOOR_Init 0F12  
          __size_of_setAlarm 000A                    __pintcode 0008                     ?___lldiv 00D9  
                   ?___lwdiv 00D9                  __pintcodelo 0018           fillDataBuffer@data 0015  
          ?_C_DOOR_UnlockAll 0001              ?_fillDataBuffer 0001                  __smallconst 0800  
         ??_C_DOOR_UnlockAll 00D9        __size_of_D_PWM_SetPwm 002E                    _initDoors 18AC  
               _D_UART_Write 105A                    _hexpowers 0801                    _readReady 0040  
           ___lwdiv@quotient 00DE                  ??i2___lwdiv 0005               __size_of_putch 0028  
        D_TMR1_Enable@enable 00D9                     _IPR1bits 000F9F                     _PIE1bits 000F9D  
        __end_of_D_UART_Init 15E0          __end_of_D_UART_Read 183C                     i2u174_40 18EA  
                   i2u190_40 0FC2                     i2u191_40 1026                     i2u263_47 18DA  
                   i2u176_40 1716                     i2u192_40 1050                     i2u192_47 1046  
                   _PIR1bits 000F9E                     i2u187_40 0F64                     i2u187_47 0F5A  
        __end_of_D_TMR0_Init 18AC          __end_of_D_TMR1_Init 1910                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000          __end_of_D_PORT_Init 194C                 _D_PWM_SetPwm 17E2  
                 printf@flag 00E3                   printf@prec 00E9                   ?_initDoors 0001  
                   i2_printf 0F12                  _INTCON2bits 000FF1                    copy_data0 175A  
                _C_DOOR_Init 0DC0             __size_of_HighISR 12CE             __size_ofi2_putch 0022  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___lldiv 0084  
           __size_of___lwdiv 0054              ___lwdiv@divisor 00DB              ___lwdiv@counter 00DD  
                   __ptext10 18F0                     __ptext11 194C                     __ptext20 105A  
                   __ptext12 1888                     __ptext21 0C66                     __ptext13 1960  
                   __ptext30 18CE                     __ptext22 183C                     __ptext14 17E2  
                   __ptext31 16F4                     __ptext23 16A0                     __ptext15 1910  
                   __ptext24 143C                     __ptext16 192E                     __ptext17 12D6  
                   __ptext18 1142                     __ptext27 0AD6                     __ptext19 15E0  
                   __ptext28 1640                     __ptext29 0F12                     _door_cnt 0037  
                _D_UART_Init 1560                  _D_UART_Read 1810                     _oldAlarm 0039  
                   _newAlarm 003A                     _readData 002E                  _D_TMR0_Init 1888  
                _D_TMR1_Init 18F0                __size_of_main 029C           C_DOOR_SendStates@d 01B3  
                _D_PORT_Init 192E                     _setAlarm 1974                     int$flags 004A  
                  printf@idx 00E4                    printf@val 00E7                 ?_acknowledge 0001  
      __CFG_CPUDIV$OSC1_PLL2 000000                    putch@data 00D9                   _INTCONbits 000FF2  
                ??_initDoors 00E2            _commandAndMessage 15E0                     intlevel1 0000  
                   intlevel2 0000  __size_of_C_DOOR_ReadSensors 00A0           ?_commandAndMessage 00D9  
           ___lldiv@dividend 00D9        __end_of_D_UART_Enable 1888        __end_of_D_TMR0_Enable 1974  
        ??_commandAndMessage 00E7        __end_of_D_TMR1_Enable 1960                   _D_PWM_Init 1910  
                   printf@ap 00E5             ??_fillDataBuffer 0015          D_UART_Write@command 01A6  
                   putch@max 00DA                     strcmp@s1 00D9                     strcmp@s2 00DB  
           ___lldiv@quotient 00E1    __end_of_commandAndMessage 1640    __size_of_C_DOOR_UnlockAll 00B4  
